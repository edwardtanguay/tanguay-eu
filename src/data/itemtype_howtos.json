[
{"id":1,"category":"DPN","title":"How to send a variable from controller to front end","body":"\t- in controller:\n\t\t---------------------\n\t\tthat.responseData.firstName = 'nnn';\n\t\t---------------------\n\t- in page:\n\t\t---------------------\n\t\tthat.firstName = response.data.firstName;\n\t\t---------------------","points":10,"extras":"$rank=3.5","systemWhenCreated":"2019-05-13 14:16:01","systemWhoCreated":"systemUnknown"},{"id":3,"category":"CSS","title":"How to style all but the first in a series of elements","body":"- you have this list of items:\n\t-------------------------\n\t<div class=\"infoArea\">\n\t\t<div class=\"info\">\n\t\t\t<div class=\"title\">First Title</div>\n\t\t\t<div class=\"content\">This is the first content.</div>\n\t\t</div>\n\t\t<div class=\"info\">\n\t\t\t<div class=\"title\">Second Title</div>\n\t\t\t<div class=\"content\">This is the second content.</div>\n\t\t</div>\n\t\t<div class=\"info\">\n\t\t\t<div class=\"title\">Third Title</div>\n\t\t\t<div class=\"content\">This is the third content.</div>\n\t\t</div>\n\t</div>\t\t\n\t-------------------------\n- you style it with this to separate it\n\t-------------------------------\n\t.outputArea div.codeChunk .title {\n\t\tmargin-top: 10px;\n\t}\t\t\n\t-------------------------------\n- PROBLEM: you want to not have the leading space in front of the first item\n- SOLUTION: add `:not(:first-child)` to the \n\t-------------------------------\n\t.outputArea div.codeChunk:not(:first-child) .title {\n\t\tmargin-top: 10px;\n\t}\t\t\n\t-------------------------------","points":20,"extras":"$jsfiddle=a75uwjcp; $rank=4.5","systemWhenCreated":"2019-04-20 14:36:14","systemWhoCreated":"et"},{"id":4,"category":"JavaScript","title":"How to get parts of an array out of an array","body":"- you have: \n\t---------------------------------\n\tconst elements = [\n\t\t{ id: 20, name: 'element 1' },\n\t\t{ id: 23, name: 'element 2' },\n\t\t{ id: 12, name: 'element 3' },\n\t\t{ id: 4, name: 'element 4' },\n\t];\t\n\t---------------------------------\n- you need: [20,23,12,4] \n- use .map like this:\n\t-----------------------------------\n\tconst ids = elements.map(item => item.id);\n\tconst names = elements.map(item => item.name);\n\tconsole.log(ids);\n\tconsole.log(names);\t\n\t-----------------------------------","points":20,"extras":"","systemWhenCreated":"2019-04-20 14:36:14","systemWhoCreated":"systemUnknown"},{"id":5,"category":"Vue.js 2.0","title":"Basic Vue 2.0 page to display a variable from code and a button that changes that variable","body":"- HTML\n\t-----------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t<title>test</title>\n\t\t<style>\n\t\t\t.information {\n\t\t\t\tcolor: orange;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div class=\"information\">{{message}}</div>\n\t\t\t<button @click=\"changeTheText\">Change the Text</button>\n\t\t</div>\n\n\t\t<script>\n\t\t\tconst app = new Vue({\n\t\t\t\tel: \"#app\",\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: ''\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize: function () {\n\t\t\t\t\t\tthis.message = 'test';\n\t\t\t\t\t},\n\t\t\t\t\tchangeTheText: function () {\n\t\t\t\t\t\tthis.message = 'you clicked the button';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\n\t</html>\n\t-------------------","points":50,"extras":"$jsfiddle=hpcnq1b6","systemWhenCreated":"2019-04-20 17:04:43","systemWhoCreated":"systemUnknown"},{"id":6,"category":"JavaScript","title":"Code to purposely crash a node app (e.g. if you want to test `forever`) ","body":"- add this code to where you want the code to stop\n\t--------------------------------\n\tsetTimeout(function () {\n\t\t  throw new Error('We crashed!!!!!');\n\t}, 10);    \n\t--------------------------------\n- for extra credit:\n\t- experiment with `setTimeout`\n\t- experiment with `setInterval`","points":5,"extras":"$excludeFromLearnBits","systemWhenCreated":"2019-04-27 18:19:24","systemWhoCreated":"systemUnknown"},{"id":7,"category":"DPN","title":"How to make icon on Windows to start Datapod for Node","body":"- make directory: c:\\edward\\start\n\t- create file: `start_n49902_dpnp.bat`\n\t\t---------------------------------------\n\t\tcd C:\\edward\\nodewebs\\n49902_dpnp\n\t\tnodemon server.js      \n\t\t(or this: forever start -c nodemon server.js)  \n\t\t---------------------------------------\n\t- right-click bat file: create shortcut\n\t\t- rename shortcut to `start_n49902_dpnp`\n\t- right-click shortcut: properties \n\t\t- change icon (1 to right, blue screen)\n\t\t- type `explorer ` in front of path in `target`\n\t\t- `OK` (enter)\n\t- drag shortcut to task bar\n- click on icon in taskbar\n\t- click on C:\\ icon (upper-left) and properties\n\t- opacity 80%\n\t- font size: 12\n- minimize\n- now when you want to run other CMD windows, right-click, right-click, open\n- trouble shooting:\n\t- you get the error \"nodemon command is not recognized\"\n\t\t- this is because it was not able to be installed globally\n\t\t- so change the above .bat file to:\n\t\t\t---------------------------------------\n\t\t\tcd c:\\edward\\dpn\n\t\t\tnode_modules\\.bin\\nodemon server.js      \n\t\t\t---------------------------------------","points":20,"extras":"","systemWhenCreated":"2019-04-20 14:54:11","systemWhoCreated":"systemUnknown"},{"id":9,"category":"JavaScript","title":"How to iterate through items in an array and through properties in an object","body":"- you want to iterate through an array like this: \n\t----------------\n\tconst colors = ['red','blue','green'];\n\t----------------\n- or an array like this:\n\t----------------\n\tconst users = [\n \t\t{\n\t\t\tid : 232,\n\t\t\tlogin: 'jim',\n\t\t\tfirstName : 'Jim',\n\t\t\tlastName : 'Jones'\n\t\t},\n \t\t{\n\t\t\tid : 325,\n\t\t\tlogin: 'angie',\n\t\t\tfirstName : 'Angie',\n\t\t\tlastName : 'Axelton'\n\t\t},\n \t\t{\n\t\t\tid : 634,\n\t\t\tlogin: 'joan',\n\t\t\tfirstName : 'Joan',\n\t\t\tlastName : 'Jambler'\n\t\t}\n\t];\n\t----------------\n- and you want to iterate through the properties of an object like this:\n\t----------------\n\tconst users = {\n\t\tjim : {\n\t\t\tid : 232,\n\t\t\tfirstName : 'Jim',\n\t\t\tlastName : 'Jones'\n\t\t},\n\t\tangie : {\n\t\t\tid : 325,\n\t\t\tfirstName : 'Angie',\n\t\t\tlastName : 'Axelton'\n\t\t},\n\t\tjoan : {\n\t\t\tid : 634,\n\t\t\tfirstName : 'Joan',\n\t\t\tlastName : 'Jambler'\n\t\t}\n\t};\n\t----------------\n- for arrays, generally use `for ... of`\n\t--------------------\n\tfor(const color of colors) {\n\t\tconsole.log(color);\n\t}\n\t--------------------\n- also for arrays, if you need the index, you can also use `for ... in`\n\t--------------------\n\tfor(const key in colors) {\n\t\tconsole.log(`${key} = ${colors[key]}`);\n\t}\n\t--------------------\n- for objects, only use `for ... in` so that you can get the key as long as the value\n\t--------------------\n\tfor(const key in users) {\n\t\tconst user = users[key];\n\t\tuser.login = key; // if you are passing the object to the front in, you often want to put the key in the object as a property\n\t\tconsole.log(user);\n\t}\t\n\t--------------------\n- note: if you try to use `for ... of` on an object, you will get the error `users is not iterable`","points":40,"extras":"$webdev=iterationObjectProperties","systemWhenCreated":"2019-04-20 14:55:18","systemWhoCreated":"systemUnknown"},{"id":10,"category":"vscode","title":"How to set up a macro ","body":"- this shows you how to set up a macroconsole.log debug macro\n- `File > Preferences > User Snippets`\n- select `javascript.json`\n- add the following text:\n\t----------------------------\n\t\"debug variable\": {\n\t\t\"prefix\": \"c\",\n\t\t\"body\": \"console.log('$1: ' + $2);\"\n\t}\n\t----------------------------\n- in a javascript file, press `cc` and then `TAB`","points":30,"extras":"","systemWhenCreated":"2019-04-20 14:54:11","systemWhoCreated":"systemUnknown"},{"id":11,"category":"vscode","title":"How to compare two files","body":"- this shows you how to diff two files in Visual Studio Code\n- right-click on file name in outline, and choose `Select for Compare`\n- right-click another file in outline, and choose `Compare with Selected`\t","points":10,"extras":"$rank=4.8","systemWhenCreated":"2019-04-20 14:58:21","systemWhoCreated":"systemUnknown"},{"id":12,"category":"CSS","title":"How to style all but the first in a list","body":"\t- the HTML\n\t\t-------------------------\n\t\t<div class=\"infoArea\">\n\t\t\t<div class=\"info\">\n\t\t\t\t<div class=\"title\">First Title</div>\n\t\t\t\t<div class=\"content\">This is the first content.</div>\n\t\t\t</div>\n\t\t\t<div class=\"info\">\n\t\t\t\t<div class=\"title\">Second Title</div>\n\t\t\t\t<div class=\"content\">This is the second content.</div>\n\t\t\t</div>\n\t\t\t<div class=\"info\">\n\t\t\t\t<div class=\"title\">Third Title</div>\n\t\t\t\t<div class=\"content\">This is the third content.</div>\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t-------------------------\n\t- the style\n\t\t-------------------------------\n\t\t.outputArea div.codeChunk:not(:first-child) .title {\n\t\t\tmargin-top: 10px;\n\t\t}\t\t\n\t\t-------------------------------","points":20,"extras":"","systemWhenCreated":"2019-04-20 14:58:21","systemWhoCreated":"systemUnknown"},{"id":13,"category":"regex","title":"In Notepad++ and VSCode, replace all varied brackets at the beginning of lines in a todo list with a simple hyphen","body":"- in Notepad++ copy in this text\n\t----------------------\n\t[x] get money\n\t[] go to the store\n\t[..] install software\n\t[] get books\n\t[x] check out new book on Amazon\n\t[..] go to bank\n\t[] replace all [] with [x] in main todo list\n\t[] organize shelf\n\t[] clean desk\n\t----------------------\n- you want to make it look like this:\n\t----------------------\n\t-  get money\n\t-  go to the store\n\t-  install software\n\t-  get books\n\t-  check out new book on Amazon\n\t-  go to bank\n\t-  replace all [] with [x] in main todo list\n\t-  organize shelf\n\t-  clean desk\n\t----------------------\n- search and replace `\\[.*\\] ` with `- `\n- notice that it also deletes those in the middle of the line, which was not your intention\n- and notice that it what it means to be \"greedy\"\n\t- if you wanted to take these out as well, then you would have to tell it to be non-greedy: `\\[.*?\\] `\n- but you want to only replace those at the beginning of the line, so do this: `^\\[.*\\] `\n- do the same thing in Visual Studio Code and notice that you can see the selections as you type the regular expression","points":40,"extras":"","systemWhenCreated":"2019-04-20 14:58:21","systemWhoCreated":"systemUnknown"},{"id":14,"category":"regex","title":"Indent blocks of lines below specific lines in a text","body":"- you want to indent each of the lines after lines that start with \"TEXT ??\"\n\t------------------------------\n\tTEXT 01 - This is a text about nnnnnn\n\tThis is an item.\n\tThis is some information.\n\tTEXT 02 - This is a text about nnnnnn\n\tThis is an item.\n\tThis is some information.\n\tThis is an item.\n\tThis is some information.\n\tTEXT 03 - This is a text about nnnnnn\n\tThis is an item.\n\tThis is some information.\n\tTEXT is an item.\n\tThis is some information.\n\tThis is an item.\n\tThis is some information.\n\t------------------------------\n- try in Visual Studio Code, Notepad++ and Regex101\n\t-----------------\n\tsearch: ^(?!TEXT \\d\\d)\n\treplace: \\t- \n\t-----------------\n- explanation: `?!` is called \"negative look ahead\", i.e. searches for text that does not occur after another marker, in this case, the beginning of the line (`^`)","points":30,"extras":"$rank=4.7","systemWhenCreated":"2019-04-20 14:58:21","systemWhoCreated":"systemUnknown"},{"id":15,"category":"sqlite","title":"Create table in DB Browser for SQLite","body":"- download and install [DB Browser for SQLite](https://sqlitebrowser.org/)\n- create table\n\t------------------------------------\n\tCREATE TABLE \"howtos\" (\n\t\t`id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t`category` TEXT,\n\t\t`title` TEXT,\n\t\t`body` TEXT,\n\t\t`systemWhenCreated` TEXT,\n\t\t`systemWhoCreated` TEXT\n\t)\n\t------------------------------------\n- add and sort data","points":20,"extras":"$rank=4.6","systemWhenCreated":"2019-04-20 15:03:03","systemWhoCreated":"systemUnknown"},{"id":18,"category":"vscode","title":"How to search and replace in a selection","body":"- `CTRL-H`\n- select text\n- click \"Find in selection\" icon on right\n- enter find and replace strings\n- click replace-all icon","points":10,"extras":"$rank=4.5","systemWhenCreated":"2019-04-20 19:07:30","systemWhoCreated":"systemUnknown"},{"id":22,"category":"less","title":"How to install and set up less in VSCode","body":"- intro, you have:\n\t--------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<title>test</title>\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t</head>\n\n\t<body>\n\t\t<h4>Main Info</h4>\n\t\t<p>This is the info.</p>\n\t\t<h4>More Info</h4>\n\t\t<p>This is more info. This is more info. This is more info. This is more info.</p>\n\t</body>\n\n\t</html>\n\t--------------------------\n- with css:\n\t---------------------------\n\th4 {\n\t\tbackground-color: navy;\n\t\tcolor           : yellow;\n\t}\n\n\tp {\n\t\tcolor: navy;\n\t}\n\t---------------------------\n- `npm install -g less`\n- `npm install -g less-watch-compiler`\n- `less-watch-compiler less css`\n- or make file in root: `less-watch-compiler.config.json`\n\t------------------------------\n\t{\n\t\t\"watchFolder\": \"less\",\n\t\t\"outputFolder\": \"public\"\n\t}\t\n\t------------------------------\n- type: `less-watch-compiler`\n- note: I fixed an error once with: `npm install -g less`\n- less can now be:\n\t--------------------------\n\t@color_main: green;\n\n\th4 {\n\t\tbackground-color: @color_main;\n\t\tcolor           : yellow;\n\t}\n\n\tp {\n\t\tcolor: @color_main;\n\n\t\tb {\n\t\t\tcolor: red; \n\t\t}\n\t}\n\t-------------------------------","points":20,"extras":"$rank=4.6","systemWhenCreated":"2019-04-27 18:20:54","systemWhoCreated":"systemUnknown"},{"id":23,"category":"regex","title":"Remove and replace XML attributes from XML elements with regex","body":"\t- copy the following text into Notepad++\n\t\t--------------------------------------\n\t\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\t\n\t\t<reports>\t\n\t\t\t<report idCode=\"2018\">\t\n\t\t\t\t<item date=\"2018-12-13\" revision=\"1954\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-11\" revision=\"34534\" dev=\"christiana\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"323\" dev=\"robert\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2348\" dev=\"christiana\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"9780\" dev=\"steffen\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"23323\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1954\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"193254\" dev=\"christiana\" category=\"\" type=\"Security\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"19234\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1954\" dev=\"anna\" category=\"\" type=\"New Feature\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"193254\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"19233\" dev=\"robert\" category=\"\" type=\"New Feature\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"19325\" dev=\"anna\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"12954\" dev=\"robert\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1915\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"s-1914\" dev=\"steffen\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1954\" dev=\"anna\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2342\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"s-1234\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"3434\" dev=\"christiana\" category=\"\" type=\"New Feature\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2343\" dev=\"christiana\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2343\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t</report>\n\t\t</reports>\n\t\t--------------------------------------\n\t- consider: how would you remove all the `revision` attributes?\n\t- delete the `revision` tags\n\t\t- `revision=\"\\d*\"`\n\t\t\t- doesn't get the ones that start with `s-`\n\t\t\t\t- so try this: revision=`(s-)?\\d*`\n\t\t- search and replace in Notepad++\n\t- delete the `dev` tags\n\t\t- `dev=\".*\"`\n\t\t- note that it is too greedy, so use:\n\t\t\t- `dev=\".*?\"`\n\t\t- search and replace in Notepad++\n\t- copy this text into Notepad++ again:\n\t\t--------------------------------------\n\t\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\t\t<reports>\t\n\t\t\t<report idCode=\"2018\">\t\n\t\t\t\t<item date=\"2018-12-13\" revision=\"1954\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-11\" revision=\"34534\" dev=\"christiana\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"323\" dev=\"robert\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2348\" dev=\"christiana\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"9780\" dev=\"steffen\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"23323\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1954\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"193254\" dev=\"christiana\" category=\"\" type=\"Security\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"19234\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1954\" dev=\"anna\" category=\"\" type=\"New Feature\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"193254\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"19233\" dev=\"robert\" category=\"\" type=\"New Feature\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"19325\" dev=\"anna\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"12954\" dev=\"robert\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1915\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"s-1914\" dev=\"steffen\" category=\"\" type=\"Bug\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"1954\" dev=\"anna\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2342\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"s-1234\" dev=\"robert\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"3434\" dev=\"christiana\" category=\"\" type=\"New Feature\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2343\" dev=\"christiana\" category=\"\" type=\"Enhancement\"/>\n\t\t\t\t<item date=\"2018-12-12\" revision=\"2343\" dev=\"steffen\" category=\"\" type=\"Enhancement\"/>\n\t\t\t</report>\n\t\t</reports>\n\t\t--------------------------------------\n\t- now you want to replace the number in revision with `0000`\n\t\t- search for: `revision=\"(.*?)\"`\n\t\t- replace with: `revision=\"0000\"`\n\t- undo\n\t- now you want to reuse what you remove in a different way\n\t\t- e.g. replace `revision=\"xxxx\"` with `revision=\"01\" ticket=\"xxxx\"`\n\t\t\t- search for: `revision=\"(.*?)\"`\n\t\t\t- replace with: `revision=\"0000\"`","points":25,"extras":"","systemWhenCreated":"2019-05-13 14:07:02","systemWhoCreated":"systemUnknown"},{"id":24,"category":"JavaScript","title":"How to determine if a string contains another string with browser-compatibility","body":"- use .includes()\n\t--------------------------\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"message\">first</div>\n\n\t\t<script>\n\t\t\t$(function () {\n\t\t\t\tconst name = \"this is a test\";\n\t\t\t\tif (name.includes('nnn')) {\n\t\t\t\t\t$('#message').html('yes');\n\t\t\t\t} else {\n\t\t\t\t\t$('#message').html('no');\n\t\t\t\t}\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\t\n\t--------------------------\n- check in Internet Explorer 11\n\t- gets error\n\t- fix with this:\n\t\t-------------------------\n\t\tif (name.indexOf('nnn') !== -1) {\n\t\t-------------------------\n- this points out why you have to be aware what JavaScript function you use, since Internet Explorer often doesn't support it\n\t- see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes","points":20,"extras":"$rank=3.7","systemWhenCreated":"2019-05-13 13:27:30","systemWhoCreated":"systemUnknown"},{"id":25,"category":"regex","title":"Search and replace with regular expressions","body":"- in **Notepad++**, you have a text such as:\n\t------------------------\n\tthis and sand and band ok\n\t------------------------\n\t- you want to search for the word `and` and replace it with `or`\n\t- the problem is that you will also change `sand` to `sor`, etc.\n- therefore, use regular expressions:\n\t- search for: `\\band\\b`\n\t- replace with: `or`\n- also possible in **Visual Studio Code** and **Google Drive**","points":5,"extras":"$rank=4.5","systemWhenCreated":"2019-04-27 16:06:52","systemWhoCreated":"systemUnknown"},{"id":26,"category":"jquery","title":"Make word flashcards with jQuery","body":"- build up from jquery to regex and dynamic regex:\n\t-----------------------------\n\t<!doctype html>\n\t<html>\n\t<head>\n\t   <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script>\n\t   <style>\n\t\t.back {\n\t\t\tdisplay: none;\n\t\t\tbackground-color: #ddd;\n\t\t}\n\t\t.front {\n\t\t\tbackground-color: #eee;\n\t\t\tcursor: pointer;\n\t\t}\n\t   </style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"main\">\n\t\t111 This is a test of regex <span class=\"front\">front</span><span class=\"back\">the back</span>.\n\n\t\t222 This is a test of regex [front/back]. This is also a test of [111/222].\n\n\t\t</div>\n\n\t\t<script>\n\t\t\t$(function() {\n\t\t\t\t//const mainHtml = $(\"#main\").html();\n\n\t\t\t\t// BASIC REGEX\n\t\t\t\t// TEXT: This is the text.\n\t\t\t\t// const parsedHtml = mainHtml + \"nnn\";\n\t\t\t\t// const parsedHtml = mainHtml.replace(/(text)/, '<i>$1</i>'); \n\n\t\t\t\t// WITH WORD FLASHCARD\n\t\t\t\t// TEXT: This is a test of regex [front/back]. \n\t\t\t\t// build this at regex101: \\[(.*)\\/(.*)\\]\n\t\t\t\t// const parsedHtml = mainHtml.replace(/\\[(.*)\\/(.*)\\]/, '(<span style=\"color: red\">$1</span>) (<span style=\"color: green\">$1</span>)'); \n\n\t\t\t\t// MULTIPLE\n\t\t\t\t// TEXT: This is a test of regex [front/back]. This is also a test of [111/222].\n\t\t\t\t// add ungreedy: https://stackoverflow.com/questions/2824302/how-to-make-regular-expression-into-non-greedy\n\t\t\t\t// const parsedHtml = mainHtml.replace(/\\[(.*?)\\/(.*?)\\]/g, '(<span style=\"color: red\">$1</span>) (<span style=\"color: green\">$1</span>)'); \n\n\t\t\t\t// INTERACTIVE TEST FIRST\n\t\t\t\t// TEXT: This is a test of regex <span class=\"front\">front</span><span class=\"back\">the back</span>.\n\t\t\t\t// const parsedHtml = mainHtml.replace(/\\[(.*?)\\/(.*?)\\]/g, '(<span style=\"color: red\">$1</span>) (<span style=\"color: green\">$1</span>)'); \n\n\t\t\t\t// COMBINE WITH REGEX\n\t\t\t\t// TEXT: This is a test of regex [front/back]. This is also a test of [111/222].\n\t\t\t\t//const parsedHtml = mainHtml.replace(/\\[(.*?)\\/(.*?)\\]/g, '<span class=\"front\">$1</span><span class=\"back\">$1</span>'); \n\n\t\t\t\t// dollar-sign jquery variables: https://stackoverflow.com/questions/205853/why-would-a-javascript-variable-start-with-a-dollar-sign\n\t\t\t\t//$(\"#main\").html(parsedHtml);\n\t\t\t});\n\n\t\t\t//$(function() {\n\t\t\t$(document).ready(function () {\n\n\t\t\t\tconst mainHtml = $(\"#main\").html();\n\t\t\t\tconst parsedHtml = mainHtml.replace(/\\[(.*?)\\/(.*?)\\]/g, '<span class=\"front\">$1</span><span class=\"back\">$1</span>'); \n\n\t\t\t\t$(\"#main\").html(parsedHtml);\n\n\t\t\t\t//alert('works');\n\t\t\t\t//$('.front').css('color', 'blue');\n\t\t\t\t//$('.front').click(function() {\n\t\t\t\t$(document).on('click','.front', function() {\n\t\t\t\t\t//alert('clicked');\n\t\t\t\t\tconst $front = $(this);\n\t\t\t\t\t$front.hide();\n\t\t\t\t\tconst $back = $front.next();\n\t\t\t\t\t$back.show();\n\t\t\t\t});\n\t\t\t});\n\n\t\t</script>\n\n\t</body>\n\t</html>\t\n\t-----------------------------\n- this is the final code that works with a one-way click flip\n\t-------------------------------------------\n\t<!doctype html>\n\t<html>\n\t<head>\n\t   <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script>\n\t   <style>\n\t\t.back {\n\t\t\tdisplay: none;\n\t\t\tbackground-color: #ddd;\n\t\t}\n\t\t.front {\n\t\t\tbackground-color: #eee;\n\t\t\tcursor: pointer;\n\t\t}\n\t   </style>\n\t</head>\n\t<body>\n\t\t<div id=\"main\">\n\t\t\t<p>THIS WORKS: <span class=\"front\">front</span><span class=\"back\">the back</span>.</p>\n\t\t\t<p>this does not work: This is a test of regex [front/back]. This is also a test of [fff/bbb]. This is also a test of [111/222].</p>\t\n\t\t</div>\n\n\t\t<script>\n\t\t\t$(document).ready(function () {\n\t\t\t\tconst mainHtml = $(\"#main\").html();\n\t\t\t\tconst parsedHtml = mainHtml.replace(/\\[(.*?)\\/(.*?)\\]/g, '<span class=\"front\">$1</span><span style=\"display:none\" class=\"back\">$2</span>'); \n\t\t\t\t$(\"#main\").html(parsedHtml);\n\n\t\t\t\t$(document).on('click','.front', function() {\n\t\t\t\t\tconst $front = $(this);\n\t\t\t\t\t$front.hide();\n\t\t\t\t\tconst $back = $front.next();\n\t\t\t\t\t$back.show();\n\t\t\t\t});\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\n\t-------------------------------------------\n- and this is the two-way flip click\n\t------------------------------------\n\t<!doctype html>\n\t<html>\n\t<head>\n\t   <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\"></script>\n\t   <style>\n\t\t.back {\n\t\t\tdisplay: none;\n\t\t\tbackground-color: #ddd;\n\t\t\tcursor: pointer;\n\t\t}\n\t\t.front {\n\t\t\tbackground-color: #eee;\n\t\t\tcursor: pointer;\n\t\t}\n\t   </style>\n\t</head>\n\t<body>\n\t\t<div id=\"main\">\n\t\t\t<p>THIS WORKS: <span class=\"front\">front</span><span class=\"back\">the back</span>.</p>\n\t\t\t<p>this does not work: This is a test of regex [front/back]. This is also a test of [fff/bbb]. This is also a test of [111/222].</p>\t\n\t\t</div>\n\n\t\t<script>\n\t\t\t$(document).ready(function () {\n\t\t\t\tconst mainHtml = $(\"#main\").html();\n\t\t\t\tconst parsedHtml = mainHtml.replace(/\\[(.*?)\\/(.*?)\\]/g, '<span class=\"front\">$1</span><span style=\"display:none\" class=\"back\">$2</span>'); \n\t\t\t\t$(\"#main\").html(parsedHtml);\n\n\t\t\t\t$(document).on('click','.front', function() {\n\t\t\t\t\tconst $front = $(this);\n\t\t\t\t\t$front.hide();\n\t\t\t\t\tconst $back = $front.next();\n\t\t\t\t\t$back.show();\n\t\t\t\t});\n\n\t\t\t\t$(document).on('click','.back', function() {\n\t\t\t\t\tconst $back = $(this);\n\t\t\t\t\t$back.hide();\n\t\t\t\t\tconst $front = $back.prev();\n\t\t\t\t\t$front.show();\n\t\t\t\t});\n\t\t\t});\n\t\t</script>\n\t</body>\n\t</html>\t\n\t------------------------------------","points":100,"extras":"","systemWhenCreated":"2019-04-20 16:24:04","systemWhoCreated":"systemUnknown"},{"id":27,"category":"vscode","title":"Emmet Basics","body":"- learn basic useful features\n\t- make new file: `test.htm`\n\t- `html:5`\n\t\t- tab through, enter title\n\t- all basic elements: `p`, `b`, `i`, `div`\n\t- div with attribute\n\t\t- `div.section`\n\t\t- `div#main`\n\t- a\n\t\t- `a`\n\t\t- `a:link`\n\t- lists: \n\t\t- `ul>li`\n\t\t- `ul>li*5`\n- learn more at https://docs.emmet.io/cheat-sheet","points":10,"extras":"$rank=4.8","systemWhenCreated":"2019-04-20 16:56:16","systemWhoCreated":"systemUnknown"},{"id":29,"category":"Google Docs","title":"How to create a footnote in a Google document","body":"- go to Google Drive\n- create a Document\n- on the page, just click near the bottom and the footnote area will open\n- then click on the **right-justify** button:##rightjustifybutton\n- and type your text##typeatbottomtext\n- your footnote will appear on the bottom of every page##willappearall\n- here's a full video on how to create footnotes:@@ZkC7EmsP6zI","points":5,"extras":"$rank=3.1","systemWhenCreated":"2019-05-02 12:55:22","systemWhoCreated":"systemUnknown"},{"id":30,"category":"windows","title":"How to look in Event Log to see why some error occurred","body":"- in Windows search, look for `event log` or `Ereignisanzeige` (Spanish = `Visor de Eventos`)\n- under **Ereignisanzeige**, **Windows-Protokolle** click on **Anwendung** and the other categories\n- there you will see to the right entries in the log files that applications and the operating system reported and when\n- set a filter to not show information\n- search for TechSmith\n- turn off connect to Internet\n- start SnagIt and check for latest version\n- refresh logs again","points":10,"extras":"$rank=2.8","systemWhenCreated":"2019-05-02 13:04:38","systemWhoCreated":"systemUnknown"},{"id":31,"category":"vscode","title":"How to set a bookmark and return to it","body":"- install **Bookmarks**##thebookmarkInstall\n- to set bookmark, press `CTRL-ALT-K`##toSetbookmark\n- right-click the bookmark and set a meaningful title##therightMark\n- go somewhere else in code, then click on this bookmark and you will return","points":20,"extras":"$rank=4.7","systemWhenCreated":"2019-05-07 15:42:47","systemWhoCreated":"systemUnknown"},{"id":32,"category":"regex","title":"Search for a hyphen that is not at the beginning of a line","body":"- you have this text:\n\t-----------------------------\n\t- this is a test\n\t- this is also a test\n\t- and so is this, you want to find hypens like software-version\n\t- and also: 5 - 2 = 3\n\t-----------------------------\n- `(?<!^)-`\n- for instance: `(?<!a)b` matches a “b” that is not preceded by an “a”, using negative lookbehind.\n- see [explanation of negative lookbehind](https://www.regular-expressions.info/lookaround.html)","points":10,"extras":"$rank=4.5","systemWhenCreated":"2019-05-17 11:23:04","systemWhoCreated":"systemUnknown"},{"id":33,"category":"dotnetcore","title":"How to create a C# console app in .NET Core","body":"- `dotnet new console`\n- `dotnet run`\n- replace code with this:\n\t---------------------\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Text.RegularExpressions;\n\n\tnamespace regextest {\n\t\tclass Program {\n\t\t\tstatic void Main (string[] args) {\n\t\t\t\tList<string> lines = new List<string> ();\n\t\t\t\tList<string> fixedLines = new List<string> ();\n\t\t\t\tlines.Add (\"   This is line number 1.\");\n\t\t\t\tlines.Add (\"        This is line number 2.\\n    lasdkjfsdlfkj\\nskdfjsdflksjdfsdf\");\n\t\t\t\tlines.Add (\"This is line number 3.\");\n\t\t\t\tlines.Add (\"  This is line number 4.\");\n\t\t\t\tlines.Add (\"This is line number 5.\\n11111\\n     22222\\n33333ok\\n       44444   \");\n\t\t\t\tRegexOptions options = RegexOptions.Multiline;\n\t\t\t\tforeach (string line in lines) {\n\t\t\t\t\tvar fixedLine = line;\n\t\t\t\t\tfixedLine = Regex.Replace (fixedLine, @\"^\\s+\", m => \"\");\n\t\t\t\t\tfixedLine = Regex.Replace (fixedLine, @\"\\n\\s+\", m => \"\\n\");\n\n\t\t\t\t\tfixedLines.Add (fixedLine);\n\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < lines.Count; i++) {\n\t\t\t\t\tvar line = lines[i];\n\t\t\t\t\tvar fixedLine = fixedLines[i];\n\t\t\t\t\tConsole.WriteLine (\"=================\");\n\t\t\t\t\tConsole.WriteLine (line);\n\t\t\t\t\tConsole.WriteLine (\"---\");\n\t\t\t\t\tConsole.WriteLine (fixedLine);\n\t\t\t\t\tConsole.WriteLine (\"=================\");\n\t\t\t\t\tConsole.WriteLine ();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t---------------------\n- `dotnet run`","points":30,"extras":"","systemWhenCreated":"2019-05-23 09:25:18","systemWhoCreated":"systemUnknown"},{"id":34,"category":"csharp","title":"How to search and replace via regex","body":"var fixedLine = Regex.Replace (line, @\"\\b[a-z]\\w+\", delegate (Match match) {\n\tstring v = match.ToString ();\n\treturn char.ToUpper (v[0]) + v.Substring (1);\n});","points":20,"extras":"","systemWhenCreated":"2019-05-21 13:59:25","systemWhoCreated":"systemUnknown"},{"id":35,"category":"virtualMachine","title":"Install Windows in virtual machine without key","body":"- download Windows 10 ISO\n\t- https://www.microsoft.com/en-us/software-download/windows10\n\t- download the installer click on `Download Tool Now`\n\t- follow all the clicks to build an ISO\n\t- you eventually have an ISO on your drive, e.g. 3.8 GB (second time was 4.0 GB)\n- install Windows 10 in VirtualBox\n\t- New, follow all defaults\n\t- Start, choose the ISO file\n\t- click \"I don't have a product key\"\n\t- Windows 10 Pro (second time I chose Windows Pro N, i.e. without media player but had to switch back to Pro, not sure if this was the cause of it crashing during installation, i.e. couldn't find the files)\n\t- Custom\n- Login for the first time\n\t- personal use\n\t- create account\n\t\t- new email: e.g. `test123111222@outlook.com` (you never have to confirm)\n\t\t\t- any password: Test4Test$\n\t\t- birthdate, etc.\n\t\t\t- make sure it is before 2000 otherwise it will think you are a child and not let you in\n\t- any pin\n\t\t- 4456\n- log in\n\t- install the tools for connected folder\n\t- Machine, create snaphot, \"Installed\"\n- always start machine where you are logged in so you don't have to log in\n- move the machine: https://superuser.com/questions/633431/whats-the-recommended-way-to-move-a-virtualbox-vm-to-another-computer","points":100,"extras":"","systemWhenCreated":"2019-05-22 16:12:08","systemWhoCreated":"systemUnknown"},{"id":36,"category":"dotnet","title":"How to install Visual Studio Community","body":"- https://visualstudio.microsoft.com/vs/community\n\t- ASP.NET and Web Development\n\t- .NET Desktop Development\n\t- Database\n\t- restart","points":20,"extras":"","systemWhenCreated":"2019-05-23 11:38:20","systemWhoCreated":"systemUnknown"},{"id":38,"category":"dotnet","title":"How to create a C# application in Visual Studio Community","body":"- start Visual Studio Community\n- file, new, project type: console, console app (.net framework), next\n\t- `deepdir`\n\t- `C:\\edward\\consapps`\n\t- place solution in same directory\n\t- [[Create]]\n- edit file\n\t- add `Console.ReadLine();`\n\t- execute\n- replace code with this:\n\t---------------------------------\n\tusing System;\n\tusing System.IO;\n\tusing System.Collections.Generic;\n\tusing System.Diagnostics;\n\tusing static System.Net.Mime.MediaTypeNames;\n\n\tnamespace showimages\n\t{\n\t\tclass Program\n\t\t{\n\t\t\tstatic void Main(string[] args)\n\t\t\t{\n\t\t\t\tvar wildCard = \"*.*\";\n\t\t\t\tif(args.Length > 0)\n\t\t\t\t{\n\t\t\t\t\twildCard = args[0];\n\t\t\t\t}\n\n\t\t\t\tvar docPath = Directory.GetCurrentDirectory();\n\t\t\t\tstring[] files = Directory.GetFiles(docPath, wildCard, SearchOption.AllDirectories);\n\t\t\t\tforeach (string file in files)\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine(file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t---------------------------------\n- switch to release\n- build\n- in Explorer, go to `C:\\edward\\consapps\\deepdir\\bin\\Release`\n\t- copy the .exe files out to another directory with sub-directories\n\t- test it\n- to enable it to work everywhere\n\t- put in e.g. `c:\\consoleapps`\n- in Windows menu, search for `environment`\n\t- Environment variables\n\t- add `C:\\consoleapps` to Path\n\t- close and open command window in any directory\n\t- type `deepdir`","points":50,"extras":"","systemWhenCreated":"2019-05-23 15:36:04","systemWhoCreated":"systemUnknown"},{"id":39,"category":"dotnet","title":"How to install and use LinqPad","body":"- download at: https://www.linqpad.net/download.aspx\n- attach sqlite database\n\t- add connection\n\t- IQ\n\t- Sqlite, browse, OK\n\t- connection: select sqlite database\n- use SQL commands\n\t- choose Language: SQL\n\t- `select * from pageItems`\n\t- `select id,title,kind from pageItems`\n\t- `select id,title,kind from pageItems order by title`\n- use LINQ commands\n\t- 1. query syntax\n\t\t- `from p in PageItems select p`\n\t\t- `from p in PageItems select new { p.Id, p.Title, p.Kind }`\n\t\t- `from p in PageItems orderby p.Title select new { p.Id, p.Title, p.Kind }`\n\t- 2. method syntax\n\t\t- `PageItems`\n\t\t- `PageItems.Where (p => p.Title.StartsWith(\"T\"))`\n\t\t- `PageItems.Where (p => p.Title.StartsWith(\"T\")).OrderBy(m => m.Title)`\n- see **Help > Tutorials and Reference**","points":50,"extras":"$rank=1.0","systemWhenCreated":"2019-05-23 16:35:51","systemWhoCreated":"systemUnknown"},{"id":40,"category":"responsiveDesign","title":"Responsive CSS and HTML to show different content on smartphones and computers/tables","body":"- for styles use this code:\n\t---------------------------\n\t/* smartphone view */\n\t@media (max-width: 577px) {\n\t\t.mainGraphic {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\n\t/* computer/tablet view */\n\t@media (min-width: 578px) {\n\t\t.mainGraphic {\n\t\t\tbox-shadow: 10px 10px 5px grey;\n\t\t}\n\t}\t\n\t---------------------------\n- for HTML use this code:\n\t-------------------------------\n\t<!--SMARTPHONE VIEW-->\n\t<div class=\"d-inline d-sm-none\">\n\t\tsmartphone HTML goes here\n\t</div>\n\n\t<!--COMPUTER/TABLET VIEW-->\n\t<div class=\"d-none d-sm-inline\">\n\t\tcomputer/tablet HTML goes here\n\t</div>\n\t-------------------------------\n- here's a full HTML test page:\n\t--------------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\"\n\t\t\t  href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\">\n\t\t<title>responsivity test</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tfont-size: 3em;\n\t\t\t}\n\n\t\t\t/* smartphone view */\n\t\t\t@media (max-width: 577px) {\n\t\t\t\t.message {\n\t\t\t\t\tcolor: red;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* computer/tablet view */\n\t\t\t@media (min-width: 578px) {\n\t\t\t\t.message {\n\t\t\t\t\tcolor: blue;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class=\"message\">CSS: This is a test</div>\n\n\t\t<!--SMARTPHONE VIEW-->\n\t\t<div class=\"d-inline d-sm-none\">\n\t\t\tHTML: SMARTPHONE\n\t\t</div>\n\n\t\t<!--COMPUTER/TABLET VIEW-->\n\t\t<div class=\"d-none d-sm-inline\">\n\t\t\tHTML: computer or tablet\n\t\t</div>\n\n\t</body>\n\n\t</html>\n\t--------------------------------------","points":50,"extras":"","systemWhenCreated":"2019-07-23 15:25:30","systemWhoCreated":"systemUnknown"},{"id":41,"category":"vscode","title":"How to get the thick scrollbar back on the right side","body":"- `ctrl-,`\n- type `editor.minimap.enabled` and set to true","points":5,"extras":"$rank=4.1","systemWhenCreated":"2019-07-30 14:36:59","systemWhoCreated":"systemUnknown"},{"id":42,"category":"JavaScript","title":"Small JavaScript page that pops up a timestamp to copy and paste","body":"- copy and paste the following text to a file called `timestamp.htm`\n\t--------------------------\n\t<html>\n\t<head>\n\t<title>timestamp</title>\n\n\t<script>\n\t\t// rawTimeString = \"2017-08-01T08:18:32.525Z\"\n\t\tfunction getTimeLine(rawTimeString, format) {\n\t\t\tvar date = rawTimeString.substring(0,10); // \"2017-08-01\"\n\t\t\tvar fullTime = rawTimeString.substring(11,19); // \"08:18:32\"\n\t\t\tvar shortTime = rawTimeString.substring(11,16); // \"08:18\"\n\t\t\tvar shortRoundedTime = rawTimeString.substring(11,14) + \"00\"; // \"08:00\"\n\t\t\tvar timeLine = '';\n\n\t\t\tswitch(format) {\n\t\t\t\tcase 'standard': // \"2019-08-01 08:30:46\"\n\t\t\t\t\ttimeLine = date + \" \" + fullTime;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'range': // \"2017-08-01 08:33 - 2017-08-01 08:33\"\n\t\t\t\t\tvar shortTimeStamp = date + \" \" + shortTime;\n\t\t\t\t\ttimeLine = shortTimeStamp + ' - ' + shortTimeStamp;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'roundedRange': // \"2017-08-01 08:00 - 2017-08-01 08:00\"\n\t\t\t\t\tvar shortRoundedTimeStamp = date + \" \" + shortRoundedTime;\n\t\t\t\t\ttimeLine = shortRoundedTimeStamp + ' - ' + shortRoundedTimeStamp;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttimeLine = '(unknown format)';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn timeLine;\n\t\t}\n\n\t\tfunction copyTimestampToClipboard() {\n\t\t\tvar offset = 4;\n\t\t\tvar d = new Date();\n\t\t\tutc = d.getTime() + (d.getTimezoneOffset() * 60000);\n\t\t\tnd = new Date(utc + (3600000*offset));\n\t\t\tvar rawTimeString = nd.toISOString(); \n\t\t\tvar timeLine = getTimeLine(rawTimeString, 'standard');\n\t\t\twindow.prompt(\"CTRL-C, CTRL-W\", timeLine);\n\t\t}\n\t</script>\n\n\t</head>\n\t<body onload=\"copyTimestampToClipboard()\">\n\n\t</body>\n\t</html>\n\t--------------------------\n- double-click on it and press `CTRL-C`, `CTRL-W` to get quick timestamp to copy and paste\n- you can easily make new formats, e.g. see `standard`, `range` and `roundedRange` or make your own\n- in your browser, make a bookmark for it for fast access","points":30,"extras":"$rank=4.6","systemWhenCreated":"2019-08-01 08:37:51","systemWhoCreated":"systemUnknown"},{"id":43,"category":"vuejs","title":"Syntax for dynamic classes in Vue.js","body":"Use the following syntaxes to create dynamic classes in Vue.js.\n\t------------------------\n\t<div id=\"vue\">\n\t  <div :class=\"{highlighted: isImported}\">\n\t\tsyntax 1: apply-class-if-true\n\t  </div>\n\t  <div :class=\"{highlighted: loggedIn && totalProcessed >= processGoal}\">\n\t\tsyntax 2: apply-class-if-expression\n\t  </div>\n\t  <div :class=\"{highlighted: isImported, 'double-highlighted':isSaved}\">\n\t\tsyntax 3: multiple apply-class-if-true\n\t  </div>\n\t  <div :class=\"[highlightClass, doubleHighlightClass]\">\n\t\tsyntax 4: list of classes as array\n\t  </div>\n\t  <div :class=\"[isAdministrator ? 'highlighted-administrator' : 'highlighted']\">\n\t\tsyntax 5: ternary operator\n\t  </div>\n\t  <div :class=\"[isAdministrator ? 'highlighted-administrator' : 'highlighted', isWrong ? 'error': '']\">\n\t\tsyntax 6: multiple ternary operators\n\t  </div>\n\t</div>\n\t------------------------","points":20,"extras":"","systemWhenCreated":"2019-08-01 09:05:04","systemWhoCreated":"systemUnknown"},{"id":44,"category":"json","title":"How to get sets of JSON data for examples","body":"- go to: https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json\n- TODO:  do 10 examples with map, filter, and reduce\n- keywords: sample data to import","points":10,"extras":"$status=todo","systemWhenCreated":"2019-08-01 12:59:19","systemWhoCreated":"systemUnknown"},{"id":45,"category":"sqlite","title":"Create 10 examples of complex SQLite statements","body":"- get SQLite sample database\n\t- http://www.sqlitetutorial.net/sqlite-sample-database\n\t- click on  \"Download SQLite sample database\" and download the `chinook.zip` database\n- download and install DB Browser for SQLite\n\t- https://sqlitebrowser.org\n- list simple table\n\t---------------------------\n\tselect * from albums\n\t---------------------------\n- simple join of albums and artists\n\t---------------------------\n\tselect * from albums al\n\tjoin artists ar on al.ArtistId = ar.ArtistId\n\t---------------------------\n- simple join of albums and artists only with pertinent fields\n\t---------------------------\n\tselect AlbumId, Title, al.ArtistId, Name as Artist from albums al\n\tjoin artists ar on al.ArtistId = ar.ArtistId\n\t---------------------------\n- list all unique cities in customers\n\t---------------------------\n\tselect distinct city from customers order by city\n\t---------------------------\n- at http://www.sqlitetutorial.net/sqlite-sample-database do six more examples that are interesting","points":100,"extras":"","systemWhenCreated":"2019-08-13 15:20:36","systemWhoCreated":"systemUnknown"},{"id":46,"category":"DPN","title":"How to set Datapod into developing mode so the server restarts when files are changed","body":"- in `config.js`, change `exports.developing` to true.\n- reload the page and click on the link to login as developer","points":5,"extras":"$rank=3.6","systemWhenCreated":"2019-08-14 11:10:22","systemWhoCreated":"systemUnknown"},{"id":47,"category":"typescript","title":"Basic example of TypeScript-to-JavaScript compiling","body":"- make directory `testts`\n- go to command line\n\t- `npm install typescript`\n\t\t- (if tsc doesn't work after then then try: `npm install -g typescript`)\n- create `person.ts`:\n\t------------------------\n\tinterface Person {\n\t\tfirstName: string;\n\t\tlastName: string;\n\t}\n\n\tfunction displayWelcomeMessage(person: Person) {\n\t\treturn `Hello, ${person.firstName} ${person.lastName}.`;\n\t}\t\t\t\t\t\n\t------------------------\n- create `index.htm`:\n\t--------------------------\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head><title>TypeScript Test</title></head>\n\t\t<body>\n\t\t\t<div id=\"message\">(no message)</div>\n\t\t\t<script src=\"person.js\"></script>\n\t\t\t<script>\n\t\t\t\tconst user = { firstName: \"Hans\", lastName: \"Tester\" };\n\t\t\t\tdocument.getElementById('message').innerHTML = displayWelcomeMessage(user);\n\t\t\t</script>\n\t\t</body>\n\t</html>\t\t\t\t\t\t\n\t--------------------------\n- execute `tsc person.ts`\n- note that `person.js` was created and is the JavaScript version of the TypeScript file\n- look at `index.htm` in a browser","points":40,"extras":"","systemWhenCreated":"2019-08-20 12:41:42","systemWhoCreated":"systemUnknown"},{"id":48,"category":"DPN","title":"Record screencasts with Hypercam","body":"- download Hypercam at http://www.hyperionics.com\n- install\n- set screen area to: 10/10, 1280x720 (or for smaller: 1024x576) and Iconize##hypercam1\n- Hot Keys: start/stop = CTRL-F10, pause/resume = CTRL-F11\n- avi file name, e.g. `C:\\edward\\raw_videos\\`\n- sound: select headphones, sample rate: 44100","points":50,"extras":"","systemWhenCreated":"2019-08-20 21:18:12","systemWhoCreated":"systemUnknown"},{"id":49,"category":"DPN","title":"How to set up Datapod for Node including development environment","body":"- these instructions assume you are installing on Windows\n\t- Datapod for Node will run on Linux and Mac, but you'll have to substitute tools appropriately, etc.\n- recommended pre-install tools\n\t- these tools will make your environment easier to work in, install them if you haven't yet\n\t\t- install 7zip \n\t\t\t- you'll have more options zipping and unzipping files if you install 7zip\n\t\t\t- goto [7-zip.de](https://7-zip.de)\n\t\t\t- download and install\n\t\t- install Notepad++\n\t\t\t- even though you'll be using Visual Studio Code for your main editor, Notepad++ is a useful, non-nonsense text editor to quickly edit any text file\n\t\t\t- goto: https://notepad-plus-plus.org/download\n\t\t\t- download and install\n- make a directory where you are going to put your Node websites\n\t- create `c:\\nodewebs`\n\t- create `c:\\nodewebs\\main` (where \"main\" is the name of your datapod site)\n- install Git\n\t- whether or not you save your code in Git, it gives you the bash command line interface, so that you have a more Linux-like command line where you can use bash commands such as `ls` and `pwd`\n\t- go to `https://git-scm.com/download`\n\t- then just download and click-accept-click to install it\n\t- to test if it was successful, right-click in directory `c:\\nodewebs\\main` and you should see option **Git Bash Here**\n- install Node and NPM\n\t- go to `http://nodejs.org`\n\t- download the LTS version\n\t- install it with click-accept-click\n\t- check versions of each\n\t\t- in Windows Explorer, go to `c:\\nodewebs\\main`\n\t\t- right-click and choose **Git Bash Here**\n\t\t- type `node -v`, you should get something like **v10.16.3**\n\t\t- type `npm -v`, you should get something like **6.9.0**\n- install Datapod\n\t- go to `http://tanguay.info/datapod`\n\t\t- TODO: make link here\n\t- go to [tanguay.info/tech/datapodForNode](http://tanguay.info/tech/datapodForNode)\n\t- unzip the file `dpn00300.zip`\n\t- copy all the files to `c:\\nodewebs\\main`\n\t- in the Windows Explorer at `c:\\nodewebs\\main`, right-click and enter the Git bash shell\n\t\t- type `npm install` (this may take a few minutes)\n\t- test Datapod \n\t\t- starting it with `node server.js`\n\t\t\t- you may have to allow access to Node.js, click **allow**\n\t\t- it should say **Now listening at http://localhost:49901**\n\t\t- in your browser, go to `http://localhost:49901`\n\t\t- log in as `dev`/`dev`\n\t\t- if it logs in, then Datapod is correctly installed\n\t\t- log out\n- install Visual Studio Code\n\t- goto `https://code.visualstudio.com`\n\t- download and install\n\t- in Windows Explorer, goto `c:\\nodewebs\\main`\n\t- right-click, **Git Bash Here**\n\t- type `code .`\n- setup Datapod developer mode\n\t- since Datapod in developer mode makes changes to its own files and thus requires nodemon\n\t- install it like this: `npm install -g nodemon`\n\t- in `system\\config.js`, change **exports.developing** to `true`\n\t- run Datapod again with `nodemon server.js`\n\t- click on login, \n\t- test Datapod developer features\n\t\t- create page\n\t\t\t- call it `Information`\n\t\t\t- see that it is added to the menu\n\t\t- delete page\n\t\t\t- type `Information`\n\t\t\t- see that it was removed from the menu\n- install DB Browser for SQLite\n\t- go to [sqlitebrowser.org](https://sqlitebrowser.org/dl)\n\t- for 64-bit machines, choose **DB Browser for SQLite - Standard installer for 64-bit Windows**\n\t- execute it, accepting all defaults\n\t- if it doesn't show in the start menu, go to `C:\\Program Files\\DB Browser for SQLite`, right-click on `DB Browser for SQLite.exe` and choose **pin to taskbar, so you have this:**##pintotaskbardebrowse\n\t- start DB Browser for SQLite\n\t\t- open `C:\\nodewebs\\main\\data` and choose `main.sqlite`\n\t\t- right-click on **pageItems** and choose **Browse Table**\n\t\t- under column header **title**, type `logout`\n\t\t- change `Logout` to `Logout2` and then click on **Write Changes**\n\t\t- refresh the Datapod website, and you will see in your menu that the label **Logout** changed to **Logout2**\n\t\t- change it back\n- setup quick-start icons \n\t- we will now make it possible to start your Node server with one click, when you want to develop on your Datapod site\n\t- make directory: c:\\start\n\t\t- create file: `start_main.bat` where **main** is the name of your site\n\t\t\t---------------------------------------\n\t\t\tcd C:\\nodewebs\\main\n\t\t\tnodemon server.js      \n\t\t\t---------------------------------------\n\t\t- right-click bat file: create shortcut\n\t\t\t- rename shortcut to `start_main`\n\t\t- right-click shortcut: properties \n\t\t\t- in the `target` field, type `explorer ` in front of path\n\t\t\t\t- .e.g so that it reads `explorer C:\\start\\start_main.bat`\n\t\t\t- change icon to whatever you want\n\t\t\t- `OK` (enter)\n\t\t- drag shortcut to task bar\n\t- stop and close any nodemon you have running\n\t\t- with **CTRL-C**\n\t\t- and type `exit`\n\t- click on icon\n\t\t- test your site to make sure it works, e.g. go to `http://localhost:49901`\n\t- format the command window running Node so it looks different from others\n\t\t- (you will use this window to output information from backend files)\n\t\t- click on C:\\ icon (upper-left) and properties\n\t\t- Colors, opacity 80%\n\t\t- Font, size: 12\n\t- if you want to run other CMD windows while this window is open, right-click, right-click on \"Command Prompt\", open\n- customize Visual Studio Code\n\t- turn on autosave\t\n\t\t- files will be automatically saved after you make any changes, so you will not have to press **CTRL-S** anymore\n\t\t- **CTRL-C**, `auto save`, change auto save to **afterDelay**\n\t- snippets\n\t\t- these are chunks of code with variable positions that you can inject into code by typing a short code and pressing TAB\n\t\t- click File, Preferences, User Snippets\n\t\t\t- click on **javascript.json**\n\t\t\t- replace the text there with:\n\t\t\t\t--------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"Show debug output\": {\n\t\t\t\t\t\t\"prefix\": \"dd\",\n\t\t\t\t\t\t\"body\": \"qdev.debug('$1',$2);\"\n\t\t\t\t\t},\n\t\t\t\t\t\"console.log\": {\n\t\t\t\t\t\t\"prefix\": \"cc\",\n\t\t\t\t\t\t\"body\": \"console.log('$1: ' + $2);\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t--------------------------------\n\t\t- now open up a controller file with CTRL-P, `controller`\n\t\t\t- in the file type `cc` and TAB to see it expand\n\t- test to make sure **emmet** works\n\t\t- emmet enables you to type large chunks of HTML code with short codes\n\t\t- it should be installed by default\n\t\t- open up an `.ejs` view file of any of your pages, e.g. CTRL-P and `ejs` and choose a page\n\t\t- in an open space in the HTML, type `ul>li#5` and then press TAB\n\t\t- see more basics in the [Emmet Basics Howto](http://tanguay.info/tech/howtos?id=27)\n\t- install the CSS/LESS formatter extension\n\t\t- open `system_main.less` with CTRL-P, type `less`\n\t\t- TAB a line to unformat it\n\t\t- press SHIFT-ALT-F to try to format it\n\t\t- click **Install Formatter...**\n\t\t- click the [[Install]] button on the extension called **formate: CSS/LESS/SCSS formatter**\n\t\t- again, open `system_main.less` with CTRL-P, type `less`\n\t\t- TAB a line to unformat it\n\t\t- press SHIFT-ALT-F to format it this time\n- setup automatic LESS-to-CSS conversion\n\t- Datapod uses .less style files which need to be converted into css\n\t- open `system_main.less` with CTRL-P, type `less`\n\t- at the end, add the following *less* code:\n\t\t---------------------\n\t\tdiv.test {\n\t\t\tp {\n\t\t\t\tcolor: red;\n\t\t\t}\n\t\t}\n\t\t---------------------\n\t- open `system_main.css` with CTRL-P, type `main css`\n\t- see that you code was not yet automatically added\n\t- in Windows Explorer, go to `C:\\nodewebs\\main`\n\t- right-click and **Git Bash Here**\n\t- type `npm install -g less`\n\t- type `npm install -g less-watch-compiler`\n\t- type `less-` and TAB and ENTER\n\t- see that your change is not in `system_main.less`\n\t- add another style e.g.:\n\t\t----------------------\n\t\tdiv.test {\n\t\t\tp {\n\t\t\t\tcolor: red;\n\t\t\t}\n\t\t\th1 {\n\t\t\t\tcolor: blue;\n\t\t\t}\n\t\t}\n\t\t----------------------\n\t- and see that your `system_main.less` file was automatically updated\n\t- from now on, when you start to develop, you will simply need to type `less-` then TAB and ENTER","points":100,"extras":"","systemWhenCreated":"2019-08-20 23:28:02","systemWhoCreated":"systemUnknown"},{"id":51,"category":"Regex","title":"Click on examples at regex101","body":"- go to [regex101](https://regex101.com) and click through the examples in the lower right","points":50,"extras":"","systemWhenCreated":"2019-09-06 16:49:19","systemWhoCreated":"systemUnknown"},{"id":52,"category":"Datapod for Node","title":"How to read in new information on the Screen Scrape Showcase","body":"- here is the code to read in the points data\n\t-----------------------\n\tgetHackerNewsData(html) {\n\t\tconst data = [];\n\t\tconst nextData = {};\n\t\tconst $ = cheerio.load(html);\n\t\t$('table.itemlist tr td:nth-child(3)').each((i, elem) => {\n\t\t\tconst pointText = $(elem).parent().next().find('td.subtext').find('span.score').text();\n\t\t\tdata.push({\n\t\t\t\ttitle: $(elem).text(),\n\t\t\t\tlink: $(elem).find('a.storylink').attr('href'),\n\t\t\t\tpointText: qstr.isEmpty(pointText) ? '??? points' : pointText\n\t\t\t});\n\t\t});\n\t\treturn data;\n\t}\n\t-----------------------","points":70,"extras":"","systemWhenCreated":"2019-09-10 16:37:26","systemWhoCreated":"systemUnknown"},{"id":53,"category":"vuejs","title":"How to click a button which selects text in a textarea","body":"- HTML:\n\t-------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div>\n\t\t\t\t<button @click=\"selectTheText\">Select the Text of box 2</button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<textarea v-for=\"id in ids\" :id=\"'info'+id\">this is box {{id}}</textarea>\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<script>\n\t\t\tconst app = new Vue({\n\t\t\t\tel: \"#app\",\n\t\t\t\tdata: {\n\t\t\t\t\tinfo: 'nnn',\n\t\t\t\t\tids: [1, 2, 3]\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize: function () {\n\t\t\t\t\t\tthis.message = 'test';\n\t\t\t\t\t},\n\t\t\t\t\tselectTheText: function () {\n\t\t\t\t\t\tdocument.getElementById('info2').select();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\n\t</html>\n\t-------------------------\n- but in larger Vue.js pages, I had to call a Vue.js method:\n\t-----------------------------\n\t<div class=\"templateArea\" v-show=\"showTemplateArea\">\n\t\t<textarea style=\"display:none\" id=\"templateArea\" class=\"showCodeToCopy localCodeBlock\">\n\tcode line 111\n\tcode line 222\n\tcode line 333</textarea>\n\t</div>\n\t-----------------------------\n- and then handle it with jQuery\n\t-------------------------------\n\ttoggleTemplateArea: function () {\n\t\tif (!$('#templateArea').is(':visible')) {\n\t\t\t$('#templateArea').show();\n\t\t\tdocument.getElementById('templateArea').select();\n\t\t} else {\n\t\t\t$('#templateArea').hide();\n\t\t}\n\t}\n\t-------------------------------","points":40,"extras":"$rank=0.5","systemWhenCreated":"2019-09-11 14:29:26","systemWhoCreated":"systemUnknown"},{"id":54,"category":"windows","title":"How to find out latest Windows version, e.g. 1903","body":"- right-click Windows-Icon, Einstellungen\n- System\n- Info\n- scroll down: Windows Spezifikation##thewinwinversion","points":5,"extras":"$rank=3.1","systemWhenCreated":"2019-09-18 08:59:13","systemWhoCreated":"systemUnknown"},{"id":55,"category":"notepadePlusPlus","title":"Compare to files with Compare plugin","body":"- Notepad++\n- click Plugins, Plugins Admin\n- type `compare`\n- try: compare since last save\n- try: compare two files","points":20,"extras":"","systemWhenCreated":"2019-10-23 15:14:25","systemWhoCreated":"systemUnknown"},{"id":56,"category":"ubuntu","title":"Set file to always open with Notepad++","body":"- right-click file, properties\n- open with\n- do example with `.txt` files and `.js` files for Notepad++ and Visual Studio Code","points":5,"extras":"$rank=4.4","systemWhenCreated":"2019-10-23 15:25:28","systemWhoCreated":"systemUnknown"},{"id":57,"category":"linux","title":"How to create path of directories at once","body":"- `mkdir -p ~/git/testing/version001`\n- the tilda means your home directory","points":5,"extras":"$rank=4.4","systemWhenCreated":"2019-11-26 16:29:37","systemWhoCreated":"systemUnknown"},{"id":58,"category":"DPN","title":"How to set up a dpn site from Github","body":"- clone from GitHub to local machine\n\t- `git clone https://github.com/edwardtanguay/dpn.git n49999_mysite`\n\t\t- `n49999_` is a convention of mine, `n` stands for Node and `49999` for the port this site will be running on\n\t\t- if you develop multiple Datapod sites, this convention will help you keep your sites organized\n\t- `cd n49999_mysite`\n\t- `npm install`\n\t- with any editor, change `system/config.js`\n\t- in `config.js` change port to **49999**\n\t- test the site\n\t\t- `nodemon server.js`\n\t\t- in browser: `http://localhost:49999`\n\t\t- login as `dev` / `dev`\n\t\t- logout\n\t\t- [[CTRL-C]] to stop nodemon\n\t- save as new repository at GitHub\n\t\t- on Github, create new repository **n49999_mysite**\n\t\t- `git remote set-url origin https://github.com/edwardtanguay/n49999_mysite.git`\n\t\t- `git add *`\n\t\t- `git commit -m initial`\n\t\t- `git push`\n- test new respository on another machine\n\t- `git clone https://github.com/edwardtanguay/n49999_mysite.git`\n\t- `cd n49999_mysite`\n\t- `npm install`\n\t- test the site\n\t\t- `nodemon server.js`\n\t\t- in browser: `http://localhost:49999`\n\t\t- login as `dev` / `dev`\n\t\t- logout\n\t\t- [[CTRL-C]] to stop nodemon","points":50,"extras":"","systemWhenCreated":"2019-11-26 17:14:50","systemWhoCreated":"systemUnknown"},{"id":59,"category":"regex","title":"How to replace list markers in Notepad++","body":"- you have this list in Notepad++\n\t---------------------------\n\t1: jeden\n\t2: dwa\n\t3 – trzy\n\t4 – cztery\n\t5 – pięć\n\t6 – sześć\n\t7 – siedem\n\t8 – osiem\n\t9 – dziewięć\n\t10 – dziesięć\n\t11 – jedenaście\n\t12 – dwanaście\n\t13 – trzynaście\n\t14 – czternaście\n\t15 – piętnaście\n\t16 – szesnaście\n\t17 – siedemnaście\n\t18 – osiemnaście\n\t19 – dziewiętnaście\n\t20 – dwadzieścia\n\t30 – trzydzieści\n\t40 – czterdzieści\n\t50 – pięćdziesiąt\n\t60 – sześćdziesiąt\n\t70 – siedemdziesiąt\n\t80 – osiemdziesiąt\n\t90 – dziewięćdziesiąt\n\t100 – sto\t\n\t---------------------------\n- and you want to change it to:\n\t---------------------------\n\tNumber 1: jeden\n\tNumber 2: dwa\n\tNumber 3: trzy\n\tNumber 4: cztery\n\tNumber 5: pięć\n\tNumber 6: sześć\n\tNumber 7: siedem\n\tNumber 8: osiem\n\tNumber 9: dziewięć\n\tNumber 10: dziesięć\n\tNumber 11: jedenaście\n\tNumber 12: dwanaście\n\tNumber 13: trzynaście\n\tNumber 14: czternaście\n\tNumber 15: piętnaście\n\tNumber 16: szesnaście\n\tNumber 17: siedemnaście\n\tNumber 18: osiemnaście\n\tNumber 19: dziewiętnaście\n\tNumber 20: dwadzieścia\n\tNumber 30: trzydzieści\n\tNumber 40: czterdzieści\n\tNumber 50: pięćdziesiąt\n\tNumber 60: sześćdziesiąt\n\tNumber 70: siedemdziesiąt\n\tNumber 80: osiemdziesiąt\n\tNumber 90: dziewięćdziesiąt\n\tNumber 100: sto\t\t\n\t---------------------------\n- search for `^(\\d*)\\s.\\s`\n- replace with `Number $1:`","points":50,"extras":"","systemWhenCreated":"2019-11-29 15:10:59","systemWhoCreated":"systemUnknown"},{"id":60,"category":"linux","title":"How to copy a file with a date/time stamp","body":"- `cp testing testing_backup_(BACKTICK)date +%Y-%m-%d--%H-%M-%S(BACKTICK)`\n- replace `(BACKTICK)` with a backtick:##withthebacktickhere","points":5,"extras":"$rank=4.5","systemWhenCreated":"2019-12-02 16:59:12","systemWhoCreated":"systemUnknown"},{"id":61,"category":"Git","title":"How to create, use, merge and delete a branch locally","body":"- create new branch, [naming conventions](http://blog.avinoth.com/2019/05/28/git-branch-naming-convention.html)\n\t- `git checkout -b et/feat/outline-date`\n- view current branches\n\t- `git branch`\n- (make changes)\n- commit changes\n\t- `git commit -am \"outline change\"`\n- switch back to master\n\t- `git checkout master`\n- merge feature branch into master\n\t- `git merge et/feat/outline-date --no-ff`\n- delete empty feature branch\n\t- `git branch -d et/feat/outline-date`\n- then push your changes to remote\n\t- `git push`","points":50,"extras":"","systemWhenCreated":"2019-12-03 11:57:31","systemWhoCreated":"systemUnknown"},{"id":62,"category":"windows","title":"How to set Windows Explorer to show drives when it opens","body":"- open Windows Explorer\n- in header area, click **View** (Ansicht)\n- on the right, click **Options**\n- choose: **change folder and search options**\n- change to: **This PC**","points":5,"extras":"$rank=3.8","systemWhenCreated":"2019-12-04 10:05:48","systemWhoCreated":"systemUnknown"},{"id":63,"category":"ubuntu","title":"Install Ubuntu in VirtualBox","body":"- use [this foray](forays?openItemIds=46&id=46) and create HowTo as you go","points":100,"extras":"$rank=3.8","systemWhenCreated":"2019-12-06 15:09:55","systemWhoCreated":"systemUnknown"},{"id":64,"category":"Regex","title":"Find '##' followed by a variable at end of line","body":"- You want to find all \"##\" which have a variable code at the end\n\t- but not \"##\" at the end\n\t- and not if it has spaces or any other character in it\n- e.g. find the first four but not the others\n\t--------------------\n\tsdjfk sjkf skdfj sdkf##ksjf2ksdjf\n\tsfjsdfsdlf##kdjfdkfjd\n\tksdjfsdkfjsdkf##kdf\n\t##sdkfsdkfasd\n\taskdfjsfkjsdlkfj##\n\tasdfksdjfsdfkjsdf##sdjfksdfj.sdfjkdfjdf\n\tksdjfsdkfjsdkf#kdf\n\tdkfjfiejfiefjefij## sdkfjs dfksjd f\n\t--------------------\n- use this:\n\t- `##([a-zA-Z1-9])+$`","points":20,"extras":"$rank=4.5","systemWhenCreated":"2019-12-11 12:50:14","systemWhoCreated":"systemUnknown"},{"id":65,"category":"Regex","title":"Create regex to find uppercase code with underlines","body":"- you want to identify if a user has put a code on a line to identify a header\n- the code has to have the following characteristics\n\t- it is alone on the line\n\t- it is all uppercase\n\t- underlines are allowed\n- e.g. only the last two items should pass:\n\t------------------\n\tthis is not ok\n\tNot_this\n\talso_not\n\tTHIS_IS not ok\n\tTHIS_IS_OK\n\tTHISTOO\t\t\n\t------------------\n- use this regex: `^[A-Z_]*$`","points":10,"extras":"$rank=0.5","systemWhenCreated":"2019-12-12 13:11:14","systemWhoCreated":"systemUnknown"},{"id":66,"category":"dpod","title":"How to get nodemon working on \"command not found\" error","body":"- `npm install nodemon --save-dev`\n- `node_modules/.bin/nodemon server.js`","points":30,"extras":"","systemWhenCreated":"2019-12-25 23:13:32","systemWhoCreated":"systemUnknown"},{"id":67,"category":"JavaScript","title":"How to simulate a method that takes two seconds to execute","body":"- use `Date.now()`: \n\t---------------------------\n\tfunction getUserDetails_sync() {\n\t\tconst timeout = Date.now() + 2000;\n\t\twhile (Date.now() < timeout) { }\n\t\treturn \"test data\";\n\t}\n\t---------------------------","points":20,"extras":"","systemWhenCreated":"2020-04-18 20:52:09","systemWhoCreated":"systemUnknown"},{"id":68,"category":"JavaScript","title":"Example to show synchronous and asynchronous calls","body":"- use `callback`:\n\t------------------------\n\tconsole.log(\"getting data...\");\n\n\tfunction doSomething_sync() {\n\t\tlet data = getUserDetails_sync();\n\t\tconsole.log(data);\n\t\tconsole.log(\"thread available again\");\n\t}\n\n\tfunction getUserDetails_sync() {\n\t\tconst timeout = Date.now() + 2000;\n\t\twhile (Date.now() < timeout) {}\n\t\treturn \"sync data\";\n\t}\n\n\tfunction doSomething_async() {\n\t\tgetUserDetails_async((data) => console.log(data));\n\t\tconsole.log(\"thread available again\");\n\t}\n\n\tfunction getUserDetails_async(callback) {\n\t\tsetTimeout(() => callback(\"async data\"), 2000);\n\t}\n\n\tdoSomething_sync();\n\t//doSomething_async();\n\t------------------------","points":50,"extras":"","systemWhenCreated":"2020-04-18 21:16:53","systemWhoCreated":"systemUnknown"},{"id":69,"category":"JavaScript","title":"Asynchronous JavaScript joke","body":"- use `callback`:\n\t-------------------------\n\ttellJoke();\n\n\tfunction tellJoke() {\n\t\taskQuestion((data) => console.log(data));\n\t\ttellPunchLine();\n\t}\n\tfunction askQuestion(callback) {\n\t\tsetTimeout(() => callback(\"Did you hear the one about the JavaScript function that walks into a bar?\"), 3000);\n\t}\n\n\tfunction tellPunchLine() {\n\t\tconsole.log(\"It sits at the bar and orders a callback.\");\n\t}\n\t-------------------------","points":30,"extras":"$rank=4.9","systemWhenCreated":"2020-04-18 21:43:14","systemWhoCreated":"systemUnknown"},{"id":70,"category":"node","title":"How to use .emit() and .on() for events","body":"- `eventTest.js`\n------------------------------\nconst emitter = require(\"./events/eventEmitter\");\n\nemitter.timer.on(\"closing\", () => console.log(\"now the book is about to be closed\"));\nemitter.timer.on(\"reading\", () => console.log(\"ok, it is reading now\"));\n\nemitter.launchTimer();\n------------------------------\n- `eventEmitter.js`\n-------------------------------\nconst EventEmitter = require(\"events\");\n\ntimer = new EventEmitter();\n\nexports.launchTimer = function () {\nsetTimeout(() => timer.emit(\"opening\"), 1000);\nsetTimeout(() => timer.emit(\"reading\"), 2000);\nsetTimeout(() => timer.emit(\"closing\"), 3000);\n};\n\nexports.timer = timer;\n-------------------------------","points":90,"extras":"","systemWhenCreated":"2020-04-21 21:47:21","systemWhoCreated":"systemUnknown"},{"id":71,"category":"vue.js","title":"How to set up a simple Vue.js page","body":"- create directory `vuetest`\n- go there with VSCode\n- open terminal\n- `npm i -g vue-cli`\n- terminal: `vue init simple .`\n- open with Live Server","points":50,"extras":"","systemWhenCreated":"2020-04-21 23:07:37","systemWhoCreated":"systemUnknown"},{"id":72,"category":"node","title":"Basics of a command line program","body":"- use Node's stdin:\n\t----------------------------\n\tprocess.stdin.setEncoding(\"utf8\");\n\tprocess.stdin.on(\"data\", evaluate);\n\tprocess.stdin.on(\"pause\", () => console.log('Terminated.'));\n\n\tfunction evaluate(rawInput) {\n\t\tconst command = rawInput.trim();\n\t\tswitch (command) {\n\t\t\tcase \"help\":\n\t\t\t\tconsole.log(`\n\thelp - get this list\n\tlist - show all items\n\texit - leaves program\n\t`);\n\t\t\t\tbreak;\n\t\t\tcase \"list\":\n\t\t\t\tconsole.log(`\n\tpageItems\n\tusers\n\titemTypes\n\t`);\n\t\t\t\tbreak;\n\t\t\tcase \"exit\":\n\t\t\t\tprocess.stdin.pause();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(`unknown command, type \"help\" for a list of commands`);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t----------------------------","points":100,"extras":"","systemWhenCreated":"2020-05-02 10:20:29","systemWhoCreated":"systemUnknown"},{"id":73,"category":"windows","title":"How to set up Git Bash in Hyper terminal","body":"- download **and** install Hyper: https://hyper.is\n- copy this text: https://gist.github.com/coco-napky/404220405435b3d0373e37ec43e54a23\n- paste in Edit | Preferences (or [[CTRL-,]])","points":30,"extras":"","systemWhenCreated":"2020-05-04 10:37:19","systemWhoCreated":"systemUnknown"},{"id":74,"category":"Bootstrap","title":"Basic Bootstrap/React Form","body":"- HTML\n\t-------------------\n\t<div className=\"card mt-3\">\n\t\t<div className=\"apt-addheading card-header bg-primary text-white\">Termin hinzufügen</div>\n\t\t<div className=\"card-body\">\n\n\t\t\t<form id=\"aptForm\" noValidate>\n\n\t\t\t\t<div className=\"form-group form-row\">\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName=\"col-md-2 col-form-label text-md-right\"\n\t\t\t\t\t\thtmlFor=\"petName\"\n\t\t\t\t\t\treadOnly\n\t\t\t\t\t>Tiername</label>\n\t\t\t\t\t<div className=\"col-md-10\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"petName\"\n\t\t\t\t\t\t\tplaceholder=\"Tiername\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"form-group form-row\">\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName=\"col-md-2 col-form-label text-md-right\"\n\t\t\t\t\t\thtmlFor=\"ownerName\"\n\t\t\t\t\t>Besitzer</label>\n\t\t\t\t\t<div className=\"col-md-10\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"ownerName\"\n\t\t\t\t\t\t\tplaceholder=\"Name des Besitzers\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"form-group form-row\">\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName=\"col-md-2 col-form-label text-md-right\"\n\t\t\t\t\t\thtmlFor=\"aptDate\"\n\t\t\t\t\t>Datum</label>\n\t\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"aptDate\"\n\t\t\t\t\t\t\tid=\"aptDate\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName=\"col-md-2 col-form-label text-md-right\"\n\t\t\t\t\t\thtmlFor=\"aptTime\"\n\t\t\t\t\t>Uhrzeit</label>\n\t\t\t\t\t<div className=\"col-md-4\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"time\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"aptTime\"\n\t\t\t\t\t\t\tid=\"aptTime\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"form-group form-row\">\n\t\t\t\t\t<label className=\"col-md-2 text-md-right\" htmlFor=\"aptNotes\">Anmerkungen</label>\n\t\t\t\t\t<div className=\"col-md-10\">\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\trows=\"4\"\n\t\t\t\t\t\t\tcols=\"50\"\n\t\t\t\t\t\t\tname=\"aptNotes\"\n\t\t\t\t\t\t\tid=\"aptNotes\"\n\t\t\t\t\t\t\tplaceholder=\"Anmerkungen\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"form-group form-row mb-0\">\n\t\t\t\t\t<div className=\"offset-md-2 col-md-10\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tclassName=\"btn btn-primary d-block ml-auto\"\n\t\t\t\t\t\t>Termin hinzufügen</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t-------------------\n- CSS:\n\t---------------------\n\t.apt-addheading {\n\t\tcursor: pointer;\n\t\tuser-select: none;\n\t}\n\t--------------------","points":50,"extras":"","systemWhenCreated":"2020-05-12 19:31:05","systemWhoCreated":"systemUnknown"},{"id":75,"category":"bootstrap","title":"Responsive dark navbar","body":"- HTML\n\t----------------\n\t<header class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n\t\t<ul class=\"navbar-nav\">\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<a href=\"#\" class=\"nav-link active\">Welcome</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<a href=\"#\" class=\"nav-link\">Create Item</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<a href=\"#\" class=\"nav-link\">Create Page</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<a href=\"#\" class=\"nav-link disabled\">About</a>\n\t\t\t</li>\n\t\t</ul>\n\t</header>\n\t----------------","points":20,"extras":"","systemWhenCreated":"2020-05-12 21:50:22","systemWhoCreated":"systemUnknown"},{"id":76,"category":"bootstrap","title":"Unresponsive dark navbar","body":"- HTML\n\t----------------\n\t<nav class=\"navbar navbar-expand navbar-dark bg-dark\">\n\t\t<ul class=\"navbar-nav\">\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<NavLink to=\"/all\" className=\"nav-link\"><GiStack /> All</NavLink>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<NavLink to=\"/git\" className=\"nav-link\"><GiStack /> Git</NavLink>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<NavLink to=\"/gimp\" className=\"nav-link\"><GiStack /> Gimp</NavLink>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item\">\n\t\t\t\t<NavLink to=\"/linux\" className=\"nav-link\"><GiStack /> Linux</NavLink>\n\t\t\t</li>\n\t\t</ul>\n\t</nav>\n\t----------------\n- It won't break on mobile devices: ##theunresponheader","points":20,"extras":"","systemWhenCreated":"2020-05-12 22:38:49","systemWhoCreated":"systemUnknown"},{"id":77,"category":"bootstrap","title":"Responsive, collapsable navbar with graphic","body":"- collapsable menu on smartphones:##responsenavbarimage\n- HTML\n\t----------------------\n\t<header class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n\t\t<div class=\"navbar-brand\">\n\t\t\t<img src=\"logo.png\" alt=\"\">\n\t\t</div>\n\t\t<button class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbar-content\">\n\t\t\t<span class=\"navbar-toggler-icon\"></span>\n\t\t</button>\n\t\t<div class=\"collapse navbar-collapse\" id=\"navbar-content\">\n\t\t\t<nav>\n\t\t\t\t<ul class=\"navbar-nav mr-auto\">\n\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t<a href=\"#\" class=\"nav-link active\">Welcome</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t<a href=\"#\" class=\"nav-link\">Create Item</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t<a href=\"#\" class=\"nav-link\">Create Page</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t<a href=\"#\" class=\"nav-link disabled\">About</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</div>\n\t</header>\n\t----------------------\n- see [code at GitHub](https://github.com/edwardtanguay/bootstrap4/tree/58d8f2bee10981c90051b2f3aa68fc8087329f03/navBarResponsiveWithGraphic)","points":100,"extras":"","systemWhenCreated":"2020-05-16 12:42:17","systemWhoCreated":"systemUnknown"},{"id":79,"category":"CSS","title":"Three-Screen Responsive Layout with grid-container and @media screen","body":"- three screens:##threeresponsivescreens\n- HTML:\n\t------------------------\n\t<section class=\"grid-container\">\n\t\t<header>\n\t\t\t<h1>Lorem ipsum dolor sit.</h1>\n\t\t</header>\n\t\t<main>\n\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex, maxime enim alias, illum blanditiis, amet\n\t\t\t\teaque id illo accusantium eius nisi facere rerum? Beatae atque, tempora explicabo repellendus reiciendis\n\t\t\t\tconsequuntur.</p>\n\t\t\t<p>Quis, porro praesentium pariatur corporis impedit assumenda eum vero quos blanditiis voluptate recusandae\n\t\t\t\todio natus illum similique dolorem optio vitae doloribus mollitia voluptatibus consequuntur nesciunt\n\t\t\t\tperferendis aliquid, et nisi. Id.</p>\n\t\t\t<p>Atque ipsum, eos, excepturi optio dolore aliquid error placeat nemo magni, natus fuga! Molestiae modi\n\t\t\t\tassumenda sequi ullam velit perferendis eligendi, alias esse recusandae doloribus aut molestias nihil\n\t\t\t\test reprehenderit?</p>\n\t\t\t<p>Eveniet, cupiditate repudiandae molestiae quos. Laboriosam magni, ullam tempore vitae repellendus\n\t\t\t\ttemporibus possimus. Dolorum corrupti voluptatum, repellat cum praesentium facilis soluta quis porro\n\t\t\t\taliquid itaque perferendis, nostrum libero fuga eaque?</p>\n\t\t</main>\n\t\t<aside>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit. Dolorem, labore dolorum, fuga explicabo, placeat\n\t\t\taliquid facere nesciunt illo animi neque dolores voluptatibus reprehenderit doloribus tenetur amet facilis\n\t\t\tsit quidem corrupti.\n\t\t</aside>\n\t\t<footer>Lorem ipsum dolor sit amet, consectetur.</footer>\n\t</section>\n\t------------------------\n- CSS:\n\t-----------------------\n\tbody {\n\t\tbackground: #dedede;\n\t\tpadding: 10px;\n\t}\n\n\theader {\n\t\tbackground: #7c9aea;\n\t\tborder: 2px solid #1d42a7;\n\t\tpadding: 10px;\n\t}\n\n\tmain {\n\t\tbackground: #81ce8a;\n\t\tborder: 2px solid #2f7136;\n\t\tpadding: 10px;\n\t}\n\n\taside {\n\t\tbackground: #e88585;\n\t\tborder: 2px solid #a22424;\n\t\tpadding: 10px;\n\t}\n\n\tfooter {\n\t\tbackground: #eb8fe8;\n\t\tborder: 2px solid #8d1f89;\n\t\tpadding: 10px;\n\t}\n\n\t.grid-container {\n\t\tdisplay: grid;\n\t\tgrid-gap: 20px;\n\t}\n\n\t@media screen and (min-width: 768px) {\n\t\t.grid-container {\n\t\t\tgrid-template-columns: 1fr 200px;\n\t\t}\n\n\t\theader,\n\t\tfooter {\n\t\t\tgrid-column: 1 / 3;\n\t\t}\n\t}\n\n\t@media screen and (min-width: 1024px) {\n\t\t.grid-container {\n\t\t\tgrid-template-columns: 1fr 400px;\n\t\t\tgrid-template-rows: auto repeat(2, 1fr);\n\t\t}\n\n\t\tmain {\n\t\t\tgrid-row: 2 / 4;\n\t\t}\n\n\t\tfooter {\n\t\t\tgrid-column: 2 / 3;\n\t\t}\n\t}\n\t-----------------------\n- full code at [GitHub](https://github.com/edwardtanguay/cssgrid4/tree/45e10821f718217daa54cf96a03ed883ac99f482/threeScreenResponsive)","points":100,"extras":"","systemWhenCreated":"2020-05-17 12:11:36","systemWhoCreated":"systemUnknown"},{"id":80,"category":"JavaScript","title":"How to define multiple variables from an array or JavaScript object","body":"- this is useful when sending data back from functions, e.g. return an array or JavaScript object, note that one can even return a function\n\t--------------------\n\tconsole.log(`${name}: \"${quote}\"`);\n\n\tconst { username, text, buildQuote } = { username: 'Julian the Apostate', text: 'You have won, O Galilean.', buildQuote: (a,b) => { return `It was ${a} who said, \"${b}\"`;} };\n\tconsole.log(`${username}: \"${text}\"`);\n\tconsole.log(buildQuote(username, text));\n\t--------------------","points":20,"extras":"","systemWhenCreated":"2020-05-18 20:27:23","systemWhoCreated":"systemUnknown"},{"id":81,"category":"Node","title":"Make a 10-line web server","body":"- `npm i http-server` (not necessary)\n- server.js:\n\t-------------------------\n\tconst http = require('http');\n\tconst port = 3001;\n\n\thttp.createServer(function (request, repuesto) {\n\t\trepuesto.writeHead(200, { 'Content-Type': 'text/plain' });\n\t\trepuesto.write(\"Hello.\");\n\t\trepuesto.end();\n\t}).listen(port, 'localhost');\n\n\tconsole.log(`listing at http://localhost:${port}`);\n\t-------------------------","points":40,"extras":"","systemWhenCreated":"2020-05-27 00:08:26","systemWhoCreated":"systemUnknown"},{"id":82,"category":"ES6","title":"ES6 function syntax","body":"- these are seven ways you can write functions in ES6:\n\t-----------------------------------\n\tfunction countIt(items) {\n\t\treturn items.length;\n\t}\n\n\tconst countIt2 = function (items) {\n\t\treturn items.length + 1;\n\t}\n\n\tconst countIt3 = (items) => {\n\t\treturn total = items.length + 2;\n\t};\n\n\tconst countIt4 = (items) => items.length + 3;\n\n\tconst countIt5 = items => items.length + 4;\n\n\tconst sayHello = () => \"hello\";\n\n\tconst getAuthor = () => ({\n\t\tfirstName: \"Maruice\",\n\t\tlastName: \"Merleau-Ponty\"\n\t});\n\n\tconst numbers = [1, 2, 3, 4, 5];\n\n\tconsole.log(countIt(numbers));\n\tconsole.log(countIt2(numbers));\n\tconsole.log(countIt3(numbers));\n\tconsole.log(countIt4(numbers));\n\tconsole.log(countIt5(numbers));\n\tconsole.log(sayHello());\n\tconsole.log(getAuthor());\n\t-----------------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-05 16:52:47","systemWhoCreated":"systemUnknown"},{"id":83,"category":"ES6","title":"Syntax to mock functions e.g. for testing","body":"- the code:\n\t---------------------------\n\t// simple example\n\tconst status = \"short\"; // \"short\" or \"long\"\n\tconst displayInfo = status == \"short\"\n\t\t? name => console.log(`Hello, ${name}.`)\n\t\t: name => console.log(`We welcome you, ${name}.`)\n\tdisplayInfo(\"Pierre-Simon\");\n\n\t//realistic example\n\tconst DEVELOPMENT = true;\n\tconst fetchDataReal = () => {\n\t\t// time-intensive operations \n\t};\n\tconst fetchDataTest = () => ({\n\t\tname: 'Gideon Mantall',\n\t\tbirthYear: 1790\n\t});\n\tconst fetchData = DEVELOPMENT\n\t\t? fetchDataTest\n\t\t: fetchDataReal;\n\t---------------------------","points":30,"extras":"","systemWhenCreated":"2020-06-05 17:29:22","systemWhoCreated":"systemUnknown"},{"id":84,"category":"JavaScript","title":"Use arrays of functions","body":"- this example shows a number of tasks that you run on a number:\n\t------------------------------\n\tconst add = (x, y) => x + y;\n\tconst subtract = (x, y) => x - y;\n\tconst multiply = (x, y) => x * y;\n\tconst divide = (x, y) => x / y;\n\n\tconst tasks = [add, subtract, multiply, divide];\n\n\ttasks.forEach(f => console.log(f(3, 5)));\n\t------------------------------","points":25,"extras":"","systemWhenCreated":"2020-06-08 13:04:25","systemWhoCreated":"systemUnknown"},{"id":85,"category":"JavaScript","title":"Send functions as parameters","body":"- note you can send not only predefiend custom but system and on-the-fly functions\n\t-----------------------------\n\tconst add = (x, y) => x + y;\n\tconst subtract = (x, y) => x - y;\n\n\tconst process = (x, y, func) => func(x, y);\n\n\tconsole.log(process(5, 4, add));\n\tconsole.log(process(5, 4, subtract));\n\tconsole.log(process(5, 4, Math.max));\n\tconsole.log(process(5, 4, Math.min));\n\tconsole.log(process(5, 4, (x, y) => x * y));\n\t-----------------------------","points":30,"extras":"","systemWhenCreated":"2020-06-08 13:46:17","systemWhoCreated":"systemUnknown"},{"id":86,"category":"JavaScript","title":"Return functions from functions","body":"- this is known as a function factory:\n\t----------------\n\tconst createMultiplier = y => x => x * y;\n\n\tconst doubleIt = createMultiplier(2);\n\tconst tripleIt = createMultiplier(3);\n\tconst quadrupleIt = createMultiplier(4);\n\n\tconsole.log(doubleIt(5));\n\tconsole.log(tripleIt(5));\n\tconsole.log(quadrupleIt(5));\n\t----------------","points":35,"extras":"","systemWhenCreated":"2020-06-08 14:10:38","systemWhoCreated":"systemUnknown"},{"id":87,"category":"JavaScript","title":"Simple example of closure","body":"- notes that the value is still inside the function even after it has been passed:\n\t-----------------\n\tconst createFunction = () => {\n\t\tconst x = 5;\n\t\treturn () => console.log(`the value is ${x}`); \n\t};\n\n\tconst func = createFunction();\n\n\tfunc();\n\t-----------------","points":25,"extras":"","systemWhenCreated":"2020-06-08 14:50:58","systemWhoCreated":"systemUnknown"},{"id":88,"category":"JavaScript","title":"Simple JavaScript class with private variables","body":"- private variables are available only via public setter and getter methods\n\t-----------------------------\n\tconst Person = ({ name, age, job }) => {\n\t\tlet _name = name;\n\t\tlet _age = age;\n\t\tlet _job = job;\n\n\t\treturn {\n\t\t\tgetName: () => _name,\n\t\t\tgetAge: () => _age,\n\t\t\tgetJob: () => _job,\n\n\t\t\tsetName: name => _name = name,\n\t\t\tsetAge: age => _age = age,\n\t\t\tsetJob: job => _job = job\n\t\t};\n\t}\n\n\tconst p = Person({ name: 'Maurice', age: 73, job: 'writer' });\n\tconsole.log(p.getName());\n\tp.setName(\"Angelo\");\n\tconsole.log(p.getName());\n\t-----------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-08 17:33:26","systemWhoCreated":"systemUnknown"},{"id":89,"category":"JavaScript","title":"Use high-order JavaScript functions to separate concerns","body":"- instead of having parameter checking logic in the function itself, do this:\n\t------------------------------\n\tconst divide = (x,y) => {\n\t\treturn x/y;\n\t};\n\n\tconst secondArgumentIsntZero = func => (...args) => {\n\t\tif(args[1] === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn func(...args);\n\t}\n\n\tconst divideSafe = secondArgumentIsntZero(divide);\n\n\tconsole.log(divideSafe(10,0));\n\t------------------------------","points":30,"extras":"","systemWhenCreated":"2020-06-11 12:09:04","systemWhoCreated":"systemUnknown"},{"id":90,"category":"ES6","title":"Spread operator for objects and arrays and function parameters","body":"- note how updates overwrite properties\n\t------------------------\n\t// objects\n\n\tconst person = {\n\t\tname: \"Paul Dirac\",\n\t\tage: 40,\n\t\thairColor: 'brown'\n\t};\n\n\tconst careerData = {\n\t\ttitle: 'physicist',\n\t\tarea: 'quantum theory'\n\t};\n\n\tconst nationalityData = {\n\t\tcountry: 'Britain',\n\t\tworkedIn: 'USA'\n\t};\n\n\tconst updates = {\n\t\thairColor: 'black'\n\t}\n\n\tconst personWithCareerData = {\n\t\t...person,\n\t\t...careerData,\n\t\tcountry: nationalityData.country,\n\t\t...updates\n\t};\n\n\tconsole.log(personWithCareerData);\n\n\t// arrays\n\n\tconst numbers = [1, 2, 3, 4, 5];\n\tconst newNumbers = [\n\t\t0,\n\t\t...numbers,\n\t\t6, 7, 8\n\t]\n\n\tconsole.log(newNumbers);\n\n\t// functions\n\tconst add = (x, y, z) => console.log(`${x} + ${y} + ${z} = ${x + y + z}`);\n\tadd(1, 2, 3);\n\tconst numbers = [6, 7, 8, 9, 10];\n\tadd(...numbers);\n\t------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-11 17:44:11","systemWhoCreated":"systemUnknown"},{"id":91,"category":"ES6","title":"Use .map() to convert arrays to new arrays","body":"- note that you can send a predefined function, see tripled:\n\t--------------------------\n\tconst numbers = [1, 2, 3, 4, 5];\n\tnumbers.reverse();\n\tconst doubled = numbers.map(x => x * 2);\n\tconst tripleIt = x => x * 3;\n\tconst tripled = numbers.map(tripleIt);\n\n\tconsole.log(numbers);\n\tconsole.log(doubled);\n\tconsole.log(tripled);\n\n\tconst people = [\n\t\t{\n\t\t\tname: \"George Romanes\",\n\t\t\tcountry: \"Canada\"\n\t\t},\n\t\t{\n\t\t\tname: \"Syngman Rhee\",\n\t\t\tcountry: \"South Korea\"\n\t\t},\n\t\t{\n\t\t\tname: \"Harry Hopkins\",\n\t\t\tcountry: \"USA\"\n\t\t}\n\t];\n\n\tconst names = people.map(x => x.name);\n\n\tconst extendedPeople = people.map(x => {\n\t\tconst pieces = x.name.trim().split(\" \");\n\t\treturn {\n\t\t\tfirstName: pieces[0],\n\t\t\tlastName: pieces[1],\n\t\t\tisCanadian: x.country === \"Canada\"\n\t\t}\n\t});\n\n\tconsole.log(people);\n\tconsole.log(names);\n\tconsole.log(extendedPeople);\n\t--------------------------","points":70,"extras":"","systemWhenCreated":"2020-06-12 14:14:15","systemWhoCreated":"systemUnknown"},{"id":92,"category":"ES6","title":"How to filter arrays","body":"- notice difference between `longNames` and `longNamedPeople`:\n\t-------------------------\n\tconst numbers = [1, 2, 3, 5, 7, 45, 67, 88, 34, 65, 34, 23, 65, 23, 42, 22, 25];\n\tconst evenNumbers = numbers.filter(x => x % 2 === 0);\n\tconst oddNumbers = numbers.filter(x => x % 2 !== 0);\n\n\tconsole.log(numbers);\n\tconsole.log(evenNumbers);\n\tconsole.log(oddNumbers);\n\n\tconst people = [\n\t\t{\n\t\t\tname: \"Petrarch\",\n\t\t\tdied: 1374\n\t\t},\n\t\t{\n\t\t\tname: \"Vincent Martín y Soler\",\n\t\t\tdied: 1806\n\t\t},\n\t\t{\n\t\t\tname: \"Henri Dunant\",\n\t\t\tdied: 1910\n\t\t},\n\t];\n\n\tconst modernPeople = people.filter( x => x.died > 1800);\n\tconsole.log(modernPeople);\n\n\tconst minLength = len => x => x.length >= len;\n\n\tconst longNames = people.map(x => x.name).filter(minLength(10));\n\tconsole.log(longNames);\n\n\tconst longNamedPeople = people.filter( x => x.name.length >= 10);\n\tconsole.log(longNamedPeople);\n\t-------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-12 16:20:38","systemWhoCreated":"systemUnknown"},{"id":93,"category":"ES6","title":"How to use .every() and .some()","body":"- note the `isNotEmpty` function:\n\t------------------------------------\n\tconst employees = getEmployees();\n\tconsole.log(employees.length);\n\tconsole.log(employees.map(x => {\n\t\treturn {\n\t\t\tname: x.firstName + ' ' + x.lastName,\n\t\t\tcity: x.address.city,\n\t\t\tyearOfBirth: x.birthDate.substr(0, 4)\n\t\t};\n\t}));\n\tconst fromLondon = x => x.address.city === \"London\";\n\tconsole.log(employees.every(fromLondon));\n\tconsole.log(employees.some(fromLondon));\n\tconsole.log(employees.filter(fromLondon).length);\n\n\tconst isNotEmpty = string => !!string;\n\n\tconsole.log(`The following employees have no titles: ${employees.filter(x => x.title === \"\").map(x => x.firstName + \" \" + x.lastName).join(\", \")}`);\n\tconsole.log(employees.map(x => x.lastName).every(isNotEmpty));\n\tconsole.log(employees.map(x => x.title).every(isNotEmpty));\n\n\t// data\n\tfunction getEmployees() {\n\t\treturn [\n\t\t\t{\n\t\t\t\t\"employeeID\": 2,\n\t\t\t\t\"lastName\": \"Fuller\",\n\t\t\t\t\"firstName\": \"Andrew\",\n\t\t\t\t\"title\": \"Vice President Sales\",\n\t\t\t\t\"titleOfCourtesy\": \"Dr.\",\n\t\t\t\t\"birthDate\": \"1952-02-19 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1992-08-14 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"908 W. Capital Way\",\n\t\t\t\t\t\"city\": \"Tacoma\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98401,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-9482\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative was promoted to sales manager\",\n\t\t\t\t\"reportsTo\": \"NULL\",\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t1730,\n\t\t\t\t\t1833,\n\t\t\t\t\t2116,\n\t\t\t\t\t2139,\n\t\t\t\t\t2184,\n\t\t\t\t\t40222,\n\t\t\t\t\t1581\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 5,\n\t\t\t\t\"lastName\": \"Buchanan\",\n\t\t\t\t\"firstName\": \"Steven\",\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\"birthDate\": \"1955-03-04 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1993-10-17 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"14 Garrett Hill\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"SW1 8JR\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-4848\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Steven Buchanan graduated from St. Andrews University in Scotland with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992 he spent 6 months in an orientation program at the Seattle office.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t2903,\n\t\t\t\t\t7960,\n\t\t\t\t\t8837,\n\t\t\t\t\t10019,\n\t\t\t\t\t10038,\n\t\t\t\t\t11747,\n\t\t\t\t\t14450\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 1,\n\t\t\t\t\"lastName\": \"Davolio\",\n\t\t\t\t\"firstName\": \"Nancy\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1948-12-08 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1992-05-01 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"507 20th Ave. E. Apt. 2A\",\n\t\t\t\t\t\"city\": \"Seattle\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98122,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-9857\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Education includes a BA in psychology from Colorado State University in 1970.  She also completed The Art of the Cold Call.  Nancy is a member of Toastmasters International.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t6897,\n\t\t\t\t\t19713\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 3,\n\t\t\t\t\"lastName\": \"Leverling\",\n\t\t\t\t\"firstName\": \"Janet\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1963-08-30 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1992-04-01 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"722 Moss Bay Blvd.\",\n\t\t\t\t\t\"city\": \"Kirkland\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98033,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-3412\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Janet has a BS degree in chemistry from Boston College (1984). She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t30346,\n\t\t\t\t\t31406,\n\t\t\t\t\t32859,\n\t\t\t\t\t33607\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 4,\n\t\t\t\t\"lastName\": \"Peacock\",\n\t\t\t\t\"firstName\": \"Margaret\",\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"titleOfCourtesy\": \"Mrs.\",\n\t\t\t\t\"birthDate\": \"1937-09-19 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1993-05-03 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"4110 Old Redmond Rd.\",\n\t\t\t\t\t\"city\": \"Redmond\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98052,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-8122\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Margaret holds a BA in English literature from Concordia College (1958) and an MA from the American Institute of Culinary Arts (1966).  She was assigned to the London office temporarily from July through November 1992.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t20852,\n\t\t\t\t\t27403,\n\t\t\t\t\t27511\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 6,\n\t\t\t\t\"lastName\": \"Suyama\",\n\t\t\t\t\"firstName\": \"Michael\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\"birthDate\": \"1963-07-02 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1993-10-17 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"Coventry House Miner Rd.\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"EC2 7JR\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-7773\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Michael is a graduate of Sussex University (MA Economics 1983) and the University of California at Los Angeles (MBA marketing 1986).  He has also taken the courses Multi-Cultural Selling and Time Management for the Sales Professional.\",\n\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t85014,\n\t\t\t\t\t85251,\n\t\t\t\t\t98004,\n\t\t\t\t\t98104,\n\t\t\t\t\t98052\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 7,\n\t\t\t\t\"lastName\": \"King\",\n\t\t\t\t\"firstName\": \"Robert\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\"birthDate\": \"1960-05-29 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1994-01-02 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"Edgeham Hollow Winchester Way\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"RG1 9SP\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-5598\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Robert King served in the Peace Corps and traveled extensively before completing his degree in English at the University of Michigan in 1992 the year he joined the company.\",\n\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t60601,\n\t\t\t\t\t80202,\n\t\t\t\t\t80909,\n\t\t\t\t\t90405,\n\t\t\t\t\t94025,\n\t\t\t\t\t94105,\n\t\t\t\t\t95008,\n\t\t\t\t\t95054,\n\t\t\t\t\t95060,\n\t\t\t\t\t60179\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 8,\n\t\t\t\t\"lastName\": \"Callahan\",\n\t\t\t\t\"firstName\": \"Laura\",\n\t\t\t\t\"title\": \"Inside Sales Coordinator\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1958-01-09 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1994-03-05 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"4726 11th Ave. N.E.\",\n\t\t\t\t\t\"city\": \"Seattle\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98105,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-1189\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Laura received a BA in psychology from the University of Washington.  She has also completed a course in business French.  She reads and writes French.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t19428,\n\t\t\t\t\t44122,\n\t\t\t\t\t45839,\n\t\t\t\t\t53404\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 9,\n\t\t\t\t\"lastName\": \"Dodsworth\",\n\t\t\t\t\"firstName\": \"Anne\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1966-01-27 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1994-11-15 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"7 Houndstooth Rd.\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"WG2 7LT\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-4444\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Anne has a BA degree in English from St. Lawrence College.  She is fluent in French and German.\",\n\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t3049,\n\t\t\t\t\t3801,\n\t\t\t\t\t48075,\n\t\t\t\t\t48084,\n\t\t\t\t\t48304,\n\t\t\t\t\t55113,\n\t\t\t\t\t55439\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t};\n\t------------------------------------","points":70,"extras":"","systemWhenCreated":"2020-06-12 16:58:20","systemWhoCreated":"systemUnknown"},{"id":94,"category":"gimp","title":"How to make perspective, gradient-colored text","body":"- example:##thecongrats\n- create text in one layer\n- create empty layer below\n- select text layer\n- Layer > Transparency > Alpha to selection\n- hide text layer\n- select empty layer\n- \"g\" for gradiant\n- choose foreground and background colors\n- drag\n- ENTER\n- CTRL-SHIFT-a\n- layer > crop to content\n- then \"t\" for transfrm","points":50,"extras":"","systemWhenCreated":"2020-06-14 21:54:12","systemWhoCreated":"systemUnknown"},{"id":95,"category":"gimp","title":"Outline around text","body":"- example:##thethetext\n- create text\n- layer > text to path\n- paths tab\n- paint-along-the-paths button\n- change foreground color\n- [[Stroke]]","points":40,"extras":"","systemWhenCreated":"2020-06-14 22:38:33","systemWhoCreated":"systemUnknown"},{"id":96,"category":"JavaScript","title":"Sorting array of objects ascending and descending","body":"- note that you can pass in the appropriate sorting function:\n\t------------------------\n\tconst employees = getEmployees();\n\n\tconst ascendingLastName = (a,b) => a.last > b.last;\n\tconst descendingLastName = (a,b) => a.last < b.last;\n\n\tconsole.log(employees.map(x => {\n\t\treturn {\n\t\t\tfirst: x.firstName,\n\t\t\tlast: x.lastName\n\t\t};\n\t}).sort(descendingLastName));\n\n\n\t// data\n\tfunction getEmployees() {\n\t\treturn [\n\t\t\t{\n\t\t\t\t\"employeeID\": 2,\n\t\t\t\t\"lastName\": \"Fuller\",\n\t\t\t\t\"firstName\": \"Andrew\",\n\t\t\t\t\"title\": \"Vice President Sales\",\n\t\t\t\t\"titleOfCourtesy\": \"Dr.\",\n\t\t\t\t\"birthDate\": \"1952-02-19 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1992-08-14 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"908 W. Capital Way\",\n\t\t\t\t\t\"city\": \"Tacoma\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98401,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-9482\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative was promoted to sales manager\",\n\t\t\t\t\"reportsTo\": \"NULL\",\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t1730,\n\t\t\t\t\t1833,\n\t\t\t\t\t2116,\n\t\t\t\t\t2139,\n\t\t\t\t\t2184,\n\t\t\t\t\t40222,\n\t\t\t\t\t1581\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 5,\n\t\t\t\t\"lastName\": \"Buchanan\",\n\t\t\t\t\"firstName\": \"Steven\",\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\"birthDate\": \"1955-03-04 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1993-10-17 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"14 Garrett Hill\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"SW1 8JR\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-4848\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Steven Buchanan graduated from St. Andrews University in Scotland with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992 he spent 6 months in an orientation program at the Seattle office.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t2903,\n\t\t\t\t\t7960,\n\t\t\t\t\t8837,\n\t\t\t\t\t10019,\n\t\t\t\t\t10038,\n\t\t\t\t\t11747,\n\t\t\t\t\t14450\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 1,\n\t\t\t\t\"lastName\": \"Davolio\",\n\t\t\t\t\"firstName\": \"Nancy\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1948-12-08 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1992-05-01 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"507 20th Ave. E. Apt. 2A\",\n\t\t\t\t\t\"city\": \"Seattle\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98122,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-9857\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Education includes a BA in psychology from Colorado State University in 1970.  She also completed The Art of the Cold Call.  Nancy is a member of Toastmasters International.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t6897,\n\t\t\t\t\t19713\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 3,\n\t\t\t\t\"lastName\": \"Leverling\",\n\t\t\t\t\"firstName\": \"Janet\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1963-08-30 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1992-04-01 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"722 Moss Bay Blvd.\",\n\t\t\t\t\t\"city\": \"Kirkland\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98033,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-3412\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Janet has a BS degree in chemistry from Boston College (1984). She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t30346,\n\t\t\t\t\t31406,\n\t\t\t\t\t32859,\n\t\t\t\t\t33607\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 4,\n\t\t\t\t\"lastName\": \"Peacock\",\n\t\t\t\t\"firstName\": \"Margaret\",\n\t\t\t\t\"title\": \"\",\n\t\t\t\t\"titleOfCourtesy\": \"Mrs.\",\n\t\t\t\t\"birthDate\": \"1937-09-19 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1993-05-03 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"4110 Old Redmond Rd.\",\n\t\t\t\t\t\"city\": \"Redmond\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98052,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-8122\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Margaret holds a BA in English literature from Concordia College (1958) and an MA from the American Institute of Culinary Arts (1966).  She was assigned to the London office temporarily from July through November 1992.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t20852,\n\t\t\t\t\t27403,\n\t\t\t\t\t27511\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 6,\n\t\t\t\t\"lastName\": \"Suyama\",\n\t\t\t\t\"firstName\": \"Michael\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\"birthDate\": \"1963-07-02 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1993-10-17 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"Coventry House Miner Rd.\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"EC2 7JR\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-7773\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Michael is a graduate of Sussex University (MA Economics 1983) and the University of California at Los Angeles (MBA marketing 1986).  He has also taken the courses Multi-Cultural Selling and Time Management for the Sales Professional.\",\n\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t85014,\n\t\t\t\t\t85251,\n\t\t\t\t\t98004,\n\t\t\t\t\t98104,\n\t\t\t\t\t98052\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 7,\n\t\t\t\t\"lastName\": \"King\",\n\t\t\t\t\"firstName\": \"Robert\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\"birthDate\": \"1960-05-29 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1994-01-02 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"Edgeham Hollow Winchester Way\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"RG1 9SP\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-5598\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Robert King served in the Peace Corps and traveled extensively before completing his degree in English at the University of Michigan in 1992 the year he joined the company.\",\n\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t60601,\n\t\t\t\t\t80202,\n\t\t\t\t\t80909,\n\t\t\t\t\t90405,\n\t\t\t\t\t94025,\n\t\t\t\t\t94105,\n\t\t\t\t\t95008,\n\t\t\t\t\t95054,\n\t\t\t\t\t95060,\n\t\t\t\t\t60179\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 8,\n\t\t\t\t\"lastName\": \"Callahan\",\n\t\t\t\t\"firstName\": \"Laura\",\n\t\t\t\t\"title\": \"Inside Sales Coordinator\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1958-01-09 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1994-03-05 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"4726 11th Ave. N.E.\",\n\t\t\t\t\t\"city\": \"Seattle\",\n\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\"postalCode\": 98105,\n\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\"phone\": \"(206) 555-1189\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Laura received a BA in psychology from the University of Washington.  She has also completed a course in business French.  She reads and writes French.\",\n\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t19428,\n\t\t\t\t\t44122,\n\t\t\t\t\t45839,\n\t\t\t\t\t53404\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"employeeID\": 9,\n\t\t\t\t\"lastName\": \"Dodsworth\",\n\t\t\t\t\"firstName\": \"Anne\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\"birthDate\": \"1966-01-27 00:00:00.000\",\n\t\t\t\t\"hireDate\": \"1994-11-15 00:00:00.000\",\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"street\": \"7 Houndstooth Rd.\",\n\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\"postalCode\": \"WG2 7LT\",\n\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\"phone\": \"(71) 555-4444\"\n\t\t\t\t},\n\t\t\t\t\"notes\": \"Anne has a BA degree in English from St. Lawrence College.  She is fluent in French and German.\",\n\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t3049,\n\t\t\t\t\t3801,\n\t\t\t\t\t48075,\n\t\t\t\t\t48084,\n\t\t\t\t\t48304,\n\t\t\t\t\t55113,\n\t\t\t\t\t55439\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t};\n\t------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-15 18:03:00","systemWhoCreated":"systemUnknown"},{"id":97,"category":"HTML","title":"Basic responsive form with fieldset and legends","body":"- the responsive element is that the legends have a smaller size on narrow screens:##thehtmlformok33\n- notice that the radio buttons and checkboxes do not allow user to click on text:\n\t-------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, minimum-scale=1.0\">\n\t\t<title>Fieldset and Legend</title>\n\n\t\t<style>\n\t\t\t@import url('https://fonts.googleapis.com/css?family=Lato:300,400,400i,700,900&display=swap');\n\n\t\t\t* {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tfont-family: 'Lato', sans-serif;\n\t\t\t}\n\n\t\t\tfieldset {\n\t\t\t\tmargin: 2em;\n\t\t\t\tpadding: 1em 2em 2em 2em;\n\t\t\t\tborder: solid 1px #ccc;\n\t\t\t\tborder-radius: 6px;\n\t\t\t\twidth: 30%;\n\t\t\t\tmin-width: 200px;\n\t\t\t}\n\n\t\t\tfieldset:last-of-type {\n\t\t\t\tmargin-bottom: 1em;\n\t\t\t}\n\n\t\t\tlegend {\n\t\t\t\tpadding: 0 .25em;\n\t\t\t\tcolor: #999;\n\t\t\t}\n\n\t\t\tlabel {\n\t\t\t\tdisplay: block;\n\t\t\t\tpadding-top: .5em;\n\t\t\t}\n\n\t\t\tlabel:first-of-type {\n\t\t\t\tmargin-top: 0;\n\t\t\t}\n\n\t\t\tinput {\n\t\t\t\tpadding: .5em;\n\t\t\t\tborder: 1px solid #999;\n\t\t\t}\n\n\t\t\ttextarea {\n\t\t\t\tmin-height: 8em;\n\t\t\t\tmin-width: 16em;\n\t\t\t\tpadding: .5em;\n\t\t\t}\n\n\t\t\tinput[type=\"checkbox\"],\n\t\t\tinput[type=\"radio\"] {\n\t\t\t\tmargin: .5em 0;\n\t\t\t}\n\n\t\t\tinput[type=\"submit\"] {\n\t\t\t\tmargin: 0 2.75em 1em;\n\t\t\t\tpadding: .25em;\n\t\t\t\tdisplay: block;\n\t\t\t}\n\n\t\t\t/* smartphone view */\n\t\t\t@media (max-width: 577px) {\n\t\t\t\tlegend {\n\t\t\t\t\tfont-size: 1.2em;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* computer/table view */\n\t\t\t@media (min-width: 578px) {\n\t\t\t\tlegend {\n\t\t\t\t\tfont-size: 1.75em;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section>\n\t\t\t<form action=\"#\"\n\t\t\t\t  method=\"post\"\n\t\t\t\t  id=\"contact\">\n\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Your contact details:</legend>\n\t\t\t\t\t<label for=\"fullName\">Name:</label>\n\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t   name=\"fullName\"\n\t\t\t\t\t\t   id=\"fullName\">\n\n\t\t\t\t\t<label for=\"email\">Email:</label>\n\t\t\t\t\t<input type=\"email\"\n\t\t\t\t\t\t   name=\"email\"\n\t\t\t\t\t\t   id=\"email\">\n\n\t\t\t\t\t<label for=\"phone\">Phone:</label>\n\t\t\t\t\t<input type=\"tel\"\n\t\t\t\t\t\t   name=\"phone\"\n\t\t\t\t\t\t   id=\"phone\">\n\t\t\t\t</fieldset>\n\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Food Preference:</legend>\n\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t   id=\"noPref\"\n\t\t\t\t\t\t   value=\"noPreference\"> No preference<br>\n\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t   value=\"Vegetarians\"> Vegetarians <br>\n\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t   value=\"Vegan\"> Vegan<br>\n\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t   value=\"Pescetarians\"> Pescetarians<br>\n\t\t\t\t</fieldset>\n\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Activities</legend>\n\t\t\t\t\t<p>Please select the activities you are interested in:</p>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t   name=\"activity\"\n\t\t\t\t\t\t   value=\"yoga\"> Yoga<br>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t   name=\"activity\"\n\t\t\t\t\t\t   value=\"pilates\"> Pilates<br>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t   name=\"activity\"\n\t\t\t\t\t\t   value=\"strength\"> Strength Training<br>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t   name=\"activity\"\n\t\t\t\t\t\t   value=\"boxing\"> Boxing<br>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t   name=\"activity\"\n\t\t\t\t\t\t   value=\"cardio\"> Cardio<br>\n\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t   name=\"activity\"\n\t\t\t\t\t\t   value=\"meditation\"> Meditation<br>\n\t\t\t\t</fieldset>\n\n\t\t\t\t<input type=\"submit\"\n\t\t\t\t\t   id=\"submit\"\n\t\t\t\t\t   value=\"Sign up now\">\n\n\t\t\t</form>\n\t\t</section>\n\t</body>\n\n\t</html>\n\t-------------------------------","points":100,"extras":"","systemWhenCreated":"2020-06-16 04:28:18","systemWhoCreated":"systemUnknown"},{"id":98,"category":"Flexbox","title":"Responsive menu buttons along top that justify space","body":"- notice that `flex: 1 0 auto;` is the same as the three lines below it##themenuokokkj\n\t----------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Document</title>\n\t\t<style>\n\t\t\tul {\n\t\t\t\tmargin: 0 0 0 -2em;\n\t\t\t\tdisplay: flex;\n\t\t\t\tlist-style: none;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t}\n\n\t\t\tul li {\n\t\t\t\tborder: 1px solid green;\n\t\t\t\tpadding: 1em;\n\t\t\t\tmargin: .5em;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tbackground-color: #eee;\n\n\t\t\t\t/* flex: 1 0 auto; */\n\t\t\t\tflex-grow: 1;\n\t\t\t\tflex-shrink: 0;\n\t\t\t\tflex-basis: auto;\n\n\t\t\t\ttext-align: center;\n\n\t\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<ul>\n\t\t\t<li>About</li>\n\t\t\t<li>Items</li>\n\t\t\t<li>Reports</li>\n\t\t\t<li>More Information</li>\n\t\t\t<li>Other Information</li>\n\t\t\t<li>Some Other Information</li>\n\t\t\t<li>Help</li>\n\t\t\t<li>Logout</li>\n\t\t</ul>\n\t</body>\n\n\t</html>\n\t----------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-16 05:19:21","systemWhoCreated":"systemUnknown"},{"id":99,"category":"JavaScript","title":"How to use .reduce()","body":"- note that when you compute the product (multiplying numbers), you need to start with 1 instead of 0:\n\t-------------------------\n\tconst numbers = [5, 4, 1, 7, 3];\n\n\tconst sum = numbers.reduce((acc, x) => {\n\t\tconsole.log(`acc is ${acc}`);\n\t\tconsole.log(`x is ${x}`);\n\t\treturn acc + x;\n\t}, 0);\n\n\tconsole.log(sum);\n\n\t// send functions\n\n\tconst addNumbers = (acc, x) => acc + x;\n\tconst multiplyNumbers = (acc, x) => acc * x;\n\n\tconst sum2 = numbers.reduce(addNumbers, 0);\n\tconsole.log(sum2);\n\tconst product = numbers.reduce(multiplyNumbers, 1);\n\tconsole.log(product);\n\t-------------------------","points":40,"extras":"","systemWhenCreated":"2020-06-16 11:22:34","systemWhoCreated":"systemUnknown"},{"id":100,"category":"JavaScript","title":"How to write a custom .map() function","body":"- note that this isn't an extension function:\n\t------------------------------\n\tconst customMap = (arr, func) => {\n\t\tlet ra = [];\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tconst item = func(arr[i]);\n\t\t\tra.push(item);\n\t\t}\n\t\treturn ra;\n\t};\n\n\tconst monitors = [\n\t\t{\n\t\t\tname: \"Dell\",\n\t\t\tprice: 432,\n\t\t\tdate: '2020-03-23'\n\t\t},\n\t\t{\n\t\t\tname: \"Samsung\",\n\t\t\tprice: 323,\n\t\t\tdate: '2020-03-22'\n\t\t},\n\t\t{\n\t\t\tname: \"Dell\",\n\t\t\tprice: 112,\n\t\t\tdate: '2020-04-23'\n\t\t},\n\t\t{\n\t\t\tname: \"Dell\",\n\t\t\tprice: 543,\n\t\t\tdate: '2020-03-12'\n\t\t},\n\t];\n\tconst titles = customMap(monitors, x => `${x.name} (${x.price},00 €)`);\n\tconsole.log(titles);\n\t------------------------------","points":60,"extras":"","systemWhenCreated":"2020-06-16 14:08:37","systemWhoCreated":"systemUnknown"},{"id":101,"category":"JavaScript","title":"Example of currying (partial application)","body":"- note that the ES6 arrow syntax makes currying possible, but we use the lodash curry method here since it is convenient (npm i lodash):\n\t--------------------------\n\tconst _ = require('lodash');\n\n\t// theory\n\n\tconst add = (x, y, z) => x + y + z;\n\tconsole.log(add(1, 4, 3));\n\n\tconst addPartial = x => (y, z) => add(x, y, z);\n\tconst add5 = addPartial(5);\n\tconsole.log(add5(3, 2));\n\n\tconst addCurry = x => y => z => add(x, y, z);\n\tconsole.log(addCurry(1)(4)(3));\n\n\n\t// example\n\n\tfunction log(date, importance, message) {\n\t\tconsole.log(`[${_.padStart(date.getHours(), 2, '0')}:${_.padStart(date.getMinutes(), 2, '0')}] [${importance}] ${message}`);\n\t}\n\tlog(new Date(), 'high', 'acceXssed text.txt');\n\tlog = _.curry(log);\n\tlog(new Date('2020-01-31 02:15:00'))('low')('ok');\n\tconst logNow = log(new Date());\n\tlogNow('medium', 'logging test');\n\tlogNow('DEBUG', 'before loading');\n\tlogNow('DEBUG', 'after loading');\n\tconst logDebug = logNow('DEBUG');\n\tlogDebug('during loading');\n\t--------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-19 14:35:40","systemWhoCreated":"systemUnknown"},{"id":102,"category":"JavaScript","title":"How to make an independent copy of an array","body":"- when you assign array to another array, you simply make a pointer to it\n- to copy an array, you can use the rest function (...)\n\t---------------------------------------\n\tconst numbers = [1, 2, 3, 4, 5];\n\n\tconst [first] = numbers;\n\tconsole.log(first);\n\tconst [theFirst, theSecond, ...rest] = numbers;\n\tconsole.log(theFirst);\n\tconsole.log(theSecond);\n\tconsole.log(rest);\n\n\tconst copy1 = numbers; // copy1 and numbers point to the same array\n\tconst copy2 = [...numbers]; // copy2 is an independent copy of the array\n\tconsole.log(copy1);\n\tconsole.log(copy2);\n\tnumbers.reverse();\n\tnumbers.push(999);\n\tconsole.log(numbers);\n\tconsole.log(copy1);\n\tconsole.log(copy2);\n\t---------------------------------------","points":30,"extras":"","systemWhenCreated":"2020-06-19 14:55:54","systemWhoCreated":"systemUnknown"},{"id":103,"category":"JavaScript","title":"Simple example of recursion","body":"- make sure that recusive function can exit in every case:\n\t--------------------------------\n\tconst countDown = x => {\n\t\tif (x < 0) return;\n\t\tconsole.log(x);\n\t\tcountDown(x - 1);\n\t};\n\tcountDown(10);\n\n\tconst countUp = (x, max) => {\n\t\tif(x > max) return;\n\t\tconsole.log(x);\n\t\tcountUp(x + 1, max);\n\t};\n\tcountUp(0, 10);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-19 15:23:35","systemWhoCreated":"systemUnknown"},{"id":104,"category":"Underscore","title":"Basics of Underscore.js","body":"- `npm i -D underscore`\n- note most of this functionality is superseded by ES6\n\t--------------------------------\n\tconst _ = require('underscore');\n\tconst { map } = require('underscore');\n\n\tconst numbers = [2, 5, 8, 9];\n\tconst squares = _.map(numbers, x => x * x);\n\tconsole.log(squares);\n\n\t// object-oriented\n\tconsole.log(_([1, 2, 3]).map(x => x + 10));\n\tconsole.log(_([1, 2, 3]).map(x => x + 10).filter(x => x >= 12));\n\n\t// each\n\t_.each(numbers, x => {\n\t\tconsole.log(`x is ${x}`);\n\t});\n\n\t//template (like ES6 string literals)\n\tconst createOutput = _.template(`\n\t<h1><%=name%></h1>\n\t<p>This person is <%=age%> years old.</p>\n\t`);\n\tconst html = createOutput({ name: \"Charles\", age: 45 });\n\tconsole.log(html);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-23 11:59:37","systemWhoCreated":"systemUnknown"},{"id":105,"category":"JavaScript","title":"Basic use of useful Lodash functions","body":"- note much of Lodash is replaced by ES6+\n\t--------------------------------\n\tconst _ = require('lodash');\n\n\t// .map() requires .value() to get the value, enables chaining\n\tconst r1 = _([1, 2, 3]).map(x => 2 * x).value();\n\tconsole.log(r1);\n\n\t// notes that .reduce() does not enable chaining, i.e. no .value()\n\tconst r2 = _([1, 2, 3]).map(x => 2 * x).reduce((a, b) => a + b, 0);\n\tconsole.log(r2);\n\n\tconst person = {\n\t\tname: 'Charles',\n\t\tage: 45,\n\t\tgetInfo: function () {\n\t\t\treturn `The person ${this.name} is ${this.years} years old.`;\n\t\t}\n\t}\n\tconst person2 = _.clone(person);\n\n\tperson.name = 'James';\n\tconsole.log(person.name);\n\tconsole.log(person.getInfo());\n\n\tconsole.log(person2.name);\n\tconsole.log(person2.getInfo());\n\n\t// ._keyBy()\n\tconst computers = [\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: \"PC323\",\n\t\t\tos: 'Windows 10'\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tname: \"PC113\",\n\t\t\tos: 'Windows Server 2016'\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\tname: \"PC221\",\n\t\t\tos: 'Ubuntu'\n\t\t}\n\t];\n\tconst lookupComputers = _.keyBy(computers, 'id');\n\tconsole.log(lookupComputers[2]);\n\n\t// _.deburr()\n\tconst persons = [\n\t\t{\n\t\t\tname: 'Émile Zola',\n\t\t\tage: 45\n\t\t},\n\t\t{\n\t\t\tname: 'Camille Saint-Saëns',\n\t\t\tage: 46\n\t\t}\n\t];\n\t_.each(persons, person => {\n\t\tconsole.log(`save info on ${person.name} to: ${_.deburr(person.name).toLowerCase().split(' ').join('').split('-').join('')}.txt`);\n\t})\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-23 14:17:57","systemWhoCreated":"systemUnknown"},{"id":106,"category":"JavaScript","title":"Basics of lazy.js including reading website line-by-line with .each()","body":"- `npm i -D lazy.js` (note: not `lazy` but `lazy.js`)\n\t--------------------------------\n\tconst _ = require('lazy.js');\n\n\tconst numbers = [3, 4, 2];\n\n\tlet count = 1;\n\tconsole.log(numbers.map(x => {\n\t\treturn {\n\t\t\tid: count++,\n\t\t\tnumber: x,\n\t\t\tdouble: x * 2\n\t\t}\n\t}));\n\n\t_.makeHttpRequest('http://localhost:29900/howtos?id=100')\n\t\t.lines()\n\t\t.take(10)\n\t\t.each(line => console.log(line));\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-06-23 15:10:46","systemWhoCreated":"systemUnknown"},{"id":107,"category":"JavaScript","title":"JavaScript Pattern: Singleton","body":"- install moment.js like this: `npm i moment`\n- to see this work, comment out the if-statement in the constructor to see that each logger instance will then have its own count number\n\t--------------------------------\n\tconst moment = require('moment');\n\n\tlet loggerInstance = null;\n\n\tclass Logger {\n\t\tconstructor() {\n\t\t\tthis.count = 1;\n\t\t\tif (!loggerInstance) {\n\t\t\t\tloggerInstance = this;\n\t\t\t} else {\n\t\t\t\treturn loggerInstance;\n\t\t\t}\n\t\t}\n\n\t\tlog(message) {\n\t\t\tconst d = moment(new Date());\n\t\t\tconsole.log(`${d.format('YYYY-MM-DD HH:mm:ss')}: ${message} (Log Message #${String(this.count).padStart(5, '0')})`);\n\t\t\tthis.count++;\n\t\t}\n\t}\n\n\tconst logger1 = new Logger();\n\tlogger1.log(\"printed report\");\n\tlogger1.log(\"saved file\");\n\n\tconst logger2 = new Logger();\n\tlogger2.log(\"transferred data\");\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-24 11:46:58","systemWhoCreated":"systemUnknown"},{"id":108,"category":"JavaScript","title":"Javascript Pattern: Factory ","body":"- note the use of .forEach()\n\t--------------------------------\n\tclass Building {\n\t\tconstructor(name = '(unknown)') {\n\t\t\tthis.name = name;\n\t\t}\n\t\tdisplay() { }\n\t}\n\n\tclass BuildingFactory {\n\t\tcreate(type, options = {}) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 'house':\n\t\t\t\t\tconst house = new House();\n\t\t\t\t\thouse.name = options.name ? options.name : house.name;\n\t\t\t\t\thouse.neighborhood = options.neighborhood ? options.neighborhood : house.neighborhood;\n\t\t\t\t\thouse.numberOfGarages = options.numberOfGarages ? options.numberOfGarages : house.numberOfGarages;\n\t\t\t\t\treturn house;\n\t\t\t\tcase 'school':\n\t\t\t\t\tconst school = new School();\n\t\t\t\t\tschool.name = options.name ? options.name : school.name;\n\t\t\t\t\tschool.district = options.district ? options.district : school.district;\n\t\t\t\t\tschool.numberOfSportsFields = options.numberOfSportsFields ? options.numberOfSportsFields : school.numberOfSportsFields;\n\t\t\t\t\treturn school;\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tclass House extends Building {\n\t\tconstructor(name, neighborhood, numberOfGarages) {\n\t\t\tsuper(name);\n\t\t\tthis.neighborhood = '';\n\t\t\tthis.numberOfGarages = 0;\n\t\t}\n\t\tdisplay() {\n\t\t\treturn `The house \"${this.name}\" is in the neighborhood \"${this.neighborhood}\" and has ${this.numberOfGarages} garages.`;\n\t\t}\n\t}\n\n\tclass School extends Building {\n\t\tconstructor(name, district, numberOfSportsFields) {\n\t\t\tsuper(name);\n\t\t\tthis.district = '';\n\t\t\tthis.numberOfSportsFields = 0;\n\t\t}\n\t\tdisplay() {\n\t\t\treturn `The school \"${this.name}\" is in district \"${this.neighborhood}\" and has ${this.numberOfSportsFields} sports fields.`;\n\t\t}\n\t}\n\n\tconst buildingFactory = new BuildingFactory();\n\tconst buildings = [\n\t\tbuildingFactory.create('house', { name: 'Family Smith', neighborhood: 'East Side', numberOfGarages: 1 }),\n\t\tbuildingFactory.create('house', { name: 'Family Ackerson', neighborhood: 'West Side', numberOfGarages: 2 }),\n\t\tbuildingFactory.create('school', { name: 'Goethe Gymnasium', district: '23', numberOfSportsFields: 2 }),\n\t\tbuildingFactory.create('school', { name: 'Schiller Gymnasium', district: '25', numberOfSportsFields: 3 })\n\t]\n\tbuildings.forEach(x => console.log(x.display()));\n\t--------------------------------","points":80,"extras":"","systemWhenCreated":"2020-06-24 13:31:02","systemWhoCreated":"systemUnknown"},{"id":109,"category":"Windows","title":"How to make a Windows task to start a PC at a certain time each week","body":"- command line\n- `taskschd`\n- click on task plan library (second level)\n- (on right) create task\n- give name, set time\n- `C:\\Windows\\System32\\shutdown.exe`\n- don't forget the -r argument","points":30,"extras":"","systemWhenCreated":"2020-06-24 13:52:01","systemWhoCreated":"systemUnknown"},{"id":110,"category":"JavaScript","title":"Basic examples for both CommonJS/require and ES6/import module loading in Node.js","body":"- CommonJS/require\n\t- calc.js\n\t\t--------------------------------\n\t\texports.add = (a, b) => {\n\t\t\treturn a + b;\n\t\t};\n\n\t\texports.multiply = (a, b) => a * b;\n\t\t--------------------------------\n\t- server.js\n\t\t--------------------------------\n\t\tconst calc = require('./calc');\n\n\t\tfor (let x = 0; x <= 10; x++) {\n\t\t\tconsole.log(calc.add(x, x));\n\t\t\tconsole.log(calc.multiply(x, x));\n\t\t}\n\t\t--------------------------------\n- ES6/import\n\t- calc.js\n\t\t--------------------\n\t\tconst add = (a, b) => {\n\t\t\treturn a + b;\n\t\t};\n\n\t\tconst multiply = (a, b) => a * b;\n\n\t\texport default add;\n\t\texport { multiply, add };\n\t\t--------------------\n\t- server.js\n\t\t----------------------\n\t\timport { add, multiply as times} from './calc';\n\n\t\tfor (let x = 0; x <= 10; x++) {\n\t\t\tconsole.log(add(x, x));\n\t\t\tconsole.log(times(x, x));\n\t\t}\n\t\t----------------------\n\t- note that Node.js doesn't yet support ES6/import syntax, so you need to load esm\n\t\t- `npm i esm`\n\t\t- and run your Node file as: `node -r esm server.js`\n\t\t- which you could put in an NPM script:\n\t\t\t- `\"start\": \"node -r esm server.js\"`\n\t\t\t- then start it with `npm start`\n\t\t- or you can make a start file:\n\t\t\t- start.js\n\t\t\t\t------------------------------\n\t\t\t\trequire = require(\"esm\")(module /*, options*/);\n\t\t\t\tmodule.exports = require(\"./server.js\");\n\t\t\t\t------------------------------","points":100,"extras":"","systemWhenCreated":"2020-06-24 16:48:32","systemWhoCreated":"systemUnknown"},{"id":111,"category":"JavaScript","title":"Basic Express/Node HTML server","body":"- install Express with `npm i express`\n\t--------------------------------\n\tconst express = require('express');\n\n\tconst app = express();\n\tconst port = 3000;\n\n\tapp.get('/', (req, res) => {\n\t\tres.send(`<p>Hello <b>HTML</b> page showing on port ${port}.</p>`);\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`Express app is now listening at: http://localhost:${port}`);\n\t});\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-06-24 17:06:55","systemWhoCreated":"systemUnknown"},{"id":112,"category":"JavaScript","title":"JavaScript Pattern: Mixin","body":"- a mixin is functionality that you add to existing classes\n- in this case, we add the ability to log information about the class to two classes\n\t--------------------------------\n\tconst moment = require('moment');\n\n\tclass Book {\n\t\tconstructor(title, author) {\n\t\t\tthis.title = title;\n\t\t\tthis.author = author;\n\t\t}\n\t\tdisplay() {\n\t\t\treturn `The book \"${this.title}\" was written by ${this.author}.`;\n\t\t}\n\t}\n\n\tclass CapitalCity {\n\t\tconstructor(name, country) {\n\t\t\tthis.name = name;\n\t\t\tthis.country = country;\n\t\t}\n\t\tdisplay() {\n\t\t\treturn `The capital of ${this.country} is ${this.name}.`;\n\t\t}\n\t}\n\n\tconst items = [\n\t\tnew Book('Hillbilly Elegy', 'J.D. Vance'),\n\t\tnew Book('Homo Deus', 'Yuval Harari'),\n\t\tnew Book('On Liberty', 'John Stuart Mill'),\n\t\tnew CapitalCity('Caracas', 'Venezuela'),\n\t\tnew CapitalCity('Belmopan', 'Belize'),\n\t]\n\titems.forEach(x => console.log(x.display()));\n\n\tconst loggingMixin = {\n\t\tdisplayLogEntry() {\n\t\t\tconst d = moment(new Date());\n\t\t\treturn `${d.format('YYYY-MM-DD HH:mm:ss')}: Printed: [${this.display()}]`;\n\t\t}\n\t}\n\tObject.assign(Book.prototype, loggingMixin);\n\tObject.assign(CapitalCity.prototype, loggingMixin);\n\titems.forEach(x => console.log(x.displayLogEntry()));\n\t--------------------------------","points":70,"extras":"","systemWhenCreated":"2020-06-25 11:16:38","systemWhoCreated":"systemUnknown"},{"id":113,"category":"JavaScript","title":"How to count totals of entries in an array","body":"- notes that 3.1 is the answer to how to count totals of entries in this array\n- the other examples help one to understand the `.reduce()` method\n- the `()` around the brackets in 3.1 enable an object to be returned as a value and forces the braces to be interpreted as object-braces and not function-braces, see [related question asked on StackOverflow](https://stackoverflow.com/questions/62574150/why-are-the-role-of-the-parentheses-in-this-reduce-syntax-which-creates-a-jav)\n\t--------------------------------\n\tconst languages = ['french', 'french', 'spanish', 'polish', 'spanish', 'german', 'spanish', 'polish', 'spanish', 'spanish', 'french', 'spanish', 'spanish', 'french', 'spanish', 'spanish', 'french', 'french', 'french', 'french', 'french', 'polish', 'spanish', 'german', 'spanish', 'polish', 'spanish', 'spanish', 'french', 'spanish', 'english', 'french', 'spanish', 'spanish', 'french', 'german', 'french', 'french', 'french', 'polish', 'spanish', 'german', 'spanish', 'polish', 'spanish', 'spanish', 'french', 'german', 'spanish', 'french', 'english', 'spanish', 'french', 'french', 'french', 'french', 'french', 'polish', 'spanish', 'german', 'spanish', 'polish', 'spanish', 'spanish', 'french', 'spanish', 'spanish', 'german', 'spanish', 'spanish', 'french', 'french', 'french', 'french', 'french', 'polish', 'spanish', 'german', 'spanish', 'polish', 'spanish', 'spanish', 'french', 'german', 'spanish', 'french', 'spanish', 'spanish', 'french', 'french', 'french', 'french', 'french', 'french'];\n\n\t// 1. iterating while adding a sum\n\tconst sum = languages.reduce((acc, language) => {\n\t\tacc++;\n\t\treturn acc;\n\t}, 0);\n\t// const sum = languages.reduce((acc, language) => ++acc, 0);\n\tconsole.log(`There are ${sum} entries.`);\n\n\t// 2. iterating while building an array\n\tconst initials = languages.reduce((acc, language) => {\n\t\tacc.push(language.substring(0, 1));\n\t\treturn acc;\n\t}, []);\n\tconsole.log(initials);\n\n\t// 3.1 iterating while building a JavaScript object\n\tconst totals = languages.reduce((acc, language) => ({\n\t\t...acc,\n\t\t[language]: acc[language] ? acc[language] + 1 : 1\n\t}), {});\n\tconsole.log(totals);\n\n\t// 3.2 iterating while building a JavaScript object\n\tconst totals2 = languages.reduce((acc, language) => {\n\t\treturn {\n\t\t\t...acc,\n\t\t\t[language]: acc[language] ? acc[language] + 1 : 1\n\t\t}\n\t}, {});\n\tconsole.log(totals2);\n\t--------------------------------","points":150,"extras":"","systemWhenCreated":"2020-06-25 13:43:36","systemWhoCreated":"systemUnknown"},{"id":114,"category":"JavaScript","title":"Using .reduce() to create JavaScript object with sequenced keys","body":"- note that `[name]` is the way to specify a dynamic key \n\t--------------------------------\n\tconst numbers = [3, 6, 8, 4, 78, 8, 4, 4, 78, 8, 4, 4, 3, 3];\n\n\tconst sum = numbers.reduce((acc, x) => {\n\t\tacc += x;\n\t\treturn acc;\n\t}, 0);\n\n\tlet count = 0;\n\tconst totals = numbers.reduce((acc, x) => {\n\t\tconst name = `entry${String(\"00000\" + count).slice(-5)}`;\n\t\tcount++;\n\t\tacc = { \n\t\t\t...acc,\n\t\t\t[name]: x\n\t\t };\n\t\treturn acc;\n\t}, {});\n\n\tconsole.log(sum);\n\tconsole.log(totals);\n\t--------------------------------","points":60,"extras":"","systemWhenCreated":"2020-06-25 15:14:14","systemWhoCreated":"systemUnknown"},{"id":115,"category":"JavaScript","title":"Load and search arrays of words from English, German and French","body":"- to get this, first use `npm i array-of-english-words` etc.\n\t--------------------------------\n\tconst englishWords = require('an-array-of-english-words');\n\tconst germanWords = require('an-array-of-german-words');\n\tconst frenchWords = require('an-array-of-french-words');\n\n\tconst randomEnglishWordIndex = Math.floor(Math.random() * englishWords.length);\n\tconst randomGermanWordIndex = Math.floor(Math.random() * germanWords.length);\n\tconst randomFrenchWordIndex = Math.floor(Math.random() * frenchWords.length);\n\n\tconsole.log(`Random English word ${randomEnglishWordIndex} of ${englishWords.length} is: \"${englishWords[randomEnglishWordIndex]}\"`);\n\tconsole.log(`Random German word ${randomGermanWordIndex} of ${germanWords.length} is: \"${germanWords[randomGermanWordIndex]}\"`);\n\tconsole.log(`Random French word ${randomFrenchWordIndex} of ${frenchWords.length} is: \"${frenchWords[randomFrenchWordIndex]}\"`);\n\n\tconsole.log(englishWords.filter(x => x.startsWith('b') && x.endsWith('tion')));\n\tconsole.log(englishWords.filter(x => x.includes('kar')));\n\tconsole.log(germanWords.filter(x => x.includes('schlum')));\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-06-25 15:57:24","systemWhoCreated":"systemUnknown"},{"id":116,"category":"JavaScript","title":"Display all countries and capitals with Node and Express","body":"- `npm i express`\n- `npm i world-countries-capitals`\n- `npm i nodemon`\n\t--------------------------------\n\tconst express = require('express');\n\tconst wcc = require('world-countries-capitals');\n\tconst countries = wcc.getAllCountryDetails();\n\n\tconst app = express();\n\tconst port = 3000;\n\n\tString.prototype.capitalize = function () {\n\t\treturn this.charAt(0).toUpperCase() + this.slice(1)\n\t}\n\tString.prototype.capitalizeAllWords = function () {\n\t\treturn this.split(' ').map(x => x.capitalize()).join(' ');\n\t}\n\t//console.log(countries[4]);\n\n\tconst getHtml = () => {\n\t\treturn countries.reduce((acc, x) => {\n\t\t\tacc += `<p>${x.country.capitalizeAllWords()} - ${x.capital.capitalizeAllWords()} </p>`;\n\t\t\treturn acc;\n\t\t}, '');\n\t};\n\n\tapp.get('/', (req, res) => {\n\t\tres.send(getHtml());\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`Express app is now listening at: http://localhost:${port}`);\n\t});\n\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-06-25 16:55:19","systemWhoCreated":"systemUnknown"},{"id":117,"category":"JavaScript","title":"Find all anagrams of any word","body":"- `npm i an-array-of-english-words`\n\t--------------------------------\n\tconst englishWords = require('an-array-of-english-words');\n\n\tconst countOccurances = arr =>\n\t\tarr.reduce((acc, str) => ({\n\t\t\t...acc,\n\t\t\t[str]: acc[str] ? acc[str] + 1 : 1\n\t\t}), {});\n\n\tconst hasSameLetterCount = (word1, word2) => {\n\t\tconst word1Count = countOccurances(word1.split(''));\n\t\tconst word2Count = countOccurances(word2.split(''));\n\t\treturn Object.keys(word1Count).length == Object.keys(word2Count).length &&\n\t\t\tObject.keys(word1Count).every(letter => word1Count[letter] === word2Count[letter]);\n\t};\n\n\tconst findAnagrams = (word, words) => {\n\t\treturn `The word \"${word}\" has these anagrams: ` + (words\n\t\t.filter(entry => hasSameLetterCount(word, entry))\n\t\t.filter(x => x !== word)).join(', ');\n\t};\n\n\tconsole.log(findAnagrams(\"cinema\", englishWords));\n\tconsole.log(findAnagrams(\"tar\", englishWords));\n\tconsole.log(findAnagrams(\"live\", englishWords));\n\t--------------------------------","points":90,"extras":"","systemWhenCreated":"2020-06-25 17:41:00","systemWhoCreated":"systemUnknown"},{"id":118,"category":"JavaScript","title":"Responsive double-title menu iconed-items with Flexbox","body":"- displays long in browser, stacked on mobile phone##menudoubleok\n- all in one file:\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Flex Menu Two-Layered</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.menu-section {\n\t\t\t\tpadding-bottom: 2em;\n\t\t\t\tmargin-bottom: 2em;\n\t\t\t\tborder-bottom: 1px solid hsl(0, 0%, );\n\t\t\t}\n\n\t\t\t.menu ul {\n\t\t\t\tlist-style-type: none;\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t\tbackground: hsl(0, 0%, 15%);\n\t\t\t}\n\n\t\t\t.menu li a {\n\t\t\t\tdisplay: block;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tcolor: white;\n\t\t\t\tpadding: .6em 1em;\n\t\t\t}\n\n\t\t\t.menu li a:hover {\n\t\t\t\tbackground: hsl(0, 0%, 25%);\n\t\t\t}\n\n\t\t\t.advanced-nav li a {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: flex-start;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\n\t\t\t.icon {\n\t\t\t\tfont-size: 1.8em;\n\t\t\t\tflex: 0 0 1.5em;\n\t\t\t}\n\n\t\t\t.button-text {\n\t\t\t\tfont-size: 1.2em;\n\t\t\t}\n\n\t\t\t.button-text span {\n\t\t\t\tfont-size: .5em;\n\t\t\t\tfont-weight: lighter;\n\t\t\t\tfont-style: italic;\n\t\t\t\tdisplay: block;\n\t\t\t}\n\n\t\t\t@media screen and (min-width: 30em) {\n\t\t\t\t.advanced-nav ul {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t}\n\n\t\t\t\t.advanced-nav ul li {\n\t\t\t\t\tflex: 1 0 12em;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<nav id=\"advanced-nav\"\n\t\t\t class=\"advanced-nav menu\"\n\t\t\t role=\"navigation\">\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t<div class=\"icon\">\n\t\t\t\t\t\t\t<i class=\"fa fa-home\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"button-text\">\n\t\t\t\t\t\t\txL'accueil\n\t\t\t\t\t\t\t<span>pour se sentir bien dès le départ</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t<div class=\"icon\">\n\t\t\t\t\t\t\t<i class=\"fa fa-cutlery\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"button-text\">\n\t\t\t\t\t\t\tLa nourriture\n\t\t\t\t\t\t\t<span>pour le corps et l'esprit</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t<div class=\"icon\">\n\t\t\t\t\t\t\t<i class=\"fa fa-file-text\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"button-text\">\n\t\t\t\t\t\t\tLes recettes\n\t\t\t\t\t\t\t<span>pour guider votre aventure</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t<div class=\"icon\">\n\t\t\t\t\t\t\t<i class=\"fa fa-paper-plane\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"button-text\">\n\t\t\t\t\t\t\tLes nouvelles\n\t\t\t\t\t\t\t<span>pour se tenir au courant</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</nav>\n\t</body>\n\n\t</html>\n\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-06-25 23:39:16","systemWhoCreated":"systemUnknown"},{"id":119,"category":"JavaScript","title":"Check form fields for errors with collection of functions","body":"- note that only the error is returned, not the field and the error\n\t--------------------------------\n\tconst currentInputValues = {\n\t\tfirstName: 's',\n\t\tlastName: 'Smith',\n\t\tzipCode: '',\n\t\tstate: 'AR'\n\t}\n\n\tconst inputCriteria = {\n\t\tfirstName: [\n\t\t\tvalue => value.length >= 2 ? '' : 'First name must be at least 2 characters.'\n\t\t\tvalue => value.length < 50 ? '' : 'First name must be less than 50 characters.'\n\t\t],\n\t\tlastName: [\n\t\t\tvalue => value.length >= 2 ? '' : 'Last name must be at least 2 characters.'\n\t\t],\n\t\tzipCode: [\n\t\t\tvalue => value.length == 5 ? '' : 'Zip code must be 5 characters.'\n\t\t],\n\t\tstate: [\n\t\t\tvalue => value.length == 2 ? '' : 'Zip code must be 2 characters.'\n\t\t]\n\t};\n\n\tconst getErrorMessages = (input, criteria) => {\n\t\treturn Object.keys(input).reduce((acc, fieldName) => [\n\t\t\t...acc,\n\t\t\t...criteria[fieldName].map(test => test(input[fieldName]))\n\t\t], []).filter(m => m.length > 0);\n\t};\n\n\tconst errorMessages = getErrorMessages(currentInputValues, inputCriteria);\n\tconsole.log(errorMessages);\n\t--------------------------------","points":120,"extras":"","systemWhenCreated":"2020-06-26 14:32:25","systemWhoCreated":"systemUnknown"},{"id":120,"category":"SASS","title":"Compile SASS with Gulp","body":"- make directory `mainsite`\n- open VSCode to this directory\n- install gulp\n\t- `npm init -y`\n\t- `npm i -D gulp`\n\t- `npm i -D gulp-cli`\n- install files for SASS\n\t- `npm i -D gulp-sass`\n\t- `npm i -D del`\n\t\t- this deletes files, needed for gulp\n- setup folders\n\t- `mkdir scss css`\n- index.html \n\t---------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>SASS Base</title>\n\t\t<link rel=\"stylesheet\"\n\t\t\t  href=\"css/main.css\">\n\t</head>\n\n\t<body>\n\t\t<main>\n\t\t\t<h1>Web Browsers</h1>\n\t\t\t<article class=\"browser\">\n\t\t\t\t<h2>Firefox</h2>\n\t\t\t\t<p>Firefox is an open-source web browser developed by Mozilla, released in <span class=\"year\">2002</span>.\n\t\t\t\t\tIt uses the <strong>Gecko</strong> browser\n\t\t\t\t\trendering engine and the <strong>SpiderMonkey</strong> JavaScript rendering engine.</p>\n\t\t\t</article>\n\t\t\t<article class=\"browser\">\n\t\t\t\t<h2>Safari</h2>\n\t\t\t\t<p>Safari is a web browser developed by Apple, released in <span class=\"year\">2003</span>. It uses the\n\t\t\t\t\t<strong>WebKit</strong> browser\n\t\t\t\t\trendering engine and the <strong>JavaScriptCore</strong> rendering engine.\n\t\t\t\t</p>\n\t\t\t</article>\n\t\t\t<article class=\"browser\">\n\t\t\t\t<h2>Chrome</h2>\n\t\t\t\t<p>Chrome is a web browser developed by Google, released in <span class=\"year\">2008</span>. It uses the\n\t\t\t\t\t<strong>Blink</strong> rendering\n\t\t\t\t\tengine and the <strong>V8</strong> JavaScript rendering engine.\n\t\t\t\t</p>\n\t\t\t</article>\n\t</body>\n\n\t</html>\n\t---------------\n- scss/main.scss\n\t-------------------------\n\t$mainHeaderColor: rgb(158, 77, 77); \n\n\tbody {\n\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\tmain {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0.8rem;\n\t\t\tbackground-color: lightgray;\n\t\t\th1 {\n\t\t\t\tcolor: $mainHeaderColor;\n\t\t\t}\n\t\t\th1,\n\t\t\tarticle.browser {\n\t\t\t\tmargin: 10px; \n\t\t\t\tpadding: 0.8rem;\n\t\t\t}\n\t\t\tarticle.browser {\n\t\t\t\tbackground: white;\n\t\t\t\th2 {\n\t\t\t\t\tcolor: $mainHeaderColor;\n\t\t\t\t}\n\t\t\t\th2,\n\t\t\t\tp {\n\t\t\t\t\tmargin: 0.5rem;\n\t\t\t\t}\n\t\t\t\tp {\n\t\t\t\t\tcolor: rgb(141, 25, 25);\n\t\t\t\t\t.year {\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t\t\tcolor: navy;\n\t\t\t\t\t}\n\t\t\t\t\tstrong {\n\t\t\t\t\t\tbackground-color: lightyellow;\n\t\t\t\t\t\tcolor: black;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t---------------\n- gulpfile.js\n\t-----------------------\n\tconst gulp = require('gulp');\n\tconst sass = require('gulp-sass');\n\tconst del = require('del');\n\n\tgulp.task('styles', () => {\n\t\treturn gulp.src('sass/**/*.scss')\n\t\t\t.pipe(sass().on('error', sass.logError))\n\t\t\t.pipe(gulp.dest('./css/'));\n\t});\n\n\tgulp.task('clean', () => {\n\t\treturn del([\n\t\t\t'css/main.css',\n\t\t]);\n\t});\n\n\tgulp.task('watch', () => {\n\t\tgulp.watch('sass/**/*.scss', (done) => {\n\t\t\tgulp.series(['clean', 'styles'])(done);\n\t\t});\n\t});\n\n\t//gulp.task('default', gulp.series(['clean', 'styles']));\n\tgulp.task('default', gulp.series(['watch']));\n\t--------------------------------\n- start gulp watching with: `gulp`","points":150,"extras":"","systemWhenCreated":"2020-06-26 15:23:02","systemWhoCreated":"systemUnknown"},{"id":121,"category":"JavaScript","title":"FIX: Function with single and multiple callbacks","body":"- synchronous\n\t------------------------------\n\tconst shop = (items) => {\n\t\tconst p = [];\n\t\titems.forEach(x => {\n\t\t\tp.push(`[${x} project]`);\n\t\t});\n\t\treturn p;\n\t}\n\n\tconsole.log('sent shopper shopping');\n\tconst projects = shop(['milk', 'cheese', 'salami']);\n\tconsole.log(`shopper is back and delivered: ${projects.join(', ')}`);\n\t------------------------------\n- synchronous showing problem of time\n\t------------------------------------\n\twait = function (ms) {\n\t\tvar start = new Date().getTime();\n\t\tlet now = 0;\n\t\tlet difference = 0;\n\t\tfor (var i = 0; i < 1e17; i++) {\n\t\t\tnow = new Date().getTime();\n\t\t\tdifference = now - start;\n\t\t\tif (difference > ms) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst shop = (items) => {\n\t\tconst p = [];\n\t\titems.forEach(x => {\n\t\t\tp.push(`[${x} project]`);\n\t\t\twait(2000);\n\t\t});\n\t\treturn p;\n\t}\n\n\tconsole.log('sent shopper shopping');\n\tconst projects = shop(['milk', 'cheese', 'salami']);\n\tconsole.log(`shopper is back and delivered: ${projects.join(', ')}`);\n\t------------------------------------\n- **FIX FROM HERE DOWN TO CONTINUE EXAMPLE ABOVE**\n- base\n\t----------------------\n\tconst shop = (items, callback) => {\n\t\tconsole.log(items);\n\t\titems.forEach(x => console.log(`finding ${x}`));\n\t\tif (items.length > 3) {\n\t\t\tcallback('that was difficult');\n\t\t} else {\n\t\t\tcallback('that was easy');\n\t\t}\n\t}\n\n\tshop(['milk', 'cheese', 'bread', 'salt'], (message) => console.log('done, ' + message));\n\t----------------------\n- what one sends back in a callback is only data, one has no control over what actually happens\n\t-------------------------\n\tshop(['milk', 'cheese', 'salt'], (message) => {\n\t\tif(message.includes('difficult')) {\n\t\t\tconsole.log(`they are finished and had a hard time`);\n\t\t} else {\n\t\t\tconsole.log(`they are done and said ${message}`);\n\t\t}\n\t});\n\t-------------------------\n- multiple callbacks\n\t-----------------------------------\n\tconst shop = (items, cbFound, cbFinished) => {\n\t\titems.forEach(x => {\n\t\t\tcbFound(x);\n\t\t});\n\t\tif (items.length > 3) {\n\t\t\tcbFinished('that was difficult');\n\t\t} else {\n\t\t\tcbFinished('that was easy');\n\t\t}\n\t}\n\n\tconst foundTheItem = (item) => console.log(`They found ${item}`);\n\n\tshop(['milk', 'cheese', 'salt'], foundTheItem, (message) => {\n\t\tif(message.includes('difficult')) {\n\t\t\tconsole.log('done for the day');\n\t\t} else {\n\t\t\tconsole.log('done, ' + message);\n\t\t}\n\t});\t\n\t-----------------------------------\n- demonstrate non-blocking aspect of asynchronous callbacks\n\t------------------------------------\n\tconst shop = (items, cbFound, cbFinished) => {\n\t\tlet i = 0;\n\t\tconst id = setInterval(() => {\n\t\t\tcbFound(items[i]);\n\t\t\ti++;\n\t\t\tif (i == items.length) {\n\t\t\t\tcbFinished('now finished');\n\t\t\t\tclearInterval(id);\n\t\t\t}\n\t\t}, 2000);\n\n\t}\n\n\tconst foundTheItem = (item) => console.log(`They found ${item}`);\n\n\tconsole.log('sending backend shopping for data');\n\tshop(['milk', 'cheese', 'salt'], foundTheItem, (message) => {\n\t\tif (message.includes('difficult')) {\n\t\t\tconsole.log('done for the day');\n\t\t} else {\n\t\t\tconsole.log('done, ' + message);\n\t\t}\n\t});\n\tconsole.log('the user can continue to use the interface, i.e. shop() is non-blocking');\n\t------------------------------------","points":120,"extras":"","systemWhenCreated":"2020-06-26 16:47:02","systemWhoCreated":"systemUnknown"},{"id":122,"category":"JavaScript","title":"Create React app with create-react-app that uses TypeScript","body":"- these are fast-track instructions to set up a React site with TypeScript including a TypeScript component##setupTypeScriptAndReact\n- setup create-react-app\n\t- goto directory where you build your apps\n\t- type `npx create-react-app app001` where app001 is the name of your app\n\t- type `npm start` to make sure it runs\n- simplify App.js\n\t--------------------------\n\timport './App.css';\n\n\tfunction App() {\n\t  return (\n\t\t<div className=\"App\">\n\t\t  <header className=\"App-header\">\n\t\t\t<p>\n\t\t\t  Hello.\n\t\t\t</p>\n\t\t  </header>\n\t\t</div>\n\t  );\n\t}\n\n\texport default App;\n\t--------------------------\n- simplify App.css\n\t------------------------------\n\t.App-header {\n\t\tbackground-color: #282c34;\n\t\tmin-height: 100vh;\n\t\tdisplay: flex;\n\t\tcolor: white;\n\t\tpadding: 5px 20px;\n\t}\n\t------------------------------\n- install TypeScript\n\t- `npm i typescript @types/node @types/react-dom @types/jest`\n\t- rename `App.js` and `index.js` to `.tsx`\n\t- `npm start`\n\t\t- note that `tsconfig.json` is automatically created for you\n- add TypeScript, `App.tsx`:\n\t---------------------------\n\tfunction App() {\n\t\tlet name: string = \"Christoph\";\n\t\tlet age: number = 43;\n\t\tlet isDeveloper: boolean = true;\n\t\tlet scores: number[] = [2, 2, 6, 2, 6, 2];\n\t\tlet groups: string[] = ['developers', 'members', 'employees'];\n\n\t\tconst companyInfo: [number, string, boolean] = [23, \"Anton Inc.\", false];\n\n\t\tenum Position { first, second };\n\t\tconst position: Position = Position.first;\n\n\t\tconst displayGreeting = (name: string): void => {\n\t\t\tconsole.log(`Hello ${name}`);\n\t\t}\n\t\tdisplayGreeting('Christopher');\n\n\t\tlet companyMessage: string = '';\n\t\tif (companyInfo[0]) {\n\t\t\tcompanyMessage = `Company is id=${companyInfo[0]} and name=${companyInfo[1]}`;\n\t\t} else {\n\t\t\tcompanyMessage = `Company info not shown`;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<p>Name: <span className=\"data\">{name}</span></p>\n\t\t\t\t\t<p>Age: <span className=\"data\">{age}</span></p>\n\t\t\t\t\t<p>Is a developer: <span className=\"data\">{isDeveloper ? 'yes' : 'no'}</span></p>\n\t\t\t\t\t<p>Scores: <span className=\"data\">{scores.join(', ')}</span></p>\n\t\t\t\t\t<p>Groups: <span className=\"data\">{groups.join(', ')}</span></p>\n\t\t\t\t\t<p>Company: <span className=\"data\">{companyMessage}</span></p>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n\texport default App;\n\t---------------------------\n- replace App.css again for TypeScript site\n\t------------------------------\n\tbody {\n\t\tpadding: 5px 20px; \n\t}\n\t.data {\n\t\tfont-family: 'Courier New', Courier, monospace;\n\t\tcolor: brown;\n\t\tfont-weight: 600;\n\t\tbackground-color: #eee;\n\t\tdisplay: inline-block;\n\t\tpadding: 4px 6px;\n\t}\n\t------------------------------\n- add component: `src/components/MoreInfo.tsx`\n\t----------------------\n\timport * as React from 'react';\n\n\tinterface AllInfo {\n\t\tstatus: string,\n\t\tapproved: true,\n\t\tnumberOfErrors: number,\n\t\textraInfo?: string\n\t}\n\n\t//const MoreInfo = (prop: { status: string }) => {\n\tconst MoreInfo = (props: AllInfo) => {\n\n\t\tconst extraInfo = props.extraInfo === undefined ? '(none)' : props.extraInfo;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>More Info: <span className=\"data\">{props.status}</span></p>\n\t\t\t\t<p>Approved: <span className=\"data\">{props.approved ? 'yes' : 'no'}</span></p>\n\t\t\t\t<p>Errors: <span className=\"data\">{props.numberOfErrors}</span></p>\n\t\t\t\t<p>Extra Info: <span className=\"data\">{extraInfo}</span></p>\n\t\t\t</>\n\t\t);\n\t}\n\n\texport default MoreInfo;\n\t----------------------\n- add to `App.tsx`:\n\t-------------------------\n\timport MoreInfo from './components/MoreInfo'\n\n\t<MoreInfo status={\"finished\"} approved={true} numberOfErrors={3} />\n\t-------------------------","points":150,"extras":"","systemWhenCreated":"2020-12-21 23:55:44","systemWhoCreated":"systemUnknown"},{"id":123,"category":"JavaScript","title":"Install and setup ESLint","body":"- `npm init -y`\n- `main.js`\n\t--------------------------------\n\tconst city = 'town';\n\tconsole.log(city);\n\n\tlet name = 'Win10';\n\tconsole.log(name);\n\n\tvar name2 = 'kdjf';\n\n\tvar name234 = 'sjkdfdsf';\n\n\tconst server1 = 'kdjfkdjf', server2 = 'iejfeife';\n\n\tconsole.log(server1);\n\tconsole.log(server2);\n\n\tconst previous_year_total = 243234.34;\n\tconst current_year_total = 274838.22;\n\n\tconst firstTotal = 5;\n\tlet subtotal = 0;\n\tlet total = 0;\n\n\ttotal = subtotal = firstTotal;\n\n\tconsole.log('total: ' + total);\n\tconsole.log('subtotal: ' + subtotal);\n\n\tconst serverName = \"Windows 2016 Server\";\n\tconsole.log('server: ' + serverName);\n\n\tconst days = new Array('Sunday', 'Monday', 'Wednesday');\n\tconsole.log('days: ' + days.join(', '));\n\n\tconst person = new Object();\n\tperson = {\n\t\t'firstName': 'Harry',\n\t\t'lastName': 'Hopkins',\n\t\t'first-role': 'unknown',\n\t\t'second-role': 'missing'\n\t};\n\tconsole.log('person: ', person);\n\t--------------------------------\n- `npm i eslint`\n- `eslintrc.js`\n\t------------------------\n\t'use strict';\n\tmodule.exports = {\n\t\tenv: {\n\t\t\tes6: true\n\t\t},\n\t\trules: {\n\t\t},\n\t};\n\t------------------------\n- add rules one at a time:\n\t----------------------\n\t'strict': ['error', 'global'],\n\t'no-var': 'error',\n\t'prefer-const' : 'error', \n\t'one-var': ['error', 'never'],\n\t'camelcase': 'error',\n\t'no-unused-vars': 'error',\n\t'no-multi-assign': 'error',\n\t'quotes': ['error', 'single'],\n\t'no-array-constructor': 'error',\n\t'no-new-object': 'error'\n\t----------------------","points":70,"extras":"","systemWhenCreated":"2020-07-03 14:25:11","systemWhoCreated":"systemUnknown"},{"id":124,"category":"Windows","title":"How to restart a Windows server at a certain time in the night","body":"- command line: `taskschd`\n\t- create task\n\t- define trigger\n\t- action:\n\t\t- `C:\\Windows\\System32\\shutdown.exe`\n\t\t- parameter: `-r`","points":10,"extras":"","systemWhenCreated":"2020-07-06 14:08:07","systemWhoCreated":"systemUnknown"},{"id":125,"category":"JavaScript","title":"How to use an API to get the current temperature of cities","body":"- get account at `https://openweathermap.org`\n- install with `npm i openweather-apis`\n- create `weather.js` and replace `keykeykeykey` with your API key\n\t--------------------------------\n\tconst weather = require('openweather-apis');\n\tweather.setLang('de');\n\tweather.setCity('Berlin');\n\tweather.setUnits('metric');\n\tweather.setAPPID('keykeykeykey');\n\tweather.getTemperature((err, temp) => console.log(temp));\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-07 11:37:56","systemWhoCreated":"systemUnknown"},{"id":126,"category":"JavaScript","title":"Simple example of delay with callback and promise","body":"- `delay.js`\n\t--------------------------------\n\tconst delay = (callback, seconds) => {\n\t\tsetTimeout(() => { callback(seconds)}, seconds * 1000);\n\t};\n\n\tconsole.log('stand');\n\tdelay((seconds) => { console.log(`and now this after ${seconds} seconds`) }, 4);\n\tdelay((seconds) => { console.log(`done with delay after ${seconds} seconds`) }, 2);\n\tdelay((seconds) => { console.log(`${seconds} seconds over`) }, 3);\n\tconsole.log('end');\n\t--------------------------------- \n- `promise.js`\n\t--------------------------------\n\tconst delay = (seconds) => new Promise((resolves, rejects) => {\n\tsetTimeout(() => {resolves(seconds)}, seconds * 1000);\n});\n\ndelay(4).then((seconds) => console.log(`another delay ended after ${seconds} seconds`));\ndelay(2).then((seconds) => console.log(`delay ended after ${seconds} seconds`));\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-07-08 16:44:11","systemWhoCreated":"systemUnknown"},{"id":127,"category":"JavaScript","title":"How to use rejects/catch with Promises","body":"- note that you can throw or reject an error, both handled by catch:\n\t--------------------------------\n\tconst delay = (seconds) => new Promise((resolves, rejects) => {\n\t\tif (seconds > 3) {\n\t\t\t//throw new Error('bad data error');\n\t\t\trejects(new Error(`${seconds} is too long`));\n\t\t} else {\n\t\t\tsetTimeout(() => { resolves(seconds) }, seconds * 1000);\n\t\t}\n\t});\n\n\tdelay(3)\n\t\t.then((text) => {\n\t\t\tconsole.log(text);\n\t\t\treturn 'output from processing step 1';\n\t\t})\n\t\t.then((text) => {\n\t\t\tconsole.log(text);\n\t\t\treturn 'output from processing step 2';\n\t\t})\n\t\t.then(console.log)\n\t\t.catch((error) => console.log(`err: ${error.message}`));\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-09 20:08:27","systemWhoCreated":"systemUnknown"},{"id":128,"category":"JavaScript","title":"Chaining promise and async/await examples to avoid callback hell","body":"- note that you pass a value from one then() to another:\n\t--------------------------------\n\tconst fs = require('fs');\n\tconst { promisify } = require('util');\n\tconst writeFile = promisify(fs.writeFile);\n\tconst unlink = promisify(fs.unlink);\n\tconst delay = (seconds) => new Promise((resolves) => {\n\t\tsetTimeout(resolves, seconds * 1000);\n\t});\n\tconst beep = () => process.stdout.write(\"\\x07\");\n\n\n\tconst sequentialManager = () => Promise.resolve()\n\t\t.then(() => console.log('waiting 1 second'))\n\t\t.then(() => delay(1))\n\t\t//.then(beep)\n\t\t.then(() => 'creating file')\n\t\t.then(console.log)\n\t\t.then(() => writeFile('temp004.txt', 'testing'))\n\t\t.then(() => console.log('waiting 4 seconds before deleting'))\n\t\t.then(() => delay(4))\n\t\t.then(() => unlink('temp004.txt'))\n\t\t.then(() => console.log('file deleted'));\n\n\tconst squentialManager2 = async () => {\n\t\tconsole.log('waiting 1 second');\n\t\tawait delay(1);\n\t\tconsole.log('creating file');\n\t\tawait writeFile('temp004.txt', 'testing');\n\t\tconsole.log('waiting 4 seconds before deleting');\n\t\tawait delay(4);\n\t\tawait unlink('temp004.txt');\n\t\tconsole.log('file deleted');\n\t};\n\n\t(() => Promise.resolve()\n\t\t.then(() => sequentialManager())\n\t\t.then(() => squentialManager2())\n\t)();\n\t--------------------------------","points":60,"extras":"","systemWhenCreated":"2020-07-09 20:08:27","systemWhoCreated":"systemUnknown"},{"id":129,"category":"JavaScript","title":"Example of using Node's promisify on writeFile","body":"- note that the error is output before the file-created messages since it takes time to create the files\n\t--------------------------------\n\tconst fs = require('fs');\n\tconst { promisify } = require('util');\n\n\tconst writeFile = promisify(fs.writeFile);\n\n\tconst texts = [\n\t\t{\n\t\t\tfileName: 'test001.txt',\n\t\t\tcontent: 'this is the content of 001.'\n\t\t},\n\t\t{\n\t\t\tfileName: 'badfolder/test002.txt',\n\t\t\tcontent: 'this is the content of 002.'\n\t\t},\n\t\t{\n\t\t\tfileName: 'test003.txt',\n\t\t\tcontent: 'this is the content of 003.'\n\t\t}\n\t];\n\n\ttexts.forEach(text => {\n\t\twriteFile(text.fileName, text.content)\n\t\t\t.then(() => console.log('file created'))\n\t\t\t.catch((error) => console.log(`error creating file: ` + error.message));\n\t});\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-09 20:08:27","systemWhoCreated":"systemUnknown"},{"id":130,"category":"JavaScript","title":"How to create and consume async methods","body":"- note that simply getting the result back from `getFiles()` would return a Promise:\n\t--------------------------------\n\tconst fs = require('fs');\n\tconst { promisify } = require('util');\n\tconst readdir = promisify(fs.readdir);\n\n\tasync function getFiles() {\n\t\tconst files = await readdir(__dirname);\n\t\treturn files;\n\t}\n\n\tgetFiles()\n\t\t.then((files) => {\n\t\t\tconsole.log(`We got ${files.length} files:`);\n\t\t\tlet count = 1;\n\t\t\tfiles.forEach(file => {\n\t\t\t\tconsole.log(`>>> ${count}. ${file}`);\n\t\t\t\tcount++;\n\t\t\t});\n\t\t});\n\t--------------------------------","points":60,"extras":"","systemWhenCreated":"2020-07-09 20:08:27","systemWhoCreated":"systemUnknown"},{"id":131,"category":"JavaScript","title":"How to set up simple TypeScript with Gulp","body":"- setup basics\n\t- `mkdir src dist`\n\t- `npm init -y`\n\t- package.json: `\"main\": \"main.js\",`\n- install Gulp\t\n\t- `npm i -g gulp-cli`\t\n\t- `npm i -D gulp`\n- install TypeScript\n\t- npm i -D typescript gulp-typescript\n- configure Gulp\n\t- create `gulpfile.js`\n\t- go to: `https://github.com/ivogabe/gulp-typescript`\n\t- Basic Usage\n\t- change `gulpfile.js` to:\n\t\t------------------------\n\t\tconst gulp = require('gulp');\n\t\tconst ts = require('gulp-typescript');\n\n\t\tgulp.task('default', function () {\n\t\t\treturn gulp.src('src/**/*.ts')\n\t\t\t\t.pipe(ts({\n\t\t\t\t\tnoImplicitAny: true,\n\t\t\t\t\toutFile: 'main.js'\n\t\t\t\t}))\n\t\t\t\t.pipe(gulp.dest('dist'));\n\t\t});\n\t\t------------------------\n- test\n\t- create `displayName.ts`\n\t\t--------------------\n\t\texport function displayName(name: string): void {\n\t\t\tconsole.log('Name: ' + name);\n\t\t}\n\t\t--------------------\n\t- create `src/main.ts`\n\t\t-----------------------\n\t\timport { displayName } from './displayName';\n\n\t\tdisplayName('Charles');\n\t\t-----------------------\n\t- terminal: `gulp`\n\t- `node dist/main.js`\n- bundle it for the browser\n\t- create `index.html`\n\t\t-------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Test</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>Testing</p>\n\t\t\t<script src=\"bundle.js\"></script>\n\t\t</body>\n\n\t\t</html>\n\t\t-------------------\n\t- `npm i -D browserify tsify vinyl-source-stream`\n\t- add to `gulpfile.js`\n\t\t-----------------------\n\t\tconst browserify = require('browserify');\n\t\tconst source = require('vinyl-source-stream');\n\t\tconst tsify = require('tsify');\n\t\t-----------------------\n\t- replace in `gulpfile.js`:\n\t\t--------------------------\n\t\tgulp.task('default', function () {\n\t\t\treturn browserify({\n\t\t\t\tbasedir: '.',\n\t\t\t\tdebug: true,\n\t\t\t\tentries: ['src/main.ts'],\n\t\t\t\tcache: {},\n\t\t\t\tpackageCache: {}\n\t\t\t})\n\t\t\t\t.plugin(tsify)\n\t\t\t\t.bundle()\n\t\t\t\t.pipe(source('bundle.js'))\n\t\t\t\t.pipe(gulp.dest('dist'));\n\t\t});\n\t\t--------------------------\n\t- and add this\n\t\t-------------------------------\n\t\tgulp.task('html', function () {\n\t\t\treturn gulp.src('src/*.html')\n\t\t\t\t.pipe(gulp.dest('dist'));\n\t\t});\n\t\t-------------------------------\n\t- change this:\n\t\t--------------------------------\n\t\tgulp.task('default', gulp.series('html', function () {\n\t\t--------------------------------","points":200,"extras":"","systemWhenCreated":"2020-07-14 23:50:12","systemWhoCreated":"systemUnknown"},{"id":132,"category":"TypeScript","title":"How to make a function with a generic parameter","body":"- note that this function will return an array of any type\n\t--------------------------------\n\t// converts only strings\nlet convertToStringArray: (v: string) => string[] = (value) => [value];\nlet name = \"Charles Messier\";\nlet names = convertToStringArray2(name);\nconsole.log(names);\n\n// same code written out as function\nfunction convertToStringArray2(value: string) : string[] {\n\treturn [value];\n}\nlet name1 = \"Richard Francis Burton\";\nlet names1 = convertToStringArray2(name1);\nconsole.log(names1);\n\n// generic converter for any type\nlet convertToArray: <T>(v: T) => T[] = (value) => [value];\n\nlet name2 = \"Dean Acheson\";\nlet names2 = convertToArray(name2);\nconsole.log(names2);\n\nlet number = 66;\nlet numbers = convertToArray(number);\nconsole.log(numbers);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-18 16:29:29","systemWhoCreated":"systemUnknown"},{"id":133,"category":"TypeScript","title":"How to use generics with interfaces","body":"- note you can use any type, not just string\n\t--------------------------------\n\tinterface TransportCollection<T> {\n\t\tsingle: T\n\t\tgroup: T[]\n\t}\n\n\tconst collection: TransportCollection<string> = {\n\t\tsingle: \"Titus Flavius Josephus\",\n\t\tgroup: [\"Peter Abelard\", \"Petrarch\"]\n\t}\n\n\tconsole.log(collection);\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-07-19 17:20:56","systemWhoCreated":"systemUnknown"},{"id":134,"category":"TypeScript","title":"How to create a class with generic parameters","body":"- note how the commented lines would also work and would be more explicit:\n\t--------------------------------\n\tclass Utility<T> {\n\t\tconstructor(private arg1: T, private arg2: T) { }\n\n\t\ttoArray: () => T[] = () => [this.arg1, this.arg2];\n\t}\n\n\tlet utility1 = new Utility (\"one\", \"two\");\n\t//let utility1 = new Utility <string>(\"one\", \"two\");\n\tconsole.log(utility1.toArray());\n\n\tlet utility2 = new Utility (111, 222);\n\t//let utility2 = new Utility <number>(111, 222);\n\tconsole.log(utility2.toArray());\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-20 12:04:54","systemWhoCreated":"systemUnknown"},{"id":135,"category":"JavaScript","title":"Define variables from objects","body":"- note that the variables have to have the same names as the properties\n\t--------------------------------\n\tconst user = {\n\t  name: 'Pierre Bayle',\n\t  age: 59,\n\t  country: 'France'\n\t}\n\n\tconst { name, age } = user;\n\n\tconsole.log(`The person ${name} is ${age}.`);\n\n\t// note that this syntax makes sense even when you only have one variable, e.g.\n\tconst { country } = user;\n\t--------------------------------","points":10,"extras":"","systemWhenCreated":"2020-07-21 21:41:45","systemWhoCreated":"systemUnknown"},{"id":136,"category":"JavaScript","title":"How to use concat with arrays","body":"- note that you are created a new variable and not mutating one\n\t--------------------------------\n\tlet people = [];\n\tconst newPeople = [];\n\n\tconst person1 = {\n\t  name : 'Ferdinand de Saussure',\n\t  country : 'Switzerland',\n\t  age : 56\n\t}\n\tpeople.push(person1);\n\n\tconst person2 = {\n\t  name : 'Pierre de Fermat',\n\t  country : 'France',\n\t  age : 64\n\t}\n\tconst person3 = {\n\t  name : 'John Adams Whipple',\n\t  country : 'USA',\n\t  died: 1891\n\t}\n\tnewPeople.push(person2);\n\tnewPeople.push(person3);\n\n\tpeople = people.concat(newPeople);\n\n\tconsole.log(people);\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-07-21 22:50:56","systemWhoCreated":"systemUnknown"},{"id":137,"category":"JavaScript","title":"How to add variable as parameter to JavaScript object","body":"- note that the parameter takes the name of the variable\n\t--------------------------------\n\tconst isLoaded = false;\n\n\tconst state = {\n\t  status: 'on',\n\t  isLoaded,\n\t  count: 343\n\t}\n\n\tconsole.log(state);\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-07-22 00:38:11","systemWhoCreated":"systemUnknown"},{"id":138,"category":"Atom","title":"How to add a JavaScript snippet","body":"- in menu: **File > Snippets**\n- add this text:\n\t-------------------\n\t'.source.js':\n\t\t'console.log':\n\t\t'prefix': 'cc'\n\t\t'body': 'console.log($1);'\n\t-------------------","points":10,"extras":"","systemWhenCreated":"2020-07-22 11:25:33","systemWhoCreated":"systemUnknown"},{"id":139,"category":"JavaScript","title":"How to display console.log() data as a table","body":"- note that if properties with the same name will appear as one column\n\t--------------------------------\n\t'use strict';\n\n\t//const formData = [55, undefined];\n\tconst formData = [55];\n\n\tformData.forEach((el) => {\n\t\tconsole.log(`\\n${el}:`);\n\t\tconsole.table({\n\t\t\t'new String()': {\n\t\t\t\tresult: `${new String(el)}`,\n\t\t\t\t'data type': `${typeof new String(el)}`,\n\t\t\t},\n\t\t\ttoString: {\n\t\t\t\tresult: `${el.toString()}`,\n\t\t\t\t'data type': `${typeof el.toString()}`,\n\t\t\t},\n\t\t\t'String()': {\n\t\t\t\tresult: `${String(el)}`,\n\t\t\t\t'data type': `${typeof String(el)}`,\n\t\t\t},\n\t\t});\n\t});\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-07-27 13:09:46","systemWhoCreated":"systemUnknown"},{"id":140,"category":"JavaScript","title":"How to use promise.all()","body":"- note promisify doesn't need to be required since it is a part of node.js\n- note that one `then` passes output to next `then` in chain:\n\t--------------------------------\n\tconst fs = require('fs');\n\tconst { promisify } = require('util');\n\tconst writeFile = promisify(fs.writeFile);\n\tconst readdir = promisify(fs.readdir);\n\n\tPromise.all([\n\t\twriteFile('readme.md', 'this is the first line'),\n\t\twriteFile('readme.txt', 'this is the first line'),\n\t\twriteFile('readme.json', 'this is the first line')\n\t]).then(() => readdir(__dirname))\n\t.then(console.log);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-28 11:58:13","systemWhoCreated":"systemUnknown"},{"id":141,"category":"JavaScript","title":"How to use the .map() function","body":"- note that you can pass in any function as the map parameter\n\t--------------------------------\n\tconst starScores = [4, 5, 3, 3, 3, 3, 2, 1, 5];\n\n\tconst starTexts = starScores.map(num => {\n\t\treturn '*'.repeat(num) + '∙'.repeat(5-num);\n\t});\n\n\tconsole.log(starScores);\n\tconsole.log(starTexts);\n\t--------------------------------","points":25,"extras":"","systemWhenCreated":"2020-07-28 16:08:09","systemWhoCreated":"systemUnknown"},{"id":142,"category":"JavaScript","title":"Example of parameter destructuring","body":"- note that both of these classes function identically\n\t--------------------------------\n\tclass Person {\n\t\tconstructor({ firstName, lastName, age = 0 }) {\n\t\t\tthis.firstName = firstName;\n\t\t\tthis.lastName = lastName;\n\t\t\tthis.age = age;\n\t\t}\n\t}\n\n\t// class Person {\n\t// \tconstructor(person) {\n\t// \t\tthis.firstName = person.firstName;\n\t// \t\tthis.lastName = person.lastName;\n\t// \t\tthis.age = person.age || 0;\n\t// \t}\n\t// }\t\n\n\tconst employee = {\n\t\tfirstName: 'George',\n\t\tlastName: 'Martin'\n\t};\n\n\tconst person = new Person(employee);\n\tconsole.log(person);\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-07-28 20:33:28","systemWhoCreated":"systemUnknown"},{"id":143,"category":"JavaScript","title":"How to generate a random idCode","body":"- idCode will be something like this: `c06ec7c98afbc4d7a2f0` or `5fffae05dd793958a897`\n\t--------------------------------\n\tlet people = [\n\t\t{\n\t\t\t\"firstName\": \"James\",\n\t\t\t\"lastName\": \"Cook\",\n\t\t\t\"language\": \"English\",\n\t\t},\n\t\t{\n\t\t\t\"firstName\": \"Wilfred\",\n\t\t\t\"lastName\": \"Owen\",\n\t\t\t\"language\": \"English\",\n\t\t},\n\t\t{\n\t\t\t\"firstName\": \"Henry\",\n\t\t\t\"lastName\": \"Hopkins\",\n\t\t\t\"language\": \"English\",\n\t\t}\n\t]\n\n\tpeople = people.map(p => {\n\t\tp.idCode = require('crypto').randomBytes(10).toString('hex');\n\t\treturn p;\n\t})\n\n\tconsole.log(people);\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-07-28 20:49:36","systemWhoCreated":"systemUnknown"},{"id":144,"category":"JavaScript","title":"How to create an object database as a class","body":"- note that the name of the key in the key/value is the unique idCode, e.g. `5c764c9b2f64254282dc`\n\t--------------------------------\n\tclass Database {\n\t\tobjects = {};\n\t\taddObject(obj) {\n\t\t\tconst idCode = require('crypto').randomBytes(10).toString('hex');\n\t\t\tthis.objects[idCode] = obj;\n\t\t}\n\t\toutput() {\n\t\t\treturn this.objects;\n\t\t}\n\t}\n\n\tconst person = {\n\t\titemType: 'persons',\n\t\tfirstName: 'Karl',\n\t\tlastName: 'Popper'\n\t};\n\n\tconst building = {\n\t\titemType: 'buildings',\n\t\tname: 'hospital',\n\t\tcity: 'London',\n\t\tyearBuild: 1971\n\t}\n\n\tconst db = new Database();\n\tdb.addObject(person);\n\tdb.addObject(building);\n\n\tconsole.log(db.output());\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-07-28 21:17:09","systemWhoCreated":"systemUnknown"},{"id":145,"category":"JavaScript","title":"How to get a random item out of an array","body":"- note this produces a number from 0 to length-1 (for 1-length, add 1)\n\t--------------------------------\n\tconst nums = [5,26,3,6,4,3,3];\n\tconst num = nums[Math.floor(Math.random() * nums.length)];\n\tconsole.log(num);\n\t--------------------------------","points":5,"extras":"$rank=4.83","systemWhenCreated":"2020-07-29 10:12:01","systemWhoCreated":"systemUnknown"},{"id":146,"category":"JavaScript","title":"How to left-pad zeros or other characters on numbers","body":"- note that `String()` is better practice than `.toString()`\n\t--------------------------------\n\tconst nums = [245, 3, 7232, 82, 3, 0, 232];\n\tconst padZeros = (num, digits = 5, pad = '0') => String(pad.repeat(digits) + num).slice(digits * -1);\n\n\tconsole.log(nums);\n\n\tconsole.log(nums.map(n => padZeros(n)));\n\tconsole.log(nums.map(n => padZeros(n, 10)));\n\tconsole.log(nums.map(n => padZeros(n, 10, '•')));\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-07-29 12:45:31","systemWhoCreated":"systemUnknown"},{"id":147,"category":"JavaScript","title":"Make NPM script for extensive git logging","body":"- run this with `run npm gg`\n--------------------------------\n\"gg\" : \"git log --graph --decorate -30 --all --date-order --date=format:\\\"%Y-%m-%d %H:%M:%S\\\" --pretty=format:\\\"%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s\\\"\",\n--------------------------------","points":10,"extras":"","systemWhenCreated":"2020-07-29 17:35:24","systemWhoCreated":"systemUnknown"},{"id":148,"category":"angular","title":"Set up a simple Angular site","body":"- `npm i -g @angular/cli`\n- `ng new angularrxjs` which creates a directory at that point\n\t- accept default answers (2x)\n- `cd angularrxjs`\n- `ng serve`\n- in browser: `http://localhost:4200`\n- in `src\\app\\app.component.html`, search for and change \"Next Steps\" to \"Next Steps2\" and it is updated in the browser immediately","points":50,"extras":"","systemWhenCreated":"2020-07-30 17:01:20","systemWhoCreated":"systemUnknown"},{"id":149,"category":"Notepad++","title":"Add autosave functionality","body":"- plugins\n- manage\n- search: `autosave` (not autosave2)\n- [[Install]]\n- Plugins > Autosave > Options\n\t- check: Notepad++ loses focus\n\t- check: interval = 1 minute\n\t- Unnamed files: ask for filename\n- best to not have more tabs open then fit across the screen, otherwise they shift on save\n- also useful: Plugins > Autosave > Create a copy of current file with timestamp","points":20,"extras":"","systemWhenCreated":"2020-07-31 13:51:25","systemWhoCreated":"systemUnknown"},{"id":150,"category":"Notepad++","title":"How to use regex to search and replace with variables","body":"- copy in this text:\n-----------------------------\n1. 5 + 10 = 15\n\n2. 21 + 3 = 24\n\n3. 81 + 23 = 104\n-----------------------------\n- you want to convert these addition equations into minus equations\n- CTRL-H to search and replace\n- Search mode: Regular Expressions\n- Search for: `(\\d*) \\+ (\\d*) = (\\d*)`\n- Replace with: `$3 - $2 = $1`","points":50,"extras":"","systemWhenCreated":"2020-07-31 17:35:22","systemWhoCreated":"systemUnknown"},{"id":151,"category":"JavaScript","title":"Use regex to replace only exact variable name but not that name within a word","body":"- note that only the variable name will be replaced\n\t--------------------------------\n\tconst line = \"const name = name + '- (named)';\"\n\tconst regex = /\\bname\\b/gi;\n\n\tconst newLine = line.replace(regex, 'lastName');\n\n\tconsole.log(newLine);\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-08-03 14:40:10","systemWhoCreated":"systemUnknown"},{"id":152,"category":"JavaScript","title":"Example of promise as standard database method to get information","body":"- Note that in order to send the parameter (id), you have to write the promise in a function:\n\t--------------------------------\n\tconst getPerson = function (id) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst errorOccurred = Math.floor(Math.random() * 2) + 1 == 1 ? true : false;\n\t\t\tif (errorOccurred) {\n\t\t\t\treject(`Sorry, person not found with id ${id}.`);\n\t\t\t} else {\n\t\t\t\tconst person = {\n\t\t\t\t\tid: id,\n\t\t\t\t\tfirstName: 'Christiaan',\n\t\t\t\t\tlastName: 'Huygens'\n\t\t\t\t};\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve(person);\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetPerson(222).then((person) => {\n\t\tconsole.log(`We received ${person.firstName} ${person.lastName} (${person.id}).`);\n\t}).catch((message) => {\n\t\tconsole.log(`Error: ${message}`);\n\t});\n\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-08-04 13:03:48","systemWhoCreated":"systemUnknown"},{"id":153,"category":"JavaScript","title":"How to chain promises","body":"- Note that you can chain as many promises as you want by adding `.then()` blocks:\n\t--------------------------------\n\tconst getPerson = function (id) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst errorOccurred = Math.floor(Math.random() * 2) + 1 == 1 ? true : false;\n\t\t\tif (errorOccurred) {\n\t\t\t\treject(`Sorry, person not found with id ${id}.`);\n\t\t\t} else {\n\t\t\t\tconst person = {\n\t\t\t\t\tid: id,\n\t\t\t\t\tfirstName: 'Christiaan',\n\t\t\t\t\tlastName: 'Huygens'\n\t\t\t\t};\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve(person);\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst changeId = function (id) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve(id + 1);\n\t\t\t}, 1000);\n\t\t});\n\t}\n\n\tgetPerson(222).then((person) => {\n\t\tconsole.log(`We received ${person.firstName} ${person.lastName} (${person.id}).`);\n\t\treturn person.id;\n\t}).then((id) => {\n\t\tchangeId(id).then((newId) => {\n\t\t\tconsole.log(`Id was changed from ${id} to ${newId}.`);\n\t\t})\n\t}).catch((message) => {\n\t\tconsole.log(`Error: ${message}`);\n\t});\n\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-08-04 13:23:52","systemWhoCreated":"systemUnknown"},{"id":154,"category":"JavaScript","title":"How to use Promise.all() to handle multiple promises","body":"- Note that it seems to always process the promises in order:\n\t--------------------------------\n\tconst getPerson = function (id) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst errorOccurred = Math.floor(Math.random() * 11) + 1 == 1 ? true : false;\n\t\t\tconst seconds = (Math.floor(Math.random() * 3) + 1) * 1000;\n\t\t\tconsole.log(seconds);\n\t\t\tif (errorOccurred) {\n\t\t\t\treject(`Sorry, there was some problem and so nothing can be displayed.`);\n\t\t\t} else {\n\t\t\t\tlet persons = {\n\t\t\t\t\t111: {\n\t\t\t\t\t\tid: 111,\n\t\t\t\t\t\tfirstName: 'Christiaan',\n\t\t\t\t\t\tlastName: 'Huygens'\n\t\t\t\t\t},\n\t\t\t\t\t222: {\n\t\t\t\t\t\tid: 222,\n\t\t\t\t\t\tfirstName: 'Augustus',\n\t\t\t\t\t\tlastName: 'Pugin'\n\t\t\t\t\t},\n\t\t\t\t\t333: {\n\t\t\t\t\t\tid: 333,\n\t\t\t\t\t\tfirstName: 'George',\n\t\t\t\t\t\tlastName: 'Marshall'\n\t\t\t\t\t},\n\t\t\t\t\t444: {\n\t\t\t\t\t\tid: 444,\n\t\t\t\t\t\tfirstName: 'Milton',\n\t\t\t\t\t\tlastName: 'Friedman'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve(persons[id]);\n\t\t\t\t}, seconds);\n\t\t\t}\n\t\t});\n\t}\n\n\tPromise.all([\n\t\tgetPerson(111),\n\t\tgetPerson(222),\n\t\tgetPerson(333),\n\t\tgetPerson(444)\n\t]).then((persons) => {\n\t\tpersons.map((person) => {\n\t\t\tconsole.log(`We received ${person.firstName} ${person.lastName} (${person.id}).`);\n\t\t});\n\t}).catch((message) => {\n\t\tconsole.log(message);\n\t});\n\t\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-08-04 14:20:08","systemWhoCreated":"systemUnknown"},{"id":155,"category":"JavaScript","title":"How to use async/await instead of promises","body":"- Note that async/await can emulate the functionality of promises, including error handling\n\t--------------------------------\n\tconst fs = require('fs');\n\tconst { promisify } = require('util');\n\tconst writeFile = promisify(fs.writeFile);\n\tconst unlink = promisify(fs.unlink);\n\tconst delay = (seconds) => new Promise((resolve, reject) => {\n\t\tconst errorOccurred = Math.floor(Math.random() * 5) + 1 == 1 ? true : false;\n\t\tif (errorOccurred) {\n\t\t\treject({\n\t\t\t\tentity: 'error',\n\t\t\t\tseverity: 'severe',\n\t\t\t\tmessage: 'there was an error'\n\t\t\t});\n\t\t} else {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve('finished');\n\t\t\t}, seconds * 1000);\n\t\t}\n\t});\n\n\t(async () => {\n\t\ttry {\n\t\t\tconsole.log('waiting 1 second');\n\t\t\tconst message = await delay(1);\n\t\t\tconsole.log('The returned message was: ' + message);\n\t\t\tconsole.log('creating file');\n\t\t\tawait writeFile('temp004.txt', 'testing');\n\t\t\tconsole.log('waiting 4 seconds before deleting');\n\t\t\tawait delay(4);\n\t\t\tawait unlink('temp004.txt');\n\t\t\tconsole.log('file deleted');\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log('ERROR: ' + e.message);\n\t\t}\n\t\tfinally {\n\t\t\tconsole.log('clean up in all cases');\n\t\t}\n\t})();\n\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-08-04 15:50:31","systemWhoCreated":"systemUnknown"},{"id":156,"category":"JavaScript","title":"How to use async/await in for-loop to access data from promise","body":"- Notice that each call is executed in order\n\t--------------------------------\n\tconst getServer = (idCode) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst seconds = Math.floor(Math.random() * 4) + 1;\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve({\n\t\t\t\t\tidCode: idCode,\n\t\t\t\t\tname: 'Server ' + idCode.toUpperCase(),\n\t\t\t\t\tseconds: seconds\n\t\t\t\t});\n\t\t\t}, seconds * 1000);\n\t\t});\n\t};\n\n\tconst accessServers = async (serverIdCodes) => {\n\t\tlet count = 0;\n\t\tfor (const serverIdCode of serverIdCodes) {\n\t\t\tconst server = await getServer(serverIdCode);\n\t\t\tcount++;\n\t\t\tconsole.log(`Got server #${count} called \"${server.name}\" which took ${server.seconds} seconds.`);\n\t\t}\n\t};\n\n\tconst serverIdCodes = ['internal003', 'internal002', 'external011'];\n\taccessServers(serverIdCodes);\n\n\taccessServers(['internal033', 'internal011', 'internal012', 'external141', 'external117']);\n\t--------------------------------","points":100,"extras":"","systemWhenCreated":"2020-08-04 16:35:51","systemWhoCreated":"systemUnknown"},{"id":157,"category":"Node","title":"Method that recursively gets files from directory","body":"- note this allows you to specify directories you don't want to have search, and you can pass in a keyword to search\n\t--------------------------------\n\tvar fs = require('fs');\n\tvar path = require('path');\n\tvar getFilesRecursive = function (dir, done, options = { excludeDirs: [], searchWord: null }) {\n\t\tvar results = [];\n\t\tfs.readdir(dir, function (err, list) {\n\t\t\tif (err) return done(err);\n\t\t\tvar i = 0;\n\t\t\t(function next() {\n\t\t\t\tvar file = list[i++];\n\t\t\t\tif (!file) return done(null, results);\n\t\t\t\tfile = path.resolve(dir, file);\n\t\t\t\tfs.stat(file, function (err, stat) {\n\t\t\t\t\tconst numberOfFinds = options.excludeDirs.reduce((acc, excludeDir) => {\n\t\t\t\t\t\tif (file.endsWith(excludeDir)) {\n\t\t\t\t\t\t\tacc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}, 0);\n\t\t\t\t\tif (numberOfFinds == 0) {\n\t\t\t\t\t\tif (stat && stat.isDirectory()) {\n\t\t\t\t\t\t\tgetFilesRecursive(file, function (err, res) {\n\t\t\t\t\t\t\t\tresults = results.concat(res);\n\t\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t\t}, options);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (options.searchWord == null || (options.searchWord != null && file.toUpperCase().includes(options.searchWord.toUpperCase()))) {\n\t\t\t\t\t\t\t\tresults.push(file);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})();\n\t\t});\n\t};\n\n\tgetFilesRecursive('c:/edward/nwo', function (err, pathAndFileNames) {\n\t\tif (err) {\n\t\t\tconsole.log('sorry, there was a problem: ' + err);\n\t\t}\n\t\tpathAndFileNames.forEach(pathAndFileName => console.log(pathAndFileName));\n\t}, { excludeDirs: ['node_modules', '.git'], searchWord: 'config' });\n\n\t// OPTIONS:\n\t//console.dir(files, { 'maxArrayLength': null });\n\t//console.dir(files);\n\t//const fileItems = pathAndFileNames.map(pathAndFileName => ({ pathAndFileName: pathAndFileName, file: path.basename(pathAndFileName) }));\n\t//const fileItems = files.forEach(console.log(file));\n\t//}, { excludeDirs: ['node_modules', '.git'] });\n\t//}, { excludeDirs: ['node_modules', '.git'], searchWord: 'bs-' });\n\t--------------------------------","points":110,"extras":"","systemWhenCreated":"2020-08-05 17:30:03","systemWhoCreated":"systemUnknown"},{"id":158,"category":"Node","title":"Create large JSON file with easy-and-fast access via ids","body":"- write.js\n\t--------------------------------\n\tconst fs = require('fs');\n\n\tconst servers = {\n\t\t\"62732\": {\n\t\t\tname: 'External_83743',\n\t\t\ttype: 'Linux',\n\t\t\twhenCreated: '2020-01-01',\n\t\t\tdrives: 3\n\t\t},\n\t\t\"893472\": {\n\t\t\tname: 'External_32333',\n\t\t\ttype: 'Windows',\n\t\t\twhenCreated: '2020-04-01',\n\t\t\tdrives: 2\n\t\t}\n\t};\n\n\tfor (let x = 1; x <= 10000; x++) {\n\t\tservers[x] = {\n\t\t\t'type': 'test',\n\t\t\t'identifier': x\n\t\t}\n\t}\n\n\tfs.writeFile('servers.json', JSON.stringify(servers), err => {\n\t\tif (err) throw err;\n\t\tconsole.log('finished');\n\t});\n\t--------------------------------\n- read.js\n\t---------------------------------\n\tconst servers = require('./servers.json');\n\n\tconsole.log(servers[9755]);\n\t---------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-05 17:30:03","systemWhoCreated":"systemUnknown"},{"id":159,"category":"Node","title":"How to access data from a JSON file synchonously and asychronously","body":"- note that in the asynchronous version, the data is the last to be displayed\n\t--------------------------------\n\tconst fs = require('fs');\n\tconst data = require('./data.json');\n\n\t// synchronous data access to JSON files\n\tconsole.log('--- before 1');\n\tconsole.log(data.name);\n\tconsole.log(data.server);\n\tconsole.log('--- after 1');\n\n\t// asynchronous data access to JSON files\n\tconsole.log('--- before 2');\n\tfs.readFile('./data.json', 'utf-8', (err, rawData) => {\n\t\tconst data = JSON.parse(rawData);\n\t\tconsole.log(data.name);\n\t});\n\tconsole.log('--- after 2');\n\t--------------------------------\n- data.json:\n\t-----------------------\n\t{\n\t\t\"name\": \"Isaac\",\n\t\t\"server\": {\n\t\t\t\"name\": \"Apache\",\n\t\t\t\"whenSetup\": \"2020-01-01\",\n\t\t\t\"location\": \"external\"\n\t\t}\n\t}\n\t\t-----------------------","points":40,"extras":"","systemWhenCreated":"2020-08-05 17:30:47","systemWhoCreated":"systemUnknown"},{"id":160,"category":"Node","title":"Datalayer to easily query a JSON file, including emulated join","body":"- this is a small Node example of using `.map()`, `.reduce()`, `.filter()`, and `.find()` to query a JSON file of data\n- note that `fetch_orders_for_employee` searches with a emulated join on two files `orders.json` and `employees.json`\n- app.js\n\t--------------------------------\n\tconst dpod = require('./dpod.js');\n\n\tconst list = dpod.fetch_short_phone_list();\n\tconst num = dpod.fetch_number_of_territories();\n\tconst cities = dpod.fetch_city_list();\n\tconst titles = dpod.fetch_field_list('title');\n\tconst employee = dpod.fetch_employee_by_id(5);\n\tconst notes = dpod.fetch_notes_by_keyword('1992');\n\tconst orders = dpod.fetch_orders_for_employee(6);\n\n\tconsole.log(list);\n\tconsole.log(num);\n\tconsole.log(cities);\n\tconsole.log(titles);\n\tconsole.log(employee);\n\tconsole.log(notes);\n\tconsole.log(orders);\n\tconsole.log(orders.length);\n\t--------------------------------\n- dpod.js\n\t----------------------------\n\tconst fs = require('fs');\n\tconst employees = require('./employees.json');\n\tconst orders = require('./orders.json');\n\tconst dpod = require('./dpod.js');\n\n\texports.fetch_short_phone_list = () => {\n\t\treturn employees.map(emp => ({ \"name\": `${emp.firstName} ${emp.lastName}`, \"city\": emp.address.city, \"phone\": emp.address.phone }));\n\t};\n\n\texports.fetch_number_of_territories = () => {\n\t\treturn employees.reduce((acc, emp) => {\n\t\t\tacc += emp.territoryIDs.length;\n\t\t\treturn acc;\n\t\t}, 0);\n\t};\n\n\texports.fetch_city_list = () => {\n\t\treturn employees.map(emp => emp.address.city);\n\t};\n\n\texports.fetch_field_list = (field) => {\n\t\treturn employees.map(emp => emp[field]);\n\t};\n\n\texports.fetch_employee_by_id = (id) => {\n\t\treturn employees.find(emp => emp.employeeID == id);\n\t};\n\n\texports.fetch_notes_by_keyword = (keyword) => {\n\t\tconst emps = employees.filter(emp => emp.notes.includes(keyword));\n\t\treturn emps.map(emp => ({ \"name\": `${emp.firstName} ${emp.lastName}`, \"notes\": emp.notes }));\n\t};\n\n\texports.fetch_orders_for_employee = (empId) => {\n\t\tconst empOrders = orders.filter(ord => ord.employeeID == empId);\n\t\treturn empOrders.map(ord => {\n\t\t\tconst emp = dpod.fetch_employee_by_id(ord.employeeID);\n\t\t\treturn {\n\t\t\t\tid: ord.orderID, date: ord.orderDate.substr(0, 10), customer: ord.shipName,\n\t\t\t\tsalesperson: `${emp.firstName} ${emp.lastName}`\n\t\t\t}\n\t\t});\n\t};\n\t----------------------------\n- data files\n\t- for files `orders.json` and `employees.json`, copy data from here: https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json","points":70,"extras":"","systemWhenCreated":"2020-08-05 17:30:47","systemWhoCreated":"systemUnknown"},{"id":161,"category":"Jekyll","title":"How to set up a Jekyll site","body":"- make sure you have Ruby\n\t- `ruby -v`\n\t- if not, install Ruby\n\t\t- go to: https://rubyinstaller.org\n\t\t- [[Download]]\n\t\t- I downloaded `Ruby+Devkit 2.6.6-1 (x64)`\n\t\t- install it\n\t\t- make sure you run the `ridk install` step on the last stage of the installation wizard\n\t\t- exit command line, enter again, and `ruby -v`, it should be installed now\n\t\t\t- I got `Ruby 2.6.p146`\n- install Jekyll\n\t- `gem install jekyll bundle` (5 minutes)\n\t- `jekyll -v`\n\t\t- I got `jekyll 4.1.1`\n- create Jekyll site\n\t- goto you web directory, e.g. `webs`\n\t- `jekyll new jekyllsite`\n\t- open jekyllsite directory with VSCode\n\t- `git init`\n\t- `git status`\n\t- `git add *`\n\t- `git commit -m \"first commit\"\n\t- `bundle lock --add-platform ruby`\n\t- `bundle lock --add-platform x86_64-linux`\n- preview the site\n\t- `bundle exec jekyll serve`\n\t- site works at: http://127.0.0.1:4000\n\t- doesn't seem to update immediately, you have to refresh the browser\n- add a theme\n\t- http://jekyllthemes.org\n\t- https://jekyllthemes.io\n\t- open file `Gemfile`\n\t- comment out `gem \"minima\", \"~> 2.5\"`\n\t- add `gem \"jekyll-athena\"`\n\t- in `_config.yml`\n\t\t- `theme: jekyll-athena`\n\t- at command line: `bundle`\n\t- `bundle exec jekyll serve`\n- config changes:\n\t- `_config.yml`\n\t\t- change title\n\t\t- add: `destination: public`\n\t\t- stop server and start again: `bundle exec jekyll serve`\n\t- `.gitignore`\n\t\t- add: `public`\n- add a post\n\t- add plugin to create posts\n\t\t- `Gemfile`\n\t\t\tadd: `gem 'jekyll-compose', group: [:jekyll_plugins]`\n\t\t- command line: \n\t\t\t- `bundle`\n\t- `bundle exec jekyll post \"Regarding future errors\"`\n- edit post\n\t- in the `_posts` directory, find your post \n\t- add some text at the bottom\n\t- in the front matter:\n\t\t- `category: philosophy`\n\t\t- `tags: edward`\n- make a new page\n\t- `bundle exec jekyll page \"Projects\"`\n\t- add text below front matter\n\t- `bundle exec jekyll serve`\n- .. adding content","points":50,"extras":"","systemWhenCreated":"2020-08-06 00:08:04","systemWhoCreated":"systemUnknown"},{"id":162,"category":"Notepad++","title":"How to record a macro","body":"- keys you need should be in the top task bar here:##notepadmacrook\n- move cursor to where you want to start, then press the red-dot button\n- make a long macro, e.g. move cursor, delete characters, add, etc.\n- then click stop\n- then click the save icon, (last icon on right)\n- add name and hotkey, [[CTRL-ALT-SHIFT-J]] works for me\n- to edit macros, click in menu Macro and last entry: change shortcut","points":25,"extras":"","systemWhenCreated":"2020-08-06 10:12:43","systemWhoCreated":"systemUnknown"},{"id":163,"category":"JavaScript","title":"Simple example of callback (shopping)","body":"- note how each caller of the function with callback can individually process what the callback returned\n\t--------------------------------\n\tconst shopping = (list, cbFound = null) => {\n\t\tlet count = 0;\n\t\tlist.forEach(item => {\n\t\t\tcbFound(item, ++count);\n\t\t})\n\t\treturn `bought ${list.length} things`;\n\t}\n\n\tconst message = shopping(['aaa', 'bbb', 'ccc', 'nnn'], (item, count) => {\n\t\tconsole.log(`${'*'.repeat(count)} they just found: ${item}`);\n\t});\n\tconsole.log(message);\n\n\n\tconst message2 = shopping(['aaa', 'bbb', 'ccc', 'nnn'], (item, count) => {\n\t\tconsole.log(`.`);\n\t});\n\tconsole.log(message2);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-10 10:55:55","systemWhoCreated":"systemUnknown"},{"id":165,"category":"JavaScript","title":"Simple example (shopping) of asynchronous function with multiple callbacks","body":"- note that you can have as many callbacks which send back information on various events during the process\n\t--------------------------------\n\tconst goShopping = (list, cbItemReport, cbFinished, cbError) => {\n\t\tlet count = 0;\n\t\tlet numberFound = 0;\n\n\t\tconst randomError = Math.floor(Math.random() * 3);\n\t\tif (randomError == 0) {\n\t\t\tcbError('Something went wrong, trip aborted.');\n\t\t} else {\n\t\t\tlist.forEach(item => {\n\t\t\t\tconst randomFound = Math.floor(Math.random() * 4);\n\t\t\t\tif (randomFound > 0) {\n\t\t\t\t\tcbItemReport(item, true, ++count);\n\t\t\t\t\tnumberFound++;\n\t\t\t\t} else {\n\t\t\t\t\tcbItemReport(item, false, ++count);\n\t\t\t\t}\n\t\t\t})\n\t\t\tcbFinished(`Bought ${numberFound} things.`);\n\t\t}\n\t}\n\n\tconst message = goShopping(['milk', 'eggs', 'sugar', 'bread'],\n\t\t(item, found, count) => {\n\t\t\tconsole.log(`Item #${count} \"${item}\" was ${found ? 'found' : 'not found'}.`);\n\t\t},\n\t\t(message) => {\n\t\t\tconsole.log(\"Returned from shopping: \" + message);\n\t\t},\n\t\t(error) => {\n\t\t\tconsole.log(\"ERROR: \" + error);\n\t\t});\n\tconsole.log(message);\n\t--------------------------------","points":70,"extras":"","systemWhenCreated":"2020-08-10 11:43:17","systemWhoCreated":"systemUnknown"},{"id":166,"category":"Express","title":"Simple express site that reads a file about.html and outputs it to /about","body":"- note you need Babel for the ES6 module syntax, otherwise use Node/CommonJS syntax\n- server.js\n\t--------------------------------\n\timport fs from 'fs';\n\timport config from './config';\n\n\timport express from 'express';\n\tconst server = express();\n\n\tserver.get('/', (req, res) => {\n\t\tres.send('on browser2 <a href=\"about\">about</a>.');\n\t});\n\tserver.get('/about', (req, res) => {\n\t\tfs.readFile('./about.html', (err, data) => {\n\t\t\tres.send(data.toString());\n\t\t});\n\t});\n\n\tserver.listen(config.port, () => {\n\t\tconsole.log('Express listening on port', config.port);\n\t});\n\t--------------------------------\n- config.js\n\t-------------------\n\tconst env = process.env;\n\n\texport default {\n\t\tport: env.PORT || 3001\n\t};\n\t-------------------","points":40,"extras":"","systemWhenCreated":"2020-08-11 14:47:08","systemWhoCreated":"systemUnknown"},{"id":167,"category":"Node","title":"Syntax for reading in ES6/Babel modules","body":"- `npm i -D babel-loader @babel/cli @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties @babel-node`\n- `qstr.js`:\n\t---------------------\n\texport const putInBrackets = (message) => {\n\t\treturn `[${message}]`;\n\t};\n\t---------------------\n- `server.js`:\n\t----------------------\n\timport * as qstr from './qstr';\n\n\tconsole.log(qstr.putInBrackets('nnn'));\n\t----------------------\n- `./node_modules/.bin/babel-node server.js`","points":30,"extras":"","systemWhenCreated":"2020-08-11 15:16:46","systemWhoCreated":"systemUnknown"},{"id":168,"category":"React","title":"How to add emmet support to React files","body":"- [[CTRL-,]]\n- click on **Extensions**\n- scroll down and click on: **Edit in settings.json**\n- add this:\n\t--------------------------------\n\t\"emmet.includeLanguages\": {\n\t\t\"javascript\": \"javascriptreact\"\n}\n\t--------------------------------","points":10,"extras":"","systemWhenCreated":"2020-08-12 12:59:59","systemWhoCreated":"systemUnknown"},{"id":170,"category":"Webpack","title":"How to get Webpack to copy static files","body":"- `npm i -D copy-webpack-plugin`\n- add to `webpack.config.js`\n\t- `const CopyWebpackPlugin = require('copy-webpack-plugin');`\n\t- add `new CopyWebpackPlugin` block to `plugins`:\n\t\t------------------------------\n\t\tnew CopyWebpackPlugin(\n\t\t\t[\n\t\t\t\t{ from: 'src/html', to: '.' }\n\t\t\t]\n\t\t)\n\t\t------------------------------\n\t- note this will recursively copy all contents in `src/html` to your output directory (`.`) defined in `output`, in this case to `dist`:\n\t\t--------------------------\n\t\toutput: {\n\t\t\tpath: path.resolve(__dirname, 'dist'),\n\t\t\tfilename: 'bundle.js'\n\t\t}\n\t\t--------------------------\n\t- then to run this, simply do:\n\t\t-----------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"webpack -wd\",\n\t\t\t\"build\": \"webpack\"\n\t\t}\n\t\t-----------------------","points":30,"extras":"","systemWhenCreated":"2020-08-13 14:00:52","systemWhoCreated":"systemUnknown"},{"id":171,"category":"React","title":"How to enable SASS in a create-react-app site","body":"- create and start React site\n\t- in your webs directory: `npx create-react-app sasstest`\n\t- `cd sasstest`\n\t- `code .` (to open VSCode in this directory)\n\t- `npm start`\n\t- CTRL-C React beenden\n- install and enable SASS\n\t- `npm i sass`\n\t- in `src\\App.js` \n\t\t- change `import './App.css';` to `import './App.scss';`\t\n\t\t- replace the entire `<div className=\"App\">` with this new content:\n\t\t\t--------------------------------------------------\n\t\t\t<div className=\"App\">\n\t\t\t\t<main>\n\t\t\t\t\t<h1>Web Browsers</h1>\n\t\t\t\t\t<article class=\"browser\">\n\t\t\t\t\t\t<h2>Firefox</h2>\n\t\t\t\t\t\t<p>Firefox is an open-source web browser developed by Mozilla, released in <span class=\"year\">2002</span>.\n\t\t\t\t\t\t\tIt uses the <strong>Gecko</strong> browser\n\t\t\t\t\t\t\trendering engine and the <strong>SpiderMonkey</strong> JavaScript rendering engine.</p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<article class=\"browser\">\n\t\t\t\t\t\t<h2>Safari</h2>\n\t\t\t\t\t\t<p>Safari is a web browser developed by Apple, released in <span class=\"year\">2003</span>. It uses the\n\t\t\t\t\t\t\t<strong>WebKit</strong> browser\n\t\t\t\t\t\t\trendering engine and the <strong>JavaScriptCore</strong> rendering engine.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<article class=\"browser\">\n\t\t\t\t\t\t<h2>Chrome</h2>\n\t\t\t\t\t\t<p>Chrome is a web browser developed by Google, released in <span class=\"year\">2008</span>. It uses the\n\t\t\t\t\t\t\t<strong>Blink</strong> rendering\n\t\t\t\t\t\t\tengine and the <strong>V8</strong> JavaScript rendering engine.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</article>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t\t--------------------------------------------------\n\t- rename `src\\App.css` to `src\\App.scss`\n\t\t- replace content with:\n\t\t\t-------------------------\n\t\t\t@use 'variables';\n\t\t\t@use 'layout';\n\t\t\t-------------------------\n\t- add `src\\_variables.scss`\n\t\t--------------------------\n\t\t$mainHeaderColor: rgb(42, 134, 34); \n\t\t--------------------------\n\t- add `src\\_layout.scss`\n\t\t--------------------------\n\t\t@use 'variables' as v;\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t\t\tmain {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tpadding: 0.8rem;\n\t\t\t\t\tbackground-color: lightgray;\n\t\t\t\t\th1 {\n\t\t\t\t\t\tcolor: v.$mainHeaderColor;\n\t\t\t\t\t}\n\t\t\t\t\th1,\n\t\t\t\t\tarticle.browser {\n\t\t\t\t\t\tmargin: 10px;\n\t\t\t\t\t\tpadding: 0.8rem;\n\t\t\t\t\t}\n\t\t\t\t\tarticle.browser {\n\t\t\t\t\t\tbackground: white;\n\t\t\t\t\t\th2 {\n\t\t\t\t\t\t\tcolor: v.$mainHeaderColor;\n\t\t\t\t\t\t}\n\t\t\t\t\t\th2,\n\t\t\t\t\t\tp {\n\t\t\t\t\t\t\tmargin: 0.5rem;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp {\n\t\t\t\t\t\t\tcolor: rgb(141, 25, 25);\n\t\t\t\t\t\t\t.year {\n\t\t\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t\t\t\t\tcolor: navy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstrong {\n\t\t\t\t\t\t\t\tbackground-color: lightyellow;\n\t\t\t\t\t\t\t\tcolor: black;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t--------------------------\n- reinstall all packages (necessary after .scss change)\n\t- `npm i`\n- restart app\n\t- `npm start`","points":30,"extras":"","systemWhenCreated":"2020-08-14 21:01:33","systemWhoCreated":"systemUnknown"},{"id":172,"category":"JavaScript","title":"How to use the spread operator to count number of occurances of letters in a word","body":"- notice that the `...acc` keeps passing the \"spread\" contents of the array to the next reduce step:\n\t--------------------------------\n\tconst countOccurances = arr =>\n\t\tarr.reduce((acc, str) => ({\n\t\t\t...acc,\n\t\t\t[str]: acc[str] ? acc[str] + 1 : 1\n\t\t}), {});\n\n\tconst sentence = \"Let's assume you want to create a new object with a different name and website, but the same occupation and age.\";\n\tconst letterArray = sentence.split('');\n\tconst letterCount = countOccurances(letterArray);\n\tconsole.log(letterCount); // unsorted object parameters\n\n\tconst sortable = [];\n\tfor(const key in letterCount) {\n\t\tsortable.push([key, letterCount[key]]);\n\t}\n\tsortable.sort((a,b) => b[1] - a[1]);\n\tconsole.log(sortable);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-17 11:24:19","systemWhoCreated":"systemUnknown"},{"id":173,"category":"JavaScript","title":"How to use the spread operator create a new object from another object, overwriting some of the properties","body":"- note that the two properties are overwritten:\n\t--------------------------------\n\tconst oldPerson = {\n\t\tfirstName: \"Jim\",\n\t\tlastName: \"Thompson\",\n\t\tdepartment: 52,\n\t\taccessLevel: \"high\"\n\t}\n\n\tconst newPerson = {\n\t\t...oldPerson,\n\t\tfirstName: \"Lisa\",\n\t\tlastName: \"Anderson\"\n\t}\n\n\tconsole.log(newPerson);\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-08-17 11:34:32","systemWhoCreated":"systemUnknown"},{"id":174,"category":"React","title":"How to add Bootstrap to Create-React-App","body":"- `npm i bootstrap`\n- add at the top of your .js or .tsx files: `import 'bootstrap/dist/css/bootstrap.css';`\n- as test: `<p className=\"text-success\">test of bootstrap</p>`, should be green","points":20,"extras":"","systemWhenCreated":"2020-08-18 06:56:59","systemWhoCreated":"systemUnknown"},{"id":175,"category":"React","title":"How to use a React Component class with TypeScript","body":"- note that you probably want to define `flashcards` in this instance with a custom type, not just `any`:\n\t--------------------------------\n\tinterface MainState {\n\t\tflashcards: any[]\n\t}\n\n\tclass Main extends Component<{}, MainState> {\n\t\tconstructor(props: any) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\tflashcards: []\n\t\t\t};\n\t\t}\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-08-18 10:11:13","systemWhoCreated":"systemUnknown"},{"id":176,"category":"React","title":"How to use a React Component function with TypeScript","body":"- note that you probably want to define `flashcards` in this instance with a custom type, not just `any`:\n\t--------------------------------\n\tinterface FlashcardListProps {\n\t\tflashcards: any[]\n\t}\n\n\tconst FlashcardList = ({ flashcards }: FlashcardListProps) => (\n\t\t<div className=\"content\">\n\t\t\ttest of flashcard-list: {flashcards.length} flashcards available\n\t\t</div>\n\t);\n\t--------------------------------","points":25,"extras":"","systemWhenCreated":"2020-08-18 11:21:40","systemWhoCreated":"systemUnknown"},{"id":177,"category":"React","title":"How to get absolute paths to work in a Create-React-App with TypeScript","body":"- in the `tsconfig.json` file, in the `compilerOptions` section, add `\"baseUrl\": \"src\"`\n- then e.g. `const greenBox = require('custom/images/green_box.png');` where `custom` is a directory under `src`","points":20,"extras":"","systemWhenCreated":"2020-08-18 16:32:08","systemWhoCreated":"systemUnknown"},{"id":178,"category":"React","title":"Setup Routes in Create-React-App","body":"- working through [this tutorial](https://www.kirupa.com/react/creating_single_page_app_react_using_react_router.htm)\n- in web directory\n\t- `npx create-react-app testcraroute`\n- in VSCode \n\t- open `testcraroute` as project\n\t- `npm start` to check it\n- install React Router\n\t- `npm i react-router-dom`\n- set up basics\n\t- delete all in `/src`\n\t- delete all in `/public`\n- make basic pages:\n\t- `/public/index.html`\n\t\t-----------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t  <head>\n\t\t\t<meta charset=\"utf-8\">\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\t\t\t<title>React Router Example</title>\n\t\t  </head>\n\t\t  <body>\n\t\t\t<div id=\"root\"></div>\n\t\t  </body>\n\t\t</html>\n\t\t-----------------------\n\t- `/src/index.js`\n\t\t----------------------\n\t\timport React from \"react\";\n\t\timport ReactDOM from \"react-dom\";\n\t\timport Main from \"./Main\";\n\n\t\tReactDOM.render(\n\t\t  <Main/>, \n\t\t  document.getElementById(\"root\")\n\t\t);\n\t\t----------------------\n\t- '/src/Main.js`\n\t\t-------------------------\n\t\timport React, { Component } from \"react\";\n\n\t\tclass Main extends Component {\n\t\t  render() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t  <h1>Simple SPA</h1>\n\t\t\t\t  <ul className=\"header\">\n\t\t\t\t\t<li><a href=\"/\">Home</a></li>\n\t\t\t\t\t<li><a href=\"/stuff\">Stuff</a></li>\n\t\t\t\t\t<li><a href=\"/contact\">Contact</a></li>\n\t\t\t\t  </ul>\n\t\t\t\t  <div className=\"content\">\n\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t  }\n\t\t}\n\n\t\texport default Main;\n\t\t-------------------------\n\t- `/src/Home.js`\n\t\t-------------------------\n\t\timport React, { Component } from \"react\";\n\n\t\tclass Home extends Component {\n\t\t  render() {\n\t\t\treturn (\n\t\t\t  <div>\n\t\t\t\t<h2>HELLO</h2>\n\t\t\t\t<p>Cras facilisis urna ornare ex volutpat, et\n\t\t\t\tconvallis erat elementum. Ut aliquam, ipsum vitae\n\t\t\t\tgravida suscipit, metus dui bibendum est, eget rhoncus nibh\n\t\t\t\tmetus nec massa. Maecenas hendrerit laoreet augue\n\t\t\t\tnec molestie. Cum sociis natoque penatibus et magnis\n\t\t\t\tdis parturient montes, nascetur ridiculus mus.</p>\n\n\t\t\t\t<p>Duis a turpis sed lacus dapibus elementum sed eu lectus.</p>\n\t\t\t  </div>\n\t\t\t);\n\t\t  }\n\t\t}\n\n\t\texport default Home;\n\t\t-------------------------\n\t- `/src/Stuff.js`\n\t\t--------------------------\n\t\timport React, { Component } from \"react\";\n\n\t\tclass Stuff extends Component {\n\t\t  render() {\n\t\t\treturn (\n\t\t\t  <div>\n\t\t\t\t<h2>STUFF</h2>\n\t\t\t\t<p>Mauris sem velit, vehicula eget sodales vitae,\n\t\t\t\trhoncus eget sapien:</p>\n\t\t\t\t<ol>\n\t\t\t\t  <li>Nulla pulvinar diam</li>\n\t\t\t\t  <li>Facilisis bibendum</li>\n\t\t\t\t  <li>Vestibulum vulputate</li>\n\t\t\t\t  <li>Eget erat</li>\n\t\t\t\t  <li>Id porttitor</li>\n\t\t\t\t</ol>\n\t\t\t  </div>\n\t\t\t);\n\t\t  }\n\t\t}\n\n\t\texport default Stuff;\n\t\t--------------------------\n\t- `/src/Contact.js`\n\t\t----------------------\n\t\timport React, { Component } from \"react\";\n\n\t\tclass Contact extends Component {\n\t\t  render() {\n\t\t\treturn (\n\t\t\t  <div>\n\t\t\t\t<h2>GOT QUESTIONS?</h2>\n\t\t\t\t<p>The easiest thing to do is post on\n\t\t\t\tour <a href=\"http://forum.kirupa.com\">forums</a>.\n\t\t\t\t</p>\n\t\t\t  </div>\n\t\t\t);\n\t\t  }\n\t\t}\n\n\t\texport default Contact;\n\t\t----------------------\n- Add router in to Main.js\n\t- add:\n\t\t-----------------------\n\t\timport {\n\t\t  Route,\n\t\t  NavLink,\n\t\t  HashRouter\n\t\t} from \"react-router-dom\";\n\t\timport Home from \"./Home\";\n\t\timport Stuff from \"./Stuff\";\n\t\timport Contact from \"./Contact\";\n\t\t-----------------------\n\t- add `<HashRouter>` around main div\n\t- replace links with:\n\t\t-----------------------\n\t\t<li><NavLink to=\"/\">Home</NavLink></li>\n\t\t<li><NavLink to=\"/stuff\">Stuff</NavLink></li>\n\t\t<li><NavLink to=\"/contact\">Contact</NavLink></li>\n\t\t-----------------------\n\t- add content:\n\t\t----------------------\n\t\t<Route path=\"/\" component={Home}/>\n\t\t<Route path=\"/stuff\" component={Stuff}/>\n\t\t<Route path=\"/contact\" component={Contact}/>\n\t\t----------------------\n- Fix routing\n\t- in Main.js add `exact` to Home route\n\t\t---------------------\n\t\t<Route exact path=\"/\" component={Home} />\n\t\t---------------------\n\t- add `main.css`\n\t\t-------------------------\n\t\tbody {\n\t\t  background-color: #eee;\n\t\t  padding: 20px;\n\t\t  margin: 0;\n\t\t}\n\t\th1, h2, p, ul, li {\n\t\t  font-family: sans-serif;\n\t\t}\n\t\tul.header li {\n\t\t  display: inline;\n\t\t  list-style-type: none;\n\t\t  margin: 0;\n\t\t}\n\t\tul.header {\n\t\t  background-color: #111;\n\t\t  padding: 0;\n\t\t}\n\t\tul.header li a {\n\t\t  color: #fff;\n\t\t  font-weight: bold;\n\t\t  text-decoration: none;\n\t\t  padding: 20px;\n\t\t  display: inline-block;\n\t\t}\n\t\t.content {\n\t\t  background-color: #fff;\n\t\t  padding: 20px;\n\t\t}\n\t\t.content h2 {\n\t\t  padding: 0;\n\t\t  margin: 0;\n\t\t}\n\t\t.content li {\n\t\t  margin-bottom: 10px;\n\t\t}\n\t\t-------------------------\n\t- in `index.js` add:\n\t\t-----------------------\n\t\timport \"./main.css\";\n\t\t-----------------------\n\t- to highlight active link\n\t\t- add a style\n\t\t\t----------------------\n\t\t\t.active {\n\t\t\t  background-color: #ccc;\n\t\t\t}\n\t\t\t----------------------\n\t\t- in Main.js, add exact\n\t\t\t----------------------\n\t\t\t<li><NavLink exact to=\"/\">Home</NavLink></li>\n\t\t\t----------------------\n\t- take the hash out of the URL\n\t\t- in Main.js, replace all `HashRouter` with `BrowserRouter`\n- replace CSS with SASS\n\t- `npm i node-sass`\n\t- rename `src\\main.css` to `src\\main.scss`\n\t- in `src\\index.js` change `import './main.css';` to `import './main.scss';`\n\t- replace the contents of `main.scss` with:\n\t\t--------------------------------\n\t\t$standard-padding: 20px;\n\n\t\tbody {\n\t\t\tbackground-color: #eee;\n\t\t\tpadding: $standard-padding;\n\t\t\tmargin: 0;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\n\t\tul.header {\n\t\t\tbackground-color: #ccc;\n\t\t\tpadding: 0;\n\t\t\tli {\n\t\t\t\tdisplay: inline;\n\t\t\t\tlist-style-type: none;\n\t\t\t\tmargin: 0;\n\t\t\t\ta {\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tpadding: 20px;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t}\n\t\t\t\ta.active {\n\t\t\t\t\tbackground-color: #aaa;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t.content {\n\t\t\tbackground-color: #fff;\n\t\t\tpadding: $standard-padding;\n\t\t\th2 {\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\tli {\n\t\t\t\tmargin-bottom: 10px;\n\t\t\t}\n\t\t}\t\t\n\t\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-19 13:35:02","systemWhoCreated":"systemUnknown"},{"id":179,"category":"React","title":"How to change the favicon.ico","body":"- create new one here: https://realfavicongenerator.net\n- download e.g. `globe.png`\n- copy to `/public`\n- change section in `manifest.json` to: \n\t---------------------\n\t\"icons\": [\n\t\t{\n\t\t\t\"src\": \"globe.png\",\n\t\t\t\"type\": \"image/png\",\n\t\t\t\"sizes\": \"64x64 32x32 24x24 16x16\"\n\t\t}\n\t],\n\t---------------------\n- change line in index.html to:\n\t- `<link rel=\"icon\" href=\"%PUBLIC_URL%/globe.png\" />`","points":40,"extras":"","systemWhenCreated":"2020-08-19 14:46:35","systemWhoCreated":"systemUnknown"},{"id":180,"category":"TypeScript","title":"How to add JQuery to React/TypeScript applications","body":"- `npm i jquery @types/jquery`\n- at top of React Component\n\t-----------------------\n\timport $ from 'jquery';\n\t-----------------------\n- within `return (` area\n\t----------------------\n\t<div className=\"test\">This text should be changed.</div>\n\t----------------------\n- after `extends Component` and before `render() {`\n\t------------------------------\n\tcomponentDidMount() {\n\t\t$('.test').html('this was changed').css('background-color', 'yellow');\n\t}\n\t------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-20 05:52:40","systemWhoCreated":"systemUnknown"},{"id":181,"category":"React","title":"How to display date/time as yyyy-mm-dd in React (with moment and live-clock)","body":"- for time calculations:\n\t- `npm i moment`\n\t- at top of component:\n\t\t--------------\n\t\timport moment from 'moment';\n\t\tconst d = moment(new Date());\n\t\tconst currentDateTime = d.format('YYYY-MM-DD HH:mm:ss');\n\t\t--------------\n\t- `<div className=\"left\">{currentDateTime}</div>`\n- for live time display with time zone\n\t- `npm i react-live-clock`\n\t- at top of component:\n\t\t----------------------------\n\t\timport Clock from 'react-live-clock';\n\t\t----------------------------\n\t- add to HTML:\n\t\t--------------------------\n\t\t<div className=\"left\"> <Clock format=\"YYYY-MM-DD HH:mm:ss\" ticking timezone=\"Berlin\" /> </div>\n\t\t--------------------------","points":40,"extras":"","systemWhenCreated":"2020-08-21 15:05:17","systemWhoCreated":"systemUnknown"},{"id":182,"category":"TypeScript","title":"How to get TypeScript command line scripts in Node including ES6-style import modules","body":"- `npm init -y`\n- `npm i -g typescript ts-node`\n- `npm i @types/node`\n- create `qtools/qstr.ts`:\n\t--------------------------\n\timport * as qstr from './qstr';\n\n\t/**\n\t * Capitalize the first letter of a string.\n\t * \n\t * qstr.capitalizeFirstLetter(\"this is a sentence.\"); \n\t * \n\t * \"This is a sentence.\"\n\t */\n\texport const capitalizeFirstLetter = (line: string) => {\n\t\treturn line.charAt(0).toUpperCase() + line.slice(1);\n\t}\n\n\t/**\n\t * Replace all occurances in a string. \n\t * \n\t * qstr.replaceAll(\"This is a tost.\", \"o\", \"e\");\n\t * \n\t * \"This is a test.\"\n\t */\n\texport const replaceAll = (text: string, search: string, replace: string) => {\n\t\treturn text.split(search).join(replace);\n\t};\n\t--------------------------\n- create `test.ts`:\n\t---------------------------\n\timport * as qstr from './qtools/qstr';\n\n\tfunction hello(person: string) {\n\t\treturn `hello, ${person}.`;\n\t}\n\n\tlet test: string = qstr.capitalizeFirstLetter('nnn');\n\n\tlet user: string = \"James Russel\";\n\tconst message = hello(user);\n\tconsole.log(qstr.capitalizeFirstLetter(message));\n\t---------------------------","points":60,"extras":"","systemWhenCreated":"2020-08-21 17:10:22","systemWhoCreated":"systemUnknown"},{"id":183,"category":"React","title":"How to get Jest unit tests running in React","body":"- go to web directory\n- `npx create-react-app testjest`\n- VSCode, open directory\n- look at `/src/App.test.js`\n- `npm test`\n\t- you see that the test passes\n- an example of an `App.test.js` file is:\n\t----------------------\n\timport React from 'react';\n\timport { render } from '@testing-library/react';\n\timport App from './App';\n\timport * as qstr from '../src/qtools/qstr';\n\timport * as qarr from '../src/qtools/qarr';\n\n\ttest('site loads', () => {\n\t\tconst { getByText } = render(<App />);\n\t\tconst linkElement = getByText(/to this site/i);\n\t\texpect(linkElement).toBeInTheDocument();\n\t});\n\n\ttest('qstr.capitalizeFirstLetter() with lowercase works', () => {\n\t\texpect(qstr.capitalizeFirstLetter('this')).toBe('This');\n\t});\n\n\ttest('qstr.capitalizeFirstLetter() with uppercase works', () => {\n\t\texpect(qstr.capitalizeFirstLetter('This')).toBe('This');\n\t});\n\n\ttest('qstr.replaceAll() replacing all characters works', () => {\n\t\texpect(qstr.replaceAll('xxxxx', 'x', 'a')).toBe('aaaaa');\n\t});\n\n\ttest('qstr.replaceAll() replacing some characters works', () => {\n\t\texpect(qstr.replaceAll('This is a test.', 'i', 'x')).toBe('Thxs xs a test.');\n\t});\n\n\ttest('qstr.contains() positive-find works', () => {\n\t\texpect(qstr.contains('This is a test.', 'is a')).toBeTruthy();\n\t});\n\n\ttest('qstr.contains() negative-find works', () => {\n\t\texpect(qstr.contains('This is a test.', 'nnn')).toBeFalsy();\n\t});\n\n\ttest('qstr.endsWith() positive-find works', () => {\n\t\texpect(qstr.endsWith('This is a test.', 'test.')).toBeTruthy();\n\t});\n\n\ttest('qstr.endsWith() negative-find works', () => {\n\t\texpect(qstr.endsWith('This is a test.', 'nnn')).toBeFalsy();\n\t});\n\n\ttest('qarr.hasDuplicateNumbers() positive test work', () => {\n\t\texpect(qarr.hasDuplicateNumbers([1, 2, 3, 4, 5, 6, 3])).toBeTruthy();\n\t});\n\n\ttest('qarr.hasDuplicateNumbers() positive test work', () => {\n\t\texpect(qarr.hasDuplicateNumbers([1, 2, 3, 4, 5, 6])).toBeFalsy();\n\t});\n\t----------------------\n- and you can put a test file in e.g. `/data` to test the integrity of a `.json` file, with e.g. `Flashcards.test.js`:\n\t--------------------------\n\timport * as qarr from 'qtools/qarr';\n\n\tconst flashcards = require('../data/flashcards.json');\n\n\ttest('Have enough flashcards in the datasource', () => {\n\t\texpect(flashcards.length).toBeGreaterThan(150);\n\t});\n\n\ttest('Each flashcard has an id that is a number', () => {\n\t\tflashcards.map(m => {\n\t\t\texpect(typeof m.id).toBe('number');\n\t\t});\n\t});\n\n\ttest('Each flashcard has a unique id.', () => {\n\t\tconst ids = flashcards.map(m => m.id);\n\t\texpect(qarr.hasDuplicateNumbers(ids)).toBeFalsy();\n\t});\n\t--------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-21 23:49:58","systemWhoCreated":"systemUnknown"},{"id":184,"category":"React","title":"How to display HTML from a variable (similar to v-html in Vue.js)","body":"- `npm i react-html-parser`\n- If you use TypeScript, also: `npm i @types/react-html-parser`\n- after `render() {`:\n\t--------------------------------\n\tconst html = 'This is a <b>test</b>.';\n\t--------------------------------\n- in JSX:\n\t------------------------------------\n\t<div>{ ReactHtmlParser(test) }</div>\n\t------------------------------------","points":40,"extras":"","systemWhenCreated":"2020-08-26 13:52:31","systemWhoCreated":"systemUnknown"},{"id":185,"category":"React","title":"How to change the document title of pages in a React/TypeScript app","body":"- `npm i react-helmet @types/react-helmet`\n- at top of page:\n\t----------------------\n\timport { Helmet } from 'react-helmet';\n\tconst pageTitle = 'Flashcards';\n\t----------------------\n- in component:\n\t--------------------------\n\t<Helmet>\n\t\t<title>{ pageTitle }</title>\n\t</Helmet>\n\t--------------------------","points":40,"extras":"","systemWhenCreated":"2020-08-26 13:53:25","systemWhoCreated":"systemUnknown"},{"id":186,"category":"React","title":"How to make a click event that changes screen text in TypeScript","body":"- Note also the `showContent()` method that shows dynamic content based on the state variable:\n\t--------------------------------\n\timport React, { Component } from 'react';\n\n\tclass Info extends Component<{}, { message: string }> {\n\t\tconstructor(props: string[]) {\n\t\t\tsuper(props)\n\t\t\tthis.state = {\n\t\t\t\tmessage: 'original text'\n\t\t\t}\n\t\t}\n\n\t\tchangeMessage = () => {\n\t\t\tthis.setState({ message: 'changed text' })\n\t\t};\n\n\t\tshowContent() {\n\t\t\tif (this.state.message.includes('original')) {\n\t\t\t\treturn 'the original message is showing';\n\t\t\t} else {\n\t\t\t\treturn 'now a second message is showing';\n\t\t\t}\n\t\t}\t\t\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div><button onClick={this.changeMessage}>Change Message</button></div>\n\t\t\t\t\t<div>Message: <code>{this.state.message}</code></div>\n\t\t\t\t\t<div>{this.showContent()}</div> \n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\texport default Info;\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-26 21:46:26","systemWhoCreated":"systemUnknown"},{"id":187,"category":"React","title":"How to pass a parameter to a method from an onClick in JSX","body":"- Note this is a TypeScript example, and also note the `() =>` syntax in the `onClick` attribute:\n\t--------------------------------\n\tclass Flashcards extends Component<{}, MainState> {\n\t\t...\n\t\tshowItemsInCategory = (category: string) => {\n\t\t\tthis.setState({\n\t\t\t\tfilteredFlashcards: flashcards.filter((m: any) => m.category.includes(category))\n\t\t\t});\n\t\t};\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t<title>{pageTitle}</title>\n\t\t\t\t\t</Helmet>\n\t\t\t\t\t<div className=\"searchArea\">\n\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t<button type=\"button\" onClick={() => this.showItemsInCategory('git')}>Git</button>\n\t\t\t\t\t\t\t<button type=\"button\" onClick={() => this.showItemsInCategory('linux')}>Linux</button>\n\t\t\t\t\t\t\t<button type=\"button\" onClick={() => this.showItemsInCategory('npm')}>npm</button>\n\t\t\t\t\t\t</div>\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-28 13:23:15","systemWhoCreated":"systemUnknown"},{"id":188,"category":"JavaScript","title":"How to get a list of unique values of a property of an array","body":"- Note that you have to use the spread operator to get the values out of the Set object\n\t--------------------------------\n\tconst data = [\n\t\t{ group: 'A', name: 'SD' },\n\t\t{ group: 'B', name: 'FI' },\n\t\t{ group: 'A', name: 'MM' },\n\t\t{ group: 'D', name: 'MM' },\n\t\t{ group: 'A', name: 'MM' },\n\t\t{ group: 'B', name: 'CO' }\n\t];\n\n\tconst unique = [...new Set(data.map(item => item.name))]; // [ 'SD', 'FI', 'MM', 'CO' ]\n\tconsole.log(unique);\n\n\t// Note: you have to spread out the Set object with [...]\n\tconst set = new Set(data.map(item => item.name)); // Set { 'SD', 'FI', 'MM', 'CO' }\n\tconsole.log(set);\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-08-28 14:25:22","systemWhoCreated":"systemUnknown"},{"id":189,"category":"RxJS","title":"How to create a Observable and subscribe to it","body":"- `npm i rxjs`\n- note that you can subscribe as many times as you want: \n\t------------------------------\n\timport { interval } from 'rxjs';\n\n\tconst source = interval(1000);\n\n\tsource.subscribe(val => console.log(val));\n\tsource.subscribe(m => console.log('and this is it plus one: ' + (m + 1)));\n\tsource.subscribe(m => {\n\t\tif (m === 5) {\n\t\t\tconsole.log('We were waiting for the number FIVE and here it is.')\n\t\t}\n\t});\n\t------------------------------","points":40,"extras":"","systemWhenCreated":"2020-08-28 16:30:10","systemWhoCreated":"systemUnknown"},{"id":190,"category":"TypeScript","title":"How to use ES6 modules in TypeScript","body":"- NOTE: this project is available at: https://github.com/edwardtanguay/typescript-node\n- create directory `testts3`\n- enter it with VSCode\n- `npm -y init`\n- `npm i -D typescript`\n- add to `package.json`:\n\t------------------\n\t\"type\": \"module\",\n\t------------------\n- `main.ts` (note the `qstr.js` here)\n\t------------------------\n\timport * as qstr from './qstr.js';\n\n\tconst message = qstr.chopRight('message-version11', '-version11');\n\tconsole.log(message);\n\t------------------------\n- `qstr.ts`\n\t------------------------------\n\texport const chopRight = (main: string, textToChop: string) => {\n\t\tif (main.endsWith(textToChop)) {\n\t\t\tconst len = textToChop.length;\n\t\t\tconst mainLen = main.length;\n\t\t\tif (len <= mainLen) {\n\t\t\t\treturn main.substring(0, mainLen - len);\n\t\t\t}\n\t\t}\n\t\treturn main;\n\t};\n\t------------------------------\n- `node_modules/.bin/tsc --target ES6 main.ts`\n\t- this will create two .js files with the same names: `main.js` and `qstr.js`\n- `node main.js`","points":50,"extras":"","systemWhenCreated":"2020-08-29 12:27:06","systemWhoCreated":"systemUnknown"},{"id":191,"category":"JavaScript","title":"How to apply async/await to synchronous functions","body":"- synchronous functions:\n\t--------------------------------\n\tconst getText = (id) => {\n\t\treturn {\n\t\t\tid: id,\n\t\t\tname: 'Text #' + id,\n\t\t\tseconds: 0\n\t\t}\n\t}\n\n\tconst getTexts = (ids) => {\n\t\tfor (const id of ids) {\n\t\t\tconst text = getText(id);\n\t\t\tconsole.log(`Got ${text.name} with id #${text.id} which took ${text.seconds} seconds.`);\n\t\t};\n\t}\n\n\tgetTexts([1, 2, 3, 4]);\n\tgetTexts([5, 6, 7, 8]);\n\t--------------------------------\n- OUTPUT:\n\t---------------------------\n\tGot Text #1 with id #1 which took 0 seconds.\n\tGot Text #2 with id #2 which took 0 seconds.\n\tGot Text #3 with id #3 which took 0 seconds.\n\tGot Text #4 with id #4 which took 0 seconds.\n\tGot Text #5 with id #5 which took 0 seconds.\n\tGot Text #6 with id #6 which took 0 seconds.\n\tGot Text #7 with id #7 which took 0 seconds.\n\tGot Text #8 with id #8 which took 0 seconds.\n\t---------------------------\n- asynchronous functions:\n\t----------------------------------------\n\tconst getText = (id) => {\n\t\treturn new Promise((resolve, rejects) => {\n\t\t\tconst seconds = Math.floor(Math.random() * 4) + 1;\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve({\n\t\t\t\t\tid: id,\n\t\t\t\t\tname: 'Text #' + id,\n\t\t\t\t\tseconds: seconds\n\t\t\t\t});\n\t\t\t}, seconds * 1000);\n\t\t});\n\t}\n\n\tconst getTexts = async (ids) => {\n\t\tfor (const id of ids) {\n\t\t\tconst text = await getText(id);\n\t\t\tconsole.log(`Got ${text.name} with id #${text.id} which took ${text.seconds} seconds.`);\n\t\t}\n\t}\n\n\tgetTexts([1, 2, 3, 4]);\n\tgetTexts([5, 6, 7, 8]);\n\t----------------------------------------\n- OUTPUT:\n\t--------------------------\n\tGot Text #1 with id #1 which took 3 seconds.\n\tGot Text #5 with id #5 which took 3 seconds.\n\tGot Text #2 with id #2 which took 1 seconds.\n\tGot Text #6 with id #6 which took 1 seconds.\n\tGot Text #3 with id #3 which took 1 seconds.\n\tGot Text #7 with id #7 which took 2 seconds.\n\tGot Text #8 with id #8 which took 1 seconds.\n\tGot Text #4 with id #4 which took 4 seconds.\n\t--------------------------","points":70,"extras":"","systemWhenCreated":"2020-08-31 12:41:02","systemWhoCreated":"systemUnknown"},{"id":192,"category":"JavaScript","title":"Simplest example of Promise with .then(), .catch(), and .finally()","body":"- notes that the code in finally always runs:\n\t--------------------------------\n\tconst getName = (idCode) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst chance = Math.floor(Math.random() * 3) + 1;\n\t\t\tif (chance == 1) {\n\t\t\t\tresolve(`Found record for \"${idCode}\".`);\n\t\t\t} else {\n\t\t\t\treject('ERROR #' + chance);\n\t\t\t}\n\t\t});\n\t};\n\n\n\tgetName('james')\n\t\t.then((result) => console.log('SUCCESS: ' + result))\n\t\t.catch((error) => console.log(error))\n\t\t.finally(() => {\n\t\t\tconsole.log('(close all connections)');\n\t\t});\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-08-31 13:35:37","systemWhoCreated":"systemUnknown"},{"id":193,"category":"Node.js","title":"How to debug a simple Node program in VSCode","body":"- simple debugging of one-page Node programs\n\t- bring up VSCode\n\t- click a break point on\n\t- press `F5` to debug the current program\n\t\t- click \"Node\"\n\t- press `Shift-F5` to stopp debugging \n- to always debug the same file regardless of what file is open (e.g. server.js)\n\t- in menu, Run, Add Configuration, Node\n\t- change in `launch.json` the line to `\"program\": \"${workspaceFolder}\\\\server.js\"`\n\t- then regardess of what file you have open, the file `server.js` will be debugged","points":35,"extras":"","systemWhenCreated":"2020-08-31 15:06:05","systemWhoCreated":"systemUnknown"},{"id":194,"category":"JavaScript","title":"Simple tests with Jasmine","body":"- note this code is also here: https://github.com/edwardtanguay/testjasmine\n- new directory\n- VSCode\n- `npm init -y`\n- `npm i jasmine -D`\n- `node_modules/.bin/jasmine init`\n- in package.json: `\"test\": \"jasmine\"`\n- `run test`\n\t- it runs but says \"no specs found\"\n- create `server.js`\n- create `qtools/qstr.js`\n\t-------------------------\n\texports.chopLeft = function (main, textToChop) {\n\t\tif (main.startsWith(textToChop)) {\n\t\t\tconst len = textToChop.length;\n\t\t\tconst mainLen = main.length;\n\t\t\tif (len <= mainLen) {\n\t\t\t\treturn main.substring(len, mainLen);\n\t\t\t}\n\t\t}\n\t\treturn main;\n\t}\n\t-------------------------\n- create `spec/server.spec.js`\n\t------------------------\n\tconst qstr = require('../qtools/qstr');\n\n\tdescribe('chopLeft', () => {\n\t\tit('should remove text from left side', () => {\n\t\t\texpect(qstr.chopLeft('002-filename.txt', '002-')).toBe('filename.txt');\n\t\t});\n\t});\n\t------------------------\n- create `server.js`\n\t------------------------\n\tconst qstr = require('./qtools/qstr');\n\n\tconst test = qstr.chopLeft('001-title', '001-');\n\tconsole.log(test);\n\t------------------------\n- then `node server.js` to run the app\n- and `npm test` to run the test","points":50,"extras":"","systemWhenCreated":"2020-08-31 16:17:33","systemWhoCreated":"systemUnknown"},{"id":195,"category":"JavaScript","title":"How to get the status code of a website, e.g. 200 or 502, etc.","body":"- `npm i request`\n- create `test.js`\n\t--------------------\n\tconst request = require('request');\n\n\trequest.get('http://google.com', (err, res) => {\n\t\tconsole.log(res.statusCode);\n\t});\n\t--------------------\n- `node test.js`","points":25,"extras":"","systemWhenCreated":"2020-08-31 16:45:45","systemWhoCreated":"systemUnknown"},{"id":196,"category":"Express","title":"How to set up Node/Express/EJS site with custom urls","body":"- create `public` folder with two HTML files, `main.html` and `info.html`\n- `npm i express`\n- server.js\n\t--------------------------------\n\tconst express = require('express');\n\tconst path = require('path');\n\n\tconst app = express();\n\tconst port = 3001;\n\n\tconst staticDirectory = path.join(__dirname, './public');\n\tapp.use(express.static(staticDirectory));\n\n\tapp.get('/info', (req, res) => {\n\t\tres.sendFile(path.join(__dirname, './public/info.html'));\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`Listening on port ${port}.`);\n\t});\n\t--------------------------------\n- add Nodemon to automatically load the site after changes in .js files\n\t- `npm i -D nodemon`\n\t- in `package.json`, add in scripts:\n\t\t- `\"start\": \"node_modules/.bin/nodemon server.js\"`\n\t- then `npm start` to start the app\n- add EJS as a templating language\n\t- `npm i ejs`\n\t- create `public/views` directory\n\t- in `server.js`, add after require block:\n\t\t---------------------\n\t\tapp.set('view engine', 'ejs');\n\t\tapp.et('views', path.join(__dirname, './public/views'));\n\t\t---------------------\n\t- (you don't have to require ejs as express will cover it)\n\t- add extension in VSCode: ejs language support by Qassim Farid\n\t- move and rename `public/index.html` to `public/views/pages/index.ejs`\n\t- in `server.js` add:\n\t\t--------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.render('pages/index', { pageTitle: 'The Main Page' });\n\t\t});\n\t\t--------------------------\n\t- then in the `index.ejs` file add:\n\t\t------------------------\n\t\t<title><%=pageTitle%></title>\n\t\t<h1><%=pageTitle%></h1>\n\t\t------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-01 10:40:38","systemWhoCreated":"systemUnknown"},{"id":197,"category":"JavaScript","title":"How to call a class method dynamically with a variable name","body":"- note there is no period after `this`:\n\t--------------------------------\n\tclass Test {\n\n\t\tgetItems() {\n\t\t\treturn 'items';\n\t\t}\n\n\t\tgetDynamic(functionName) {\n\t\t\treturn this[functionName]();\n\t\t}\n\n\t}\n\n\tconst test = new Test();\n\tconsole.log(test.getItems());\n\tconsole.log(test.getDynamic('getItems'));\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-09-02 15:34:38","systemWhoCreated":"systemUnknown"},{"id":198,"category":"PHP","title":"How to set up Composer and use a package","body":"- setup XAMPP\n- setup local website\n- https://getcomposer.org\n\t- click on: Download\n\t- click on: Composer-Setup.exe \n\t- install\n\t- no developer mode\n\t- choose latest PHP version: 7.4.9\n\t- at proxy question, click next\n- test\n\t- open command window\n\t- type `php -v`\n\t\t- I get: PHP 7.4.6 (cli)...\n\t- type: `composer`\n\t\t- I get computer menu\n- make composer.json file\n\t- `composer init`, answer questions\n- get package\n\t- https://packagist.org/packages/league/color-extractor\n\t- copy command: composer require league/color-extractor\n- copy a picture here: images/somepic.jpg\n- use the package\n\t- `test.php`:\n\t\t---------------------------------\n\t\t<?php\n\t\trequire 'vendor/autoload.php';\n\n\t\tuse League\\ColorExtractor\\Color;\n\t\tuse League\\ColorExtractor\\ColorExtractor;\n\t\tuse League\\ColorExtractor\\Palette;\n\n\t\t$palette = Palette;fromFilename('images/somepic.jpg');\n\n\t\t$colors = $palette->getMostUsedColors(335);\n\n\t\tforeach( $colors as $color => $count) {\n\t\t\t$current = Color;fromIntToHex($color);\n\t\t\techo '<div style=\"background-color: ' .$current . '\">test</div>';\n\t\t}\n\t\t---------------------------------","points":100,"extras":"","systemWhenCreated":"2020-09-04 16:48:47","systemWhoCreated":"systemUnknown"},{"id":199,"category":"PHP","title":"How to force integers in parameters and return variable in PHP7","body":"- will return 3x \"integer\", and the result for each is 3, i.e. strings are converted to integers\n\t--------------------------------\n\t<?php\n\tfunction add(int $a, int $b) : int {\n\t\treturn $a + $b;\n\t}\n\n\techo gettype(add(1, 2)) . '<hr/>';\n\techo gettype(add('1', '2')) . '<hr/>';\n\techo gettype(add(1.0, 2.0)) . '<hr/>';\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-09-05 16:30:01","systemWhoCreated":"systemUnknown"},{"id":200,"category":"ES6","title":"How to destructure a date into variables using regex","body":"- note the all is the first variable\n\t--------------------------------\n\tconst [all, year, month, day] =\n\t\t/^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/\n\t\t\t.exec('2020-12-31');\n\n\tconsole.log(all);\n\tconsole.log(year);\n\tconsole.log(month);\n\tconsole.log(day);\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-09-05 17:10:07","systemWhoCreated":"systemUnknown"},{"id":201,"category":"ES6","title":"Object literals for variables and functions","body":"- note this is simplified from ES5\n\t--------------------------------\n\tconst firstName = 'Simon';\n\tconst lastName = 'Marius';\n\tconst country = 'Germany';\n\tconst password = 'awefwe';\n\n\tconst user = {\n\t\tfirstName,\n\t\tlastName,\n\t\tcountry,\n\t\tpassword,\n\t\tsetPassword(password) {\n\t\t\tthis.password = password;\n\t\t}\n\t};\n\n\tconsole.log(user);\n\tuser.setPassword('newpassword');\n\tconsole.log(user);\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-09-05 17:27:32","systemWhoCreated":"systemUnknown"},{"id":202,"category":"ES6","title":"Example of rest parameters and spread operator","body":"- with rest parameters, you can send as many parameters you want\n\t--------------------------------\n\t// example of rest parameters\n\tfunction sumAll(...args) {\n\t\tlet sum = 0;\n\t\tconsole.log(`There are ${arguments.length} arguments.`);\n\t\tconsole.log(`The first argument is ${arguments[0]}.`);\n\t\tfor (const num of args) sum += num;\n\t\treturn sum;\n\t}\n\n\tconsole.log(sumAll(1, 2, 3, 4, 5));\n\tconsole.log(sumAll(1, 2, 3, 4, 5, 6, 7, 8));\n\n\tconst numbers = [6, 5, 8, 3, 2, 1];\n\n\t// example of spread operator\n\tconsole.log(sumAll(...numbers));\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-09-05 17:39:06","systemWhoCreated":"systemUnknown"},{"id":203,"category":"ES6","title":"Example of ES6 iterator and generator","body":"- note that a generator is simplified code for an iterator, use this generator code:\n\t--------------------------------\n\tfunction* makeRangeIterator(start = 0, end = 100, step = 1) {\n\t\tlet iterationCount = 0;\n\t\tfor (let i = start; i < end; i += step) {\n\t\t\titerationCount++;\n\t\t\tyield i;\n\t\t}\n\t\treturn iterationCount;\n\t}\n\n\tconst it = makeRangeIterator(1, 10, 2);\n\n\tlet result = it.next();\n\twhile (!result.done) {\n\t\tconsole.log(result.value); \n\t\tresult = it.next();\n\t}\n\n\tconsole.log(\"Iterated over sequence of size: \", result.value); \n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-05 17:47:44","systemWhoCreated":"systemUnknown"},{"id":204,"category":"ES6","title":"Simplest ES6 promise/async/await example","body":"- note that await can only be used in an async function\n\t--------------------------------\n\tfunction resolveAfter2Seconds() {\n\t\treturn new Promise(resolve => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve('resolved');\n\t\t\t}, 2000);\n\t\t});\n\t}\n\n\tasync function asyncCall() {\n\t\tconsole.log('calling');\n\t\tconst result = await resolveAfter2Seconds();\n\t\tconsole.log(result);\n\t}\n\n\tasyncCall();\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-05 17:50:43","systemWhoCreated":"systemUnknown"},{"id":205,"category":"Vue.js","title":"Basics syntax of global and local custom components","body":"- Note that custom components should be hyphenated\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t<title>Vue Basic</title>\n\t</head>\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div>[{{message}}]</div>\n\t\t\t<div><flashcard-component></flashcard-component></div>\n\t\t\t<dp-notice message=\"Press the A key.\"></dp-notice>\n\t\t\t<dp-notice message=\"Log out when finished.\"></dp-notice>\n\t\t\t<dp-notice></dp-notice>\n\t\t</div> \n\t\t<script>\n\n\t\t\tconst flashcardComponent = {\n\t\t\t\tdata: function() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfront: 'house',\n\t\t\t\t\t\tback: 'Haus'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttemplate: '<div><div>{{front}} / {{back}}</div></div>'\n\t\t\t};\n\n\t\t\tVue.component('dp-notice', {\n\t\t\t\tprops: ['message'],\n\t\t\t\ttemplate: '<div>This is the notice: {{message || \"(no message)\"}}</div>'\n\t\t\t});\n\n\t\t\tconst app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tcomponents: {\n\t\t\t\t\t'flashcard-component': flashcardComponent\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'hello'\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.message = 'changed';\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\t</html>\n\t--------------------------------","points":70,"extras":"","systemWhenCreated":"2020-09-05 23:18:42","systemWhoCreated":"systemUnknown"},{"id":206,"category":"Vue.js","title":"How to use slots in Vue.js","body":"- note that you can have several slots, see \"header\" and footer\"\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\n\t\t<head name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t\t<title>Vue Basic</title>\n\t\t\t<style>\n\t\t\t\t.statusOn {\n\t\t\t\t\tcolor: green;\n\t\t\t\t}\n\n\t\t\t\t.statusOff {\n\t\t\t\t\tcolor: tomato;\n\t\t\t\t}\n\n\t\t\t\t.insideInfo {\n\t\t\t\t\tborder: 1px solid #ccc;\n\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t}\n\n\t\t\t\t.itemCard {\n\t\t\t\t\tborder: 1px solid #ccc;\n\t\t\t\t\tmargin: 10px 0 10px 0;\n\t\t\t\t\tpadding: 10px;\n\t\t\t\t\tbackground-color: #ddd;\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div>[{{message}}]</div>\n\t\t\t<div>\n\t\t\t\t<flashcard-component></flashcard-component>\n\t\t\t</div>\n\t\t\t<dp-notice message=\"Press the A key.\" status=\"off\"></dp-notice>\n\t\t\t<dp-notice message=\"Log out when finished.\"></dp-notice>\n\t\t\t<dp-notice message=\"A third.\" status=\"off\"></dp-notice>\n\n\t\t\t<dp-notice>\n\t\t\t\t<h2 slot=\"header\">Customer Header</h2>\n\t\t\t\tThis is the slot info.\n\t\t\t\t<div slot=\"footer\">\n\t\t\t\t\t<b>another kind of footer: {{message}}</b>\n\t\t\t\t</div>\n\t\t\t</dp-notice>\n\t\t\t<dp-notice></dp-notice>\n\t\t</div>\n\t\t<script>\n\n\t\t\tconst flashcardComponent = {\n\t\t\t\tdata: function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfront: 'house',\n\t\t\t\t\t\tback: 'Haus'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttemplate: '<div><div>{{front}} / {{back}}</div></div>'\n\t\t\t};\n\n\t\t\tVue.component('dp-notice', {\n\t\t\t\tprops: ['message', 'status'],\n\t\t\t\ttemplate: `<div :class=\"[status === 'off' ? 'statusOff' : 'statusOn']\">This is the notice: {{message || \"(no message)\"}}\n\t\t\t\t\t<div class=\"itemCard\">\n\t\t\t\t\t\t<slot name=\"header\">\n\t\t\t\t\t\t\t<h3>HEADER</h3>\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t\t<span class=\"insideInfo\">\n\t\t\t\t\t\t\t<slot>This is where info would go.</slot>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<slot name=\"footer\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<i>footer</i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</div>\n\t\t\t\t</slot>`\n\t\t\t});\n\n\t\t\tconst app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tcomponents: {\n\t\t\t\t\t'flashcard-component': flashcardComponent\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'hello'\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.message = 'changed';\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\n\t</html>\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-07 13:20:25","systemWhoCreated":"systemUnknown"},{"id":207,"category":"Vue.js","title":"How to emit events in a component and consume them in the parent","body":"- now that the emitted event name has to be example the same, e.g. \"message-shown\"\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\n\t\t<head name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t\t<title>Vue Event</title>\n\t\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<dp-notice message=\"this is the first component\" @message-shown=\"recordMessage\"></dp-notice>\n\t\t\t<dp-notice message=\"this is the second component\" @message-shown=\"recordMessage\"></dp-notice>\n\t\t\t<hr />\n\t\t\t<h3>These messages have been shown:</h3>\n\t\t\t<ul>\n\t\t\t\t<li v-for=\"message in messages\">{{message}}</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<script>\n\n\t\t\tVue.component('dp-notice', {\n\t\t\t\tdata: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tshowMessage: false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tprops: ['message'],\n\t\t\t\tmethods: {\n\t\t\t\t\tshowTheMessage() {\n\t\t\t\t\t\tthis.showMessage = !this.showMessage;\n\t\t\t\t\t\tif (this.showMessage) {\n\t\t\t\t\t\t\tthis.$emit('message-shown', this.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tprops: ['message', 'status'],\n\t\t\t\ttemplate: `<div>\n\t\t\t\t\t<button @click=\"showTheMessage()\">Show Message</button> \n\t\t\t\t\t<span v-show=\"showMessage\">\n\t\t\t\t\t\t{{message}}\n\t\t\t\t\t</span>\n\t\t\t\t</div>`\n\t\t\t});\n\n\t\t\tconst app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessages: []\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\trecordMessage(message) {\n\t\t\t\t\t\tthis.messages.push(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t</script>\n\t</body>\n\n\t</html>\n\t--------------------------------","points":70,"extras":"$rank=1.992","systemWhenCreated":"2020-09-07 17:23:24","systemWhoCreated":"systemUnknown"},{"id":208,"category":"Regex","title":"Make a JavaScript function to humanize a URL","body":"- note that it finds `http` and `https`\n\t--------------------------------\n\tconst humanizeURL = (url) => {\n\t\treturn url\n\t\t\t.replace(/^https?:\\/\\//, '')\n\t\t\t.replace(/\\/$/, '')\n\t}\n\n\tconsole.log(humanizeURL('https://google.com/translate'));\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-09-07 21:45:01","systemWhoCreated":"systemUnknown"},{"id":209,"category":"Vue.js","title":"How to set up a vue-cli project and publish at Netlify","body":"- `npm i -g @vue/cli`\n\t- `vue -V` (4.5.4)\n- `vue create vuetest22`\n\t- open with VSCode at `vuetest22`\n\t- `npm run serve`\n- (`vue ui` is an extensive graphical user interface for the setup and management of the site)\n- create and push to GitHub\n\t- make change, e.g. `App.vue`, change msg `<HelloWorld msg=\"Welcome to Your Vue.js App\"/>`\n\t- `git add .`\n\t- `git commit -m \"second commit\"`\n\t- at GitHub, created `vuetest22`\n\t\t- copy and paste lines under: `…or push an existing repository from the command line`\n\n- publish at Netlify\n\t- log in at netlify.com\n\t- [[New Site from Git]]\n\t- [[GitHub]]\n\t- type in `vuetest22`\n\t- [[Deploy Site]]\n\t- [[Site Settings]]\n\t\t- Build command: `npm run build`\n\t\t- Publish directory: `dist`\n\t- [[Change Site Name]] \n\t\t- `vuetest22`\n\t- goto: https://vuetest22.netlify.app","points":70,"extras":"$rank=4.9","systemWhenCreated":"2020-09-07 23:16:18","systemWhoCreated":"systemUnknown"},{"id":210,"category":"JavaScript","title":"Understand closures","body":"- The point here is that outerParam is `outer`, not `outer-2`\n\t--------------------------------\n\tvar globalVar = \"global\";\n\tvar outerVar = \"outer\"\n\n\tfunction outerFunc(outerParam) {\n\t\tfunction innerFunc(innerParam) {\n\t\t\tconsole.log(globalVar, outerParam, innerParam);\n\t\t}\n\t\treturn innerFunc;\n\t}\n\n\tconst x = outerFunc(outerVar);\n\touterVar = \"outer-2\";\n\tglobalVar = \"guess\"\n\tx(\"inner\");\n\t--------------------------------","points":40,"extras":"$rank=0.7","systemWhenCreated":"2020-09-08 00:02:17","systemWhoCreated":"systemUnknown"},{"id":211,"category":"Redis","title":"How to set up Redis on Ubuntu","body":"- go to: https://redis.io\n- download e.g. redis-6.0.7.tar.gz\n- move to e.g. `/home/redisdb`\n- `tar xzf redis-6.0.7.tar.gz`\n- `cd redis-6.0.7`\n- `make`\n- `src/redis-server`\n- new command-window tab\n- `src/redis-cli`\n\t- `set name test`\n\t- `get name`","points":50,"extras":"","systemWhenCreated":"2020-09-09 10:52:00","systemWhoCreated":"systemUnknown"},{"id":212,"category":"CSS","title":"How to give list bullets a different size and color","body":"- note that width and margin-left are complements\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<head>\n\t\t<head>\n\t\t\t<style>\n\t\t\t\tul li {\n\t\t\t\t\tfont-size: 13px;\n\t\t\t\t\tlist-style: none;\n\t\t\t\t}\n\n\t\t\t\tul li::before {\n\t\t\t\t\tcontent: \"\\2022\";\n\t\t\t\t\tcolor: green;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\twidth: 10px;\n\t\t\t\t\tmargin-left: -10px;\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\n\t<body>\n\t\t<ul>\n\t\t\t<li>This is a test.</li>\n\t\t\t<li>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla eligendi nobis ipsum tempora mollitia odit\n\t\t\t\tiure, quos molestias voluptate voluptates vero praesentium minima possimus recusandae repudiandae nesciunt\n\t\t\t\tullam? Delectus, doloribus.</li>\n\t\t\t<li>This is another test.</li>\n\t\t</ul>\n\t</body>\n\n\t</html>\n\t--------------------------------\n- find [more symbols](https://www.htmlsymbols.xyz/games-symbols) here","points":20,"extras":"$rank=3.934","systemWhenCreated":"2020-09-09 14:55:44","systemWhoCreated":"systemUnknown"},{"id":213,"category":"VSCode","title":"How to format PHP pages in VSCode","body":"- create unformated `test.php`:\n\t-------------------------\n\t<?php\n\n\t$servers = [\n\t[ 'name' => 'Server 001', 'space' => 53454544],\n\t[ 'name' => 'Server 002', 'space' => 87687687],\n\t[ 'name' => 'Server 003', 'space' => 32233243],\n\t];\n\n\tfunction sortBySpace($item1, $item2) {\n\treturn $item1['space'] <=> $item2['space'];\n\t}\n\n\tfunction displayServers($servers) {\n\tforeach($servers as $server) {\n\techo $server['name'] . PHP_EOL;\n\t}\n\t}\n\t-------------------------\n- ALT-SHIFT-F to see that it does not format\n- install extension `phpfmt` (\"phpfmt - PHP formatter\")\n- right-click on document, \"Configure default formatter\", \"phpfmt\"\n- ALT-SHIFT-F and it works","points":40,"extras":"","systemWhenCreated":"2020-09-09 22:12:05","systemWhoCreated":"systemUnknown"},{"id":214,"category":"PHP","title":"How to use the PHP comparison operator","body":"- sorting is a particularly good use case for the comparison operator\n\t--------------------------------\n\t<?php\n\n\t$servers = [\n\t\t['name' => 'Server 001', 'space' => 53454544],\n\t\t['name' => 'Server 002', 'space' => 87687687],\n\t\t['name' => 'Server 003', 'space' => 32233243],\n\t];\n\n\tfunction sortBySpace($item1, $item2)\n\t{\n\t\treturn $item1['space'] <=> $item2['space'];\n\t}\n\n\tfunction displayServers($servers)\n\t{\n\t\tforeach ($servers as $server) {\n\t\t\techo \"$server[name] $server[space]\" . PHP_EOL;\n\t\t}\n\t\techo \"---\" . PHP_EOL;\n\t}\n\n\tdisplayServers($servers);\n\tusort($servers, 'sortBySpace');\n\tdisplayServers($servers);\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-09-09 22:26:54","systemWhoCreated":"systemUnknown"},{"id":215,"category":"ES6","title":"Examples of ES6 destructing assignment","body":"- notice that when destructing assignments for objects, you have to declare and assign the variables beforehand, unless you don't have \"use strict\":\n\t--------------------------------\n\t\"use strict\";\n\n\t// classic\n\tconst person = [\"van Dyck\", \"Anthony\", 57, 52, 75, 21];\n\tconst [lastName, firstName, ...numbers] = person;\n\tconsole.log(`The person ${firstName} ${lastName} has ${numbers.length} numbers: ${numbers.join(', ')}, which total ${numbers.reduce((a, b) => a + b, 0)}.`)\n\n\t// function on string\n\tconst [fname, lname] = \"Henri Poincaré\".split(' ');\n\tconsole.log(`${lname}, ${fname}`);\n\n\t// swap values\n\tlet primary = 'chocolate';\n\tlet secondary = 'vanilla';\n\t[primary, secondary] = [secondary, primary]\n\tconsole.log(`primary=${primary}, secondary=${secondary}`);\n\n\t// default values\n\tlet [name = \"(name unknown)\", surname = \"(surname unknown)\"] = [\"Sam\"];\n\tconsole.log(`${name} ${surname}`);\n\n\t// objects\n\tconst server = {\n\t\tlocation: \"Berlin\",\n\t\toperatingSystem: \"Ubuntu\",\n\t\tcode: \"ubunt001\",\n\t\tversion: \"20.04\"\n\t};\n\tlet operatingSystem = '';\n\tlet version = '';\n\t({ operatingSystem, version } = server);\n\tconsole.log(`${operatingSystem} ${version}`);\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-10 14:36:59","systemWhoCreated":"systemUnknown"},{"id":216,"category":"ES6","title":"Examples of ES6 for-loops","body":"- for arrays, if you will not be prematurely exiting, use `forEach()` for speed, otherwise use `for..of`\n\t--------------------------------\n\t// loop through parameters with for..in\n\tfunction Mobile(model_no) {\n\t\tthis.Model = model_no;\n\t\tthis.Color = 'Black';\n\t\tthis.RAM = '8GB';\n\t}\n\tvar phone = new Mobile(\"Galaxy\");\n\tfor (var prop in phone) {\n\t\tconsole.log(prop + \" -- \" + phone[prop]);\n\t}\n\n\t// loop through array with for..of\n\tconst numbers = [1, 2, 5, 78, 564];\n\tfor (const number of numbers) {\n\t\tconsole.log(number);\n\t}\n\n\t// loop through array with for..of with index\n\tconst colors = ['brown', 'black', 'orange', 'yellow', 'green'];\n\tfor (const [index, color] of colors.entries()) {\n\t\tconsole.log(`Color #${index + 1} is ${color}.`);\n\t}\n\n\t// forEach with index (faster than for..of)\n\tcolors.forEach((color, index) => {\n\t\tconsole.log(`FOREACH: Color #${index + 1} is ${color}.`);\n\t});\n\t--------------------------------","points":60,"extras":"$rank=4.73","systemWhenCreated":"2020-09-10 14:57:25","systemWhoCreated":"systemUnknown"},{"id":217,"category":"ES6","title":"How to get name and version from package.json","body":"- notice we are using destructuring assignment\n\t--------------------------------\n\tconst packageJson = require('./package.json');\n\tconst { name, version } = packageJson;\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-09-15 20:42:18","systemWhoCreated":"systemUnknown"},{"id":218,"category":"VSCode","title":"How to change display language from English to French in VSCode","body":"- [[CTRL-SHIFT-P]]\n- type `config`\n- choose *Configure Display Language*\n- click *Install additional languages...*\n- choose French, and click to restart","points":10,"extras":"","systemWhenCreated":"2020-09-15 22:14:52","systemWhoCreated":"systemUnknown"},{"id":219,"category":"Bootstrap","title":"How to use float right/left in Bootstrap","body":"- note the class names are e.g. `float-left` and not `left`\n\t--------------------------------\n\t<div class=\"clearfix\">\n\t\t<div class=\"float-left\">left</div>\n\t\t<div class=\"float-right\">right</div>\n\t</div>\n\t--------------------------------","points":10,"extras":"","systemWhenCreated":"2020-09-17 13:04:46","systemWhoCreated":"systemUnknown"},{"id":220,"category":"Vue.js","title":"How to use the method lifecycle hook to load API data","body":"- tested in Chrome, Firefox, Edge (doesn't work in Explorer 11)\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html>\n\n\t<head>\n\t\t<title>vue.js api test</title>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<ul>\n\t\t\t\t<li v-for=\"item in products\">\n\t\t\t\t\t<b>{{item.id}}</b> - {{item.description}}\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<script>\n\n\t\t\tconst app = new Vue({\n\t\t\t\tel: '#app',\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: 'exterior test',\n\t\t\t\t\tmainImage: 'images/card_back.png',\n\t\t\t\t\ttotal: 14,\n\t\t\t\t\tproducts: []\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\tthis.message = 'changed message';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmounted() {\n\t\t\t\t\tfetch('https://hplussport.com/api/products/order/price')\n\t\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tthis.products = data;\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\t--------------------------------","points":50,"extras":"$rank=4.6999","systemWhenCreated":"2020-09-17 14:35:41","systemWhoCreated":"systemUnknown"},{"id":221,"category":"Bootstrap","title":"Bootstrap page with top and bottom fixed bars","body":"- note you have to make a few more Lorem ipsum paragraphs to text the scrolling\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>nav top/bottom</title>\n\t\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n\t\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n\t\t<style>\n\t\t\t.custom-nav {\n\t\t\t\tbackground-color: #ddd !important;\n\t\t\t}\n\n\t\t\t.badge-normal {\n\t\t\t\tbackground-color: #ccc;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tpadding: 70px 0;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<nav class=\"navbar navbar-light bg-light fixed-top custom-nav\">\n\t\t\t<div class=\"navbar-text\">\n\t\t\t\t<b>Status:</b>\n\t\t\t\t<span class=\"badge badge-pill badge-normal\">online</span>\n\t\t\t</div>\n\t\t</nav>\n\t\t<div class=\"container\">\n\t\t\t<p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quasi laborum autem blanditiis nobis itaque ratione\n\t\t\t\tporro ipsam, quae provident, nesciunt doloribus fuga aut dicta possimus quis eos voluptatum. Alias earum\n\t\t\t\tbeatae\n\t\t\t\tsequi odit voluptas ipsa expedita, cumque ducimus fuga voluptatem explicabo sit, nemo consequatur ea\n\t\t\t\tvoluptates\n\t\t\t\tquod repellat doloribus reprehenderit.</p>\n\t\t\t<p>Amet consectetur, adipisicing elit. Culpa eos beatae itaque minus totam dolorem eligendi aliquid possimus\n\t\t\t\tfuga\n\t\t\t\tatque laboriosam quasi placeat enim ipsa, recusandae ab. Eveniet magnam suscipit adipisci! Laudantium nemo\n\t\t\t\texcepturi cum, laboriosam, obcaecati commodi quisquam dolor, maxime ab corporis quaerat veritatis molestias\n\t\t\t\tid\n\t\t\t\tquia quasi! Consequuntur?</p>\n\t\t</div>\n\n\t\t<nav class=\"navbar navbar-light bg-light fixed-bottom custom-nav\">\n\t\t\t<div class=\"navbar-text\">\n\t\t\t\t<b>Name:</b>\n\t\t\t\t<span>Anders Wellkjim</span>\n\t\t\t</div>\n\t\t</nav>\n\t</body>\n\n\t</html>\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-17 15:38:28","systemWhoCreated":"systemUnknown"},{"id":222,"category":"JavaScript","title":"Self-invoking JavaScript on HTML page","body":"- note you could also make a function called e.g. `init()` and then call it:\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>simple single-file TypeScript/Vue.js</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">this is original text</div>\n\t</body>\n\t<script>\n\t\t(function () {\n\t\t\tvar app = document.getElementById('app');\n\t\t\tapp.innerHTML = 'new text';\n\t\t}()) ;\n\n\t</script>\n\n\t</html>\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-09-26 09:01:50","systemWhoCreated":"systemUnknown"},{"id":223,"category":"JavaScript","title":"Change variable name when using IIFE","body":"- IIFE = Immediately Invoked Function Expression\n\t--------------------------------\n\tconst jQuery = {\n\t\tversion: 1.21,\n\t\tfn: {}\n\t};\n\n\t(function defineType($) {\n\t\tif ($.version < 1.15) {\n\t\t\tthrow 'plugin requires version 1.15+';\n\t\t} else {\n\t\t\t$.fn.thePlugin = () => {\n\t\t\t\tconsole.log('inside plugin');\n\t\t\t}\n\t\t\tconsole.log('pluging added');\n\t\t}\n\t})(jQuery);\n\n\tjQuery.fn.thePlugin();\n\t--------------------------------","points":30,"extras":"","systemWhenCreated":"2020-09-27 09:18:10","systemWhoCreated":"systemUnknown"},{"id":224,"category":"JavaScript","title":"Plain vanilla web page to add users to list","body":"- index.html\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>module_history_001</title>\n\t</head>\n\t<body>\n\t\t<h1>Users</h1>\n\t\t<ul id=\"users\"></ul>\n\t\t<input type=\"text\" id=\"newUser\" placeholder=\"new user\">\n\t\t<button id=\"addUser\">Add user</button>\n\t\t<script src=\"users.js\"></script>\n\t\t<script src=\"dom.js\"></script>\n\t</body>\n\t</html>\n\t--------------------------------\n- users.js\n\t--------------------------------\n\tvar users = ['Jim', 'John', 'Joe'];\n\n\tfunction getUsers() {\n\t\treturn users;\n\t}\n\t--------------------------------\n- dom.js\n\t--------------------------------\n\tfunction addUserToDOM(name) {\n\t\tvar elemLi = document.createElement('li');\n\t\tvar elemText = document.createTextNode(name);\n\t\telemLi.append(elemText);\n\n\t\tdocument.getElementById('users').appendChild(elemLi);\n\t}\n\n\tdocument.getElementById('addUser').addEventListener('click', function () {\n\t\tvar newUser = document.getElementById('newUser');\n\t\taddUserToDOM(newUser.value);\n\t\tnewUser.value = '';\n\t});\n\n\tvar users = window.getUsers();\n\tfor (var i = 0; i < users.length; i++) {\n\t\taddUserToDOM(users[i]);\n\t}\n\t--------------------------------","points":80,"extras":"","systemWhenCreated":"2020-09-27 13:34:14","systemWhoCreated":"systemUnknown"},{"id":225,"category":"JavaScript","title":"How to use ES6 modules in Node","body":"- `npm i esm`\n- app.mjs\n\t--------------------------------\n\timport * as qmat from './qmat.mjs';\n\n\tconsole.log(qmat.add(3, 4));\n\tconsole.log(qmat.subtract(3, 5));\n\tconsole.log(qmat.getRandomNumbers(5,1,10));\n\t--------------------------------\n- qmat.mjs\n\t----------------------------------\n\texport function subtract(a, b) { return a - b };\n\nexport function add(a, b) { return a + b; }\n\nexport function getRandomNumbers(total, begin, end) {\n\tconst nums = [];\n\tfor (let x = 1; x <= total; x++) {\n\t\tnums.push(Math.floor((Math.random() * end) + begin));\n\t}\n\treturn nums;\n}\n\t----------------------------------\n- `node -r esm app.mjs`","points":30,"extras":"","systemWhenCreated":"2020-09-27 14:07:49","systemWhoCreated":"systemUnknown"},{"id":226,"category":"JavaScript","title":"Simple example of ES6 JavaScript modules without Webpack","body":"- index.html\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>module_history_001</title>\n\t</head>\n\t<body>\n\t\t<h1>Users</h1>\n\t\t<ul id=\"users\"></ul>\n\t\t<input type=\"text\" id=\"newUser\" placeholder=\"new user\">\n\t\t<button id=\"addUser\">Add user</button>\n\t\t<script src=\"dom.js\" type=\"module\"></script>\n\t</body>\n\t</html>\n\t--------------------------------\n- users.js\n\t------------------------\n\tvar users = ['Jim', 'John', 'Joe'];\n\n\texport default function getUsers() {\n\t\treturn users;\n\t}\n\t------------------------\n- dom.js\n\t--------------------------------\n\timport getUsers from './users.js';\n\n\tfunction addUserToDOM(name) {\n\t\tvar elemLi = document.createElement('li');\n\t\tvar elemText = document.createTextNode(name);\n\t\telemLi.append(elemText);\n\n\t\tdocument.getElementById('users').appendChild(elemLi);\n\t}\n\n\tdocument.getElementById('addUser').addEventListener('click', function () {\n\t\tvar newUser = document.getElementById('newUser');\n\t\taddUserToDOM(newUser.value);\n\t\tnewUser.value = '';\n\t});\n\n\tvar users = getUsers();\n\tfor (var i = 0; i < users.length; i++) {\n\t\taddUserToDOM(users[i]);\n\t}\n\t--------------------------------","points":90,"extras":"","systemWhenCreated":"2020-09-27 15:42:09","systemWhoCreated":"systemUnknown"},{"id":227,"category":"ES6","title":"The difference between for..in, for..of, and forEach()","body":"- note that you can technically also do a for..in on an array, but you get the keys (not very useful)\n\t--------------------------------\n\t// for-in for parameters\n\tconst person = {\n\t\tid: 34,\n\t\tfirstName: \"George\",\n\t\tlastName: \"Ramones\",\n\t}\n\tfor (const key in person) {\n\t\tconst value = person[key];\n\t\tconsole.log(`${key} = ${value}`);\n\t}\n\n\t// for-of for arrays\n\tconst colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple'];\n\tfor (const color of colors) {\n\t\tconsole.log(color);\n\t}\n\n\t// forEach for arrays with index\n\tcolors.forEach((color, index) => console.log(`${index} = ${color}`));\n\t--------------------------------","points":40,"extras":"","systemWhenCreated":"2020-09-28 13:21:37","systemWhoCreated":"systemUnknown"},{"id":228,"category":"ES6","title":"Use of ES6 Symbol","body":"- to attach a unique identifier key to a collection of objects so that you are guaranteed that this identifier key does not conflict, these are also semi-private (won't appear in for..in on parameters, etc.)\n\t--------------------------------\n\tconst courses = [\n\t\t{\n\t\t\tid: 34,\n\t\t\ttitle: \"ECMAScript 6 Essentials\",\n\t\t\ttopics: [\n\t\t\t\t'const/let declaration',\n\t\t\t\t'default parameters',\n\t\t\t\t'arrow functions',\n\t\t\t\t'string literals',\n\t\t\t\t'object literals',\n\t\t\t\t'spread operators',\n\t\t\t\t'rest parameters'\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tid: 543,\n\t\t\ttitle: \"Node.js Basics\",\n\t\t\ttopics: [\n\t\t\t\t'installation',\n\t\t\t\t'file access',\n\t\t\t\t'Express',\n\t\t\t\t'Socket.io',\n\t\t\t\t'Cookies'\n\t\t\t]\n\t\t}\n\t];\n\tcourses.forEach((course, index) => {\n\t\tconst id = Symbol();\n\t\tcourse[id] = index;\n\t\tconsole.log('id: ' + course.id);\n\t\tconsole.log('unique id: ' + course[id]);\n\t});\n\t--------------------------------","points":20,"extras":"","systemWhenCreated":"2020-09-28 16:00:01","systemWhoCreated":"systemUnknown"},{"id":229,"category":"ES6","title":"Simple of loading array of objects into a Map object","body":"- you can see [more info on maps here](comparisons?id=13)\n\t--------------------------------\n\tconst employees = new Map();\n\t\tfor (const employee of getEmployees()) {\n\t\t\temployees.set(employee.employeeID, employee);\n\t\t}\n\n\t\t// iterate\n\t\tfor (const employee of employees) {\n\t\t\tconsole.log(employee[0]);\n\t\t}\n\n\t\t// iterate forEach\n\t\temployees.forEach((employee, key) => {\n\t\t\tconsole.log(`${key} = ${employee.lastName}`);\n\t\t})\n\n\t\t// values\n\t\tempObjs = employees.values();\n\t\tlet result = empObjs.next();\n\t\twhile (!result.done) {\n\t\t\tconsole.log(result.value.firstName);\n\t\t\tresult = empObjs.next();\n\t\t}\n\t\tconsole.log(result);\n\n\t\t// Map.get()\n\t\tconsole.log(employees.get(6).lastName);\n\n\t\t// Map.delete()\n\t\tconsole.log(employees.size);\n\t\temployees.delete(6);\n\t\tconsole.log(employees.size);\n\n\n\t\tfunction getEmployees() {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 2,\n\t\t\t\t\t\"lastName\": \"Fuller\",\n\t\t\t\t\t\"firstName\": \"Andrew\",\n\t\t\t\t\t\"title\": \"Vice President Sales\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Dr.\",\n\t\t\t\t\t\"birthDate\": \"1952-02-19 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1992-08-14 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"908 W. Capital Way\",\n\t\t\t\t\t\t\"city\": \"Tacoma\",\n\t\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\t\"postalCode\": 98401,\n\t\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\t\"phone\": \"(206) 555-9482\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative was promoted to sales manager\",\n\t\t\t\t\t\"reportsTo\": \"NULL\",\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t1730,\n\t\t\t\t\t\t1833,\n\t\t\t\t\t\t2116,\n\t\t\t\t\t\t2139,\n\t\t\t\t\t\t2184,\n\t\t\t\t\t\t40222,\n\t\t\t\t\t\t1581\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 5,\n\t\t\t\t\t\"lastName\": \"Buchanan\",\n\t\t\t\t\t\"firstName\": \"Steven\",\n\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\t\"birthDate\": \"1955-03-04 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1993-10-17 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"14 Garrett Hill\",\n\t\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\t\"postalCode\": \"SW1 8JR\",\n\t\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\t\"phone\": \"(71) 555-4848\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Steven Buchanan graduated from St. Andrews University in Scotland with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992 he spent 6 months in an orientation program at the Seattle office.\",\n\t\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t2903,\n\t\t\t\t\t\t7960,\n\t\t\t\t\t\t8837,\n\t\t\t\t\t\t10019,\n\t\t\t\t\t\t10038,\n\t\t\t\t\t\t11747,\n\t\t\t\t\t\t14450\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 1,\n\t\t\t\t\t\"lastName\": \"Davolio\",\n\t\t\t\t\t\"firstName\": \"Nancy\",\n\t\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\t\"birthDate\": \"1948-12-08 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1992-05-01 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"507 20th Ave. E. Apt. 2A\",\n\t\t\t\t\t\t\"city\": \"Seattle\",\n\t\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\t\"postalCode\": 98122,\n\t\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\t\"phone\": \"(206) 555-9857\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Education includes a BA in psychology from Colorado State University in 1970.  She also completed The Art of the Cold Call.  Nancy is a member of Toastmasters International.\",\n\t\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t6897,\n\t\t\t\t\t\t19713\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 3,\n\t\t\t\t\t\"lastName\": \"Leverling\",\n\t\t\t\t\t\"firstName\": \"Janet\",\n\t\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\t\"birthDate\": \"1963-08-30 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1992-04-01 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"722 Moss Bay Blvd.\",\n\t\t\t\t\t\t\"city\": \"Kirkland\",\n\t\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\t\"postalCode\": 98033,\n\t\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\t\"phone\": \"(206) 555-3412\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Janet has a BS degree in chemistry from Boston College (1984). She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.\",\n\t\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t30346,\n\t\t\t\t\t\t31406,\n\t\t\t\t\t\t32859,\n\t\t\t\t\t\t33607\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 4,\n\t\t\t\t\t\"lastName\": \"Peacock\",\n\t\t\t\t\t\"firstName\": \"Margaret\",\n\t\t\t\t\t\"title\": \"\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Mrs.\",\n\t\t\t\t\t\"birthDate\": \"1937-09-19 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1993-05-03 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"4110 Old Redmond Rd.\",\n\t\t\t\t\t\t\"city\": \"Redmond\",\n\t\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\t\"postalCode\": 98052,\n\t\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\t\"phone\": \"(206) 555-8122\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Margaret holds a BA in English literature from Concordia College (1958) and an MA from the American Institute of Culinary Arts (1966).  She was assigned to the London office temporarily from July through November 1992.\",\n\t\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t20852,\n\t\t\t\t\t\t27403,\n\t\t\t\t\t\t27511\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 6,\n\t\t\t\t\t\"lastName\": \"Suyama\",\n\t\t\t\t\t\"firstName\": \"Michael\",\n\t\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\t\"birthDate\": \"1963-07-02 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1993-10-17 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"Coventry House Miner Rd.\",\n\t\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\t\"postalCode\": \"EC2 7JR\",\n\t\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\t\"phone\": \"(71) 555-7773\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Michael is a graduate of Sussex University (MA Economics 1983) and the University of California at Los Angeles (MBA marketing 1986).  He has also taken the courses Multi-Cultural Selling and Time Management for the Sales Professional.\",\n\t\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t85014,\n\t\t\t\t\t\t85251,\n\t\t\t\t\t\t98004,\n\t\t\t\t\t\t98104,\n\t\t\t\t\t\t98052\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 7,\n\t\t\t\t\t\"lastName\": \"King\",\n\t\t\t\t\t\"firstName\": \"Robert\",\n\t\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Mr.\",\n\t\t\t\t\t\"birthDate\": \"1960-05-29 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1994-01-02 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"Edgeham Hollow Winchester Way\",\n\t\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\t\"postalCode\": \"RG1 9SP\",\n\t\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\t\"phone\": \"(71) 555-5598\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Robert King served in the Peace Corps and traveled extensively before completing his degree in English at the University of Michigan in 1992 the year he joined the company.\",\n\t\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t60601,\n\t\t\t\t\t\t80202,\n\t\t\t\t\t\t80909,\n\t\t\t\t\t\t90405,\n\t\t\t\t\t\t94025,\n\t\t\t\t\t\t94105,\n\t\t\t\t\t\t95008,\n\t\t\t\t\t\t95054,\n\t\t\t\t\t\t95060,\n\t\t\t\t\t\t60179\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 8,\n\t\t\t\t\t\"lastName\": \"Callahan\",\n\t\t\t\t\t\"firstName\": \"Laura\",\n\t\t\t\t\t\"title\": \"Inside Sales Coordinator\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\t\"birthDate\": \"1958-01-09 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1994-03-05 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"4726 11th Ave. N.E.\",\n\t\t\t\t\t\t\"city\": \"Seattle\",\n\t\t\t\t\t\t\"region\": \"WA\",\n\t\t\t\t\t\t\"postalCode\": 98105,\n\t\t\t\t\t\t\"country\": \"USA\",\n\t\t\t\t\t\t\"phone\": \"(206) 555-1189\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Laura received a BA in psychology from the University of Washington.  She has also completed a course in business French.  She reads and writes French.\",\n\t\t\t\t\t\"reportsTo\": 2,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t19428,\n\t\t\t\t\t\t44122,\n\t\t\t\t\t\t45839,\n\t\t\t\t\t\t53404\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"employeeID\": 9,\n\t\t\t\t\t\"lastName\": \"Dodsworth\",\n\t\t\t\t\t\"firstName\": \"Anne\",\n\t\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\t\"titleOfCourtesy\": \"Ms.\",\n\t\t\t\t\t\"birthDate\": \"1966-01-27 00:00:00.000\",\n\t\t\t\t\t\"hireDate\": \"1994-11-15 00:00:00.000\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"7 Houndstooth Rd.\",\n\t\t\t\t\t\t\"city\": \"London\",\n\t\t\t\t\t\t\"region\": \"NULL\",\n\t\t\t\t\t\t\"postalCode\": \"WG2 7LT\",\n\t\t\t\t\t\t\"country\": \"UK\",\n\t\t\t\t\t\t\"phone\": \"(71) 555-4444\"\n\t\t\t\t\t},\n\t\t\t\t\t\"notes\": \"Anne has a BA degree in English from St. Lawrence College.  She is fluent in French and German.\",\n\t\t\t\t\t\"reportsTo\": 5,\n\t\t\t\t\t\"territoryIDs\": [\n\t\t\t\t\t\t3049,\n\t\t\t\t\t\t3801,\n\t\t\t\t\t\t48075,\n\t\t\t\t\t\t48084,\n\t\t\t\t\t\t48304,\n\t\t\t\t\t\t55113,\n\t\t\t\t\t\t55439\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t--------------------------------","points":50,"extras":"","systemWhenCreated":"2020-09-28 17:04:31","systemWhoCreated":"systemUnknown"},{"id":230,"category":"TypeScript","title":"Example of TypeScript interfaces","body":"- note that `get front()` satisfies the interface's `front: string;`\n\t--------------------------------\n\tinterface IFlashcard {\n\t\tfront: string;\n\t\tback: string;\n\t\tdisplayAsFlashcard(): void;\n\t}\n\n\tclass Flashcard implements IFlashcard {\n\t\tpublic front: string = '';\n\t\tpublic back: string = '';\n\n\t\tconstructor(front: string, back: string) {\n\t\t\tthis.front = front;\n\t\t\tthis.back = back;\n\t\t}\n\n\t\tdisplayAsFlashcard() {\n\t\t\treturn this.front + ' / ' + this.back;\n\t\t}\n\t}\n\n\tclass Book implements IFlashcard {\n\t\tpublic title: string = '';\n\t\tpublic description: string = '';\n\t\tpublic author: string = '';\n\n\t\tconstructor(title: string, description: string, author: string) {\n\t\t\tthis.title = title;\n\t\t\tthis.description = description;\n\t\t\tthis.author = author;\n\t\t}\n\n\t\tget front() {\n\t\t\treturn this.title;\n\t\t}\n\n\t\tget back() {\n\t\t\treturn this.author;\n\t\t}\n\n\t\tdisplayAsFlashcard() {\n\t\t\treturn 'BOOK: ' + this.front + ' / AUTHOR: ' + this.back;\n\t\t}\n\t}\n\t--------------------------------","points":60,"extras":"","systemWhenCreated":"2020-09-28 22:08:20","systemWhoCreated":"systemUnknown"},{"id":232,"category":"VBA","title":"How to create a simple VBA program that changes text when you click a button","body":"- open developer tools:\n\t- right-click on menu, \"Menüband anpassen\"\n\t- Entwicklertools, OK\n- save as: **test.xlsm ** (\"m\" for macros)\n- Developer Tools, [[Visual Basic]]\n\t- Insert, Module\n\t- rename in settings window: main\n\t- enter code\n\t\t---------------------\n\t\tSub TurnOn()\n\t\t\tRange(\"B1\").Value = \"On\"\n\t\tEnd Sub\n\n\t\tSub ChangeTextBack()\n\t\tRange(\"B1\").Value = \"Off\"\n\t\tEnd Sub\n\t\t---------------------\n- Developer Tools, [[Insert]], button\n\t- connect to ChangeText()\n- Developer Tools, [[Insert]], button\n\t- connect to ChangeTextBack()","points":100,"extras":"$rank=4.9343","systemWhenCreated":"2020-09-29 15:23:55","systemWhoCreated":"systemUnknown"},{"id":233,"category":"regex","title":"Switch names around first/last","body":"- tested in Notepad++ and Google Sheets\n- you have a list of names\n\t--------------------------------\n\tTaylor, James\n\tAnderson, Mary\n\tWharton, Robert\n\tNettles, Andy\n\t--------------------------------\n- search: `^(.*), (.*?)$`\n- replace: `Name: $2 $1`","points":30,"extras":"$rank=4.9","systemWhenCreated":"2020-09-29 23:39:39","systemWhoCreated":"systemUnknown"},{"id":234,"category":"Google Docs","title":"How to define and use styles in Google Docs","body":"- ##thestoryconflusdf\n- write text with style \"title\" and \"normal\" paragaphs\n- change style of title and save\n- change style of normal and save\n- ##mystoryokok\n- options: save as my default styles","points":50,"extras":"$rank=4.9757","systemWhenCreated":"2020-09-30 00:36:40","systemWhoCreated":"systemUnknown"},{"id":235,"category":"Wordpress","title":"Install Wordpress site running at A2Hosting","body":"- cPanel\n\t- SOFTACULOUS APPS INSTALLER\n\t- WordPress A2 Optimized\n\t- Install > Custom Install\n\t\t- fill in information\n\t- create\n\t\t- progress bar took about 5 minutes, stayed at 95% for about 2 minutes\n\t- message\n\t\t-----------------------------\n\t\tWordPress - A2 Optimized has been successfully installed at : http://tanguay.info/blog\n\t\tAdministrative URL : http://tanguay.info/blog/?ilwv\n\t\t-----------------------------","points":70,"extras":"$rank=4.9","systemWhenCreated":"2020-09-30 11:21:53","systemWhoCreated":"systemUnknown"},{"id":236,"category":"Google Docs","title":"How to use outline mode to navigate easier","body":"- make document with Title, Header 1 and Normal\n- view > show document outline\n- add more headers, show updating in real time\n- add underlined and bold\n- delete a Header 1 (on side)\n\t- add it again","points":30,"extras":"$rank=4.9","systemWhenCreated":"2020-09-30 15:45:35","systemWhoCreated":"systemUnknown"},{"id":237,"category":"Google Docs","title":"Add more fonts","body":"- fonts\n- trending\n- handwriting\n- serif, sans serif","points":20,"extras":"$rank=4.9","systemWhenCreated":"2020-09-30 15:57:02","systemWhoCreated":"systemUnknown"},{"id":238,"category":"Google Docs","title":"Make a table of contents for your document","body":"- create document with title, heading 1, heading 2\n- insert > table of contents > page numbers (other ones if you only have e.g. two pages)\n- change, reformat\n- make links back to top with bookmarks\n\t- (back to top)","points":40,"extras":"$rank=4.9","systemWhenCreated":"2020-09-30 17:42:11","systemWhoCreated":"systemUnknown"},{"id":239,"category":"Google Docs","title":"All styles same except first","body":"- in CSS it works \n\t- http://localhost:29900/howtos?id=3\n- but in Google Docs\n\t- style all\n\t- change first manually","points":20,"extras":"$rank=4.9","systemWhenCreated":"2020-09-30 17:46:15","systemWhoCreated":"systemUnknown"},{"id":240,"category":"Google Sheets","title":"Import a JSON URL to Google Sheets","body":"- import from web\n\t- create Google Sheet\n\t- *Tools > Script editor*\n\t- delete code content\n\t- replace with [this code](https://gist.githubusercontent.com/paulgambill/cacd19da95a1421d3164/raw/047b04a1c321b697533adad5828e6df8748b5e54/import_json_appsscript.js)\n\t- rename sheet `ImportJSON`\n\t- close code, go back to Google Sheet\n\t- goto [JSON online examples](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json)\n\t- in A1 type e.g. =ImportJSON(\"https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/customers.json\")\n\t- in left-top corner, copy\n\t- in left-top corner, paste special, values only\n- export from database\n\t- sqlite\n\t- *File > Export > Table(s) to JSON*\n\t- creates *flashcards.json* and *howtos.json*\n\t- upload to website\n- import from website\n\t- goto: https://tanguay.info/data\n\t- load both *flashcards* and *howtos* in separate worksheets","points":50,"extras":"$rank=4.9454","systemWhenCreated":"2020-10-01 00:36:11","systemWhoCreated":"systemUnknown"},{"id":241,"category":"Excel","title":"Import a Database-exported JSON file to worksheet","body":"- export JSON file from Database\n\t- e.g. DB Browser for SQLite\n\t- *File > Export > File to JSON*\n\t- exports to e.g. `flashcards.json`\n- in Excel\n\t- *Data > New Query > From File > From Text*\n\t- navigate to directory with JSON file\n\t- change to `*.*` to see it\n\t- select JSON file\n\t- [[Convert to table]]\n\t- [[OK]]\n\t- click on the two-arrow button##twoarrorbuttonskj\n\t- choose the fields you want\n- query the data\n\t- click on down arrow\n\t- search","points":70,"extras":"$rank=4.898723","systemWhenCreated":"2020-10-01 12:01:56","systemWhoCreated":"systemUnknown"},{"id":242,"category":"Google Scripts","title":"How to write a Google Apps script","body":"- set up scripting\n\t- settings\n\t- Manage Apps\n\t- connect apps to drive\n\t- search for: `script`\n\t- connect more apps\n- *New > More > Google Apps Script*\n- name file: `FirstTest`\n- replace code:\n\t----------------------\n\tfunction myFunction() {\n\t  const test = \"hello\";\n\t  Logger.log(test);\n\n\t  const employee = {\n\t\tname: \"Jim\",\n\t\tscore: 34\n\t  }\n\t  Logger.log(employee);\n\t}\n\t----------------------\n- *View > Logs*\n- debug\n\t- set debug points\n\t- step over\n- *File > New > Script file*: `Utils.gs`\n\t---------------------\n\tfunction getMessage() {\n\t\treturn \"Message from utils\";\n}\n\t---------------------\n- change Code.gs:\n\t----------------------------\n\tconst test = getMessage();\n\t----------------------------\n- note all functions in any file are global","points":20,"extras":"$rank=4.9","systemWhenCreated":"2020-10-01 14:12:38","systemWhoCreated":"systemUnknown"},{"id":243,"category":"Google Sheets","title":"Use simple formulas: SUM and AVERAGE","body":"- open sheet: [yearly revenue example](https://docs.google.com/spreadsheets/d/1EDI-B_Yfr5FrvUjOKNEC-lLbW9zwfSXn/edit#gid=964685063) \n- enter `=SUM(B4:B5)`\n- enter `=AVERAGE(B4:B5)`","points":20,"extras":"$rank=4.9","systemWhenCreated":"2020-10-02 11:56:46","systemWhoCreated":"systemUnknown"},{"id":244,"category":"Google Sheets","title":"Automatically translate a vocabulary list","body":"- in A-column type list of works, e.g.\n\t- ENGLISH\n\t- yearly revenue\n\t- liability\n\t- expense\n\t- cash flow\n\t- profit and loss\n- make a GERMAN and FRENCH column\n- do German column\n\t- `=GOOGLETRANSLATOR(A1, \"en\", \"de\")` and drag down past list\n\t- you will get errors\n\t- fix: `=IF(ISBLANK(A2),\"\",GOOGLETRANSLATE(A2, \"en\", \"de\"))`\n- do French column\n\t- `=IF(ISBLANK(A2),\"\",GOOGLETRANSLATE(A2, \"en\", \"de\"))`","points":30,"extras":"$rank=4.999999999","systemWhenCreated":"2020-10-02 13:48:34","systemWhoCreated":"systemUnknown"},{"id":245,"category":"Google Sheets","title":"Understand relative and absolute references in cells","body":"- [Growth-Rate Google sheet](https://docs.google.com/spreadsheets/d/1AsZsDaPwF1rq-GstDL7UmUwnaqQzzgZ5/edit#gid=2075471117)\n- show pull-down, smart-copy\n\t- create row of years 10 years in future: `=A3 + 10`\n\t\t- pull down\n\t\t- erase\n- show more complex pull-down, smart-copy\n\t- for 2018, enter: `=B2 * (1+B1)`\n\t- pull down, show error\n\t- fix error: `$B$1` (or [[F4]])\n- also show that double-click works instead of pull-down\n- show why this is useful: change 7% to 8% etc.\n- how to show formulas:\n\t- *View > Show Formulae*\n\t- also with single quote in front of pasted algorithm\n- how to make a hard-copy of the formula results\n\t- select\n\t- [[CTRL-C]]\n\t- click where you want to paste\n\t- *Edit > Paste special > Paste values only*","points":25,"extras":"$rank=4.923","systemWhenCreated":"2020-10-02 14:57:53","systemWhoCreated":"systemUnknown"},{"id":246,"category":"Google Sheets","title":"How to make named range","body":"- load [Google sheet](https://docs.google.com/spreadsheets/d/10Uryq9IPGVwb9MB-mY2VdkP-mLCQMY3N/edit#gid=1573045487)\n- create named range out of data in column C\n\t- select\n\t- *Data > Named ranges*\n\t- call it `YearlyRevenue`\n- make sum: `=SUM(YearlyRevenue)`\n\t- quiz: why is it called *Cities!C2:C13*\n- edit named range\n\t- expand to *C999*\n\t- show the little grid icon\n- delete named range\n\t- show that it still shows value but no longer value\n\t- fix with manual range","points":25,"extras":"$rank=4.832","systemWhenCreated":"2020-10-02 15:25:12","systemWhoCreated":"systemUnknown"},{"id":247,"category":"SQLite","title":"How to get sample data in SQLite form","body":"- go to [this GitHub account](https://github.com/jpwhite3/northwind-SQLite3/blob/master/Northwind_large.sqlite.zip)\n- download the zip file\n- unpack\n- open in DB Browser for SQLite: https://sqlitebrowser.org","points":30,"extras":"$rank=4.55","systemWhenCreated":"2020-10-02 16:42:28","systemWhoCreated":"systemUnknown"},{"id":248,"category":"Google Sheets","title":"How to import data from databases, analyze and publish to web","body":"- output data from database to CSV file\n\t- get sample data from [SQLite database](https://github.com/jpwhite3/northwind-SQLite3/blob/master/Northwind_large.sqlite.zip)\n\t- download the zip file\n\t- unpack\n\t- open in DB Browser for SQLite: https://sqlitebrowser.org\n\t- rightclick on *Customer > Export to CSV file*: customer.csv\n- examine file\n\t- look at file in Notepad++\n\t\t- notice non-English characters are correct (UTF-8)\n\t- load into Excel\n\t\t- notice that double-click sadly doesn't work\n\t\t- so open blank Excel sheet##onthapariter\n\t\t\t- *New query > from file > from CSV file*\n\t\t\t- edit\n\t\t\t- choose first line as headers\n\t\t\t- notice non-English characters are broken: *24, place KlÃ©ber*\n\t\t\t\t- in Notepad++, convert the file to UTF-8 BOM\n- in Google Sheets\n\t- make new sheet\n\t- *File > Import > Upload*\n\t- drag file in (without BOM)\n\t\t- *Replace current sheet*\n\t\t- [[Import Data]]\n\t- note that Google Drive has no problem with UTF-8 without BOM\n\t\t- (it also has no problem with UTF-8 BOM)\n- analyze sheet\n\t- make header line bold/green\n\t- *Data > Create a filter*\n\t- show only *Western Europe*\n\t- sort by country to count\n- create selection on new sheet\n\t- remove filter\n\t- mark some lines with color\n\t- filter by color\n\t- copy to new sheet (paste special, only values)\n- publish to web\n\t- fix both sheets so they look the way you want (add notes)\n\t- *File > Publish to web*\n\t- view in various browsers, on smart phone","points":100,"extras":"$rank=4.8338","systemWhenCreated":"2020-10-02 17:14:29","systemWhoCreated":"systemUnknown"},{"id":249,"category":"Google Sheets","title":"How to use and calculate dates and date duration","body":"- make new Google Sheet\n- change to Germany\n\t- *File > Spreadsheet settings > Germany*\n- make headers: *Date\tFull Date\tFile Name\tDays till end of year*\n- date column\n\t- enter `10.02.2020` and drag down ten cells\n- full date column\n\t- `=CONCATENATE(TEXT(A2; \"dddd\"); \", \"; DAY(A2); \" \"; TEXT(A2; \"mmmm\"))`\n\t- show: `ddd` and `mmm`\n- file name column\n\t- `=CONCATENATE(\"Report_\"; TEXT(A2; \"yyyy-mm-dd\"); \".txt\")`\n- days till end of year column\n\t- make sheet called \"data\"\n\t\t- enter `31.12.2020` in A1\n\t- `=(goto cell) - A2`\n\t- [[F4]] to put in $$\n\t- NOTE: you can also just do this: `=DAYS(\"31.12.2020\";A2)`\n- highlight today\n\t- select column\n\t- *Format > Conditional Formatting*\n\t- if date is today\n- de-highlight weekends\n\t- select column\n\t- *Format > Conditional Formatting*\n\t- if text contains \"Samstag\" or \"Sonntag\"\n- highlight Monday report files\n\t- *Custom Formula*\n\t- `=COUNTIF(B2; \"*Montag*\")`","points":100,"extras":"$rank=4.923","systemWhenCreated":"2020-10-03 01:04:13","systemWhoCreated":"systemUnknown"},{"id":250,"category":"Google Sheets","title":"Calculate times and time duration","body":"- go to [Google Sheet: Times](https://docs.google.com/spreadsheets/d/1oRbPoB0NGTRG62_h9tMT32o_7D6OfRUPlATR7w10IVs/edit#gid=173756615)\n- show all formulas\n- make chart","points":30,"extras":"$rank=4.9","systemWhenCreated":"2020-10-03 01:18:30","systemWhoCreated":"systemUnknown"},{"id":251,"category":"Excel VBA","title":"How to provide real-time functionality in an Excel file","body":"- description\n\t- This code shows you how to program real time events into Excel. I used this to build a little \"observer\" file which constantly monitored a directory and sent an e-mail when a certain file was present. In this way your Excel file can play the part of a Windows service, i.e. running on some extra, unused machine on a network. Another interesting use for this is be able to give your Excel user live information, i.e. by checking the database, the file system, the date/time, or perhaps webservices. Interestingly, the updates happen silently in the background so that the user is not interrupted at all, can use his Excel file as usual all the while cells in his Excel file are being observed/updated by this service. \n- open blank Excel sheet\n- save as `MainObserver.xlsm`\n- [[ALT-F11]]\n- for all instructions below, make sure you work in the VBAProject *MainObserver.xlsm* and not *PERSONAL.XLSB*##dontPersonalXlsb\n- double-click *ThisWorkbook*, copy in this code:\n\t-----------------------\n\tPrivate Sub Workbook_Open()\n\t\tqexc_Observer\n\tEnd Sub\n\t-----------------------\n- create Module1 `qexc` and save this code in it:\n\t------------\n\tSub qexc_Observer()\n\n\t\t'declarations\n\t\tDim intHours As Integer\n\t\tDim intMinutes As Integer\n\t\tDim intSectonds As Integer\n\n\t\t'config\n\t\tintHours = 0\n\t\tintMinutes = 0\n\t\tintSeconds = 1\n\n\t\t'do action that should be performed regularly\n\t\ttool_ObserverAction\n\n\t\t'observe again regularly\n\t\tApplication.OnTime Now + TimeSerial(intHours, intMinutes, intSeconds), \"qexc_Observer\"\n\n\tEnd Sub\n\t----------------\n- create a second module called `tools` and save this code in it:\n\t-----------------\n\tSub tool_ObserverAction()\n\t\tSheets(\"Main\").Range(\"A1\").Value = Time\n\tEnd Sub\n\t-----------------\n- [[ALT-F11]]\n- rename worksheet to `Main`\n- close and save\n- open and you will see the time ticking in A1","points":150,"extras":"$rank=4.8933","systemWhenCreated":"2020-10-03 10:42:51","systemWhoCreated":"systemUnknown"},{"id":252,"category":"Excel VBA","title":"Create button that takes user to another worksheet","body":"- in VBA editor (ALT-F11)\n\t- in VBAProject (theFileName.xslm)\n\t\t- ThisWorkbook\n\t\t\t-----------------------\n\t\t\tPublic Sub GotoWorksheet(theWorksheet As String)\n\t\t\t\tSheets(theWorksheet).Activate\n\t\t\t\tSheets(theWorksheet).Range(\"A1\").Select\n\t\t\tEnd Sub\n\t\t\t-----------------------\n- Excel\n\t- rename first worksheet \"Main\"\n\t- create second worksheet \"Reports\"\n\t- on Main, make button\n\t\t- right-click button, *Assign macro*\n\t- *GotoWorksheet* won't be listed\n\t- type in: `'ThisWorkbook.GotoWorksheet(\"Reports\")'`\n\t- [[OK]]","points":30,"extras":"$rank=4.789","systemWhenCreated":"2020-10-05 13:58:46","systemWhoCreated":"systemUnknown"},{"id":253,"category":"Excel VBA","title":"How to create a button that pops up a window with buttons","body":"- VBA Editor\n\t- create UserForm\n\t- add buttons: Clear, OK\n\t- add interaction, e.g.\n\t\t-----------------------------\n\t\tPrivate Sub ButtonShowInfo_Click()\n\t\t\tLabelMessage.Caption = Main.Range(\"B2\").Value\n\t\t\tMe.Caption = \"Information\"\n\t\t\tMsgBox \"You clicked OK.\", vbInformation\n\t\t\tUnload Me\n\t\tEnd Sub\n\n\t\tPrivate Sub cmdCancel_Click()\n\t\t\tUnload Me\n\t\tEnd Sub\n\n\t\tPrivate Sub UserForm_Initialize()\n\t\t\tMe.Caption = \"Information (\" & Time() & \")\"\n\t\tEnd Sub\n\t\t-----------------------------\n\t- name: frmInfo\n- Excel\n\t- Developer Panel\n\t- Insert\n\t- Active-X controls\n\t- draw button\n\t- settings\n\t\t- name: `cmdGetInfo`\n\t\t- caption: `Get Info`\n\t- double-click\n\t\t- VBA Editor\n\t\t- frmInfo.Show\n- Excel\n\t- text Button","points":50,"extras":"$rank=4.85","systemWhenCreated":"2020-10-05 15:13:37","systemWhoCreated":"systemUnknown"},{"id":254,"category":"Excel VBA","title":"Put a picture on a user form","body":"- get image in jpg or gif format (not png)\n- VBA Code Editor\n- create user form\n- in tools, click on image icon\n- make enough space for image\n- in properties, click on image and load it\n\t- autosize = true","points":20,"extras":"$rank=4.767","systemWhenCreated":"2020-10-05 16:15:32","systemWhoCreated":"systemUnknown"},{"id":255,"category":"Excel VBA","title":"Add personalized ribbon with two buttons to filter information on sheet, and pops up general information window","body":"- note:\n\t- While it is easy to make ribbon buttons in Excel, note that they will appear in other worksheets, and you will have worksheets calling macros in other worksheets, opening them up first.\n\t- \"I was hoping to make things simpler in my Excel worksheets by replacing my buttons with ribbon commands, but it seems like the ribbon is associated with a user rather than a workbook. I guess it's back to the ugly gray buttons.\"\n\t- Since one can think of few reasons why you would want this to be the case, except for extremely general functionality, you have to solve this if you want to have buttons available in only the current worksheet, see:\n\t\t- https://gregmaxey.com/word_tip_pages/customize_ribbon_main.html\n\t\t- https://andypope.info/vba/ribboneditor_2010.htm\n- create LaunchInfoWindow subroutine\n\t- VBA Editor\n\t- create UserForm *frmInformation*\n\t- create module `General` and add:\n\t\t-------------------------\n\t\tPublic Sub LaunchInfoWindow()\n\t\t\tfrmInformation.Show\n\t\tEnd Sub\n\t\t-------------------------\n- create FilterCostTable subroutine\n\t- Excel worksheet, rename both names \"Main\"\n\t- enter table with headers and years\n\t- VBA Editor\n\t- create in worksheet Main\n\t\t---------------------------\n\t\tSub Multiple_Fields()\n\n\t\t\tDim strAddress As String\n\n\t\t\tstrAddress = ActiveCell.CurrentRegion.Address\n\t\t\tSheets(\"Main\").Activate\n\t\t\tRange(\"A4\").Activate\n\t\t\tSelection.AutoFilter\n\t\t\tActiveSheet.Range(strAddress).AutoFilter Field:=1, Criteria1:=\"2020\"\n\n\t\tEnd Sub\n\t\t---------------------------\n- add buttons in ribbon\n\t- Developer Tools\n\t\t- right-click *customize ribbon*\n\t\t- new ribbon\n\t\t\t- rename \"Personal\"\n\t\t- new group\n\t\t\t- rename \"General\"\n\t\t- left: macros\n\t\t\t- move both macros into group on right\n\t\t\t- rename and give icon\n\t\t\t\t- LaunchInfoWindow = \"Info\"\n\t\t\t\t- FilterCostTable = \"2020\"\n- use buttons\n\t- notice Info will pop up on any worksheet\n\t- notice 2020 goes to sheet and then filters","points":50,"extras":"$rank=3.5","systemWhenCreated":"2020-10-05 16:56:03","systemWhoCreated":"systemUnknown"},{"id":256,"category":"Excel VBA","title":"How to read data into an Excel sheet from an SQLite database","body":"- on Windows 10, download and install sqliteodbc_w64.exe which you can download [here](http://www.ch-werner.de/sqliteodbc)\n- download [DB Browser for SQLite](https://sqlitebrowser.org)\n\t- create *c:\\data\\main.sqlite*\n\t- create table with:\n\t\t----------------------\n\t\tCREATE TABLE \"infos\" (\n\t\t\t\"id\"\tINTEGER NOT NULL,\n\t\t\t\"title\"\tTEXT,\n\t\t\tPRIMARY KEY(\"id\" AUTOINCREMENT)\n\t\t)\n\t\t----------------------\n\t- add two records\n- Excel\n\t- make sheet called \"Main\"\n\t- make sure C16 is free\n\t- Developer tab\n\t- creation mode\n\t- add Active-X button\n\t- properties\n\t\t- name: btnGetData\n\t\t- caption: Get Data\n\t- double-click\n\t\t- insert into *btnGetData_Click*\n\t\t\t--------------------------------------\n\t\t\tDim conn As Object, rst As Object\n\t\t\tDim strSQL As String\n\n\t\t\tSet conn = CreateObject(\"ADODB.Connection\")\n\t\t\tSet rst = CreateObject(\"ADODB.Recordset\")\n\n\t\t\tconn.Open \"DRIVER=SQLite3 ODBC Driver;Database=C:\\data\\main.sqlite\"\n\n\t\t\tstrSQL = \"SELECT * FROM infos\"\n\n\t\t\trst.Open strSQL, conn, 1, 1\n\n\t\t\tWorksheets(\"Main\").Range(\"C16\").CopyFromRecordset rst\n\t\t\trst.Close\n\n\t\t\tSet rst = Nothing: Set conn = Nothing\n\t\t\t--------------------------------------","points":80,"extras":"$rank=4.7897","systemWhenCreated":"2020-10-05 23:04:26","systemWhoCreated":"systemUnknown"},{"id":257,"category":"Excel VBA","title":"Make button that creates an HTML page based on data in worksheet","body":"- make data to read for HTML page\n\t- three text fields from C22 to C24\n- make button\n\t- developer tools\n\t- insert Active-X button\n\t- Name: btnCreateHtmlPage\n\t- Caption: \"Create HTML Page\"\n\t- double-click, enter code: \n\t\t------------------------------\n\t\tPrivate Sub btnCreateHtmlPage_Click()\n\n\t\t\tDim lngFileNumber As Long\n\t\t\tDim rngMain As Range\n\n\t\t\tSet rngMain = Range(\"C22:C24\")\n\t\t\tlngFileNumber = FreeFile()\n\n\t\t\tOpen ThisWorkbook.Path & \"\\test.htm\" For Output As #lngFileNumber\n\n\t\t\tPrint #lngFileNumber, \"<head><body>\"\n\t\t\tPrint #lngFileNumber, \"<h3>This is the data:</h3>\"\n\n\t\t\tPrint #lngFileNumber, \"<ul>\"\n\t\t\tFor Each rngMain In rngMain\n\t\t\t\tPrint #lngFileNumber, \"<li>\" & rngMain.Value & \"</li>\"\n\t\t\tNext\n\t\t\tPrint #lngFileNumber, \"</ul>\"\n\n\t\t\tPrint #lngFileNumber, \"</body></head>\"\n\n\t\t\tClose #lngFileNumber\n\n\t\tEnd Sub\n\t\t------------------------------\n- make it live\n\t- in Visual Studio Code\n\t- right-click on Live Server","points":100,"extras":"$rank=4.943","systemWhenCreated":"2020-10-06 13:52:19","systemWhoCreated":"systemUnknown"},{"id":258,"category":"Excel VBA","title":"Create a button that asks if it should delete a file","body":"- create file in same directory as Excel file: `test.htm`\n- make button\n\t- developer tools\n\t- insert Active-X button\n\t- Name: btnCreateHtmlPage\n\t- Caption: \"Create HTML Page\"\n\t- double-click, enter code: \n\t\t------------------------------\n\t\tPrivate Sub btnDeleteHtmlPage_Click()\n\t\t\tDim pathAndFileName As String\n\n\t\t\tpathAndFileName = ThisWorkbook.Path & \"\\test.htm\"\n\n\t\t\tIf MsgBox(\"Delete web page?\", vbQuestion + vbOKCancel + vbDefaultButton1, \"Delete\") = vbOK Then\n\t\t\t\tKill pathAndFileName\n\t\t\tEnd If\n\t\tEnd Sub\n\t\t------------------------------","points":30,"extras":"","systemWhenCreated":"2020-10-06 14:15:37","systemWhoCreated":"systemUnknown"},{"id":259,"category":"Excel VBA","title":"How to read data out of a text file into an Excel worksheet","body":"- create text file in same directory as your worksheet: data.txt\n\t-----------------------\n\tfirst line\n\tsecond line\n\tthis is the third line\n\t-----------------------\n- make button\n\t- developer tools\n\t- insert Active-X button\n\t- Name: btnReadTextFile\n\t- Caption: \"Read text file\"\n\t- double-click, enter code: \n\t\t------------------------------\n\t\tPrivate Sub btnReadTextFile_Click()\n\n\t\t\tDim lngFileNumber As Long\n\t\t\tDim strContent As String\n\t\t\tDim lngLineNumber As Long\n\n\t\t\tlngFileNumber = FreeFile()\n\t\t\tlngLineNumber = 1\n\n\t\t\tOpen ThisWorkbook.Path & \"\\data.txt\" For Input As #lngFileNumber\n\t\t\tDo Until EOF(lngFileNumber)\n\t\t\t\tInput #lngFileNumber, strContent\n\t\t\t\tWorksheets(\"Main\").Cells(27 + lngLineNumber, 3).Value = strContent\n\t\t\t\tlngLineNumber = lngLineNumber + 1\n\t\t\tLoop\n\n\t\t\tClose #lngFileNumber\n\n\t\tEnd Sub\n\t\t------------------------------","points":90,"extras":"$rank=4.94566","systemWhenCreated":"2020-10-06 15:29:10","systemWhoCreated":"systemUnknown"},{"id":260,"category":"Excel VBA","title":"Display directory listing in UserForm scroll box and in worksheet","body":"- make ActiveX buton\n- make form\n\t- two buttons\n\t\t- btnCancel\n\t\t- btnReadDirectory\n\t- list box\n\t\t- lstDirectoryListing\n- double-click, replace with this code: \n\t-----------------------------------\n\tPrivate Sub btnCancel_Click()\n\t\tUnload Me\n\tEnd Sub\n\n\tPrivate Sub btnReadDirectory_Click()\n\t\tConst strDirectory = \"C:\\edward\\nwo\\excelvba22\"\n\t\tDim strFile As String\n\t\tDim lngRow As Long\n\n\t\tstrFile = Dir(strDirectory & \"\\*.*\")\n\t\tlngRow = 11\n\n\t\tWith Me.lstDirectoryListing\n\t\t\tDo Until strFile = \"\"\n\t\t\t\t.AddItem strFile\n\t\t\t\tWorksheets(\"Main\").Cells(lngRow, 9).Value = strFile\n\t\t\t\tstrFile = Dir()\n\t\t\t\tlngRow = lngRow + 1\n\t\t\tLoop\n\t\t\tMe.Caption = .ListCount & \" Files Found in \" & strDirectory\n\t\tEnd With\n\n\tEnd Sub\n\t-----------------------------------","points":60,"extras":"$rank=4.865","systemWhenCreated":"2020-10-06 16:39:18","systemWhoCreated":"systemUnknown"},{"id":261,"category":"Excel Sheets","title":"How to create and use a Type","body":"- in module named *Types*:\n\t------------------------\n\tType employee\n\t\tFirstName As String\n\t\tLastName As String\n\t\tScore As Integer\n\tEnd Type\n\t------------------------\n- in worksheet, make subroutine:\n\t-----------------------------\n\tSub DemonstrateTypes()\n\t\tDim employee As employee\n\n\t\temployee.FirstName = \"Jim\"\n\t\temployee.LastName = \"Smith\"\n\n\t\tWorksheets(\"oop\").Range(\"A5\").Value = employee.FirstName & \" \" & employee.LastName\n\n\tEnd Sub\n\t-----------------------------","points":30,"extras":"$rank=4.4954","systemWhenCreated":"2020-10-06 23:41:46","systemWhoCreated":"systemUnknown"},{"id":262,"category":"Excel VBA","title":"How to create a new .xlsm file with custom content","body":"- create this subroutine in *ThisWorkbook*:\n\t---------------------\n\tPublic Sub CreateNewExcelFileInDirectory()\n\t\tDim currentPath As String\n\t\tDim pathAndFileName As String\n\t\tDim wbkExtra As Workbook\n\t\tDim mainWorksheet As Worksheet\n\n\t\tSet mainWorksheet = ThisWorkbook.Worksheets(\"Main\")\n\t\tpathAndFileName = currentPath & Range(\"C48\").Value & \".xlsm\"\n\t\tSet wbkExtra = Workbooks.Add()\n\t\twbkExtra.Worksheets(1).Range(\"A1\").Value = mainWorksheet.Range(\"D48\").Value\n\t\twbkExtra.SaveAs pathAndFileName, FileFormat:=xlOpenXMLWorkbookMacroEnabled\n\t\twbkExtra.Close\n\tEnd Sub\n\t---------------------\n- Developer Tools > Insert > Form Button\n- add text in C48 and D48","points":50,"extras":"$rank=4.9111","systemWhenCreated":"2020-10-12 14:59:32","systemWhoCreated":"systemUnknown"},{"id":263,"category":"Access","title":"How to import an SQLite table into Access","body":"- open DB Browser für SQLite\n\t- load database\n\t- right-click table e.g. *flashcards*\n\t- export as CSV file\n\t- field-separator (change to `|`)\n\t- save as e.g. *flashcards.csv*\n- open Access e.g. 2016\n\t- External Data\n\t- Import: Text File\n\t- find file\n\t- specify: `|` as separator\n\t- specify: first line are headers\n\t- specify: primary key as *id*\n\t- finish\n\t- examing and delete error table","points":50,"extras":"$rank=4.9","systemWhenCreated":"2020-10-13 13:24:33","systemWhoCreated":"systemUnknown"},{"id":264,"category":"Access VBA","title":"How to use Domain-functions","body":"- note that in DCount, you need a field as well:\t\n\t---------------------------------------\n\tSub Test()\n\t\tDim lngSum As Long\n\n\t\tDebug.Print DMax(\"rank\", \"flashcards\")\n\t\tDebug.Print DMin(\"rank\", \"flashcards\")\n\t\tDebug.Print DMax(\"rank\", \"flashcards\", \"id < 50\")\n\t\tDebug.Print DSum(\"rank\", \"flashcards\")\n\n\t\tlngSum = DSum(\"rank\", \"flashcards2\", \"rank < 40\")\n\n\t\tDebug.Print lngSum\n\t\tDebug.Print lngSum + 1\n\n\t\tDebug.Print DSum(\"rank\", \"flashcards2\", \"category = 'git'\")\n\t\tDebug.Print DCount(\"rank\", \"flashcards2\", \"id < 1000\")\n\n\tEnd Sub\n\t---------------------------------------","points":30,"extras":"$rank=4.787","systemWhenCreated":"2020-10-13 15:39:10","systemWhoCreated":"systemUnknown"},{"id":265,"category":"Excel VBA","title":"Create sortable, searchable table","body":"- open this CSV file in Excel:\n\t-----------------------------\n\tYear;State;Sales;;;;;\n\t2020;Washington; $12 293 ;;;;;\n\t2019;Arizona; $12 425 ;;;;;\n\t2020;Montana; $13 523 ;;;;;\n\t2020;Idaho; $13 783 ;;;;;\n\t2019;Nevada; $15 965 ;;;;;\t\n\t2019;Idaho; $16 391 ;;;;;\n\t2020;Arizona; $18 565 ;;;;;\n\t2019;California; $26 520 ;;;;;\n\t2020;Oregon; $27 898 ;;;;;\n\t2020;California; $30 631 ;;;;;\n\t2019;Washington; $31 891 ;;;;;\n\t2019;Oregon; $32 876 ;;;;;\n\t2020;Nevada; $35 001 ;;;;;\n\t2019;Montana; $35 100 ;;;;;\n\t-----------------------------\n- put cursor inside and click format as table\n- sort and search","points":30,"extras":"$rank=4.983838","systemWhenCreated":"2020-10-14 00:26:16","systemWhoCreated":"systemUnknown"},{"id":266,"category":"Access VBA","title":"Get number of records in table with Recordset","body":"- note that we use dbOpenDynaset (\"dbOpenDynaset pretty much always works, I use that most always, allows movement back and forth in the recordset.\")\n\t------------------------------\n\tSub GetNumberOfRecordsInTableWithRecordset()\n\t\tDim rcsTests As DAO.Recordset\n\t\tSet rcsTests = CurrentDb.OpenRecordset(\"tblTests\", dbOpenDynaset)\n\t\trcsTests.MoveLast\n\t\tDebug.Print rcsTests.RecordCount\n\t\trcsTests.Close\n\tEnd Sub\n\t------------------------------","points":30,"extras":"$rank=4.76","systemWhenCreated":"2020-10-14 15:16:40","systemWhoCreated":"systemUnknown"},{"id":267,"category":"VBA Access","title":"Loop through table and display fields from each record","body":"- don't forget *MoveNext* or it will hang:\n\t-----------------------------\n\tSub DisplayAllRecords()\n\n\t\tDim rcsTests As DAO.Recordset\n\t\tSet rcsTests = CurrentDb.OpenRecordset(\"SELECT * FROM tblTests WHERE category='git'\", dbOpenDynaset)\n\n\t\tDo While Not rcsTests.EOF\n\t\t\tIf rcsTests.Fields(\"category\") <> \"\" Then\n\t\t\t\tDebug.Print rcsTests.Fields(\"category\") & \"-\" & rcsTests.Fields(\"kind\")\n\t\t\tEnd If\n\t\t\trcsTests.MoveNext\n\t\tLoop\n\n\t\trcsTests.Close\n\tEnd Sub\n\t-----------------------------","points":50,"extras":"$rank=4.934","systemWhenCreated":"2020-10-14 15:32:56","systemWhoCreated":"systemUnknown"},{"id":268,"category":"Access","title":"Use an Excel sheet as a database table in Access","body":"- Excel \n\t- create table with headers and data\n- Access\n\t- External Data\n\t- Excel\n\t- select .xls or .xlsm file\n\t- Create a link (3rd option)\n\t- choose headers","points":50,"extras":"$rank=4.911","systemWhenCreated":"2020-10-14 16:12:58","systemWhoCreated":"systemUnknown"},{"id":269,"category":"Google Sheets","title":"How to create a pivot table","body":"- fill sheet with this JSON: https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/customers.json\n\t- use [these instructions](howtos?id=240)\n- cursor in table > Data > Pivot table\n- rows: country\n- new row: number of children, `RANDBETWEEN(1,4)`, then recopy values\n- columns: Number of children\n- Values: Number of children, COUNT","points":50,"extras":"$rank=4.796565","systemWhenCreated":"2020-10-14 20:06:22","systemWhoCreated":"systemUnknown"},{"id":270,"category":"Google Sheets","title":"Delete all unused rows and columns","body":"- select first empty line \n- CTRL-SHIFT-down-arrow\n- right-click, delete\n- same for columns\n- to add rows bottom, type in number\n- to add columns, select three, right click, add three","points":20,"extras":"$rank=4.8777","systemWhenCreated":"2020-10-14 21:12:50","systemWhoCreated":"systemUnknown"},{"id":271,"category":"Access VBA","title":"How to query various fields in VBA Access","body":"- note that fields with spaces need brackets\n- note that boolean types (Yes/No) have Yes = -1 and No = 0\n\t-------------------------------\n\tSub GetTestCustomers()\n\t\tDim rcsTests As DAO.Recordset\n\t\t'Set rcsTests = CurrentDb.OpenRecordset(\"SELECT * FROM tblExampleCustomers WHERE Customerid = 'AROUT'\", dbOpenDynaset)\n\t\t'Set rcsTests = CurrentDb.OpenRecordset(\"SELECT * FROM tblExampleCustomers WHERE [Address Country] = 'UK'\", dbOpenDynaset)\n\t\t'Set rcsTests = CurrentDb.OpenRecordset(\"SELECT * FROM tblExampleCustomers WHERE Attending = 0\", dbOpenDynaset)\n\t\tSet rcsTests = CurrentDb.OpenRecordset(\"SELECT * FROM tblExampleCustomers WHERE Attending = -1\", dbOpenDynaset)\n\t\trcsTests.MoveLast\n\t\tDebug.Print rcsTests.RecordCount\n\t\trcsTests.Close\n\tEnd Sub\n\t-------------------------------","points":20,"extras":"$rank=4.67","systemWhenCreated":"2020-10-15 10:53:30","systemWhoCreated":"systemUnknown"},{"id":272,"category":"Access VBA","title":"Edit a field in a specific record","body":"- note that *rcsTests* is a collection of one record\n\t----------------------------------\n\tSub ChangeFieldsOfRecord()\n\t\tDim rcsTests As DAO.Recordset\n\t\tSet rcsTests = CurrentDb.OpenRecordset(\"SELECT * FROM tblTests WHERE id = 1660\", dbOpenDynaset)\n\t\tWith rcsTests\n\t\t\t.Edit\n\t\t\t.Fields(\"kind\").Value = \"rule\"\n\t\t\t.Update\n\t\tEnd With\n\t\trcsTests.Close\n\tEnd Sub\n\t----------------------------------","points":40,"extras":"$rank=4.8623","systemWhenCreated":"2020-10-15 11:23:16","systemWhoCreated":"systemUnknown"},{"id":273,"category":"Access VBA","title":"Single class example: Person","body":"- put this in a module:\n\t---------------------------\n\tSub TestClass()\n\t\tDim person As person\n\t\tSet person = New person\n\n\t\tperson.Constructor \"Henri\", \"Dunant\"\n\t\tperson.Rank = 232\n\t\tperson.Display\n\tEnd Sub\n\t---------------------------\n- put this in a class module named *Person*\n- note that you define default values in Class_Initialize\n\t----------------------------\n\tOption Compare Database\n\tOption Explicit\n\n\tDim m_firstName As String\n\tDim m_lastName As String\n\tDim m_rank As Variant\n\n\t'FirstName\n\tProperty Get FirstName() As String\n\t\tFirstName = m_firstName\n\tEnd Property\n\tProperty Let FirstName(strFirstName As String)\n\t\tm_firstName = strFirstName\n\tEnd Property\n\n\t'LastName\n\tProperty Get LastName() As String\n\t\tLastName = m_lastName\n\tEnd Property\n\tProperty Let LastName(strLastName As String)\n\t\tm_lastName = strLastName\n\tEnd Property\n\n\t'Rank\n\tProperty Get Rank() As Variant\n\t\tRank = m_rank\n\tEnd Property\n\tProperty Let Rank(decRank As Variant)\n\t\tm_rank = decRank\n\tEnd Property\n\n\tPublic Sub Constructor(strFirstName As String, strLastName As String)\n\t\tm_firstName = strFirstName\n\t\tm_lastName = strLastName\n\tEnd Sub\n\n\tPrivate Sub Class_Initialize()\n\t\tm_firstName = \"\"\n\t\tm_lastName = \"\"\n\t\tm_rank = CDec(0.1)\n\tEnd Sub\n\n\tPublic Sub Display()\n\t\tDim strRank As String\n\t\tstrRank = qstr_ForceFormatPeriodInDecimal(m_rank)\n\t\tDebug.Print m_firstName & \" \" & m_lastName & \" (\" & strRank & \")\"\n\tEnd Sub\n\t----------------------------\n- save this as a module called *qstr*\n\t--------------------------\n\t' 343,2 --> 343.2\n\tFunction qstr_ForceFormatPeriodInDecimal(decValue As Variant)\n\t\tDim strValue As String\n\n\t\tstrValue = CStr(decValue)\n\t\tstrValue = Replace(strValue, \",\", \".\")\n\n\t\tqstr_ForceFormatPeriodInDecimal = strValue\n\tEnd Function\t\n\t--------------------------","points":100,"extras":"$rank=4.62","systemWhenCreated":"2020-10-15 14:36:20","systemWhoCreated":"systemUnknown"},{"id":274,"category":"Excel VBA","title":"Create a function with an optional parameter with default value","body":"- note that you can also use `Optional ByVal`:\n\t----------------------\n\tSub TestCallOptional()\n\t\tDebug.Print AddText(\"Test\")\n\t\tDebug.Print AddText()\n\tEnd Sub\n\n\tFunction AddText(Optional strText As String = \"DEFAULT\")\n\t\tAddText = strText & \"--added\"\n\tEnd Function\n\t----------------------","points":20,"extras":"$rank=4.4545","systemWhenCreated":"2020-10-15 16:11:24","systemWhoCreated":"systemUnknown"},{"id":275,"category":"Access VBA","title":"Single and plural classes that read a database table","body":"- create database table with appropriate fields\n- put this in a module:\n\t---------------------------\n\tSub TestPluralClass()\n\t\tDim Persons As Persons\n\t\tSet Persons = New Persons\n\t\t'Persons.Constructor\n\t\tPersons.Constructor \"SELECT * FROM tblPersons WHERE rank > 3.5\"\n\t\tPersons.Display\n\tEnd Sub\n\t---------------------------\n- put this in a class module called \"Person\"\n\t----------------------------------\n\tOption Compare Database\n\tOption Explicit\n\n\tDim m_firstName As String\n\tDim m_middleName As String\n\tDim m_lastName As String\n\tDim m_rank As Variant\n\n\t'FirstName\n\tProperty Get FirstName() As String\n\t\tFirstName = m_firstName\n\tEnd Property\n\tProperty Let FirstName(strFirstName As String)\n\t\tm_firstName = strFirstName\n\tEnd Property\n\n\t'MiddleName\n\tProperty Get MiddleName() As String\n\t\tMiddleName = m_middleName\n\tEnd Property\n\tProperty Let MiddleName(strMiddleName As String)\n\t\tm_middleName = strMiddleName\n\tEnd Property\n\n\t'LastName\n\tProperty Get LastName() As String\n\t\tLastName = m_lastName\n\tEnd Property\n\tProperty Let LastName(strLastName As String)\n\t\tm_lastName = strLastName\n\tEnd Property\n\n\t'Rank\n\tProperty Get Rank() As Variant\n\t\tRank = m_rank\n\tEnd Property\n\tProperty Let Rank(decRank As Variant)\n\t\tm_rank = decRank\n\tEnd Property\n\n\tPublic Sub Constructor(strFirstName As String, strLastName As String)\n\t\tm_firstName = strFirstName\n\t\tm_lastName = strLastName\n\tEnd Sub\n\n\tPrivate Sub Class_Initialize()\n\t\tm_firstName = \"\"\n\t\tm_middleName = \"\"\n\t\tm_lastName = \"\"\n\t\tm_rank = CDec(0)\n\tEnd Sub\n\n\tPublic Sub Display()\n\t\tDim strRank As String\n\t\tDim strSmartMiddleName As String\n\n\t\tstrRank = qstr_ForceFormatPeriodInDecimal(m_rank)\n\t\tIf m_middleName = \"\" Then\n\t\t\tstrSmartMiddleName = \"\"\n\t\tElse\n\t\t\tstrSmartMiddleName = \" \" & m_middleName\n\t\tEnd If\n\t\tDebug.Print m_firstName & strSmartMiddleName & \" \" & m_lastName & \" (\" & strRank & \")\"\n\tEnd Sub\n\t----------------------------------\n- put this in a class module called \"Persons\":\n\t----------------------------------\n\tOption Compare Database\n\tOption Explicit\n\n\tDim m_collection As ObjectArrayList\n\tDim m_sql As String\n\n\tPublic Sub Constructor(Optional strSql As String = \"\")\n\t\tIf strSql <> \"\" Then\n\t\t\tm_sql = strSql\n\t\tEnd If\n\t\tFillCollection\n\tEnd Sub\n\n\tPrivate Sub Class_Initialize()\n\t\tm_sql = \"SELECT * FROM tblPersons\"\n\t\tSet m_collection = New ObjectArrayList\n\tEnd Sub\n\n\tPrivate Sub FillCollection()\n\n\t\tDim objPerson As Person\n\t\tDim intCount As Integer\n\n\t\tDim rcsPersons As DAO.Recordset\n\t\tSet rcsPersons = CurrentDb.OpenRecordset(m_sql, dbOpenDynaset)\n\n\t\tDo While Not rcsPersons.EOF\n\n\t\t\tDim strMiddleName As String\n\n\t\t\tIf IsNull(rcsPersons.Fields(\"middleName\")) Then\n\t\t\t\tstrMiddleName = \"\"\n\t\t\tElse\n\t\t\t\tstrMiddleName = rcsPersons.Fields(\"middleName\")\n\t\t\tEnd If\n\n\t\t\tSet objPerson = New Person\n\t\t\tobjPerson.FirstName = rcsPersons.Fields(\"firstName\")\n\t\t\tobjPerson.MiddleName = strMiddleName\n\t\t\tobjPerson.LastName = rcsPersons.Fields(\"lastName\")\n\t\t\tobjPerson.Rank = rcsPersons.Fields(\"rank\")\n\n\t\t\tCall m_collection.Add(objPerson)\n\n\t\t\trcsPersons.MoveNext\n\t\tLoop\n\n\t\trcsPersons.Close\n\n\tEnd Sub\n\n\tPublic Sub Display()\n\n\t\tDim objPerson As Person\n\t\tDim intIndex As Integer\n\n\t\tFor intIndex = 0 To m_collection.NumberOfItems - 1\n\t\t\tSet objPerson = m_collection.GetItem(intIndex)\n\t\t\tobjPerson.Display\n\t\tNext\n\n\tEnd Sub\n\t----------------------------------\n- put this in a class module called \"ObjectArrayList\":\n\t----------------------------------\n\t'2 - PublicNotCreatable\n\tOption Compare Database\n\tOption Explicit\n\n\t'internal variables\n\tDim m_arrContainer() As Variant\n\tDim m_intNumberOfItems As Integer\n\n\n\t'method: add an item\n\tPublic Sub Add(varItem As Variant)\n\n\t\t'increment internal counter\n\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t'redimension container\n\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t'now add the item\n\t\tSet m_arrContainer(m_intNumberOfItems - 1) = varItem\n\n\tEnd Sub\n\n\t'method: returns the number of items for for/next loops\n\tFunction NumberOfItems() As Integer\n\t\tNumberOfItems = m_intNumberOfItems\n\tEnd Function\n\n\t'method: return a specific item\n\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\tSet GetItem = m_arrContainer(intIndexNumber)\n\tEnd Function\n\n\t'method: returns whether or not item exists\n\tFunction ItemExists(varDesiredItem As Variant) As Boolean\n\n\t\t'declarations\n\t\tDim intIndex As Integer\n\t\tDim varItem As Variant\n\n\t\t'loop through and check\n\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t'variables\n\t\t\tvarItem = Me.GetItem(intIndex)\n\n\t\t\t'if this is it, then return true\n\t\t\tIf varItem = varDesiredItem Then\n\t\t\t\tItemExists = True\n\t\t\t\tExit Function\n\t\t\tEnd If\n\n\t\tNext\n\n\t\t'if we are here, it was not found\n\t\tItemExists = False\n\n\tEnd Function\n\t----------------------------------","points":150,"extras":"$rank=4.93232","systemWhenCreated":"2020-10-15 17:40:38","systemWhoCreated":"systemUnknown"},{"id":276,"category":"Google Sheets","title":"Turn total cell red if above a certain amount","body":"- column of numbers\n- make sum cell\n- Format > Conditional formatting","points":20,"extras":"$rank=4.98733","systemWhenCreated":"2020-10-15 22:16:55","systemWhoCreated":"systemUnknown"},{"id":277,"category":"Google Sheets","title":"Count how many cells in a column are above a certain amount and include in string","body":"- make table with column \"number of children\"\n- change sheets\n- `=\"There are \" & countif('Data Table'!K2:K92, \">= 3\") & \" states with three or more children.\"`","points":20,"extras":"$rank=4.9234","systemWhenCreated":"2020-10-15 23:05:14","systemWhoCreated":"systemUnknown"},{"id":278,"category":"Google Sheets","title":"Highlight double values in a column","body":"- first way with second column\n\t- make column of unique values\n\t- make second column: doubles\n\t- first cell: `=COUNTIF($B$2:$B$92,B2)`\n\t- copy it down\n\t- Format > Conditional formatting: if greater than one then red\n- second way with one column\n\t- on column itself, Format > Conditional formatting: `=COUNTIF(A$1:A$92,A1)>1`\n\t- delete first column","points":240,"extras":"$rank=4.965456","systemWhenCreated":"2020-10-15 23:18:20","systemWhoCreated":"systemUnknown"},{"id":279,"category":"Google Sheets","title":"Make total bar above table","body":"- create classic table\n- two lines above headers, create sum row, e.g.\n\t- the reason you have two lines is for the Filter view to be created right\n\t- `=sum(K3:K)` (\"K\" for the whole column)\n- in table: Data > Filter views > Create new filter view\n- sort, search, etc.\n- then delete second line\n- sort, search, etc.\n- **Note**: you can also move the table down afterward with [[CTRL-X]] [[CTRL-V]]","points":40,"extras":"$rank=4.9234234","systemWhenCreated":"2020-10-16 00:12:12","systemWhoCreated":"systemUnknown"},{"id":280,"category":"TypeScript","title":"How to sort a JSON array based on a field","body":"- note descendingRank returns a number, not boolean\n\t-------------------------------------\n\tconst descendingRank: any = (a: any, b: any) => a.text < b.text ? -1 : a.text > b.text ? 1 : 0;\n\tconst filteredQuotes = quotes.sort(descendingRank);\n\t-------------------------------------","points":20,"extras":"$rank=4.6773","systemWhenCreated":"2020-10-17 08:23:53","systemWhoCreated":"systemUnknown"},{"id":281,"category":"Excel VBA","title":"How to highlight cells that have specific content","body":"- note that you should put the qexc (quick tools - Excel) and qarr (quick tools - arrays) in their own modules for organizational purposes\n\t---------------------------------------------\n\tFunction ProcessCells(status As String)\n\t\tDim row As Integer\n\t\tDim column As Integer\n\t\tDim cell As Range\n\t\tDim theValue As String\n\t\tDim total As Integer\n\n\t\tDim Identifiers(6) As String\n\n\t\tIdentifiers(0) = \"G\"\n\t\tIdentifiers(1) = \"G/C\"\n\t\tIdentifiers(2) = \"G, C\"\n\t\tIdentifiers(3) = \"C   G\"\n\t\tIdentifiers(4) = \"G  MARX\"\n\t\tIdentifiers(5) = \"G?\"\n\n\t\tFor column = 3 To 39\n\n\t\t\tFor row = 2 To 32\n\t\t\t\tSet cell = Cells(row, column)\n\t\t\t\ttheValue = Trim(cell.Value)\n\n\t\t\t\tIf qarr_IsInArray(theValue, Identifiers) Then\n\t\t\t\t\tIf status = \"highlight\" Then\n\t\t\t\t\t\tqexc_HighlightCell cell\n\t\t\t\t\t\ttotal = total + 1\n\t\t\t\t\tEnd If\n\t\t\t\t\tIf status = \"unhighlight\" Then\n\t\t\t\t\t\tqexc_UnhighlightCell cell\n\t\t\t\t\tEnd If\n\t\t\t\tEnd If\n\t\t\tNext\n\n\t\tNext\n\n\t\tProcessCells = total\n\tEnd Function\n\n\tPublic Sub qexc_HighlightCell(cell As Range)\n\t\tWith cell.Interior\n\t\t\t.Pattern = xlSolid\n\t\t\t.PatternColor = 16777215\n\t\t\t.Color = 65535\n\t\t\t.TintAndShade = 0\n\t\t\t.PatternTintAndShade = 0\n\t\tEnd With\n\t\tcell.Font.Bold = True\n\tEnd Sub\n\n\tPublic Sub qexc_UnhighlightCell(cell As Range)\n\t\tWith cell.Interior\n\t\t\t.Pattern = xlSolid\n\t\t\t.PatternColor = 16777215\n\t\t\t.ThemeColor = xlThemeColorDark1\n\t\t\t.TintAndShade = 0\n\t\t\t.PatternTintAndShade = 0\n\t\tEnd With\n\t\tcell.Font.Bold = False\n\tEnd Sub\n\n\n\tPublic Function qarr_IsInArray(stringToBeFound As String, arr As Variant) As Boolean\n\t\tIf stringToBeFound = \"\" Then\n\t\t\tqarr_IsInArray = False\n\t\t\tExit Function\n\t\tEnd If\n\t\tDim i\n\t\tFor i = LBound(arr) To UBound(arr)\n\t\t\tIf arr(i) = stringToBeFound Then\n\t\t\t\tqarr_IsInArray = True\n\t\t\t\tExit Function\n\t\t\tEnd If\n\t\tNext i\n\t\tqarr_IsInArray = False\n\tEnd Function\n\t---------------------------------------------","points":50,"extras":"$rank=4.923","systemWhenCreated":"2020-10-17 20:40:55","systemWhoCreated":"systemUnknown"},{"id":282,"category":"Excel VBA","title":"How to comment and uncomment blocks of code","body":"- You have to make these buttons display first\n- right-click top area\n- customize\n- commands\n- on left: edit\n- on right, scroll down: \n\t- drag both buttons to top area","points":20,"extras":"$rank=4.78787","systemWhenCreated":"2020-10-19 15:09:37","systemWhoCreated":"systemUnknown"},{"id":283,"category":"Excel VBA","title":"Create buttons that filter a table based on one or more criteria","body":"- note that you can also use `Operator:=xlOr`\n\t----------------------------------\n\tSub Table_PreFilter()\n\t\tSheets(\"Filter\").Activate\n\t\tRange(\"A3\").Activate\n\t\tSelection.AutoFilter\n\tEnd Sub\n\n\tSub Table_PostFilter()\n\t  Range(\"BB100\").Select\n\t  ActiveWindow.SmallScroll up:=100\n\t  ActiveWindow.SmallScroll ToLeft:=44\n\tEnd Sub\n\n\tPrivate Sub btnAll_Click()\n\t\tDim strAddress As String\n\n\t\tTable_PreFilter\n\n\t\tstrAddress = ActiveCell.CurrentRegion.Address\n\t\tActiveSheet.Range(strAddress).AutoFilter\n\n\t\tTable_PostFilter\n\tEnd Sub\n\n\tPrivate Sub btnNode_Click()\n\t\tDim strAddress As String\n\n\t\tTable_PreFilter\n\n\t\tstrAddress = ActiveCell.CurrentRegion.Address\n\t\tActiveSheet.Range(strAddress).AutoFilter Field:=2, Criteria1:=\"=node\"\n\n\t\tTable_PostFilter\n\tEnd Sub\n\n\tPrivate Sub btnThree_Click()\n\t\tDim strAddress As String\n\n\t\tTable_PreFilter\n\n\t\tstrAddress = ActiveCell.CurrentRegion.Address\n\t\tActiveSheet.Range(strAddress).AutoFilter Field:=2, Criteria1:=Array(\"=vi\", \"node\", \"npm\"), Operator:=xlFilterValues\n\n\t\tTable_PostFilter\n\tEnd Sub\n\t----------------------------------","points":60,"extras":"$rank=4.97328","systemWhenCreated":"2020-10-19 16:03:07","systemWhoCreated":"systemUnknown"},{"id":284,"category":"Excel VBA","title":"Determine if a file or directory exists in current or absolute directory","body":"- note that file names are not case-sensitive:\n\t--------------------------------\n\tFunction qfil_FileExists(strPathAndFileName As String) As Boolean\n\n\t\tqfil_FileExists = Dir(strPathAndFileName) <> \"\"\n\n\tEnd Function\n\n\tFunction qfil_FileExistsInCurrentDirectory(strFileName As String) As Boolean\n\n\t\tDim strPathAndFileName As String\n\n\t\tstrPathAndFileName = qfil_AddPathForCurrentDirectory(strFileName)\n\n\t\tqfil_FileExistsInCurrentDirectory = Dir(strPathAndFileName) <> \"\"\n\n\tEnd Function\n\n\tFunction qfil_AddPathForCurrentDirectory(fileName As String)\n\t\tqfil_AddPathForCurrentDirectory = ThisWorkbook.Path & \"\\\" & fileName\n\tEnd Function\n\n\tFunction qfil_DirectoryExists(strPathAndDirectoryName As String) As Boolean\n\n\t\tqfil_DirectoryExists = Dir(strPathAndDirectoryName, vbDirectory) <> \"\"\n\n\tEnd Function\n\n\tFunction qfil_DirectoryExistsInCurrentDirectory(strDirectoryName As String) As Boolean\n\t\tDim strPathAndDirectoryName As String\n\n\t\tstrPathAndDirectoryName = qfil_AddPathForCurrentDirectory(strDirectoryName)\n\n\t\tqfil_DirectoryExistsInCurrentDirectory = Dir(strPathAndDirectoryName, vbDirectory) <> \"\"\n\n\tEnd Function\n\t--------------------------------","points":30,"extras":"$rank=4.787","systemWhenCreated":"2020-10-19 17:49:09","systemWhoCreated":"systemUnknown"},{"id":285,"category":"npm","title":"How to send parameters to an npm script that runs a TypeScript file","body":"- `npm i minimist`\n- create `script_dpod.ts`\n\t-----------------------------\n\tconst argv = require('minimist')(process.argv.slice(2));\n\n\tconsole.log(argv);\n\t-----------------------------\n- in *package.json* add:\n\t--------------------------------\n\t\"dpod\": \"./node_modules/.bin/ts-node --skip-project dev/scripts/script_dpod.ts\"\n\t--------------------------------\n- `npm run dpod -- --command=createPage --name=\"More Information\" --status=lowProfile` returns:\n\t---------------------------\n\t{ \n\t\t_: [],\n\t\tcommand: 'createPage',\n\t\tname: 'More Information',\n\t\tstatus: 'lowProfile' \n\t}\n\t---------------------------\n- the abbreviated version `npm run dpod -- -c createPage -n \"More Information\" -s lowProfile` returns:\n\t---------------------------\n\t{ \n\t\t_: [], \n\t\tc: 'createPage', \n\t\tn: 'More Information', \n\t\ts: 'lowProfile' \n\t}\n\t---------------------------\n- you can then define commands like this:\n\t-----------------------------------\n\tconst argv = require('minimist')(process.argv.slice(2));\n\nconsole.log(argv);\nconst command = argv['c'];\n\nconsole.log(\"command = \" + command);\n\t-------------------------------------","points":50,"extras":"$rank=4.9","systemWhenCreated":"2020-10-20 13:22:53","systemWhoCreated":"systemUnknown"},{"id":286,"category":"Excel VBA","title":"How to determine if a worksheet exists","body":"- note `On Error Resume Next` ignores the error that happens if `.Name` is called on a non-object\n\t-------------------------------\n\tFunction qfil_worksheetExists(strWorksheetName) As Boolean\n\n\t\tOn Error Resume Next\n\n\t\tqfil_worksheetExists = Sheets(strWorksheetName).Name <> \"\"\n\n\t\tOn Error GoTo 0\n\n\tEnd Function\n\n\tSub TEST_qfil_worksheetExists()\n\n\t\tDim test As Boolean\n\n\t\ttest = qfil_worksheetExists(\"March2\")\n\t\tDebug.Print test\n\n\tEnd Sub\n\t-------------------------------","points":20,"extras":"$rank=4.862525","systemWhenCreated":"2020-10-20 17:35:30","systemWhoCreated":"systemUnknown"},{"id":287,"category":"Google Sheets","title":"How to change text based on language of a cell.","body":"- `=DETECTLANGUAGE(F9)`\n- `=switch(F10, \"en\", \"You seem to speak English.\", \"de\", \"Ich sehe, dass du Deutsch sprichst.\", \"fr\", \"Nous pouvons parlez en français.\", \"I can't tell what language you are writing.\")`\n- [example](https://docs.google.com/spreadsheets/d/1kLUd4hXgI-VwOLbiAHRph7ucP2gwhCD5f7sqah7f6Eo/edit#gid=1719766225)","points":10,"extras":"$rank=4.9232","systemWhenCreated":"2020-10-20 20:32:28","systemWhoCreated":"systemUnknown"},{"id":288,"category":"Google Sheets","title":"How to include cell values in text","body":"- make a table with a column \"Number of Children\"\n- `=\"There are \" & countif('Data Table'!K3:K93, \">= 3\") & \" states with three or more children.\"`","points":5,"extras":"$rank=4.9343","systemWhenCreated":"2020-10-20 20:32:28","systemWhoCreated":"systemUnknown"},{"id":289,"category":"Google Sheets","title":"How to mark duplicates in a column as red","body":"- use this when you have a column of unique values:##theduplicksjdf\n- select column\n- Format > Conditional formating\n- Custom formula is\n- `=COUNTIF(A$3:$A,A3) > 1`\n- choose light red\n- [example](https://docs.google.com/spreadsheets/d/1kLUd4hXgI-VwOLbiAHRph7ucP2gwhCD5f7sqah7f6Eo/edit#gid=1876590311&range=A2:A22)","points":50,"extras":"$rank=4.921","systemWhenCreated":"2020-10-20 22:31:17","systemWhoCreated":"systemUnknown"},{"id":290,"category":"Google Sheets","title":"How to use Google Sheets to remove duplicates from a text file","body":"- you have a list of duplicates in Notepad++##removdupppsdf\n- copy them into a Google Sheet column\n\t-------------------------\n\tCharlotte\n\tAmelia\n\tMia\n\tHarper\n\tEvelyn\n\tAbigail\n\tEmily\n\tElla\n\tHarper\n\tElizabeth\n\tCamila\n\tLuna\n\t-------------------------\n- highlight column\n- select column\n- **Data > Remove duplicates**\n- copy back into Notepad++","points":10,"extras":"$rank=4.93434","systemWhenCreated":"2020-10-20 22:43:49","systemWhoCreated":"systemUnknown"},{"id":291,"category":"Google Sheets","title":"How to make the cells in a column only allow certain values defined from a custom list on another sheet","body":"- you want to allow the user to click on a drop down and select from a list of values you have defined on another sheet:##tehgoogldropdop\n- make list of values on a sheet called *DataSources*\n- highlight column\n- **Data > Data valiation**\n- select range and save\n- [example](https://docs.google.com/spreadsheets/d/1kLUd4hXgI-VwOLbiAHRph7ucP2gwhCD5f7sqah7f6Eo/edit#gid=2034832682&fvid=1715948524)\n- note this doesn't seem to work in Edge or Opera\n- **works in Firefox and Chrome**\n- TIP: create a *named range* for the source data in case you want to use it for another cell","points":50,"extras":"$rank=4.912323","systemWhenCreated":"2020-10-20 23:05:47","systemWhoCreated":"systemUnknown"},{"id":292,"category":"Google Sheets","title":"Import character-separated text list into Google Sheets with copy-and-paste","body":"- you have a list of text that has data which is separated by semicolons, commas, spaces, etc.##fromtexttotablekj\n- copy-and-paste text into first cell of Google Sheet\n- **Data > Split text to columns**\n- set filter on it: **Data > Create a filter**\n- sort, search, etc.","points":30,"extras":"$rank=4.9123","systemWhenCreated":"2020-10-21 01:04:53","systemWhoCreated":"systemUnknown"},{"id":293,"category":"Google Sheets","title":"How to show begin and end date of project with number of work days available","body":"- you want to track how many work days you have in projects##theprojectdayskj\n- enter days: if you will be switching between languages (e.g. English/German) which have different date formats, it's best to use the ISO format of *yyyy-mm-dd*\n\t- double-click dates to get calendar popup\n- Number of days: `=DAYS(B3,B2-1)`\n- Number of work days: `=NETWORKDAYS(B2-1, B3, D6:D15)`\n- [example](https://docs.google.com/spreadsheets/d/1kLUd4hXgI-VwOLbiAHRph7ucP2gwhCD5f7sqah7f6Eo/edit#gid=1571454146)\n- also: send link to smart phone and see how easy it is to change dates etc.\n","points":40,"extras":"$rank=4.8847384","systemWhenCreated":"2020-10-21 13:32:18","systemWhoCreated":"systemUnknown"},{"id":294,"category":"Google Sheets","title":"How to make a lookup field to enter ID and display customer name","body":"- when you have a table and want to (e.g. on another worksheet) make a simple search field that displays the content of one of the columns in the table:##thelookupaddd\n- [example](https://docs.google.com/spreadsheets/d/1kLUd4hXgI-VwOLbiAHRph7ucP2gwhCD5f7sqah7f6Eo/edit#gid=1303210697)\n- make table\n- field that displays data: `=IF(ISBLANK(C3),\"Enter a Customer ID.\",IFERROR(VLOOKUP(C3,A8:D,2, false), \"(Customer ID not valid)\"))`","points":40,"extras":"$rank=4.9","systemWhenCreated":"2020-10-21 15:01:05","systemWhoCreated":"systemUnknown"},{"id":295,"category":"React","title":"How to show HTML code based on value of variable","body":"- note this the equivalent of *v-show* in Vue:\n\t-------------------------\n\t{this.state.filteredItems.length > 1 &&\n\t\t(\n\t\t\t<div>multiple items are being displayed</div>\n\t\t)\n\t}\n\t-------------------------\n- if you have an either or, then use the tertiary:\n\t-----------------------------\n\t{this.state.filteredItems.length > 1 ?\n\t\t(\n\t\t\t<div>multiple items are being displayed</div>\n\t\t) : (\n\t\t\t<div>only 1 item is being displayed</div>\n\t\t)\n\t}\n\t-----------------------------","points":30,"extras":"$rank=4.637","systemWhenCreated":"2020-10-22 16:03:35","systemWhoCreated":"systemUnknown"},{"id":296,"category":"Google Sheets","title":"Make a total of revenues for each item in list that is checked","body":"- you have a list of companies and revenues:##therevenuon\n- C2 is `=SUMIFS(C3:C13,A3:A13, true)`\n- C3, *Format > Conditional Formating*\n\t- C3:C13\n\t- Custom formula is: `=A3=TRUE`\n\t- yellow background\n- [example here](https://docs.google.com/spreadsheets/d/1kLUd4hXgI-VwOLbiAHRph7ucP2gwhCD5f7sqah7f6Eo/edit#gid=1750358913)","points":40,"extras":"$rank=4.911232","systemWhenCreated":"2020-10-22 19:46:21","systemWhoCreated":"systemUnknown"},{"id":297,"category":"Google Scripts","title":"Read text from a Google Document file and write it to a log","body":"- note the `/edit` is necessary in the URL:\n\t-------------------------------------\n\tfunction readTextFromFile() {\n\t\tconst doc = DocumentApp.openByUrl(\"https://docs.google.com/document/d/11XNLYbY2z_eZv6pzx4mPph6teXAYCusm6bN_FKYb-dE/edit\");\n\t\tconst activeSection = doc.getActiveSection();\n\t\tconst text = activeSection.getText();\n\t\tLogger.log(text);\n\t}\n\t-------------------------------------\n- click *Run*\n- [[CTRL-Enter]] to view log","points":40,"extras":"$rank=4.5","systemWhenCreated":"2020-10-22 22:22:01","systemWhoCreated":"systemUnknown"},{"id":298,"category":"Google Scripts","title":"Create a text file that is downloadable","body":"- note that you can use ES6 features:\n\t------------------------------\n\tfunction createDocument() {\n\t\tconst timeStamp = getTimeStamp();\n\n\t\tlet content = \"\";\n\t\tfor(let x = 1; x <= 100; x++) {\n\t\t\tcontent += `Report #${x}\\n`;\n\t\t}\n\n\t\tconst doc = DriveApp.createFile(`report003_${timeStamp}.txt`, content, MimeType.PLAIN_TEXT);\n\t}\n\t------------------------------\n- in Utils.gs:\n\t----------------------------------\n\tfunction getTimeStamp() {\n\t\treturn Math.round(new Date().getTime()/1000);\n\t}\n\t----------------------------------\n- find file, download##thedownlagscripfile","points":50,"extras":"$rank=4.875757","systemWhenCreated":"2020-10-22 22:47:11","systemWhoCreated":"systemUnknown"},{"id":299,"category":"React","title":"How to add Font Awesome icons to your React application","body":"- npm's **react-icons** allows you easily include thousands of icons in your application from *Font Awesome* and other collections##thefontsksjdf\n- `npx create-react-app testspin`\n- `npm start`\n- `npm i react-icons`\n\t- October 2020, I got: **\"react-icons\": \"^3.11.0\"**\n- replace `App.js` with:\n\t----------------------\n\timport './App.css';\n\timport { FiInbox } from 'react-icons/fi';\n\timport { FaSpinner } from 'react-icons/fa';\n\n\tfunction App() {\n\t  return (\n\t\t  <div className=\"App\">\n\t\t\t  <div><FiInbox /> Inbox</div>\n\t\t\t  <div><FaSpinner className=\"spinner\" /> Spinner</div>\n\t\t</div>\n\t  );\n\t}\n\n\texport default App;\n\t----------------------\n- for spinners, you have to rotate them manually with CSS, add to `App.css`:\n\t--------------------\n\t.spinner {\n\t\tanimation: spin infinite 2s linear;\n\t}\n\n\t@keyframes spin {\n\t\tfrom {\n\t\t\ttransform: rotate(0deg);\n\t\t}\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\t--------------------\n- find more icons here: https://react-icons.github.io/react-icons","points":60,"extras":"$rank=4.782","systemWhenCreated":"2020-10-24 03:24:14","systemWhoCreated":"systemUnknown"},{"id":300,"category":"React","title":"How to create and run the build version of a create-react-app","body":"- you can test the build version of your React locally by creating the build and then running it with the *serve* tool:##runthebuildreact\n- `npm run build`\n- `npm i -g serve`\n- `serve -s build`\n- in browser go to `http://localhost:5000`","points":20,"extras":"$rank=3.8","systemWhenCreated":"2020-10-24 17:17:22","systemWhoCreated":"systemUnknown"},{"id":301,"category":"React","title":"How to make class and function components","body":"- there are three ways of writing a React component:##classFunctionComponentsljk\n- class component:\n\t-------------------------------\n\timport React, { Component } from 'react';\n\timport Main from 'datapod/components/main';\n\n\tclass App extends Component{\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Main />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\texport default App;\n\t-------------------------------\n- **2015-10:** [Stateless function components](https://reactjs.org/blog/2015/10/07/react-v0.14.html)\n- function component\n\t---------------------------------------\n\timport React from 'react';\n\timport Main from 'datapod/components/main';\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Main />\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t---------------------------------------\n- function components with ES6 arrow notation\n\t---------------------------\n\timport React from 'react';\n\timport Main from 'datapod/components/main';\n\n\tconst App = () => {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Main />\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t---------------------------\n- **2019-02:** Hooks are a new addition in React 16.8. State hook allows you to add states in the function component.","points":20,"extras":"$rank=4.3","systemWhenCreated":"2020-10-25 02:44:37","systemWhoCreated":"systemUnknown"},{"id":302,"category":"React","title":"How to make a toggle state: click on logo to make it spin","body":"- add this to CSS file:\n\t----------------------------------\n\t.static-logo {\n\t\theight: 100px;\n\t}\n\n\t.animated-logo {\n\t\tanimation: App-logo-spin infinite 20s linear;\n\t\theight: 100px;\n\t}\n\n\t@keyframes App-logo-spin {\n\t\tfrom {\n\t\t\ttransform: rotate(0deg);\n\t\t}\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\t----------------------------------\n- define toggle variable in constructor, bind it, create event handler (toggleLogo), then add *addClick* and react to the toggle variable (`className={this.state.toggleLogo ? 'static-logo' : 'animated-logo'}`)\n\t--------------------------------------\n\timport { Component } from 'react';\n\timport logo from './logo.png';\n\timport './App.css';\n\n\tclass App extends Component {\n\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\ttoggleLogo: true\n\t\t\t};\n\n\t\t\t// need for ES6\n\t\t\tthis.toggleLogo = this.toggleLogo.bind(this);\n\t\t}\n\n\t\ttoggleLogo(event) {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\ttoggleLogo: !prevState.toggleLogo\n\t\t\t}));\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t<img src={logo}\n\t\t\t\t\t\t\tclassName={this.state.toggleLogo ? 'static-logo' : 'animated-logo'}\n\t\t\t\t\t\t\tonClick={this.toggleLogo}\n\t\t\t\t\t\t\talt=\"logo\" />\n\t\t\t\t\t\t<div><span className=\"mainHeader\">Welcome to React</span></div>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\texport default App;\n\t--------------------------------------","points":100,"extras":"$rank=4.7834","systemWhenCreated":"2020-10-25 03:39:39","systemWhoCreated":"systemUnknown"},{"id":303,"category":"CSS","title":"Minimal responsive template for three-menu single-page site","body":"- note it widens and centers on browsers but is full width on mobile devices##thewidenokok\n- index.html\n\t----------------------------------\n\t<!DOCTYPE html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Center Div</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\t\t\t}\n\n\t\t\t.container {\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tmax-width: 700px;\n\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\tpadding: 10px;\n\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tbackground-color: #eee;\n\t\t\t}\n\n\t\t\th2 {\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tmax-width: 700px;\n\t\t\t\tpadding-left: 10px;\n\t\t\t}\n\n\t\t\t.menu {\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tmax-width: 700px;\n\t\t\t\tpadding: 10px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<h2>Information</h2>\n\t\t<div class=\"menu\">News | Info | More settings</div>\n\t\t<div class=\"container\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Illo mollitia aspernatur in tempore porro non. Recusandae temporibus incidunt, eius quod neque optio quidem, nam illum ducimus cupiditate unde rem suscipit voluptas blanditiis ipsa porro saepe dignissimos corporis possimus quos! Fugit, maxime? Molestiae, distinctio consequuntur! Eius in, voluptas facilis temporibus quia ad omnis, quos facere porro atque ratione minus sit? Voluptatibus nobis repellat voluptatem ipsam cupiditate vitae sed delectus facere distinctio, nesciunt esse labore dolores est perspiciatis perferendis? Quibusdam iusto sed repellendus voluptates accusamus, fugiat expedita unde quos necessitatibus vitae maiores tempore, corporis iure rerum at repudiandae facilis ut perferendis ea?</div>\n\t</body>\n\n\t</html>\n\t----------------------------------","points":20,"extras":"$rank=4.9","systemWhenCreated":"2020-10-25 15:15:20","systemWhoCreated":"systemUnknown"},{"id":304,"category":"CSS","title":"Card design with image, title, price, and description","body":"- notice the shadow text and also transition, e.g. if resized##thejuiccecard\n- HTML:\n\t--------------------------------\n\t<div className=\"card\">\n\t\t<img src=\"juice.jpg\" alt=\"Juice\" className=\"card-image\" />\n\t\t<div className=\"container\">\n\t\t\t<h3>Vitamin Juice <span className=\"price\">$3.99</span></h3>\n\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates dignissimos cumque soluta id repellat error non perspiciatis vero ad facilis mollitia delectus, iste consequuntur quaerat, minus ab eligendi? Vero rem quos maxime et, eius repellat earum.</p>\n\t\t</div>\n\t</div>\n\t--------------------------------\n- CSS:\n\t------------------------------------\n\t.card {\n\t\tbox-shadow: 0 4px 8px 0 black;\n\t\ttransition: 1s;\n\t\twidth: 20%;\n\t\tbackground-color: white;\n\t\tmargin: 5px;\n\t\tborder-radius: 10px;\n\t}\n\n\t.price {\n\t\tcolor: red;\n\t\tfont-weight: 800;\n\t\tfont-size: 35px;\n\t\ttext-shadow: 0px 0px 5px #ccc;\n\n\t}\n\n\t.container {\n\t\tpadding: 2px 16px;\n\t\tbackground-color: white;\n\t\tborder-radius: 0 0 10px 10px;\n\t\ttext-align: center;\n\t}\n\n\t.card-image {\n\t\twidth: 100%;\n\t}\n\t------------------------------------","points":30,"extras":"$rank=4.2","systemWhenCreated":"2020-10-25 17:41:45","systemWhoCreated":"systemUnknown"},{"id":305,"category":"SketchUp Free","title":"Animate between numerous perspectives","body":"- you can create numerous perspectives (scenes) and then animate between them##sketchupScenesOk\n- click on scene-cutter icon on the right\n- click the [[+]] symbol\n- change your perspective \n- click the [[+]] symbol again\n- then you can manually click on them or press the play button","points":10,"extras":"$rank=4.9222","systemWhenCreated":"2020-10-29 00:45:45","systemWhoCreated":"systemUnknown"},{"id":306,"category":"SketchUp Free","title":"How to apply styles to a  drawing for publication, demonstration, etc.","body":"- if you want to show your architectural drawings to clients or include in plans, etc. there are a number of default styles you can choose from##sketchupfourstyles\n- click on the styles button on the right side, and experiment with various styles, or create your own##theStylesIcon\n- while in the style, you can continue to fully navigate and change your drawing","points":20,"extras":"$rank=4.923","systemWhenCreated":"2020-10-29 07:56:41","systemWhoCreated":"systemUnknown"},{"id":307,"category":"Node","title":"Read data from SQLite database in Node using promises instead of callbacks","body":"- a more straight-forward way to access an SQLite database file in Node is to use ES6 promises when using the sqlite3 npm module##theNodeSqlitePromise\n- create directory: `nodeSqlite`\n- copy file to `data/main.sqlite` \n- `npm init -y`\n- `npm i sqlite3`\n- make `sqlManager.js`:\n\t----------------------------------\n\tconst sqlite3 = require('sqlite3').verbose();\n\n\tclass SqliteManager {\n\t\tdbPathAndFileName;\n\n\t\tconstructor(dbPathAndFileName) {\n\t\t\tthis.dbPathAndFileName = dbPathAndFileName;\n\t\t}\n\n\t\tgetRecordWithSql(sql) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst db = new sqlite3.Database(this.dbPathAndFileName);\n\t\t\t\tdb.all(sql, function (err, records) {\n\t\t\t\t\tif (records === undefined) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else if (records.length === 0) {\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(records[0]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdb.close();\n\t\t\t});\n\t\t}\n\n\t\tgetRecordsWithSql(sql) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst db = new sqlite3.Database(this.dbPathAndFileName);\n\t\t\t\tdb.all(sql, function (err, records) {\n\t\t\t\t\tif (records === undefined) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else if (records.length === 0) {\n\t\t\t\t\t\tresolve([]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(records);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdb.close();\n\t\t\t});\n\t\t}\n\n\t}\n\n\tmodule.exports = SqliteManager;\n\t----------------------------------\n- make `app.js`\n\t---------------------------------\n\tconst SqliteManager = require('./sqliteManager');\n\n\tconst sqliteManager = new SqliteManager('data/main.sqlite');\n\n\tsqliteManager.getRecordWithSql(`SELECT * FROM howtos WHERE id=1`)\n\t\t.then((record) => {\n\t\t\tif (record !== null) {\n\t\t\t\tconsole.log(record);\n\t\t\t}\n\t\t})\n\t\t.catch((error) => console.log(error));\n\n\tsqliteManager.getRecordsWithSql(`SELECT * FROM howtos LIMIT 5`)\n\t\t.then((records) => {\n\t\t\tfor (const record of records) {\n\t\t\t\tconsole.log(record.title);\n\t\t\t}\n\t\t})\n\t\t.catch((error) => console.log(error));\n\t---------------------------------\n- `node app.js`","points":70,"extras":"$rank=4.9123","systemWhenCreated":"2020-10-29 20:27:21","systemWhoCreated":"systemUnknown"},{"id":308,"category":"SketchUp Free","title":"Create structured shapes","body":"- create simple structures in 3D space##theStructureInSpace\n- press [[L]] to choose the line tool##sketchLineTool\n- click then move to the right, and simply type `50` for 50 centimeters (will appear lower right)\n- click again in another direction, use the perpendicular and parallel line hints\n- complete a square\n- then create other sides connected to it in same fashion","points":30,"extras":"$rank=4.9234;$generalRank=4.3","systemWhenCreated":"2020-10-30 23:19:52","systemWhoCreated":"systemUnknown"},{"id":309,"category":"Nx","title":"Setup Angular and React apps in Nx monorepo workspace","body":"- Nrwl's nx is a tool to develop multiple full-stack applications that share code between them all in the same workspace\n- These instructions show you how to set up an Nx workspace and in it, create an Angular and a React application which share a method from a utilities library.##nxbothkj\n- make workspace\n\t- `npx create-nx-workspace@latest nxworkspace001`\n\t\t- angular\n\t\t- `AngularApp`\n\t\t- SASS\n\t\t- ESLint instead of TSLint (ESLint supports both JavaScript and TypeScript)\n\t\t- use nx-cloud for hosting later\n- open in VSCode\n\t- install Angular Console VSCode plugin\n\t\t- VSCode should suggest it\n- install nx to install other components\n\t- `npm i -g nx`\n- add Node\n\t- `nx add @nrwl/node`\n\t\t- had to fix with:\n\t\t- `rm -rf node_modules`\n\t\t- `npm cache verify`\n\t\t- `npm install -g @nrwl/cli`\n\t\t- `npm install`\n- add utils\n\t- `nx g @nrwl/node:lib utils`\n\t- libs\\utils\\src\\lib\\utils.ts\n\t\t--------------------\n\t\texport function getTestMessage(message: string): string {\n\t\t\treturn `Test Message: ${message}.`;\n\t\t}\n\t\t--------------------\n- use in Angular app:\n\t- apps\\angular-app\\src\\app\\app.component.ts\n\t\t- `import { getTestMessage } from '@nxworkspace001/utils';`\n\t\t- in AppComponent\n\t\t\t- `message = getTestMessage(\"test of utils from Angular\");`\n\t- apps\\angular-app\\src\\app\\app.component.html\n\t\t- `<h1>Welcome to {{ title }}!<br/>{{message}}</h1>`\n- run application\n\t- `ng serve`\n\t\t- command not found, fixed with: `npm i -g @angular/cli`\n- create React application\n\t- `nx add @nrwl/react`\n\t\t- (app doesn't exist as directory yet)\n\t- `nx g @nrwl/react:app`\n\t\t- ReactApp\n\t\t- SASS\n\t\t- Router: yes\n- edit React application\n\t- apps\\react-app\\src\\app\\app.tsx\n\t\t- `import * from '@typescriptmono33/utils';\n\t\t- `const message = getTestMessage(\"test of utils from React\");`\n\t\t- `<h1>Welcome to react-app!<br /><br />{message }</h1>`\n- run React application\n\t- nx serve react-app\n\t- go to: http://localhost:4200","points":100,"extras":"$rank=4.2;$generalRank=4.9545","systemWhenCreated":"2020-11-01 11:00:53","systemWhoCreated":"systemUnknown"},{"id":310,"category":"CSS","title":"Responsive image cards with text","body":"- This template is good for overviews of articles or products where each has a related image. The resizing from computer-width to smartphone-width is smooth with this html/css code although I had trouble getting to to transition smoothly in a React/SASS site.##responsiveCardsText\n- index.html\n\t-------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"fr-FR\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n\t\t<title>Showcase: Responsive image columns with text</title>\n\n\t\t<link rel=\"stylesheet\" href=\"css/reset.css\" type=\"text/css\" media=\"all\">\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\" type=\"text/css\" media=\"all\">\n\n\t</head>\n\n\t<body>\n\n\t\t<header class=\"masthead\">\n\t\t\t<h1 class=\"site-title\">Showcase: Responsive image cards with text</h1>\n\t\t</header>\n\n\t\t<main class=\"main-area\">\n\n\t\t\t<div class=\"centered\">\n\n\t\t\t\t<div className=\"description\">\n\t\t\t\t\t<p>This is a responsive site that on computer-width shows three picture cards in a row, and on smartphone-width shows one. The margins work well.</p>\n\t\t\t\t\t<p>Area of improvement: the interim space between computer-width and smartphone-width is quite jump and makes little sense, so it would be good to smooth that out.</p>\n\t\t\t\t</div>\n\n\t\t\t\t<section class=\"cards\">\n\n\t\t\t\t\t<article class=\"card\">\n\t\t\t\t\t\t<div class=\"innerWrapper\">\n\t\t\t\t\t\t\t<figure class=\"thumbnail\">\n\t\t\t\t\t\t\t\t<img src=\"images/testImage.png\" alt=\"Une bananne qui ressemble à un oiseau\">\n\t\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t\t<div class=\"card-content\">\n\t\t\t\t\t\t\t\t<h2>Test Article</h2>\n\t\t\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas a mauris quam. Lorem\n\t\t\t\t\t\t\t\t\tipsum dolor sit amet, consectetur adipiscing elit. Nunc eget urna nec massa vehicula\n\t\t\t\t\t\t\t\t\tvulputate.</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</article>\n\n\t\t\t\t</section>\n\n\t\t\t</div>\n\n\t\t</main>\n\n\t</body>\n\n\t</html>\n\t-------------------------\n- main.css\n\t-------------------------\n\t.masthead {\n\t\tbackground: hsl(0, 0%, 20%);\n\t\tpadding: 0 30px;\n\t}\n\n\t.centered {\n\t\tmargin: 0 auto;\n\t\tpadding: 0 2em;\n\t\tmax-width: 52em;\n\t}\n\n\t.site-title {\n\t\tmargin: 0 0 1em;\n\t\tpadding: 1em 0;\n\t\tfont-weight: 300;\n\t\ttext-align: center;\n\t\tcolor: white;\n\t}\n\n\tbody {\n\t\tbackground:#ddd;\n\t}\n\n\t.card {\n\t\tbackground: white;\n\t\tmargin-bottom: 1em;\n\t}\n\n\t.card-content {\n\t\tpadding: 1.4em;\n\t}\n\n\t.card-content h2 {\n\t\tmargin-top: 0;\n\t\tmargin-bottom: 0.5em;\n\t\tfont-weight: normal;\n\t}\n\n\t/*Flexbox*/\n\t@media screen and (min-width: 40em) {\n\t\t.cards {\n\t\t\tdisplay: flex;\n\t\t\t/* justify-content: space-between; */\n\t\t\tflex-wrap: wrap;\n\t\t}\n\t\t.card {\n\t\t\tflex: 0 1 calc(50% - 1em);\n\t\t\tdisplay: flex;\n\t\t\tmargin-right: 1em;\n\t\t}\n\t}\n\t@media screen and (min-width: 60em) {\n\t\t.card {\n\t\t\tflex: 0 1 calc(33% - 1em);\n\t\t}\n\t}\n\t-------------------------\n- reset.css\n\t---------------------------\n\thtml {\n\t\tfont-family: sans-serif;\n\t\t-webkit-text-size-adjust: 100%;\n\t\t-ms-text-size-adjust:     100%;\n\t}\n\n\tbody {\n\t\tmargin: 0;\n\t\tbackground-color: tan;\n\t}\n\n\tarticle,\n\taside,\n\tdetails,\n\tfigcaption,\n\tfigure,\n\tfooter,\n\theader,\n\tmain,\n\tmenu,\n\tnav,\n\tsection,\n\tsummary {\n\t\tdisplay: block;\n\t}\n\n\taudio,\n\tcanvas,\n\tprogress,\n\tvideo {\n\t\tdisplay: inline-block;\n\t\tvertical-align: baseline;\n\t}\n\n\taudio:not([controls]) {\n\t\tdisplay: none;\n\t\theight: 0;\n\t}\n\n\t[hidden],\n\ttemplate {\n\t\tdisplay: none;\n\t}\n\n\ta {\n\t\tbackground-color: transparent;\n\t}\n\n\ta:active,\n\ta:hover {\n\t\toutline: 0;\n\t}\n\n\tabbr[title] {\n\t\tborder-bottom: 1px dotted;\n\t}\n\n\tb,\n\tstrong {\n\t\tfont-weight: bold;\n\t}\n\n\tdfn {\n\t\tfont-style: italic;\n\t}\n\n\th1 {\n\t\tfont-size: 2em;\n\t\tmargin: 0.67em 0;\n\t}\n\n\tmark {\n\t\tbackground: #ff0;\n\t\tcolor: #000;\n\t}\n\n\tsmall {\n\t\tfont-size: 80%;\n\t}\n\n\tsub,\n\tsup {\n\t\tfont-size: 75%;\n\t\tline-height: 0;\n\t\tposition: relative;\n\t\tvertical-align: baseline;\n\t}\n\n\tsup {\n\t\ttop: -0.5em;\n\t}\n\n\tsub {\n\t\tbottom: -0.25em;\n\t}\n\n\timg {\n\t\tdisplay: block;\n\t\tborder: 0;\n\t\twidth: 100%;\n\t\theight: auto;\n\t}\n\n\tsvg:not(:root) {\n\t\toverflow: hidden;\n\t}\n\n\tfigure {\n\t\tmargin: 0;\n\t}\n\n\thr {\n\t\tbox-sizing: content-box;\n\t\theight: 0;\n\t}\n\n\tpre {\n\t\toverflow: auto;\n\t}\n\n\tcode,\n\tkbd,\n\tpre,\n\tsamp {\n\t\tfont-family: monospace, monospace;\n\t\tfont-size: 1em;\n\t}\n\n\tbutton,\n\tinput,\n\toptgroup,\n\tselect,\n\ttextarea {\n\t\tcolor: inherit;\n\t\tfont: inherit;\n\t\tmargin: 0;\n\t}\n\n\tbutton {\n\t\toverflow: visible;\n\t}\n\n\tbutton,\n\tselect {\n\t\ttext-transform: none;\n\t}\n\n\tbutton,\n\thtml input[type=\"button\"],\n\tinput[type=\"reset\"],\n\tinput[type=\"submit\"] {\n\t\t-webkit-appearance: button;\n\t\tcursor: pointer;\n\t}\n\n\tbutton[disabled],\n\thtml input[disabled] {\n\t\tcursor: default;\n\t}\n\n\tbutton;-moz-focus-inner,\n\tinput;-moz-focus-inner {\n\t\tborder: 0;\n\t\tpadding: 0;\n\t}\n\n\tinput {\n\t\tline-height: normal;\n\t}\n\n\tinput[type=\"checkbox\"],\n\tinput[type=\"radio\"] {\n\t\tbox-sizing: border-box;\n\t\tpadding: 0;\n\t}\n\n\tinput[type=\"number\"];-webkit-inner-spin-button,\n\tinput[type=\"number\"];-webkit-outer-spin-button {\n\t\theight: auto;\n\t}\n\n\tinput[type=\"search\"] {\n\t\t-webkit-appearance: textfield;\n\t\tbox-sizing: content-box;\n\t}\n\n\tinput[type=\"search\"];-webkit-search-cancel-button,\n\tinput[type=\"search\"];-webkit-search-decoration {\n\t\t-webkit-appearance: none;\n\t}\n\n\tfieldset {\n\t\tborder: 1px solid #c0c0c0;\n\t\tmargin: 0 2px;\n\t\tpadding: 0.35em 0.625em 0.75em;\n\t}\n\n\tlegend {\n\t\tborder: 0;\n\t\tpadding: 0;\n\n\t}\n\n\ttextarea {\n\t\toverflow: auto;\n\t}\n\n\toptgroup {\n\t\tfont-weight: bold;\n\t}\n\n\ttable {\n\t\tborder-collapse: collapse;\n\t\tborder-spacing: 0;\n\t}\n\n\ttd,\n\tth {\n\t\tpadding: 0;\n\t}\n\t---------------------------","points":60,"extras":"$rank=4.7833","systemWhenCreated":"2020-11-02 16:56:41","systemWhoCreated":"systemUnknown"},{"id":311,"category":"CSS","title":"Three-screen responsive CSS Grid layout","body":"- notice we don't use grid-template-areas here (which are visually easier to understand for more complex grids), but that we use e.g. `grid-column: 1 / 3` which is short-hand for `grid-column-start: 1` and `grid-column-end: 3`:##threeWayGridCss\n- CSS:\n\t--------------------------------\n\t.grid-container{\n\t\tdisplay: grid;\n\t\tgrid-gap: 20px;\n\t\tmargin: 20px 10px;\n\t}\n\t@media screen and (min-width: 768px){\n\t\t.grid-container{\n\t\t\tgrid-template-columns: 1fr 350px;\n\t\t}\n\t\theader, footer{\n\t\t\tgrid-column: 1 / 3;\n\t\t}\n\t}\n\t@media screen and (min-width: 1024px){\n\t\t.grid-container{\n\t\t\tgrid-template-columns: 1fr 600px;\n\t\t\tgrid-template-rows: auto repeat(2, 1fr);\n\t\t}\n\t\tmain{\n\t\t\tgrid-row: 2 / 4;\n\t\t}\n\t\tfooter{\n\t\t\tgrid-column: 2 / 3;\n\t\t}\n\t}\n\t--------------------------------\n- HTML:\n\t------------------------------\n\t <section class=\"grid-container\">\n\t\t<header>\n\t\t\t<h1>Lorem ipsum dolor sit.</h1>\n\t\t</header>\n\t\t<main>\n\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex, maxime enim alias, illum blanditiis, amet eaque id illo accusantium eius nisi facere rerum? Beatae atque, tempora explicabo repellendus reiciendis consequuntur.</p>\n\t\t\t<p>Quis, porro praesentium pariatur corporis impedit assumenda eum vero quos blanditiis voluptate recusandae odio natus illum similique dolorem optio vitae doloribus mollitia voluptatibus consequuntur nesciunt perferendis aliquid, et nisi. Id.</p>\n\t\t\t<p>Atque ipsum, eos, excepturi optio dolore aliquid error placeat nemo magni, natus fuga! Molestiae modi assumenda sequi ullam velit perferendis eligendi, alias esse recusandae doloribus aut molestias nihil est reprehenderit?</p>\n\t\t\t<p>Eveniet, cupiditate repudiandae molestiae quos. Laboriosam magni, ullam tempore vitae repellendus temporibus possimus. Dolorum corrupti voluptatum, repellat cum praesentium facilis soluta quis porro aliquid itaque perferendis, nostrum libero fuga eaque?</p>\n\t\t</main>\n\t\t<aside>\n\t\t\tAside ipsum dolor sit amet, consectetur adipisicing elit. Dolorem, labore dolorum, fuga explicabo, placeat aliquid facere nesciunt illo animi neque dolores voluptatibus reprehenderit doloribus tenetur amet facilis sit quidem corrupti.\n\t\t</aside>\n\t\t<footer>Footer ipsum dolor sit amet, consectetur.</footer>\n\t</section>\n\t------------------------------","points":100,"extras":"$rank=4.8232;$generalRank=4.9928","systemWhenCreated":"2020-11-03 04:30:58","systemWhoCreated":"systemUnknown"},{"id":312,"category":"CSS","title":"Using Flexbox for left-right items with images","body":"- Back in CSS float-left/float-right days, it was a pain if not impossible to get a background-colored area to extend to full veritcal length of the area of text next to it that was various sizes. Now with Flexbox, it's easy, here an example of doing this as a responsive site with a computer and smartphone view:##sidebysideresponsive\n- HTML:\n\t----------------------------------\n\t<div class=\"item\">\n\t\t<div class=\"imageArea\">\n\t\t\t<div><img src=\"test.png\"></div>\n\t\t\t<p>Twitter</p>\n\t\t\t<p>Website</p>\n\t\t\t<p>LinkedIn</p>\n\t\t\t<p>Facebook</p>\n\t\t</div>\n\t\t<div class=\"description\">\n\t\t\t<div class=\"fullName\">First Lastname</div>\n\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente, necessitatibus.\n\t\t\t\tAccusamus cupiditate molestiae fugit quaerat omnis error accusantium commodi! Quae earum architecto\n\t\t\t\talias\n\t\t\t\tdolores nemo, incidunt quis quasi voluptas facilis.</p>\n\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit.\n\t\t\t\tSequi illo ipsum voluptatem esse? Quia, distinctio blanditiis, nesciunt quos fugiat architecto fugit\n\t\t\t\tquasi\n\t\t\t\tharum obcaecati iusto ducimus excepturi, nostrum perferendis atque doloremque sunt voluptates officia!\n\t\t\t\tCulpa\n\t\t\t\tnam deserunt debitis. Nem quae doloremque nulla ullam, dolorem\n\t\t\t\tconsectetur, vero expedita, magnam sed deserunt voluptatibus omnis obcaecati repellendus!</p>\n\t\t\t<p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sapiente voluptates perferendis sit optio\n\t\t\t\ttempore doloribus possimus\n\t\t\t\ttempora. Inventore aliquid et accusamus tenetur alias veritatis numquam quisquam quidem, dolores animi\n\t\t\t\tdistinctio veniam laudantium optio recusandae assumenda quos, a vero architecto sapiente vitae qui\n\t\t\t\tmagnam?\n\t\t\t\tQuisquam cum temporibus laborum. Ab, quam dolorum.</p>\n\t\t</div>\n\t</div>\n\t<div class=\"item\">\n\t\t<div class=\"imageArea\"><img src=\"test.png\">\n\t\t\t<p>Twitter</p>\n\t\t\t<p>Website</p>\n\t\t\t<p>LinkedIn</p>\n\t\t\t<p>Facebook</p>\n\t\t</div>\n\t\t<div class=\"description\">\n\t\t\t<div class=\"fullName\">First Lastname</div>\n\t\t\tLorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente, necessitatibus.\n\t\t\tAccusamus cupiditate molestiae fugit quaerat omnis error accusantium commodi! Quae earum architecto alias\n\t\t\tdolores nemo, incidunt quis quasi.\n\t\t\t<br /><br />\n\t\t\tLorem ipsum, dolor sit amet consectetur adipisicing elit. Ea omnis, natus molestiae a voluptatibus,\n\t\t\trecusandae minima in, minus earum saepe veritatis corporis! Dicta, harum? Excepturi placeat modi, cum\n\t\t\tconsectetur ullam quo numquam, eum qui voluptate perferendis animi voluptas nesciunt ratione molestiae\n\t\t\tofficiis rerum earum. Praesentium, exercitationem? Qui ipsum doloremque ipsa soluta recusandae repellendus\n\t\t\tmagnam, eos beatae velit tempore, nobis rerum optio, iusto provident aperiam enim ratione inventore! Dolore\n\t\t\tnesciunt neque asperiores suscipit vitae, quidem delectus, reprehenderit, nisi error non fugit!\n\t\t</div>\n\t</div>\n\t<div class=\"item\">\n\t\t<div class=\"imageArea\"><img src=\"test.png\">\n\t\t\t<p>Twitter</p>\n\t\t\t<p>Website</p>\n\t\t\t<p>LinkedIn</p>\n\t\t\t<p>Facebook</p>\n\t\t</div>\n\t\t<div class=\"description\">\n\t\t\t<div class=\"fullName\">First Lastname</div>\n\t\t\tLorem ipsum dolor sit amet consectetur adipisicing elit. Sapiente, necessitatibus.\n\t\t\tAccusamus cupiditate molestiae fugit quaerat omnis error accusantium commodi! Quae earum architecto alias\n\t\t\tdolores nemo, incidunt quis quasi voluptas facilis. Lorem ipsum dolor sit amet consectetur adipisicing elit.\n\t\t\tSequi illo ipsum voluptatem esse? Quia, distinctio blanditiis, nesciunt quos fugiat architecto fugit quasi\n\t\t\tharum obcaecati iusto ducimus excepturi, nostrum perferendis atque doloremque sunt voluptates officia! Culpa\n\t\t\tnam deserunt debitis. Voluptatem, blanditiis. Mollitia suscipit numquam blanditiis vitae inventore optio,\n\t\t\teaque omnis quam, iste maxime.\n\t\t</div>\n\t</div>\n\t----------------------------------\n- CSS: \n\t------------------------------\n\tbody {\n\t\tpadding: 20px;\n\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif\n\t}\n\n\t.item {\n\t\tdisplay: flex;\n\t\tjustify-content: flex-start;\n\t\tmargin-bottom: 20px;\n\t}\n\n\t.item .imageArea {\n\t\tmargin-right: 10px;\n\t\tbackground-color: #eee;\n\t\tpadding: 10px;\n\t\ttext-align: center;\n\t}\n\n\t.item .fullName {\n\t\tfont-weight: bold;\n\t\tmargin-top: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n\n\t/* smartphone view */\n\t@media (max-width: 577px) {\n\t\t.imageArea img {\n\t\t\twidth: 50px;\n\t\t}\n\n\t\t.item .imageArea {\n\t\t\tfont-size: .8em\n\t\t}\n\n\t\t.item .fullName {\n\t\t\tfont-size: 1em;\n\t\t}\n\t\t.item p {\n\t\t\tfont-size: .9em;\n\t\t}\n\t}\n\n\t/* computer/table view */\n\t@media (min-width: 578px) {\n\t\t.imageArea img {\n\t\t\twidth: 100px;\n\t\t}\n\n\t\t.item .imageArea {\n\t\t\tfont-size: 1.1em\n\t\t}\n\n\t\t.item .fullName {\n\t\t\tfont-size: 1.2em;\n\t\t}\n\t\t.item p {\n\t\t\tfont-size: 1.1em;\n\t\t}\n\t}\n\t------------------------------","points":60,"extras":"$rank=4.7883;$generalRank=4.99382","systemWhenCreated":"2020-11-04 17:06:10","systemWhoCreated":"systemUnknown"},{"id":313,"category":"CSS","title":"Responsive screens that show one, two, or three column content","body":"- each of the three sizes has a different number of columns, notice also `column-gap` and the trick that you have to pull the first paragraph up one line with `div.content p:nth-child(1)`:##threeScreensWithColumns\n- CSS:\n\t--------------------------------\n\tbody {\n\t\tbackground-color: rgb(6, 36, 6);\n\t\tpadding-top: 20px;\n\t}\n\n\tdiv.panel {\n\t\tbackground-color: darkgreen;\n\t\tmargin: 0 40px 40px 40px;\n\t\tcolor: rgb(197, 197, 175);\n\t\tfont-family: 'Courier New', Courier, monospace;\n\t\tpadding: 10px 30px 30px 30px;\n\t\tborder: 1px solid #999;\n\t\tborder-radius: 10px;\n\t}\n\n\tdiv.intro {\n\t\tfont-style: italic;\n\t\tfont-size: 1.3em;\n\t\tpadding: 0 40px;\n\t}\n\n\tdiv.content p:nth-child(1) {\n\t\tmargin-top: 0;\n\n\t}\n\n\t@media screen and (max-width: 1023px) {\n\t\tdiv.content {\n\t\t\tmargin-top: 20px;\n\t\t}\n\t\th1 {\n\t\t\tfont-size: 1.4em;\n\t\t}\n\t\tdiv.intro {\n\t\t\tfont-size: .9em;\n\t\t\tpadding: 0;\n\t\t\tcolor: lightyellow;\n\t\t}\n\t}\n\n\t@media screen and (min-width: 1024px) {\n\t\tdiv.content {\n\t\t\tmargin-top: 20px;\n\t\t\tcolumn-count: 2;\n\t\t\tcolumn-gap: 30px;\n\t\t}\n\t}\n\n\t@media screen and (min-width: 1281px) {\n\t\tdiv.content {\n\t\t\tmargin-top: 20px;\n\t\t\tcolumn-count: 3;\n\t\t\tcolumn-gap: 40px;\n\t\t}\n\t}\n\t--------------\n- HTML:\n\t--------------------------------\n\t<div class=\"panel\">\n\t\t<h1>The most important concepts in CSS today</h1>\n\t\t<div class=\"intro\">Lorem ipsum dolor, sit amet consectetur adipisicing elit. Minus eaque nihil, officiis\n\t\t\tadipisci, quo nobis, maxime quasi culpa tempora perferendis expedita exercitationem ratione necessitatibus\n\t\t\teius dolor illum ut fuga recusandae.</div>\n\t\t<div class=\"content\">\n\t\t\t<p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Asperiores nobis tempora eveniet nemo! Animi\n\t\t\t\tnostrum sunt magni libero qui vel inventore et saepe voluptas a velit veritatis quibusdam delectus\n\t\t\t\ttotam, at accusamus corrupti temporibus. Nisi fugit odit, aliquid ipsa itaque pariatur est repellendus\n\t\t\t\tdistinctio aliquam quis nulla sit reprehenderit consequatur numquam quia error, labore asperiores\n\t\t\t\tnecessitatibus! Ut ipsum neque, fuga nam, laboriosam ad temporibus repudiandae voluptas quos deleniti\n\t\t\t\tdolorum ex reprehenderit aperiam ab, saepe dolorem fugit esse omnis corporis perferendis.\n\t\t\t</p>\n\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Vel doloribus non neque officia architecto\n\t\t\t\tassumenda ipsam maxime, quasi, quo saepe sunt vero? Amet culpa aut earum necessitatibus laboriosam\n\t\t\t\tpraesentium fugit sit ipsum deserunt veniam reprehenderit ex accusantium ipsam repellendus mollitia\n\t\t\t\tquasi, sed pariatur cum natus iure officiis. Natus id, placeat consequuntur expedita eveniet provident\n\t\t\t\tab incidunt blanditiis dolorem dolores officia dolorum inventore a necessitatibus temporibus eos maiores\n\t\t\t\tquas, minus modi!</p>\n\t\t\t<p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Mollitia dolores, quo facere hic a sapiente\n\t\t\t\tminima velit earum, quia, tenetur rem. Magnam cupiditate dolore non id quas? Esse quibusdam quasi\n\t\t\t\tconsectetur molestiae voluptatibus quo temporibus obcaecati perferendis qui nihil ipsa accusamus, minima\n\t\t\t\taspernatur provident! Fuga deleniti harum tempora illo explicabo blanditiis illum, laudantium incidunt\n\t\t\t\tquae quos obcaecati. Expedita, at, natus adipisci inventore similique quas, non saepe et repellendus ex\n\t\t\t\texcepturi! Est tempore incidunt quo aliquid, inventore consequuntur nemo provident laboriosam earum,\n\t\t\t\tdoloremque quaerat impedit cupiditate eum molestias recusandae odio perspiciatis illum quas magnam!\n\t\t\t\tLaboriosam, optio minima dolor numquam sit consequatur! Beatae eligendi quia aut dolore architecto\n\t\t\t\tsoluta. Facilis provident aut officiis cum voluptate animi enim explicabo magnam placeat adipisci.\n\t\t\t\tInventore.</p>\n\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Id fugit temporibus a vitae? Explicabo incidunt\n\t\t\t\tcorporis voluptas quis cupiditate aperiam ad ut est suscipit amet, dolore consequuntur porro? Nesciunt\n\t\t\t\tminima tenetur laudantium quaerat nam, alias quas esse inventore iure modi amet dolore eligendi natus\n\t\t\t\tillo cumque tempore delectus et magni beatae id repellat soluta, earum sapiente. Consequatur voluptatem\n\t\t\t\teos tenetur quod ipsam magni minima placeat quos, maiores reprehenderit voluptatum accusantium a! Quia,\n\t\t\t\taut. Obcaecati reprehenderit nulla id eos aspernatur error tenetur minima nam omnis molestiae aliquam\n\t\t\t\tipsa labore nisi, voluptatem amet ex, sapiente praesentium ullam nobis deserunt eius. Dolores eaque\n\t\t\t\tmolestias, suscipit harum inventore eius sit tempora nihil voluptate maxime quod. Placeat ut nihil\n\t\t\t\tbeatae ipsum dolores, saepe iure molestias hic culpa. Consectetur fuga ab repellendus, excepturi, quae\n\t\t\t\toptio facere dicta odit ipsam magni atque! Vero doloremque earum suscipit obcaecati consectetur quaerat\n\t\t\t\tvoluptatibus voluptatum est qui laboriosam, beatae, quasi maiores aperiam excepturi quisquam optio\n\t\t\t\tperferendis eligendi necessitatibus sed dicta perspiciatis.</p>\n\t\t</div>\n\t</div>\n\t--------------------------------","points":100,"extras":"$rank=4.9123;$generalRank=4.95","systemWhenCreated":"2020-11-05 15:12:03","systemWhoCreated":"systemUnknown"},{"id":314,"category":"HTML","title":"Download and use Google fonts on web page","body":"- It's easy to add fonts to websites, particularly if you load them via the web, just search for your font and copy and paste:##fontsAndIntro\n- https://fonts.google.com\n\t- click on desired font\n\t- select style\n\t- View your selected families\n\t- copy into HEAD, e.g.\n\t\t- `<link href=\"https://fonts.googleapis.com/css2?family=Goldman&display=swap\" rel=\"stylesheet\">`\n\t- use font family name listed, full example:\n\t\t-----------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<link href=\"https://fonts.googleapis.com/css2?family=Goldman&display=swap\" rel=\"stylesheet\">\n\t\t\t<title>Fonts</title>\n\t\t\t<style>\n\t\t\t\tbody {\n\t\t\t\t\tpadding: 0 20px;\n\t\t\t\t}\n\t\t\t\th1 {\n\t\t\t\t\tfont-family: 'Goldman', cursive;\n\t\t\t\t}\n\t\t\t\tp {\n\t\t\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Introduction</h1>\n\t\t\t<p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Molestias assumenda sint numquam cupiditate doloribus, dolores itaque sit asperiores ea. Odit, neque magnam! Ipsum autem fugiat obcaecati molestiae ab itaque voluptates facilis dolor quisquam temporibus voluptas quia laudantium eos et placeat nobis quaerat tempora rerum, similique mollitia! Maiores corrupti nesciunt iusto deleniti architecto reprehenderit animi, perspiciatis magnam blanditiis. Ducimus, molestiae eaque. Porro, tenetur! Voluptatem veniam error recusandae facere dolorem consectetur aspernatur? Aut at, nobis quidem aliquid delectus perferendis a quae sunt laborum, doloremque ipsa illum voluptate itaque aspernatur earum impedit reprehenderit sed veniam sit perspiciatis numquam fugit consequuntur blanditiis. Laudantium voluptatibus mollitia consectetur sint voluptate cumque earum facere expedita inventore magnam ullam officiis neque dolorem error, animi eum eveniet autem cupiditate nobis exercitationem adipisci, nostrum excepturi eligendi ratione! Corporis ex vel voluptatibus amet eligendi ipsa, culpa?</p>\n\t\t</body>\n\n\t\t</html>\n\t\t-----------------------------------\n- you can also put the font reference in the style sheet:\n\t- `@import url('https://fonts.googleapis.com/css2?family=Goldman&display=swap');`\n- if you want to download the font files and access them locally:\n\t- download, unpack the main `ttf` file to `/fonts` e.g.\n\t\t- `Goldman-Regular.ttf`\n\t- replace HEAD with this:\n\t\t--------------------------------\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Fonts</title>\n\t\t\t<style>\n\t\t\t\t@font-face {\n\t\t\t\t\tfont-family: 'Goldman';\n\t\t\t\t\tsrc: url('fonts/Goldman-Regular.ttf') format('truetype');\n\t\t\t\t}\n\n\t\t\t\tbody {\n\t\t\t\t\tpadding: 0 20px;\n\t\t\t\t}\n\n\t\t\t\th1 {\n\t\t\t\t\tfont-family: 'Goldman', cursive;\n\t\t\t\t}\n\n\t\t\t\tp {\n\t\t\t\t\tfont-family: Arial, Helvetica, sans-serif\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\t\t--------------------------------","points":40,"extras":"$rank=4.9343","systemWhenCreated":"2020-11-09 16:12:31","systemWhoCreated":"systemUnknown"},{"id":315,"category":"CSS","title":"Syntax for CSS calc() and custom properties","body":"- CSS custom properties are useful if you need SASS variables but don't happen to have SASS\n- notice that `largeSize` is calculated from `normalSize`\n- notice also that you can change the colors and multiple elements change colors:##custompropsandcalc\n- HTML and CSS:\n\t---------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>CSS Properties</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tpadding: 0 20px;\n\t\t\t}\n\t\t\t:root {\n\t\t\t\t--normalSize: 1em;\n\t\t\t\t--largeSize: calc(var(--normalSize) * 1.3);\n\t\t\t\t--colorBad: tomato;\n\t\t\t\t--colorWarn: darkorange;\n\t\t\t\t--colorGood: darkgreen;\n\t\t\t}\n\n\t\t\tp.errorMessage {\n\t\t\t\tfont-size: var(--largeSize);\n\t\t\t\tcolor: var(--colorBad);\n\t\t\t}\n\n\t\t\tp.careful {\n\t\t\t\tfont-size: var(--normalSize);\n\t\t\t\tcolor: var(--colorWarn);\n\t\t\t}\n\n\t\t\tp.success {\n\t\t\t\tfont-size: var(--normalSize);\n\t\t\t\tcolor: var(--colorGood);\n\t\t\t}\n\n\t\t\th1.error {\n\t\t\t\tcolor: var(--colorBad);\n\t\t\t}\n\n\t\t\th1.warning {\n\t\t\t\tcolor: var(--colorWarn);\n\t\t\t}\n\n\t\t\th1.successHeader {\n\t\t\t\tcolor: var(--colorGood);\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<h1 class=\"error\">Message:</h1>\n\t\t<p class=\"errorMessage\">This is an error.</p>\n\t\t<hr>\n\t\t<h1 class=\"warning\">Message:</h1>\n\t\t<p class=\"careful\">This is an warning.</p>\n\t\t<hr>\n\t\t<h1 class=\"successHeader\">Message:</h1>\n\t\t<p class=\"success\">Congratulations.</p>\n\t</body>\n\n\t</html>\n\t---------------------------","points":40,"extras":"$rank=4.9","systemWhenCreated":"2020-11-10 17:02:48","systemWhoCreated":"systemUnknown"},{"id":316,"category":"JavaScript","title":"Use regex to replace starred words in sentence with blanks","body":"- note that that `?` in the regular expression is a non-greedy expression so that the regex only selects each word and not the beginning of the first word to the end of the last word##replaceJavascriptRegexok\n- test.js\n\t----------------------------------\n\tconst regex = /(\\*.*?\\*)/;\n\tconst sentence = \"Using Bootstrap Grid means writing more *HTML*. Using CSS Grid means writing more *CSS*.\";\n\n\tconst replaceAllRegex = (text, regex, replace) => text.replace(new RegExp(regex, 'g'), replace);\n\n\tconst clozeSentence = replaceAllRegex(sentence, regex, '[_________]');\n\n\tconsole.log(regex);\n\tconsole.log(sentence);\n\tconsole.log(clozeSentence);\n\t----------------------------------","points":30,"extras":"$rank=4.838742;$generalRank=4.7823","systemWhenCreated":"2020-11-10 18:08:03","systemWhoCreated":"systemUnknown"},{"id":317,"category":"firefox","title":"Firefox Bookmark Import/Export and Main Password","body":"- it's a good habit to backup your bookmarks in case your computer crashes or Firefox reinstalls and doesn't bring back your passwords (has happened to me)\n- it's a bit hidden in the newest version of Firefox so here's how\n- export passwords:\n\t- right-click on top of Firefox, Menu Bar##ffoxmenu\n\t- Bookmarks\n\t- Show all bookmarks\n\t- Import and Backup\n\t- Export Bookmarks to HTML...\n- it's also a good idea to set a master password so that others can log in as you even on sites for which Firefox has saved your password:\n\t- three-lines button\n\t- options\n\t- type in password","points":20,"extras":"$rank=4.912;$generalRank=3.4","systemWhenCreated":"2020-11-11 10:02:37","systemWhoCreated":"systemUnknown"},{"id":318,"category":"CSS","title":"Make a DIV pop out at the user and rotate on mouseover","body":"- note that multiple transforms are simply separated by a space##aboutbooksokdjf\n- HTML:\n\t-------------------------\n\t<div class=\"message\">If you want more information about these books, be sure to sign up for our newsletter.</div>\n\t-------------------------\n- CSS:\n\t--------------------------------\n\tdiv.message {\n\t\tbackground-color: orange;\n\t\tpadding: 10px;\n\t\twidth: 200px;\n\t}\n\n\tdiv.message:hover {\n\t\ttransform: rotate(5deg) scale(1.1, 1.1);\n\t\tcursor: pointer;\n\t}\n\t--------------------------------","points":20,"extras":"$rank=4.9121;$generalRank=4.9439","systemWhenCreated":"2020-11-11 14:19:43","systemWhoCreated":"systemUnknown"},{"id":319,"category":"CSS","title":"Use Font Awesome icons as UL-list icons in a color box","body":"- note that for the LI element, *margin-left* has to be the negative of *width*##loremWithFontAwesome\n- test.html\n\t---------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n\t\t<link rel=\"stylesheet\" type=\"text/css\"\n\t\t\thref=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t<title>Document</title>\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tpadding: 10px 20px;\n\t\t\t}\n\n\t\t\tul {\n\t\t\t\tbackground: #ff9999;\n\t\t\t\tpadding: 20px 20px 20px 0;\n\t\t\t\tlist-style-type: none;\n\t\t\t\twidth: 400px;\n\t\t\t}\n\n\t\t\tli:before {\n\t\t\t\tcontent: \"\\f0a9\";\n\t\t\t\tfont-family: FontAwesome;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tmargin-left: -1.6em;\n\t\t\t\twidth: 1.6em;\n\t\t\t}\n\n\t\t\tul li {\n\t\t\t\tbackground: #ffe5e5;\n\t\t\t\tpadding: 5px;\n\t\t\t\tmargin-left: 35px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<ul>\n\t\t\t<li>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Officia ipsa odit harum eum at hic, sit corrupti\n\t\t\t\tasperiores exercitationem ab ea, quae, cumque tempora cum voluptatem facilis aut neque nisi.</li>\n\t\t\t<li>Lorem ipsum dolor sit amis dolorem aspernatur assumenda distinctio. Quia qui quas debitis perspiciatis,\n\t\t\t\tlabore itaque!</li>\n\t\t\t<li>Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam, animi pariatur culpa porro ea, repudiandae\n\t\t\t\tcum velit ab aut quam ipsum incidunt doloribus non. Et inventore in nulla mollitia sint autem quos atque,\n\t\t\t\trepellat cupiditate voluptatem r ut vero vel. Vel, veniam, nostrum facilis reiciendis optio, corporis magni\n\t\t\t\tdicta repellendus veritatis perferendis omnis.</li>\n\n\t\t</ul>\n\t</body>\n\n\t</html>\n\t---------------------------------------","points":30,"extras":"$rank=4.7283723;$generalRank=4.573434","systemWhenCreated":"2020-11-11 15:23:03","systemWhoCreated":"systemUnknown"},{"id":320,"category":"CSS","title":"Center text vertically and horizontally in a DIV","body":"- centering text horizontally and particularly vertically in a DIV is not trivial\n- the trick is to put the text inside an inner DIV and then use `position: absolute`, `top`, `left` and `transform: translate()` to position it##theCenteredText\n- note sliders with Vue.js are straight-forward\n- test.html\n\t----------------------------\n\t<!DOCTYPE html>\n\t<html>\n\n\t<head>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t<style>\n\t\t\t.center {\n\t\t\t\tposition: relative;\n\t\t\t\tborder: 3px solid green;\n\t\t\t}\n\n\t\t\t.center div {\n\t\t\t\tmargin: 0;\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 50%;\n\t\t\t\tleft: 50%;\n\t\t\t\ttransform: translate(-50%, -50%);\n\t\t\t\ttransition: width 1s;\n\t\t\t}\n\n\t\t\t.center:hover {\n\t\t\t\twidth: 600px;\n\t\t\t}\n\n\t\t\t.messageText {\n\t\t\t\twidth: 500px;\n\t\t\t}\n\n\t\t\t.control {\n\t\t\t\tmargin-bottom: 7px;\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.control .label {\n\t\t\t\tmargin-right: 5px;\n\t\t\t\tmargin-top:1px;\n\t\t\t\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\t\t\t}\n\t\t\t.control .data {\n\t\t\t\tmargin-right: 5px;\n\t\t\t\tmargin-top:1px;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\n\t\t<div id=\"app\">\n\t\t\t<div class=\"control\"><span class=\"label\">Text:</span><input class=\"messageText\" type=\"text\" v-model=\"message\" /></div>\n\t\t\t<div class=\"control\"><span class=\"label\">Width:</span><input type=\"range\" min=\"100\" max=\"500\" v-model=\"theWidth\" @change=\"changeWidth()\"><span class=\"data\">{{theWidth}}px</span></div>\n\t\t\t<div class=\"control\"><span class=\"label\">Height:</span><input type=\"range\" min=\"100\" max=\"500\" v-model=\"theHeight\" @change=\"changeHeight()\"><span class=\"data\">{{theHeight}}px</span></div>\n\t\t\t<div class=\"control\"><span class=\"label\">Font-Size:</span><input type=\"range\" min=\"15\" max=\"99\" v-model=\"theFontSize\" @change=\"changeFontSize()\"><span class=\"data\">{{theFontSize}}px</span></div>\n\t\t\t<hr />\n\n\t\t\t<!-- { height: theHeight + 'px' } -->\n\t\t\t<div class=\"center\" :style=\"{ width: theWidth + 'px', height: theHeight + 'px', fontSize: theFontSize + 'px' }\">\n\t\t\t\t<div>{{message}}</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<script>\n\t\t\tconst app = new Vue({\n\t\t\t\tel: \"#app\",\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: '',\n\t\t\t\t\ttheWidth: 300,\n\t\t\t\t\ttheHeight: 200,\n\t\t\t\t\ttheFontSize: 25\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize: function () {\n\t\t\t\t\t\tthis.message = 'Centered text.';\n\t\t\t\t\t},\n\t\t\t\t\tchangeWidth: function () {\n\t\t\t\t\t\tconsole.log(this.theWidth);\n\t\t\t\t\t},\n\t\t\t\t\tchangeHeight: function () {\n\t\t\t\t\t\tconsole.log(this.theHeight);\n\t\t\t\t\t},\n\t\t\t\t\tchangeFontSize: function () {\n\t\t\t\t\t\tconsole.log(this.theFontSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\n\t</html>\n\t----------------------------","points":20,"extras":"$rank=4.75857;$generalRank=4.8923; $idCode=centeredTextInDiv","systemWhenCreated":"2020-11-13 15:18:27","systemWhoCreated":"systemUnknown"},{"id":321,"category":"CSS","title":"Images that on mouse hover spin out and show info label","body":"- this works by expanding the height of the DIV on hover to show the hidden text:##peopleSpinDivCss\n- index.html\n\t---------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>spin div</title>\n\n\n\t\t<style>\n\t\t\t.item {\n\t\t\t\twidth: 100px;\n\t\t\t\theight: 100px;\n\t\t\t\tmargin: 0 10px 10px 0;\n\t\t\t\tbackground: #333;\n\t\t\t\ttext-align: center;\n\t\t\t\tpadding: 0;\n\t\t\t\ttransition: font-size .3s, width .3s, height .3s, transform .3s, padding .3s;\n\t\t\t}\n\n\t\t\t.item .info {\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: ivory;\n\t\t\t}\n\n\t\t\t.item:hover {\n\t\t\t\twidth: 100px;\n\t\t\t\theight: 120px;\n\t\t\t\tfont-size: 1.6em;\n\t\t\t\ttransform: rotate(360deg);\n\t\t\t\tpadding: 10px;\n\t\t\t}\n\n\t\t\t.wrapper {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t\twidth: 500px;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class=\"wrapper\">\n\t\t\t<div class=\"item\"><img src=\"person_benjaminrush_large.jpg\" alt=\"\">\n\t\t\t\t<div class=\"info\">Benjamin Rush</div>\n\t\t\t</div>\n\t\t\t<div class=\"item\"><img src=\"person_gustavedore_large.jpg\" alt=\"\">\n\t\t\t\t<div class=\"info\">Gustave Doré</div>\n\t\t\t</div>\n\t\t\t<div class=\"item\"><img src=\"person_jacqueslouisdavid_large.jpg\" alt=\"\">\n\t\t\t\t<div class=\"info\">Jacques Louis David</div>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n\n\t</html>\n\t---------------------------","points":60,"extras":"$rank=4.912;$generalRank=4.92328;$idCode=cssCenterDivSpinHover","systemWhenCreated":"2020-11-13 17:50:50","systemWhoCreated":"systemUnknown"},{"id":322,"category":"vim","title":"Download, install and customize Vim on Windows","body":"- these instructions help you get vim up and running and customized fast on Windows##vimShowingDarkBackground\n- download and install\n\t- https://www.vim.org\n\t- right-click *gvim82.exe* and save\n\t- execute\n- save icon to task bar\n\t- if it installed *Vim* and *gVim*, then use **gVim** (this is what is loaded with Explorer-right-click-open-with-Vim)\n- customize\n\t- open and see white background with retro font\n\t- Edit > Startup Settings\n\t- File > Save As > c:\\users\\(yourUserName)\n\t- replace contents of file with these custom settings:\n\t--------------------------\n\tset guifont=Courier\\ New:h8\n\thighlight Normal guifg=gray guibg=#1E1E1E\n\tset tabstop=4\n\tset shiftwidth=4\n\tset softtabstop=4\n\tset number\n\n\t\"KEY REMAPPINGS\n\tnoremap <SPACE> <C-F> \" space-bar = page-down\n\tnoremap <TAB> } \"TAB = move to next block\n\tnnoremap <F9> :echo system('python3 \"' . expand('%') . '\"')<cr>\n\n\t\"ABBREVIATIONS\n\tabb _imprea import React, { Component } from 'react';\n\t--------------------------\n- trouble shooting\n\t- if the above customizations don't take effect, then copy them into these files to see if they have an effect:\n\t\t- `C:\\Program Files (x86)\\Vim_vimrc`\n\t\t- `C:\\Program Files (x86)\\Vim\\vim82\\vimrc_example.vim`","points":40,"extras":"$rank=4.1;$generalRank=3.6","systemWhenCreated":"2020-11-15 13:08:11","systemWhoCreated":"systemUnknown"},{"id":323,"category":"Windows","title":"Change default sound on Windows","body":"- this is the sound that you get e.g. when you are in the Vim editor and press ESC too many times\n\t- changing it as described belong makes it a much softer, less irritating sound\n- Settings > Personalize > Themes > Sounds\n- Change *Default Sound* to *ToolTip*##windowsDefaultSound","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2020-11-16 03:12:56","systemWhoCreated":"systemUnknown"},{"id":324,"category":"regex","title":"Get an array of matches from a string with regex","body":"- note that you need the global marker `/g` at the end of regex##thefindinregexok\n- test.js\n\t---------------------------\n\tconst text = 'You can spell it either color or colour if you are talking about color.';\n\tconst regex = /colou?r/g;\n\tconst words = text.match(regex);\n\n\tconsole.log(words)\n\t---------------------------","points":30,"extras":"$rank=4.7834;$generalRank=4.78343","systemWhenCreated":"2020-11-16 11:12:30","systemWhoCreated":"systemUnknown"},{"id":325,"category":"python","title":"Install Python and Tkinter on Ubuntu","body":"- these instructions get you up and running with Python3 on Ubuntu including Tkinter##theubuntupythoninstall\n- install\n\t- `sudo apt update`\n\t- `sudo apt install software-properties-common`\n\t- `sudo add-apt-repository ppa:deadsnakes/ppa`\n\t- `sudo apt update`\n\t- `sudo apt install python3.8`\n\t- `python3 --version`\n\t\t- should show: *Python 3.8.2*\n- test basic program\n\t- test.py\n\t\t-------------------\n\t\tprint(\"hello\")\n\t\t-------------------\n\t- `python3 test.py`\n- test tkinter\n\t- `sudo apt-get install python3-tk`\n\t- testtk.py\n\t\t---------------------\n\t\tfrom tkinter import *\n\t\twindow = Tk()\n\t\twindow.title(\"Test Tkinter App\")\n\t\twindow.mainloop()\n\t\t---------------------\n\t- `python3 testtk.py`","points":30,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2020-11-17 16:49:50","systemWhoCreated":"systemUnknown"},{"id":326,"category":"python","title":"Install Python on Windows","body":"- these instructions will get you up and running with Python and Tkinter on Windows##wintestpythontkinter\n- install\n\t- **NOTE: The easiest way to install Python on Windows 10 is, at the command line, type \"python\", it will take you into an install window, install, and you're done.**\n\t- https://www.python.org/downloads/windows\n\t- click latest version\n\t- download this one: *Windows x86-64 executable installer*\n\t- Install now\n- test basic program\n\t- test.py\n\t\t-------------------\n\t\tprint(\"hello\")\n\t\t-------------------\n\t- `python test.py`\n- test tkinter\n\t- Tkinter should be available by default\n\t- testtk.py (don't call it \"tkinter.py\", there will be a conflict)\n\t\t---------------------\n\t\tfrom tkinter import *\n\t\twindow = Tk()\n\t\twindow.title(\"Test Tkinter App\")\n\t\twindow.mainloop()\n\t\t---------------------\n\t- `python testtk.py`\n- trouble-shooting\n\t- if it can't start Python at the command line, or starts an older version (2.7 in my case)\n\t\t- Windows Settings\n\t\t- App and Features\n\t\t- Aliases for App Execution\n\t\t- turn off both Python entries\n\t\t- delete c:\\Python2.7\n\t\t- reinstall 3.9\n\t\t- modify install: click checkboxes to add environment variables\n\t\t- it then started python","points":30,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2020-11-18 09:50:55","systemWhoCreated":"systemUnknown"},{"id":327,"category":"python","title":"Convert Tkinter .py file to single executable .exe file","body":"- these instructions show you how to convert a Python-Tkinter *.py* file to an .exe file that you can execute by clicking an icon on your taskbar:##tkinterexeapp\n- create `tk_two_buttons_with_class.py`:\n\t--------------------------\n\tfrom tkinter import *\n\tfrom tkinter import ttk\n\n\tclass HelloApp:\n\n\t\tdef __init__(self, master):\n\n\t\t\tself.label = ttk.Label(master, text = \"English: house\")\n\t\t\tself.label.grid(row = 0, column = 0, columnspan = 2)\n\n\t\t\tttk.Button(master, text = \"German\",\n\t\t\t\t\t   command = self.german_hello).grid(row = 1, column = 0)\n\n\t\t\tttk.Button(master, text = \"French\",\n\t\t\t\t\t   command = self.french_hello).grid(row = 1, column = 1)\n\n\t\tdef german_hello(self):\n\t\t\tself.label.config(text = 'das Haus')\n\n\t\tdef french_hello(self):\n\t\t\tself.label.config(text = 'la maison')\n\n\tdef main():            \n\n\t\troot = Tk()\n\t\tapp = HelloApp(root)\n\t\troot.mainloop()\n\n\tif __name__ == \"__main__\": main()\n\t--------------------------\n- `pip install pinstaller`\n- `pyinstaller --onefile --noconsole tk_two-buttons_with_class.py`\n- copy the `dist/tk_two-buttons_with_class.exe` file to e.g. *c:\\apps*\n- right-click, pin to taskbar","points":70,"extras":"$rank=4.91;$generalRank=4.94545","systemWhenCreated":"2020-11-18 14:17:46","systemWhoCreated":"systemUnknown"},{"id":328,"category":"python","title":"Read data from MySQL with Python","body":"- I installed a MySQL 8.0 database and was able to connect to it easily with the following code, note when you install the connector, make sure you are in the command window as administrator:##thepythonmysqlok\n- open CMD as administrator\n\t- `python -m pip install mysql-connector-python`\n- create `test_mysql.py`\n\t---------------------------\n\timport mysql.connector\n\n\tmydb = mysql.connector.connect(\n\t\thost=\"localhost\",\n\t\tuser=\"root\",\n\t\tport=\"3307\",\n\t\tpassword=\"rootroot\",\n\t\tdatabase=\"onespace\"\n\t)\n\n\tmycursor = mydb.cursor()\n\n\tmycursor.execute(\"SELECT * FROM persons\")\n\n\tmyresult = mycursor.fetchall()\n\n\tfor x in myresult:\n\t\tprint(x)\n\t---------------------------","points":60,"extras":"$rank=4.78;$generalRank=4.9545","systemWhenCreated":"2020-11-19 01:55:52","systemWhoCreated":"systemUnknown"},{"id":329,"category":"MySQL","title":"Install MySQL 5.7.32 and MySQL Workbench on Windows and read data out with Python","body":"- these instructions show two failed attempts at installing MySQL, the problem was the Internet connection or proxy, etc. and the solution was to download the full MSI install file instead of the web version that goes back to the Internet to download parts it needs\n- note that MySQL 8.0 should can be installed the same way (with the full MSI file), but I chose the 5.7.32 version since I know it is more compatible with PHP 7.2##mysqlinstallandpython\n- **FAILED:** install MySQL 8.0\n\t- download MSI file\n\t\t- https://www.mysql.com/downloads\n\t\t- scroll down (difficult to find), click **MySQL Community (GPL) Downloads**\n\t\t- MySQL Community Server\n\t\t\t- or just go here: https://dev.mysql.com/downloads/mysql\n\t\t- click [[Go to Download Page]]\n\t\t- choose first option, **Windows (x86, 32-bit), MSI Installer** which is **2.5M**\n\t\t- click **No thanks, just start my download.**\n\t- install MySQL\n\t\t- execute the downloaded MSI file\n\t\t- choose **Developer Default**\n\t\t- click [[Execute]]\n\t\t\t- **error**: Download of package 'MySQL Server 8.0.22' failed with message No valid download found for product MySQL Server 8.0.22\n- **FAILED:** install MySQL 5.7.32 instead \n\t- download MSI file\n\t\t- click **Looking for the latest GA version?**\n\t\t- click **Windows (x86, 32-bit), MSI Installer - 5.7.32 - 2.5M** [[Download]]\n\t\t- click **No thanks, just start my download.**\n\t- install MySQL \n\t\t- double-click: mysql-installer-web-community-5.7.32.0.msi\n\t\t- choose **Developer Default**\n\t\t- [[Next]]\n\t\t- **SAME ERROR AS WITH MYSQL 8.0**##mysqlcantinstallload\n- install MySQL 5.7.32 **LARGER SIZE**\n\t- download MSI file\n\t\t- https://www.mysql.com/downloads\n\t\t- scroll down (difficult to find), click **MySQL Community (GPL) Downloads**\n\t\t- MySQL Community Server\n\t\t\t- or just go here: https://dev.mysql.com/downloads/mysql\n\t\t- click [[Go to Download Page]]\n\t\t- choose first option, **Windows (x86, 32-bit), MSI Installer - 5.7.32** which is **487.5M**\n\t\t- click **No thanks, just start my download.**\n\t- install MySQL\n\t\t- double-click: mysql-installer-community-5.7.32.0 (**499 MB**)\n\t\t- choose **Developer Default** [[Next]]\n\t\t- All products should say \"Ready to Install\": [[Execute]]\n\t\t\t- takes 10 minutes to install\n\t\t- [[Next]]\n\t\t- [[Next]]\n\t\t- Leave as **Development Computer** and **3306** [[Next]]\n\t\t- root password: `rootroot` \n\t\t- [[Next]]\n\t\t- leave name as **MySQL57** [[Next]]\n\t\t- [[Next]]\n\t\t- [[Execute]] etc. (allow it to install everything, e.g. samples etc.)\n- MySQL Workbench \n\t- should be installed installed\n\t- login\n\t- check to make sure it installed the schema (database) \"world\" and has a table \"city\"\n- read MySQL data from Python\n\t- open CMD as administrator\n\t\t- `python -m pip install mysql-connector-python`\n\t- testmysql.py\n\t\t---------------------------\n\t\timport mysql.connector\n\n\t\tmydb = mysql.connector.connect(\n\t\t\thost=\"localhost\",\n\t\t\tuser=\"root\",\n\t\t\tport=\"3306\",\n\t\t\tpassword=\"rootroot\",\n\t\t\tdatabase=\"world\"\n\t\t)\n\n\t\tmycursor = mydb.cursor()\n\n\t\tmycursor.execute(\"SELECT * FROM city\")\n\n\t\tmyresult = mycursor.fetchall()\n\n\t\tfor x in myresult:\n\t\t\tprint(x)\n\t\t---------------------------","points":20,"extras":"$rank=4.783;$generalRank=4.81212","systemWhenCreated":"2020-11-19 10:37:15","systemWhoCreated":"systemUnknown"},{"id":330,"category":"Deno","title":"Install Deno with Chocolately and get running with Oak","body":"- these instructions show you how to install the package manager Chocolately on Windows, and then use it to install Deno##denoChocolately\n- install Chocolately\n\t- open command prompt window as administrator\n\t- `@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"`\n\t- exit command prompt window\n- install Deno\n\t- open command prompt window as administrator again\n\t- `choco install deno`\n- test Deno\n\t- create directory \"deno222\"\n\t- open in VSCode\n\t- create `test.ts`\n\t\t---------------------\n\t\tlet firstName: string = \"Pietro\";\n\t\tconsole.log(firstName);\n\t\t---------------------\n\t- execute it with `deno run test.ts`\n- test Oak\n\t- like Express but inspired by Koa\n\t- create `server.ts`\n\t\t-------------------------------\n\t\timport { Application } from \"https://deno.land/x/oak/mod.ts\";\n\n\t\tconst app = new Application();\n\t\tconst url = \"127.0.0.1:8003\";\n\n\t\tapp.use((ctx) => {\n\t\t\tctx.response.body = \"Hello world.\";\n\t\t});\n\n\t\tconsole.log(`Listening at: http://${url}`);\n\t\tawait app.listen(url);\n\t\t-------------------------------\n\t- execute with `deno run --allow-net server.ts`","points":50,"extras":"$rank=4.54;$generalRank=4.65","systemWhenCreated":"2020-11-21 13:07:29","systemWhoCreated":"systemUnknown"},{"id":331,"category":"PHP","title":"New features in PHP 7.4","body":"- This PHP file demonstrates the major new features in PHP 4.7: arrow functions, typed class properties, typed class properties, improved type variance, null coalescing assignment operator, numeric literal separator, array spread operator, and foreign function interface (FFI)##php74ArrowFunctions\n- index.php \n\t-------------------------------------------\n\t<?php\n\techo '<h1>New in PHP 7.4</h1>';\n\techo '<p>PHP 7.4 was released in November 2019</p>';\n\n\t// ======================================\n\techo '<h2>Arrow Functions</h2>';\n\t// ======================================\n\techo '<pre>';\n\n\t// before PHP 7.4\n\tfunction multiplier($v) {\n\t  return($v*$v);\n\t}\n\t$a=array(1,2,3,4,5);\n\tprint_r(array_map(\"multiplier\",$a));\n\n\t// PHP 7.4\n\tprint_r(array_map(fn($v) => $v*$v, $a));\n\n\techo '</pre>';\n\n\t// ======================================\n\techo '<h2>Typed Class Properties</h2>';\n\t// ======================================\n\techo '<pre>';\n\tclass Person {\n\t\tpublic string $firstName;\n\t\tpublic string $lastName;\n\t\tpublic int $score;\n\t}\n\n\t$person = new Person();\n\t$person->firstName = \"Harry\";\n\t$person->lastName = \"Harlow\";\n\t// Fatal error:  Uncaught TypeError: Typed property Person;$score must be int, string used \n\t// $person->score = \"nnn\";\n\t$person->score = 50;\n\n\tprint_r($person);\n\techo '</pre>';\n\n\n\t// ======================================\n\techo '<h2>Improved Type Variance</h2>';\n\t// ======================================\n\techo '<pre>';\n\n\tabstract class Animal\n\t{\n\t\tprotected string $name;\n\n\t\tpublic function __construct(string $name)\n\t\t{\n\t\t\t$this->name = $name;\n\t\t}\n\n\t\tabstract public function speak();\n\t}\n\n\tclass Dog extends Animal\n\t{\n\t\tpublic function speak()\n\t\t{\n\t\t\techo $this->name . \" barks\";\n\t\t}\n\t}\n\n\tclass Cat extends Animal \n\t{\n\t\tpublic function speak()\n\t\t{\n\t\t\techo $this->name . \" meows\";\n\t\t}\n\t}\n\n\tinterface AnimalShelter\n\t{\n\t\tpublic function adopt(string $name): Animal;\n\t}\n\n\tclass CatShelter implements AnimalShelter\n\t{\n\t\t// we can now return Dog instead of Animal\n\t\tpublic function adopt(string $name): Cat \n\t\t{\n\t\t\treturn new Cat($name);\n\t\t}\n\t}\n\n\tclass DogShelter implements AnimalShelter\n\t{\n\t\t// we can now return Dog instead of Animal\n\t\tpublic function adopt(string $name): Dog \n\t\t{\n\t\t\treturn new Dog($name);\n\t\t}\n\t}\n\n\t$cat = (new CatShelter)->adopt(\"Fluffy\");\n\t$cat->speak();\n\techo \"\\n\";\n\n\t$dog = (new DogShelter)->adopt(\"Spot\");\n\t$dog->speak();\n\techo '</pre>';\n\n\n\t// ======================================\n\techo '<h2>Null Coalescing Assignment Operator</h2>';\n\t// ======================================\n\techo '<pre>';\n\t$messages = [\n\t\t\"warning\" => \"This is a warning.\",\n\t\t\"error\" => \"This is an error.\"\n\t];\n\t$messages['warning'] ??= \"(default message)\";\n\t$messages['title'] ??= \"(default message)\";\n\tprint_r($messages['warning']);\n\tprint_r(\"\\n\");\n\tprint_r($messages['title']);\n\techo '</pre>';\n\n\n\t// ======================================\n\techo '<h2>Numeric Literal Separator</h2>';\n\t// ======================================\n\techo '<pre>';\n\t$number1 = 8374928347;\n\t$number2 = 8_374_928_347; // underlines make it easier to read\n\tprint_r($number1 + 1);\n\tprint_r(\"\\n\");\n\tprint_r($number2 + 1);\n\techo '</pre>';\n\n\n\t// ======================================\n\techo '<h2>Array Spread Operator</h2>';\n\t// ======================================\n\techo '<pre>';\n\t$firstNumbers = [1, 2, 3];\n\t$middleNumbers = [4, 5];\n\t$result = [0, ...$firstNumbers, ...$middleNumbers, 6 ,7];\n\tprint_r($result);\n\techo '</pre>';\n\n\t// ======================================\n\techo '<h2>Foreign Function Interface (FFI)</h2>';\n\t// ======================================\n\techo \"FFI allows the loading of shared libraries (.DLL or .so), calling of C functions, and accessing of C data structures in pure PHP, without having to have deep knowledge of the Zend extension API. Enables PHP extensions could be written in pure PHP and loaded via Composer. See <a href=\\\"https://www.php.net/manual/en/ffi.examples-basic.php\\\">examples</a>.\";\n\t-------------------------------------------","points":100,"extras":"$rank=2.9;$generalRank=3.6","systemWhenCreated":"2020-11-21 18:00:15","systemWhoCreated":"systemUnknown"},{"id":332,"category":"Svelte","title":"Create a Svelte website and publish it at Netlify","body":"- these instructions show you how to set up a basic Svelte website locally, edit it, upload it to GitHub, and publish it to Netlify##svelteInstallNetlify\n- setup and run simple search site\n\t- change to your apps directory\n\t- goto command prompt\n\t- `npx degit sveltejs/template svelte33`\n\t- open VSCode to `svelte33`\n\t- `npm install`\n\t- `npm run dev`\n\t- in browser, go to `http://localhost:5000`\n\t- in VSCode, install extensions: Svelte, Svelte Intellisense, and Svelte 3 Snippets\n- make change to application\n\t- `main.js`\n\t\t- in props, add: `message: \"This is a message.`\n\t- `App.svelte`\n\t\t- in script, add: `export let message`\n\t\t- in <main>, add: `<p>Message: <b>{message}</b></p>`\n- upload to GitHub\n\t- `git add .`\n\t- `git commit -m \"first commit\"`\n\t- at GitHub, create project *svelte33*\n\t- copy and execute code in section **...or push an existing repository from the command line**\n- publish at Netlify\n\t- get account or sign in at http://www.netlify.com\n\t- [[New site from Git]]\n\t- [[GitHub]]\n\t- click on `svelte33`\n\t- Build command: `npm run build`\n\t- Publish directory: `public`\n\t- [[Deploy site]]\n\t- [[Site settings]]\n\t- [[Change site name]]\n\t- `svelte33`\n\t- https://svelte33.netlify.app","points":100,"extras":"$rank=4.6;$generalRank=4.909","systemWhenCreated":"2020-11-22 00:05:03","systemWhoCreated":"systemUnknown"},{"id":333,"category":"Svelte","title":"Add Bootstrap, SASS and PostCSS to a Svelte project","body":"- these instructions will get Boostrap and SASS working in a Svelte project although VSCode shows a non-existent error##theScssSvelteError\n- `npm i -D bootstrap node-sass postcss svelte-preprocess`\n- rollup.config.js\n\t- add: `import autoPreprocess from 'svelte-preprocess'`\n\t- add to Plugins/svelte: `import autoPreprocess from 'svelte-preprocess'`\n- fix problem\n\t- `npm i -D --unsafe-perm node-sass`\n- App.svelte\n\t- add:\t\n\t\t----------------------------\n\t\t<style lang=\"scss\">\n\t\t\t$mainColor: green;\n\t\t\t@import \"../node_modules/bootstrap/scss/bootstrap.scss\";\n\n\t\tcolor: $mainColor;\n\t\tcolor: $primary; // or $warn, etc. the Bootstrap default colors, which can be overridden as well\n\t\t----------------------------\n- it gets an error at `global lang=\"scss\"` in Visual Studio Code, but the code still works","points":30,"extras":"$rank=2.9;$generalRank=3.6","systemWhenCreated":"2020-11-22 12:28:15","systemWhoCreated":"systemUnknown"},{"id":334,"category":"linux","title":"Set up a cronjob that executes a script which writes to a log file","body":"- these instructions show you how to create an executable bash script and set up a cronjob to run execute it every 5 minutes on Ubuntu##cronjobnew22\n- /home/test/scripts/write_mainlog.txt\n\t--------------------------------------\n\ttouch /home/test/logs/mainlog.txt\n\techo \"test\" >> /home/test/logs/mainlog.txt\n\t--------------------------------------\n- make it executable: \n\t- `chmod +x write_mainlog.txt`\n- `sudo vim /etc/crontab`\n\t- add this line\n\t\t- `*/5 * * * * root /home/test/scripts/write_mainlog.sh`\n- monitor it: `sudo tail -f /var/log/syslog`","points":50,"extras":"$rank=4.3;$generalRank=4.896","systemWhenCreated":"2020-11-23 16:29:56","systemWhoCreated":"systemUnknown"},{"id":335,"category":"Vue.js","title":"Upgrade basic Vue.js 2 code to Vue.js 3","body":"- there are a number of differences that you have to be aware of when upgrading Vue.js 2 to 3\n- note in particular that to call methods inside the app class, you have to now call them on the variable returned from mount()##vue2vue3differences\n- Vue.js 2 code:\n\t------------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t<title>test</title>\n\t\t<style>\n\t\t\t.information {\n\t\t\t\tcolor: green;\n\t\t\t\tmargin: 10px; \n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div class=\"information\">{{message}}</div>\n\t\t\t<button @click=\"changeTheText\">Change the Text</button>\n\t\t</div>\n\n\t\t<script>\n\t\t\tconst app = new Vue({\n\t\t\t\tel: \"#app\",\n\t\t\t\tdata: {\n\t\t\t\t\tmessage: ''\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize: function () {\n\t\t\t\t\t\tthis.message = 'original value';\n\t\t\t\t\t},\n\t\t\t\t\tchangeTheText: function () {\n\t\t\t\t\t\tthis.message = 'you clicked the button';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tapp.initialize();\n\t\t</script>\n\t</body>\n\n\t</html>\n\t------------------------------------\n- Vue.js 3 code:\n\t------------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t<title>test</title>\n\t\t<style>\n\t\t\t.information {\n\t\t\t\tcolor: green;\n\t\t\t\tmargin: 10px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div class=\"information\">{{message}}</div>\n\t\t\t<button @click=\"changeTheText\">Change the Text</button>\n\t\t</div>\n\n\t\t<script>\n\t\t\tconst app = Vue.createApp({\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: ''\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\tthis.message = 'original value';\n\t\t\t\t\t},\n\t\t\t\t\tchangeTheText() {\n\t\t\t\t\t\tthis.message = 'you clicked the button';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst vm = app.mount('#app'); \n\t\t\tvm.initialize();\n\t\t</script>\n\t</body>\n\n\t</html>\n\t------------------------------------","points":70,"extras":"$rank=4.81;$generalRank=4.9823","systemWhenCreated":"2020-11-27 18:06:22","systemWhoCreated":"systemUnknown"},{"id":336,"category":"Vue.js","title":"Use Vue.js CSS animations to bounce in an image","body":"- this code shows you how to make an image bounce in when a button is pressed:##theBounceInImage\n- index.html\n\t-----------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t<title>test</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\n\t\t\t.theImage {\n\t\t\t\tdisplay: block;\n\t\t\t\tmargin: 10px 0 0 0;\n\t\t\t}\n\n\t\t\t.bounce-enter-active {\n\t\t\t\tanimation: bounce-in 0.5s;\n\t\t\t}\n\n\t\t\t@keyframes bounce-in {\n\t\t\t\t0% {\n\t\t\t\t\ttransform: scale(0);\n\t\t\t\t}\n\t\t\t\t50% {\n\t\t\t\t\ttransform: scale(1.25);\n\t\t\t\t}\n\t\t\t\t100% {\n\t\t\t\t\ttransform: scale(1);\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<button @click=\"showTheImage()\">Show Akbar</button>\n\t\t\t<transition name=\"bounce\">\n\t\t\t\t<img v-show=\"showImage\" class=\"theImage\" src=\"akbar.jpg\"/>\n\t\t\t</transition>\n\t\t</div>\n\n\t\t<script>\n\t\t\tconst app = Vue.createApp({\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tshowImage: false \n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tshowTheImage() {\n\t\t\t\t\t\tthis.showImage = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst vm = app.mount('#app');\n\t\t</script>\n\t</body>\n\n\t</html>\n\t-----------------------------------","points":60,"extras":"$rank=4.7;$generalRank=4.9544;$idCode=bounceInImage","systemWhenCreated":"2020-11-27 23:06:28","systemWhoCreated":"systemUnknown"},{"id":337,"category":"Parcel","title":"Create Parcel/Vue2/Bootstrap4/Sass/TypeScript Site at Netlify","body":"- these instructions show you how easy Parcel is at enabling and bundling multiple technologies into a site\n- you set up the basic site at CreateApp, then add a TypeScript class, a Sass file, a Vue component, a GitHub repository, and an automatic-publish site at Netlify##parcelandBundle\n- (optional: as comparison to CreateApp below) setup minimal bundling site\n\t- `npm i -g parcel-bundler`\n\t- `npm init -y`\n\t- `git init`\n\t- index.html\t\n\t\t------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\"> \n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> \n\t\t\t<title>parcel test</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<script src=\"./index.js\"></script>\n\t\t</body>\n\t\t</html>\n\t\t------------------\n\t- index.js\n\t\t-----------------------\n\t\tconsole.log('test');\n\t\t-----------------------\n\t- `parcel index.html`\n\t\t- builds to /dist\n\t- in browser: `http://localhost:1234`\n\t- changes to HTML and JavaScript file are reflected immediately\n\t- about.html\n\t\t- with link to index and back\n\t- in package.json\n\t\t-------------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"parcel index.html\",\n\t\t\t\"build\": \"parcel build index.html\"\n\t\t},\n\t\t-------------------------\n\t- `npm run dev`\n\t- `npm run build`\n- use CreateApp to create Vue2/Bootstrap4/Sass/TypeScript site\n\t- create basic site\n\t\t- https://createapp.dev/parcel\n\t\t- Vue, Bootstrap, TypeScript, Sass\n\t\t- download, copy to `parcelvue333`\n\t\t- `npm install`\n\t\t- `npm start`\n\t\t\t- takes few minutes first time\n\t\t- in browser: `http://localhost:1234`\n\t\t- changes are reflected immediately\n\t\t- make it erase dist folder each time\n\t\t\t- `npm i -D parcel-plugin-nuke-dist`\n\t\t\t- `npm start`\n\t- TypeScript\n\t\t- src\\qtools\\qstr.ts\n\t\t\t------------------\n\t\t\timport * as qstr from './qstr';\n\t\t\tconst Markdown = require(\"markdown\").markdown;\n\n\n\t\t\t/**\n\t\t\t * Capitalize the first letter of a string.\n\t\t\t * \n\t\t\t * qstr.capitalizeFirstLetter(\"this is a sentence.\"); \n\t\t\t * \n\t\t\t * \"This is a sentence.\"\n\t\t\t */\n\t\t\texport const capitalizeFirstLetter = (line: string) => {\n\t\t\t\treturn line.charAt(0).toUpperCase() + line.slice(1);\n\t\t\t}\n\t\t\t------------------\n\t\t- src\\App.vue\n\t\t\t---------------------------\n\t\t\t  data: function () {\n\t\t\t\treturn {\n\t\t\t\t  name: qstr.capitalizeFirstLetter('testing')\n\t\t\t\t};\n\t\t\t  },\n\t\t\t---------------------------\n\t- Bootstrap 4\n\t\t- src\\App.vue\n\t\t\t--------------------------\n\t\t\t<div class=\"card m-3 informationArea\">\n\t\t\t  <div class=\"card-header\">Information</div>\n\t\t\t  <div class=\"card-body\">\n\t\t\t\t<h5 class=\"card-title\">New information about this site:</h5>\n\t\t\t\t<p class=\"card-text\">Here is some information.</p>\n\t\t\t\t<a href=\"#\" class=\"btn btn-primary\">More Info</a>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t\t--------------------------\n\t- Sass\n\t\t- src\\App.vue, change local Sass to dark green\n\t\t\t--------------------------\n\t\t\t<style lang=\"scss\">\n\t\t\t\t$primary-color: white;\n\t\t\t\t$bg: darkgreen\n\t\t\t--------------------------\n\t\t- src\\styles.scss, replace content with \n\t\t\t---------------------------\n\t\t\t.informationArea {\n\t\t\t\t.card-header {\n\t\t\t\t\tbackground-color: #ddd !important;\n\t\t\t\t}\n\t\t\t\t.card-title {\n\t\t\t\t\tfont-variant: small-caps;\n\t\t\t\t}\n\t\t\t\t.card-body {\n\t\t\t\t\ta.btn {\n\t\t\t\t\t\tbackground-color: #ddd !important;\n\t\t\t\t\t\tborder: 1px solid #999;\n\t\t\t\t\t\tcolor: #555;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------\n\t- Vue\n\t\t- src\\components\\ShowFlashcard.vue\n\t\t\t------------------------\n\t\t\t<template>\n\t\t\t  <div class=\"showArea\">\n\t\t\t\t<div @click=\"toggleShow()\" class=\"showInfo\">{{ front }}</div>\n\t\t\t\t<div v-show=\"isShowing\" class=\"info\">{{ back }}</div>\n\t\t\t  </div>\n\t\t\t</template>\n\t\t\t<script>\n\t\t\texport default {\n\t\t\t  props: {\n\t\t\t\tfront: String,\n\t\t\t\tback: String,\n\t\t\t  },\n\t\t\t  data() {\n\t\t\t\treturn {\n\t\t\t\t  info: \"This is the info.\",\n\t\t\t\t  isShowing: false,\n\t\t\t\t};\n\t\t\t  },\n\t\t\t  methods: {\n\t\t\t\ttoggleShow() {\n\t\t\t\t  this.isShowing = !this.isShowing;\n\t\t\t\t},\n\t\t\t  },\n\t\t\t};\n\t\t\t</script>\n\n\t\t\t<style lang=\"scss\">\n\t\t\t.showArea {\n\t\t\t  width: 300px;\n\t\t\t  .showInfo {\n\t\t\t\tbackground-color: #ccc;\n\t\t\t\tcursor: pointer;\n\t\t\t\tpadding: 3px;\n\t\t\t  }\n\t\t\t  .info {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tpadding: 3px;\n\t\t\t  }\n\t\t\t}\n\t\t\t</style>\n\t\t\t------------------------\n\t\t- src\\App.vue\n\t\t\t----------------------------\n\t\t    <show-flashcard\n\t\t\t  class=\"m-3\"\n\t\t\t  v-for=\"(item,index) in flashcards\"\n\t\t\t  :front=\"item.front\"\n\t\t\t  :back=\"item.back\"\n\t\t\t  :key=\"index\"\n\t\t\t></show-flashcard>\n\n\t\t\tdata: function () {\n\t\t\t\treturn {\n\t\t\t\t  name: qstr.capitalizeFirstLetter(\"testing\"),\n\t\t\t\t  flashcards: [\n\t\t\t\t\t{\n\t\t\t\t\t  front: \"house\",\n\t\t\t\t\t  back: \"das Haus\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t  front: \"pen\",\n\t\t\t\t\t  back: \"der Stift\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t  front: \"cup\",\n\t\t\t\t\t  back: \"die Tasse\",\n\t\t\t\t\t},\n\t\t\t\t  ],\n\t\t\t\t};\n\t\t\t  },\n\t\t\t----------------------------\n\t- set up and push to GitHub\n\t\t- `git init`\n\t\t- `git add .`\n\t\t- `git commit -m \"init comment\"`\n\t\t- create at GitHub: `parcelvue333`\n\t\t- copy *push an existing repository* code and paste\n\t\t- \n\t- publish at Netlify\n\t\t- get account or sign in at http://www.netlify.com\n\t\t- [[New site from Git]]\n\t\t- [[GitHub]]\n\t\t- click on `parcelvue333`\n\t\t- Build command: `npm run build-prod`\n\t\t- Publish directory: `dist`\n\t\t- [[Deploy site]]\n\t\t- [[Site settings]]\n\t\t- [[Change site name]]\n\t\t- `parcelvue333`\n\t\t- https://parcelvue333.netlify.app","points":120,"extras":"$rank=4.3;$generalRank=4.98232","systemWhenCreated":"2020-11-30 14:30:04","systemWhoCreated":"systemUnknown"},{"id":338,"category":"NestJS","title":"Set up a NestJS controller","body":"- if you have never set up a NestJS site before, this will get you up to the point where you can test a GET and POST on a controller with Postman##theNextjsAndDo\n- set up basic site\n\t- make sure that Node.js (>= 10.13.0) is installed on your operating system\n\t- go to your apps directory\n\t- `npm i -g @nestjs/cli`\n\t- `nest new nestjs333` (where **nesjs333** is the name of your app/directory/github name)\n\t\t- npm\n\t- in package.json, change to: \"start\": \"nest start --watch\",\n\t- `npm start`\n\t\t- it shows \"Hello world\" but and will recompile on changes, but you have to reload the browser\n- create controller\n\t- `nest g controller flashcards`\n\t- replace content in: src\\flashcards\\flashcards.controller.ts\n\t\t----------------------------\n\t\timport { Controller, Get, Req } from '@nestjs/common';\n\t\timport { Request } from 'express';\n\n\t\t@Controller('flashcards')\n\t\texport class FlashcardsController {\n\t\t  @Get()\n\t\t  findAll(@Req() request: Request): string {\n\t\t\treturn 'This shows all flashcards';\n\t\t  }\n\t\t}\n\t\t----------------------------\n\t- goto: `http://localhost:3000/flashcards`\n- add post and get to controller\n\t- replace content in: src\\flashcards\\flashcards.controller.ts\n\t\t----------------------------\n\t\timport { Controller, Get, Post } from '@nestjs/common';\n\n\t\t@Controller('flashcards')\n\t\texport class FlashcardsController {\n\t\t\t@Post()\n\t\t\tcreate(): string {\n\t\t\t\treturn 'This action adds a new flashcard';\n\t\t\t}\n\n\t\t\t@Get()\n\t\t\tfindAll(): string {\n\t\t\t\treturn 'This action returns all flashcards';\n\t\t\t}\n\n\t\t\t@Get(':id')\n\t\t\tfindOne(@Param('id') id: string) {\n\t\t\t\treturn `This action returns a #${id} flashcard`;\n\t\t\t}\t\t\t\n\t\t}\n\t\t----------------------------\n\t- use Postman to GET and POST to \n\t\t- `http://localhost:3000/flashcards`\n\t\t- `http://localhost:3000/flashcards/34`","points":60,"extras":"$rank=4.2;$generalRank=4.76767","systemWhenCreated":"2020-11-30 17:37:33","systemWhoCreated":"systemUnknown"},{"id":339,"category":"Vue.js","title":"Simple Vue.js 2 example with components in single files","body":"- notes that there are two kinds of components, `Vue.component('dp-notice'...` and `const flashcardComponent =...`:##vue2Components\n- index.html\n\t-----------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.4/vue.js\"></script>\n\t\t<title>Vue Basic</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div>[{{message}}]</div>\n\t\t\t<div>\n\t\t\t\t<flashcard-component front=\"fff\"\n\t\t\t\t\t\t\t\t\t back=\"bbb\"></flashcard-component>\n\t\t\t</div>\n\t\t\t<dp-notice message=\"Press the A key.\"></dp-notice>\n\t\t\t<dp-notice message=\"Log out when finished.\"></dp-notice>\n\t\t\t<dp-notice></dp-notice>\n\t\t</div>\n\t\t<script src=\"components/Flashcard.js\"></script>\n\t\t<script src=\"components/DpNotice.js\"></script>\n\t\t<script src=\"main.js\"></script>\n\t</body>\n\n\t</html>\n\t-----------------------------------\n- Flashcard.js\n\t----------------------------------------\n\tconst flashcardComponent = {\n\t\tdata: function () {\n\t\t\treturn {\n\t\t\t\tfront: 'house',\n\t\t\t\tback: 'Haus'\n\t\t\t}\n\t\t},\n\t\tprops: ['front', 'back'],\n\t\ttemplate: '<div><div>{{front}} / {{back}}</div></div>'\n\t};\n\t----------------------------------------\n- DpNotice.js\n\t----------------------------------------\n\tVue.component('dp-notice', {\n\t\tprops: ['message'],\n\t\ttemplate: '<div>This is the notice: {{message || \"(no message)\"}}</div>'\n\t});\n\t----------------------------------------","points":100,"extras":"$rank=4.3454;$generalRank=4.9454;$idCode=components2multipleFiles","systemWhenCreated":"2020-12-01 22:53:36","systemWhoCreated":"systemUnknown"},{"id":340,"category":"D3.js","title":"Interactive bar graph with D3.js, Vue.js 3.0 and Bulma","body":"- Note that after changing the Vue.js variables, you have to reinitialize the drawing of the D3.js graphic, which empties the content of the element and redraws.##vue3d3jsbulma\n- index.html\n\t-----------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<title>test simple bar graph</title>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t<script type=\"text/javascript\" src=\"d3v6.2.0.js\"></script>\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css\">\n\t\t<style>\n\t\t\t.area {\n\t\t\t\twidth: 600px;\n\t\t\t\theight: 400px;\n\t\t\t\tbackground-color: #eee;\n\t\t\t}\n\n\t\t\t.controls {\n\t\t\t\tmargin: 10px 2px;\n\t\t\t}\n\n\t\t\t.colorControls button {\n\t\t\t\tmargin-right: 5px;\n\t\t\t}\n\n\t\t\t.colorControls {\n\t\t\t\tmargin-bottom: 5px;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: flex-start;\n\t\t\t}\n\n\t\t\t.sliderControls {\n\t\t\t\tmargin-bottom: 5px;\n\t\t\t}\n\n\t\t\t.sliderControls .label {\n\t\t\t\tmargin-right: 5px;\n\t\t\t\tmargin-top: -1px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\t\t\t}\n\t\t\t.spaceBetween {\n\t\t\t\tmargin-left: 3px;\n\t\t\t}\n\n\t\t\t.control {\n\t\t\t\tdisplay:flex;\n\t\t\t}\n\n\t\t\tbutton.custom-green {\n\t\t\t\tbackground-color: green !important;\n\t\t\t}\n\n\t\t\tbutton.custom-orange {\n\t\t\t\tbackground-color: orange !important;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tpadding: 15px 20px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\" class=\"controls\">\n\t\t\t<div class=\"colorControls\">\n\t\t\t\t<button @click=\"changeColor('orange')\" class=\"button is-primary is-small custom-orange\">Orange</button>\n\t\t\t\t<button @click=\"changeColor('green')\" class=\"button is-primary is-small custom-green\">Green</button>\n\t\t\t</div>\n\t\t\t<div class=\"sliderControls\">\n\t\t\t\t<div class=\"control\"><span class=\"label\">Space between columns:</span><input type=\"range\" min=\"2\" max=\"20\"\n\t\t\t\t\t\tv-model=\"spaceBetweenColumns\" @change=\"changeSpaceBetweenColumns()\"> <span class=\"label spaceBetween\">{{spaceBetweenColumns}}</span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"area\"></div>\n\t\t<script>\n\t\t\tconst app = Vue.createApp({\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tleftIndent: 20,\n\t\t\t\t\t\tcolor: \"orange\",\n\t\t\t\t\t\tspaceBetweenColumns: 7\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\tthis.message = 'original value';\n\t\t\t\t\t\tvar dataArray = [5, 11, 18, 20, 3, 5, 7];\n\t\t\t\t\t\td3.select(\".area\").html(\"\");\n\t\t\t\t\t\tvar svg = d3.select(\".area\").append(\"svg\").attr(\"height\", \"100%\").attr(\"width\", \"100%\");\n\t\t\t\t\t\tsvg.selectAll(\"rect\")\n\t\t\t\t\t\t\t.data(dataArray)\n\t\t\t\t\t\t\t.enter().append(\"rect\")\n\t\t\t\t\t\t\t.attr(\"height\", function (d, i) { return d * 15; })\n\t\t\t\t\t\t\t.attr(\"width\", \"50\")\n\t\t\t\t\t\t\t.attr(\"fill\", this.color)\n\t\t\t\t\t\t\t.attr(\"x\", (d, i) => ((60 + parseInt(this.spaceBetweenColumns)) * i) + this.leftIndent)\n\t\t\t\t\t\t\t.attr(\"y\", (d, i) => 380 - (d * 15));\n\t\t\t\t\t},\n\t\t\t\t\tchangeColor(color) {\n\t\t\t\t\t\tthis.color = color;\n\t\t\t\t\t\tthis.initialize();\n\t\t\t\t\t},\n\t\t\t\t\tchangeSpaceBetweenColumns() {\n\t\t\t\t\t\tthis.initialize();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst vm = app.mount('#app');\n\t\t\tvm.initialize();\n\n\t\t</script>\n\t</body>\n\n\t</html>\n\t-----------------------------------","points":70,"extras":"$rank=4.5;$generalRank=4.964646;$idCode=d3jsGraph","systemWhenCreated":"2020-12-02 17:05:29","systemWhoCreated":"systemUnknown"},{"id":341,"category":"MongoDB","title":"Install MongoDB on Ubuntu 20.04","body":"- these instructions are a fast track to installing MongoDB 4.2 on Ubuntu 20.04##installMongoUbuntu2004\n- install\n\t- prepare MongoDB install\n\t\t- `sudo apt install curl`\n\t\t- `curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -`\n\t\t- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list`\n\t\t- `sudo apt update`\n\t- install MongoDB\n\t\t- `sudo apt install mongodb-org`\n\t- start and check MongoDB service\n\t\t- `sudo systemctl start mongod.service`\n\t\t- `sudo systemctl status mongod`\n\t- enable to start up at boot\n\t\t- `sudo systemctl enable mongod`\n\t- check version\n\t\t- `mongo --eval 'db.runCommand({ connectionStatus: 1 })'`\n\t- stop and start\n\t\t- `sudo systemctl stop mongod`\n\t\t- `sudo systemctl status mongod`\n\t\t- `sudo systemctl start mongod`\n\t\t- `sudo systemctl status mongod`\n- info\n\t- Mongo files\n\t\t- `ls /var/lib/mongodb`\n\t\t- `sudo cat /var/log/mongodb/mongod.log`\n\t\t- `sudo cat /etc/mongod.conf`\n- add user and security\n\t- `mongo`\n\t- `help`\n\t- `show databases`\n\t- `use admin`\n\t- `show collections`\n\t- add user\n\t\t---------------------------------------\n\t\tdb.createUser(\n\t\t\t{\n\t\t\t\tuser: \"adminuser\",\n\t\t\t\tpwd: \"pass\",\n\t\t\t\troles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" }, \"readWriteAnyDatabase\" ]\n\t\t\t}\n\t\t)\n\t\t---------------------------------------\n\t- `show collections`\n\t- `exit`\n\t- `sudo systemctl stop mongod`\n\t- `sudo vim /etc/mongod.conf`\n\t\t- under \"#security:\"\n\t\t-------------------------\n\t\tsecurity:\n\t\t\tauthorization: enabled\n\t\t-------------------------\n\t- `sudo systemctl start mongod`\n\t- `mongo -u adminuser`\n\t- `use admin`\n\t- `show collections`","points":50,"extras":"$rank=4.9","systemWhenCreated":"2020-12-03 15:24:48","systemWhoCreated":"systemUnknown"},{"id":342,"category":"JavaScript","title":"Four JavaScript Tips for arrays and regex search","body":"- note the rest operator and the use of global in the regex search##tehfourtipsoks\n\t-------------------------\n\t// extract unique values\n\tconst scores = [2,5,6,7,7,8,10,11,11,45,233,244,244];\n\tconst unique_scores = [...new Set(scores)];\n\tconsole.log(unique_scores);\n\n\t// flatten a multidimensional array\n\tconst coordinates = [[0,0], [1,5], [6,6], [9,7]];\n\tconst allPoints = [].concat(...coordinates);\n\tconsole.log(allPoints);\n\n\t// replace all\n\tconst message = \"There are colors and more colors and colors after that.\";\n\tconst britishMessage = message.replace(/color/g, \"colour\");\n\tconsole.log(britishMessage);\n\n\t// resize or empty an array\n\tlet ids = [0,4,6,7,9,11];\n\tconsole.log(ids);\n\tids.length = 3;\n\tconsole.log(ids);\n\tids.length = 0;\n\tconsole.log(ids);\n\t-------------------------","points":30,"extras":"$rank=4.66;$generalRank=4.892","systemWhenCreated":"2020-12-08 14:31:56","systemWhoCreated":"systemUnknown"},{"id":344,"category":"JavaScript","title":"Four syntax variations for JavaScript functions","body":"- note that each of these four syntax variations function identically\n- the last two are ECMAScript 6 arrow notation##javascriptFourFunctions\n\t-----------------------------------------------\n\tfunction add(a, b) {\n\t\treturn a + b;\n\t}\n\n\tconst addv2 = function(a, b) {\n\t\treturn a + b;\n\t}\n\n\tconst addv3 = (a, b) => {\n\t\treturn a + b;\n\t}\n\n\tconst addv4 = (a, b) => a + b;\n\n\tconsole.log(add(2,3));\n\tconsole.log(addv2(2,3));\n\tconsole.log(addv3(2,3));\n\tconsole.log(addv4(2,3));\n\t-----------------------------------------------","points":30,"extras":"$rank=4.8;$generalRank=4.4;$jsfiddle=nd8qfx6L","systemWhenCreated":"2020-12-12 12:19:12","systemWhoCreated":"systemUnknown"},{"id":345,"category":"JavaScript","title":"Local vs. global variables","body":"- variables defined inside a function are not available outside the function##localjajajscript\n\t----------------------------\n\tlet message;\n\tconst theName = 'Joe';\n\tfunction greet(name) {\n\t\tlet message2;\n\t\tconst greeting = \"Hello, \";\n\t\treturn greeting + name;\n\t}\n\n\tconsole.log(greet('Jim'));\n\tconsole.log(theName); // \"Joe\"\n\tconsole.log(message); // undefined\n\tconsole.log(message2); // not defined\n\tconsole.log(greeting); // not defined\n\tconsole.log(name); // not define\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2020-12-12 18:10:51","systemWhoCreated":"systemUnknown"},{"id":347,"category":"Node","title":"Read and write file with stream","body":"- note `await` is only possible withing `async`:##theStreamReadit\n\t-----------------------------\n\tconst getStream = require('get-stream');\n\tconst fs = require('fs');\n\n\t// write file with stream\n\tconst fileName = \"data343.txt\";\n\tconsole.time('writeFile');\n\tconst file = fs.createWriteStream(fileName);\n\tfor (let i = 1; i <= 10; i++) {\n\t\tfile.write(String(Math.floor(Math.random() * 999) + 1000) + '\\n');\n\t}\n\tfile.end();\n\tconsole.timeEnd('writeFile');\n\n\t// read file with stream\n\t(async () => {\n\t\tconsole.time('readFile');\n\t\tconst stream = fs.createReadStream(fileName, { encoding: \"utf-8\" });\n\t\tconst content = await getStream(stream);\n\t\tconsole.log(content);\n\t\tconsole.timeEnd('readFile');\n\t})();\n\t-----------------------------","points":50,"extras":"$rank=4.6;$generalRank=4.6","systemWhenCreated":"2020-12-15 11:08:11","systemWhoCreated":"systemUnknown"},{"id":348,"category":"nginx","title":"Install nginx on Windows","body":"- when installing nginx, make sure you choose a port that does not conflict with your Apache, IIS or any other web server##welcomeNginx\n- download, install, serve default website\n\t- http://nginx.org/en/download.html\n\t- download stable version, e.g. *nginx/Windows-1.18.0*\n\t- unzip into *c:\\nginx*\n\t- change file *conf\\nginx.conf*\n\t\t---------------------------------------\n\t\tlisten       3011;\n\t\t---------------------------------------\n\t- double-click *nginx.exe*\n\t- goto: `http://localhost:3011`\n- serve custom web directory\n\t- create file *C:\\webs\\site001\\index.html*\n\t\t-------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Test001</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>This is a test.</p>\n\t\t</body>\n\n\t\t</html>\n\t\t-------------------------------\n\t- change file *conf\\nginx.conf*\n\t\t---------------------------------------\n\t\troot   C:\\webs;\n\t\t---------------------------------------\n\t- restart nginx\n\t\t- task manager\n\t\t- details\n\t\t- on both nginx services: kill process tree\n\t- double-click *nginx.exe*\n\t- goto: `http://localhost:3011/site001`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2020-12-15 14:53:50","systemWhoCreated":"systemUnknown"},{"id":349,"category":"Go","title":"Install Go on Windows and create and compile program","body":"- this is a fast track to get install Go on Windows and compile and run a program##installgoand\n- download\n\t- https://golang.org/dl\n\t- download and execute the MSI file\n\t- open CMD\n\t\t- `go version`\n\t\t\t- you will see e.g. *go version go1.15.6 windows/amd64*\n\t\t- `go env`\n\t\t\t- *set GOROOT=c:\\go* is where Go is installed\n- development environment\n\t- VSCode\n\t- install extension: golang --> Go Team at Google\n\t- CTRL-SHIFT-P\n\t\t- `go:install`\n\t\t- *Go:Install/Update Tools*\n\t\t- select all\n\t\t- click [[Go]]\n\t\t- (installs for a few minutes, see *Output* window)\n- test program\n\t- create `test.go`\n\t\t-------------------------\n\t\tpackage main\n\n\t\timport (\n\t\t\t\"fmt\"\n\t\t)\n\n\t\tfunc main() {\n\t\t\tfmt.Println(\"Test of Go\")\n\t\t}\n\t\t-------------------------\n\t- `go run test.go`\n\t- `go build test.go`","points":50,"extras":"$rank=4.2;$generalRank=4.7","systemWhenCreated":"2020-12-17 16:58:11","systemWhoCreated":"systemUnknown"},{"id":350,"category":"Vanilla JavaScript","title":"Use XMLHttpRequest to load local html from server","body":"- This is a vanilla JavaScript example of XMLHttpRequest that loads a local .html file on button click.##loadbuttonvanjavascript\n- index.html\n\t--------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>XMLHttpRequest test</title>\n\t\t<script src=\"js/main.js\"></script>\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t</head>\n\t<body>\n\t\t<button onclick=\"loadContent()\">Load Content</button>\n\t\t<div id=\"content\"></div>\n\t</body>\n\n\t</html>\n\t--------------------------\n- main.js\n\t-------------------------------------\n\t\"use strict\";\n\n\tfunction loadContent() {\n\t\tconst xhttp = new XMLHttpRequest();\n\t\txhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState === 4 && this.status === 200) {\n\t\t\t\tdocument.getElementById(\"content\").innerHTML = xhttp.responseText;\n\t\t\t}\n\t\t}\n\t\txhttp.open(\"GET\", \"data/data.html\", true );\n\t\txhttp.send();\n\t}\n\t-------------------------------------\n- main.css\n\t--------------------------------\n\tbody {\n\t\tpadding: 10px;\n\t}\n\n\t#content {\n\t\tmin-height: 80px;\n\t\tbackground-color: #eee;\n\t\tmargin: 10px 0 0 0;\n\t\tborder: 1px solid #ddd;\n\t\tborder-radius: 5px;\n\t}\n\n\t#content p {\n\t\tpadding: 0 20px;\n\t}\n\n\tbutton {\n\t\tpadding: 5px;\n\t\tborder-radius: 5px;\n\t}\n\n\t/* smartphone view */\n\n\t@media (max-width: 577px) {\n\t\t#content {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n\n\t/* computer/table view */\n\n\t@media (min-width: 578px) {\n\t\t#content {\n\t\t\twidth: 600px;\n\t\t}\n\t}\n\t--------------------------------\n- data.html\n\t------------------------------------\n\t<div>\n\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Praesentium facere molestias nihil ad? Voluptate nulla\n\t\t\trem quibusdam explicabo dolorum delectus cupiditate accusantium eligendi? Molestiae quasi, beatae possimus rerum\n\t\t\tlaborum iure.</p>\n\t\t<p>Provident ipsum, dignissimos aliquid, perferendis consequuntur voluptate repellat similique vel aliquam\n\t\t\ttemporibus mollitia quibusdam alias neque nulla quia dolorum sit deserunt impedit ducimus, culpa ullam magnam\n\t\t\tomnis libero veniam? Fuga!</p>\n\t\t<p>Odio aut quae iste ea quo quasi porro, a nisi velit beatae eos ducimus necessitatibus nihil! Praesentium\n\t\t\tconsequuntur impedit explicabo consectetur vel aperiam, neque fugit, facere beatae laudantium veritatis\n\t\t\taccusamus!</p>\n\t\t<p>Alias, illo molestiae. Reprehenderit odit dignissimos repellat, expedita, corrupti culpa doloremque doloribus\n\t\t\tcupiditate est qui itaque quos esse illo autem assumenda, accusantium laboriosam perspiciatis ullam ex. Totam\n\t\t\tfacilis quisquam perspiciatis.</p>\n\t</div>\n\t------------------------------------","points":70,"extras":"$rank=4.6;$generalRank=4.7;$idCode=xmlhttprequestVanilla;$download=xmlhttprequestVanilla","systemWhenCreated":"2020-12-20 20:27:51","systemWhoCreated":"systemUnknown"},{"id":351,"category":"CSS","title":"Tilt a word on hover","body":"- Note that if you put too much margin on the hovered word it will move the sentence.##thtetilttil\n- index.html\n\t---------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>tilt</title>\n\t\t<style>\n\t\t\t.tilt {\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\t.tilt:hover {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: tomato;\n\t\t\t\tcursor: pointer;\n\t\t\t\ttransform: rotate(-10deg) scale(1.3, 1.3);\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tbackground-color: yellow;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<p>This word should <span class=\"tilt\">tilt</span> so that it is noticable on hover.</p>\n\t</body>\n\n\t</html>\n\t---------------------------","points":30,"extras":"$rank=4.7;$generalRank=4.7;$idCode=tiltexample","systemWhenCreated":"2020-12-20 21:37:03","systemWhoCreated":"systemUnknown"},{"id":352,"category":"Node","title":"Debug with node-inspect from the terminal","body":"- with **node-inspect** you can set break points in code to pause and look at variables e.g. in loops##thedebugnodeinspect\n- `npm i -g node-inspect`\n- put `debugger;` lines in your code:\n\t-----------------------\n\tconst fs = require('fs');\n\tconst servers = {\n\t\t\"62732\": {\n\t\t\tname: 'External_83743',\n\t\t\ttype: 'Linux',\n\t\t\twhenCreated: '2020-01-01',\n\t\t\tdrives: 3\n\t\t},\n\t\t\"893472\": {\n\t\t\tname: 'External_32333',\n\t\t\ttype: 'Windows',\n\t\t\twhenCreated: '2020-04-01',\n\t\t\tdrives: 2\n\t\t}\n\t};\n\tdebugger; \n\tfor (let x = 1; x <= 10; x++) {\n\t\tservers[x] = {\n\t\t\t'type': 'test',\n\t\t\t'identifier': x\n\t\t}\n\t}\n\tdebugger; \n\tfs.writeFile('servers.json', JSON.stringify(servers), err => {\n\t\tif (err) throw err;\n\t\tconsole.log('finished');\n\t});\n\t-----------------------\n- `node-inspect test.js`\n- `cont` to continue\n- `repl` to look at variables\n- to exit, [[CTRL-C]] twice\n\t- or `.exit`","points":40,"extras":"$rank=4.3;$generalRank=4.6123","systemWhenCreated":"2020-12-21 16:27:03","systemWhoCreated":"systemUnknown"},{"id":353,"category":"Node.js","title":"Write from one stream to another with pipe","body":"- the content of main.txt will be written to main2.txt\n- note main2.txt will be created if it does not exist##pipeReadWriteasdf\n- *pipe.js*\n\t----------------------------\n\tconst fs = require('fs');\n\n\tconst readStream = fs.createReadStream('main.txt');\n\tconst writeStream = fs.createWriteStream('main2.txt');\n\n\treadStream.pipe(writeStream);\n\n\treadStream.on('end', () => {\n\t\tconsole.log('finished writing');\n\t});\n\t----------------------------\n- *main.txt*\n\t------------------------------\n\tLorem ipsum dolor sit amet.\n\tSunt cumque praesentium tempora officia.\n\tCulpa minima natus placeat sit?\n\t------------------------------","points":30,"extras":"$rank=4.1;$generalRank=4.834","systemWhenCreated":"2020-12-21 20:26:46","systemWhoCreated":"systemUnknown"},{"id":354,"category":"Node.js","title":"Transform a text file to another with streams","body":"- pushing the data through the filter will transform all the letters to uppercase\n- not that *writableObjectMode* must be set to *true*##thePipesTransform\n- *pipe.js*\n\t------------------------------\n\tconst fs = require('fs');\n\tconst { Transform } = require('stream');\n\n\tconst readStream = fs.createReadStream('main.txt');\n\tconst writeStream = fs.createWriteStream('main2.txt');\n\n\tconst capitalizeFilter = new Transform({\n\t\twritableObjectMode: true,\n\t\ttransform(data, encoding, callback) {\n\t\t\tthis.push(data.toString().toUpperCase());\n\t\t\tcallback();\n\t\t},\n\t\tfinal(callback) {\n\t\t\tcallback();\n\t\t}\n\t});\n\n\treadStream.pipe(capitalizeFilter).pipe(writeStream);\n\n\treadStream.on('end', () => {\n\t\tconsole.log('finished writing');\n\t});\n\t------------------------------\n- *main.txt*\n\t------------------------------\n\tLorem ipsum dolor sit amet.\n\tSunt cumque praesentium tempora officia.\n\tCulpa minima natus placeat sit?\n\t------------------------------","points":70,"extras":"$rank=4.2;$generalRank=4.8373737","systemWhenCreated":"2020-12-21 21:51:38","systemWhoCreated":"systemUnknown"},{"id":355,"category":"MongoDB","title":"Create an API with Node.js, Express and MongoDB","body":"- setup basic server\n\t- install node, setup Git and GitHub\n\t- install Express\n\t\t- `npm i express`\n\t- install MongoDB\n\t\t- https://www.mongodb.com/try/download/community\n\t\t\t- download MongoDB Community Server\n\t\t\t- file is: mongodb-windows-x86_64-4.4.3-signed.msi\n\t\t\t- installing here: C:\\Program Files\\MongoDB\\Server\\4.4\\data\\\n\t- install MongoDB and Mongoose in project\n\t\t- `npm i mongodb mongoose`\n\t- install Babel\n\t\t- `npm i -D babel-cli babel-preset-env babel-preset-stage-0`\n\t- install tools\n\t\t- `npm i body-parser nodemon`\n\t- server.js\n\t\t-----------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst PORT = 4000;\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send(`Listening on port ${PORT}.`);\n\t\t});\n\n\t\tapp.listen(PORT, () => {\n\t\t\tconsole.log(`Listening on port ${PORT}.`);\n\t\t});\n\t\t-----------------------------\n\t- .babelrc\n\t\t----------------------------\n\t\t{\n\t\t\t\"presets\": [\n\t\t\t\t\"env\", \n\t\t\t\t\"stage-0\"\n\t\t\t]\n\t\t}\n\t\t----------------------------\n\t- in `package.json` add:\n\t\t--------------------------\n\t\t\"start\": \"nodemon ./server.js --exec babel-node -e js\"\n\t\t--------------------------\n\t- execute `npm start`\n- for full project including MongoDB, see this project: https://github.com/edwardtanguay/nodeapi222\n\t- download Robo 3T: https://robomongo.org/download","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-01-15 13:57:27","systemWhoCreated":"systemUnknown"},{"id":356,"category":"Node.js","title":"Understanding process.env","body":"- test.js\n\t-----------------------\n\tconst port = process.env.PORT || 3000;\n\tconst node_env = process.env.NODE_ENV || 'development';\n\tconsole.log(`port: ${port}, node_env: ${node_env}`);\n\t-----------------------\n- `node test.js`\n- `PORT=3001 node test.js`\n- `PORT=3001 NODE_ENV=production node test.js`\n- see all environment variables, some quite useful: `console.log(process.env)`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-01-20 15:18:54","systemWhoCreated":"systemUnknown"},{"id":357,"category":"Jest","title":"Run Jest tests in React","body":"- `npx create-react-app cra888`\n- `npm start`\n- note in package.json: `\"test\": \"react-scripts test\"`\n- `npm run test`\n\t- \"no tests found\"\n\t- press \"a\" it runs a test\n- add `src\\main.test.js`:\n\t-----------------------------\n\ttest('toUpperCase() works', () => {\n\t\texpect('this'.toUpperCase()).toBe('THIS');  \n\t})\n\t-----------------------------\n- press [[a]] it will pass:##jestpassok\n- make a change so it fails##jesttestbadnotpassed\n- links\n\t- [jestjs.io](https://jestjs.io/)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-01-28 12:10:39","systemWhoCreated":"systemUnknown"},{"id":358,"category":"Jest","title":"Set up Jest testing in Node","body":"- set up simple Node app:\n\t- create directory `jestnode333`\n\t- open in Visual Studio Code\n\t- `npm init -y`\n\t- create helper tools: `qtools/qstr.js`:\n\t\t-------------------------------\n\t\texports.capitalizeFirstLetter = (line) => {\n\t\t\treturn line.charAt(0).toUpperCase() + line.slice(1);\n\t\t}\n\t\t-------------------------------\n\t- create `index.js`\n\t\t---------------------------------\n\t\tconst qstr = require('./qtools/qstr');\n\n\t\tconst greeting = 'hello';\n\t\tconsole.log(qstr.capitalizeFirstLetter(greeting));\n\t\t---------------------------------\n\t- `node index.js`\n\t\t- it displays: *Hello*\n- set up Jest and test\n\t- `npm i -D jest`\n\t- create test: `tests\\qstr.test.js`\n\t\t-----------------------------------------\n\t\tconst qstr = require('../qtools/qstr');\n\n\t\ttest('qstr.capitalizeFirstLetter() works', () => {\n\t\t\texpect(qstr.capitalizeFirstLetter('hello')).toBe('Hello');\n\t\t})\n\t\t-----------------------------------------\n\t- set up npm script in `package.json`:\n\t\t-----------------------------------\n\t\t\"scripts\": {\n\t\t\t\"test\": \"./node_modules/.bin/jest\"\n\t\t}\n\t\t-----------------------------------\n\t- `npm test`##jestkdidjiand\n- Get code at [GitHub](https://github.com/edwardtanguay/jestnode333)","points":70,"extras":"$rank=4.9","systemWhenCreated":"2021-01-28 12:47:59","systemWhoCreated":"systemUnknown"},{"id":359,"category":"Java","title":"Create a Java program in VSCode that calls a class in a separate package","body":"- use Visual Studio Code\n- code is here at [GitHub](https://github.com/edwardtanguay/java22)\n- simple Java program\n\t- *Hello.java*\n\t\t-------------------------\n\t\tpublic class Hello {\n\t\t\tpublic static void main(String args[]) {\n\t\t\t\tSystem.out.println(\"Hello World\");\n\t\t\t}\t\n\t\t}\n\t\t-------------------------\n\t- `javac Hello.java`\n\t- `java -classpath . Hello`\n- one Java file with two classes\n\t----------------------------\n\tpublic class Hello {\n\t\tpublic static void main(String args[]) {\n\t\t\tSystem.out.println(\"Hello World\");\n\t\t\tOutputManager om = new OutputManager();\n\t\t\tom.displayTest();\n\t\t}\t\n\t}\n\n\tclass OutputManager {\n\t\tpublic void displayTest() {\n\t\t\tSystem.out.println(\"The test.\");\n\t\t}\n\t}\n\t----------------------------\t\n\t- `javac Hello.java`\n\t- `java -classpath . Hello`\n- one Java file with class in separate file\n\t- *Hello.java*\n\t\t------------------------------\n\t\timport tools.OutputManager;\n\t\tpublic class Hello {\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\tSystem.out.println(\"Hello World\");\n\t\t\t\tOutputManager om = new OutputManager();\n\t\t\t\tom.displayTest();\n\t\t\t}\t\n\t\t}\n\t\t------------------------------\n\t- *tools\\OutputManager.java*\n\t\t------------------------------\n\t\tpackage tools;\n\t\tpublic class OutputManager {\n\t\t\tpublic void displayTest() {\n\t\t\t\tSystem.out.println(\"The test.\");\n\t\t\t}\n\t\t}\n\t\t------------------------------\n\t- this time, just click on the \"Run\" arrow button in the upper-right##runarror234","points":100,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-01-29 17:31:08","systemWhoCreated":"systemUnknown"},{"id":360,"category":"JavaScript","title":"Simple example of spread operator and destructuring assignment","body":"- note that you use the spread operator on an array with any number of elements, they just have to match the number of parameters\n- and if you send an array with extra elements, they will simply be ignored\n\t---------------------------------------\n\tconst getFullName = (firstName, lastName) => {\n\t\treturn `${firstName} ${lastName}`;\n\t}\n\n\tconst names = ['Jannick', 'Oberein'];\n\n\tconsole.log(getFullName(...names));\n\tconsole.log(getFullName('Hannah', 'Schader'))\n\t---------------------------------------\n- something similar is called destructuring assignment, but with object literals instead of arrays:\n\t----------------------------------------\n\tconst getFullName = ({ firstName, lastName }) => {\n\t\treturn `${firstName} ${lastName}`;\n\t}\n\n\tconst employee = {\n\t\tlastName: 'Orangeisy',\n\t\tmiddleName: '',\n\t\tfirstName: 'Jacques',\n\t\tdepartment: 'Finance'\n\t} \n\n\tconsole.log(getFullName({firstName: 'Hannah', lastName: 'Schader'}));\n\tconsole.log(getFullName(employee))\n\t----------------------------------------","points":40,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-02-03 16:02:05","systemWhoCreated":"systemUnknown"},{"id":361,"category":"JavaScript","title":"Simple example of .call(), .apply() and .bind()","body":"- in this example, you \"stamp\" an object with new information\n\t------------------------\n\tfunction DepartmentStamper() {\n\t\tthis.department = 'Department 001';\n\t}\n\n\tconst emp1 = {\n\t\tname: 'Smythe'\n\t};\n\n\tconst emp2 = {\n\t\tname: 'Rogge'\n\t};\n\n\tDepartmentStamper.call(emp1);\n\tDepartmentStamper.call(emp2);\n\n\tconsole.log(emp1, emp2)\n\t------------------------\n- and you can pass along information:\n\t--------------------------------------\n\tfunction DepartmentStamper(departmentNumber) {\n\t\tthis.stamp = `Department ${departmentNumber}`;\n\t}\n\n\tconst emp1 = {\n\t\tname: 'Smythe'\n\t};\n\n\tconst emp2 = {\n\t\tname: 'Rogge'\n\t};\n\n\tDepartmentStamper.call(emp1,111);\n\tDepartmentStamper.call(emp2,222);\n\n\tconsole.log(emp1, emp2)\n\t--------------------------------------\n- and .apply() is the same thing with brackets\n\t--------------------------------------\n\tfunction DepartmentStamper(departmentNumber) {\n\t\tthis.stamp = `Department ${departmentNumber}`;\n\t}\n\n\tconst emp1 = {\n\t\tname: 'Smythe'\n\t};\n\n\tconst emp2 = {\n\t\tname: 'Rogge'\n\t};\n\n\tDepartmentStamper.apply(emp1,[111]);\n\tDepartmentStamper.apply(emp2,[222]);\n\n\tconsole.log(emp1, emp2)\n\t--------------------------------------\n- and a .bind() example:\n\t-----------------------------------\n\tfunction DepartmentStamper(departmentNumber) {\n\t\tthis.stamp = `Department ${departmentNumber}`;\n\t}\n\n\tconst emp1 = {\n\t\tname: 'Smythe'\n\t};\n\n\tconst emp2 = {\n\t\tname: 'Rogge'\n\t};\n\n\tconst assignDepartmentToEmployee1 = DepartmentStamper.bind(emp1);\n\tconst assignDepartmentToEmployee2 = DepartmentStamper.bind(emp2);\n\n\tassignDepartmentToEmployee1('333');\n\tassignDepartmentToEmployee2('444');\n\n\tconsole.log(emp1);\n\tconsole.log(emp2)\n\t-----------------------------------","points":100,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-02-03 16:02:12","systemWhoCreated":"systemUnknown"},{"id":362,"category":"React","title":"Basic function component with props, state, and showing area based on state","body":"- note props variables are sent from App.js as `<InfoBox title=\"First Box\"/>`\n\t------------------------------------\n\timport {useState} from 'react';\n\n\tfunction InfoBox(props) {\n\t\tconst [ noteState, setNoteState ] = useState('hide');\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>{props.title}</h1>\n\t\t\t\t<p>Info Box</p>\n\t\t\t\t<p>Note State: {noteState}</p>\n\t\t\t\t{ noteState === 'show' && (\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis is the note.\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t\t<button onClick={() => setNoteState(noteState === 'show' ? 'hide' : 'show')}>Show</button>\n\t\t\t</div>\t\n\t\t);\n\t}\n\n\texport default InfoBox\n\t------------------------------------","points":60,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-02-11 00:22:02","systemWhoCreated":"systemUnknown"},{"id":363,"category":"React","title":"Simple form which shows input simultaneously","body":"- `npx create-react-app formtest`\n- `./components/Login.js`\n\t-------------------------\n\timport { useState } from 'react';\n\timport '../styles/Login.css';\n\n\tfunction Login() {\n\t\tconst [user, setUser] = useState('');\n\t\treturn (\n\t\t\t<div class=\"componentLogin\">\n\t\t\t\t<h1>Login</h1>\n\t\t\t\t<form>\n\t\t\t\t\t<label for=\"user\">User Name</label>\n\t\t\t\t\t<input type=\"text\" value={user} id=\"user\" onChange={(event) => setUser(event.target.value)} />\n\t\t\t\t</form>\n\t\t\t\t<div>\n\t\t\t\t\t{user !== '' &&\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t<p>Current name: <span className=\"theData\">{user}</span></p>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\texport default Login;\n\t-------------------------\n- `./styles/Login.css`\n\t-----------------------------\n\t.componentLogin form label;after {\n\t\tcontent: ': ';\n\t}\n\n\t.componentLogin .theData {\n\t\tfont-family: 'Courier New', Courier, monospace;\n\t\tbackground-color: #eee;\n\t\tfont-weight: bold;\n\t\tcolor: brown;\n\t}\n\t-----------------------------","points":50,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-02-15 11:35:58","systemWhoCreated":"systemUnknown"},{"id":365,"category":"Ubuntu","title":"How to update Visual Studio Code on Ubuntu","body":"- the automatic update doesn't always work on Ubuntu for Visual Studio Code\n- if it doesn't, then in terminal:\n\t------------------------\n\tsudo apt-get update\n\tsudo apt-get dist-upgrade -y\n\t------------------------\n- restart Visual Studio Code","points":5,"extras":"$rank=4.7;$generalRank=4.6","systemWhenCreated":"2021-03-10 10:45:39","systemWhoCreated":"systemUnknown"},{"id":366,"category":"React","title":"How to change property of one object in an array of objects in React state","body":"- the trick is to not send the array object to the setState method, but the index of the array object\n\t-----------------------\n\timport React, { useState } from 'react';\n\n\tinterface IFlashcard {\n\t\tnoun: string;\n\t\tarticle: string;\n\t\tshow: boolean;\n\t}\n\n\tconst initialFlashcards = [\n\t\t{\n\t\t\tnoun: 'Dependency',\n\t\t\tarticle: 'die Dependency, die Dependencys',\n\t\t\tshow: false\n\t\t},\n\t\t{\n\t\t\tnoun: 'Kenntnis',\n\t\t\tarticle: 'die Kenntnis, die Kenntnisse',\n\t\t\tshow: false\n\t\t},\n\t\t{\n\t\t\tnoun: 'Repository',\n\t\t\tarticle: 'das Repository, die Repositorys',\n\t\t\tshow: false\n\t\t}\n\t];\n\n\tfunction LanguageFlashcards() {\n\t\tconst [flashcards, setFlashcards] = useState(initialFlashcards);\n\n\t\tconst toggleFlashcard = (index: number) => {\n\t\t\tflashcards[index].show = !flashcards[index].show;\n\t\t\tsetFlashcards([...flashcards]);\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h2>Language Flashcards</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{flashcards.map((flashcard: IFlashcard, index: number) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<li><span onClick={() => toggleFlashcard(index)}>{flashcard.noun}</span>\n\t\t\t\t\t\t\t\t\t{flashcard.show && (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t- {flashcard.article}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</>\n\t\t);\n\t}\n\n\texport default LanguageFlashcards;\n\t-----------------------\n- see more information on this at my [question on Stackoverflow](https://stackoverflow.com/questions/67011321/how-to-change-property-of-one-object-in-an-array-of-objects-in-react-state) on this","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-08 23:09:57","systemWhoCreated":"systemUnknown"},{"id":367,"category":"CSS","title":"How to create a header/footer/aside/main site with no margins","body":"- note that you need to have no spaces between main and aside\n\t-------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"ie=edge\">\n\t\t<title>CSS Course</title>\n\t\t<style>\n\t\t\thtml {\n\t\t\t\theight: 100%;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tmargin: 0px;\n\t\t\t\theight: 100%;\n\t\t\t}\n\n\t\t\theader {\n\t\t\t\theight: 12.5%;\n\t\t\t\tbackground: blue;\n\t\t\t\tcolor: white;\n\t\t\t}\n\n\t\t\tmain {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\twidth: 75%;\n\t\t\t\theight: 75%;\n\t\t\t\tbackground: red;\n\t\t\t\tcolor: white;\n\t\t\t}\n\n\t\t\taside {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\twidth: 25%;\n\t\t\t\theight: 75%;\n\t\t\t\tbackground: green;\n\t\t\t\tcolor: white;\n\t\t\t}\n\n\t\t\tfooter {\n\t\t\t\theight: 12.5%;\n\t\t\t\tbackground: purple;\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<header>Header</header>\n\t\t<aside>Sidebar</aside><!-- no spaces\n\t --><main>Main Content</main>\n\t\t<footer>Footer</footer>\n\t</body>\n\n\t</html>\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-09 15:10:51","systemWhoCreated":"systemUnknown"},{"id":369,"category":"CSS","title":"How to create a three-dimensional ball with CSS","body":"- see some [gradient buttons here](https://codepen.io/JavaScriptJunkie/pen/pPRooV)\n\t-----------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>balls</title>\n\t\t<style>\n\t\t\t.circle {\n\t\t\t\twidth: 50px;\n\t\t\t\theight: 50px;\n\t\t\t\tmargin: 3px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tbackground-color: white;\n\t\t\t\tbackground-image: radial-gradient(circle at 65%, white, rgba(68, 68, 68, 0.4)), radial-gradient(rgba(255, 255, 255, 1), #f9f9f9, #555);\n\t\t\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\n\t\t<section class=\"ex-03 circle-container\">\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t\t<div class=\"circle\"></div>\n\t\t</section>\n\t</body>\n\n\t</html>\n\t-----------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-09 23:07:59","systemWhoCreated":"systemUnknown"},{"id":370,"category":"Windows","title":"How to stop Windows service that blocks Apache from starting","body":"- problem: Apache web server won't start due to a blocked port##thebbblocked\n- in the terminal window, type `net stop was /y`\n- note that if you do not open the terminal window as administrator, it won't work:##wontworkforterm\n- log in as administrator and it works:##asadminadadddmin\n- then restart Apache and it works:##therestartapppah","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-17 12:46:32","systemWhoCreated":"systemUnknown"},{"id":371,"category":"CSS","title":"How to use images for CSS list bullets","body":"- `list-style-image` has limited styling abilities so use this:\n\t--------------------------------\n\tul {\n\t\tlist-style-type: none;\n\t}\n\n\tul>li;before {\n\t\tcontent: '';\n\t\tdisplay: inline-block;\n\t\theight: 10px;\n\t\twidth: 10px;\n\t\tbackground-size: 10px;\n\t\tbackground-image: url('image/light.png');\n\t\tbackground-repeat: no-repeat;\n\t\tmargin-right: 5px;\n\t\tbackground-position: top top;\n\t\tvertical-align: middle;\n\t}\n\t--------------------------------","points":30,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-18 18:44:49","systemWhoCreated":"systemUnknown"},{"id":372,"category":"CSS","title":"Simple way to use Font Awesome Icons","body":"- Font Awesome has become more difficult to use, e.g. requiring an e-mail sign up, etc.\n- this shows you a simpler way to use Font Awesome 4.7 if you just need some quick, professional-looking icons on your site\n- put this link in the HEAD section of your site\n\t--------------------------------\n\t<link rel=\"stylesheet\"\n\t\t  type=\"text/css\"\n\t\t  href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t--------------------------------\n- go here to search for and copy the HTML for icons you want: https://fontawesome.com/v4.7.0/icons\n- this is an example site which shows how to style the icons##exampleIconFontAwess\n\t----------------------------------------------\n\t<head>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-size: 1.4em;\n\t\t\t\tfont-family: arial;\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\n\t\t\t.list {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-template-columns: 20px 500px;\n\t\t\t\tgrid-gap: 1em .2em;\n\t\t\t}\n\n\t\t\ti.fa {\n\t\t\t\tmargin-top: .1em;\n\t\t\t\tcolor: green;\n\t\t\t\ttext-shadow: 1px 1px 5px orange;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class=\"list\">\n\t\t\t<i class=\"fa fa-arrow-right\"\n\t\t\t   aria-hidden=\"true\"></i>\n\t\t\t<div>item #1: Lorem ipsum dolor sit amet, consectetur adipisicing elit. Non eaque saepe exercitationem tenetur\n\t\t\t\titaque sunt labore at temporibus facilis aut voluptates quia, minima error fugiat sit nam, quas ipsam.\n\t\t\t\tSaepe.</div>\n\t\t\t<i class=\"fa fa-arrow-right\"\n\t\t\t   aria-hidden=\"true\"></i>\n\t\t\t<div>item #2: Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum et praesentium vero accusamus\n\t\t\t\trepudiandae saepe voluptate fugit, repellat quis? Officia, nihil quod debitis dolores excepturi sed\n\t\t\t\texercitationem doloremque consequatur. Ab!</div>\n\t\t\t<i class=\"fa fa-arrow-right\"\n\t\t\t   aria-hidden=\"true\"></i>\n\t\t\t<div>item #3: Lorem ipsum dolor, sit amet consectetur adipisicing elit. Excepturi fuga veritatis vero eius\n\t\t\t\tconsectetur optio amet, magni accusamus deleniti facilis at cupiditate consequatur dignissimos alias\n\t\t\t\tlaudantium ex assumenda, ipsam mollitia?</div>\n\t\t\t<i class=\"fa fa-arrow-right\"\n\t\t\t   aria-hidden=\"true\"></i>\n\t\t\t<div>item #4: Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quaerat natus aut ut quisquam, at\n\t\t\t\texplicabo nostrum incidunt dicta aperiam nam, facere iure? Sunt, eveniet quas minus rerum ex hic suscipit.\n\t\t\t</div>\n\t\t</div>\n\t</body>\n\t----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-18 22:48:48","systemWhoCreated":"systemUnknown"},{"id":373,"category":"React","title":"How to use React Icons in a React site","body":"- create React app: `npx create-react-app`\n- `npm i react-icons`\n- search here: https://react-icons.github.io/react-icons/search?q=lightning\n\t- note prefix letters:##falightn\n\t- include it in the import statement:##thebsbsbs\n- for example, in the create-react-app: replace the content of `App.js` with this text:\n\t-------------------------------\n\timport logo from './logo.svg';\n\timport './App.css';\n\timport { BsLightningFill } from 'react-icons/bs';\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\tReact Icons <BsLightningFill className=\"icon\" />\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-------------------------------\n- it will show this:##thefinishreacticon","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-20 13:46:01","systemWhoCreated":"systemUnknown"},{"id":374,"category":"Node","title":"How to create a Node server to handle an HTML form","body":"- note that we use Promisify in order to make writing asynchronous##theserverand\n- index.html\n\t---------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Form with Backend</title>\n\t\t<style>\n\t\t\tform {\n\t\t\t\tbackground-color: beige;\n\t\t\t\tpadding: .5rem;\n\t\t\t\tborder-radius: 5px;\n\t\t\t}\n\t\t\tdiv.field {\n\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t}\n\t\t\tfieldset {\n\t\t\t\tpadding-top: 10px;\n\t\t\t}\n\t\t\tlegend {\n\t\t\t\tcolor: #444;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<form action=\"http://localhost:3001\"\n\t\t\t  method=\"POST\">\n\t\t\t<fieldset>\n\t\t\t\t<legend>Employee Information</legend>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"firstName\">First name:</label> <input type=\"text\"\n\t\t\t\t\t\t   id=\"firstName\"\n\t\t\t\t\t\t   name=\"firstName\">\n\t\t\t\t</div>\n\t\t\t\t<div class=\"field\">\n\t\t\t\t\t<label for=\"lastName\">Last name:</label> <input type=\"text\"\n\t\t\t\t\t\t   id=\"lastName\" name=\"lastName\">\n\t\t\t\t</div>\n\t\t\t\t<input type=\"submit\" value=\"Submit\"/>\n\t\t\t</fieldset>\n\t\t</form>\n\t</body>\n\n\t</html>\n\t---------------------------------------\n- server.js\n\t------------------------------------------\n\t/* eslint-disable no-console */\n\tconst express = require('express');\n\tconst fs = require('fs');\n\tconst { promisify } = require('util');\n\n\tconst appendFile = promisify(fs.appendFile);\n\n\tconst app = express();\n\tconst port = 3001;\n\n\tapp.use(express.urlencoded({\n\t\textended: true\n\t}))\n\n\tapp.post('/', (req, res) => {\n\t\tconsole.log(req.body);\n\t\tconst { firstName, lastName } = req.body;\n\t\tappendFile('../data/signups.txt', `${lastName}, ${firstName}\\n`)\n\t\t\t.then(() => {\n\t\t\t\tconsole.log(`added: ${lastName}, ${firstName}`)\n\t\t\t\tres.writeHead(301,\n\t\t\t\t\t{ Location: 'http://localhost:3000' }\n\t\t\t\t);\n\t\t\t\tres.end();\n\t\t\t})\n\t\t\t.catch((error) => console.log(`error: ${error.message}`));\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`Backend is now listening at: http://localhost:${port}`);\n\t});\n\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-25 21:40:30","systemWhoCreated":"systemUnknown"},{"id":375,"category":"React","title":"How to make a React site that randomizes names into groups of various sizes","body":"- first: `npx create-react-app groupMaker`\n- App.js\n\t--------------------------------------------------\n\timport React, { useState } from 'react';\n\timport './App.scss';\n\n\tfunction App() {\n\n\t\tconst [groupSize, setGroupSize] = useState(4);\n\t\tconst [groups, setGroups] = useState([]);\n\n\t\tconst makeGroups = (e) => {\n\t\t\tconst persons = [\"Hans\", \"Robert\", \"Ashton\", \"Martin\", \"Adele\", \"Brendon\", \"Ahmad\", \"Nikola\", \"Eva\", \"Georg\", \"Angie\"];\n\t\t\trandomize(persons);\n\n\t\t\tconst localGroups = [];\n\n\t\t\tlet counter = 1;\n\t\t\tlet group = [];\n\t\t\tpersons.forEach(person => {\n\t\t\t\tif (counter > groupSize) {\n\t\t\t\t\tlocalGroups.push(group);\n\t\t\t\t\tgroup = [];\n\t\t\t\t\tcounter = 1;\n\t\t\t\t}\n\t\t\t\tgroup.push(person);\n\t\t\t\tcounter += 1;\n\t\t\t})\n\t\t\tif (group.length > 0) {\n\t\t\t\tlocalGroups.push(group);\n\t\t\t}\n\t\t\tsetGroups([...localGroups]);\n\n\t\t\te.preventDefault();\n\t\t}\n\n\t\tconst randomize = (array) => {\n\t\t\tlet currentIndex = array.length;\n\t\t\tlet temporaryValue = null;\n\t\t\tlet randomIndex = null;\n\n\t\t\twhile (currentIndex !== 0) {\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<form onSubmit={makeGroups}>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend>Zufälliger Gruppeneinteiler</legend>\n\t\t\t\t\t\t<label htmlFor=\"groupSize\">Teilnehmer pro Gruppe</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"groupSize\" value={groupSize} onChange={(e) => setGroupSize(e.target.value)} autoFocus />\n\t\t\t\t\t\t<input className=\"buttonSubmit\" type=\"submit\" value=\"Gruppen erstellen\" />\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t\t<div className=\"displayGroups\">\n\t\t\t\t\t{groups.map((group) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{group.map((person) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<li>{person}</li>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t--------------------------------------------------\n- App.scss\n\t------------------------------------------------\n\t.App {\n\t\tpadding: 20px;\n\t\tmin-height: 100vh;\n\t\tbackground-color: #282c34;\n\t\tcolor: white;\n\n\t\tfieldset {\n\t\t\tpadding: 10px;\n\t\t\tlegend {\n\t\t\t\tcolor: #999;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tpadding: 0 5px;\n\t\t\t}\n\t\t\tborder: 1px solid #999;\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 10px;\n\t\t\tlabel {\n\t\t\t\t&:after {\n\t\t\t\t\tcontent: \":\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-28 06:25:39","systemWhoCreated":"systemUnknown"},{"id":376,"category":"Flexbox","title":"How to display boxes in rows with a gap variable to screen width","body":"- note the `gap: 1vw`##theflexredok\n\t----------------------------\n\tbody {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tflex-wrap: wrap;\n\t\tgap: 1vw;\n\t}\n\n\tdiv {\n\t\tbackground-color: #ccc;\n\t\twidth: 100px;\n\t\theight: 70px;\n\t\ttext-align: center;\n\t\tborder: 1px solid red;\n\t}\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-04-30 21:30:07","systemWhoCreated":"systemUnknown"},{"id":377,"category":"TypeScript","title":"Two ways to define an interface for an array of objects","body":"- note that each approach works the same in this example\n\t------------------------\n\tinterface ICorrectionItem {\n\t\tphrase: string;\n\t\twhenCreated: string;\n\t\trank: number;\n\t}\n\n\tinterface ICorrectionItems extends Array<ICorrectionItem> {};\n\n\t// const correctionItems: ICorrectionItem[] = [\n\tconst correctionItems: ICorrectionItems = [\n\t\t{\n\t\t\tphrase: 'this is a test',\n\t\t\twhenCreated: '2021-05-12 00:48:49',\n\t\t\trank: 3\n\t\t},\n\t\t{\n\t\t\tphrase: 'this is a another test',\n\t\t\twhenCreated: '2021-05-12 00:48:52',\n\t\t\trank: 2.3\n\t\t}\n\t];\n\n\tconsole.log(correctionItems.length);\n\t------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-12 00:50:08","systemWhoCreated":"systemUnknown"},{"id":378,"category":"TypeScript","title":"How to create a generic class that allows only types that are an array of objects","body":"- note that [Record](https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeystype) is an official TypeScript type\n- note one can also specify which properties the objects can have, e.g.: `type IRecord = Record<'front' | 'back', any>;`\n\t----------------------------\n\texport {}; // fixes VSCode variable-checking in other files (ts2451)\n\t/* eslint-disable guard-for-in */\n\t/* eslint-disable no-console */\n\n\t// RECORDS (general)\n\ttype IRecord = Record<string, any>;\n\ttype IRecords = Array<IRecord>;\n\n\t// PERSONS (specific)\n\tinterface IPerson {\n\t\tfirstName: string,\n\t\tlastName: string,\n\t\tage: number\n\t}\n\ttype IPersons = Array<IPerson>;\n\n\t// FLASHCARDS (specific)\n\tinterface IFlashcard {\n\t\tfront: string,\n\t\tback: string\n\t}\n\tinterface IFlashcards extends Array<IFlashcard> { }\n\n\tclass RecordsProcessor<T extends IRecords> {\n\t\trecords: T;\n\n\t\tconstructor(records: T) {\n\t\t\tthis.records = records;\n\t\t}\n\n\t\tgenerateCommaSeparatedValueString(): string {\n\t\t\tlet r: string = '';\n\t\t\tthis.records.forEach((record) => {\n\t\t\t\tlet count = 1;\n\t\t\t\tfor (const key in record) {\n\t\t\t\t\tr += `${record[key]}`;\n\t\t\t\t\tif (count === Object.keys(record).length) {\n\t\t\t\t\t\tr += '\\n';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr += ', ';\n\t\t\t\t\t}\n\t\t\t\t\tcount += 1;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn r;\n\t\t}\n\n\t}\n\n\t// use RecordsProcessor with employees\n\tconst employees: IPersons = [\n\t\t{\n\t\t\tfirstName: 'David',\n\t\t\tlastName: 'Krustchen',\n\t\t\tage: 34\n\t\t},\n\t\t{\n\t\t\tfirstName: 'Melitta',\n\t\t\tlastName: 'Schönbrecher',\n\t\t\tage: 24\n\t\t}\n\t]\n\tconst employeeProcessor = new RecordsProcessor<IPersons>(employees);\n\tconsole.log(employeeProcessor.generateCommaSeparatedValueString());\n\n\t// use RecordsProcessor with flashcards\n\tconst flashcards: IFlashcards = [\n\t\t{\n\t\t\tfront: 'lamp',\n\t\t\tback: 'die Lampe'\n\t\t},\n\t\t{\n\t\t\tfront: 'table',\n\t\t\tback: 'der Tisch'\n\t\t},\n\t\t{\n\t\t\tfront: 'computer',\n\t\t\tback: 'der Computer'\n\t\t},\n\t\t{\n\t\t\tfront: 'book',\n\t\t\tback: 'das Book'\n\t\t}\n\t]\n\tconst flashcardProcessor = new RecordsProcessor<IFlashcards>(flashcards);\n\tconsole.log(flashcardProcessor.generateCommaSeparatedValueString());\n\n\t// and these examples rightly produce the TypeScript error: number does not satisfy the contraint 'IRecord[]'\n\t// const numberProcessor = new RecordsProcessor<number>(23);\n\t// const arrayOfNumbersProcessor = new RecordsProcessor<number[]>([1, 5, 7, 4, 7]);\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-13 19:09:52","systemWhoCreated":"systemUnknown"},{"id":379,"category":"Bootstrap","title":"How to use tooltips in Bootstrap 5","body":"- Note that jQuery is no longer used in the JavaScript that selects the tooltips##bootstrapTooltips343\n\t---------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css\"\n\t\t\t  rel=\"stylesheet\"\n\t\t\t  integrity=\"sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x\"\n\t\t\t  crossorigin=\"anonymous\">\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js\"\n\t\t\t\tintegrity=\"sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4\"\n\t\t\t\tcrossorigin=\"anonymous\"></script>\n\n\t\t<title>Bootstrap 5 Tooltips</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\theight: 80vh;\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\n\t\t\tsection.printReport {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\tbackground-color: #eee;\n\t\t\t\twidth: 20rem;\n\t\t\t\tborder: 1px solid #ddd;\n\t\t\t\tpadding: 1em;\n\t\t\t\tborder-radius: 5px;\n\t\t\t}\n\n\t\t\t.btnPrintReport {\n\t\t\t\tdisplay: inline;\n\t\t\t\twidth: max-content;\n\t\t\t}\n\n\t\t\t.info {\n\t\t\t\tmargin-top: 10px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section class=\"printReport\">\n\t\t\t<button type=\"button\"\n\t\t\t\t\tclass=\"btn btn-secondary btnPrintReport\"\n\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\ttitle=\"This will be the report for May 2021. Be sure to print all pages as the last page has the summary information.\">\n\t\t\t\tPrint Report\n\t\t\t</button>\n\n\t\t\t<div class=\"info\">\n\n\t\t\t\tThe reports in this section are of various forms and sizes so you want to read the \n\t\t\t\t<a href=\"#\"\n\t\t\t\t   data-bs-toggle=\"tooltip\"\n\t\t\t\t   title=\"\"\n\t\t\t\t   data-bs-original-title=\"This is the 3.23 version of the documentation, currently the most recent.\">documentation</a> before printing. Also, many employees have been discussing the complexity of these reports <a href=\"#\"\n\t\t\t\t   data-bs-toggle=\"tooltip\"\n\t\t\t\t   title=\"\"\n\t\t\t\t   data-bs-original-title=\"This is the collection of customer blogs soon to be moved to another server, but should still be available afterwards.\">here</a> until the end of June.\n\t\t\t</div>\n\t\t</section>\n\t\t<script>\n\t\t\tvar tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n\t\t\tvar tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n\t\t\t\treturn new bootstrap.Tooltip(tooltipTriggerEl)\n\t\t\t})\n\t\t</script>\n\t</body>\n\n\t</html>\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-15 07:38:40","systemWhoCreated":"systemUnknown"},{"id":380,"category":"GitHub","title":"How to publish an HTML/CSS/JavaScript site in a GitHub repository to GitHub pages","body":"- create site that publishes from `main` repository\n\t- create a new repository called `<yourGitHubUserName>.github.io`, e.g. `edwardtanguay.github.io`\n\t- copy the text in the block labeled *...or create a new repository on the command line*\n\t- in your terminal, goto your `webs` directory \n\t- create the directory `<yourGitHubUserName>.github.io` e.g. `edwardtanguay.github.io`\n\t- go into that directory and paste the copied text\n\t- refresh browser and you will see the contents of the README.md file\n\t- goto `<yourGitHubUserName>.github.io` and you will see the contents of the .md file\n\t- open VSCode in the created directory\n\t- delete the .md file\n\t- add an HTML file: `index.html`\n\t\t-------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>GitHub Site</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<p>This is a test.</p>\n\t\t</body>\n\t\t</html>\n\t\t-------------------------------------\n\t- commit and push to the repository\n\t- goto `<yourGitHubUserName>.github.io` and you will see the contents of the HTML file\n- publish from another repository\n\t- create another branch locally, e.g. \"version2\"\n\t- change the index.html file so that you can notice the changes that are published live\n\t- push the new branch\n\t- at your repository on GitHub, go to settings and pages\n\t- change the source branch to your new repository\n\t- go to `<yourGitHubUserName>.github.io` and you will see the content of the new repository","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-15 18:29:14","systemWhoCreated":"systemUnknown"},{"id":381,"category":"Netlify","title":"How to publish a HTML/CSS/JavaScript site to Netlify","body":"- make a HTML/CSS/JavaScript site:\n\t- index.html\n\t\t---------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t\t  content=\"IE=edge\">\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>GitHub Site</title>\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>This is a test of a HTML/CSS/JavaScript site.</p>\n\t\t\t<p class=\"fromCss\"></p>\n\t\t\t<p id=\"fromJavaScript\"></p>\n\t\t\t<script src=\"js/main.js\"></script>\n\t\t</body>\n\n\t\t</html>\n\t\t---------------------------------------\n\t- css/main.css\n\t\t----------------------------------------\n\t\t.fromCss::after {\n\t\t\tcontent: 'this is from css';\n\t\t}\n\t\t----------------------------------------\n\t- js/main.js\n\t\t---------------------------------------\n\t\tfunction fillContent() {\n\t\t  const elem = document.getElementById('fromJavaScript');\n\t\t\telem.innerHTML = 'this is from JavaScript';\n\t\t}\n\n\t\tfillContent();\n\t\t---------------------------------------\n- publish it to a GitHub repository\n\t- go to Netlify\n\t- [[New site from Git]]\n\t- [[GitHub]]\n\t- search for repository, select it\n\t- [[Deploy site]]\n\t- click on URL of site which should be available immediately\n\t- verify it works\n- change site name\n\t- [[Site settings]]\n\t- [[Change site name]]\n\t- e.g. `edwardtestsite`\n\t- go to e.g. `edwardtestsite.netlify.app`\n\t- verify it works\n- verify updates work\n\t- make change\n\t- push to repository\n\t- verify changes are on your public URL e.g. `edwardtestsite.netlify.app`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-15 18:59:11","systemWhoCreated":"systemUnknown"},{"id":382,"category":"SASS","title":"How to set up SASS processing for an HTML/CSS site with node-sass","body":"- set up node-sass\n\t- make directory and create [these HTML and CSS files](https://github.com/edwardtanguay/sass_base)\n\t- initialize GIT: `git init`\n\t- initialize NPM: `npm init -y`\n\t- install node-sass: `npm i -D node-sass` *(i = install, -D = dev-dependencies)*\n\t- make `.gitignore` with content `node_modules` on first line\n- make SASS directory and files\n\t- make a copy of the `css` directory and call it `scss`\n\t- rename `scss/main.css` to `scss/main.scss`\n- configure node-sass to watch and and automatically convert SASS files into CSS files\n\t- test SASS-to-CSS parsing with: `./node_modules/.bin/node-sass -r scss/main.scss -o css`\n\t- add this script to the `package.json` file:\n\t\t- `\"start\": \"./node_modules/.bin/node-sass -r scss/main.scss -o css && node-sass --watch scss -o css\"`\n- test the script\n\t- delete the `css/main.css` file\n\t- notice that the HTML file now has no styling\n\t- make a change in the `scss/main.scss` file and the `css/main.css` file will be automatically created\n- create modules\n\t- in main.scss, `@import \"_variables.scss\";` (must be preceded with underscore!)\n\t- make changes in `_variables.scss`, see that only `css/main.css` is created and not `_variables.css`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-16 09:05:35","systemWhoCreated":"systemUnknown"},{"id":383,"category":"SASS","title":"How to set up SASS processing for an HTML/CSS site with sass and Parcel","body":"- set up site\n\t- `npm init -y`\n\t- `git init`\n- set up SASS files\n\t- make `src` folder\n\t\t- make `src/scss/main.scss` which loads the following files with `@use`\n\t\t\t-------------------------------------------\n\t\t\t@use 'variables';\n\t\t\t@use 'layout';\n\t\t\t-------------------------------------------\n\t\t- make `src/scss/_variables.scss`\n\t\t\t-------------------------------------\n\t\t\t$mainHeaderColor: rgb(42, 134, 34); \n\t\t\t-------------------------------------\n\t\t- make `src/scss/_layout.scss`\n\t\t\t-------------------------------\n\t\t\t@use 'variables' as v;\n\t\t\tbody {\n\t\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t\t\tmain {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tpadding: 0.8rem;\n\t\t\t\t\tbackground-color: lightgray;\n\t\t\t\t\th1 {\n\t\t\t\t\t\tcolor: v.$mainHeaderColor;\n\t\t\t\t\t}\n\t\t\t\t\th1,\n\t\t\t\t\tarticle.browser {\n\t\t\t\t\t\tmargin: 10px;\n\t\t\t\t\t\tpadding: 0.8rem;\n\t\t\t\t\t}\n\t\t\t\t\tarticle.browser {\n\t\t\t\t\t\tbackground: white;\n\t\t\t\t\t\th2 {\n\t\t\t\t\t\t\tcolor: v.$mainHeaderColor;\n\t\t\t\t\t\t}\n\t\t\t\t\t\th2,\n\t\t\t\t\t\tp {\n\t\t\t\t\t\t\tmargin: 0.5rem;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp {\n\t\t\t\t\t\t\tcolor: rgb(141, 25, 25);\n\t\t\t\t\t\t\t.year {\n\t\t\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t\t\t\t\tcolor: navy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstrong {\n\t\t\t\t\t\t\t\tbackground-color: lightyellow;\n\t\t\t\t\t\t\t\tcolor: black;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------\n- set up web bundling with Parcel\n\t- `npm i -D sass`\n\t- make `src/index.html` file\n\t\t----------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t\t  content=\"IE=edge\">\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>SASS Base</title>\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"scss/main.scss\">\n\t\t</head>\n\n\t\t<body>\n\t\t\t<main>\n\t\t\t\t<h1>Web Browsers</h1>\n\t\t\t\t<article class=\"browser\">\n\t\t\t\t\t<h2>Firefox</h2>\n\t\t\t\t\t<p>Firefox is an open-source web browser developed by Mozilla, released in <span class=\"year\">2002</span>.\n\t\t\t\t\t\tIt uses the <strong>Gecko</strong> browser\n\t\t\t\t\t\trendering engine and the <strong>SpiderMonkey</strong> JavaScript rendering engine.</p>\n\t\t\t\t</article>\n\t\t\t\t<article class=\"browser\">\n\t\t\t\t\t<h2>Safari</h2>\n\t\t\t\t\t<p>Safari is a web browser developed by Apple, released in <span class=\"year\">2003</span>. It uses the\n\t\t\t\t\t\t<strong>WebKit</strong> browser\n\t\t\t\t\t\trendering engine and the <strong>JavaScriptCore</strong> rendering engine.\n\t\t\t\t\t</p>\n\t\t\t\t</article>\n\t\t\t\t<article class=\"browser\">\n\t\t\t\t\t<h2>Chrome</h2>\n\t\t\t\t\t<p>Chrome is a web browser developed by Google, released in <span class=\"year\">2008</span>. It uses the\n\t\t\t\t\t\t<strong>Blink</strong> rendering\n\t\t\t\t\t\tengine and the <strong>V8</strong> JavaScript rendering engine.\n\t\t\t\t\t</p>\n\t\t\t\t</article>\n\t\t\t</main>\n\t\t</body>\n\n\t\t</html>\n\t\t----------------------------------------------\n\t- install Parcel: `npm i -D parcel-bundler`\n- add dev script\n\t- `\"dev\": \"parcel src/index.html\"`\n\t- develop with `npm run dev`\n\t- click on link provided (Live Server doesn't process slashes in path name for CSS file correctly)\n- publish to Netlify\n\t- add build script\n\t\t- \"build\": \"parcel build src/index.html\"\n\t- [[New site from Git]]\n\t- [[GitHub]]\n\t- search for and select repository\n\t- choose branch to build from\n\t- build command: `npm run build` (default)\n\t- publish directory `dist` (default)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-16 15:43:31","systemWhoCreated":"systemUnknown"},{"id":384,"category":"Tailwind","title":"How to set up a website with Tailwind CSS","body":"- create directory e.g. `testTailwind`\n- open in Visual Studio\n- create `index.html`\n\t------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Tailwind</title>\n\t</head>\n\n\t<body>\n\t\t<main class=\"container\">\n\t\t\t<h1>Hello, Tailwind!</h1>\n\t\t\t<p>Let's see how this works.</p>\n\t\t</main>\n\t</body>\n\n\t</html>\n\t------------------------------------\n- look at it in Live Server\n- add the Tailwind CDN:\n\t- `<link href=\"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css\" rel=\"stylesheet\">`\n- notice styles are gone\n- add `mx-5` to `main` element for left/right margins\n- add `my-5` class to `p` element for top/bottom margins\n- add `text-2xl` to the `h1` element\n- add `font-bold` to the `h1` element\n- after the `p` element, add:\n\t------------------------\n\t<button class=\"text-gray-300\">\n\t  Print Report\n\t</button>\n\t------------------------\n- then add to the button element these classes one at a time:\n\t- `bg-blue-600`\n\t- `font-bold`\n\t- `hover:text-white`\n\t- `hover:bg-blue-800`\n\t- `py-2` \n\t- `px-4`\n\t- `rounded`\n- explore the [Tailwind documentation](https://tailwindcss.com/docs/container)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-19 06:04:36","systemWhoCreated":"systemUnknown"},{"id":385,"category":"Materialize","title":"How to set up a website with Materialize CSS","body":"- create directory e.g. `testMaterialize`\n- open in Visual Studio\n- create `index.html`\n\t------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Materialize</title>\n\t</head>\n\n\t<body>\n\t\t<main>\n\t\t\t<h1>Welcome to Materialize</h1>\n\t\t\t<p>This is a test of this CSS framework.</p>\n\t\t</main>\n\t</body>\n\n\t</html>\n\t------------------------------------\n- look at site with Live Server\n- add Materialize\n\t- in `head` area:\n\t\t---------------------------\n\t    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n\t\t---------------------------\n\t- before closing `body` tag:\n\t\t------------------------------\n\t\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n\t\t------------------------------\n\t- give `main` the class `container`\n- add a card\n\t- go to: https://materializecss.com/cards.html\n\t- copy the HTML for *Basic Card* and paste it above the end `main` tag\n\t\t-----------------------------\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col s12 m6\">\n\t\t\t  <div class=\"card blue-grey darken-1\">\n\t\t\t\t<div class=\"card-content white-text\">\n\t\t\t\t  <span class=\"card-title\">Card Title</span>\n\t\t\t\t  <p>I am a very simple card. I am good at containing small bits of information.\n\t\t\t\t  I am convenient because I require little markup to use effectively.</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card-action\">\n\t\t\t\t  <a href=\"#\">This is a link</a>\n\t\t\t\t  <a href=\"#\">This is a link</a>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t</div>\n\t\t-----------------------------\n\t- change `darken-1` to `lighten-1`\n\t- change `blue-grey` to `green`\n- add another card and make responsive\n\t- on the Materialize page, scroll down to *Card Panel* and paste the following HTML in before the end of your `row` tag:\n\t\t-----------------------------\n\t\t<div class=\"col s12 m5\">\n\t\t  <div class=\"card-panel teal\">\n\t\t\t<span class=\"white-text\">I am a very simple card. I am good at containing small bits of information.\n\t\t\tI am convenient because I require little markup to use effectively. I am similar to what is called a panel in other frameworks.\n\t\t\t</span>\n\t\t  </div>\n\t\t</div>\n\t\t-----------------------------\n\t- change `m5` to `m6`\n\t- make screen width narrower and wider to see responsiveness\n- add a form with checkboxes as last element inside the `row`:\n\t---------------------------\n\t<div class=\"col s12 m6\">\n\t\t<div class=\"card-panel white\">\n\t\t\t<form action=\"#\">\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" />\n\t\t\t\t\t\t<span>Red</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" />\n\t\t\t\t\t\t<span>Yellow</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" />\n\t\t\t\t\t\t<span>Blue</span>\n\t\t\t\t\t</label>\n\t\t\t\t</p>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t---------------------------\n- add nav bar\n\t- before `main` element:\n\t\t--------------------------------------------\n\t\t<div class=\"container-fluid\">\n\t\t\t<nav>\n\t\t\t\t<div class=\"nav-wrapper\">\n\t\t\t\t\t<a href=\"#\"\n\t\t\t\t\t   class=\"brand-logo\"\n\t\t\t\t\t   style=\"margin-left: 10px\">Logo</a>\n\t\t\t\t\t<ul id=\"nav-mobile\"\n\t\t\t\t\t\tclass=\"right hide-on-med-and-down\">\n\t\t\t\t\t\t<li><a href=\"sass.html\">Sass</a></li>\n\t\t\t\t\t\t<li><a href=\"badges.html\">Components</a></li>\n\t\t\t\t\t\t<li><a href=\"collapsible.html\">JavaScript</a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t</div>\n\t\t--------------------------------------------\n\t- notice it is **not** responsive, seems not to work out-of-the-box as in Bootstrap","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-19 07:14:24","systemWhoCreated":"systemUnknown"},{"id":386,"category":"Bulma","title":"How to set up a website with Bulma CSS","body":"- create directory e.g. `testBulma`\n- open in Visual Studio\n- create `index.html`\n\t------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Bulma</title>\n\t</head>\n\t<body>\n\t\t<main class=\"container\">\n\t\t\t<h1 class=\"title\">\n\t\t\t\tWelcome to this site\n\t\t\t</h1>\n\t\t\t<p class=\"subtitle\">\n\t\t\t\tThis is a test of the Bulma CSS framwork.\n\t\t\t</p>\n\t\t</main>\n\t</body>\n\t</html>\n\t------------------------------------\n- look at site with Live Server\n- add [Bulma CDN link](https://cdnjs.com/libraries/bulma) to `head` e.g.:\n\t-----------------------------\n\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\" />\n\t-----------------------------\n- add buttons:\n\t------------------------------------------\n\t<div class=\"buttons\">\n\t\t<a class=\"button is-primary is-small\"\n\t\t   href=\"http://google.com\">test</a>\n\t\t<a class=\"button is-primary is-small is-loading\"\n\t\t   href=\"http://google.com\">test</a>\n\t\t<a class=\"button is-primary is-small is-outlined\"\n\t\t   href=\"http://google.com\">test</a>\n\t</div>\n\t------------------------------------------\n- add tiles:\n\t------------------------------------------\n\t<div class=\"tile is-ancestor\">\n\t\t<div class=\"tile is-vertical is-8\">\n\t\t\t<div class=\"tile\">\n\t\t\t\t<div class=\"tile is-parent is-vertical\">\n\t\t\t\t\t<article class=\"tile is-child notification is-primary\">\n\t\t\t\t\t\t<p class=\"title\">Vertical...</p>\n\t\t\t\t\t\t<p class=\"subtitle\">Top tile</p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<article class=\"tile is-child notification is-warning\">\n\t\t\t\t\t\t<p class=\"title\">...tiles</p>\n\t\t\t\t\t\t<p class=\"subtitle\">Bottom tile</p>\n\t\t\t\t\t</article>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"tile is-parent\">\n\t\t\t\t\t<article class=\"tile is-child notification is-info\">\n\t\t\t\t\t\t<p class=\"title\">Middle tile</p>\n\t\t\t\t\t\t<p class=\"subtitle\">With an image</p>\n\t\t\t\t\t\t<figure class=\"image is-4by3\">\n\t\t\t\t\t\t\t<img src=\"https://bulma.io/images/placeholders/640x480.png\">\n\t\t\t\t\t\t</figure>\n\t\t\t\t\t</article>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"tile is-parent\">\n\t\t\t\t<article class=\"tile is-child notification is-danger\">\n\t\t\t\t\t<p class=\"title\">Wide tile</p>\n\t\t\t\t\t<p class=\"subtitle\">Aligned with the right tile</p>\n\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\t<!-- Content -->\n\t\t\t\t\t</div>\n\t\t\t\t</article>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"tile is-parent\">\n\t\t\t<article class=\"tile is-child notification is-success\">\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t<p class=\"title\">Tall tile</p>\n\t\t\t\t\t<p class=\"subtitle\">With even more content</p>\n\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\tLorem ipsum dolor sit, amet consectetur adipisicing elit. Neque magni quisquam cupiditate minus eius fuga iusto culpa maiores suscipit quasi architecto quibusdam reprehenderit in ipsam at harum, delectus ipsa vitae.\n\t\t\t\t\t\tPlaceat amet ut, ex enim maxime quia quos dolorum inventore ea reprehenderit doloribus nostrum rem odio voluptates repellat. Incidunt, quas nisi. Commodi cum aperiam voluptates est pariatur consequuntur quod! Corporis.\n\t\t\t\t\t\tHarum, adipisci maiores veritatis ea unde dolores nobis deleniti quisquam quam sit tenetur rerum minima ex earum est, a quae tempore temporibus quod facilis necessitatibus numquam. Natus voluptatum aut molestiae.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</article>\n\t\t</div>\n\t</div>\n\t------------------------------------------\n\t- add top margin to tiles: `mt-2`\n\t- make layout half-half left to right\n\t\t- change `<div class=\"tile is-vertical is-8\">` to `<div class=\"tile is-vertical is-6\">`\n\t- add another section on left:\n\t\t- copy and paste the entire element *Bottom tile*\n\t\t- your layout should look like this:##bulma002\n- see [Bulma documentation](https://bulma.io/documentation) for more","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-19 08:13:19","systemWhoCreated":"systemUnknown"},{"id":387,"category":"regex","title":"How to use regex to replace multiple text patterns in a text with an array of new texts","body":"- note that you have to use a different regex (global/multiline) for matches than you do for replacements\n\t-----------------------------------------\n\tconst regex1 = /(\\[.*?\\])/;\n\tconst regex2 = new RegExp(regex1, 'gm');\n\n\tconst text = 'ich bin ein [bißchen/bisschen] [zurückgeblieben/hinterher] mit den Videos, habe ich [gedenkt/gedacht]';\n\n\tconst quizItemTexts = text.match(regex2);\n\tconst quizItems = quizItemTexts.map((quizItemText) => {\n\t\tlet cleanQuizItemText = quizItemText;\n\t\tcleanQuizItemText = cleanQuizItemText.replace('[', '');\n\t\tcleanQuizItemText = cleanQuizItemText.replace(']', '');\n\t\tconst [wrongAnswer, rightAnswer] = cleanQuizItemText.split('/');\n\t\treturn {\n\t\t\trightAnswer,\n\t\t\twrongAnswer\n\t\t}\n\t});\n\n\tconst phrases = {\n\t\tcloze: text,\n\t\twrong: text,\n\t\tright: text\n\t};\n\tfor (const quizItem of quizItems) {\n\t\tphrases.cloze = phrases.cloze.replace(regex2, '[________]');\n\t\tphrases.wrong = phrases.wrong.replace(regex1, quizItem.wrongAnswer);\n\t\tphrases.right = phrases.right.replace(regex1, quizItem.rightAnswer);\n\t}\n\n\tconsole.log(phrases);\n\t-----------------------------------------\n- output:##regextheaoutpu","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-28 00:47:31","systemWhoCreated":"systemUnknown"},{"id":388,"category":"JavaScript","title":"Six different environments to run JavaScript","body":"- **in an HTML file in the browser**\n\t- index.html\n\t\t---------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<title>JavaScript in Browser</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<p>This is text in HTML.</p>\n\t\t\t<p id=\"message1\"></p>\n\t\t\t<p id=\"message2\"></p>\n\t\t\t<script>\n\t\t\t\tconsole.log('This will be output in the browser console.');\n\t\t\t\tvar elem1 = document.querySelector('#message1');\n\t\t\t\tvar elem2 = document.querySelector('#message2');\n\t\t\t\telem1.innerHTML = 'This is the message from <b>JavaScript</b>.';\n\t\t\t\telem2.textContent = 'This is the message from <b>JavaScript</b>.';\n\t\t\t\telem1.style.backgroundColor = 'yellow';\n\t\t\t</script>\n\t\t</body>\n\t\t</html>\n\t\t---------------------------------\n- **in a JavaScript file loaded by an HTML file**\n\t- index.html\n\t\t----------------------------\n\t\t<!DOCTYPE html>\n\t\t<head>\n\t\t\t<title>JavaScript in Browser</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<p>This is text in HTML.</p>\n\t\t\t<p id=\"message1\"></p>\n\t\t\t<p id=\"message2\"></p>\n\t\t\t<script src=\"main.js\"></script>\n\t\t</body>\n\t\t</html>\n\t\t----------------------------\n\t- main.js\n\t\t-------------------------------------------\n\t\tconsole.log('This will be output in the browser console.');\n\t\tconst elem1 = document.querySelector('#message1');\n\t\tconst elem2 = document.querySelector('#message2');\n\t\telem1.innerHTML = 'This is the message from <b>JavaScript</b>.';\n\t\telem2.textContent = 'This is the message from <b>JavaScript</b>.';\n\t\telem1.style.backgroundColor = 'orange'\n\t\t-------------------------------------------\n\t- in most modern browsers you will have support for most of the [newest ECMAScript features](https://caniuse.com/?compare=firefox+90,chrome+93&compareCats=all)\n- **in JSFiddle**\n\t- go to [jsfiddle.net](https://jsfiddle.net)\n\t- copy in HTML area:\n\t\t---------------------------\n\t\t<p>This is text in HTML.</p>\n\t\t<p id=\"message1\"></p>\n\t\t<p id=\"message2\"></p>\n\t\t---------------------------\n\t- copy in JavaScript area:\n\t\t---------------------------\n\t\tconsole.log('This will be output in the browser console.');\n\t\tvar elem1 = document.querySelector('#message1');\n\t\tvar elem2 = document.querySelector('#message2');\n\t\telem1.innerHTML = 'This is the message from <b>JavaScript</b>.';\n\t\telem2.textContent = 'This is the message from <b>JavaScript</b>.';\n\t\telem1.style.backgroundColor = 'yellow';\n\t\t---------------------------\n\t- JSFiddle uses whatever version JavaScript your browser uses\n- **in Node**\n\t- install Node at [nodejs.org](https://nodejs.org/en/download)\n\t- create `server.js`\n\t\t--------------------------------\n\t\tconsole.log('this is from Node');\n\t\t--------------------------------\n\t- note however that you have no access to the `document` object since you are not in a browser anymore\n\t\t-----------------------------\n\t\tconst elem1 = document.querySelector('#message1');\n\t\t-----------------------------\n\t- but note you have access to objects you don't have access to in the browser:\n\t\t-------------------------------\n\t\tconsole.log(process);\n\t\tconsole.log(process.argv);\n\t\tconsole.log(process.argv[2]);\n\t\tconsole.log(process.env);\n\t\tconsole.log(process.env.HOSTNAME);\n\t\t-------------------------------\n\t- Node uses Google's V8 engine and so implements all ECMAScript features that the V8 engine implements\n\t\t- you can see which features each Node version implements here by going to [node.green](https://node.green)\n\t\t- click *show code examples*\n\t\t- search for `includes` and `startsWith`\n- **in React**\n\t- notice that you have access to a `process` object as in Node, but it's not the same one:\n\t\t------------------------------------------\n\t\tconsole.log(process);\t\n\t\t------------------------------------------\n\t- you can set variables that start with `REACT_APP_` in the `.env` file and they will show up in your `process` object\n\t\t- `.env`\n\t\t\t-------------------------\n\t\t\tREACT_APP_DATASOURCE=testing.json\n\t\t\t-------------------------\n\t- note you can create a `.env.development` and `.env.production` file and those variables will be available in their respective environments\n- **in Google Scripts**\n\t- see how you can use [Google Scripts](https://www.benlcollins.com/apps-script/google-apps-script-beginner-guide) to create and manipulate Google Docs programmatically with JavaScript","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-29 21:26:42","systemWhoCreated":"systemUnknown"},{"id":389,"category":"Express","title":"How to make a simple Express server to display system information in a browser","body":"- `npm i express`\n- `server.js`\n\t-------------------------------\n\tconst express = require('express');\n\tconst app = express();\n\tconst port = 3000;\n\n\tapp.get('/', (req, res) => {\n\t\tres.send(`\n\t\t<h1>Information</h1>\n\t\t<p>Node version: ${process.versions.node}</p>\n\t\t`);\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`Example app listening at http://localhost:${port}`)\n\t});\n\t-------------------------------\n- `nodemon server.js`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-29 21:53:27","systemWhoCreated":"systemUnknown"},{"id":390,"category":"JavaScript","title":"An example of JavaScript running on the backend and frontend in one file","body":"- `npm i express`\n- `server.js`\n\t-------------------------------\n\tconst express = require('express');\n\tconst app = express();\n\tconst port = 3000;\n\n\tapp.get('/', (req, res) => {\n\t\tres.send(`\n\t\t<h1>System Information</h1>\n\t\t<ul>\n\t\t\t<li>Node version: ${process.versions.node}</li>\n\t\t\t<li>Operating system language: ${process.env.LANG}</li>\n\t\t\t<li>Executing directory: ${process.env.PWD}</li>\n\t\t\t<li>Temp directory: ${process.env.TEMP}</li>\n\t\t</ul>\n\t\t<script>\n\t\t\tvar infoLines = document.querySelectorAll('li');\n\t\t\tfor(let i = 0; i < infoLines.length; i++) {\n\t\t\t\tinfoLines[i].onclick = () => {\n\t\t\t\t\tinfoLines[i].style.backgroundColor = 'yellow';\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t\t`);\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`Example app listening at http://localhost:${port}`);\n\t});\n\t-------------------------------\n- `nodemon server.js`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-30 08:11:03","systemWhoCreated":"systemUnknown"},{"id":391,"category":"Kotlin","title":"Install Kotlin on Windows","body":"- go to [GitHub download page](https://github.com/JetBrains/kotlin/releases/tag/v1.5.10)\n- download `kotlin-compiler-1.5.10.zip`\n- unzip\n- copy the entire `kotlinc` folder to `c:\\kotlin`\n- add `C:\\kotlin\\kotlinc` to your system environment PATH\n- create `helloWorld.kt`\n\t--------------------------------\n\tfun main() {\n\t\tprintln(\"Hello world.\");\n\t}\n\t--------------------------------\n- compile with `kotlinc HelloWorld.kt`\n\t- this will produce `HelloWorldKt.class`\n- execute with `kotlin HelloWorldKt`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-30 14:28:51","systemWhoCreated":"systemUnknown"},{"id":392,"category":"Languages","title":"How to install and execute ten languages: five interpreted (Python, PHP, Ruby, JavaScript, TypeScript) and five compiled (Java, C#, Go, Rust, Kotlin)","body":"- These examples will show you not only the practical differences between interpreted and compiled languages, but will get these languages installed on your computer and will get you up and running using and learning them.\n- An interpreted language is a programming language whose implementations execute instructions directly, without previously compiling a program into machine-language instructions. A compiled language requires a compile step which converts the programming code into a binary executable file.\n- Interpreted languages:\n\t- **Python** (1994)\n\t\t- install Python on [Windows](https://onespace.netlify.app/howtos?id=326) or [Ubuntu](https://onespace.netlify.app/howtos?id=325)\n\t\t- create `helloFromPython.py`\n\t\t\t------------------------------\n\t\t\tprint(\"Hello from Python.\")\n\t\t\t------------------------------\n\t\t- execute with: `python helloFromPython.py`\n\t- **PHP** (1995)\n\t\t- install PHP with XAMPP on [Windows or Linux](https://www.apachefriends.org/de/index.html)\n\t\t\t- one Windows, make sure `C:\\xampp\\php` is in your system environment path\n\t\t- create `helloFromPhp.php`\n\t\t\t------------------------------\n\t\t\t<?php\n\t\t\techo 'Hello from PHP.';\n\t\t\t------------------------------\n\t\t- execute with: `php helloFromPhp.php`\n\t- **Ruby** (1995)\n\t\t- install Ruby on [Windows](https://rubyinstaller.org) or [Linux](https://www.ruby-lang.org/en/downloads)\n\t\t\t- make sure environment path includes e.g. `C:\\Ruby26-x64\\bin`\n\t\t- install on [Ubuntu](https://stackify.com/install-ruby-on-ubuntu-everything-you-need-to-get-going)\n\t\t- create `helloFromRuby.rb`\n\t\t\t-------------------------\n\t\t\tputs \"Hello from Ruby.\"\n\t\t\t-------------------------\n\t\t- execute with: `ruby helloFromRuby.rb`\n\t- **JavaScript** (1995)\n\t\t- install Node on [Windows or Linux](https://nodejs.org/en/download)\n\t\t- create `helloFromJavaScript.js`\n\t\t\t-------------------------------------\n\t\t\tconsole.log(\"Hello from JavaScript.\");\n\t\t\t-------------------------------------\n\t\t- execute with `node helloFromJavaScript.js`\n\t- **TypeScript** (2012)\n\t\t- install Deno [on Windows](https://onespace.netlify.app/howtos?id=330) or [on Ubuntu](https://stackoverflow.com/questions/61851774/how-to-install-deno-on-ubuntu)\n\t\t- create `helloFromTypeScript.ts`\n\t\t\t--------------------------------\n\t\t\t/* eslint-disable no-console */\n\t\t\tfunction capitalize(word: string): string {\n\t\t\t\treturn word.charAt(0).toUpperCase() + word.slice(1);\n\t\t\t}\n\n\t\t\tfunction hello(name: string): string {\n\t\t\t\treturn capitalize(name);\n\t\t\t}\n\n\t\t\tconsole.log(hello('hello from TypeScript'));\n\t\t\t--------------------------------\n\t\t- execute with: `deno run helloFromTypeScript.ts`\n- Compiled languages:\n\t- **Java** (1995)\n\t\t- install Java on [Windows or Linux](https://onespace.netlify.app/forays?id=61)\n\t\t- create `HelloFromJava.java`\n\t\t\t--------------------------------------------\n\t\t\tpublic class HelloFromJava {\n\t\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\tSystem.out.println(\"Hello from Java.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- compile to executable with: `javac HelloFromJava.java`\n\t\t- execute with: `java -classpath . HelloFromJava`\n\t- **C#** (2000)\n\t\t- Windows installation:\n\t\t\t- make sure you have [.NET installed](https://docs.microsoft.com/en-us/dotnet/core/install/windows?tabs=net50) \n\t\t\t- add path to system environment path to `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319`\n\t\t- Linux installation:\n\t\t\t- install .NET on [Ubuntu](https://docs.microsoft.com/en-us/dotnet/core/install/linux-ubuntu)\n\t\t- create `helloFromCsharp.cs`\n\t\t\t-------------------------------------\n\t\t\tusing System;\n\t\t\tnamespace HelloExample {\n\t\t\t\tclass HelloFromCsharp {\n\t\t\t\t\tstatic void Main(string[] args) {\n\t\t\t\t\t\tConsole.WriteLine(\"Hello from C#.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------\n\t\t - compile to executable with: `csc helloFromCsharp.cs`\n\t\t - execute with: `helloFromCsharp.exe`\n\t- **Golang** (2007)\n\t\t- install Golang on [Windows or Linux](https://golang.org/doc/install)\n\t\t- create `helloFromGolang.go`\n\t\t\t---------------------------------------\n\t\t\tpackage main\n\n\t\t\timport (\n\t\t\t\t\"fmt\"\n\t\t\t)\n\n\t\t\tfunc main() {\n\t\t\t\tfmt.Println(\"Hello from Golang.\")\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- compile to executable with: `go build helloFromGolang.go`\n\t\t- execute with: `./helloFromGolang.exe`\n\t- **Rust** (2010)\n\t\t- install Rust for [Windows or Linux](https://www.rust-lang.org/tools/install)\n\t\t- on Windows, add the following path to your environment PATH: `C:\\Users\\ADMIN\\.cargo\\bin` (where ADMIN is your user name)\n\t\t- create `helloFromRust.rs`\n\t\t\t-----------------------------------\n\t\t\tfn main() {\n\t\t\t\tprintln!(\"Hello from Rust.\");\n\t\t\t}\n\t\t\t-----------------------------------\n\t\t- compile to executable with: `rustc helloFromRust.rs`\n\t\t- execute with: `./helloFromRust.exe`\n\n\t- **Kotlin** (2011)\n\t\t- install Kotline on [Windows](http://localhost:29900/howtos?id=391) or [Ubuntu](https://linuxhint.com/kotlin_ubuntu/)\n\t\t- create `helloFromKotlin.kt`\n\t\t\t--------------------------------\n\t\t\tfun main() {\n\t\t\t\tprintln(\"Hello from Kotlin.\");\n\t\t\t}\n\t\t\t--------------------------------\n\t\t- compile to executable with: `kotlinc HelloWorld.kt`\n\t\t\t- this will produce `HelloWorldKt.class`\n\t\t- execute with `kotlin HelloWorldKt`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-05-30 14:36:16","systemWhoCreated":"systemUnknown"},{"id":393,"category":"Vue 3.0","title":"How to make a basic Vue 3.0 page which displays variables","body":"- note that the syntax is different that [Vue 2.0](https://onespace.netlify.app/howtos?id=5)##vue30ok\n\t--------------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t<title>Vue 3.0</title>\n\t</head>\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<h1>Questions:</h1>\n\t\t\tQ1: Convert a string to upper-case letters: {{q1}}\n\t\t</div>\n\t\t<script>\n\t\t\tconst App = {\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tq1: 'This is a sentence.'.toUpperCase()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t\tVue.createApp(App).mount('#app');\n\t\t</script>\n\t</body>\n\t</html>\n\t--------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-06-04 13:21:21","systemWhoCreated":"systemUnknown"},{"id":394,"category":"Regex","title":"How to build a regex from a string","body":"- When using `.match` for regular expressions, you can't build the regex with strings. \n- You need to use `new RegExp` and include `g` for global and `i` for case-insensitive.\n- Notice also with `new RegExp` that you don't need the `/`...`/` slashes.\n\t---------------------------\n\tfunction countLetters(str, findLetters) {\n\t\tconst lettersString = findLetters.join('');\n\t\t// const matches = str.match(`/[${lettersString}]/gi`); // matches are null\n\t\tconst regex = new RegExp(`[${lettersString}]`, 'gi');\n\t\tconst matches = str.match(regex);\n\t\treturn matches.join('');\n\t}\n\tconsole.log(countLetters('this is a Test', ['t', 'i', 's']));\n\t---------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-06-23 11:26:33","systemWhoCreated":"systemUnknown"},{"id":395,"category":"javascript","title":"How to clean a string of non-letters with regex","body":"- note that upper and lower German letters are also left in string:\n\t----------------------------\n\tconst regex = /[a-zA-Zßäöü ]/gi;\n\tconst str = `this is a \"§4323bunch of let8273ters und auch deutsche Buchstaben sind möglich`;\n\tconst matches = str.match(regex);\n\n\tconst newStr = matches.join('');\n\n\tconsole.log(str);\n\tconsole.log(newStr);\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-07-14 14:29:16","systemWhoCreated":"systemUnknown"},{"id":396,"category":"JavaScript","title":"How to turn a number into an array of that many numbers","body":"- in order to use the higher-order functions, one often needs to change a number e.g. a total into an array of that many numbers so you can iterate over them with `map()` or `forEach()` etc.\n\t-------------------------\n\tconst total = Math.floor(Math.random() * 20) + 1;\n\tconst numberArray = Array.from(Array(total).keys());\n\tnumberArray.forEach((number) => {\n\t\tconsole.log(`${number} stars: ${'*'.repeat(number)}`);\n\t});\n\t-------------------------\n- output:##theoutputarrayfrom","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-09 14:49:44","systemWhoCreated":"systemUnknown"},{"id":397,"category":"regex","title":"Basics of JavaScript regular expressions","body":"- remember to include the `g` at the end of the regex:\n\t---------------------------------\n\tconst regex = /(\\bcolou?r\\b)/g;\n\tconst str = \"This is a color and a colorful, but this is a colour, and so is this colour a color.\";\n\tconst matches = str.match(regex);\n\tconst newString = str.replace(regex, '****');\n\tconsole.log(matches);\n\tconsole.log(str);\n\tconsole.log(newString);\n\t---------------------------------\n- output:##thereggexxl","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-14 12:29:28","systemWhoCreated":"systemUnknown"},{"id":398,"category":"JavaScript","title":"Make a simple animation with requestAnimationFrame","body":"- note you don't have to track the time yourself as with setInterval\n\t-------------------------------------------\n\t<!doctype html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>JavaScript Animations</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground-color: rgb(30, 30, 30);\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\n\t\t\t#circle {\n\t\t\t\twidth: 50px;\n\t\t\t\theight: 50px;\n\t\t\t\tleft: 0px;\n\t\t\t\tborder-radius: 50px;\n\t\t\t\tbackground-color: crimson;\n\t\t\t\tposition: relative;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"circle\"></div>\n\t\t<script>\n\t\t\tvar ol = 0;\n\t\t\tvar circleInterval;\n\t\t\tfunction circleAnimation(time) {\n\t\t\t\tol++;\n\t\t\t\tdocument.getElementById(\"circle\").style.left = (ol * 10) + \"px\";\n\t\t\t\tif (time < 1000) {\n\t\t\t\t\tcircleInterval = requestAnimationFrame(circleAnimation);\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById(\"circle\").style.backgroundColor = \"dimgrey\";\n\t\t\t\t\tcancelAnimationFrame(circleInterval);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcircleInterval = requestAnimationFrame(circleAnimation);\n\t\t</script>\n\t</body>\n\n\t</html>\n\t-------------------------------------------\n- output:##theballisjdf","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-14 15:22:18","systemWhoCreated":"systemUnknown"},{"id":399,"category":"JavaScript","title":"Create a modal window message in vanilla JavaScript","body":"- Clicking the button fades out the screen and displays a message window that can be clicked closed:##themodalwin\n- index.html\n\t---------------------------\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t  <link rel=\"stylesheet\" href=\"main.css\">\n\t\t<title>Modal</title>\n\t</head>\n\n\t<body>\n\t\t<button id=\"btnInfo\">Get Information</button>\n\t\t<div id=\"modalBackground\" class=\"modal\">\n\t\t\t<div class=\"modalWindow\">\n\t\t\t\t<span class=\"close\">&times;</span>\n\t\t\t\t<p>Here is the information.</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<script src=\"main.js\"></script>\n\t</body>\n\n\t</html>\n\t---------------------------\n- main.css\n\t-----------------------------------\n\tbody {\n\t\tfont-family: arial, sans-serif;\n\t\tpadding: 20px;\n\t}\n\n\t.modal {\n\t\tdisplay: none;\n\t\tposition: fixed;\n\t\tz-index: 1;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: auto;\n\t\tbackground-color: rgba(0, 0, 0, 0.4);\n\t}\n\n\t.modalWindow {\n\t\tbackground-color: #fefefe;\n\t\tmargin: 15% auto;\n\t\tpadding: 20px;\n\t\tborder: 1px solid #888;\n\t\twidth: 50%;\n\t\tposition: relative;\n\t\tborder-radius: 5px;\n\t}\n\n\t.close {\n\t\tposition: absolute;\n\t\tright: 10px;\n\t\ttop: 5px;\n\t\tcolor: #aaa;\n\t\tfloat: right;\n\t\tfont-size: 1.4rem;\n\t\tfont-weight: bold;\n\t}\n\n\t.close:hover {\n\t\tcolor: black;\n\t\tcursor: pointer;\n\t}\n\t-----------------------------------\n- main.js\n\t------------------------------------\n\tconst modalBackground = document.getElementById(\"modalBackground\");\n\tconst btnInfo = document.getElementById(\"btnInfo\");\n\tconst btnClose = document.querySelector(\".close\");\n\n\tbtnInfo.onclick = () => {\n\t\tmodalBackground.style.display = \"block\";\n\t}\n\n\tbtnClose.onclick = () => {\n\t\tmodalBackground.style.display = \"none\";\n\t}\n\n\twindow.onclick = e => {\n\t\tif (e.target === modalBackground) {\n\t\tmodalBackground.style.display = \"none\";\n\t\t}\n\t}\n\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-22 20:06:11","systemWhoCreated":"systemUnknown"},{"id":400,"category":"Regex","title":"How to get three-digit number out of string with JavaScript regex","body":"- note it doesn't find 001\n\t-----------------------------\n\tconst text = ` CLASS001 / Exercise-431-SPA-MOD-buildWebsiteWithParcel Private`;\n\tconst regex = /(-\\d\\d\\d-)/g;\n\tconst matches = text.match(regex);\n\tconst found = matches[0].substring(1, 4);\n\tconsole.log(text);\n\tconsole.log(matches);\n\tconsole.log(found);\n\t-----------------------------\n- output:##theregfind001out","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-25 10:58:34","systemWhoCreated":"systemUnknown"},{"id":401,"category":"JavaScript Promises","title":"Classic resolveFn/rejectFn syntax executes in order","body":"- note that no errors are thrown and .catch() isn't used:\n\t------------------------------------\n\tconst getRecordById = (id) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst randNum = Math.floor(Math.random() * 2) + 1;\n\t\t\tif (randNum === 1) {\n\t\t\t\tresolve({ id, firstName: 'John', lastName: 'Doe' });\n\t\t\t} else {\n\t\t\t\treject(`user id ${id} not found`);\n\t\t\t}\n\t\t});\n\t};\n\n\tfor (let id = 1; id <= 10; id++) {\n\t\tgetRecordById(id)\n\t\t\t.then(\n\t\t\t\t(record) => { console.log(`you got record #${record.id}`); },\n\t\t\t\t(errMessage) => { console.log(`error was: ${errMessage}`); }\n\t\t\t);\n\t}\n\t------------------------------------\n- output:##thenoerrorcatch","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-27 09:54:24","systemWhoCreated":"systemUnknown"},{"id":402,"category":"Callback","title":"Display results from callbacks as they complete","body":"- note that info2 will be displayed before info1\n\t----------------------------\n\tconst getInfo1 = () => { setTimeout(() => console.log('info1'), 2000) };\n\tconst getInfo2 = () => { setTimeout(() => console.log('info2'), 1000); }\n\n\tgetInfo1();\n\tgetInfo2();\n\t----------------------------\n- result##theresultinfotimepouts","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-27 15:12:02","systemWhoCreated":"systemUnknown"},{"id":403,"category":"Callback","title":"Display results from promises as they complete","body":"- note that info2 will be displayed before info1\n\t----------------------------\n\tconst getInfo1 = new Promise((resolve) => { setTimeout(() => resolve('info1'), 2000) });\n\tconst getInfo2 = new Promise((resolve) => { setTimeout(() => resolve('info2'), 1000) });\n\n\tgetInfo1.then((text) => console.log(text));\n\tgetInfo2.then((text) => console.log(text));\n\t----------------------------\n- result##theresultinfotimepouts","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-27 15:22:36","systemWhoCreated":"systemUnknown"},{"id":404,"category":"JavaScript","title":"Get a list of numbers from 1 to n","body":"- note that Array.from() turns array-like objects into arrays\n\t--------------------------------------\n\t// ordered list\n\tconsole.log(Array.from(Array(10).keys()).map(m => `item #${m + 1}`));\n\n\t// functional for-loop\n\tArray.from(Array(5).keys()).forEach(m => {\n\t\tconsole.log('hello');\n\t});\n\n\t// countdown string\n\tconsole.log(Array.from(Array(100).keys()).reverse().map(m => m + 1).join(', '));\n\t--------------------------------------\n- output:##thethreearrayfromlist","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-27 22:05:26","systemWhoCreated":"systemUnknown"},{"id":405,"category":"JavaScript","title":"One-liner: Create an array of letters from A to Z","body":"- note that Array.from() turns array-like objects into arrays\n\t--------------------------------------\n\tconsole.log(Array.from(Array(26).keys()).map(m => String.fromCharCode(m + 65)));\n\t--------------------------------------\n- output:##theoneoneliner","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-27 22:40:44","systemWhoCreated":"systemUnknown"},{"id":406,"category":"Promises","title":"Display group of promises as they fulfill and after all fulfill","body":"- output:##inthesecondkksj\n- index.html\n\t-------------------------\n\t<html>\n\t<head>\n\t\t<title>In Order</title>\n\t\t<link rel=\"stylesheet\"\n\t\t\t  type=\"text/css\"\n\t\t\t  href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t<script src=\"main.js\"\n\t\t\t\ttype=\"module\"\n\t\t\t\tdefer></script>\n\t</head>\n\t<body>\n\t\t<button class=\"btnInOrder\">Display each promise when it is fulfilled</button>\n\t\t<button class=\"btnAllAtOnce\">Display promises after all are fulfilled</button>\n\t\t<span class=\"loaderArea\">\n\t\t\t<i class=\"fa fa-spinner fa-spin\"\n\t\t\t   aria-hidden=\"true\"></i>\n\t\t</span>\n\n\t\t<ul class=\"content\">\n\t\t</ul>\n\t</body>\n\t</html>\n\t-------------------------\n- index.js\n\t------------------------------------\n\timport Loader from './Loader.js';\n\n\tconst btnInOrderElem = document.querySelector(\".btnInOrder\");\n\tconst btnAllAtOnceElem = document.querySelector(\".btnAllAtOnce\");\n\tconst contentElem = document.querySelector(\".content\");\n\tconst loaderAreaElem = document.querySelector(\".loaderArea\");\n\n\tloaderAreaElem.style.display = 'none';\n\n\tconst loader = new Loader();\n\n\tbtnInOrderElem.onclick = () => {\n\t\t(async () => {\n\t\t\tcontentElem.innerHTML = '';\n\t\t\tloaderAreaElem.style.display = 'inline';\n\t\t\taddLi(await loader.getData());\n\t\t\taddLi(await loader.getData());\n\t\t\taddLi(await loader.getData());\n\t\t\tloaderAreaElem.style.display = 'none';\n\t\t})();\n\t}\n\n\tbtnAllAtOnceElem.onclick = () => {\n\t\tcontentElem.innerHTML = '';\n\t\tloaderAreaElem.style.display = 'inline';\n\t\t(async () => {\n\t\t\tPromise.allSettled(Array.from(Array(3).keys()).map(m => loader.getData()), []).then((results) => results.forEach(result => {\n\t\t\t\taddLi(result.value);\n\t\t\t\tconsole.log(`Result \"${result.value}\" is ${result.status}`);\n\t\t\t\tloaderAreaElem.style.display = 'none';\n\t\t\t}));\n\t\t})();\n\t}\n\n\tfunction addLi(text) {\n\t\tconst liElem = document.createElement('LI');\n\t\tliElem.innerText = text;\n\t\tcontentElem.appendChild(liElem);\n\t}\n\t------------------------------------\n- Loader.js\n\t--------------------------------\n\tclass Loader {\n\t\t#counter = 0;\n\t\t#letters = Array.from(Array(26).keys()).map(m => String.fromCharCode((m + 65)));\n\t\tconstructor() {\n\t\t\tthis.counter = this.#counter;\n\t\t}\n\t\tgetRandomSeconds() {\n\t\t\treturn Math.floor(Math.random() * 3) + 1;\n\t\t}\n\t\tgetData() {\n\t\t\tconst randSecs = this.getRandomSeconds();\n\t\t\treturn new Promise((resolve) => setTimeout(() => resolve(`info ${this.#letters[this.#counter++]} in ${randSecs} seconds`), randSecs * 1000));\n\t\t}\n\t}\n\n\texport default Loader;\n\t--------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-27 22:51:25","systemWhoCreated":"systemUnknown"},{"id":407,"category":"Promises","title":"Simple example of async/await to get data","body":"- notice both Promise and setTimeout receive functions as parameters:\n\t----------------------------\n\tconst getData = (idCode) => new Promise(resolve => setTimeout(() => resolve('this is ' + idCode), 1000));\n\n\t(async () => {\n\t\tconst users = await getData('users');\n\t\tconsole.log(users);\n\t\tconst products = await getData('products');\n\t\tconsole.log(products);\n\t})();\n\t----------------------------\n- output:##thedonetwook","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-28 00:30:47","systemWhoCreated":"systemUnknown"},{"id":408,"category":"Promises","title":"Example showing that Promise.allSettled() maintains order of results","body":"- note that this order is always conserved, the sent sequence is the same as the received sequence, regardless of the time taken by each request\n\t-------------------------\n\tconst getData = typeOfData => new Promise(resolve => {\n\t\tconst secs = (Math.floor(Math.random() * 3) + 1);\n\t\tsetTimeout(() => resolve(`${typeOfData} retrieved in ${secs} second(s)`), secs * 1000 );\n\t});\n\n\tconst loadActions = [getData('userData'), getData('products'), getData('ads')];\n\n\t(async () => {\n\t\tconst dataItems = await Promise.allSettled(loadActions);\n\t\tconsole.log(dataItems);\n\t})();\n\t-------------------------\n- output:##thealwaysworder","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-08-28 00:44:17","systemWhoCreated":"systemUnknown"},{"id":409,"category":"React","title":"Basic React as two versions of ticking clock example","body":"- index.js - version 1\n\t------------------------------------\n\timport React from 'react';\n\timport ReactDOM from 'react-dom';\n\timport './reset.css';\n\n\tfunction tick() {\n\t\tconst Clock = (\n\t\t\t<div>\n\t\t\t\t<div>It is {new Date().toLocaleTimeString()}</div>\n\t\t\t</div>\n\t\t);\n\t\tReactDOM.render(\n\t\t\tClock,\n\t\t\tdocument.getElementById('root')\n\t\t);\n\t}\n\n\tsetInterval(tick, 1000);\n\t------------------------------------\n- index.js - version 2\n\t-------------------------------------\n\timport React from 'react';\n\timport ReactDOM from 'react-dom';\n\timport './reset.css';\n\n\tfunction Clock(props) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>It is {props.date.toLocaleTimeString()}</div>\n\t\t\t</div>\n\t\t)\n\t};\n\n\tfunction tick() {\n\t\tReactDOM.render(\n\t\t\t<Clock date={new Date()}/>,\n\t\t\tdocument.getElementById('root')\n\t\t);\n\t}\n\n\tsetInterval(tick, 1000);\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-09-11 14:54:19","systemWhoCreated":"systemUnknown"},{"id":410,"category":"React","title":"Difference between class and function component called from ReactDOM.render()","body":"- note that the function component clock runs but the class component clock doesn't\n\t----------------------------\n\timport React from 'react';\n\timport ReactDOM from 'react-dom';\n\timport './reset.css';\n\n\tclass Clock extends React.Component {\n\t\tconstructor(props) {\n\t\t\tconsole.log('here in Clock: ' + (new Date()).toLocaleTimeString());\n\t\t\tsuper(props);\n\t\t\tthis.state = { date: new Date() };\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div>It is {this.state.date.toLocaleTimeString()}</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t};\n\n\tfunction Clock2() {\n\t\treturn (\n\t\t\t<div>It is {(new Date()).toLocaleTimeString()}</div>\n\t\t)\n\t}\n\n\tfunction tick() {\n\t\tconsole.log('here in tick: ' + (new Date()).toLocaleTimeString());\n\t\tReactDOM.render(\n\t\t\t<div><Clock /><Clock2/></div>,\n\t\t\tdocument.getElementById('root')\n\t\t);\n\t}\n\n\tsetInterval(tick, 1000);\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-09-11 15:54:13","systemWhoCreated":"systemUnknown"},{"id":411,"category":"React","title":"Class and function component as clock to show differences","body":"- note that each component has the same functionality with different syntax\n\t------------------------------------------------\n\timport React, {useEffect, useState} from 'react';\n\timport ReactDOM from 'react-dom';\n\timport './reset.css';\n\n\tclass Clock extends React.Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = { date: new Date() };\n\t\t}\n\n\t\tcomponentDidMount() {\n\t\t\tthis.timerID = setInterval(() => {\n\t\t\t\tthis.tick();\n\t\t\t}, 1000);\n\t\t}\n\n\t\tcomponentWillUnmount() {\n\t\t\tclearInterval(this.timerID);\n\t\t}\n\n\t\ttick() {\n\t\t\tthis.setState({\n\t\t\t\tdate: new Date()\n\t\t\t});\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div>It is {this.state.date.toLocaleTimeString()}</div>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t};\n\n\tfunction Clock2() {\n\t\tconst [date, setDate] = useState(new Date());\n\t\tuseEffect(() => {\n\t\t\tconst tickID = setInterval(() => {\n\t\t\t\ttick();\n\t\t\t}, 1000);\n\t\t\treturn () => {\n\t\t\t\tclearInterval(tickID);\n\t\t\t}\n\t\t}, []);\n\n\t\tfunction tick() {\n\t\t\tsetDate(new Date());\n\t\t}\n\t\treturn (\n\t\t\t<div>It is {date.toLocaleTimeString()}</div>\n\t\t)\n\t}\n\n\t(function tick() {\n\t\tReactDOM.render(\n\t\t\t<div><Clock /><Clock2 /></div>,\n\t\t\tdocument.getElementById('root')\n\t\t);\n\t})();\n\t------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-09-11 17:23:05","systemWhoCreated":"systemUnknown"},{"id":412,"category":"React","title":"How to set focus on input box with useRef","body":"- note that you can have as many useRef variables as you need##thefocusus\n- App.js\n\t-------------------------------------------------------\n\timport { useRef, useEffect } from 'react';\n\n\timport './App.css';\n\n\tfunction App() {\n\t\tconst inputRefBox1 = useRef(null);\n\t\tconst inputRefBox2 = useRef(null);\n\n\t\tuseEffect(() => {\n\t\t\tinputRefBox1.current.focus();\n\t\t}, []);\n\n\t\tconst focusBox1 = () => {\n\t\t\tinputRefBox1.current.focus();\n\t\t}\n\t\tconst focusBox2 = () => {\n\t\t\tinputRefBox2.current.focus();\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div>Box 1: <input ref={inputRefBox1} type=\"text\" /> <button onClick={focusBox1}> Focus Box 1</button></div>\n\t\t\t\t<div>Box 2: <input ref={inputRefBox2} type=\"text\" /> <button onClick={focusBox2}> Focus Box 2</button></div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-09-16 23:22:11","systemWhoCreated":"systemUnknown"},{"id":413,"category":"React","title":"How to use bind() in class components","body":"- You have to bind methods that you use:\n\t--------------------\n\timport { Component } from 'react';\n\n\tclass ToggleDisplay extends Component {\n\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\tcollapsed: true\n\t\t\t};\n\t\t\tthis.toggleCollapse = this.toggleCollapse.bind(this);\n\t\t}\n\n\t\ttoggleCollapse() {\n\t\t\tthis.setState({\n\t\t\t\tcollapsed: !this.state.collapsed\n\t\t\t})\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div onClick={this.toggleCollapse}>{this.props.title}</div>\n\t\t\t\t\t{!this.state.collapsed && (\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{this.props.items.map((item, index) => <li key={index}>{item}</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\t}\n\texport default ToggleDisplay;\n\t--------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-09-20 20:09:28","systemWhoCreated":"systemUnknown"},{"id":414,"category":"Node","title":"Create simple website with Node/createServer","body":"- these instructions will create a Node web server with page routing (without Express) in 50 lines##simpleHttpServerNode\n- set up for ES6 modules\n\t- `npm init -y`\n\t- package.json: `\"type\":\"module\",`\n- create minimal HTTP server: `server.js`\n\t------------------------------------------\n\timport * as http from 'http';\n\tconst port = 3005;\n\n\thttp.createServer((req, res) => {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.write('hello')\n\t\tres.end();\n\t}).listen(port);\n\n\tconsole.log(`listening on port ${port}`);\n\t------------------------------------------\n- change to serve HTML\n\t- `res.write('<h1>hello</h1>')`\n\t- reload\n\t- `'text/html'`\n- add content:\n\t------------------------\n\tconst content = '<h1>Welcome</h1><p>Welcome to this site.</p>';\n\tres.write(`\n\t<html lang=\"en\">\n\t<head>\n\t\t<title>Info Site</title>\n\t</head>\n\t<body>\n\t${content}\n\t</body>\n\t</html>\n\t`);\n\t------------------------\n- add navigation:\n\t--------------------------------\n\tconst nav = `<nav><a href=\"welcome\">Welcome</a> | <a href=\"info\">Info</a> | <a href=\"about\">About</a></nav>`;\n\t--------------------------------\n- note that `req.url` gives us the url path\n\t------------------------------------\n\tconsole.log(req.url);\n\t------------------------------------\n- add welcome page\n\t-----------------------------------\n\tlet content = '';\n\tswitch (req.url) {\n\t\tcase '/welcome':\n\t\t\tcontent = '<h1>Welcome</h1><p>Welcome to this site.</p>';\n\t\t\tbreak;\n\t}\n\t-----------------------------------\n- add other pages\n\t-----------------------------------------\n\tcase '/info':\n\t\tcontent = '<h1>Info</h1><p>This is where the info goes.</p>';\n\t\tbreak;\n\tcase '/about':\n\t\tcontent = '<h1>About</h1><p>This site is a general info site.</p>';\n\t\tbreak;\t\n\t-----------------------------------------\n- add CSS styling\n\t----------------------------------\n\t<style>\n\tbody {\n\t\tbackground-color: #333;\n\t\tfont-family: sans-serif;\n\t\tpadding: 20px;\n\t\tcolor: #ccc;\n\t}\n\tnav {\n\t\tbackground-color: #222;\n\t\tpadding: 10px;\n\t\tcolor: #333; \n\t}\n\ta {\n\t\tcolor: #aaa;\n\t}\n\t</style>\n\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-19 05:38:13","systemWhoCreated":"systemUnknown"},{"id":415,"category":"EJS","title":"Create Server-Side Dynamic Website with Express and EJS","body":"- these instructions show how to build a backend, data-driven website with Node/Express/EJS##expressejssite\n- overview\n\t- [Express](https://expressjs.com)\n\t\t- web application framework for Node.js and the de facto Node standard for building web applications and APIs\n\t- [EJS](https://ejs.co)\n\t\t- Embedded JavaScript templating\n\t\t- enables Express to serve HTML-like templates with both server-side and client-side JavaScript\n- set up Express site that serves **static** HTML/CSS/JavaScript pages\n\t- set up Git\n\t\t- `git init`\n\t\t- add file `.gitignore`\n\t\t---------------------------\n\t\tnode_modules\n\t\t---------------------------\n\t- set up npm project and switch to ES6 modules\n\t\t- `npm init -y`\n\t\t- package.json: `\"type\":\"module\",`\n\t- set up nodemon so the server restarts after changed\n\t\t- `npm i nodemon -D`\n\t- `npm i express`\n\t- create server.js\n\t\t-------------------------\n\t\timport express from 'express';\n\t\timport path from 'path';\n\t\tconst __dirname = path.resolve(path.dirname(''));\n\n\t\tconst app = express();\n\t\tconst port = 3006;\n\n\t\tconst staticDirectory = path.join(__dirname, './public');\n\t\tapp.use(express.static(staticDirectory));\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Listening on port ${port}.`);\n\t\t});\n\t-------------------------\t\n\t- create `public` directory\n\t- create `index.html` file in public\n\t\t---------------------------------\n\t\t<html>\n\t\t<head>\n\t\t\t<title>Company Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>Welcome to this site.</p>\n\t\t</body>\n\n\t\t</html>\n\t\t---------------------------------\n\t- set up a start command in **package.json**\n\t\t- `\"start\": \"node_modules/.bin/nodemon server.js\"`\n\t- `npm start`\n- add other pages\n\t- create `info.html` file in public\n\t\t---------------------------------\n\t\t<html>\n\t\t<head>\n\t\t\t<title>Company Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>This is the info page.</p>\n\t\t</body>\n\n\t\t</html>\n\t\t---------------------------------\n\t- add navigation\n\t\t--------------------------------\n\t\t<nav><a href=\"/\">Home</a> | <a href=\"info.html\">Info</a></nav>\n\t\t--------------------------------\n\t- fix routing\n\t\t- add info route\n\t\t\t------------------------------\n\t\t\tapp.get('/info', (req, res) => {\n\t\t\t\tres.sendFile(path.join(__dirname, './public/info.html'));\n\t\t\t});\n\t\t\t------------------------------\n\t\t- change nav from `info.html` to `info`\n\t- add CSS file `css/main.css`\n\t\t-------------------------------\n\t    body {\n\t\t\tbackground-color: #333;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 20px;\n\t\t\tcolor: #ccc;\n\t\t}\n\t\tnav {\n\t\t\tbackground-color: #222;\n\t\t\tpadding: 10px;\n\t\t\tcolor: #333;\n\t\t}\n\t\ta {\n\t\t\tcolor: #aaa;\n\t\t}\n\t\t-------------------------------\n\t- add image to info page\n\t- add JavaScript \n\t\t- `js/main.js`\n\t\t----------------------------------------------\n\t\tconst showInfo = () => {\n\t\t\tconst productInfoElem = document.querySelector('.productInfo');\n\t\t\tproductInfoElem.innerHTML = 'This is a Tektronix Oscilloscope.';\n\t\t}\n\t\t----------------------------------------------\n\t\t- `<script src=\"js/main.js\" defer></script>`\n\t\t- `<button onclick=\"showInfo()\">Show Info</button>`\n- Express solved problem:\n\t- we now can serve HTML/CSS/JavaScript pages 1-to-1 from backend\n- new problem:\n\t- how can we add dynamic content from backend to our HTML like we did before?\n\t\t- solution: EJS (Embedded JavaScript templating)\n- add EJS:\n\t- `npm i ejs`\n\t- change info page from HTML to EJS\n\t\t- add to server.js:\n\t\t\t----------------------\n\t\t\tapp.set('view engine', 'ejs');\n\t\t\tapp.set('views', path.join(__dirname, './public'));\n\t\t\t----------------------\n\t\t- rename `info.html` to `info.ejs`\n\t\t- change to:\n\t\t\t----------------------\n\t\t\tapp.get('/info', (req, res) => {\n\t\t\t\tres.render('info');\n\t\t\t});\n\t\t\t----------------------\n\t\t- send variables to EJS page\n\t\t\t-----------------------------\n\t\t\tres.render('info', { message: 'Welcome to the info page.' });\n\t\t\t-----------------------------\n\t\t- add: `<p><%=message%>`\n\t\t- add logic\n\t\t\t- `showImages: false`\n\t\t\t- `<% if(showImages) {%>`\n\t\t- add site title to info page\n\t- change index page from HTML to EJS\n\t\t- share siteTitle\n\t\t- add different message\n\t- consolidate siteTitle into `siteData`\n\t\t- `...siteData,`\n\t- turn nav into a partial\n\t\t- move nav HTML to `_nav.ejs`\n\t\t- include from index with `<%- include ('_nav.ejs') %>`\n\t\t- add prefix with style\n\t\t- include from info page as well","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-20 06:47:20","systemWhoCreated":"systemUnknown"},{"id":416,"category":"Node","title":"Create a backend-frontend implementation of MVC","body":"- create a create-react-app frontend and Node/Express backend which allows the frontend to call a controller to perform specific tasks\n- the backend of this app will read (`getPin`) and save (`savePin`) a pin number in a text file on the back end with two endpoints##screenshotmvcapp4\n- first the app will be made without a controller to show that there is code repetition\n- then the backend will be refactored with a controller so the frontend call access functions of the controller with actions\n\t- this eliminates the code repetition \n\t- simplifies calling backend tasks\n- to demonstrate that the MVC controller-action pattern simplifies programming\n\t- a new action called `getTitle` will be created and accessed\n- **basic app setup**\n\t- setup create-react-app\n\t\t- or blankcra app with `npm i`\n\t- change modules to ES6\n\t\t- `\t\"type\": \"module\",`\n\t- install express and cors\n\t\t- `npm i express cors`\n\t- install git\n\t\t- `git init`\n- **backend setup**\n\t- create `backend/server.js`\n\t\t----------------------------------------\n\t\timport express from 'express';\n\t\timport fs from 'fs';\n\t\timport cors from 'cors';\n\n\t\tconst app = express();\n\t\tconst port = 3021;\n\n\t\tapp.use(cors());\n\t\tapp.use(express.json());\n\n\t\tapp.get('/getpin', (req, res) => {\n\t\t\tfs.readFile('./backend/data/pin.txt', 'utf-8', (err, data) => {\n\t\t\t\tres.status(200).send({\n\t\t\t\t\tpin: data\n\t\t\t\t});\n\t\t\t});\n\t\t});\t\t\n\n\t\tapp.post('/savepin', (req, res) => {\n\t\t\tconst newpin = req.body.pin;\n\t\t\tfs.writeFile('./backend/data/pin.txt', newpin, (err) => {\n\t\t\t\tres.status(200).json({\n\t\t\t\t\tsuccess: true\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Listening on port ${port}.`);\n\t\t});\n\t\t----------------------------------------\n\t- create `backend/data/pin.txt`\n\t\t------------------------\n\t\t0000\n\t\t------------------------\n\t- create npm script for backend\n\t\t- `\"backend\": \"npx nodemon ./backend/server.js\"`\n\t- Postman\n\t\t- GET - http://localhost:3021/getpin\n\t\t- POST - http://localhost:3021/savepin\n\t\t\t- body - raw - JSON\n\t\t\t\t------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"pin\": \"2222\"\n\t\t\t\t}\n\t\t\t\t------------------------------\n- **frontend setup**\n\t- show pin on load\n\t\t-------------------------------\n\t\t(async () => {\n\t\t\tconst response = await fetch('http://localhost:3021/getpin');\n\t\t\tconst data = await response.json();\n\t\t\tsetPin(data.pin);\n\t\t})();\n\t\t-------------------------------\n\t- update frontend pin when input value changes\n\t\t---------------------------------------\n\t\tconst handlePinChange = (e) => {\n\t\t\tsetPin(e.target.value);\n\t\t}\n\t\t---------------------------------------\n\t- change pin with input field and button\n\t\t-----------------------------------\n\t\tconst savePin = () => {\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ pin })\n\t\t\t};\n\t\t\t(async () => {\n\t\t\t\tawait fetch(`http://localhost:3021/savepin`, requestOptions);\n\t\t\t})();\n\t\t}\n\t\t-----------------------------------\n- **problem**:\n\t- we want to add API endpoint `getTitle` as well\n\t- we realize that we will be duplicating code\n\t- each new endpoint we add will duplicate code\n\t\t- 10 endpoints per page x 10 pages = 100 endpoints in server.js, too much\n- **solution**:\n\t- create a MVC pattern\n\t- create one endpoint that accepts `controller*`\n\t- one controller per page\n\t- numerous actions per controller\n\t- we will create `controllerApp` for the App.js page\n\t\t- this controller will have three actions: `getPin`, `savePin` and `getTitle`\n- **MVC setup**:\n\t- test req.path for dynamic controller\n\t\t--------------------------\n\t\tapp.post('/controller*', (req, res) => {\n\t\t\tswitch (req.path) {\n\t\t\t\tcase '/controllerApp':\n\t\t\t\t\tconst controller = new ControllerApp(req, res);\n\t\t\t\t\tcontroller.process();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('bad controller');\n\t\t\t}\n\t\t});\n\t\t--------------------------\n\t- `controller.js`\n\t\t-----------------------------\n\t\tclass Controller {\n\t\t\tconstructor(req, res) {\n\t\t\t\tthis.req = req;\n\t\t\t\tthis.res = res;\n\t\t\t\tthis.action = this.req.body.action;\n\t\t\t\tthis.actionMethodName = 'action_' + this.action;\n\t\t\t}\n\n\t\t\tprocess() {\n\t\t\t\tthis[this.actionMethodName]();\n\t\t\t}\n\n\t\t\tgetValue(idCode) {\n\t\t\t\treturn this.req.body[idCode];\n\t\t\t}\n\t\t}\n\n\t\texport default Controller;\n\t\t-----------------------------\n\t- `controllerApp.js`\n\t\t---------------------------------\n\t\timport Controller from './controller.js';\n\t\timport fs from 'fs';\n\n\t\tclass ControllerApp extends Controller {\n\n\t\t\tconstructor(req, res) {\n\t\t\t\tsuper(req, res);\n\t\t\t}\n\n\t\t\t// refactor endpoints from server.js\n\n\t\t}\n\t\texport default ControllerApp;\n\t\t---------------------------------\n\t- refactor from server.js:\n\t\t---------------------------------\n\t\taction_getPin() {\n\n\t\t}\n\t\t---------------------------------\n\t- test with Postman\n\t- simplify controller/action call on frontend, with class 'backendTools.js'\n\t\t---------------------------------------\n\t\texport const callBackendController = (action, infos, callback = null) => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch('http://localhost:3021/controllerApp', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\taction,\n\t\t\t\t\t\t...infos\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tif (callback !== null) {\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tcallback(data);\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\t---------------------------------------\n\t- call frontend controller\n\t\t-------------------------------\n\t\tuseEffect(() => {\n\t\t\tcallBackendController('getPin', {}, (data) => {\n\t\t\t\tsetPin(data.pin);\n\t\t\t});\n\t\t}, []);\n\n\t\tconst savePin = () => {\n\t\t\tcallBackendController('savePin', { pin });\n\t\t}\n\t\t-------------------------------\n\t- add another controller action\n\t\t- frontend:\n\t\t\t---------------------------------\n\t\t\tcallBackendController('getTitle', {}, (data) => {\n\t\t\t\tsetTitle(data.title);\n\t\t\t});\n\t\t\t---------------------------------\n\t\t- backend:\n\t\t\t---------------------------------\n\t\t\taction_getTitle() {\n\t\t\t\tthis.res.status(200).send({\n\t\t\t\t\ttitle: 'Pin Manager' \n\t\t\t\t});\n\t\t\t}\n\t\t\t---------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-26 05:32:56","systemWhoCreated":"systemUnknown"},{"id":417,"category":"Heroku","title":"Publish a simple Node/Express site at Heroku","body":"- these instructions will show you how to publish a Node/Express site at Heroku\n- you are allowed 5 online sites with the free Heroku account without giving any credit card information\n- you can rename your site to give it a custom URL, e.g. `https://your-custom-url-here.herokuapp.com`##herokuHelloWorldOk\n- **sign up for a free Heroku account**\n\t- https://signup.heroku.com\n\t- enter information\n\t- click on e-mail link\n- **sign in**\n\t- log into site\n\t- switch to VSCode\n- **publish minimal Node/Express site**\n\t- setup\n\t\t- `npm init -y`\n\t\t- `git init`\n\t\t- `npm i express`\n\t\t- package.json: \n\t\t\t- `\"type\": \"module\",`\n\t\t\t- `\"start\": \"node index.js\"`\t\n\t- index.js\n\t\t-----------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst port = process.env.PORT || 3011;\n\n\t\tapp.get('/', (req, res) => res.send('Hello world'));\n\n\t\tapp.listen(port, () => console.log(`Listening on http://localhost:${port}`));\n\t\t-----------------------------\n\t- test locally\n\t\t- `npm start`\n\t\t- in browser: `http://localhost:3011`\n\t- publish to local git repository\n\t\t- .gitignore\n\t\t\t----------------------------\n\t\t\tnode_modules\n\t\t\t----------------------------\t\n\t\t- commit initial changes\n\t- publish at Heroku\n\t\t- first [download CLI](https://devcenter.heroku.com/articles/heroku-cli) if you haven't\n\t\t- terminal: `heroku login`, press **Enter**\n\t\t- browser: click on **Log In** button, close browser tab\n\t\t- terminal: \n\t\t\t- `heroku create`\n\t\t\t- `git push heroku master`\n\t\t\t- ctrl-click on deployed `...herokuapp.com` site link, e.g. `https://guarded-hollows-94560.herokuapp.com/`\n\t- rename site\n\t\t- go to your [Heroku dashbaord](https://dashboard.heroku.com/apps)\n\t\t- click on site\n\t\t- Settings\n\t\t- type in new name, e.g. `edward-hello-world` and click **Save**\n\t\t- terminal:\n\t\t\t- `git remote rm heroku`\n\t\t\t- e.g. `heroku git:remote -a edward-hello-world`\n\t\t- browser: \n\t\t\t- new site name is immediately available, e.g. `https://edward-hello-world.herokuapp.com`\n- develop and republish subsequent changes\n\t- `git add .`\n\t- `git commit -m \"commit message\"`\n\t- `git push`\n- trouble-shooting\n\t- get current remote origin: `git remote -v`\n\t- set remote origin: e.g. `git remote set-url origin https://git.heroku.com/edward-hello-world.git`\n\t- on Ubuntu\n\t\t- if your app doesn't appear in browser\n\t\t\t- `heroku git:remote -a name-of-your-app`\n\t\t- if you can't push to Heroku\n\t\t\t- `git push heroku HEAD:main`\n\t\t\t- `git push heroku HEAD:master`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-27 21:58:52","systemWhoCreated":"systemUnknown"},{"id":418,"category":"Heroku","title":"Publish a custom Node/Express/EJS/JSON-data-driven site at Heroku","body":"- these instructions show you how to create and publish to Heroku a more complex Node/Express site \n\t- it has many more features than the [simple site](https://onespace.netlify.app/howtos?id=417) we published at Heroku:\n\t\t- uses EJS views\n\t\t\t- and included views\n\t\t- has a url-router navigation\n\t\t- reads from JSON files\n\t\t\t- site features can be managed from a JSON config file\n\t\t- serves images\n\t\t- HTML pages have CSS and frontend JavaScript\n\t\t- imports server-side helper functions\n\t\t- has a more standard app structure (`/public` and `/src`) but site is minimal without any Webpack/create-react-app magic in background\n\t\t- this is a good site to use/practice vanilla-JavaScript skills without any framework, \"stay close to the metal\"\n\t\t- has good SEO advantages over create-react-app since HTML/CSS/JavaScript is being sent to browser on site-load\n- **set up project**\n\t- browser: [log into Heroku](https://id.heroku.com/login)\n\t- terminal: create app directory, e.g. `bookstoreapp`\n\t- open VSCode in that app directory\n\t- set up basic site\n\t\t- `npm init -y`\n\t\t- `git init`\n\t\t\t- `.gitignore` with `node_modules`\n\t\t- `npm i express`\n\t\t- `npm i ejs`\n\t\t- package.json: \n\t\t\t- `\"type\": \"module\",`\n\t\t\t- `\"start\": \"npx nodemon src/app.js\"`\n- **build backend**\n\t- `/src/app.js`\n\t\t-------------------------------------\n\t\timport express from 'express';\n\t\timport path from 'path';\n\t\tconst __dirname = path.resolve(path.dirname(''));\n\t\timport * as qfil from './qtools/qfil.js';\n\n\t\tconst app = express();\n\t\tconst port = process.env.PORT || 3011;\n\n\t\tapp.set('view engine', 'ejs');\n\t\tapp.set('views', path.join(__dirname, './public/views'));\n\n\t\tconst staticDirectory = path.join(__dirname, './public');\n\t\tapp.use(express.static(staticDirectory));\n\n\t\tqfil.getJsonDataFromFile('siteData.json', (siteData) => {\n\n\t\t\tapp.get('/info', (req, res) => {\n\t\t\t\tres.render('info',\n\t\t\t\t\t{\n\t\t\t\t\t\t...siteData,\n\t\t\t\t\t\tmessage: \"Welcome to info page.\"\n\t\t\t\t\t});\n\t\t\t});\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.render('index',\n\t\t\t\t\t{\n\t\t\t\t\t\t...siteData,\n\t\t\t\t\t\tmessage: 'Welcome to the home page.',\n\t\t\t\t\t});\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on port http://localhost:${port}`);\n\t\t\t});\n\t\t});\n\t\t-------------------------------------\n\t- `/src/data/siteData.json`\n\t\t-----------------------------------\n\t\t{\n\t\t\t\"siteTitle\": \"The Book Seller\",\n\t\t\t\"showImages\": true\n\t\t}\n\t\t-----------------------------------\n\t- `/src/qtools/qfil.js`\n\t\t-----------------------------------\n\t\timport fs from 'fs';\n\n\t\texport const getJsonDataFromFile = (fileName, callback) => {\n\t\t\tfs.readFile(`./src/data/${fileName}`, 'utf-8', (err, rawData) => {\n\t\t\t\tconst data = JSON.parse(rawData);\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\t}\n\t\t-----------------------------------\n- **build frontend**\n\t- `/public/views/index.ejs`\n\t\t------------------------------------------\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<title><%=siteTitle%></title>\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t</head>\n\t\t<body>\n\t\t\t<h1><%=siteTitle%></h1>\n\t\t\t<%- include('_nav.ejs') %>\n\t\t\t<p><%=message%></p>\n\t\t</body>\n\t\t</html>\n\t\t------------------------------------------\n\t- `/public/views/info.ejs`\n\t\t------------------------------------------\n\t\t<html>\n\n\t\t<head>\n\t\t\t<title>\n\t\t\t\t<%=siteTitle%>\n\t\t\t</title>\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"css/main.css\">\n\t\t\t<script src=\"js/main.js\"\n\t\t\t\t\tdefer></script>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1><%=siteTitle%></h1>\n\t\t\t<%- include('_nav.ejs') %>\n\t\t\t<p>\n\t\t\t\t<%=message%>\n\t\t\t</p>\n\t\t\t<p>Here is our best product:</p>\n\t\t\t<% if(showImages)\n\t\t\t   {%>\n\t\t\t\t<img src=\"images/book.png\"\n\t\t\t\t\t alt=\"book\">\n\t\t\t\t<% }\n\t\t\t\t   %>\n\t\t\t\t\t<div class=\"showInfoArea\">\n\t\t\t\t\t\t<button onclick=\"showInfo()\">Show Info</button>\n\t\t\t\t\t\t<div class=\"productInfo\"></div>\n\t\t\t\t\t</div>\n\t\t</body>\n\n\t\t</html>\n\t\t------------------------------------------\n\t- `/public/views/_nav.ejs`\n\t\t------------------------------------------\n\t\t<nav><a href=\"/\">Home</a> | <a href=\"info\">Info</a></nav>\n\t\t------------------------------------------\n\t- `/public/css/main.css`\n\t\t------------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 20px;\n\t\t\tcolor: #ccc;\n\t\t}\n\n\t\tnav {\n\t\t\tbackground-color: #222;\n\t\t\tpadding: 10px;\n\t\t\tcolor: #333;\n\t\t}\n\n\t\ta {\n\t\t\tcolor: #aaa;\n\t\t}\n\n\t\t.prefix {\n\t\t\tcolor: yellow;\n\t\t}\n\n\t\t.showInfoArea {\n\t\t\tmargin: 10px 0 0 0;\n\t\t}\n\t\t.showInfoArea .productInfo {\n\t\t\tmargin: 5px 0 0 0;\n\t\t}\n\t\t------------------------------------------\n\t- `/public/js/main.js`\n\t\t------------------------------------------\n\t\tconst showInfo = () => {\n\t\t\tconst productInfoElem = document.querySelector('.productInfo');\n\t\t\tproductInfoElem.innerHTML = 'This is the best book.';\n\t\t}\n\t\t------------------------------------------\n\t- `/public/images/book.png`\n\t\t- download and save this image [here](https://edward-the-book-seller.herokuapp.com/images/book.png)\n- **publish to Heroku**\n\t- commit changes\n\t- publish\n\t\t- terminal: `heroku login`, press **Enter**\n\t\t- browser: click on **Log In** button, close browser tab\n\t\t- terminal: \n\t\t\t- `heroku create`\n\t\t\t- `git push heroku master`\n\t\t\t- ctrl-click on deployed `...herokuapp.com` site link, e.g. `https://guarded-hollows-94560.herokuapp.com/`\n\t- rename site\n\t\t- go to your [Heroku dashbaord](https://dashboard.heroku.com/apps)\n\t\t- click on site\n\t\t- Settings\n\t\t- type in new name, e.g. `edward-the-book-seller` and click **Save**\n\t\t- terminal:\n\t\t\t- `git remote rm heroku`\n\t\t\t- e.g. `heroku git:remote -a edward-the-book-seller`\n\t\t- browser: \n\t\t\t- new site name is immediately available, e.g. `https://edward-the-book-seller.herokuapp.com`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-28 08:00:28","systemWhoCreated":"systemUnknown"},{"id":419,"category":"Node/Express","title":"Node/Express site that alters JSON on the backend via the frontend","body":"- This is an Node/Express site that serves EJS pages including a settings page that allows the user to type in a password which changes a JSON file on the backend via the API.\n- See this site live at: [https://edward-the-book-seller.herokuapp.com](https://edward-the-book-seller.herokuapp.com)\n- Get the full code at [GitHub](https://github.com/edwardtanguay/express-node-ejs-json-write)##thebookbok\n- `settings.ejs`\n\t-----------------------------------\n\t<html>\n\t<head>\n\t\t<title>\n\t\t\t<%=siteTitle%>\n\t\t</title>\n\t\t<link rel=\"shortcut icon\"\n\t\t\t  href=\"#\">\n\t\t<link rel=\"stylesheet\"\n\t\t\t  href=\"css/main.css\">\n\t\t<script>\n\t\t\tconst handleImageState = (showImages) => {\n\t\t\t\tconst passwordElem = document.querySelector('.password');\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch('http://localhost:3011/api/changeState', {\n\t\t\t\t\t\tmethod: 'PATCH',\n\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tshowImages,\n\t\t\t\t\t\t\tpassword: passwordElem.value\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tconst message = data.message;\n\t\t\t\t\tconst messageElem = document.querySelector('.message');\n\t\t\t\t\tpasswordElem.value = '';\n\t\t\t\t\tmessageElem.innerText = message;\n\t\t\t\t\tif(response.status == 200) {\n\t\t\t\t\t\tmessageElem.classList.remove('failure');\n\t\t\t\t\t\tmessageElem.classList.add('success');\n\t\t\t\t\t}\n\t\t\t\t\tif(response.status == 401) {\n\t\t\t\t\t\tmessageElem.classList.remove('success');\n\t\t\t\t\t\tmessageElem.classList.add('failure');\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<h1>\n\t\t\t<%=siteTitle%>\n\t\t</h1>\n\t\t<%- include('_nav.ejs')\n\t\t\t%>\n\t\t\t<p>\n\t\t\t\t<%=message%>\n\t\t\t</p>\n\t\t\t<p>Changing this setting will affect all sessions permanently, not just this current session:</p>\n\t\t\t<div class=\"adminArea\">\n\t\t\t\t<div>Admin password: <input type=\"password\"\n\t\t\t\t\t\t   class=\"password\" />\n\t\t\t\t\t<button onclick=\"handleImageState(true)\">Show Images</button>\n\t\t\t\t\t<button onclick=\"handleImageState(false)\">Hide Images</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"message\">Type in password and click a button.</div>\n\t\t\t</div>\n\t</body>\n\t</html>\n\t-----------------------------------\n- `api.js`\n\t-------------------------------\n\timport express from 'express';\n\timport * as qfil from '../qtools/qfil.js';\n\n\tconst router = express.Router();\n\trouter.use(express.json());\n\n\trouter.patch('/changeState', (req, res) => {\n\t\tconst { showImages, password } = req.body;\n\t\tif (password === 'pass123') {\n\t\t\tqfil.getJsonDataFromFile('siteData.json', (siteData) => {\n\t\t\t\tsiteData.showImages = showImages;\n\t\t\t\tqfil.saveJsonDataToFile('siteData.json', siteData, () => {\n\t\t\t\t\tres.status(200).json({\n\t\t\t\t\t\tmessage: showImages ? `This site now shows images.` : `This site now hides images.`\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tres.status(401).json({\n\t\t\t\tmessage: `Password was not correct. No settings were changed.`\n\t\t\t});\n\t\t}\n\t});\n\n\texport default router;\n\t-------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-29 14:27:09","systemWhoCreated":"systemUnknown"},{"id":420,"category":"Hyper-V","title":"Install a Windows 10 machine on Hyper-V","body":"- start Hyper-V\n\t- Schnellerstellung\n\t- _Lokale Installationsquelle\n\t- Weitere Optionen\n\t\t- \"Windows 10\"\n\t\t- (Default Switch)\n\t- Installationsquelle ändern\n\t- `D:\\large`\n\t- windows10_2020-05-23.iso\n\t- Virtuelle Computer erstellen\n\t- Verbinden\n\t- Starten\n\t\t- quickly press ENTER\n\t- Next\n\t- Install Now\n\t- *** click at bottom of window: \"I don't have a product key\"\n\t- Windows Pro\n\t- Next\n\t- Accept, Next\n\t- Custom, Next, ...\n\t- wait about 7 minutes for install:##thewaitwin\n- virtual machine restarts\n\t- wait...\"Getting ready\"\n\t- Germany\n\t- US\n\t- Create account\n\t- skdjfskdfjskdfj@hotmail.com\n\t\t- (you won't ever have to confirm mail)\n\t- Test4Test$\n\t- add birthday etc.\n\t- create pin: 3364\n\t- no, no,  no,  no,  no,  no,  no,  no\n\t- wait..\"We're getting ready...\"\n\t- will show windows:##thewinwinij\n\t- close virtual machine window\n\t- right-click, ausschalten\n- start again\n\t- double-click Windows 10\n\t- Start\n\t- pin","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-10-31 09:18:12","systemWhoCreated":"systemUnknown"},{"id":421,"category":"MongoDB","title":"How to install MongoDB on Windows 10 and Ubuntu 20.04 and 22.04","body":"- **Windows 10 real machine that has MongoDB 4.4.3 installed**\n\t- download MongoDB\n\t\t- https://www.mongodb.com/try/download/community\n\t\t- download MongoDB Community Server\n\t\t- takes about 1 minute to download\n\t\t\t- 2021-01-15: mongodb-windows-x86_64-4.4.3-signed.msi\n\t\t\t- 2021-10-31: mongodb-windows-x86_64-5.0.3-signed.msi\n\t- install\n\t\t- 2021-01-15\n\t\t\t- installing here: C:\\Program Files\\MongoDB\\Server\\4.4\\data\\\n\t\t- 2021-10-31\n\t\t\t- installing here: C:\\Program Files\\MongoDB\\Server\\5.0\\data\\\n\t- Mongo Compass opened\n\t\t- seemed to work, I can access databases I had created in 4.4.3\n\t\t- when I run Mongo at CMD: `mongo`\n\t\t\t- the shell seems to be 4.4.3 but the server 5.0##theshell443\n\t\t\t- went to: https://www.mongodb.com/try/download/shell\n\t\t\t- says I can download 1.1.1\n\t\t\t- downloaded and instaleld 1.1.1\n\t\t\t- `mongo`\n\t\t\t- mongo shell is still 4.4.3\n\t\t\t- found a 5.03 shell download here: https://www.mongodb.com/download-center/enterprise/releases\n\t\t\t\t- file is: mongodb-windows-x86_64-enterprise-5.0.3-signed.msi\n\t\t\t\t- got a conflict: ##500conflig\n\t\t\t\t- we don't need this\n\t\t- we want to repoint the environment path to 5.0.3 instead of 4.4.3\n\t\t\t- found in environment path system variables: `C:\\Program Files\\MongoDB\\Server\\4.4\\bin`\n\t\t\t\t- under `C:\\Program Files\\MongoDB\\Server` we have 4.2, 4.4, 5.0\n\t\t\t- changed to: `C:\\Program Files\\MongoDB\\Server\\5.0\\bin`\n\t\t\t\t- and fixed mongorc.js problem\n- **Windows 10 real machine that has MongoDB 5.0 installed (2022-06-25)**\n\t- confirm that you have 5.0 on your machine##have50onmachine\n\t- completely remove MongoDB from the computer\n\t\t- windows key, `deinstall`, \"uninstall program\", uninstall all three of these: \"MongoDB 5.0.3\", \"MongoDB Compass\", \"MongoDB Shell\":##deleteallthreeofmon\n\t\t\t- delete MongoDB 5.0.3\n\t\t\t\t- finished 1 minute, but says you will have to reboot:##thereobootok\n\t\t\t- delete MongoDB Compass\n\t\t\t\t- finished in 30 seconds, no messages\n\t\t\t- delete MongoDB Shell\n\t\t\t\t- finished in 3 seconds, no messages\n\t\t\t- note the Mongo directory is still there but with most of its files removed:##notestillmongo\n\t\t\t- reboot\n\t\t\t- note after reboot the Mongo directory is still in Program Files\n\t\t\t- delete the directory manually \n\t\t\t\t- open Windows command line as administrator\n\t\t\t\t- delete directory with `rmdir MongoDB /s`, /s for recursive:##deletethemongook\n\t- download MongoDB\n\t\t- https://www.mongodb.com/try/download/community\n\t\t- download MongoDB Community Server\n\t\t- takes about 1 minute to download\n\t\t\t- 2021-01-15: mongodb-windows-x86_64-4.4.3-signed.msi\n\t\t\t- 2021-10-31: mongodb-windows-x86_64-5.0.3-signed.msi\n\t\t\t- 2022-06-25: mongodb-windows-x86_64-5.0.9-signed.msi\n\t- install MongoDB\n\t\t- double-click MSI file\n\t\t\t- Next, Next, Comlete, Next, Next, Install, Finish\n\t\t\t- MongoDB Compass opens\n\t\t\t- note in Windows Servers, `mongod.exe` (the MongoDB daemon on Windows) is running and will be started each time that you start Windows now##mongodbrunningokk\n\t\t- test \n\t\t\t- click [Connect] to connect to local MongoDB cluster running on `mongodb://localhost:27017`:##clickconnectmsdomp\n\t\t\t- create database **TEST001** with collection **colors** and add two entries:##test1001coloros\n\t- install Mongo shell\n\t\t- Notice there are two Mongo shells\n\t\t\t1. **mongo.exe** - already installed but deprecated\n\t\t\t2. **mongosh.exe** - newer, you have to download and install it, improvements:\n\t\t\t\t- improved syntax highlighting\n\t\t\t\t- improved command history\n\t\t\t\t- improved logging\n\t\t- you can run the old **mongo** shell from the command line:##mongoisalreadins\n\t\t- install **mongosh**\n\t\t\t- download here: [www.mongodb.com/try/download/shell](https://www.mongodb.com/try/download/shell)\n\t\t\t\t- 2021-10-31: Version 1.1.1\n\t\t\t\t- 2022-06-25: Version 1.5.0\n\t\t\t- unpack the zip file\n\t\t\t- copy these two files to **C:\\Program Files\\MongoDB\\Server\\5.0\\bin**##thetwomonshok\n\t\t- test **mongosh**\n\t\t\t- in command line, go to: `C:\\Program Files\\MongoDB\\Server\\5.0\\bin`\n\t\t\t- use shell to view the contents of the database and collection you added above:##thefinfinoksjs\n- **Windows 10 virtual machine without Mongo installed yet**\n\t- downloaded and installing: mongodb-windows-x86_64-5.0.3-signed.msi\n\t\t- custom, next, next\n\t- brings up Compass version 1.28.4\n\t- typing `mongo` gets \"not recognized command\" error\n\t\t- restarting\n\t\t- still can't find mongo\n\t- official guide: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows\n\t\t- \"The MongoDB Shell (mongosh) is not installed with MongoDB Server.\"\n\t\t- https://docs.mongodb.com/mongodb-shell/install/\n\t\t- installing from: https://www.mongodb.com/try/download/shell?jmp=docs\n\t\t\t- version 1.1.1\n\t\t\t- installed\n\t\t\t- in `c:\\edward` the command `mongosh` works (path already set up, found in user environment variables: `c:\\Users\\oweir\\AppData\\Local\\Programs\\mongosh\\`)##themongorcjs\n\t\t\t- fixing mongorc.js problem\n\t\t\t\t- in file explorer, go to `%UserProfile%`\n\t\t\t\t\t- copied `.mongorc.js` (which was empty) to `.mongoshrc.js`\n\t\t\t\t\t- error gone\n\t\t\t- fixing error \"Access control is not enabled...\"\n\t\t\t\t- will do this later, has to do with user access but access is now open for dev environment\n\t- get `mongo` to work as well\n\t\t- in `c:\\edward` the command `mongo` is still unrecognized\n\t\t- going to `c:\\Program Files\\MongoDB\\Server\\5.0\\bin` then `mongo` works:##themongoon50\n\t\t- setting environment path\n\t\t\t- WINDOWS KEY, 'path'\n\t\t\t- add system variables path:##sysvarpath5\n\t\t\t- works now in `c:\\edward`\n\t- %% both mongo server and client (5.0.3) and mongosh (1.1.1) are installed \n- **Ubuntu 20.04 LTS virtual machine without Mongo installed yet**\n\t- full instructions here: https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\n\t- prepare installation\n\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -`\n\t\t\t- says: \"OK\"\n\t\t- `sudo apt-get install gnupg`\n\t\t\t- had to run this first: `sudo dpkg --configure -a`\n\t\t\t\t- took about 3 minutes\n\t\t\t- then had to do `sudo apt --fix-broken install`\n\t\t- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list`\n\t\t\t- not sure this is necessary\n\t\t- `sudo apt-get update`\n\t- install MongoDB\n\t\t- `sudo apt-get install -y mongodb-org`\n\t- start MongoDB\n\t\t- `sudo systemctl start mongod`\n\t\t- `sudo systemctl status mongod`\n\t\t- `mongo`\t\n- **Ubuntu 20.04 LTS virtual machine with Mongo 5.0, remove and reinstall (2022-06-26 VM: ubuntu-test)**\t\t\n\t- first remove MongoDB 5.0\n\t\t- `sudo service mongod stop`\n\t\t- `sudo apt-get purge mongodb-org*`\n\t\t- `sudo rm -r /var/log/mongodb`\n\t\t- `sudo rm -r /var/lib/mongodb`\n\t- you should then see that `mongod` and `mongo` are no longer recognized commands:##thenorecogom\n\t- prepare installation\n\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -`\n\t\t\t- says: \"OK\"\n\t\t- `sudo apt-get install gnupg`\n\t\t- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list`\n\t\t- `sudo apt-get update`\n\t- install MongoDB\n\t\t- `sudo apt-get install -y mongodb-org`\n\t- start MongoDB\n\t\t- `sudo systemctl start mongod`\n\t\t- `sudo systemctl status mongod`\n\t\t- `mongo`\n\t\t- `mongosh`\n\t- install Mongo Compass\n\t\t- https://www.mongodb.com/try/download/compass\n\t\t- note it shows the download for Mac (dmg)\n\t\t- switch to Ubuntu (deb)##thedebsoubunt\n\t\t- click on [Download] to save as file\n\t\t- `cd ~/Downloads`\n\t\t- `sudo apt install ./mongodb-compass_1.32.2_amd64.deb`\n\t\t- look in **Show Applications** and search for \"compass\"##thesearchforcompp\n\t\t- start Compass, click [Connect] and look around:##thelookaroundcomp\t\t\n- **Ubuntu 20.04 LTS real machine with Mongo shell/server v4.0.25**\n\t- first remove MongoDB 4.0\n\t\t- full instructions here: https://stackoverflow.com/questions/29554521/uninstall-mongodb-from-ubuntu\n\t\t- `sudo service mongod stop`\n\t\t- `sudo apt-get purge mongodb-org*`\n\t\t- `sudo rm -r /var/log/mongodb`\n\t\t- `sudo rm -r /var/lib/mongodb`\n\t- prepare installation\n\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -`\n\t\t\t- says: \"OK\"\n\t\t- `sudo apt-get install gnupg`\n\t\t\t- had to run this first: `sudo dpkg --configure -a`\n\t\t\t\t- took about 3 minutes\n\t\t\t- then had to do `sudo apt --fix-broken install`\n\t\t- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list`\n\t\t\t- not sure this is necessary\n\t\t- `sudo apt-get update`\n\t- install MongoDB\n\t\t- `sudo apt-get install -y mongodb-org`\n\t- start MongoDB\n\t\t- `sudo systemctl start mongod`\n\t\t- `sudo systemctl status mongod`\n\t\t- `mongo`\n- **Ubuntu 22.04 LTS real machine without Mongo installed yet (2022-06-25: dell001)**\n\t- make sure MongoDB isn't installed:##makesurenotmon\n\t- prepare installation\n\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -`\n\t\t\t- shows warning but says: \"OK\"##wgetnotwokrdep\n\t\t- `sudo apt-get install gnupg`\n\t\t- `sudo apt-get update`\t\n\t- install MongoDB\n\t\t- `sudo apt-get install -y mongodb-org`\n\t\t- doesn't work, nor :##neitherowrkjs\n\t- it may be that the installation doesn't work since this is 22.04, so [follow these instructions](https://wiki.crowncloud.net/?How_to_Install_Latest_MongoDB_on_Ubuntu_22_04)\n\t\t- `sudo apt update`\n\t\t- `sudo apt install dirmngr gnupg apt-transport-https ca-certificates software-properties-common`\n\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -`\n\t\t\t- got app-key is deprecated\n\t\t- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list`\n\t\t- `sudo apt-get update`\n\t\t- gets this error:##errorbackapackpackages\n\t- trying to fix the \"libssli1.1\" problem\t\n\t\t**MongoDb has no official build for ubuntu 22.04 at the moment. Ubuntu 22.04 has upgraded libssl to 3, and does not propose libssl1.1**\n\t\t\t- [stackoverflow](https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta)\n\t\t\t- fix\n\t\t\t\t- `echo \"deb http://security.ubuntu.com/ubuntu impish-security main\" | sudo tee /etc/apt/sources.list.d/impish-security.list`\n\t\t\t\t- `sudo apt-get update`\n\t\t\t\t- `sudo apt-get install libssl1.1`\n\t- install again:\n\t\t- `sudo apt-get install -y mongodb-org`\n\t\t- seems to have installed:##mongowithlibssl11\n\t- start MongoDB\n\t\t- `sudo systemctl start mongod`\n\t- test **mongo** shell\n\t\t- commands\n\t\t\t-------------------------------------------------\n\t\t\tshow dbs\n\t\t\tuse local\n\t\t\tshow collections\n\t\t\tdb.startup_log.find()\n\t\t\t-------------------------------------------------\n\t\t- should show something like this:##theshowmongook\n\t- test **mongosh** shell\n\t\t- commands\n\t\t\t-------------------------------------------------\n\t\t\tshow dbs\n\t\t\tuse local\n\t\t\tshow collections\n\t\t\tdb.startup_log.find()\n\t\t\t-------------------------------------------------\n\t\t- should show something like this:##theshowmongoshok\n\t- install Mongo Compass\n\t\t- https://www.mongodb.com/try/download/compass\n\t\t- note it shows the download for Mac (dmg)\n\t\t- switch to Ubuntu (deb)##thedebsoubunt\n\t\t- click on [Download] to save as file\n\t\t- `cd ~/Downloads`\n\t\t- `sudo apt install ./mongodb-compass_1.32.2_amd64.deb`\n\t\t- look in **Show Applications** and search for \"compass\"##thesearchforcompp\n\t\t- start Compass, click [Connect] and look around:##thelookaroundcomp","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-25 16:18:44","systemWhoCreated":"systemUnknown"},{"id":422,"category":"MySQL","title":"Install MySQL on Ubuntu and create Node/Express API","body":"- these instructions will show you how to\n\t- install MySQL on Ubuntu\n\t- install Node and npm\n\t- install MySQL Workbench and DBeaver to manage your MySQL databases\n\t- set up a Node/Express API to serve data from the Mysql database\n- make sure you don't already have MySQL installed\n\t- `mysql -V`##nomysqlwithv\n- install MySQL\n\t- `sudo apt update`\n\t\t- 30 seconds\n\t- `sudo apt install mysql-server`\n\t\t- 3 minutes\n\t- `sudo mysql_secure_installation`\n\t\t- password security level = 0\n\t\t- root password \"rootroot\" (test)\n\t\t- answer Y to all questions\n\t\t- not that root still does not need to type in correct password (!)\n\t\t\t- \"Note that even though you’ve set a password for the root MySQL user, this user is not currently configured to authenticate with a password when connecting to the MySQL shell.\"\n- note a non-superuser cannot access mysql\n\t- `mysql` (access denied)\n- log into mysql database as superuser\n\t- as superuser you can log in without a password\n\t- `sudo su -`\n\t- `mysql`\n- create a webuser that only has access to read the database\n\t- `CREATE USER webuser@localhost IDENTIFIED BY 'passpass';`\n\t\t- `GRANT SELECT on *.* TO webuser@localhost;`\n\t- see what users are in system\n\t\t- `SELECT User FROM mysql.user;`\n- install northwind database into mysql\n\t- https://github.com/dalers/mywind\n\t- unpack and copy files\n\t\t- northwind.sql\n\t\t- northwind-data.sql\n\t- `SHOW DATABASES;`\n\t- `CREATE DATABASE northwind;`\n\t- `SHOW DATABASES;`\n\t- `USE northwind;`\n\t- `SOURCE northwind.sql`\n\t\t- 1 minute\n\t- `SHOW TABLES;`\n\t- `SELECT * FROM customers;` (empty)\n\t- `SOURCE northwind-data.sql`\n\t\t- 5 minutes\n\t- `SELECT * FROM customers;`\n\t- `SELECT company,last_name,first_name FROM customers;`\n\t- exit\n- access with webuser\n\t- `mysql -u webuser -p`\n\t- `SHOW DATABASES;`\n\t- `use northwind;`\n\t- `SHOW TABLES;`\n\t- `SELECT * FROM products;`\n\t- `DESCRIBE products;`\n\t- `SELECT id,product_name FROM products;`\n\t- `INSERT INTO products (product_name) VALUES (\"Product 888\");` (command denied to user)\n- install MySQL management console application\n\t- install and use MySQL Workbench\n\t\t- `snap install mysql-workbench-community`\n\t\t- Show Applications\n\t\t\t- add to favorites\n\t\t\t- open##thworkworkbenc\n\t\t- set up connection for webuser\n\t\t\t- get error: **An AppArmor policy prevents this sender from sending this message to this recipient**\n\t\t\t- problem: snap application is sandboxed\n\t\t\t- fix: `sudo snap connect mysql-workbench-community:password-manager-service :password-manager-service`\n\t\t- log in as webuser##thewebwebuserok\n\t\t- MySQL Workbench has issue with UTF-8 encoding on Ubuntu:##worksbenchubuntuchars\n\t- install DBeaver\n\t\t- `sudo snap install dbeaver-ce`\n\t\t- add to favorites\n\t\t- open\n\t\t- yes to create sample database\n\t\t\t- allow it to download SQLite drivers\n\t\t\t- explore database##theveavsdf\n\t\t- connect to MySQL database\n\t\t\t- Database\n\t\t\t- New Database Connection\n\t\t\t- enter credentials for webuser\n\t\t\t- open database\n\t\t\t\t- allow to download MySQL drivers\n\t\t- explore tables##explorerbeave\n\t\t- build SQL commands##employeesubuntubeaver\n- install Node (**DON'T INSTALL LIKE THIS, IT TAKES TOO LONG!**) Instead, skip to instructions to install `nvm` below.\n\t- `sudo apt-get install nodejs`\n\t- `sudo apt-get install npm`\n\t\t- 15 minutes (!)\n- make script that reads and displays data from MySQL database\n\t------------------------------------------\n\tvar mysql = require('mysql');\n\n\tvar con = mysql.createConnection({\n\t  host: \"localhost\",\n\t  user: \"yourusername\",\n\t  password: \"yourpassword\",\n\t  database: \"mydb\"\n\t});\n\n\tcon.connect(function(err) {\n\t  if (err) throw err;\n\t  con.query(\"SELECT * FROM customers\", (err, result) => {\n\t\t if (err) throw err;\n\t\tconsole.log(result);\n\t  });\n\t}\n\t------------------------------------------\n- error: **Failed to Connect to MySQL DB via MySQL**\n\t- fix: `ALTER USER webuser@localhost IDENTIFIED WITH mysql_native_password BY 'passpass';`\n- switch to import\n\t- Node is Version 10\n\t- install nvm\n\t\t- `sudo apt install curl`\n\t\t- `curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash`\n\t\t- `nvm install node`\n- install express\n\t- `npm i express cors`\n\t- change index.js\n\t\t------------------------------\n\t\timport express from 'express';\n\t\timport cors from 'cors';\n\t\timport mysql from 'mysql';\n\n\t\tconst app = express();\n\t\tconst port = process.env.PORT || 3011;\n\n\t\tapp.use(cors());\n\n\t\tapp.get('/', (req,res) => {\n\t\t\tconst connection = mysql.createConnection({\n\t\t\t\thost: 'localhost',\n\t\t\t\tuser: 'webuser',\n\t\t\t\tpassword: 'passpass',\n\t\t\t\tdatabase: 'northwind'\n\t\t\t});\n\t\t\tconnection.connect((err) => {\n\t\t\t\tif (err) throw err;\n\t\t\t\tconsole.log('mysql connected');\n\t\t\t\tconst sql = 'SELECT * FROM customers';\n\t\t\t\tconnection.query(sql, (err, result) => {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tcustomers: result\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => console.log(`listening on http://localhost:${port}`));\n\t\t------------------------------\t\t\n- other commands\n\t- `DELETE FROM mysql.user WHERE User = 'readwrite';`\n\t- `sudo apt remove nodejs npm`\n\t- uninstall mysql\n\t\t- `sudo apt-get remove --purge mysql*`\n\t\t- `sudo apt-get autoremove`\n\t\t- `sudo apt-get autoclean`","points":20,"extras":"","systemWhenCreated":"2021-11-04 05:08:19","systemWhoCreated":"systemUnknown"},{"id":423,"category":"MySQL","title":"Install MySQL on Windows and create Node/Express API","body":"- these instructions will show you how to\n\t- install MySQL on Windows\n\t- install the MySQL Workbench to manage your MySQL databases\n\t- set up a Node/Express API to serve data from the Mysql database\n- install MySQL server \n\t- go to: https://dev.mysql.com/downloads/mysql\n\t- download the MSI installer:##thewinanddownok\n\t- download the larger msi file:##thetheclicklarger\n\t- click **No thanks, just start my download.**\n\t- execute the downloaded file to begin the install\n\t- Developer Default\n\t- Execute\n\t- Next, Yes\n\t- Execute, takes about 10 minutes##thewininstalformy\n\t- Next 5x\n\t- root password: \"rootroot\" (for testing)\n\t- Next\n\t- Execute\n\t- Next, Next\n\t- connect to server:##thefserverok\n\t- Next\n\t- Execute\n- test access to MySQL at command line\n\t- Windows explorer: `C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin`\n\t- shift-right-click to Powershell\n\t- `./mysql -root -p`\n\t- log in as root\n\t- log out\n- set environment variables\n\t- in system path, add: `C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin`\n- set up project\n\t- create directory: `c:\\projects\\northwindweb`\n\t- `mysql -u root -p`\n\t- create a webuser that only has access to read the database\n\t\t- `CREATE USER webuser@localhost IDENTIFIED BY 'passpass';`\n\t\t\t- `GRANT SELECT on northwind.* TO webuser@localhost;`\n\t\t- see what users are in system\n\t\t\t- `SELECT User FROM mysql.user;`\t\n\t- install northwind database into mysql\n\t\t- https://github.com/dalers/mywind\n\t\t- unpack and copy files\n\t\t\t- northwind.sql\n\t\t\t- northwind-data.sql\n\t\t- `SHOW DATABASES;`\n\t\t- `CREATE DATABASE northwind;`\n\t\t- `SHOW DATABASES;`\n\t\t- `USE northwind;`\n\t\t- `SOURCE northwind.sql`\n\t\t\t- 1 minute\n\t\t- `SHOW TABLES;`\n\t\t- `SELECT * FROM customers;` (empty)\n\t\t- `SOURCE northwind-data.sql`\n\t\t\t- 5 minutes\n\t\t- `SELECT * FROM customers;`\n\t\t- `SELECT company,last_name,first_name FROM customers;`\n\t\t- exit\n- open and test MySQL Workbench\n\t- Windows icon, \"workbench\", start program\n\t- connect to MySQL database\n\t\t- Database\n\t\t- New Database Connection\n\t\t- enter credentials for webuser\n\t\t- open database\n\t\t\t- allow to download MySQL drivers\n\t- explore tables\n\t- build SQL commands##theworkbenchesdkjf\n- install Node and npm, if not installed\n\t- install nvm\n\t\t- `sudo apt install curl`\n\t\t- `curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash`\n\t\t- `nvm install node`\n- create API\n\t- `npm i express cors`\n\t- change index.js\n\t\t------------------------------\n\t\timport express from 'express';\n\t\timport cors from 'cors';\n\t\timport mysql from 'mysql';\n\n\t\tconst app = express();\n\t\tconst port = process.env.PORT || 3011;\n\n\t\tapp.use(cors());\n\n\t\tapp.get('/', (req,res) => {\n\t\t\tconst connection = mysql.createConnection({\n\t\t\t\thost: 'localhost',\n\t\t\t\tuser: 'webuser',\n\t\t\t\tpassword: 'passpass',\n\t\t\t\tdatabase: 'northwind'\n\t\t\t});\n\t\t\tconnection.connect((err) => {\n\t\t\t\tif (err) throw err;\n\t\t\t\tconsole.log('mysql connected');\n\t\t\t\tconst sql = 'SELECT * FROM customers';\n\t\t\t\tconnection.query(sql, (err, result) => {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tcustomers: result\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => console.log(`listening on http://localhost:${port}`));\n\t\t------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-04 22:41:17","systemWhoCreated":"systemUnknown"},{"id":424,"category":"Ubuntu","title":"Install an Ubuntu 20.04.1 machine on Hyper-V","body":"- **be sure to do the minimal install below**, otherwise I got an error\n- full install takes about 25 minutes\n- new virtual machine\n- store machine in different location (D:\\hyperv)\n\t- e.g. `D:\\hyperv\\Ubuntu 20.04.1 - 2011-11-05\\\n- Generation 2\n- 3000 MB memory\n\t- use dynamic memory\n- connection: Default Switch\n- install operating system from bootable image\n\t- `D:\\large\\ubuntu-20.04.1-desktop-amd64.iso`\n- Finish\n- double-click and start\n\t- hangs here:##thehangher\n\t- after a minutes shows this:##hyperuefi\n\t- problem: This error is a consequence of having Secure Boot enabled on the VM. Secure Boot prevents the system from getting hijacked at boot time by only allowing specifically authorized boot images to load. To disable Secure Boot, power off the VM and then open the VM settings. Under Secure Boot, uncheck the box \"Enable Secure Boot\" and then click \"OK\". This will allow the VM to boot the \"unauthorized\" CD image.\n\t- fix:##enablebootsdf\n- install process\n\t- English, Instsall Ubuntu\n\t- install third-party software\n\t\t- **NOTE: do minimum install as described below**\n\t- Erase disk and install Ubuntu\n\t- got error:##grubfatalerrror\n\t- but it says installation complete:##andinstalcomp\n\t- then it started\n\t- turn machine off\n\t- started\n\t\t- **its installing again**\n\t\t- **doing minimal install this time**:##minminok\n\t\t- erase and install\n\t\t- setup user##logindatainstall\n\t\t- it says it is finished\n\t\t- restarted\n\t\t- \"to remove installation medium, press enter\"\n\t\t- seems to work, logged in\n\t\t- very simple:##theverysimpleok","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-05 16:38:00","systemWhoCreated":"systemUnknown"},{"id":425,"category":"Mongo","title":"How to install MongoDB Compass on Ubuntu","body":"- unlike MongoDB itself, Compass is not available in the base repository of Ubuntu or Debian\n\t- thus we have to download it manually from its official website\n- download Compass\n\t- https://www.mongodb.com/try/download/compass\n\t- Ubuntu shows download for Mac:##wrongcompass\n\t- change to Ubuntu:##rightdownloadcomp\n\t- save as file\n- in terminal, go to `Downloads` directory##gotodownloadubucomp\n\t- `sudo apt install ./mongodb-compass_1.28.4_amd64.deb`\t\n\t\t- takes about 2 minutes\n- add MongoDB Compass to your favorites bar\n\t- click on the **Show Applications** icon:##showapponubutn\n\t- search for `compass`, right-click icon, and add to favorites:##searchforcompassok\n- test MongoDB Compass\n\t- start Mongo daemon: `sudo systemctl start mongod`\n\t- click Mongo Compass icon in favorites bar on the left\n\t- click the Connect button##clickconnnectsdf\n\t- explore data:##compassrunningrun","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-06 11:01:21","systemWhoCreated":"systemUnknown"},{"id":426,"category":"MongoDB","title":"Install MongoDB on Ubuntu","body":"- `wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add` \n- `sudo apt-get install gnupg`\n- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list`\n- `sudo apt-get update`\n- `sudo apt-get install -y mongodb-org`\n- `mongo`##startsnice503\n- sudo systemctl start mongod\n- `mongosh` also works without installing it:##themongoshksdjf","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-06 11:55:44","systemWhoCreated":"systemUnknown"},{"id":427,"category":"MongoDB","title":"Get account at MongoDB Atlas and access from Compass and VSCode","body":"- go to: https://www.mongodb.com\n- register with email or Google account\n- note on terminology\n\t- cluster vs. database\n\t\t- a MontoDB Atlas cluster is like your local MongoDB server, or like your local MySQL server\n\t\t\t- each cluster has databases (like SQL databases)\n\t\t\t- each database has collections (like SQL tables)\n\t\t\t- each collection has documents (like SQL records)\n- dashboard\n\t- three dots button, Load Sample Dataset\n\t\t- loads for a few minutes\n\t- Database Access, Add New Database User\n\t\t- testuser\n\t\t- autogenerate password\n\t\t- read/write any database\n\t\t- add\n\t- Network Access\n\t\t- from anywhere\n\t- look at sample data\n\t\t- sample_airbnb.listingsAndReviews\n\t\t\t- `{\"bedrooms\": {$gt:3}}`\n\t\t\t- `{\"bedrooms\": {$gt: 4, $lt: 6}}`\n- view data with MongoDB Compass\n\t- Database Access\n\t\t- create user, e.g. testuser\n\t\t- manually give a password\n\t- Databases\n\t\t- Connect\n\t\t- copy connection string\n\t- MongoDB Compass\n\t\t- new connection\n\t\t- paste in connection string\n\t\t- click: Fill in connection fields individually\n\t\t- fill in and connect\n- view with Visual Studio\n\t- copy connection string for Compass\n\t- install the [MongoDB for VSCode extension](https://marketplace.visualstudio.com/items?itemName=mongodb.mongodb-vscode)\n\t- click leaf in sidebar\n\t- see data from Altas on the left\n\t- create new database\n\t- create new playground##vscodeandatlas","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-06 16:01:29","systemWhoCreated":"systemUnknown"},{"id":428,"category":"Heroku","title":"Create a backend Node/Express/EJS/JSON app with frontend SASS/JavaScript at Heroku","body":"- clone this GitHub Repository:\n\t- [https://github.com/edwardtanguay/ejs-fullstack-001](https://github.com/edwardtanguay/ejs-fullstack-001)\n- set up `.env` file\n\t- the `.env` file is not in the repository, so you have to create it\n\t\t--------------------------\n\t\tAPP_LOCATION = local\n\t\tBACKEND_URL = http://localhost\n\t\tADMIN_PASSWORD = yourAdminPassword\n\t\t--------------------------\n- set up Sass\n\t- make `/css/main.scss`\n\t- install VSCode extension [Live Sass Compiler](https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass)\n\t- while on the extension intro page, click on \"Watch SASS\"##onthesassclick\n- publish to Heroku\n\t- first publish to GitHub repository\n\t\t- create repository, e.g. `node-express-ejs-heroku`\n\t\t- push code\n\t- Heroku dashboard\n\t\t- New, Create new app\n\t\t- name: `node-express-ejs-heroku`\n\t\t- enable automatic deploys\n\t\t- deploy branch\n\t\t- create two environment variables\n\t\t\t- `ADMIN_PASSWORD` = `yourAdminPassword`\n\t\t\t- `BACKEND_URL` = e.g. `https://ejs-fullstack-001.herokuapp.com`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-07 09:45:06","systemWhoCreated":"systemUnknown"},{"id":429,"category":"MongoDB","title":"Import a Northwind JSON file into MongoDB via the shell","body":"- the task is to import a JSON file into a collection in a Mongo database\n- create working directory\n- create Mongo database\n\t- `mongosh`\n\t- `show dbs`\n\t\t- make sure you don't have a `northwind` database yet\n\t- `exit`\n- import the .json file\n\t- in your browser, go to: `https://github.com/raynaldmo/northwind-mongodb/tree/master/collections/json`\n\t- navigate to products.json\n\t- click on the *Raw* Button\n\t- copy the URL\n\t- `wget -O products.json https://raw.githubusercontent.com/raynaldmo/northwind-mongodb/master/collections/json/products.json`\n\t\t- if you are on Ubuntu, `wget` should be installed\n\t\t- if you are on Windows and don't have `wget`:\n\t\t\t- goto `https://eternallybored.org/misc/wget`\n\t\t\t- download the ZIP file\n\t\t\t- unpack\n\t\t\t- copy to somewhere that is in your Environment Path variable, e.g. `C:\\Program Files\\MongoDB\\Server\\5.0\\bin`\n\t- make sure you have the JSON file your working directory\n\t\t- `ls`\n\t- make sure you have the `mongoimport` command installed\n\t\t- `mongoimport --version`\n\t\t- if you are on Ubuntu, `mongoimport` should be installed with MongoDB\n\t\t- to use `mongoimport` on Windows, you have to download and install **MongoDB Database Tools**\n\t\t\t- go to the **MongoDB Database Tools** download page [here](https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools)\n\t\t\t- download the MSI file and execute it\n\t- import the file\n\t\t- `mongoimport --db northwind --collection products --type json --file products.json --jsonArray`\n\t\t- if successful, it should display how many records it imported\n- view the collection in the shell\n\t- `mongosh`\n\t- `show dbs`\n\t\t- you should see *northwind*\n\t- `use northwind`\n\t- `show collections`\n\t- `db.products.find()`\n\t- notice that each document was automatically given its own, unique id","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-10 16:19:41","systemWhoCreated":"systemUnknown"},{"id":430,"category":"MongoDB","title":"Mongo Querying and CRUD with MongoDB Shell, MongoDB Compass and NoSQLBooster + simple Node/Express/MongoDB API","body":"- in these instructions, we will use three interfaces to MongoDB to execute CRUD commands to the database\n\t- **MongoDB Shell**\n\t- **MongoDB Compass** - the free and standard GUI interface to MongoDB\n\t- **NoSQLBooster** - a nice GUI interface to MongoDB\n\t- to install these on Ubuntu or Windows, please see this howto:\n\t\t- [Install MongoDB development environment on Ubuntu/Windows (MongoDB 6.0 Server, Compass, mongoimport, mongosh, NoSQLBooster)](https://edwardtanguay.vercel.app/howtos?id=668)\n- get the JSON files we will be working with\n\t- create a directory called **dataImport**\n\t- go to the [Northwind JSON files](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json) site and download the following files into the dataImport directory (make sure you click on **raw** then right click and **Save Page As...**, otherwise you download the HTML site instead of the JSON file):\n\t\t- 1. **employees.json**\n\t\t- 2. **customers.json**\n\t\t- 3. **suppliers.json**\n- import the JSON files into your MongoDB database\n\t- 1. import the **employees.json** file with mongosh\n\t\t- `mongoimport --db northwind --collection employees --type json --file employees.json --jsonArray`\n\t- 2. import the **customers.json** file with mongosh\n\t\t- but this time leave off the **collection** parameter and you will see that it uses the file name for the name of the collection\n\t\t- `mongoimport --db northwind --type json --file customers.json --jsonArray`\n\t- 3. import the **suppliers.json** file with Compass\n\t\t- you have to first create an empty collection\n\t\t\t- name it **suppliers.json**\n\t\t- click into it\n\t\t- click [Import Data], [Json], [Import]\n- basic Mongo commands (MongoDB Shell)\n\t- **MongoDB shell**\n\t\t- open shell\n\t\t\t- open a terminal \n\t\t\t- `mongosh`\n\t\t- show all databases\n\t\t\t- `show dbs`\n\t\t- open a database\n\t\t\t- `use northwind`\n\t\t- show which database you are currently in\n\t\t\t- `db`\n\t\t- show all collections of current database\n\t\t\t- `show collections`\n\t\t- **BE CAREFUL! MONGO DOES WHAT YOU SAY IMMEDIATELY!**\n\t\t\t- **delete an entire collection (!)**\n\t\t\t\t- `db.suppliers.drop()`\n\t\t\t- **delete the entire database you are currently on (!!!)**\n\t\t\t\t- `db.dropDatabase()`##protippp\n\t\t\t\t- on Ubuntu the file is actually here in MongoDB 6.0:\n\t\t\t\t\t- `~/.mongodb/mongosh/mongosh_repl_history`\n\t\t\t\t- on Windows:\n\t\t\t\t\t- `C:\\Users\\ADMIN\\AppData\\Roaming\\mongodb\\mongosh\\mongosh_repl_history`\n\t\t- clear the screen\n\t\t\t- `cls`\n\t\t- leave the shell\n\t\t\t- `exit`\n\t- **MongoDB Shell in Compass**\n\t\t- note that Compass now has a MongoDB Shell at the bottom of the application now##bottomshelll\n\t- **MongoDB Shell in NoSQLBooster**\n\t\t- NoSQLBooster has a menu command to open the MongoDB Shell:##nobosterok\n- as you practice the following CRUD commands, execute them interchangeably in:\n\t- MongoDB Shell (`mongosh`)\n\t- Mongo Compass\n\t- NoSQLBooster\n\t- in order to:\n\t\t- see that each of these tools operates on the same data in the MongoDB database\n\t\t- to learn about and experiment with various features of each tool\n- basic CRUD commands\n\t- **READ** (C**R**UD)\n\t\t- **find** = return all documents in collections\n\t\t\t- `db.employees.find()`\n\t\t- **find specific fields** (projection), **sorting** and **filtering**\n\t\t\t- include only certain fields\n\t\t\t\t- `db.employees.find({}, {firstName: 1, lastName: 1})`\n\t\t\t- without _id\n\t\t\t\t- `db.employees.find({}, {firstName: 1, lastName: 1, _id: 0})`\n\t\t\t- sort by last name\n\t\t\t\t- `db.employees.find({}, {firstName: 1, lastName: 1, _id: 0}).sort({lastName: 1})`\n\t\t\t- sort by birth date\n\t\t\t\t- `db.employees.find({}, {firstName: 1, lastName: 1, birthDate: 1, _id: 0}).sort({birthDate: 1})`\n\t\t\t- sort by birth date descending order\n\t\t\t\t- `db.employees.find({}, {firstName: 1, lastName: 1, birthDate: 1, _id: 0}).sort({birthDate: -1})`\n\t\t\t- only output first 5\n\t\t\t\t- `db.employees.find({}, {firstName: 1, lastName: 1, birthDate: 1, _id: 0}).sort({birthDate: -1}).limit(5)`\n\t\t\t- multiple sort fields / sub-fields (address.city)\n\t\t\t\t- `db.employees.find({},{ lastName: 1, \"address.city\": 1}).sort({\"address.city\": 1, lastName: 1})`\n\t\t\t- filter fields: only those from London\n\t\t\t\t- `db.employees.find({\"address.city\": \"London\"},{ lastName: 1, \"address.city\": 1}).sort({\"address.city\": 1, lastName: 1})`\n\t\t\t- exclude fields: all field but\n\t\t\t\t- `db.employees.find({title: \"Sales Representative\"}, {address: 0, notes: 0, territoryIDs: 0})`\n\t\t\t\t- `db.employees.find({title: \"Sales Representative\"}, {address: 0, notes: 0, territoryIDs: 0, _id: 0})`\n\t\t- **two syntaxes you might see:**\n\t\t\t- find(<filterObject>, <selectObject>)\n\t\t\t\t`db.employees.find({title: \"Sales Representative\"}, {lastName: 1, firstName: 1, title: 1})`\n\t\t\t- find(<filterObject>).**projection**(<selectObject>)\n\t\t\t\t`db.employees.find({title: \"Sales Representative\"}).projection({lastName: 1, firstName: 1, title: 1})`\n\t\t- **countDocuments** = total number of objects based on criteria\n\t\t\tdb.employees.countDocuments({title: \"Sales Representative\"})\n\t\t- **findOne** = return only one object\n\t\t\t`db.employees.findOne({_id: ObjectId(\"62c17670c7a008886a499e92\")})`\n\t\t- **exporting JSON to file**\n\t\t\t- *\"2 days old with Mongo and I have a SQL background so bear with me. As with mysql, it is very convenient to be in the MySQL command line and output the results of a query to a file on the machine. I am trying to understand how I can do the same with Mongo, while being in the shell\"* - [Printing Mongo query output to a file while in the mongo shell](https://stackoverflow.com/questions/22565231/printing-mongo-query-output-to-a-file-while-in-the-mongo-shell)\n\t\t\t\t- *\"AFAIK, there is no a interactive option for output to file\"*\n\t\t\t- Answer: just use JavaScript\n\t\t\t\t- output one object from collection to file\n\t\t\t\t\t- `fs.writeFileSync('employee_list.json', JSON.stringify(db.employees.findOne({employeeID: 7})))`\n\t\t\t\t- output array of object form collection to file: employee names sorted by last name\n\t\t\t\t\t- `fs.writeFileSync('employee_full_list8.json',JSON.stringify(db.employees.find({},{firstName: 1, lastName:1, _id:0}).sort({lastName: 1}).toArray()))`\t\t\n\t\t- **$eq** = equal to, **$ne** = not equal to\n\t\t\t- equal to\n\t\t\t\t- `db.employees.find({title: \"Sales Representative\"}).projection({lastName: 1, firstName: 1, title: 1})`\n\t\t\t\t- `db.employees.find({title: {$eq: \"Sales Representative\"}}).projection({lastName: 1, firstName: 1, title: 1})`\n\t\t\t- **not equal to**\n\t\t\t\t- `db.employees.find({title: {$ne: \"Sales Representative\"}}).projection({lastName: 1, firstName: 1, title: 1})`\n\t\t- **$gt** = greater than, **$lt** = less than, **$gte** = greater than or equal, **$lte** = less than or equal\n\t\t\t- in order to have realistic data to search on greater-than / less-than, we need to add a random age to each customer\n\t\t\t- this is a good opportunity to introduce how to use JavaScript to manipulate your Mongo database\n\t\t\t- create this script, **addRandomAge.js**\n\t\t\t\t----------------------------------\n\t\t\t\tdb.customers.find({}).forEach(function(doc) {\n\t\t\t\t\tdb.customers.updateOne({_id: doc._id}, {\n\t\t\t\t\t\t$set: {age: Math.floor(Math.random() * 30) + 20}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t----------------------------------\n\t\t\t- in your computer's terminal (not in mongosh), execute the JavaScript file:\n\t\t\t\t- `mongosh northwind addRandomAge.js`\n\t\t\t- **greater than**\n\t\t\t\t- `db.customers.find({ age: {$gt: 35}}, {_id: 0, contactName: 1, age: 1}).sort({age: 1})`\n\t\t\t- **less than**\n\t\t\t\t- `db.customers.find({ age: {$lt: 35}}, {_id: 0, contactName: 1, age: 1}).sort({age: 1})`\n\t\t\t- **greater than and less than**\n\t\t\t\t- `db.customers.find({ age: {$gte: 36, $lte: 39}}, {_id: 0, contactName: 1, age: 1}).sort({age: 1})`\n\t\t- **$in** = is contained in, **$nin** = is not contained in\n\t\t\t- city is either Strasbourg or Marseille\n\t\t\t\t- `db.customers.find({\"address.city\": {$in: [\"Marseille\", \"London\"]}}, {companyName: 1, \"address.city\": 1, _id: 0})`\n\t\t\t- company name, city for all that are not in London\n\t\t\t\t- `db.customers.find({\"address.city\": {$ne: \"London\"}}, {companyName: 1, \"address.city\": 1, _id: 0})`\n\t\t\t\t- `db.customers.find({\"address.city\": {$nin: [\"London\"]}}, {companyName: 1, \"address.city\": 1, _id: 0})`\n\t\t- **$exists**\n\t\t\t--------------------------------------------------------\n\t\t\t// prepare: randomly add fields only to some\n\t\t\tdb.suppliers.find({}).forEach(function(doc) {\n\t\t\t\t\tif(Math.floor(Math.random() * 3) + 1 === 1) {\n\t\t\t\t\t\tdb.suppliers.updateOne({_id: doc._id}, {\n\t\t\t\t\t\t\t$set: {coupon: \"new\"}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t})\n\n\t\t\t// list those with coupon field\n\t\t\tdb.suppliers.find({ coupon: {$exists: true} }, { companyName: 1, coupon: 1, _id: 0 })\n\n\t\t\t// list those without coupon field\n\t\t\tdb.suppliers.find({ coupon: {$exists: false} }, { companyName: 1, coupon: 1, _id: 0 })\n\n\t\t\t// notice that it still finds field if value is empty\n\t\t\t--------------------------------------------------------\n\t\t- **$and** / **$or**\n\t\t\t-------------------------------------------\n\t\t\t// all customers older than 31 and less than 35 - automatic and\n\t\t\tdb.customers.find({age: { $gt: 30, $lt: 35}}, {contactName: 1, age: 1, _id: 0})\n\n\t\t\t// same\n\t\t\tdb.customers.find({age: { $gt: 30, $lt: 55}, \"address.country\": \"Brazil\"})\n\t\t\tdb.customers.find({$and: [{age: { $gt: 30, $lt: 55}}, {\"address.country\": \"Brazil\"}]})\n\n\t\t\t// city is London or people under 25\n\t\t\tdb.customers.find({$or: [\n\t\t\t\t{\"address.city\": \"London\"},\n\t\t\t\t{age: {$lt: 25}}\n\t\t\t]}, {contactName: 1, \"address.city\": 1, _id:0, age: 1})\n\n\t\t\t-------------------------------------------\n\t\t- `$expr`\n\t\t\t-----------------------------------------------\n\t\t\t// setup\n\t\t\tdb.customers.find({}).forEach(function(doc) {\n\t\t\t\tdb.customers.updateOne({_id: doc._id}, {\n\t\t\t\t\t$set: {managersAge: Math.floor(Math.random() * 30) + 20}\n\t\t\t\t})\n\t\t\t})\t\t\t\n\n\t\t\t// all whose age is greater than their manager's age\n\t\t\tdb.customers.find({$expr: { $gt: [\"$age\", \"$managersAge\"]}}, {contactName: 1, age: 1, managersAge: 1, _id:0})\n\t\t\t-----------------------------------------------\n\t- **U**pdate\n\t\t- `updateOne`\n\t\t\t- `$set`\n\t\t\t\t-------------------------------------------------\n\t\t\t\t// change name from Steven to Stephan\n\t\t\t\tdb.employees.updateOne({_id: ObjectId('62c17670c7a008886a499e98')}, {$set: {firstName: \"Stephan\"}})\n\t\t\t\t-------------------------------------------------\n\t\t\t- `$inc`\n\t\t\t\t-------------------------------------------------\n\t\t\t\t// increment age by one\n\t\t\t\tdb.customers.updateOne({_id: ObjectId('62c177fb446b309f5d602e2b')}, {$inc: {age: 1}})\n\t\t\t\t-------------------------------------------------\n\t\t\t- `$push`\n\t\t\t\t-------------------------------------\n\t\t\t\t// add territory ID to employee\n\t\t\t\tdb.employees.updateOne({_id: ObjectId('62c17670c7a008886a499e96')}, {$push: {territoryIDs: 1111}})\n\t\t\t\t-------------------------------------\n\t\t\t- `$pull`\n\t\t\t\t-------------------------------------\n\t\t\t\t// remove one territory ID from employee\n\t\t\t\tdb.employees.updateOne({_id: ObjectId('62c17670c7a008886a499e96')}, {$pull: {territoryIDs: 55439}})\n\n\t\t\t\t// remove many territory IDs from employee based on criteria\n\t\t\t\tdb.employees.updateOne({_id: ObjectId('62c17670c7a008886a499e96')}, {$pull: {territoryIDs: {$gt: 40000}}})\n\t\t\t\t-------------------------------------\n\t\t- `updateMany`\n\t\t\t- `$rename`\n\t\t\t\t----------------------------------------\n\t\t\t\t// rename a field\n\t\t\t\tdb.customers.updateMany({}, {$rename: { contactName: \"customerName\"}})\n\t\t\t\t----------------------------------------\n\t\t\t- `$unset`\n\t\t\t\t----------------------------------\n\t\t\t\t// misspell a new field\n\t\t\t\tdb.customers.find({}).forEach(function(doc) {\n\t\t\t\t\tdb.customers.updateOne({_id: doc._id}, {\n\t\t\t\t\t\t$set: {vacationDayys: 29}\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\t// delete the misspelled field\n\t\t\t\tdb.customers.updateMany({}, {$unset: {vacationDayys: ''}})\n\t\t\t\t----------------------------------\n\t\t- `replaceOne`\n\t\t\t---------------------------------------\n\t\t\t// replace object with new fields\n\t\t\tdb.todos.replaceOne({_id: ObjectId('62c1f66c8063a4efa228542a')},\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"examine all collections\",\n\t\t\t\t\t\"favorite\": true,\n\t\t\t\t\t\"deleted\": false\n\t\t\t\t}\n\t\t\t)\n\n\t\t\t// replace object with same fields, some with different values\n\t\t\tdb.todos.replaceOne({_id: ObjectId('62c1f66c8063a4efa228542a')},\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"examine all collections\",\n\t\t\t\t\t\"favorite\": false,\n\t\t\t\t\t\"deleted\": false\n\t\t\t\t}\n\t\t\t)\n\t\t\t---------------------------------------\n\t- **D**elete\n\t\t- `deleteOne`\n\t\t\t--------------------------------------\n\t\t\tdb.todos.deleteOne({_id: ObjectId('62c1f66c8063a4efa228542a')})\n\t\t\t--------------------------------------\n\t\t- `deleteMany`\t\n\t\t\t------------------------------------\n\t\t\t// delete all from London\n\t\t\tdb.employees.deleteMany({\"address.city\": \"London\"})\n\n\t\t\t// delete all not from London (deletes rest)\n\t\t\tdb.employees.deleteMany({\"address.city\": {$ne: \"London\"}})\n\t\t\t------------------------------------\n\t- **C**reate\n\t\t- `insertOne()`\n\t\t\t----------------------------------\n\t\t\tuse northwind\n\t\t\tshow collections\n\t\t\tdb.todos.insertOne({title: \"examine all collections\"})\n\t\t\tshow collections\n\t\t\tdb.todos.find()\n\t\t\t----------------------------------\n\t\t- `insertMany()`\n\t\t\t----------------------------------\n\t\t\tdb.todos.insertMany([\n\t\t\t\t{title: \"examine all collections\"},\n\t\t\t\t{title: \"try out all commands\"}\n\t\t\t])\n\t\t\tshow collections\n\t\t\tdb.todos.find()\n\t\t\t----------------------------------\t\t\t\n- **use MongoDB querying in Node/Express API**\n\t- `npm init -y`\n\t- `npm i express`\n\t- `npm i mongodb`\n\t- `npm i -D nodemon`\n\t- **package.json**\n\t\t-----------------------------------\n\t\t\"type\": \"module\",\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"nodemon server.js\"\n\t\t},\t\t\n\t\t-----------------------------------\n\t- **server.js**\n\t\t-------------------------------------------\n\t\timport express from 'express';\n\t\timport { MongoClient } from 'mongodb';\n\n\t\tconst app = express();\n\t\tconst port = 3022;\n\n\t\tconst conn = 'mongodb://localhost:27017';\n\t\tconst client = new MongoClient(conn);\n\n\t\tconst getData = async (done) => {\n\t\t\tawait client.connect();\n\t\t\tconst db = client.db('northwind');\n\t\t\tdone(db);\n\t\t};\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send('<h1>MongoDB Test</h1>');\n\t\t});\n\n\t\tapp.get('/employees', (req, res) => {\n\t\t\tgetData(async (db) => {\n\t\t\t\tconst users = await db\n\t\t\t\t\t.collection('employees')\n\t\t\t\t\t.find({ birthDate: { $gte: '1963' } })\n\t\t\t\t\t.project({ firstName: 1, lastName: 1, _id: 0, birthDate: 1 })\n\t\t\t\t\t.toArray();\n\t\t\t\tres.json(users);\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t});\t\t\n\t\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-03 12:23:43","systemWhoCreated":"systemUnknown"},{"id":431,"category":"MongoDB","title":"Create the backend API of a two-part user-management project","body":"- intro and infos\n\t- these instructions lead you through creating the backend API of a user-management app that has a create-react-app frontend and Node/Express API backend that carries out CRUD operations:\n\t\t- get users\n\t\t- delete user\n\t\t- edit user\n\t\t- add user\n\t- see also the instructions to [create the frontend for this project](https://onespace.netlify.app/howtos?id=433)\n\t- these instructions are quite abbreviated\n\t\t- if something is unclear, see the final code is here: [manageUserAppBackend](https://github.com/edwardtanguay/manageUserAppBackend)\n\t- this is a MERN stack project\n\t\t- information is saved in a local MongoDB\n\t\t- Node/Express backend\n\t\t- React (create-react-app) frontend\n\t- this project also runs [at Heroku here](https://heroku-manage-user-app-fronten.herokuapp.com/)\n\t\t- where it accesses an Atlas MongoDB\n- import data into MongoDB\n\t- download [users100.json](https://raw.githubusercontent.com/edwardtanguay/downloads/master/users100.json)\n\t- `mongoimport --db api001 --collection users100 --type json --file users100.json --jsonArray`\n- setup basic API\n\t- setup project\n\t\t- `git init`\n\t\t\t- `.gitignore`\n\t\t- `npm init -y`\n\t\t\t- `\"type\": \"module\",`\n\t- create `backend.js`\n\t\t- `npm i express`\n\t\t- import\n\t\t- const app\n\t\t- port\n\t\t- listen\n\t\t- backend script\n\t\t- test listening\n\t\t\t- `npm run backend`\n\t- create test endpoint /\n\t\t- `app.get('/', ...`\n\t\t- test with rest client: `test.http`\n\t\t\t---------------------------\n\t\t\t### show all users\n\t\t\tGET http://localhost:3014\n\t\t\tcontent-type: application/json\n\t\t\t---------------------------\n- endroute `/` (show all names and addresses)\n\t- set up MongoDB client\n\t\t- `npm i mongodb`\n\t\t- `import { MongoClient } from 'mongodb';`\n\t\t- `const mongoConnectString = 'mongodb://localhost:27017';`\n\t\t- `const client = new MongoClient(mongoConnectString);`\n\t- create getData function\n\t\t-------------------------------\n\t\tconst getData = async (done) => {\n\t\t\tawait client.connect();\n\t\t\tconst db = client.db('api001');\n\t\t\tdone(db);\n\t\t}\n\t\t-------------------------------\n\t- change endroute `/` to send all names\n\t\t----------------------------------------\n\t\tgetData(async (db) => {\n\t\t\tconst users = await db.collection('users100').find()\n\t\t\t\t.project({\n\t\t\t\t\tname: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\temail: 1\n\t\t\t\t}).toArray();\n\t\t\tres.json(users);\n\t\t});\n\t\t----------------------------------------\n\t- add username and email\n- endroute `/deleteuser/:id` (delete user by ID)\n\t- show id\n\t- in test, change to variable: @url and {{url}}\n\t- get real id: `db.users100.find({},{email: 1}).limit(1)`\n\t- add mongodb: `import mongodb, { MongoClient } from 'mongodb';`\n\t- change getData to execMongo\n\t\t------------------------------------------\n\t\texecMongo(async (db) => {\n\t\t\tconst deleteResult = await db.collection('users100').deleteOne({ _id: new mongodb.ObjectId(id) });\n\t\t\tres.json({\n\t\t\t\tresult: deleteResult\n\t\t\t});\n\t\t});\n\t\t------------------------------------------\n- endroute `/adduser` (insert a user)\n\t- add `app.use(express.json());\n\t- `const insertResult = await db.collection('users100').insertOne(user);`\n\t- test\n\t\t----------------------------\n\t\tPOST  {{url}}/adduser\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"user\": {\n\t\t\t\t\"name\": \"Angie Additive\",\n\t\t\t\t\"username\": \"angie_additive\",\n\t\t\t\t\"email\": \"angie@hotmail.com\"\n\t\t\t}\n\t\t}\n\t\t----------------------------\n- endroute `/edituser/:id` (edit a user's email)\n\t-------------------------------------------\n\tconst updateResult = await db.collection('users100').updateOne({ _id: new mongodb.ObjectId(id) }, { $set: { email } });\n\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-14 10:59:19","systemWhoCreated":"systemUnknown"},{"id":432,"category":"GitHub","title":"How to change a repository's default branch from master to main","body":"- these instructions assume you have a Git repository locally and on GitHub and want to change the default repository from **master** to **main** both locally and on GitHub\n- rename the local branch from master to main:\n\t- `git branch --move master main`\n- upload the local main branch to your GitHub repository\n\t- `git push --set-upstream origin main`\n- you now have two branches in your GitHub repository: **master** (default) and **main**\n\t- so at GitHub, change the default branch from **master** to **main**:##theonetwosdf\n- now delete the master branch from your GitHub repository\n\t- `git push origin --delete master`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-14 11:30:49","systemWhoCreated":"systemUnknown"},{"id":433,"category":"React","title":"Create the frontend of a two-part user-management project","body":"- intro and infos\n\t- these instructions lead you through creating the frontend of a user-management app which consists of two parts: (1) this create-react-app frontend, and (2) a Node/Express API backend that carries out CRUD operations:\n\t\t- get users\n\t\t- delete user\n\t\t- edit user\n\t\t- add user\n\t- see also the instructions to [create the backend API for this project](https://onespace.netlify.app/howtos?id=431)\n\t- these instructions are quite abbreviated\n\t\t- if something is unclear, see the final code is here: [manageUserAppFrontend](https://github.com/edwardtanguay/manageUserAppFrontend)\n\t- this is a MERN stack project\n\t\t- information is saved in a local MongoDB\n\t\t- Node/Express backend\n\t\t- React (create-react-app) frontend\n\t- this project also runs at Heroku here: [User-Management App](https://heroku-manage-user-app-fronten.herokuapp.com/)\n\t\t- where it accesses an Atlas MongoDB\n- setup create-react-app\n\t- make directory: `editUserApp_frontend`\n\t- use minified create-react-app [edwardtanguay/blankcra](https://github.com/edwardtanguay/blankcra)\n\t- `npm i`\n\t- `npm start`##thecrahello\n- display users\n\t- display dummy users from frontend, `App.js`:\n\t\t--------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport './App.scss';\n\n\t\tfunction App() {\n\t\t\tconst [users, setUsers] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\tsetUsers([{ name: \"test1\" }, { name: \"test2\" }]);\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Edit User App Frontend</h1>\n\t\t\t\t\t<section className=\"users\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{users.map((user, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={index}>{user.name}</li>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t--------------------------------------\n\t- display users from the backend\n\t\t- setup and start the [editUserApp_backend](https://github.com/edwardtanguay/editUserApp_backend)\n\t\t\t- note the port, i.e. 3016\n\t\t- add backendUrl: `const backendUrl = 'http://localhost:3016';`\n\t\t- update useEffect to get data from API:\n\t\t\t-----------------------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch(backendUrl);\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetUsers(data);\n\t\t\t\t})();\n\t\t\t}, []);\n\t\t\t-----------------------------------------\n\t\t- display as cards with info\n\t\t\t---------------------------------------------\n\t\t\t<section className=\"users\">\n\t\t\t\t{users.map((user, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={index} className=\"userCard\">\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"label\">Full Name:</div>\n\t\t\t\t\t\t\t\t<div className=\"data\">{user.name}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"label\">User Name:</div>\n\t\t\t\t\t\t\t\t<div className=\"data\">{user.username}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"label\">E-Mail:</div>\n\t\t\t\t\t\t\t\t<div className=\"data\">{user.email}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</section>\n\t\t\t---------------------------------------------\n\t\t- appropriate SCSS:\n\t\t\t---------------------------------------------------\n\t\t\tdiv.userCard {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\tpadding: 10px;\n\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t.row {\n\t\t\t\t\tdisplay:flex;\n\t\t\t\t\t.data {\n\t\t\t\t\t\tmargin: 0 0 0 10px;\n\t\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\t\tcolor: brown;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------------------------------\n\t\t- frontend looks like this:##thetornedituser\n- add delete and edit buttons to each card\n\t- `npm i react-icons`\n\t- add to card:\n\t\t------------------------\n\t\t<div className=\"iconRow\">\n\t\t\t<button className=\"icon\"><RiDeleteBin6Line/></button>\n\t\t\t<button className=\"icon\"><GrEdit /></button>\n\t\t</div>\n\t\t------------------------\n\t- style it:\n\t\t------------------------------------\n\t\tdiv.iconRow {\n\t\t\tmargin: 5px 0 0 0;\n\t\t\tdisplay: flex;\n\t\t\tbutton {\n\t\t\t\tmargin: 0 5px 0 0;\n\t\t\t\tbackground-color: #ccc;\n\t\t\t\twidth: 30px;\n\t\t\t\tpadding: 6px 0 3px 0;\n\t\t\t}\n\t\t}\n\t\t------------------------------------\n\t- add \"Add User\" button at top##andthetornadduser\n- program functionality for **Delete button**\n\t- `<button onClick={() => handleDeleteButton(user)} className=\"icon\"><RiDeleteBin6Line /></button>`\n\t- refactor useEffect so that it loads users by calling a function called `loadUsers` and then call it here as well, to update the state of the users\n\t\t--------------------------------------\n\t\tconst handleDeleteButton = (user) => {\n\t\t\t(async () => {\n\t\t\t\tawait fetch(`${backendUrl}/deleteuser/${user._id}`, { method: 'DELETE'});\n\t\t\t\tloadUsers();\n\t\t\t})();\n\t\t}\n\t\t--------------------------------------\n- program functionality for **Edit E-Mail button**\n\t- set a boolean field `isEditingEmail` on each user upon loading, to track if editing form for that user is showing or not\n\t\t---------------------------------------------\n\t\tconst loadUsers = () => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(backendUrl);\n\t\t\t\tconst users = await response.json();\n\t\t\t\tusers.forEach(user => user.isEditingEmail = false);\n\t\t\t\tsetUsers(users);\n\t\t\t})();\n\t\t}\n\t\t---------------------------------------------\n- program functionality for **Add User button**\n\t- add all necessary state variables\n\t\t-----------------------------------------\n\t\tconst [isAddingUser, setIsAddingUser] = useState(false);\n\t\tconst [formName, setFormName] = useState('');\n\t\tconst [formUsername, setFormUsername] = useState('');\n\t\tconst [formEmail, setFormEmail] = useState('');\n\t\t-----------------------------------------\n\t- add HTML/JSX form to `App.js`\n\t\t---------------------------------------\n\t\t<div className=\"addUserArea\">\n\t\t\t<div><button onClick={handleToggleAddUserArea}>Add User</button></div>\n\t\t\t{isAddingUser && (\n\t\t\t\t<div className=\"addUserFormArea\">\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label htmlFor=\"name\">Full Name: </label>\n\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\tvalue={formName}\n\t\t\t\t\t\t\t\tonChange={handleFormName}\n\t\t\t\t\t\t\t\tid=\"name\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label htmlFor=\"username\">User Name: </label>\n\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\tvalue={formUsername}\n\t\t\t\t\t\t\t\tonChange={handleFormUsername}\n\t\t\t\t\t\t\t\tid=\"username\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label htmlFor=\"email\">Email: </label>\n\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\tvalue={formEmail}\n\t\t\t\t\t\t\t\tonChange={handleFormEmail}\n\t\t\t\t\t\t\t\tid=\"email\" />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"formButtonArea\">\n\t\t\t\t\t\t\t<button onClick={(e) => handleFormSaveButton(e)}>Save New User</button>\n\t\t\t\t\t\t\t<button onClick={handleCancelAddForm}>Cancel</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t\t---------------------------------------\n\t- add SCSS\n\t\t-------------------------------------\n\t\t.addUserFormArea {\n\t\t\tbackground-color: #ccc;\n\t\t\tmargin: 10px 0 0 0;\n\t\t\tpadding: 10px;\n\t\t\tborder: 1px solid #999;\n\t\t\tborder-radius: 5px;\n\t\t\twidth: 325px;\n\t\t\tlabel {\n\t\t\t\tfont-size: 1.3rem;\n\t\t\t\twidth: 110px;\n\t\t\t\tdisplay: inline-block;\n\t\t\t}\n\t\t\tinput {\n\t\t\t\twidth: 200px;\n\t\t\t}\n\t\t\t.formButtonArea {\n\t\t\t\tmargin: 10px 3px 0 0;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: flex-end;\n\t\t\t\tbutton {\n\t\t\t\t\tbackground-color: #ddd;\n\t\t\t\t\tfont-size: 0.9rem;\n\t\t\t\t\tmargin: 0 5px 0 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t-------------------------------------\n- finished app looks like this:##thefinisheappfrontend","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-14 17:05:03","systemWhoCreated":"systemUnknown"},{"id":434,"category":"MongoDB","title":"How to use and connect to your MongoDB Atlas account with mongosh, mongoimport, Compass and NoSQLBooster","body":"- get MongoDB Atlas account\n\t- sign up for a free [MongoDB Atlas account](https://www.mongodb.com)\n- overview of MongoDB Atlas website\n\t- cluster vs. database\n\t\t- a MongoDB Atlas **cluster** is like your local MongoDB **server** (like MySQL server)\n\t\t\t- each cluster has databases (like SQL databases)\n\t\t\t- each database has collections (like SQL tables)\n\t\t\t- each collection has documents (like SQL records)\n\t\t- to see your databases, click on the button **Browser Collections**\n\t\t- create database \n\t\t\t- database: `blogapp`\n\t\t\t- collection: `articles`\n\t\t\t- insert 2 articles\n\t\t\t\t- { title: \"First Article\" }\n\t\t\t\t- { title: \"Second Article\" }\n- enable access from local shell, applications (like Compass or NoSQLBooster) and your online apps\n\t- Network Access\n\t\t- Add IP Address\n\t\t- Allow access from anywhere\n\t\t\t- this is secure since login/password is also needed\n\t\t- Confirm\n\t\t\t- notice \"Pending...\" message\n\t\t\t\t- changes to your MongoDB Atlas cluster can take 2-5 minutes to take effect\n\t- Database Access\n\t\t- Add New Database User\n\t\t- Password\n\t\t- *mainuser*\n\t\t- *<think_of_a_password>*\n\t\t\t- copy password into KeePass etc.\n\t\t\t\t- since you can't find out your password again, you can only reset it\n\t\t- Read and write to any database\n\t\t- click *Add User*\n\t\t\t- note message: \"We are deploying your changes (current action: configuring MongoDB)\"\n\t\t\t\t- can take 2-5 minutes to take effect\n- access with MongoDB shell\n\t- Databases\n\t- Connect\n\t- Connect with the MongoDB Shell\n\t- copy connection string\n\t- in shell, past it in and change **mongo** to **mongosh**\n\t- `show dbs`\n\t- `use blogapp`\n\t- `show collections`\n\t- `db.articles.find()`\n- upload data with `mongoimport`\n\t- create file to import called `articles.json`\n\t\t----------------------------------\n\t\t[\n\t\t\t{\n\t\t\t\t\"title\": \"Third Article\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"title\": \"Fourth Article\"\n\t\t\t}\n\t\t]\n\t\t----------------------------------\n\t- database > cluster0 > primary##gotheconnecinin\n\t\t- copy **--host**\n\t- create mongoimport command:\n\t\t- mongoimport --host **cluster0-shard-00-01.ogshn.mongodb.net:27017**  --db **blogapp** --collection **articles** --type json --file **articles.json** --jsonArray --authenticationDatabase admin --ssl --username **mainuser**##andtijsicopyijsi\n\t- see that they were added to the online database `blogapp`:##addedtotheblogappp\n- access with MongoDB Compass\n\t- Databases\n\t- Connect\n\t- Connect Using MongoDB Compass\n\t- copy and modify connection string, e.g.\n\t\t`mongodb+srv://mainuser:<password>@cluster0.ogshn.mongodb.net`\n\t- start Compass\n\t- paste\n\t- click: \"Fill in connection fields individually\"\n\t\t- username: `mainuser`\n\t\t- password `<your_password>`\n\t- click on database **blogapp** and collection **articles**##compassisnowbloga\n- access with NoSQLBooster\n\t- Databases\n\t- Connect\n\t- Connect Using MongoDB Compass\n\t- copy and modify connection string, e.g.\n\t\t`mongodb+srv://mainuser:<password>@cluster0.ogshn.mongodb.net`\n\t- start NoSQLBooster\n\t\t- click **Create From URI**:##fromtheuriok\n\t\t- paste connection string and click **Open Connection Editor**:##pasteandconnectionstring\n\t\t- click on **Authentication**, type password, and click on **Save & Connect**##clickonthreeandsaveconnect\n\t\t- click on database and collection##theartnosqlgoti\n\t- disconnect and connect again automatically\n\t\t- disconnect##andthedisconnect\n\t\t- close NoSQLBooster\n\t\t- open NoSQLBooster\n\t\t- click Connect\n\t\t- double-click on connect and you enter without password:##theclicksecondonan","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-14 22:08:33","systemWhoCreated":"systemUnknown"},{"id":435,"category":"MongoDB","title":"How to prepare and publish a Node/Express/MongoDB backend/frontend app to Heroku/Atlas","body":"- the following instructions publish this user-management app to Heroku/Atlas:\n\t- local MongoDB database/collection **api001/users100** imported from this file: [users100.json](https://raw.githubusercontent.com/edwardtanguay/downloads/master/users100.json)\n\t- [backend](https://github.com/edwardtanguay/manageUserAppBackend)\n\t- [frontend](https://github.com/edwardtanguay/manageUserAppFrontend)\n- upload the users100.json file to MongoDB Atlas:\n\t- log into MongoDB/Atlas\n\t- database > cluster0 > primary##gotheconnecinin\n\t\t- copy the information for `--host` below\n\t\t- create a user named mainuser for the `--username` below\n\t\t- you will be asked for the password after you enter this command\n\t- create mongoimport command:\n\t\t- mongoimport --host **cluster0-shard-00-01.ogshn.mongodb.net:27017**  --db **api001** --collection **users100** --type json --file **users100.json** --jsonArray --authenticationDatabase admin --ssl --username **mainuser**##andtijsicopyijsi\n- modify backend \n\t- enable Heroku to determine its own port\n\t\t- change port definition line to this:\n\t\t\t- `const port = process.env.PORT || 3016;`\n\t- set up `.env` file in order to connect to local MongoDB from local app, and connect to MongoDB/Atlas from Heroku app\n\t\t- `npm i dotenv`\n\t\t- create a file `.env` in root:\n\t\t\t-------------------------\n\t\t\tMONGODB_URI = mongodb://localhost:27017\n\t\t\t-------------------------\n\t\t- in `backend.js`\n\t\t\t- add:\n\t\t\t\t- `import dotenv from 'dotenv';`\n\t\t\t\t- `dotenv.config();`\n\t\t\t- modify:\n\t\t\t\t- `const mongoConnectString = process.env.MONGODB_URI;`\n\t\t- add to `.gitignore` (since you don't want your .env file checked into your repository\n\t\t\t- `.env`\n\t- test locally endpoint `/`\n- publish backend to Heroku\n\t- publish to GitHub: `herokuManageUserAppBackend`\n\t- create Heroku site e.g. `heroku-manage-user-app-backend` (you can't use camelCase at Heroku)\n\t\t- set it up to deploy from your GitHub repository\n\t- to debug errors, turn on logging\n\t\t- `heroku login`\n\t\t\t- log in via browser\n\t\t- `heroku -a heroku-manage-user-app-backend --tail`\n\t\t\t- (where `heroku-manage-user-app-backend` is the name of your app)\n\t- create environment variable at Heroku\n\t\t- `MONGODB_URI`\n\t\t\t- e.g. `mongodb+srv://mainuser:THEPASSWORD@cluster0.ogshn.mongodb.net`\n\t\t\t- (get this from your MongoDB/Atlas dashboard: Databases > Connect > Connect your application)\n\t- test at Heroku by clicking on the button **Open app**\n\t\t- this is the GET route for `/` and should show all users from the Atlas database/collection api001/users100\n- publish frontend to Heroku\n\t- create `.env` file\n\t\t-------------------------------\n\t\tREACT_APP_BACKEND_URL = http://localhost:3016\n\t\t-------------------------------\n\t- add to `.gitignore` (since you don't want your .env file checked into your repository\n\t\t- `.env`\n- publish frontend to Heroku\n\t- publish to GitHub: `herokuManageUserAppFrontend`\n\t- create Heroku site e.g. `heroku-manage-user-app-fronten` (you can't use camelCase at Heroku, only allow 30 characters)\n\t\t- set it up to deploy from your GitHub repository\t\n- increase security of backend\n\t- note that the Heroku backend can be accessed from any site, which means that anyone with knowledge of the API could view, edit, add, and delete data from the database via the API\n\t- there are many sophisticated solutions to this to increase security\n\t- one which increases the security moderately is to allow access at the route level only from specific referrers\n\t- see [this file](https://github.com/edwardtanguay/ejs-fullstack-001/blob/main/src/routes/api.js) on another project for code to do this, search for `req.headers.referer`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-14 23:38:23","systemWhoCreated":"systemUnknown"},{"id":437,"category":"Mongoose","title":"Mongoose CRUD basics","body":"- these instructions show you how to create a node script that performs all four CRUD operations on a MongoDB database with the Mongoose driver\n\t- you can find the final code here: [edwardtanguay/mongoosecrud](https://github.com/edwardtanguay/mongoosecrud)\n- prepare project\n\t- `git init`\n\t\t- `.gitignore`\t\n\t\t\t- `node_modules`\n\t- `npm init -y`\n\t\t- in package.json:\n\t\t\t- `\"type\": \"module\",`\n\t- create `index.js`\n\t\t- `console.log('ready');\n\t- node index.js\n- set up and test Mongoose\n\t- import\n\t\t- `npm i mongoose`\n\t\t- `import mongoose from 'mongoose';`\n\t- make connection\n\t\t----------------------\n\t\tmongoose.connect('mongodb://localhost:27017/appcrud', (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('ERROR ON CONNECT');\n\t\t\t} else {\n\t\t\t\tconsole.log('connection open');\n\t\t\t}\n\t\t});\n\t\t----------------------\n\t- close connection function\n\t\t---------------------------------\n\t\tfunction closeConnection() {\n\t\t\tmongoose.connection.close(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('ERROR ON CONNECTION CLOSE');\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('connection closed');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t---------------------------------\n\t- close connection\n\t\t-----------------------------------\n\t\tcloseConnection();\n\t\t-----------------------------------\n- setup CRUD skeleton code\n\t- `const crudCommand = 'create';`\n\t- switch\n\t\t---------------------------------\n\t\tswitch (crudCommand) {\n\t\t\tcase 'create':\n\t\t\t\tconsole.log('TODO: CREATE');\n\t\t\t\tcloseConnection();\n\t\t\t\tbreak;\n\t\t\tcase 'read':\n\t\t\t\tconsole.log('TODO: READ');\n\t\t\t\tcloseConnection();\n\t\t\t\tbreak;\n\t\t\tcase 'update':\n\t\t\t\tconsole.log('TODO: UPDATE');\n\t\t\t\tcloseConnection();\n\t\t\t\tbreak;\n\t\t\tcase 'delete':\n\t\t\t\tconsole.log('TODO: DELETE');\n\t\t\t\tcloseConnection();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('BAD COMMAND: ' + crudCommand);\n\t\t\t\tcloseConnection();\n\t\t\t\tbreak;\n\t\t}\n\t\t---------------------------------\n- add Mongoose schema/model\n\t----------------------\n\tconst userSchema = mongoose.Schema({\n\t\tname: String,\n\t\tusername: String,\n\t\temail: String\n\t});\n\tconst UserModel = mongoose.model(\"User\", userSchema);\n\t----------------------\n- add CREATE functionality\n\t- add create code:\n\t\t---------------------------------\n\t\tconst user = new UserModel({\n\t\t\tname: \"Jon Ackers\",\n\t\t\tusername: \"ja\",\n\t\t\temail: \"ja@gmail.com\"\n\t\t});\n\t\tuser.save(err => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('BAD CREATE');\n\t\t\t} else {\n\t\t\t\tconsole.log(`user inserted: ${user.name}`)\n\t\t\t}\n\t\t\tcloseConnection();\n\t\t});\n\t\t---------------------------------\n\t- advantages of Mongoose\n\t\t- naming conventions\n\t\t\t- note the collection name is \"users\" from `mongoose.model(\"User\", userSchema);`\n\t\t- type validation\n\t\t\t- add `age: 34`\n\t\t\t\t- note that it is not saved in the database\n\t\t\t\t\t- since `age` is not in the schema\n\t\t\t- add `age: Number`\n\t\t\t\t- note that it is saved now\n\t\t\t- change age to string \"whatever\"\n\t\t\t\t- note that it gets a validation error\n\t\t\t- change age to string \"34\"\n\t\t\t\t- note that it is silently converted to a number\n\t\t\t\t\t- since the type is forced\n\t\t\t- change name to a number\n\t\t\t\t- note that it is casted to a string\n\t\t\t\t\t- since the type is forced\n\t\t- required fields\n\t\t\t- leave username out\n\t\t\t\t- note it saves without username\n\t\t\t\t- change: `username: {type: String, required: true},`\n\t\t\t\t- note that it does not save\n\t\t\t\t\t- since the schema now requires username\n\t\t\t\t- add username again\n\t\t\t\t\t- note that it now saves\n- add READ functionality\n\t------------------------------------\n\t(async () => {\n\t\tconst users = await UserModel.find({});\n\t\tusers.forEach(user => console.log(user.name));\n\t\tcloseConnection();\n\t})();\n\t------------------------------------\n- add UPDATE functionality\n\t------------------------------------\n\t(async () => {\n\t\tawait UserModel.findOneAndUpdate({ username: \"talbrecht3\" }, { $set: { email: \"newmail\" } });\n\t\tconsole.log('user updated');\n\t\tcloseConnection();\n\t})();\n\t------------------------------------\n- add DELETE functionality\n\t------------------------------------\n\t(async () => {\n\t\tawait UserModel.deleteOne({ username: \"talbrecht2\" });\n\t\tconsole.log('user deleted');\n\t\tcloseConnection();\n\t})();\n\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-18 08:40:56","systemWhoCreated":"systemUnknown"},{"id":438,"category":"Mongoose","title":"Refactor user-management app from MongoDB driver to Mongoose driver","body":"- the goal of these instructions is to refactor the [manageUserAppBackend](https://github.com/edwardtanguay/manageUserAppBackend) project \n\t- we will replace the MongoDB driver with a Mongoose driver using [this code](https://github.com/edwardtanguay/mongoosecrud) as a basis\n\t- the final code refactored with the Mongoose driver is here: [manageUserMongooseBackend](https://github.com/edwardtanguay/manageUserMongooseBackend)\n- test current manageUserAppBackend app\n\t- make sure MongoDB app still runs (http://localhost:3016)\n- replace drivers\n\t- `npm un mongodb`\n\t- `npm i mongoose`\n- replace imports\n\t--------------------------------\n\t// import mongodb, { MongoClient } from 'mongodb';\n\timport mongoose from 'mongoose';\n\t--------------------------------\n- add database to connection string:\n\t------------------------------\n\t// const mongoConnectString = 'mongodb://localhost:27017';\n\tconst mongoConnectString = 'mongodb://localhost:27017/api001';\n\t------------------------------\n- connect with Mongoose driver instead of MongoDB driver\n\t------------------------------\n\t// const client = new MongoClient(mongoConnectString);\n\tmongoose.connect(mongoConnectString);\n\t------------------------------\n- add schema and model (note \"users100\" to specify exact name of collection):\n\t--------------------------------\n\tconst userSchema = mongoose.Schema({\n\t\tname: String,\n\t\tusername: String,\n\t\temail: String\n\t});\n\tconst UserModel = mongoose.model(\"User\", userSchema, \"users100\");\n\t--------------------------------\n- remove the execMongo function:\n\t--------------------------\n\t// const execMongo = async (done) => {\n\t// \tawait client.connect();\n\t// \tconst db = client.db('api001');\n\t// \tdone(db);\n\t// }\n\t--------------------------\n- refactor code for **GET '/'** endpoint\n\t-------------------------------\n\t// execMongo(async (db) => {\n\t// \tconst users = await db.collection('users100').find()\n\t// \t\t.project({\n\t// \t\t\tname: 1,\n\t// \t\t\tusername: 1,\n\t// \t\t\temail: 1\n\t// \t\t}).toArray();\n\t// \tres.json(users);\n\t// });\n\tconst users = await UserModel.find({}).select('name username email');\n\tres.json(users);\n\t-------------------------------\n\t- be sure to make the endpoint function `async`\n- refactor code for **DELETE '/deleteuser/:id'** endpoint\n\t---------------------------------\n\t// execMongo(async (db) => {\n\t// \tconst deleteResult = await db.collection('users100').deleteOne({ _id: new mongodb.ObjectId(id) });\n\t// \tres.json({\n\t// \t\tresult: deleteResult\n\t// \t});\n\t// });\n\tconst deleteResult = await UserModel.deleteOne({ _id: new mongoose.Types.ObjectId(id) });\n\tres.json({\n\t\tresult: deleteResult\n\t})\n\t---------------------------------\n\t- be sure to make the endpoint function `async`\n- refactor code for **POST '/insertuser'** endpoint\n\t-------------------------------------------\n\t// execMongo(async (db) => {\n\t// \tconst insertResult = await db.collection('users100').insertOne(user);\n\t// \tres.json({\n\t// \t\tresult: insertResult\n\t// \t});\n\t// });\n\tconst user1 = new UserModel(user);\n\tuser1.save(err => {\n\t\tif (err) {\n\t\t\tres.status(500).send({ err })\n\t\t} else {\n\t\t\tres.json({\n\t\t\t\tuserAdded: user1\n\t\t\t});\n\t\t}\n\t});\n\t-------------------------------------------\n\t- note that you don't need to make this endpoint function `async`\n- refactor code for **PATCH'/edituseremail'** endpoint\n\t----------------------------------------------\n\t// execMongo(async (db) => {\n\t// \tconst updateResult = await db.collection('users100').updateOne({ _id: new mongodb.ObjectId(id) }, { $set: { email } });\n\t// \tres.json({\n\t// \t\tresult: updateResult\n\t// \t});\n\t// });\n\tconst updateResult = await UserModel.findOneAndUpdate({ _id: new mongoose.Types.ObjectId(id) }, { $set: { email } }, { new: true });\n\tres.json({\n\t\tresult: updateResult\n\t});\n\t----------------------------------------------\n\t- be sure to make the endpoint function `async`\n\t- note the `{ new: true }` to get the updated object","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-21 20:17:17","systemWhoCreated":"systemUnknown"},{"id":439,"category":"Mongoose","title":"How to structure a Node/Express/EJS/Mongoose site with the MVC pattern","body":"- the plan\n\t- This project builds a mock conference site which has three pages: \n\t\t- Welcome\n\t\t- Speakers\n\t\t- Presentations\n\t- Each page will have a route which loads a **Controller** which will load a Mongoose **Model** which deliver data to the EJS **View**, hence will encorporate an **MVC** pattern.\n\t- if anything is unclear, [the code to the finished site is here](https://github.com/edwardtanguay/nodeExpressEjsMongooseMvc)\n- set up basics\n\t- `git init`\n\t\t- `.gitignore`\n\t- `npm init -y`\n\t\t- `\"type\": \"module\",`\n\t- `src/app.js`\n\t- `\"start\": \"npx nodemon src/app.js\"`\n- set up EJS site with Welcome page\n\t- `npm i express ejs`\n\t- import everything\n\t\t-------------------------------\n\t\timport express from 'express';\n\t\timport path from 'path';\n\t\t-------------------------------\n\t- define all variables\n\t\t---------------------------------\n\t\tconst app = express();\n\t\tconst __dirname = path.resolve(path.dirname(''));\n\t\tconst port = 3044;\n\t\t---------------------------------\n\t- set up EJS\n\t\t- define view engine and view directory\n\t\t\t------------------------------\n\t\t\tapp.set('view engine', 'ejs');\n\t\t\tapp.set('views', path.join(__dirname, './public/views'));\n\t\t\t------------------------------\n\t\t- make: `public/views/index.ejs`\n\t\t\t---------------------------------\n\t\t\t<h2>\n\t\t\t\t<%=pageTitle%>\n\t\t\t</h2>\n\t\t\t<p>Welcome to the Berlin Mongoose Conference.</p>\n\t\t\t---------------------------------\n\t- set up welcome page route\n\t\t----------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.render('index', {\n\t\t\t\tpageTitle: \"Welcome\"\n\t\t\t});\n\t\t});\n\t\t----------------------------\n\t- listen to the port\n\t\t----------------------------\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Now listening on port http://localhost:${port}`);\n\t\t})\n\t\t----------------------------\n\t- check site in browser\n\t\t- `npm start`\n\t\t- click link in terminal: \"Now listening on port...\"\n\t- you should see this:##seethisejsmongooseok\n- add header and footer for EJS pages\n\t- `public/views/_header.ejs`\n\t\t------------------------------------\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Berlin Mongoose Conference</title>\n\t\t</head>\n\t\t<body>\n\t\t------------------------------------\n\t- `public/views/_footer.ejs`\n\t\t------------------------------------\n\t\t</body>\n\t\t</html>\n\t\t------------------------------------\n\t- add to `index.ejs`\n\t\t-----------------------------------\n\t\t<%- include('_header.ejs')%>\n\t\t<%- include('_footer.ejs')%>\n\t\t-----------------------------------\n\t- reload page and press **CTRL-U** to see source HTML of page\n\t\t- note that header and footer are included:##thesourceokandsee\n- set up Sass\n\t- make `public/css/main.scss`\n\t\t-----------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #eee;\n\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\tfont-size: 1.5rem;\n\t\t\tpadding: 20px;\n\t\t}\n\t\t-----------------------------\n\t- install VSCode extension [Live Sass Compiler](https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass)\n\t- while on the extension intro page, click on \"Watch Sass\"##onthesassclick\n\t\t- the text will then change to \"Watching...\"\n\t- see that `public/css/main.css` was created\n\t- in `_header.ejs`, add:\n\t\t- `\t<link rel=\"stylesheet\" href=\"../css/main.css\">`\n\t- add middleware to display static files:\n\t\t--------------------------------------\n\t\tconst staticDirectory = path.join(__dirname, './public');\n\t\tapp.use(express.static(staticDirectory));\n\t\t--------------------------------------\n\t- site will now look like this:##andtheblackthreeok\n- add other pages and menu\n\t- `speakers.ejs`\n\t\t-------------------------------\n\t\t<%- include('_header.ejs')%>\n\t\t<h2>\n\t\t\t<%=pageTitle%>\n\t\t</h2>\n\t\t<p>This page displays all the speakers at the conference.</p>\n\t\t<%- include('_footer.ejs')%>\n\t\t-------------------------------\n\t- `presentations.ejs`\n\t\t-------------------------------\n\t\t<%- include('_header.ejs')%>\n\t\t<h2>\n\t\t\t<%=pageTitle%>\n\t\t</h2>\n\t\t<p>This page displays all the presentations at the conference.</p>\n\t\t<%- include('_footer.ejs')%>\n\t\t-------------------------------\n\t- add nav HTML to header file:\n\t\t---------------------------------------------\n\t\t<nav>\n\t\t\t<div>\n\t\t\t\t<a href=\"/\">Welcome</a> &bull; <a href=\"/speakers\">Speakers</a> &bull; <a\n\t\t\t\t   href=\"/presentations\">Presentations</a>\n\t\t\t</div>\n\t\t</nav>\n\t\t---------------------------------------------\n\t- add nav styling to Sass file:\n\t\t-------------------------------------\n\t\tnav {\n\t\t\tbackground-color: #444;\n\t\t\tpadding: 10px;\n\t\t\tfont-size: 1.3rem;\n\t\t\ta {\n\t\t\t\tcolor: #bbb;\n\t\t\t\ttext-decoration: none;\n\t\t\t\t&.active {\n\t\t\t\t\tcolor: #ddd;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\ttext-shadow: 2px 2px 2px #444;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolor: #666;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t}\n\t\t-------------------------------------\n\t- add routes for both new pages:\n\t\t------------------------------------------\n\t\tapp.get('/speakers', (req, res) => {\n\t\t\tres.render('speakers', {\n\t\t\t\tpageTitle: \"Speakers\"\n\t\t\t});\n\t\t});\n\n\t\tapp.get('/presentations', (req, res) => {\n\t\t\tres.render('presentations', {\n\t\t\t\tpageTitle: \"Presentations\"\n\t\t\t});\n\t\t});\n\t\t------------------------------------------\n\t- menu links should now be clickable and display the appropriate pgae\n\t- the site should now look like this##thesitespeakpresenow\n- import data into your local MongoDB database\n\t- download the files [conferencePresentations.json](https://raw.githubusercontent.com/edwardtanguay/nodeExpressEjsMongooseMvc/master/dev/import/conferencePresentations.json) \n\t- download the files [conferenceSpeakers.json](https://raw.githubusercontent.com/edwardtanguay/nodeExpressEjsMongooseMvc/master/dev/import/conferenceSpeakers.json) \n\t- import it into your local MongoDB database\n\t\t- `mongoimport --db mongoConference --collection presentations --type json --file conferencePresentations.json --jsonArray`\n\t\t- `mongoimport --db mongoConference --collection speakers --type json --file conferenceSpeakers.json --jsonArray`\n- add Mongoose and get display data on speakers page in non-MVC fashion\n\t- `npm i mongoose`\n\t- `import mongoose from 'mongoose`;\n\t- add connection/schema/model to beginning\n\t\t---------------------------------------\n\t\tmongoose.connect('mongodb://localhost:27017/mongoConference');\n\t\tconst speakerSchema = mongoose.Schema({\n\t\t\tname: String,\n\t\t\tcountry: String\n\t\t});\n\t\tconst SpeakerModel = mongoose.model(\"Speaker\", speakerSchema);\n\t\t---------------------------------------\n\t- get speakers from database in speakers endroute\n\t\t------------------------------\n\t\t(async () => {\n\t\t\tconst speakers = await SpeakerModel.find({});\n\t\t\tres.render('speakers', {\n\t\t\t\tpageTitle: \"Speakers\",\n\t\t\t\tspeakers\n\t\t\t});\n\t\t})();\n\t\t------------------------------\n\t- display on speakers page\n\t\t----------------------------------\n\t\t<ul>\n\t\t\t<% speakers.forEach(speaker => { %>\n\t\t\t\t<li><%=speaker.name%></li>\n\t\t\t<% }); %>\n\t\t</ul>\n\t\t----------------------------------\n- refactor into models and controllers\n\t- see [finished models](https://github.com/edwardtanguay/nodeExpressEjsMongooseMvc/tree/master/src/models)\n\t- see [finished controllers](https://github.com/edwardtanguay/nodeExpressEjsMongooseMvc/tree/master/src/controllers)\n\t- also see changes to use these controllers in [app.js](https://github.com/edwardtanguay/nodeExpressEjsMongooseMvc/blob/master/src/app.js)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-22 22:01:42","systemWhoCreated":"systemUnknown"},{"id":440,"category":"MongoDB","title":"Setup M(V)C API for MongoDB collection with subdocument structure","body":"- the plan is to build an API that uses Mongoose and the MVC pattern for both simple and nested documents\n\t- see [finished code here](https://github.com/edwardtanguay/apiMongooseSimpleAndNested)\n- set up basics\n\t- `git init`\n\t\t- `.gitignore`\n\t- `npm init -y`\n\t\t- `\"type\": \"module\",`\n\t- `server.js`\n\t- `\"start\": \"npx nodemon server.js\"`\n- set up simple documents first\n\t- import data to local MongoDB\n\t\t- use [this JSON file](https://raw.githubusercontent.com/edwardtanguay/apiMongooseSimpleAndNested/master/dev/simpleusers.json)\n\t- `models/simpleUsersModel.js`\n\t\t---------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\tconst simpleUsersSchema = mongoose.Schema({\n\t\t\tfirstName: String,\n\t\t\tlastName: String\n\t\t},\n\t\t{ versionKey: false});\n\n\t\tconst SimpleUsersModel = mongoose.model(\"simpleuser\", simpleUsersSchema);\n\n\t\texport default SimpleUsersModel;\n\t\t---------------------------------\n\t- `controllers/simpleUsersController.js`\n\t\t----------------------------------------\n\t\timport SimpleUsersModel from '../models/simpleUsersModel.js';\n\n\t\texport const getAllSimpleUsers = async () => {\n\t\t\treturn await SimpleUsersModel.find({});\n\t\t}\n\n\t\texport const createSimpleUser = async (simpleUserObj) => {\n\t\t\tconst simpleUser = new SimpleUsersModel(simpleUserObj);\n\t\t\treturn simpleUser.save();\n\t\t}\n\n\t\texport const deleteSimpleUser = async (id) => {\n\t\t\treturn await SimpleUsersModel.findByIdAndRemove(id);\n\t\t}\n\n\t\texport const updateSimpleUser = async (id, updateFields) => {\n\t\t\treturn await SimpleUsersModel.findByIdAndUpdate(id, updateFields, {new: true});\n\t\t}\n\t\t----------------------------------------\n\t- install packages\n\t\t- `npm i express mongoose`\n\t- build `server.js` basics\n\t\t- import and setup API\n\t\t\t---------------------------------------------\n\t\t\timport express from 'express';\n\t\t\timport * as SimpleUsersController from './controllers/simpleUsersController.js';\n\t\t\timport mongoose from 'mongoose';\n\n\t\t\tmongoose.connect('mongodb://localhost:27017/test');\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3033;\n\t\t\t---------------------------------------------\n\t\t- don't forget to add middleware in order for clients to send JSON to API\n\t\t\t----------------------------\n\t\t\tapp.use(express.json());\n\t\t\t----------------------------\n\t\t- add listener\n\t\t\t----------------------------------\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`API is now listening on port ${port}`);\n\t\t\t});\n\t\t\t----------------------------------\n\t\t- test with `npm start`##shouldstartapiok\n- build CRUD functionality for simple documents\n\t- create `test.rest` base code\n\t\t------------------------------------\n\t\t@url = http://localhost:3034\n\t\t------------------------------------\n\t- READ code\n\t\t-----------------------------------------\n\t\t// simple users: READ\n\t\tapp.get('/simpleUsers', async (req, res) => {\n\t\t\tres.json({\n\t\t\t\tsimpleUsers: await SimpleUsersController.getAllSimpleUsers()\n\t\t\t});\n\t\t});\n\t\t-----------------------------------------\n\t- READ test\n\t\t----------------------------------------\n\t\t### simple users READ \n\t\tGET {{url}}/simpleUsers\n\t\tcontent-type: application/json\n\t\t----------------------------------------\n\t- CREATE code\n\t\t-----------------------------------------\n\t\t// simple users: CREATE\n\t\tapp.post('/simpleUsers/create', async (req, res) => {\n\t\t\tconst simpleUserObj = req.body;\n\t\t\tconst result = await SimpleUsersController.createSimpleUser(simpleUserObj);\n\t\t\tres.json({\n\t\t\t\tresult\n\t\t\t});\n\t\t});\n\t\t-----------------------------------------\n\t- CREATE test\n\t\t----------------------------------------\n\t\t### simple users CREATE \n\t\tPOST {{url}}/simpleUsers/create\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"firstName\": \"Andre\",\n\t\t\t\"lastName\": \"Hackerkrug\"\n\t\t}\n\t\t----------------------------------------\n\t- UPDATE code\n\t\t----------------------------------\n\t\t// simple users: UPDATE\n\t\tapp.patch('/simpleUsers/update/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst updateFields = req.body\n\t\t\tconst result = await SimpleUsersController.updateSimpleUser(id, updateFields);\n\t\t\tres.json({\n\t\t\t\tresult\n\t\t\t});\n\t\t});\n\t\t----------------------------------\n\t- UPDATE test\n\t\t----------------------------------\n\t\t### simple users UPDATE \n\t\tPATCH {{url}}/simpleUsers/update/619d83eed2fb430e6e4c376a\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"lastName\": \"Lastname-Changed\"\n\t\t}\n\t\t----------------------------------\n\t- DELETE code\n\t\t----------------------------------\n\t\t// simple users: DELETE\n\t\tapp.delete('/simpleUsers/delete/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst result = await SimpleUsersController.deleteSimpleUser(id);\n\t\t\tres.json({\n\t\t\t\tresult\n\t\t\t});\n\t\t});\n\t\t----------------------------------\n\t- DELETE test\n\t\t----------------------------------\n\t\t### simple users DELETE \n\t\tDELETE {{url}}/simpleUsers/delete/619d83eed2fb430e6e4c376a\n\t\tcontent-type: application/json\n\t\t----------------------------------\n- import collection with subdocuments\n\t- import data to local MongoDB\n\t\t- use [this JSON file](https://raw.githubusercontent.com/edwardtanguay/apiMongooseSimpleAndNested/master/dev/nestedusers.json)\n- add model and controller for subdocuments\n\t- `nestedUsersController.js`\n\t\t--------------------------------------\n\t\timport NestedUsersModel from '../models/nestedUsersModel.js';\n\n\t\texport const getAllNestedUsers = async () => {\n\t\t\treturn await NestedUsersModel.find({});\n\t\t}\n\n\t\texport const getAllNestedUsersEmails = async () => {\n\t\t\treturn await NestedUsersModel.find({}, {email: 1});\n\t\t}\n\n\t\texport const getAccountHistoryOfNestedUser = async (id) => {\n\t\t\treturn await NestedUsersModel.findById(\n\t\t\t\tid, {\n\t\t\t\taccountHistory: 1\n\t\t\t});\n\t\t}\n\n\t\texport const createNestedUser = async (nestedUserObj, callback) => {\n\t\t\tconst nestedUser = new NestedUsersModel(nestedUserObj);\n\t\t\tconst result = nestedUser.save((err, docs) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(docs);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\texport const deleteNestedUser = async (id) => {\n\t\t\treturn await NestedUsersModel.findByIdAndRemove(id);\n\t\t}\n\n\t\texport const updateNestedUser = async (id, updateFields) => {\n\t\t\treturn await NestedUsersModel.findByIdAndUpdate(id, updateFields, { new: true });\n\t\t}\n\t\t--------------------------------------\n\t- `nestedUsersModel.js`\n\t\t-----------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\tconst nestedUsersSchema = mongoose.Schema({\n\t\t\tname: { type: String, required: true },\n\t\t\tusername: String,\n\t\t\temail: String,\n\t\t\taddress: {\n\t\t\t\tstreet: String,\n\t\t\t\tsuite: String,\n\t\t\t\tcity: String,\n\t\t\t\tzipcode: String\n\t\t\t},\n\t\t\tphone: String,\n\t\t\twebsite: String,\n\t\t\tcompany: String,\n\t\t\taccountHistory: [{\n\t\t\t\tamount: Number,\n\t\t\t\tdate: Date,\n\t\t\t\tpurchase: String\n\t\t\t}]\n\t\t},\n\t\t\t{ versionKey: false });\n\n\t\tconst NestedUsersModel = mongoose.model(\"nesteduser\", nestedUsersSchema);\n\n\t\texport default NestedUsersModel;\n\t\t-----------------------------------\n- import subdocument controller\n\t--------------------------------------\n\timport * as NestedUsersController from './controllers/nestedUsersController.js';\n\t--------------------------------------\n- build CRUD functionality for subdocuments\n\t- READ ALL code\n\t\t--------------------------------------\n\t\t// nested users: READ\n\t\tapp.get('/nestedUsers', async (req, res) => {\n\t\t\tres.json({\n\t\t\t\tnestedUsers: await NestedUsersController.getAllNestedUsers()\n\t\t\t});\n\t\t});\n\t\t--------------------------------------\n\t- READ ALL test\n\t\t-----------------------------\n\t\t### nested users READ \n\t\tGET {{url}}/nestedUsers\n\t\tcontent-type: application/json\n\t\t-----------------------------\n\t- READ ALL EMAILS code\n\t\t------------------------------\n\t\t// nested users: READ\n\t\tapp.get('/nestedUsers/emails', async (req, res) => {\n\t\t\tres.json({\n\t\t\t\tnestedUsers: await NestedUsersController.getAllNestedUsersEmails()\n\t\t\t});\n\t\t});\n\t\t------------------------------\n\t- READ ALL EMAILS test\n\t\t-----------------------------------\n\t\t### nested users READ \n\t\tGET {{url}}/nestedUsers/emails\n\t\tcontent-type: application/json\n\t\t-----------------------------------\n\t- READ ACCOUNT HISTORY code\n\t\t--------------------------------\n\t\t// nested users: READ\n\t\tapp.get('/nestedUsers/accountHistory/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconsole.log(id);\n\t\t\tres.json({\n\t\t\t\tnestedUsers: await NestedUsersController.getAccountHistoryOfNestedUser(id)\n\t\t\t});\n\t\t});\n\t\t--------------------------------\n\t- READ ACCOUNT HISTORY test\n\t\t--------------------------------\n\t\t### nested users READ \n\t\tGET {{url}}/nestedUsers/accountHistory/619d7bb7017e9300920ffbd7\n\t\tcontent-type: application/json\n\t\t--------------------------------\n\t- CREATE code\n\t\t--------------------------------\n\t\t// nested users: CREATE\n\t\tapp.post('/nestedUsers/create', async (req, res) => {\n\t\t\tconst nestedUserObj = req.body;\n\t\t\tawait NestedUsersController.createNestedUser(nestedUserObj, (result) => {\n\t\t\t\tres.json({\n\t\t\t\t\tresult\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t--------------------------------\n\t- CREATE test\n\t\t--------------------------------\n\t\t### nested users CREATE \n\t\tPOST {{url}}/nestedUsers/create\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"name\" : \"Stephanie Added\",\n\t\t\t\"username\" : \"Brandyn_Reilly59\",\n\t\t\t\"email\" : \"Tyshawn.Abshire@yahoo.com\",\n\t\t\t\"address\" : {\n\t\t\t\t\"street\" : \"Hill Parks\",\n\t\t\t\t\"suite\" : \"Suite 582\",\n\t\t\t\t\"city\" : \"Garfieldmouth\",\n\t\t\t\t\"zipcode\" : \"21401-7727\"\n\t\t\t},\n\t\t\t\"phone\" : \"502-899-9440 x015\",\n\t\t\t\"website\" : \"jessyca.org\",\n\t\t\t\"company\" : \"Kshlerin, Wiza and Ferry\",\n\t\t\t\"accountHistory\" : [\n\t\t\t\t{\n\t\t\t\t\t\"amount\" : 333,\n\t\t\t\t\t\"date\" : \"2021-11-15T16:52:26.505+01:00\",\n\t\t\t\t\t\"purchase\" : \"Fantastic Wooden Table\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"amount\" : 665.01,\n\t\t\t\t\t\"date\" : \"2021-11-15T16:52:26.505+01:00\",\n\t\t\t\t\t\"purchase\" : \"Tasty Soft Towels\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"amount\" : 205.68,\n\t\t\t\t\t\"date\" : \"2021-11-15T16:52:26.505+01:00\",\n\t\t\t\t\t\"purchase\" : \"Small Concrete Chair\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t--------------------------------\n\t- UPDATE code\n\t\t--------------------------------\n\t\t// nested users: UPDATE\n\t\tapp.patch('/nestedUsers/update/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst updateFields = req.body\n\t\t\tconst result = await NestedUsersController.updateNestedUser(id, updateFields);\n\t\t\tres.json({\n\t\t\t\tresult\n\t\t\t});\n\t\t});\n\t\t--------------------------------\n\t- UPDATE test\n\t\t--------------------------------\n\t\t### nested users UPDATE \n\t\tPATCH {{url}}/nestedUsers/update/619d7bb7017e9300920ffbdb\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"name\": \"Stephanie Changed\",\n\t\t\t\"address.street\": \"changed street\",\n\t\t\t\"accountHistory.2.amount\": 999\n\t\t}\n\t\t--------------------------------\n\t- DELETE code\n\t\t--------------------------------\n\t\t// nested users: DELETE\n\t\tapp.post('/nestedUsers/delete/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst result = await NestedUsersController.deleteNestedUser(id);\n\t\t\tres.json({\n\t\t\t\tresult\n\t\t\t});\n\t\t});\n\t\t--------------------------------\n\t- DELETE test\n\t\t--------------------------------\n\t\t### nested users DELETE \n\t\tPOST {{url}}/nestedUsers/delete/619d9778343cfbcb93976181\n\t\tcontent-type: application/json\n\t\t--------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-24 07:01:14","systemWhoCreated":"systemUnknown"},{"id":441,"category":"MongoDB","title":"Create mock MongoDB data collections with NoSQLBooster","body":"- [install](https://nosqlbooster.com/downloads) and open NoSQLBooster\n- create a JSON file `employees.json`\n\t------------------------------\n\t[\n\t\t{\t\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"lastName\": \"Smith\",\n\t\t\t\"files\": {\n\t\t\t\t\"contract\": \"contract_js.doc\",\n\t\t\t\t\"cv\": \"cv_js.pdf\"\n\t\t\t}\n\t\t}\n\t]\n\t------------------------------\n- import\n\t- `mongoimport --db test --collection employees --type json --file employees.json --jsonArray`\n- open database collection\n- click on **DataGen** button\n- select collection\n- choose types, e.g. replace lorem with file names##choosetypesfiles\n- change **doc count** to 5 for 5000\n- click **Go**\n- click on run\n- view your 5000 mock documents in your collection","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-24 07:01:14","systemWhoCreated":"systemUnknown"},{"id":442,"category":"Mongoose","title":"Create Node/Express/EJS/Mongo site with Mongoose subdocument relationships","body":"- these instructions show you how to create a book store that displays books, the information of which comes from two collections in the MongoDB database\n\t- the Mongoose ODM (Object Document Mapper) is used to connect (with `ref` and `populate()`) the two schemas for the collections **Books** and **Persons**, much as `JOIN` does in an SQL database between tables\n\t- the collection relationships are such:##collrelatsuch\n\t- this site also uses the MVC pattern (Model-View-Controller) to organize how data is retrieved, e.g. a **Controller** queries **Models** for data, and then passes this data to the (EJS) **Views**\n\t- the site only consists of one page (`/src/app.js`)\n\t- if anything is unclear, see the [code of the finished site](https://github.com/edwardtanguay/ejsBookStoreMongoosePopulateRelations)\n- the finished site will look like this:##techbookfinishsitei\n- set up basics\n\t- `git init`\n\t\t- `.gitignore`\n\t- `npm init -y`\n\t\t- `\"type\": \"module\",`\n\t- `src/app.js`\n\t- `\"start\": \"npx nodemon src/app.js\"`\n- install\n\t- `npm i express ejs mongoose`\n- import\n\t-----------------------------\n\timport express from 'express';\n\timport path from 'path';\n\t-----------------------------\n- Express/EJS plumbing\n\t-----------------------------\n\tconst app = express();\n\tconst __dirname = path.resolve(path.dirname(''));\n\tconst port = 3047;\n\tconst staticDirectory = path.join(__dirname, './public');\n\n\tapp.set('view engine', 'ejs');\n\tapp.set('views', path.join(__dirname, './src/views'));\n\tapp.use(express.static(staticDirectory));\n\t-----------------------------\n- listen to port\n\t----------------------------------\n\tapp.listen(port, () => {\n\t\tconsole.log(`Now listening on port http://localhost:${port}`);\n\t});\n\t----------------------------------\n- test in terminal\n\t- `npm start`\n- add endpoint\n\t------------------------------\n\tapp.get('/', async (req, res) => {\n\t\tres.send('testing');\n\t});\n\t------------------------------\n- test in browser\n\t- `npm start`\n- create EJS page: `src/views/index.ejs`\n\t--------------------------------\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>Tech Bookstore</title>\n\t</head>\n\t<body>\n\t\t<h1>Tech Bookstore</h1>\n\t</body>\n\t</html>\n\t--------------------------------\n- update endpoint to serve the EJS page\n\t------------------------\n\tres.render('index', {\n\t\tpageTitle: \"Tech Bookstore\"\n\t});\n\t------------------------\n- test in browser##thetechbobbob\n- set up Mongoose MVC\n\t- make a `dev` folder and create [these JSON files](https://github.com/edwardtanguay/ejsBookStoreMongoosePopulateRelations/tree/master/dev/import) in it\n\t- create database, collections and import data\n\t\t- `mongoimport --db bookstore --collection books --type json --file mongo.books.json --jsonArray`\n\t\t- `mongoimport --db bookstore --collection persons --type json --file mongo.persons.json --jsonArray`\n\t- connect to database in `app.js`:\n\t\t- `import mongoose from 'mongoose';`\n\t\t- `mongoose.connect('mongodb://localhost:27017/bookstore');`\n- create models\n\t- `src/models/persons.js`\n\t\t-----------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\tconst Schema = mongoose.Schema;\n\n\t\tconst personsSchema = mongoose.Schema({\n\t\t\tfirstName: String,\n\t\t\tlastName: String,\n\t\t\temail: String\n\t\t}, { collection: \"persons\" });\n\t\tconst PersonsModel = mongoose.model(\"Person\", personsSchema);\n\n\t\texport default PersonsModel;\n\t\t-----------------------------------\n\t- `src/models/books.js`\n\t\t-----------------------------------\n\t\timport mongoose from 'mongoose';\n\t\timport PersonsModel from '../models/persons.js';\n\n\t\tconst Schema = mongoose.Schema;\n\n\t\tconst booksSchema = mongoose.Schema({\n\t\t\ttitle: String,\n\t\t\tauthor: { type: Schema.ObjectId, ref: 'Person' },\n\t\t\turl: String,\n\t\t\tcustomers: [{ type: Schema.ObjectId, ref: 'Person' }],\n\t\t\tisbn: String\n\t\t}, { collection: \"books\" });\n\t\tconst BooksModel = mongoose.model(\"Book\", booksSchema);\n\n\t\texport default BooksModel;\n\t\t-----------------------------------\n- create controller \n\t- note there is only one: books\n\t- `src/controllers/books.js`\n\t\t-------------------------------\n\t\timport BooksModel from '../models/books.js';\n\n\t\texport const getAllBooks = async () => {\n\t\t\tconst books = await BooksModel.find({})\n\t\t\t\t.populate(\"author\")\n\t\t\t\t.populate(\"customers\");\n\t\t\treturn books;\n\t\t}\n\t\t-------------------------------\n- load data in endroute and send to view\n\t- import BooksController\n\t\t----------------------------------\n\t\timport * as BooksController from './controllers/books.js';\n\t\t----------------------------------\n\t- update endroute\n\t\t---------------------------------\n\t\tconst books = await BooksController.getAllBooks();\n\t\tres.render('index', {\n\t\t\tpageTitle: \"Tech Bookstore\",\n\t\t\tbooks\n\t\t});\n\t\t---------------------------------\n- test if books are in view\n\t----------------------------------\n\t<p>there are <%=books.length%> books</p>\n\t----------------------------------\n\t- you should see this:##thef444test\n\t- note that in the books model file, you must import `PersonsModel` even though VSCode indicates that it's not used\n\t\t- test this by commenting the import line out and getting an erro\n\t\t- uncomment the line and it will work again\n\t\t- the persons model is being used by the booksSchema in `ref: 'Person'`\n- add the EJS code to display the books to `index.ejs`\n\t---------------------------------------------\n\t<% books.forEach(book=> { %>\n\t<div class=\"book\">\n\t\t<a href=\"<%=book.url%>\" target=\"_blank\"> <img src=\"images/<%=book.isbn%>.jpg\"\n\t\t\t alt=\"\"></a>\n\t\t<div class=\"info\">\n\t\t\t<div class=\"title\">\n\t\t\t\t<%=book.title%>\n\t\t\t</div>\n\t\t\t<div class=\"author\">by <span class=\"main\">\n\t\t\t\t\t<%=book.author.firstName%>\n\t\t\t\t\t\t<%=book.author.lastName%>\n\t\t\t\t</span></div>\n\t\t\t<ul class=\"customers\">\n\t\t\t<div class=\"header\">People who have bought this book:</div>\n\t\t\t\t<% book.customers.forEach(customer=> { %>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<%=customer.firstName%>\n\t\t\t\t\t\t\t<%=customer.lastName%>\n\t\t\t\t<span class=\"email\">(<%=customer.email%>)</span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<% })%>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n\t<% });\n\t   %>\n\t---------------------------------------------\n- test in browser\n\t- you should have raw HTML of data from your database:##rawhtmlshouldlook\n- add the images\n\t- download [these book images](https://github.com/edwardtanguay/ejsBookStoreMongoosePopulateRelations/tree/master/public/images) into `public/images`\n- test again in browser\n\t- you should see the graphics in your raw HTML:##andwitihgraphraw\n- add styling\n\t- create `public/css/main.scss`\n\t\t----------------------------------------\n\t\tbody {\n\t\t\tbackground-color: rgb(37, 3, 3);\n\t\t\tcolor: rgb(185, 183, 153);\n\t\t\tfont-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\n\t\t\tfont-size: 1.5rem;\n\t\t\tpadding: 20px;\n\n\t\t\tdiv.book {\n\t\t\t\tbackground-color: rgb(71, 22, 22);\n\t\t\t\tmargin: 0 0 20px 0;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tpadding: 20px;\n\t\t\t\tdisplay: flex;\n\t\t\t\timg {\n\t\t\t\t\twidth: 120px;\n\t\t\t\t\tbox-shadow: 3px 3px 13px 3px #000000;\n\t\t\t\t}\n\t\t\t\tdiv.info {\n\t\t\t\t\tmargin: 0 0 0 25px;\n\t\t\t\t}\n\t\t\t\tdiv.title {\n\t\t\t\t\tfont-size: 1.8rem;\n\t\t\t\t}\n\t\t\t\tdiv.author {\n\t\t\t\t\t.main {\n\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\tcolor: rgb(235, 235, 154);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tul.customers {\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\tfont-size: 0.9rem;\n\t\t\t\t\tli {\n\t\t\t\t\t\tmargin: 0 0 0 -15px;\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t.email {\n\t\t\t\t\t\t\tcolor: #777;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdiv.header {\n\t\t\t\t\tmargin: 0 0 4px -39px;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t----------------------------------------\n\t- in `index.ejs` add the link to the style sheet (to `css/main.css`, not `css/main.scss`!)\n\t\t- `<link rel=\"stylesheet\" href=\"css/main.css\">`\n\t- implement automatic sass-to-css transpiling\n\t\t- install the VSCode extension [Live Sass Compiler](https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass)\n\t\t- while on the extension intro page, click on \"Watch Sass\"##onthesassclick\n\t\t\t- the text will then change to \"Watching...\"\n- test in browser, your site should look like this:##finalsitelooklikk\n- understand the relationship between the books and persons models:\n\t- in the database, find the person **Josefine Yasper**\n\t- change her name to **Jasper**##inthedatjchang\n\t- reload the page in the browser\n\t- note that both customers were changed to **Josefine Jasper**##tojasperworks\n- **Challenge**: \n\t- add an author property on each comment\n\t- each comment field will contain the id of a person in the persons collection\n\t- next to each comment, display the name of the comment's author\n\t- solution will look like this:##doneWithCommentsBooksk\n\t- here is [one solution](https://github.com/edwardtanguay/ejsBookStoreMongoosePopulateRelations-1)\n\t- it uses **Mongoose deep population** and in shown in the [BooksController](https://github.com/edwardtanguay/ejsBookStoreMongoosePopulateRelations-1/blob/master/src/controllers/books.js):\n\t\t----------------------------------------------\n\t\timport BooksModel from '../models/books.js';\n\n\t\texport const getAllBooks = async () => {\n\t\t\tconst books = await BooksModel.find({})\n\t\t\t\t.populate(\"author\")\n\t\t\t\t.populate(\"customers\")\n\t\t\t\t.populate([\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: \"comments\",\n\t\t\t\t\t\tmodel: \"Comment\",\n\t\t\t\t\t\tselect: \"author message datetime\",\n\t\t\t\t\t\tpopulate: {\n\t\t\t\t\t\t\tpath: \"author\",\n\t\t\t\t\t\t\tmodel: \"Person\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\treturn books;\n\t\t}\n\t\t----------------------------------------------\n- this site can be viewed running on [Heroku](https://mongoose-deep-population.herokuapp.com/)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-25 02:39:59","systemWhoCreated":"systemUnknown"},{"id":443,"category":"React","title":"Create a React form with validation","body":"- goal\n\t- the goal of these instructions is to go through the steps of creating a form in create-react-app which\n\t\t- validates data\n\t\t- informs the user of proper validation\n\t\t- does not allow the user to send data to the backend before all data is validated\n\t- if anything is unclear\n\t\t- you can look at the [final code here](https://github.com/edwardtanguay/form_state)\n\t\t- you can view an [online version of this app running at Heroku](https://example-form-state-validation.herokuapp.com/)##thebadformiii\n- setup create-react-app\n\t- use `npx create-react-app form-validation`\n\t- or use a minified create-react-app e.g.\n\t\t- make directory: `form-validation`\n\t\t- copy files from minified create-react-app e.g. [edwardtanguay/blankcra](https://github.com/edwardtanguay/blankcra)\n\t\t- `npm i`\n\t- `npm start`##thecrahello\n- build HTML form\n\t------------------------------------\n\t<form>\n\t\t<fieldset>\n\t\t\t<legend>Order Form</legend>\n\t\t\t<div className=\"row\">\n\t\t\t\t<label htmlFor=\"name\">Name</label>\n\t\t\t\t<input type=\"text\" id=\"name\"/> \n\t\t\t</div>\n\t\t\t<div className=\"row\">\n\t\t\t\t<label htmlFor=\"phone\">Phone</label>\n\t\t\t\t<input type=\"text\" id=\"phone\"/> \n\t\t\t</div>\n\t\t\t<div className=\"buttonRow\">\n\t\t\t\t<button>Register</button>\n\t\t\t</div>\n\t\t</fieldset>\n\t</form>\n\t------------------------------------\n- add styling\n\t- main form styles\n\t\t-------------------------\n\t\tform {\n\t\t\twidth: 600px;\n\t\t\tfieldset {\n\t\t\t\tborder: 5px solid #ccc;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 20px;\n\n\t\t\t\t.row {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-content: start;\n\t\t\t\t\tpadding: 5px;\n\t\t\t\t\tlabel {\n\t\t\t\t\t\t&;after {\n\t\t\t\t\t\t\tcontent: \":\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\twidth: 90px;\n\t\t\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\t\t}\n\t\t\t\t\tinput {\n\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\twidth: 300px;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.invalid input {\n\t\t\t\t\tcolor: red;\n\t\t\t\t}\n\t\t\t\t.note {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tmargin: 0 0 20px 97px;\n\t\t\t\t}\n\t\t\t\t.buttonRow {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: right;\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\tpadding: 5px;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpre {\n\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\tcolor: brown;\n\t\t\tmargin: 10px 0 0 0;\n\t\t\tbackground-color: #eee;\n\t\t\tpadding: 10px;\n\t\t\tfont-size: 1.2rem;\n\t\t\twidth: 580px;\n\t\t}\n\t\t-------------------------\n\t- add valid format messages\n\t\t- HTML\n\t\t\t------------------------\n\t\t\t<div className=\"note\">required, maximum 10 characters</div>\n\t\t\t<div className=\"note\">e.g. 555-333-2222</div>\n\t\t\t------------------------\n\t\t- styles\n\t\t\t----------------------------\n\t\t\t.note {\n\t\t\t\tfont-size: 1rem;\n\t\t\t\tmargin: 0 0 20px 97px;\n\t\t\t}\n\n\t\t\t.invalid input {\n\t\t\t\tcolor: red;\n\t\t\t}\t\n\t\t\t----------------------------\n- create state variables for the form\n\t-----------------------------\n\tconst [name, setName] = useState('');\n\tconst [phone, setPhone] = useState('');\n\tconst [payload, setPayload] = useState({});\n\t-----------------------------\n- wire the form to the state variables\n\t- name\n\t\t----------------------------------\n\t\tconst handleName = (e) => {\n\t\t\tlet _name = e.target.value;\n\t\t\tsetName(_name);\n\t\t}\t\t \n\n\t\tvalue={name} onChange={handleName}\n\t\t----------------------------------\n\t- phone\n\t\t----------------------------------\n\t\tconst handlePhone = (e) => {\n\t\t\tlet _phone = e.target.value;\n\t\t\tsetPhone(_phone);\n\t\t}\t\t \n\n\t\tvalue={phone} onChange={handlePhone}\n\t\t----------------------------------\n- program button to show payload (what will be sent to the backend)\n\t-------------------------\n\tconst handleButton = (e) => {\n\t\te.preventDefault();\n\t\tsetPayload(prev => ({\n\t\t\t...prev,\n\t\t\tname,\n\t\t\tphone\n\t\t}));\n\t}\n\n\tonClick={handleButton}\n\n\t{Object.keys(payload).length !== 0 && (\n\t\t<pre>\n\t\t\tpayload: {JSON.stringify(payload, null, 2)}\n\t\t</pre>\n\t)}\t\n\t-------------------------\n- clear the payload display when data changes\n\t----------------------------------------\n\tconst clearPayload = () => {\n\t\tsetPayload(prev => ({}));\n\t}\n\n\tclearPayload();\n\t----------------------------------------\n- form works but without validation:##theformfvalidwork\n- add validation to form\n\t- add state variables for the validation\n\t\t---------------------------------\n\t\tconst [phoneIsValid, setPhoneIsValid] = useState(false);\n\t\tconst [nameIsValid, setNameIsValid] = useState(false);\n\t\tconst [formIsValid, setFormIsValid] = useState(false);\t\n\t\t---------------------------------\n\t- valid name when changed\n\t\t---------------------------\n\t\tif (_name !== \"\" && _name.length <= 10) {\n\t\t\tsetNameIsValid(true);\n\t\t} else {\n\t\t\tsetNameIsValid(false);\n\t\t}\n\t\t---------------------------\n\t- validate phone when changed\n\t\t-----------------------------\n\t\tif (_phone !== \"\" && /^\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d$/.test(_phone)) {\n\t\t\tsetPhoneIsValid(true);\n\t\t} else {\n\t\t\tsetPhoneIsValid(false);\n\t\t}\n\t\t-----------------------------\n\t- add validation-driven form styling\n\t\t--------------------------------\n\t\t<div className={\"row \" + (nameIsValid ? \"valid\" : \"invalid\")}>\n\n\t\t<div className={\"note \" + (nameIsValid ? \"valid\" : \"invalid\")}>required, maximum 10 characters</div>\n\n\t\t<div className={\"row \" + (phoneIsValid ? \"valid\" : \"invalid\")}>\n\n\t\t<div className={\"note \" + (phoneIsValid ? \"valid\" : \"invalid\")}>e.g. 555-333-2222</div>\n\t\t--------------------------------\n\t- add an observer to formIsValid state variable up-to-date\n\t\t------------------------------\n\t\tuseEffect(() => {\n\t\t\tsetFormIsValid(nameIsValid && phoneIsValid);\n\t\t}, [nameIsValid, phoneIsValid])\n\t\t------------------------------\n\t- disable register button so long all fields are not valid\n\t\t---------------------------------------\n\t\t<button disabled={!formIsValid} onClick={handleButton}>Register</button>\n\t\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-11-29 05:59:13","systemWhoCreated":"systemUnknown"},{"id":445,"category":"Node","title":"How to create sessions in Node/Express","body":"- the goal \n\t- these instructions will show you the basics of using cookies and sessions in Node/Express to enable a user to login, remain logged in, and log out\n\t- upon logging in, the client will receive a cookie which tracks a user session in the API\n\t- if anything is unclear in these instructions, see the [final code here](https://github.com/edwardtanguay/node-express-session-basics)\n- set up project\n\t- setup\n\t\t- `get init`\n\t\t\t- `.gitignore`\n\t\t\t\t------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.env\n\t\t\t\t------------------------------\n\t\t- `npm init -y`\n\t\t\t- `\"type\": \"module\",`\n\t\t\t- `\"start\": \"npx nodemon server.js\"`\n\t\t- `npm i express express-session cookie-parser`\n- create a minimal API: `server.js`\n\t--------------------------------------\n\timport express from 'express';\n\n\tconst app = express();\n\tconst PORT = 5001;\n\n\tapp.get(\"/test\", (req, res) => {\n\t\tres.send('this is an endpoint test');\n\t});\n\n\tapp.listen(PORT, (req, res) => {\n\t\tconsole.log(`API listening on port ${PORT}`);\n\t});\n\t--------------------------------------\n- test in browser\n- add session management\n\t- imports\n\t\t----------------------------\n\t\timport session from 'express-session';\n\t\timport cookieParser from 'cookie-parser';\n\t\t----------------------------\n\t- add middleware\n\t\t----------------------\n\t\tapp.use(cookieParser());\n\t\tapp.use(\n\t\t\tsession({\n\t\t\t\tresave: true,\n\t\t\t\tsaveUninitialized: true,\n\t\t\t\tsecret: \"secret\"\n\t\t\t})\n\t\t);\n\t\t----------------------\n\t\t- notice session secret (i.e. salt for the session hash) will later be made more random and put in `.env` file to increase session security\n- add test users\n\t----------------------------\n\tconst users = [\n\t\t{\n\t\t\tusername: \"ja\",\n\t\t\tfirstName: \"James\",\n\t\t\tlastName: \"Anderson\",\n\t\t\temail: \"ja@mail.com\"\n\t\t},\n\t\t{\n\t\t\tusername: \"ac\",\n\t\t\tfirstName: \"Ashley\",\n\t\t\tlastName: \"Cartwright\",\n\t\t\temail: \"ac@mail.com\"\n\t\t}\n\t];\n\t----------------------------\n- replace test endpoint with these session management endpoints\n\t--------------------------------\n\tapp.get(\"/login/:username\", (req, res) => {\n\t\tconst user = users.find(user => user.username === req.params.username);\n\t\tif (user) {\n\t\t\treq.session.user = user;\n\t\t\treq.session.save();\n\t\t\tres.send(`User logged in: ${JSON.stringify(user)}`);\n\t\t} else {\n\t\t\tres.status(500).send(\"bad login\");\n\t\t}\n\t});\n\n\tapp.get(\"/user\", (req, res) => {\n\t\tif (req.session.user) {\n\t\t\tres.send(req.session.user);\n\t\t} else {\n\t\t\tres.send('no user logged in');\n\t\t}\n\t});\n\n\tapp.get(\"/logout\", (req, res) => {\n\t\treq.session.destroy();\n\t\tres.send(\"User logged out\");\n\t});\n\t--------------------------------\n- test the API\n\t- postman\n\t- Firefox\n\t- Chrome\n\t- show that each can have a different user logged in\n\t- show also that if you restart the server, the session is gone\n- hide the session secret\n\t- create `.env` file\n\t\t------------------------\n\t\tSESSION_SECRET = iwjf2392jsdf\n\t\t------------------------\n\t- in terminal\n\t\t- `npm i dotenv`\n\t- in `server.js`, add .env management \n\t\t-------------------------------------\n\t\timport dotenv from 'dotenv';\n\n\t\tdotenv.config();\n\t\t-------------------------------------\n\t- in `server.js`, change session secret to lookup environment variable\n\t\t-----------------------------------\n\t\tsecret: process.env.SESSION_SECRET\n\t\t-----------------------------------\n\t- test again","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-01 04:15:13","systemWhoCreated":"systemUnknown"},{"id":446,"category":"Authorization","title":"Create React app with user authentication and authorization","body":"- the goal\n\t- the goal of these instructions is to create both a frontend and backend site which easily allows you to assign users to groups in the API which then have various access in the React site\n\t\t- if anything is unclear in these instructions\n\t\t\t- backend code is here: [node-express-react-authorization-backend](https://github.com/edwardtanguay/node-express-react-authorization-backend)\n\t\t\t- frontend code is here: [node-express-react-authorization-frontend](https://github.com/edwardtanguay/node-express-react-authorization-frontend)\n\t- the final site will allow users to log in and see different content and have different rights##themernappwithalliok\n- **create backend**\n\t- allow user login/logout using sessions and cookies\n\t\t- download this project and copy as basis: [node-express-session-basics](https://github.com/edwardtanguay/node-express-session-basics)\n\t\t- copy files to directory named, e.g. `mernshowcase-et-backend`\n\t\t- `npm i`\n\t\t- test if authentication is working:\n\t\t\t- `http://localhost:3003/user`\n\t\t\t- `http://localhost:3003/login/ac`\n\t\t\t- `http://localhost:3003/user`\n\t\t\t- `http://localhost:3003/logout`\n\t\t\t- `http://localhost:3003/login/ja`\n\t\t\t- `http://localhost:3003/user`\n\t\t\t- `http://localhost:3003/logout`\n\t- set up authorization\n\t\t- mock database users to test authorization\n\t\t\t-----------------------------------------\n\t\t\tconst users = [\n\t\t\t\t{\n\t\t\t\t\tusername: \"anonymousUser\",\n\t\t\t\t\tfirstName: \"Anonymous\",\n\t\t\t\t\tlastName: \"User\",\n\t\t\t\t\taccessGroups: \"loggedOutUsers\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: \"jj\",\n\t\t\t\t\tfirstName: \"James\",\n\t\t\t\t\tlastName: \"JustSignedUpton\",\n\t\t\t\t\taccessGroups: \"loggedInUsers,notApprovedUsers\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: \"aa\",\n\t\t\t\t\tfirstName: \"Ashley\",\n\t\t\t\t\tlastName: \"Approvedmemberton\",\n\t\t\t\t\taccessGroups: \"loggedInUsers, members\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: \"kc\",\n\t\t\t\t\tfirstName: \"Kyle\",\n\t\t\t\t\tlastName: \"ContentEditorton\",\n\t\t\t\t\taccessGroups: \"loggedInUsers, members, contentEditors\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: \"ma\",\n\t\t\t\t\tfirstName: \"Mindy\",\n\t\t\t\t\tlastName: \"Administraton\",\n\t\t\t\t\taccessGroups: \"loggedInUsers, members, admins\"\n\t\t\t\t}\n\t\t\t];\n\t\t\t-----------------------------------------\n\t\t- refactor endpoints\n\t\t\t- `app.post(\"/login\", (req, res) => {`\n\t\t\t\t- `const username = req.body.username;`\n\t\t\t\t- `res.json(JSON.stringify(user));`\n\t\t\t- `app.get(\"/currentuser\", (req, res) => {`\n\t\t- test again:\n\t\t\t- GET `http://localhost:3003/currentuser`\n\t\t\t- POST `http://localhost:3003/login/kc`\n\t\t\t- GET `http://localhost:3003/currentuser`\n\t\t\t- GET `http://localhost:3003/logout`\n- **create frontend**\n\t- set up base React site\n\t\t- make a create-react-app called e.g. `mernshowcase-et-frontend`\n\t\t\t- alternatively download a [blankcra](https://github.com/edwardtanguay/blankcra)\n\t\t- `npm i`\n\t\t- `npm start`\n\t- set up login functionality \n\t\t- port the code from this project in order to set up a login form that allows a user to log into the site: [Create a React form with validation](https://onespace.netlify.app/howtos?id=443)\n\t\t\t- skip the validation for now but get a login form working#workloginformsdf\n\t\t- wire the login form to the backend\n\t\t\t- add cors\n\t\t\t\t- `npm i cors`\n\t\t\t\t- `app.use(cors());`\n\t\t\t- add ability to read JSON payload via POST (e.g. to read `req.body`)\n\t\t\t\t- `app.use(express.json());`\n\t\t\t- handle button now looks like this:\n\t\t\t\t-------------------------------\n\t\t\t\tconst handleButton = async (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\t\tbody: JSON.stringify({ username, password })\n\t\t\t\t\t};\n\t\t\t\t\tconst response = await fetch('http://localhost:3003/login', requestOptions);\n\t\t\t\t\tconst _currentUser = JSON.parse(await response.json());\n\t\t\t\t\tsetCurrentUser(prev => ({...prev, ..._currentUser }));\n\t\t\t\t}\n\t\t\t\t-------------------------------\n\t- display user when logged in\n\t\t- `<h2>Current User: {currentUser.firstName} {currentUser.lastName}</h2>`\n\t\t- in backend: customize cors for fetch-enabled cookies\n\t\t\t------------------------\n\t\t\tapp.use(cors(\n\t\t\t\t{\n\t\t\t\t\torigin: 'http://localhost:3000',\n\t\t\t\t\tcredentials: true\n\t\t\t\t}\n\t\t\t));\n\t\t\t------------------------\n\t\t- in backend: if nobody logged in, send anonymous user\n\t\t\t-------------------------------\n\t\t\tapp.post(\"/login\", (req, res) => {\n\t\t\t\tconst username = req.body.username;\n\t\t\t\t// const password = req.body.password;\n\t\t\t\tlet user = users.find(user => user.username === username);\n\t\t\t\tif (!user) {\n\t\t\t\t\tuser = users.find(user => user.username === 'anonymousUser');\n\t\t\t\t}\n\t\t\t\treq.session.user = user;\n\t\t\t\treq.session.save();\n\t\t\t\tres.json(user);\n\t\t\t});\n\n\t\t\tapp.get(\"/currentuser\", (req, res) => {\n\t\t\t\tlet user = req.session.user;\n\t\t\t\tif (!user) {\n\t\t\t\t\tuser = users.find(user => user.username === 'anonymousUser');\n\t\t\t\t}\n\t\t\t\tres.json(user);\n\t\t\t});\n\t\t\t-------------------------------\n\t\t- protect page to only show when user object is set\n\t\t\t-------------------------\n\t\t\t{currentUser.username && (\n\t\t\t\t<>\n\t\t\t-------------------------\n\t\t- make function to check if user is in a specific accessGroup\n\t\t\t-------------------------\n\t\t\tconst currentUserIsInGroup = (accessGroup) => {\n\t\t\t\tconst accessGroupArray = currentUser.accessGroups.split(',').map(m => m.trim());\n\t\t\t\treturn accessGroupArray.includes(accessGroup);\n\t\t\t}\n\t\t\t-------------------------\n\t\t- only display login form when not logged in, otherwise logout button\n\t\t\t---------------------------\n\t\t\t{currentUserIsInGroup('loggedOutUsers') && (\n\t\t\t---------------------------\n\t\t- make logout button and handler\n\t\t\t-------------------------------\n\t\t\tconst handleLogout = async (e) => {\n\t\t\t\tconst requestOptions = {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\tcredentials: 'include'\n\t\t\t\t};\n\t\t\t\tconst response = await fetch('http://localhost:3003/logout', requestOptions);\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst _currentUser = await response.json();\n\t\t\t\t\tsetCurrentUser(prev => ({ ...prev, ..._currentUser }));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t{currentUserIsInGroup('loggedInUsers') && (\n\t\t\t\t<div><button onClick={handleLogout}>Logout</button></div>\n\t\t\t)}\n\t\t\t-------------------------------\n\t\t- clear form on success\n\t\t\t----------------------\n\t\t\tsetUsername('');\n\t\t\tsetPassword('');\n\t\t\t----------------------\n\t\t- show logged-in user name only, nothing for anonymousUser\n\t\t\t--------------------------------\n\t\t\t{currentUserIsInGroup('loggedInUsers') && (\n\t\t\t\t<h2>Current User: {currentUser.firstName} {currentUser.lastName}</h2>\n\t\t\t)}\n\t\t\t--------------------------------\n\t- show appropriate information depending on usergroup\n\t\t- setup panels\n\t\t\t---------------------------------\n\t\t\t<div className=\"panel\">\n\t\t\t\tThis is a test.111\n\t\t\t</div>\n\t\t\t<div className=\"panel\">\n\t\t\t\tThis is a test.222\n\t\t\t</div>\n\n\t\t\tdiv.panel {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\twidth: 560px;\n\t\t\t\tmargin: 10px 0 0 0;\n\t\t\t\tpadding: 20px;\n\t\t\t\tborder-radius: 5px;\n\t\t\t}\n\t\t\t---------------------------------\n\t\t- for visitors\n\t\t\t--------------------------------\n\t\t\t{currentUserIsInGroup('loggedOutUsers') && (\n\t\t\t\t<div className=\"panel\">\n\t\t\t\t\tWelcome to this site. \n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t--------------------------------\n\t\t- for users who have signed up but have not yet been approved\n\t\t\t--------------------------------\n\t\t\t{currentUserIsInGroup('notApprovedUsers') && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"panel\">\n\t\t\t\t\t\t<h3>Thank you for registering!</h3>\n\t\t\t\t\t\tAn administrator will approve your account as soon as possible.\n\t\t\t\t\t</div>\n\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t--------------------------------\n\t\t- for members\n\t\t\t--------------------------------\n\t\t\t{currentUserIsInGroup('members') && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"panel\">\n\t\t\t\t\t\t<h3>Current Site News for Members</h3>\n\t\t\t\t\t\t<p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Neque explicabo voluptate quia asperiores sit! Vel molestiae labore ratione non dolores? Exercitationem soluta quo id laboriosam, autem perferendis? Fuga, suscipit ipsa.</p>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t--------------------------------\n\t\t- for content editors\n\t\t\t---------------------------------\n\t\t\t{currentUserIsInGroup('contentEditors') && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"panel\">\n\t\t\t\t\t\t<h3>Content Editor Section:</h3>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button>Edit Welcome Page</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button>Create New Page</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t---------------------------------\n\t\t- for admins\n\t\t\t---------------------------------\n\t\t\t{currentUserIsInGroup('admins') && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"panel\">\n\t\t\t\t\t\t<h3>Admin Section:</h3>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button>Create users</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button>Edit users</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button>Delete users</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t---------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-02 08:27:14","systemWhoCreated":"systemUnknown"},{"id":447,"category":"JavaScript","title":"How to easily create CLI commands with Node and JavaScript to generate code","body":"- This project shows you how easy it is to set up a code generator\n- When you notice you are creating the same set of files repeatedly, use this code to automate the process.\n- You can get the full code here: [node-cli-create-site](https://github.com/edwardtanguay/node-cli-create-site)\n- For example, you can type `node create-site.js \"Berlin MongoDB Conference\" complex` and a CSS file and an HTML file with JavaScript will be created in a folder:##thejavasandthecss\n- `create-site.js`\n\t-----------------------------------\n\timport fs from 'fs';\n\n\tconst args = process.argv.slice(2);\n\n\tconst siteName = args[0]; // e.g. \"test001\"\n\tlet kind = args[1]; // e.g. \"simple\", \"complex\"\n\n\t// validate and sanitize arguments\n\tif (kind === undefined) {\n\t\tkind = 'simple';\n\t}\n\tif (siteName === undefined || !['simple', 'complex'].includes(kind)) {\n\t\tconsole.log('');\n\t\tconsole.log('COMMAND SYNTAX:');\n\t\tconsole.log('node create-site.js [sitename] [kind: simple (default), complex]');\n\t\tconsole.log('');\n\t\tconsole.log('VALID EXAMPLES:');\n\t\tconsole.log('node create-site.js test001')\n\t\tconsole.log('node create-site.js test001 simple')\n\t\tconsole.log('node create-site.js test001 complex')\n\t\tconsole.log('node create-site.js \"Berlin MongoDB Conference\" complex')\n\t\tprocess.exit();\n\t}\n\tconst directoryName = siteName.split('').filter(char => {\n\t\tif (char != ' ') {\n\t\t\treturn char;\n\t\t}\n\t}).join('');\n\n\t// create site directory\n\tif (!fs.existsSync(directoryName)) {\n\t\tfs.mkdirSync(directoryName);\n\t}\n\n\t// create pages\n\tswitch (kind) {\n\t\tcase \"simple\":\n\t\t\tfs.writeFileSync(`${directoryName}/index.html`, `<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>${siteName}</title>\n\t</head>\n\t<body>\n\t<h1>${siteName.toUpperCase()}</h1>\n\t<p>Welcome to this site.</p>\n\t</body>\n\t</html>`);\n\t\t\tbreak;\n\t\tcase \"complex\":\n\t\t\tfs.writeFileSync(`${directoryName}/index.html`, `<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\" href=\"main.css\">\n\t\t<title>${siteName}</title>\n\t</head>\n\t<body>\n\t<h1>${siteName.toUpperCase()}</h1>\n\t\t<p class=\"message\"\n\t\t   style=\"display:none\">Welcome to this styled and interactive site.</p>\n\t\t<button class=\"buttonShowMessage\">Show Message</button>\n\n\t\t<script>\n\t\t\tconst messageElem = document.querySelector('.message');\n\t\t\tconst buttonElem = document.querySelector('.buttonShowMessage');\n\t\t\tbuttonElem.onclick = () => {\n\t\t\t\tmessageElem.style.display = 'block';\n\t\t\t\tbuttonElem.style.display = 'none';\n\t\t\t}\n\t\t</script>\n\t</body>\n\t</html>`);\n\t\t\tfs.writeFileSync(`${directoryName}/main.css`, `body {\n\t\tbackground-color: #333;\n\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\tfont-size: 1.6rem;\n\t\tpadding: 20px;\n\t\tcolor: #ccc;\n\t}`);\n\t}\n\t-----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-03 07:03:11","systemWhoCreated":"systemUnknown"},{"id":448,"category":"JavaScript","title":"How JavaScript arrays are actually objects","body":"- note that underneath, arrays are objects\n\t----------------------------------\n\tconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\tconsole.log(nums);\n\n\tfor (const num of nums) {\n\t\tconsole.log(num);\n\t}\n\n\tfor (const num in nums) {\n\t\tconsole.log(num);\n\t}\n\n\tconst book = {\n\t\ttitle: \"The Book\",\n\t\tpages: 34\n\t};\n\n\tfor (const prop in book) {\n\t\tconsole.log(prop)\n\t}\n\n\tconsole.log(Object.keys(book))\n\tconsole.log(Object.values(book))\n\n\tconsole.log(Object.keys(nums))\n\tconsole.log(Object.values(nums))\n\n\tconsole.log(typeof book)\n\tconsole.log(typeof nums)\n\n\tconsole.log(Array.isArray(book));\n\tconsole.log(Array.isArray(nums));\n\t----------------------------------\n- best is to execute this code in VSCode with [Quokka](https://quokkajs.com/docs/index.html)##thequokkaij","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-03 08:48:31","systemWhoCreated":"systemUnknown"},{"id":449,"category":"JavaScript","title":"JavaScript Basics","body":"- JavaScript environments (https://onespace.netlify.app/howtos?id=388)\n\t- Low-hanging fruit\n\t- Quokka\n\t- jsfiddle\n\t\t- https://jsfiddle.net/edwardtanguay/7cx0dg9s/3/\n\t- browser-inline\n\t- browser-modules\n\t- Node/npm/CLI\n\t\t- https://onespace.netlify.app/howtos?id=447\n\t- React (create-react-app)/JSON/Netlify\n\t- Vue\n\t\t- https://onespace.netlify.app/howtos?id=393\n\t\t- https://onespace.netlify.app/howtos?id=340\n\t- TypeScript\n- types\n\t- strings\n\t- numbers\n\t\t- Intl.NumberFormat()\n\t\t- toFixed()\n\t- booleans\n\t- arrays\n\t- objects\n\t- dates\n\t\t- JavaScript does not have a date data type. \n\t\t- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Numbers_and_dates\n\t\t- https://www.npmjs.com/package/moment\n\t- undefined / not defined / null / empty \"\"\n\t- compared to Java/C#, JavaScript is extremely sloppy\n\t\t- therefore: validate, santitize, avoid var and forget hoisting!, use const/let instead!\n\t\t\t- or use TypeScript\n\t\t- parseInt() , parseFloat()\n\t\t- Number()\n\t\t- String()\n\t\t- typeof\n- operators\n\t- arithmetic\n\t\t- `+ - * / %`\n\t\t- `++ --`\n\t- assignment\n\t\t- `= += -=`\n\t- string\n\t\t- `+` (use template literals now instead, much better!) \n\t\t- example\n\t\t\t------------------------------------\n\t\t\tconst title = \"The Book\";\n\t\t\tconst titles = [\"The Book\", \"The Other Book\"];\n\t\t\tconst subtitle = \"The greatest book\";\n\t\t\tconst message = `The title of the book is ${titles.join(', ')} (${subtitle}).`;\n\t\t\tconst message = \"The title of the book is \" + title + \" (\" + subtitle + \").\";  // ...the book is The Book, The Other Book (The greatest book)\n\t\t\tconst pages = 234;\t\t\t\n\t\t\t------------------------------------\n\t- comparison\n\t\t- `===` (instead of `==`)\n\t\t- `!==` (instead of `!=`)\n\t\t- `> < >= <=`\n\t\t- `?` (ternary, learn to use it!)\n\t\t\t- code:\n\t\t\t\t----------------------------\n\t\t\t\tconst temp = 40;\n\t\t\t\tconst feelsLike = '';\n\t\t\t\tif(temp > 30) {\n\t\t\t\t\tfeelsLike = \"hot\";\n\t\t\t\t} else {\n\t\t\t\t\tfeelsLike = \"cold\";\n\t\t\t\t}\n\t\t\t\t----------------------------\n\t- logical\n\t\t- `&& || !`\n- math functions\n\t- `Math.round()`\n\t- `Math.ceil()`\n\t- `Math.floor()`\n\t- `Math.abs()`\n\t- `Math.min()`\n\t- `Math.max()`\n\t- `Math.floor(Math.random() * 100) + 1` (number between 1 and 100)`\n- string functions\n\t- `substring(start, end)`\n\t\t- NOT THIS: `substr(start, length)`\n\t- `slice(start, end)`\n\t- `replace(/findthis/g,\"replace it with this\");` (i.e. use regular expressions)\n\t- `toUpperCase()`\n\t- `toLowerCase()`\n\t- `padStart()`\n\t- `padEnd()`\n\t- `charAt(0)`\n\t- `split()`\n- array functions\n\t- `.length`\n\t- .join()\n\t- .slice()\n\t- .pop() .push() .shift() .unshift()\n\t- .reverse()\n\t- .sort()\n\t- .splice()\n\t- .indexOf()\n\t- .lastIndexOf()\n- conditions\n\t- if/else\n\t- switch\n- for-loops\n\t- for-in, for-of, forEach\n\t\t- The difference between for..in, for..of, and forEach()\n\t\t\t- https://onespace.netlify.app/howtos?id=227\n\t\t- How JavaScript arrays are actually objects\n\t\t\t- https://onespace.netlify.app/howtos?id=448\n\t- otherwise the classic:\n\t\t- `for(let i = 0; i < 10; i++) {`\n- while/do\n- regular expressions\n- functions\n\t- arrow functions\n\t- classic functions\n- object literals\n\t- iterating over objects and arrays\n\t\t- .entries()\n\t\t- .forEach()\n\t\t- .filter() / .find() \n\t\t- .map()\n\t\t- .reduce()\n\t\t- .sort()\n\t\t- .some()\n\t\t- .every()\n\t\t- Object.entries()\n\t\t- Object.keys()\n\t\t- Object.values()\n\t\t- Object.assign()\n\t\t- other object methods\n- **clones vs. references**, or the heap and the stack \n\t- clones: string, numbers, boolean\n\t- references: objects and arrays\n\t- the spread operator \n\t- deep cloning objects and arrays\n- destructuring\n\t- arrays\n\t- objects\n- nesting arrays and objects\n- callbacks/promises\n- closure\n- recursion\n- classes\n\t- anufacturing objects with the same structure - Creating instances with the new keyword, The Date class - Constructing an object: The constructor() method, instance and this - Prototype methods: Adding custom methods to our class - Creating subclasses with extends and super()\"\t\t\n- DOM\t\n\tgetElementById\n\tonclick\n\tfetch()\n\tasync/await\n\t\t- IIFE\t\n- checkout\n\t- https://edabit.com/tutorial/javascript#numbers\n\t- https://onecompiler.com\n- concepts and history \n\t- Douglas Crawford\n\t\t- JavaScript, The Good Parts - \"Understanding the Excellence of JavaScript\" - 2008\n\t- ES6\n\t- state programming vs functional programming\n\t\t- \"In object-oriented programming, state exists. In functional programming, state does not exist.\"","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-03 22:45:46","systemWhoCreated":"systemUnknown"},{"id":450,"category":"JWT","title":"Create a Node/Express site with JWT that logs user out after time elapse","body":"- this project shows how use JWTs to allow a user to log in via the frontend, after which the frontend counts down the number of seconds until the user is automatically logged out\n- the JWT token is stored on the frontend in localStorage\n- complete code:\n\t- see [backend code](https://github.com/edwardtanguay/jwt-test-timed-backend)\n\t- see [frontend code](https://github.com/edwardtanguay/jwt-test-timed-frontend)\t\n- this app allows a user to login and stay logged in for 20 seconds at which time he will automatically be logged out#gif#jwttestand\n- backend `server.js`\n\t-----------------------------------------------\n\timport express from 'express';\n\timport jwt from 'jsonwebtoken';\n\timport cors from 'cors';\n\n\tconst user = {\n\t\tid: 1,\n\t\tusername: \"nigel\",\n\t\tfirstName: \"Nigel\",\n\t\tlastName: \"Richter\",\n\t\temail: \"nigel@gmail.com\"\n\t}\n\n\tconst app = express();\n\tconst PORT = 5001;\n\n\tapp.use(cors());\n\tapp.use(express.json());\n\n\tconst verifyToken = (req, res, next) => {\n\t\tconst bearerHeader = req.headers['authorization'];\n\t\tif (typeof bearerHeader !== 'undefined') {\n\t\t\tconst bearer = bearerHeader.split(' ');\n\t\t\tconst bearerToken = bearer[1];\n\t\t\treq.token = bearerToken;\n\t\t\tnext();\n\t\t} else {\n\t\t\tres.sendStatus(403);\n\t\t}\n\t};\n\n\tconst decodeJwt = (token) => {\n\t\tlet base64Url = token.split('.')[1];\n\t\tlet base64 = base64Url.replace('-', '+').replace('_', '/');\n\t\tlet decodedData = JSON.parse(Buffer.from(base64, 'base64').toString('binary'));\n\t\treturn decodedData;\n\t}\n\n\tapp.get('/', (req, res) => {\n\t\tres.json({\n\t\t\tmessage: \"welcome to the api\"\n\t\t});\n\t});\n\tapp.post('/maintain-login', verifyToken, (req, res) => {\n\t\tjwt.verify(req.token, 'secretkey', (err, authData) => {\n\t\t\tif (err) {\n\t\t\t\tres.sendStatus(403);\n\t\t\t} else {\n\t\t\t\tconst data = decodeJwt(req.token);\n\t\t\t\tres.json({\n\t\t\t\t\tuser: data.user\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\tapp.post('/posts/create', verifyToken, (req, res) => {\n\t\tjwt.verify(req.token, 'secretkey', (err, authData) => {\n\t\t\tif (err) {\n\t\t\t\tres.sendStatus(403);\n\t\t\t} else {\n\t\t\t\tres.json({\n\t\t\t\t\tmessage: 'Post created...',\n\t\t\t\t\tauthData\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\tapp.post('/login', (req, res) => {\n\t\tconst username = req.body.username;\n\t\tconst password = req.body.password;\n\t\tif (username === 'nigel' && password === '123') {\n\t\t\tjwt.sign({ user }, 'secretkey', { expiresIn: '20s' }, (err, token) => {\n\t\t\t\tres.json({\n\t\t\t\t\tuser,\n\t\t\t\t\ttoken\n\t\t\t\t});\n\t\t\t})\n\t\t} else {\n\t\t\tres.sendStatus(403);\n\t\t}\n\t});\n\n\tapp.listen(PORT, () => console.log(`Server listening on port: ${PORT}`))\n\t-----------------------------------------------\n- frontend (create-react-app) `App.js`\n\t-----------------------------------------------\n\timport { useState, useEffect } from 'react';\n\timport './App.scss';\n\n\n\tfunction App() {\n\t\tconst initialNumbersLeft = localStorage.getItem('secondsLeft');\n\t\tconst [username, setUsername] = useState('');\n\t\tconst [password, setPassword] = useState('');\n\t\tconst [currentUser, setCurrentUser] = useState({});\n\t\tconst [message, setMessage] = useState('Welcome');\n\t\tconst [secondsLeft, setSecondsLeft] = useState(initialNumbersLeft ? initialNumbersLeft : 0);\n\t\tconst [showSite, setShowSite] = useState(false);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch('http://localhost:5001/maintain-login', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t'authorization': 'Bearer ' + localStorage.getItem('token')\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetCurrentUser(prev => ({ ...prev, ...data.user }));\n\t\t\t\t\tconst _secondsLeft = Number(localStorage.getItem('secondsLeft'));\n\t\t\t\t\tsetSecondsLeft(prev => _secondsLeft);\n\t\t\t\t\tsetShowSite(true);\n\t\t\t\t\tsetInterval(() => {\n\t\t\t\t\t\tsetSecondsLeft(prev => prev - 1);\n\t\t\t\t\t}, 1000);\n\t\t\t\t} else {\n\t\t\t\t\tsetShowSite(true);\n\t\t\t\t}\n\t\t\t})();\n\t\t}, []);\n\n\t\tuseEffect(() => {\n\t\t\tlocalStorage.setItem('secondsLeft', secondsLeft);\n\t\t\tif (secondsLeft === -1) {\n\t\t\t\twindow.location.reload(false);\n\t\t\t}\n\t\t}, [secondsLeft]);\n\n\t\tconst handleUsername = (e) => {\n\t\t\tsetUsername(e.target.value);\n\t\t}\n\n\t\tconst handlePassword = (e) => {\n\t\t\tsetPassword(e.target.value);\n\t\t}\n\n\t\tconst handleButton = async () => {\n\t\t\tconst response = await fetch('http://localhost:5001/login', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ username, password })\n\t\t\t});\n\t\t\tsetUsername('');\n\t\t\tsetPassword('');\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tsetCurrentUser(prev => ({ ...prev, ...data.user }));\n\t\t\t\tlocalStorage.setItem('token', data.token);\n\t\t\t\tsetMessage(`User: ${currentUser.firstName}`);\n\t\t\t\tsetSecondsLeft(20);\n\t\t\t\tlocalStorage.setItem('secondsLeft', 20);\n\t\t\t\tsetInterval(() => {\n\t\t\t\t\tsetSecondsLeft(prev => prev - 1);\n\t\t\t\t}, 1000);\n\t\t\t} else {\n\t\t\t\tsetMessage('bad login');\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{showSite && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t{Object.keys(currentUser).length === 0 && (\n\t\t\t\t\t\t\t<div>{message}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{Object.keys(currentUser).length > 0 && secondsLeft >= 0 && (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{currentUser.firstName} {currentUser.lastName} ({secondsLeft}s)\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<hr />\n\n\t\t\t\t\t\t{Object.keys(currentUser).length === 0 && (\n\t\t\t\t\t\t\t<form >\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\tusername: <input onChange={handleUsername} value={username} type=\"text\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\tpassword: <input onChange={handlePassword} value={password} type=\"password\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={handleButton}>Login</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div >\n\t\t);\n\t}\n\n\texport default App;\n\t-----------------------------------------------\n- test your JWT with Postman\n\t- post to `/login`\n\t- then within 20 seconds post the following to `/maintain-login`##thetestpostjwt\n- test your JWT with REST client\n\t- you have to send POST to login route\n\t- then copy the JWT token\n\t- then paste it into the maintain-login request and POST that within 20 seconds##notpostmanresttestjwt\n- test your JWT with the VSCode Thunder Client Extension:\n\t- you have to send POST to login route\n\t- then copy the JWT token (you have to copy the whole object, copy to a text editor, and copy out the token)\n\t- then paste the token into the maintain-login request and POST that within 20 seconds\n##tehthunderclientapi","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-06 00:01:39","systemWhoCreated":"systemUnknown"},{"id":451,"category":"React","title":"How to set up a React site menu with React Router v6 and UseContext","body":"- see full code here: [example-react-router-6](https://github.com/edwardtanguay/example-react-router-6)##usecontext4\n- set up React Router v6:\n\t- setup classic create-react-app\n\t\t- however, I used this: [blankcra](https://github.com/edwardtanguay/blankcra)\n\t- `npm install react-router-dom@6 history@5`\n\t- `index.js`\n\t\t- `import { BrowserRouter } from \"react-router-dom\";`\n\t\t- wrap: `<BrowserRouter>`\n\t- `App.js`\n\t\t-----------------------------------------\n\t\timport { Routes, Route, Link } from 'react-router-dom';\n\n\t\timport Nav from './components/Nav';\n\t\timport PageWelcome from './pages/PageWelcome';\n\t\timport PageRegister from './pages/PageRegister';\n\t\timport PageLogin from './pages/PageLogin';\n\n\t\t<Routes>\n\t\t\t<Route path=\"/\" element={<PageWelcome />} />\n\t\t\t<Route path=\"register\" element={<PageRegister />} />\n\t\t\t<Route path=\"login\" element={<PageLogin />} />\n\t\t</Routes>\n\t\t-----------------------------------------\n\t- `components/Nav.js`\n\t\t----------------------------------\n\t\timport { NavLink } from 'react-router-dom';\n\n\t\tconst Nav = () => {\n\t\t\treturn (\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><NavLink to=\"/\">Welcome</NavLink></li>\n\t\t\t\t\t\t<li><NavLink to=\"register\">Register</NavLink></li>\n\t\t\t\t\t\t<li><NavLink to=\"login\">Login</NavLink></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\t\t\t)\n\t\t}\n\n\t\texport default Nav;\n\t\t----------------------------------\n\t- e.g. `pages/PageWelcome.js`\n\t\t------------------------------------\n\t\tconst PageWelcome = () => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\tThis is the welcome page.\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\n\t\texport default PageWelcome;\n\t\t------------------------------------\n\t- of note for menu active-highlighting in `App.scss`:\n\t\t------------------------------------\n\t\tnav {\n\t\t\tbackground-color: #333;\n\t\t\tborder-radius: 5px;\n\t\t\tpadding: 10px;\n\t\t\tul {\n\t\t\t\tdisplay: flex;\n\t\t\t\tmargin: 0;\n\t\t\t\tli {\n\t\t\t\t\tlist-style: none;\n\t\t\t\t\tmargin: 0 10px 0 0;\n\t\t\t\t\ta {\n\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t}\n\t\t\t\t\t.active {\n\t\t\t\t\t\tcolor: rgb(255, 255, 161);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t------------------------------------\n- set up UseContext with variable (siteContext), set function and toggle function\n\t- `src/App.js`\n\t\t- `import { AppProvider } from './AppContext.js';`\n\t\t- wrap `<div className=\"App\">` in `<AppProvider>`\n\t- `src/AppContext.js`\n\t\t-----------------------------------\n\t\timport { createContext, useState } from 'react';\n\n\t\tconst AppContext = createContext();\n\n\t\texport const AppProvider = ({ children }) => {\n\t\t\tconst [siteStatus, setSiteStatus] = useState('development');\n\n\t\t\tconst toggleStatus = () => {\n\t\t\t\tsetSiteStatus(siteStatus === 'development' ? 'live' : 'development');\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider value={{\n\t\t\t\t\tsiteStatus,\n\t\t\t\t\tsetSiteStatus,\n\t\t\t\t\ttoggleStatus\n\t\t\t\t}} >\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\n\n\t\texport default AppContext;\n\t\t-----------------------------------\n\t- each page that needs the context variables:\n\t\t----------------------------------\n\t\timport { useContext } from 'react';\n\t\timport AppContext from '../AppContext';\n\n\t\tconst { siteStatus, toggleStatus} = useContext(AppContext);\n\n\t\t<p>The current status is: <span className=\"highlight\">{siteStatus}</span></p>\n\t\t<p><button onClick={toggleStatus}>Toggle Status</button></p>\n\t\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-08 01:04:58","systemWhoCreated":"systemUnknown"},{"id":452,"category":"Markdown","title":"Display markdown files in VSCode while you edit them","body":"- install the **Markdown Preview Enhanced** extension##markdownprvvv\n- set preview to open immediately\n\t- open **settings** (`CTRL-comma`)\n\t- search for `markdown automat`\n\t- check this:##checkautomat\n- open a markdown file\n\t- preview will appear on right\n- set to low-contrast \n\t- right-click, **one-dark.css**##theonedarkok\n- click the outline button\n\t- this will allow you to see the outlines of long documents and navigate to sections quickly##notethissections","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-09 22:32:03","systemWhoCreated":"systemUnknown"},{"id":453,"category":"JavaScript DOM","title":"Create a number dropdown which shows that number of icons","body":"- task\n\t- create a dropdown from 1 to 10\n\t- the number hat is selected is the number of stars that is shown\n\t- completed task looks like this:##screenshot3ofthestarts\n- vanilla HTML\n\t- boilerplate HTML\n\t- basic dropdown\n\t\t--------------------------\n\t\t<select class=\"rank\">\n\t\t\t<option value=\"1\">1</option>\n\t\t\t<option value=\"2\">2</option>\n\t\t\t<option value=\"3\">3</option>\n\t\t</select>\n\t\t--------------------------\n- create event handler on change\n\t------------------------------\n\t<script>\n\t\tconst rankElem = document.querySelector('.rank');\n\t\trankElem.onchange = (e) => {\n\t\t\tconsole.log(`changed to ${rankElem.value}`);\n\t\t};\n\t</script>\n\t------------------------------\n- display in HTML number that is selected\n\t------------------------------\n\t<div class=\"stars\"></div>\n\n\tconst starsElem = document.querySelector('.stars');\n\tstarsElem.innerHTML = 'stars go here';\t\n\t------------------------------\n- style dropdown and stars next to each other\n\t-------------------------\n\t<style>\n\t\t.rankDropdown {\n\t\t\tdisplay: flex;\n\t\t}\n\t\t.stars {\n\t\t\tmargin: 0 0 0 5px;\n\t\t}\n\t</style>\n\t-------------------------\n- move displaying of stars inside onchange\n\t-------------------------------------\n\tstarsElem.innerHTML = `${rankElem.value} stars`; \n\t-------------------------------------\n- problem: stars don't show on page load\n\t- solution:\n\t\t- extract the displaying of stars to a central function\n\t\t\t------------------------------\n\t\t\tconst updateStars = () => {\n\t\t\t\tstarsElem.innerHTML = `${rankElem.value} stars`; \n\t\t\t}\n\n\t\t\trankElem.onchange = (e) => {\n\t\t\t\tupdateStars();\n\t\t\t};\n\t\t\t------------------------------\n\t\t- then call this function on page load as well\n\t\t\t----------------------------------\n\t\t\twindow.onload = updateStars;\n\t\t\t----------------------------------\n\t\t- note it will show the currently selected item\n\t\t\t----------------------------------\n\t\t\t`<option value=\"2\" selected>2</option>`\n\t\t\t----------------------------------\n- add star icons\n\t- Howto: [Simple way to use Font Awesome Icons](https://onespace.netlify.app/howtos?id=372)\n\t- add link in head:\n\t\t--------------------------\n\t    <link rel=\"stylesheet\"\n\t\ttype=\"text/css\"\n\t\thref=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t--------------------------\n\t- search for icons [here](https://fontawesome.com/v4.7/icons/)\n\t- replace text:\n\t\t---------------------------\n\t\tstarsElem.innerHTML = '<i class=\"fa fa-star\" aria-hidden=\"true\"></i>';\n\t\t---------------------------\n\t- repeat number of times you want to show it\n\t\t----------------------------\n\t\t.repeat(rankElem.value);\n\t\t----------------------------\n\t- add styling\n\t\t----------------------\n\t\tcolor: goldenrod;\n\t\tfont-size: 1.3rem;\n\t\t----------------------\n\t- star spacing\n\t\t----------------------------\n\t\t.stars i {\n\t\t\tmargin: 0 0 0 2px;\n\t\t}\n\t\t----------------------------\n- problem: to extend dropdown from 3 to 10, we have to type text\n\t- solution:\n\t\t- expand window.onload for multiple commands\n\t\t\t---------------------------\n\t\t\twindow.onload = () => {\n\t\t\t\tupdateStars();\n\t\t\t} \n\t\t\t---------------------------\n\t\t- dynamically add another option\n\t\t\t--------------------------------\n\t\t\tconst option = new Option();\n\t\t\toption.value = 4;\n\t\t\toption.text = \"4\";\n\t\t\trankElem.options.add(option);\n\t\t\t--------------------------------\n\t\t- dynamically add 4 to 10 with for loop\n\t\t\t---------------------------\n\t\t\tfor (let x = 4; x <= 10; x++) {\n\t\t\t\tconst option = new Option();\n\t\t\t\toption.value = x;\n\t\t\t\toption.text = String(x);\n\t\t\t\trankElem.options.add(option);\n\t\t\t}\n\t\t\t---------------------------\n\t\t- generate all dynamically\n\t\t\t- remove HTML options\n\t\t\t- generate 1 to 10\n- final code:\n\t----------------------------------\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\"\n\t\t\t  type=\"text/css\"\n\t\t\t  href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t<title>dropdown</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif\n\t\t\t}\n\n\t\t\t.rankDropdown {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\n\t\t\t.stars {\n\t\t\t\tmargin: 0 0 0 5px;\n\t\t\t\tcolor: goldenrod;\n\t\t\t\tfont-size: 1.3rem;\n\t\t\t}\n\n\t\t\t.stars i {\n\t\t\t\tmargin: 0 0 0 2px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"rankDropdown\">\n\t\t\t<select class=\"rank\">\n\t\t\t</select>\n\t\t\t<div class=\"stars\"></div>\n\t\t</div>\n\n\t\t<script>\n\t\t\tconst rankElem = document.querySelector('.rank');\n\t\t\tconst starsElem = document.querySelector('.stars');\n\n\t\t\tconst updateStars = () => {\n\t\t\t\tstarsElem.innerHTML = '<i class=\"fa fa-star\" aria-hidden=\"true\"></i>'.repeat(rankElem.value);\n\t\t\t}\n\n\t\t\trankElem.onchange = (e) => {\n\t\t\t\tupdateStars();\n\t\t\t};\n\n\t\t\twindow.onload = () => {\n\t\t\t\tupdateStars();\n\n\t\t\t\tfor (let x = 1; x <= 10; x++) {\n\t\t\t\t\tconst option = new Option();\n\t\t\t\t\toption.value = x;\n\t\t\t\t\toption.text = String(x);\n\t\t\t\t\trankElem.options.add(option);\n\t\t\t\t}\n\t\t\t} \n\t\t</script>\n\t</body>\n\t</html>\n\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6;$kind=/courseJsDom/task","systemWhenCreated":"2021-12-09 23:23:01","systemWhoCreated":"systemUnknown"},{"id":454,"category":"VSCode","title":"Debugging JavaScript in Node with VSCode","body":"- in VSCode, you can set break points and step through your code without any plugins\n- type this code and click to the left of the line number to set a breakpoint:##clicktoleftkj\n- press F5 to start debugging\n\t- it stops at the breakpoint:##itstopssdf\n\t- hover over message and it will be displayed\n\t- you can also define variables to watch on the left:##canalsosyolu\n\t- press F5 to continue\n- note that you can turn on Quokka as well, but these are two tools that have overlapping features##twowithoversdf\n\t- we see the difference between Quokka and debugging in a more complicated example\n- debugging makes more sense with more complicated code, e.g. nested loops##weseeallij\n\t- note that Quokka shows only the final result\n\t- debugging can stop the code in the middle of the loops and allow to move through the code step by step **watching** the values change\n\t- first, remove Quokka from the page (close and open the file)\n\t- set breakpoint at line 5 and press F5\n\t- keep pressing F5 to move through the loop one interation at a time\n\t\t- hover over `j` to see that it is changing\n\t- to get a clearing view of the variables changing, at `i` and `j` as watch variables on the left\n\t\t- now press F5 again and watch the variables change\n\t\t- note that you can even set the value of e.g. `i` to make it jump up to a specific number:##notethatsetskjd\n\t\t- note that you can also right-click the breakpoint and define an expression for when the breakpoint should first stop, e.g. if you wanted to test something when the values are 5 and 8##notethat48sd","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-10 00:42:22","systemWhoCreated":"systemUnknown"},{"id":455,"category":"Vue 3.0","title":"Display HTML with map in Vue 3.0","body":"- this is Vue 3.0 boilerplate that enables you to create dynamic HTML easily with JavaScript##theyellowoj\n- index.js\n\t--------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t<title>Vue 3.0</title>\n\t\t<style>\n\t\t\tdiv.output {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\tdiv.box {\n\t\t\t\tbackground-color: yellow;\n\t\t\t\tmargin: 0 10px 10px 0;\n\t\t\t\tpadding: 10px;\n\t\t\t\tborder: 1px solid navy;\n\t\t\t\tborder-radius: 5px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<div class=\"output\"\n\t\t\t\t v-html=\"output\">\n\t\t\t</div>\n\t\t</div>\n\t\t<script>\n\t\t\tconst app = Vue.createApp({\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\toutput: ''\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\tthis.output = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => `<div class=\"box\">${num}</div>`).join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst vm = app.mount('#app');\n\t\t\tvm.initialize();\n\t\t</script>\n\t</body>\n\t</html>\n\t--------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-10 07:15:14","systemWhoCreated":"systemUnknown"},{"id":456,"category":"JavaScript","title":"Display HTML with map and JavaScript","body":"- this is a vanilla JavaScript boilerplate that enables you to create dynamic HTML easily##theyellowoj\n- index.js\n\t--------------------------------\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>vanilla js</title>\n\t\t<style>\n\t\t\tdiv.output {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\n\t\t\tdiv.box {\n\t\t\t\tbackground-color: yellow;\n\t\t\t\tmargin: 0 10px 10px 0;\n\t\t\t\tpadding: 10px;\n\t\t\t\tborder: 1px solid navy;\n\t\t\t\tborder-radius: 5px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class=\"output\"></div>\n\n\t\t<script>\n\t\t\tconst outputElem = document.querySelector('.output');\n\t\t\toutputElem.innerHTML = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => `<div class=\"box\">${num}</div>`).join('');\n\t\t</script>\n\t</body>\n\n\t</html>\n\t--------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-10 07:36:40","systemWhoCreated":"systemUnknown"},{"id":457,"category":"VSCode","title":"Make tabs and spaces appear in VSCode","body":"- to make the tabs and space appear as light grey symbols, do the following\n- note you don't have to have any extensions installed\n- `CTRL-,` to settings, type `render white` and change **Render Whitespace** to `all`##thearrowsandfixeds","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-10 22:02:50","systemWhoCreated":"systemUnknown"},{"id":458,"category":"Vim","title":"Invest time in learning Vim in order to code faster","body":"- **what is Vim?**\n\t- Vim is a text editor originally **created in 1976** (vi) and then improved in 1991 (Vim) \n\t- it enables you to edit files while **keeping your hands on the keyboard** and **not using a mouse**\n\t- Vim was useful in the 70s since **the mouse hadn't been invented yet**\n\t- Vim is still useful today since when you don't use the mouse and keep your hands on the keyboard, **you can code faster**#gif#vimfast\n- **reasons not to learn Vim**\n\t- Vim has a **steep learning curve**, the commands are arbitrary and cryptic, and can be difficult to remember##vimdiffic\n\t- until you spend a week or so internalizing the main commands, it will **at first slow your coding speed down**\n\t- Vim really only makes sense when you switch your keyboard to the **English layout**\n\t\t- if you type with a **German keyboard**\n\t\t\t- you'll have to install a **virtual English keyboard** and switch between them, which is quite easy:\n\t\t\t\t- Windows: **ALT-Shift**\n\t\t\t\t- Ubuntu: **Super-spacebar**\n\t\t\t- you'll have to **memorize where the keys are on the English keyboard** since many in different positions as the German keyboard##tehtwokeeyboards\n\t\t\t- e.g. **searching in Vim** is an example where it makes sense to use the English keyboard layout \n\t\t\t\t- searching in Vim a very common task not only to **find** text but to **navigate and move** around your document\n\t\t\t\t- to search in Vim, you use the **?** and **/** characters\n\t\t\t\t- on the English keyboard, these are on the same key and very easy to reach with the right little finger\n\t\t\t\t- however, on the German keyboard, they are on different keys and harder to reach\t\t\t\n\t\t- also, a prerequisite to using Vim is that you can touch type quickly without looking at the keys\n\t- so learning Vim can be quite a **feat of memorization**, particularly at the beginning\n\t- the best time to learn Vim is not when you have a lot of work and pressing deadlines\n\t\t- but when you have some **extra time**\n- **reasons to learn Vim**\n\t- once you internalize the commands, you will be able to **code faster**\n\t\t- it generally only **take a week of constant practicing** until Vim makes you faster at coding\n\t\t- it's like riding bike: the more you practice, the better you get\n\t- you can **use Vim anywhere** since Vim is:\n\t\t- available on **every operating system** \n\t\t- available as a **plugin** in most editors e.g. VSCode, Atom, PyCharm, Eclipse, JetBrains\n\t\t- available on e.g. **servers without a GUI** that you SSH into \n\t- Vim commands are present in many Linux commands, e.g. `less`\n\t\t- Vim commands for moving and searching are common in many Linux commands\n\t- you **don't have to switch 100%**\n\t\t- Vim is simply a text file editor so you can **use any other editor** to edit the same text files at any time\n\t\t\t- while still in the learning-curve: switch back and forth as needed\n\t\t\t- use Vim when you have time to learn\n\t\t- in VSCode you can **easily disable and enable Vim**\n\t\t- switching your keyboard from English to German is a simple one-key press, e.g. **ALT-shift** in Windows, **Super+Space** in Linux\n\t- you will find **hundreds of useful learning resources** for Vim\n\t\t- e.g. start here: https://vim.is\n\t- Stack Overflow and other forums are full of answers to Vim questions\n\t\t- e.g. `delete to end of line in vim` finds [this answer](https://unix.stackexchange.com/questions/4415/delete-from-cursor-to-end-of-line-in-vi)\t\t\t\n- **installation**\n\t- VSCode\n\t\t- simply install the [Vim extension](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim)##vimbraksenxt\n\t\t- immediately after you install the Vim extension\n\t\t\t- you won't be able to type anything\n\t\t\t- you have to press **i** to enter **insert mode** to type\n\t\t\t- then to get back out of **insert mode**, you press **ESC**\n\t- Linux command line\n\t\t- `sudo apt update`\n\t\t- `sudo apt install vim`\n\t\t- then to edit a file: `vim index.html`\n- **white belt**\n\t- *normal mode and insert mode*\n\t\t- you start in normal mode\n\t\t- `i` for insert mode so you can type\n\t\t- `ESC` back to normal mode\n\t- normal mode move:\n\t\t- character: `h`, `j`, `k`, `l`\n\t\t\t- also `5h` or `7k`\n\t\t- word: `w`, `e`, `b`\n\t\t- line start/end: `^`, `$`, `0`\n\t\t- file start/end/all: `gg`, `G`, (`cie` or `1GVG`)\n\t- inserting\n\t\t- before/after character `i`, `I`, `a`, `A`\n\t\t- after word: `ea`\n\t\t- before/after line: `o`, `O`\n\t- undo/redo\n\t\t- `u`, CTRL-`r`\n- **orange belt**\n\t- move\n\t\t- matching brace: `%`\n\t\t- goto definition: `gd`\n\t\t- go back: CTRL-`o`\n\t\t- move to same word at other positions in the file: `*`\n\t\t- : (line number)\n\t\t- move to blocks: `{`, `}`\n\t- editing\n\t\t- character: `r`\n\t\t\t- also: `9r-` or `9r_`\n\t\t\t- multiple: `R`\n\t\t- replace and type: `s`\n\t\t\t- also: `3s`\n\t\t- join: `J`\n\t\t- replace whole line: `cc`\n\t\t- change word: `cw`, `ciw`\n\t\t\t- also, rest of word: `cw`\n\t\t\t- till end: `C`\n\t\t\t- till character: `c/\"`\n\t\t\t- change camelCase part:\n\t\t\t\t- e.g. `3s`\n\t\t\t\t- combine with . (repeat command)\n\t\t- delete line: `dd`\n\t\t\t- also: `3dd`\n\t\t- delete word: `dw`, `diw`\n\t\t\t- till end: `D`\n\t\t\t- till character: `d/;`\n\t\t- cut: `x`\n\t\t\t- swap: `xp`\n\t\t- copy/paste word:\n\t\t\t- `yiw`\n\t\t\t- `viwp`\t\t\n\t- repeat: `.`\n\t- comment/uncomment: `gcc`\n- **green belt**\n\t- habit: move by searching: `/`, `?`, `n`, `N`\n\t- move line up/down: `ddkP`, `ddp`\n\t- visual mode selection\n\t\t- three ways to select: `v`, `V`, CTRL-`v`\n\t\t\t- top/bottom: `o`\n\t\t\t- word: `aw`\n\t\t\t- (): `ab`\n\t\t\t\t- inner: `ib`\n\t\t\t- {}: `aB`\n\t\t\t\t- inner: `iB`\n\t\t- action on selection\n\t\t\t- delete/yank: `d`, `y`\n\t\t\t- paste before/after: `P`, `p`\n\t\t\t\t- at end of line: `$p`\n\t\t\t- case: `u`, `U`, `~`\n\t\t\t- comment/uncomment: `gc`\n\t\t\t- indent: `>`, `<`\n\t\t\t\t- also: `3>`\n- **blue belt**\n\t- habit: pause and consider fewest strokes possible\n\t- `\"*y`\n\t- search and replace\n\t\t- `:%s/this/that/g`\n\t\t- visual select\n\t\t\t- `:s/this/that/g`\n\t- past commands: `:` and arrow-up and arrow-down\n\t- select/change/delete inner text\n\t\t- change inside two tags\n\t\t\t- `cit` also: `dit`, `vit`\n\t\t- change inside double quotes\n\t\t\t- `ci\"` also: `di\"`, `vi\"`\n\t\t- change inside singl quotes\n\t\t\t- `ci'` also: `di'`, `vi'`\n\t\t- change inside brackets\n\t\t\t- `ci)` also: `di)`, `vi)`\n\t\t\t- `ci}` also: `di}`, `vi}`\n\t\t\t- `ci]` also: `di]`, `vi]`\n- **brown belt**\n\t- habit: before moving, \"ma\" (marker), then come back with `'a`\n\t\t- hop back and forth between two areas of code with `ma` and `ms`\n\t- tabs: `gt`, `gT`\n\t- repeat character 99 times: `i=` `ESC` `d99P`\n\t- black-hole deleting: `\"_dd`\n\t- `:reg`\n\t- connection to operating system clipboard\n\t\t- copy to: `\"*y`\n\t\t- paste from: `\"*p`\t\n\t- close file: `:wq!`\n- **black belt**\n\t- habit: be able to type numbers without looking\n\t- sort: visual mark: `:sort`\n\t- numbers: `:set nu` and `:set nonu`\n\t- macros\n\t\t- `qq` - record\n\t\t- `q` - stop\n\t\t- `@q` - execute\n\t\t- `5@q` - execute 5 times\n\t\t- `@@` - execute again\n- extra\n\t- open up new file in tab: \n\t\t- VSCode: `:e` space, TAB\n\t\t- Linux: `:tabe .`\n\t- close tab: `:q`\n\t- close all tabs: `:qall`\n\t- next tab: `gt`\n\t- previous tab: `gT`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-10 23:07:06","systemWhoCreated":"systemUnknown"},{"id":459,"category":"MongoDB","title":"How to set your connection string to Mongo Atlas for NoSQLBooster","body":"- MongoDB Atlas\n\t- click **Connect** button\n\t- connect using MongoDB Compass\n\t- copy this part of the connection string: e.g. `cluster0.ogshn.mongodb.net`\n- NoSQLBooster\n\t- Connect\n\t- Create\n\t- paste in **Server**##pastinserver\n\t- user and password:##secondksjdf\n\t- SSL on##thressl\n\t- Test Connection\n\t- Save & Connect","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-13 15:09:40","systemWhoCreated":"systemUnknown"},{"id":460,"category":"Node","title":"Download the HTML from a website into a text file","body":"- note that you need `request.end()` to terminate the process and write the file\n\t---------------------------------\n\timport https from 'https';\n\timport fs from 'fs';\n\n\tconst options = {\n\t\thostname: \"www.lemonde.fr\",\n\t\tport: 443,\n\t\tpath: \"/culture/article/2021/12/12/ilya-repine-peindre-l-ame-russe-au-petit-palais-les-contradictions-d-un-peintre-realiste_6105725_3246.html\",\n\t\tmethod: \"GET\"\n\t}\n\n\tconst request = https.request(options, res => {\n\t\tlet responseBody = '';\n\t\tres.setEncoding('UTF-8');\n\t\tres.on('data', data => {\n\t\t\tresponseBody += data;\n\t\t});\n\t\tres.on('end', () => {\n\t\t\tfs.writeFile('./ilyaRepine.html', responseBody, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t\tconsole.log('file created');\n\t\t\t});\n\t\t});\n\t});\n\n\trequest.end();\n\t---------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-15 00:01:41","systemWhoCreated":"systemUnknown"},{"id":461,"category":"VSCode","title":"How to make fonts cursive in VSCode","body":"- these instructions will enable your code to look like this:\n- notice also the font ligatures for `===` and `=>`##fontligaturesksjd\n- download the fonts at [kencrocken/FiraCodeiScript](https://github.com/kencrocken/FiraCodeiScript)\n\t- click the **Code** button and **Download ZIP**\n\t- double-click into the zip file\n\t- double-click each of the three font files and click the **Install** button for each:##eachofthree\n- change font in VSCode\n\t- the default font is `Consolas, 'Courier New', monospace` which you want to change\n\t- CTRL-P and then type `settings`, click on the main settings file:##andkthearrorw\n\t- as last entry in the JSON code, enter this:\n\t\t------------------------------------------\n\t\t\"editor.fontFamily\": \"'Fira Code iScript', Menlo, monospace\",\n\t\t\"editor.fontLigatures\": true,\n\t\t\"editor.tokenColorCustomizations\": {\n\t\t\t\"textMateRules\": [\n\t\t\t\t{\n\t\t\t\t\t\"scope\": [\n\t\t\t\t\t\t\"comment\",\n\t\t\t\t\t\t\"entity.name.type.class\", \n\t\t\t\t\t\t\"storage.modifier\",\n\t\t\t\t\t\t\"support.class.builtin\",\n\t\t\t\t\t\t\"keyword.control\",\n\t\t\t\t\t\t\"constant.language\",\n\t\t\t\t\t\t\"entity.other.attribute-name\",\n\t\t\t\t\t\t\"string.quoted.single\",\n\t\t\t\t\t\t\"string.quoted.double\",\n\t\t\t\t\t\t\"entity.name.method\",\n\t\t\t\t\t\t\"entity.name.tag\",\n\t\t\t\t\t\t\"string.template\"\n\t\t\t\t\t],\n\t\t\t\t\t\"settings\": {\n\t\t\t\t\t\t\"fontStyle\": \"italic\",\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"window.zoomLevel\": 1\n\t\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-17 00:37:06","systemWhoCreated":"systemUnknown"},{"id":462,"category":"JavaScript","title":"Make five star control which can be clicked to change","body":"- these instructions create a vanilla-JavaScript control that works like this:#gif#starsClickControl\n- create basic HTML page\n- link to Font Awesome CDN\n\t-----------------------\n\t<link rel=\"stylesheet\"\n\ttype=\"text/css\"\n\thref=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t-----------------------\n- show three and two stars with this code:\n\t-------------------------------\n\t<i class=\"fa fa-star\"></i>\n\t<i class=\"fa fa-star-o\"></i>\n\t-------------------------------\n- you should see this:##threeandstowstars\n- style it:\n\t----------------------\n\tbody {\n\t\tpadding: 20px;\n\t}\n\t.stars {\n\t\tdisplay:flex;\n\t}\n\t.stars i {\n\t\tcolor: goldenrod;\n\t\ttext-shadow: 1px 1px 1px #333;\n\t\tfont-size: 3rem;\n\t\tmargin-right: 10px;\n\t}\n\t----------------------\n- add number\n\t------------------------\n\t<div class=\"starControl\">\n\t\t...\n\t\t<div class=\"number\">\n\t\t\t3\n\t\t</div>\n\t</div>\n\t------------------------\n- style it\n\t--------------------------\n\t.starControl {\n\t\tbackground-color: #ddd;\n\t\tpadding: 20px;\n\t\tborder: 1px solid #aaa;\n\t\tborder-radius: 5px;\n\t\twidth: 278px;\n\t}\n\t.number {\n\t\tfont-size: 11rem;\n\t\tcolor: #555;\n\t\ttext-align: center;\n\t}\n\t--------------------------\n- should look like this but is static:##thelooklikestasi\n- make number dynamic\n\t-------------------------------\n\tconst stars = 5;\n\n\tconst numberElem = document.querySelector(\".number\");\n\tnumberElem.innerText = stars;\n\n\t<div class=\"number\"></div>\n\t-------------------------------\n- create stars dynamically based on number\n\t--------------------------------\n\t<div class=\"stars\"></div>\n\n\tconst starsElem = document.querySelector('.stars');\n\n\tstarsElem.innerHTML = '<i class=\"fa fa-star\"></i>'.repeat(stars);\n\t--------------------------------\n- the stars are now dynamic based on the number#starsysbased\n- fill space with empty stars\n\t---------------------------\n\tstarsElem.innerHTML += '<i class=\"fa fa-star\"></i>'.repeat(stars);\n\tstarsElem.innerHTML += '<i class=\"fa fa-star-o\"></i>'.repeat(5 - stars);\n\t---------------------------\n- refactor for upcoming onclick, step 1\n\t---------------------------------\n\tfor (let x = 1; x <= 5; x++) {\n\t\tif (x <= stars) {\n\t\t\tstarsElem.innerHTML += '<i class=\"fa fa-star\"></i>';\n\t\t} else {\n\t\t\tstarsElem.innerHTML += '<i class=\"fa fa-star-o\"></i>';\n\t\t}\n\t}\n\t---------------------------------\n- refactor for upcoming onclick, step 2\n\t--------------------------------------\n\tfor (let x = 1; x <= 5; x++) {\n\t\tlet starClass = '';\n\t\tif (x <= stars) {\n\t\t\tstarClass = 'fa-star';\n\t\t} else {\n\t\t\tstarClass = 'fa-star-o';\n\t\t}\n\t\tstarsElem.innerHTML += `<i class=\"fa ${starClass}\"></i>`;\n\t}\n\t--------------------------------------\n- add onclick with test\n\t-----------------------\n\tconst setStars = (stars) => {\n\t\tconsole.log(stars);\n\t}\n\n\tcursor: pointer;\n\t-----------------------\n- change number when clicked\n\t---------------------------\n\tconst createStars = (stars) => {\n\t\tstarsElem.innerHTML = '';\n\t\tfor (let x = 1; x <= 5; x++) {\n\t\t\tlet starClass = '';\n\t\t\tif (x <= stars) {\n\t\t\t\tstarClass = 'fa-star';\n\t\t\t} else {\n\t\t\t\tstarClass = 'fa-star-o';\n\t\t\t}\n\t\t\tstarsElem.innerHTML += `<i class=\"fa ${starClass}\" onclick=\"setStars(${x})\"></i>`;\n\t\t}\n\t\tnumberElem.innerText = stars;\n\t}\n\n\tconst setStars = (stars) => {\n\t\tcreateStars(stars);\n\t}\n\n\twindow.onload = () => {\n\t\tcreateStars(3);\n\t}\n\t---------------------------\n- the star control should now work like this:#gif#starsClickControl\n- remember number of stars even after browser is closed and opened\n\t- save stars to localStorage on rendering of control\n\t\t----------------------------\n\t\tlocalStorage.setItem('stars', stars);\n\t\t----------------------------\n\t- read stars from localStorage on page load\n\t\t-------------------------------\n\t\tconst stars = localStorage.getItem('stars');\n\t\t-------------------------------\n\t- fix bug in the event stars is not stored in localStorage\n\t\t--------------------------------\n\t\tif(stars === null) stars = 3;\n\t\t--------------------------------\n\t- test in two browsers, each will maintain its own value of stars\n- full code:\n\t----------------------------------------\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t<title>five stars</title>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t\t.stars {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\t\t\t.stars i {\n\t\t\t\tcolor: goldenrod;\n\t\t\t\ttext-shadow: 1px 1px 1px #333;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tmargin-right: 10px;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\t.starControl {\n\t\t\t\tbackground-color: #ddd;\n\t\t\t\tpadding: 20px;\n\t\t\t\tborder: 1px solid #aaa;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\twidth: 270px;\n\t\t\t}\n\t\t\t.number {\n\t\t\t\tfont-size: 11rem;\n\t\t\t\tcolor: #555;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"starControl\">\n\t\t\t<div class=\"stars\"></div>\n\t\t\t<div class=\"number\"></div>\n\t\t</div>\n\t\t<script>\n\t\t\tconst numberElem = document.querySelector(\".number\");\n\t\t\tconst starsElem = document.querySelector('.stars');\n\n\t\t\tconst createStars = (stars) => {\n\t\t\t\tstarsElem.innerHTML = '';\n\t\t\t\tfor (let x = 1; x <= 5; x++) {\n\t\t\t\t\tlet starClass = '';\n\t\t\t\t\tif (x <= stars) {\n\t\t\t\t\t\tstarClass = 'fa-star';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstarClass = 'fa-star-o';\n\t\t\t\t\t}\n\t\t\t\t\tstarsElem.innerHTML += `<i class=\"fa ${starClass}\" onclick=\"setStars(${x})\"></i>`;\n\t\t\t\t}\n\t\t\t\tnumberElem.innerText = stars;\n\t\t\t\tlocalStorage.setItem('stars', stars);\n\t\t\t}\n\n\t\t\tconst setStars = (stars) => {\n\t\t\t\tcreateStars(stars);\n\t\t\t}\n\n\t\t\twindow.onload = () => {\n\t\t\t\tlet stars = localStorage.getItem('stars');\n\t\t\t\tif(stars === null) stars = 3;\n\t\t\t\tcreateStars(stars);\n\t\t\t}\n\t\t</script>\n\t</body>\n\t</html>\n\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-17 01:23:52","systemWhoCreated":"systemUnknown"},{"id":463,"category":"React","title":"Example of using useMemo() in React sites","body":"- this example shows a number of concepts\n\t- how to use a for-loop to emulate a long-running process\n\t- `export default` and be in front of the function name\n\t- you can put classic `function name()` functions at the end of a component file which the component has access to\n\t- theme styles\n\t- how useMemo() works\n\t- changing the theme also rerenders every other control\n- we have a slow function that doesn't change that often\n\t- therefore we need `useMemo()`\n\t- it caches a value so you don't have to input it every time\n\t- if the number doesn't change, we don't have to recalculate\n\t- useMemo() has some overhead\n- referential equality\n\t- when you compare two difference values, it compares reference\n\t- e.g. `themeStyles`\n- how it looks:##usememodarktheme\n- App.js\n\t--------------------------------------\n\timport { useState, useMemo } from 'react';\n\timport './App.scss';\n\n\texport default function App() {\n\t\tconst [number, setNumber] = useState(0);\n\t\tconst [theme, setTheme] = useState('dark');\n\t\tconst doubledNumber = useMemo(() => {\n\t\t\tslowFunction(number);\n\t\t}, [number]);\n\t\tconst themeStyles = useMemo(() => {\n\t\t\treturn {\n\t\t\t\tpadding: '10px',\n\t\t\t\tbackgroundColor: theme === 'dark' ? '#333' : '#eee',\n\t\t\t\tcolor: theme === 'dark' ? '#eee' : '#333'\n\t\t\t}\n\t\t}, [theme]);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<input type=\"number\" value={number} onChange={(e) => setNumber(parseInt(e.target.value))} />\n\t\t\t\t<button onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}>Change Theme</button>\n\t\t\t\t<div style={themeStyles} className=\"info\">\n\t\t\t\t\t<div>Theme: {theme}</div>\n\t\t\t\t\t<div>Doubled number: {doubledNumber}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tfunction slowFunction(num) {\n\t\tfor (let i = 0; i <= 2000000000; i++) { i += 0; }\n\t\treturn num * 2;\n\t}\n\t--------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-17 20:51:12","systemWhoCreated":"systemUnknown"},{"id":464,"category":"React","title":"How to use styled-components in a React site","body":"- note that style-components use **tagged template literals** behind the scenes##theleftrightstyled\n- App.js\n\t----------------------------\n\timport './App.scss';\n\timport SplitScreen from './components/SplitScreen';\n\n\tconst LeftHandComponent = () => {\n\t\treturn <p>Left</p>\n\t};\n\n\tconst RightHandComponent = () => {\n\t\treturn <p>Right</p>\n\t};\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t  <SplitScreen\n\t\t\t\t left={LeftHandComponent} \n\t\t\t\t right={RightHandComponent}\n\t\t\t\t  />\n\t\t\t</div>\n\t\t);\n\t};\n\n\texport default App;\n\t----------------------------\n- SplitScreen.js\n\t-------------------------------\n\timport styled from 'styled-components';\n\n\tconst Container = styled.div`\n\t\tdisplay: flex;\n\t`;\n\n\tconst Pane = styled.div`\n\t\tflex: 1;\n\t\tbackground-color: ${props => props.darkMode ? '#333' : '#eee'};\n\t\tcolor: ${props => props.darkMode ? '#ccc' : '#333'};\n\t\tborder: 1px solid #ccc;\n\t\tmargin: 0 5px 5px 0;\n\t\tpadding: 10px;\n\t`;\n\n\tconst SplitScreen = ({\n\t\tleft: Left,\n\t\tright: Right\n\t}) => {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Pane darkMode>\n\t\t\t\t\t<Left />\n\t\t\t\t</Pane>\n\t\t\t\t<Pane>\n\t\t\t\t\t<Right />\n\t\t\t\t</Pane>\n\t\t\t</Container>\n\t\t)\n\t};\n\n\texport default SplitScreen;\n\t-------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-18 11:17:50","systemWhoCreated":"systemUnknown"},{"id":465,"category":"GitHub","title":"Publish a HTML/CSS/JavaScript site with ES6 modules at GitHub Pages and Netlify","body":"- create a HTML/CSS/JavaScript site such as [this one](https://github.com/edwardtanguay/object-destructuring-assignment)\n- notice it has numerous files and folders with e.g. imported JavaScript modules\n- note that GitHub pages requires that the main page be `index.html`\n- push it to a new GitHub repository\n- go to your new repository at GitHub\n- go to **Settings**\n- on the left, click on **Pages**##thepagesgogogo\n- choose branch, e.g. `master` and click **Save**\n- wait 2-3 minutes and click on the link that is shown##thegithubpage\n- view site here: https://edwardtanguay.github.io/object-destructuring-assignment\n- you can publish at Netlify with all default values: https://object-destructuring-assignment.netlify.app","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-18 22:18:11","systemWhoCreated":"systemUnknown"},{"id":466,"category":"JavaScript","title":"Example of object destructuring assignment used in a HTML/CSS/JavaScript website","body":"- this site shows a pragmatic way **object destructuring assignment** can be used in a website: to map the data from an object (in this example a user) onto data that is displayed in a display control\n\t-----------------------------------\n\tconst displayUserCard = ({ id, username, fullName: { firstName: fname, lastName: lname = '<span class=\"missing\">(none)</span>' }, rights: { canSaveFiles: saveRights } }) => {\n\t\treturn `\n\t\t\t<div class=\"label\">ID:</div>\n\t\t\t<div class=\"data\">${id}</div>\n\t\t\t<div class=\"label\">Username:</div>\n\t\t\t<div class=\"data\">${username}</div>\n\t\t\t<div class=\"label\">First Name:</div>\n\t\t\t<div class=\"data\">${fname}</div>\n\t\t\t<div class=\"label\">Last Name:</div>\n\t\t\t<div class=\"data\">${lname}</div>\n\t\t\t<div class=\"label\">Can save files?</div>\n\t\t\t<div class=\"data\">${saveRights ? \"yes\" : \"no\"}</div>\n\t\t`;\n\t}\n\t-----------------------------------\n- here is how the site looks: ##destruobjeass\t\n- note that this site is also a good example of a well-structured, simple HTML/CSS/JavaScript website with **import modules**, e.g.\n\t- `<script src=\"js/main.js\" type=\"module\" defer></script>`\n\t- `import * as data from './data.js';`\n- index.html\n\t-------------------------------------\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title></title>\n\t\t<script src=\"js/main.js\" type=\"module\" defer></script>\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t</head>\n\t<body>\n\t\t<h1></h1>\n\t\t<div class=\"userCard\"></div>\n\t</body>\n\t</html>\n\t-------------------------------------\n- main.js\n\t-----------------------------------------\n\timport * as data from './data.js';\n\timport displayUserCard from './displayUserCard.js';\n\n\tconst userCardElem = document.querySelector('.userCard');\n\tconst titleElem = document.querySelector('title');\n\tconst h1Elem = document.querySelector('h1');\n\n\tuserCardElem.innerHTML = displayUserCard(data.user); \n\ttitleElem.innerHTML = data.pageTitle; \n\th1Elem.innerHTML = data.pageTitle; \n\t-----------------------------------------\n- you can get all the code to this site at [this repository](https://github.com/edwardtanguay/object-destructuring-assignment)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-18 23:03:34","systemWhoCreated":"systemUnknown"},{"id":467,"category":"React","title":"SplitScreen component in React","body":"- this project shows how to make a component in React that splits the screen into two parts left and right##splitcscreneekjsdf\n- note that the component allows you to create components for it as children##notecompoleftright\n- this example also uses `styled-components`, a library that has an intriguing use of **tagged template literals**, good to grok!\n- App.js\n\t-------------------------------------------\n\timport './App.scss';\n\timport { SplitScreen } from './components/SplitScreen';\n\n\tconst LeftHandComponent = ({ text = \"Menu\" }) => {\n\t\treturn <p>{text}</p>\n\t};\n\n\tconst RightHandComponent = ({ text = \"Content\" }) => {\n\t\treturn <p>{text}</p>\n\t};\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<SplitScreen\n\t\t\t\t\tleftWeight={1}\n\t\t\t\t\trightWeight={4}>\n\t\t\t\t\t<LeftHandComponent />\n\t\t\t\t\t<RightHandComponent />\n\t\t\t\t</SplitScreen>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-------------------------------------------\n- SplitScreen.js\n\t----------------------------------------\n\timport styled from 'styled-components';\n\n\tconst Container = styled.div`\n\t\tdisplay: flex;\n\t`;\n\n\tconst Pane = styled.div`\n\t\tflex: ${props => props.weight};\n\t\tbackground-color: ${props => props.darkMode ? '#333' : '#eee'};\n\t\tcolor: ${props => props.darkMode ? '#ccc' : '#333'};\n\t\tborder: 1px solid #ccc;\n\t\tmargin: 0 5px 5px 0;\n\t\tpadding: 10px;\n\t`;\n\n\texport const SplitScreen = ({\n\t\tchildren,\n\t\tleftWeight = 1,\n\t\trightWeight = 1\n\t}) => {\n\t\tconst [left, right] = children;\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Pane darkMode weight={leftWeight}>\n\t\t\t\t\t{left}\n\t\t\t\t</Pane>\n\t\t\t\t<Pane weight={rightWeight}>\n\t\t\t\t\t{right}\n\t\t\t\t</Pane>\n\t\t\t</Container>\n\t\t)\n\t};\n\t----------------------------------------\n- get the full code at this repository: [edwardtanguay/splitscreen-component-react](https://github.com/edwardtanguay/splitscreen-component-react)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-19 00:35:29","systemWhoCreated":"systemUnknown"},{"id":468,"category":"React","title":"How to make components that send components as props","body":"- you can get the code here: [edwardtanguay/howto-component-props](https://github.com/edwardtanguay/howto-component-props)\n- note this syntax:\n\t--------------------------\n\t<ItemComponent key={i} {...{ [itemIdCode]: item }} />\n\t--------------------------\n- app looks like this:##thappforcomponeprops\n- App.js\n\t---------------------------\n\timport './App.scss';\n\timport employees from './data/employees.json';\n\n\tconst SimpleList = ({ items, itemIdCode, ItemComponent }) => {\n\t\treturn (\n\t\t\t<div className=\"simpleList\">\n\t\t\t\t{items.map((item, i) => (\n\t\t\t\t\t<ItemComponent key={i} {...{ [itemIdCode]: item }} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst NumberedList = ({ items, itemIdCode, ItemComponent }) => {\n\t\treturn (\n\t\t\t<div className=\"numberedList\">\n\t\t\t\t{items.map((item, i) => (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"itemArea\">\n\t\t\t\t\t\t\t<h3>{i + 1}.</h3>\n\t\t\t\t\t\t\t<ItemComponent key={i} {...{ [itemIdCode]: item }} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst Employee = ({ employee }) => {\n\t\tconst { firstName, lastName } = employee;\n\t\treturn (\n\t\t\t<div className=\"employee\">\n\t\t\t\t<div>{firstName} {lastName}</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<section className=\"container\">\n\t\t\t\t\t<SimpleList items={employees} itemIdCode=\"employee\" ItemComponent={Employee} />\n\t\t\t\t\t<NumberedList items={employees} itemIdCode=\"employee\" ItemComponent={Employee} />\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t---------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-20 11:02:02","systemWhoCreated":"systemUnknown"},{"id":469,"category":"React","title":"How to create a custom modal in React","body":"- you click on the button, screen is faded and model box pops up##howtoModalReactCustom\n- this doesn't use any npm packages\n- you can get the code for this project here: [edwardtanguay/howto-custom-modal-react](https://github.com/edwardtanguay/howto-custom-modal-react)\n- notice the SASS syntax in the styled-components##noticeSassinCust\n- **Modal.js**\n\t----------------------------------------------\n\timport { useState } from 'react';\n\timport styled from 'styled-components';\n\n\tconst ModalBackground = styled.div`\n\tbackground: rgba(100,100,100, .8);\n\tposition: fixed;\n\tz-index: 1;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\toverflow: auto;\n\t`;\n\n\tconst ModalBody = styled.div`\n\tbackground: rgba(255, 255, 255, 1);\n\tmargin: 10% auto;\n\tpadding: 20px;\n\twidth: 50%;\n\tborder-radius: 5px;\n\tz-index: 2;\n\t.closeButton {\n\t\tfloat: right;\n\t}\n\t`;\n\n\tconst Modal = ({ children }) => {\n\t\tconst [shouldShow, setShouldShow] = useState(false);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button onClick={() => setShouldShow(true)}>Show Information</button>\n\n\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi, nostrum sint ex adipisci praesentium cumque necessitatibus magnam animi dolores beatae harum tenetur, porro modi aliquid quia dolorem architecto assumenda cupiditate.</p>\n\t\t\t\t{shouldShow && (\n\t\t\t\t\t<ModalBackground onClick={() => setShouldShow(false)}>\n\t\t\t\t\t\t<ModalBody onClick={e => e.stopPropagation()}>\n\t\t\t\t\t\t\t<button className=\"closeButton\" onClick={() => setShouldShow(false)}>X</button>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</ModalBody>\n\t\t\t\t\t</ModalBackground>\n\t\t\t\t)}\n\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi, nostrum sint ex adipisci praesentium cumque necessitatibus magnam animi dolores beatae harum tenetur, porro modi aliquid quia dolorem architecto assumenda cupiditate.</p>\n\t\t\t</>\n\t\t)\n\t}\n\n\texport default Modal;\n\t----------------------------------------------\n- **App.js**\n\t--------------------------------------------\n\timport './App.scss';\n\timport Modal from './components/Modal';\n\n\tfunction App() {\n\t  return (\n\t\t<div className=\"App\">\n\t\t\t  <Modal>\n\t\t\t\t  <h2>Information</h2>\n\t\t\t\t  <section className=\"modalContent\">\n\t\t\t\t\t  This is the information.\n\t\t\t\t  </section>\n\t\t\t</Modal>\n\t\t</div>\n\t  );\n\t}\n\n\texport default App;\n\t--------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-20 13:39:33","systemWhoCreated":"systemUnknown"},{"id":470,"category":"react","title":"How to create a container component that loads data for its child components","body":"- *\"With container components, we don't want our components to know where their data is coming from or how to manage it. We just want our components to be dumb, take their data from props, and display whatever they need to display.\"*\n- this example gets data (books) from a backend API, passes it onto a container component which provides this data to all of its children:##thechildrendatacomp\n- the output of this example looks like this:##bookssectioncomponentyes\n- note we use **axios** instead of fetch\n- note the loading message implementation with `<FaSpinner className=\"spinner\" />`, if you don't need an icon, just use this\n\t-----------------------------------\n\treturn books.length > 0 ? (\n\t\t...\n\t) : <div>Loading...</div>;\n\t-----------------------------------\n- note the `import { BookLoader } from './components/BooksLoader';` syntax for component loading so you don't need `export default ...` at the end of component files\n- you can get the full code of this example here: [edwardtanguay/howto-container-components](https://github.com/edwardtanguay/howto-container-components)\n- **App.js**\n\t----------------------------------\n\timport './App.scss';\n\timport { BooksLoader } from './components/BooksLoader';\n\timport { BooksSectionTitle } from './components/BooksSectionTitle';\n\timport { BooksSectionContent } from './components/BooksSectionContent';\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<BooksLoader>\n\t\t\t\t\t<BooksSectionTitle />\n\t\t\t\t\t<BooksSectionContent />\n\t\t\t\t</BooksLoader>\n\t\t\t</div>\n\t\t)\n\t}\n\texport default App;\n\t----------------------------------\n- **BooksLoader.js**\n\t-----------------------------------\n\timport React, { useState, useEffect } from \"react\";\n\timport axios from 'axios';\n\timport { FaSpinner } from 'react-icons/fa';\n\n\texport const BooksLoader = ({ children }) => {\n\t\tconst [books, setBooks] = useState([]);\n\n\t\tconst url = 'http://localhost:3003';\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await axios.get(`${url}/books`);\n\t\t\t\tif (response.statusText === 'OK') {\n\t\t\t\t\tsetBooks(prev => ([...prev, ...response.data.books]));\n\t\t\t\t}\n\t\t\t})();\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{\n\t\t\t\t\tbooks.length === 0 && (\n\t\t\t\t\t\t<FaSpinner className=\"spinner\" />\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t{\n\t\t\t\t\tbooks.length > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{React.Children.map(children, (child => {\n\t\t\t\t\t\t\t\tif (React.isValidElement(child)) {\n\t\t\t\t\t\t\t\t\treturn React.cloneElement(child, { books })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t</>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</>\n\t\t)\n\t}\n\t-----------------------------------\n- **BooksSectionTitle.js**\n\t----------------------------\n\texport const BooksSectionTitle = ({ books }) => {\n\t\treturn <h2>There are {books.length} books:</h2>\n\t}\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-20 16:47:49","systemWhoCreated":"systemUnknown"},{"id":471,"category":"React","title":"How to use CreateRef to access form variables in React","body":"- note this is using Bootstrap 5 (CDN link in `index.html`)\n- note that text fields use Bootstrap 5 floating labels, i.e. `form-floating`##thefloatfieldskj\n- you can get the code to this example here: [edwardtanguay/howto-createRef-react](https://github.com/edwardtanguay/howto-createRef-react)\n- note that for radio and checkbox controls, you need to process the individual variables as with classic HTML DOM forms\n- finished site and resulting console.log output looks like this:##createRefExample\n- **App.js**\n\t-------------------------------\n\timport './App.scss';\n\timport { UserInfoForm } from './components/UserInfoForm';\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<UserInfoForm/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-------------------------------\n- **UserInfoForm.js**\n\t------------------------------------\n\timport React from 'react';\n\n\texport const UserInfoForm = () => {\n\n\t\tconst field_firstName = React.createRef();\n\t\tconst field_lastName = React.createRef();\n\t\tconst field_color_red = React.createRef();\n\t\tconst field_color_blue = React.createRef();\n\t\tconst field_color_yellow = React.createRef();\n\t\tconst field_language_english = React.createRef();\n\t\tconst field_language_german = React.createRef();\n\t\tconst field_language_french = React.createRef();\n\n\t\tconst handleSubmit = e => {\n\t\t\tconsole.log('field_firstName', field_firstName.current.value);\n\t\t\tconsole.log('field_lastName', field_lastName.current.value);\n\t\t\tconsole.log('field_color_red', field_color_red.current.checked);\n\t\t\tconsole.log('field_color_blue', field_color_blue.current.checked);\n\t\t\tconsole.log('field_color_yellow', field_color_yellow.current.checked);\n\t\t\tconsole.log('field_language_english', field_language_english.current.checked);\n\t\t\tconsole.log('field_language_german', field_language_german.current.checked);\n\t\t\tconsole.log('field_language_french', field_language_french.current.checked);\n\t\t\te.preventDefault();\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"card\">\n\t\t\t\t<div className=\"card-header\">User Information</div>\n\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t<div className=\"container px-5 my-5\">\n\t\t\t\t\t\t<form id=\"infoForm\" onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<div className=\"form-floating mb-3\">\n\t\t\t\t\t\t\t\t<input className=\"form-control\" id=\"firstName\" type=\"text\" placeholder=\"First Name\" ref={field_firstName} />\n\t\t\t\t\t\t\t\t<label htmlFor=\"firstName\">First Name</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"form-floating mb-3\">\n\t\t\t\t\t\t\t\t<input className=\"form-control\" id=\"lastName\" type=\"text\" placeholder=\"Last Name\" ref={field_lastName} />\n\t\t\t\t\t\t\t\t<label htmlFor=\"lastName\">Last Name</label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t<label className=\"form-label d-block\">Color</label>\n\t\t\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t\t\t<input className=\"form-check-input\" id=\"red\" type=\"radio\" name=\"color\" ref={field_color_red} />\n\t\t\t\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"red\">Red</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t\t\t<input className=\"form-check-input\" id=\"blue\" type=\"radio\" name=\"color\" ref={field_color_blue} />\n\t\t\t\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"blue\">Blue</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t\t\t<input className=\"form-check-input\" id=\"yellow\" type=\"radio\" name=\"color\" ref={field_color_yellow} />\n\t\t\t\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"yellow\">Yellow</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t<label className=\"form-label d-block\">Language</label>\n\t\t\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t\t\t<input className=\"form-check-input\" id=\"english\" type=\"checkbox\" name=\"language\" ref={field_language_english} />\n\t\t\t\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"english\">English</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t\t\t<input className=\"form-check-input\" id=\"german\" type=\"checkbox\" name=\"language\" ref={field_language_german} />\n\t\t\t\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"german\">German</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"form-check form-check-inline\">\n\t\t\t\t\t\t\t\t\t<input className=\"form-check-input\" id=\"french\" type=\"checkbox\" name=\"language\" ref={field_language_french} />\n\t\t\t\t\t\t\t\t\t<label className=\"form-check-label\" htmlFor=\"french\">French</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"d-grid\">\n\t\t\t\t\t\t\t\t<button className=\"btn btn-primary btn-lg\" id=\"submitButton\" type=\"submit\">Submit</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-20 21:59:34","systemWhoCreated":"systemUnknown"},{"id":472,"category":"React","title":"How to make a controlled modal in React","body":"- uncontrolled components keep track of their own state and release data only when event occurs, whereas controlled components are have their data managed for them by their parents\n- this is an example of a controlled modal, where as [this is an example of an uncontrolled modal](https://onespace.netlify.app/howtos?id=469)\n- both examples look and function the same, but the uncontrolled modal has the advantage of being able to be tested more easily\n- note that the `children` prop is a reserved word and can be placed at any position in the props list\n- here is what the modal looks like when being used:##themodalcontrolledsdf\n- you can get the full code here: [edwardtanguay/howto-showmodel-controlled-react](https://github.com/edwardtanguay/howto-showmodel-controlled-react)\n- **App.js**\n\t--------------------------------\n\timport { useState } from 'react';\n\timport { InfoModal } from './components/infoModal';\n\timport './App.scss';\n\n\tfunction App() {\n\t\tconst [shouldShowModal, setShouldShowModal] = useState(false);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<InfoModal shouldShow={shouldShowModal} onRequestClose={() => setShouldShowModal(false)}>\n\t\t\t\t\t<h2>Info</h2>\n\t\t\t\t\t<p>This is the info.</p>\n\t\t\t\t</InfoModal>\n\t\t\t\t<button onClick={() => setShouldShowModal(!shouldShowModal)}>\n\t\t\t\t\t{shouldShowModal ? 'Hide Modal' : 'Show Modal'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n\n\texport default App;\n\t--------------------------------\n- **infoModal.js**\n\t---------------------------------------------\n\timport styled from 'styled-components';\n\n\tconst ModalBackground = styled.div`\n\tbackground: rgba(100,100,100, .8);\n\tposition: fixed;\n\tz-index: 1;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\toverflow: auto;\n\t`;\n\n\tconst ModalBody = styled.div`\n\tbackground: rgba(255, 255, 255, 1);\n\tmargin: 10% auto;\n\tpadding: 20px;\n\twidth: 50%;\n\tborder-radius: 5px;\n\tz-index: 2;\n\t.closeButton {\n\t\tfloat: right;\n\t}\n\t`;\n\n\texport const InfoModal = ({ shouldShow, onRequestClose, children}) => {\n\t\treturn shouldShow ? (\n\t\t\t<ModalBackground onClick={onRequestClose}>\n\t\t\t\t<ModalBody onClick={e => e.stopPropagation()}>\n\t\t\t\t\t<button onClick={onRequestClose}>Close</button>\n\t\t\t\t\t{children}\n\t\t\t\t</ModalBody>\n\t\t\t</ModalBackground>\n\t\t) : null;\n\t};\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-21 10:04:24","systemWhoCreated":"systemUnknown"},{"id":473,"category":"React Design Patterns","title":"How to create an onboarding flow component in React","body":"- demo:#gif#howtoOnboardingDemo\n- onboarding is a design pattern to display a series of panels that a user clicks through to read information or fill out information\n- code repository is here: [edwardtanguay/howto-onboarding-component-react](https://github.com/edwardtanguay/howto-onboarding-component-react)\n- note this code that returns the current component in the onboarding flow\n\t--------------------------------------------\n\tconst currentChild = React.Children.toArray(children)[currentIndex];\n\n\tif (React.isValidElement(currentChild)) {\n\t\treturn React.cloneElement(currentChild, { goToNext });\n\t}\n\t--------------------------------------------\n- autoFocus for each step is not implemented, perhaps use [useRef](https://onespace.netlify.app/howtos?id=412)\n- Materialize is used for styling, CDN links in index.html\n- note that step 3 is conditional based on step 2\n- **OnboardingFlow.js**\n\t-------------------------------\n\timport React from 'react';\n\n\texport const OnboardingFlow = ({ children, currentIndex, onNext }) => {\n\t\tconst currentChild = React.Children.toArray(children)[currentIndex];\n\n\t\tconst gotoNext = stepData => {\n\t\t\tonNext(stepData, currentChild.props.isLastStep);\n\t\t}\n\n\t\tif (React.isValidElement(currentChild)) {\n\t\t\treturn React.cloneElement(currentChild, { gotoNext });\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t-------------------------------\n- **App.js**\n\t---------------------------------------\n\timport React, { useState, useEffect } from 'react';\n\timport './App.scss';\n\timport { OnboardingFlow } from './components/OnboardingFlow';\n\n\tconst StepOne = ({ gotoNext }) => {\n\t\tconst field_name = React.createRef();\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>Name: <input type=\"text\" ref={field_name} /></p>\n\t\t\t\t<button onClick={() => gotoNext({ name: field_name.current.value })}>Next</button>\n\t\t\t</>\n\t\t)\n\t};\n\n\tconst StepTwo = ({ gotoNext }) => {\n\t\tconst field_age = React.createRef();\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>Age: <input type=\"text\" ref={field_age} /></p>\n\t\t\t\t<button onClick={() => gotoNext({ age: field_age.current.value })}>Next</button>\n\t\t\t</>\n\t\t)\n\t};\n\n\tconst StepThree = ({ gotoNext }) => (\n\t\t<>\n\t\t\t<p>Contratulations, you qualify for our senior discount!</p>\n\t\t\t<button onClick={() => gotoNext({})}>Next</button>\n\t\t</>\n\t);\n\n\tconst StepFour = ({ gotoNext }) => {\n\t\tconst field_city = React.createRef();\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>City: <input type=\"text\" ref={field_city} /></p>\n\t\t\t\t<button onClick={() => gotoNext({ city: field_city.current.value })}>Next</button>\n\t\t\t</>\n\t\t)\n\t};\n\n\tfunction App() {\n\t\tconst [onboardingData, setOnboardingData] = useState({});\n\t\tconst [currentIndex, setCurrentIndex] = useState(0);\n\t\tconst [message, setMessage] = useState('');\n\t\tconst [finished, setFinished] = useState(false);\n\n\n\t\tuseEffect(() => {\n\t\t\tif (finished) setMessage(`finished, send this to backend: ${JSON.stringify(onboardingData, null, 2)}`);\n\t\t}, [finished, onboardingData])\n\n\t\tconst onNext = (stepData, isLastStep = false) => {\n\n\t\t\tsetOnboardingData({ ...onboardingData, ...stepData });\n\t\t\tsetCurrentIndex(currentIndex + 1);\n\t\t\tif (isLastStep) setFinished(true);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{message !== '' && (\n\t\t\t\t\t<pre className=\"message\">{message}</pre>\n\t\t\t\t)}\n\t\t\t\t{message === '' && (\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col s12 m6\">\n\t\t\t\t\t\t\t<div className=\"card blue-grey darken-3\">\n\t\t\t\t\t\t\t\t<div className=\"card-content white-text\">\n\t\t\t\t\t\t\t\t\t<OnboardingFlow\n\t\t\t\t\t\t\t\t\t\tcurrentIndex={currentIndex}\n\t\t\t\t\t\t\t\t\t\tonNext={onNext}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<StepOne />\n\t\t\t\t\t\t\t\t\t\t<StepTwo />\n\t\t\t\t\t\t\t\t\t\t{Number(onboardingData.age) >= 60 && <StepThree />}\n\t\t\t\t\t\t\t\t\t\t<StepFour isLastStep={true} />\n\t\t\t\t\t\t\t\t\t</OnboardingFlow>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-23 14:01:26","systemWhoCreated":"systemUnknown"},{"id":474,"category":"React","title":"How to create a higher-order-component (HOC) in React for data loading","body":"- higher order components \n\t- instead of returning JSX as most components, HOCs return a component\n\t- they add another level, somewhat like the Factory pattern in OOP\n\t- they are used to share behavior between components\n\t- HOCs don't start with a capital letter and often start with the word `with` because they inject the component *with* some specific data, behavior or feature\n- this example displays two components which are produced by an HOC which creates and passes them a users prop##thehocforuserswith\n- note that in this case data is gotten from a JSON file but would usually be would normally be retrieved from e.g. an API via fetch or axios\n- **App.js**\n\t---------------------------\n\timport './App.scss';\n\timport { SummaryList} from './components/SummaryList';\n\timport { FullInfoList } from './components/FullInfoList';\n\timport { withUsers } from './components/withUsers';\n\n\tconst SummaryListWithUsers = withUsers(SummaryList);\n\tconst FullInfoListWithUsers = withUsers(FullInfoList);\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>User Info</h1>\n\t\t\t\t<SummaryListWithUsers title=\"Summary List\" />\n\t\t\t\t<FullInfoListWithUsers title=\"Full Info List\" />\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t---------------------------\n- **withUsers.js**\n\t-------------------------------\n\timport users from '../data/users.json';\n\n\texport const withUsers = Component => {\n\t\treturn (props) => {\n\t\t\treturn <Component {...props} users={users} />\n\t\t}\n\t}\n\t-------------------------------\n- **SummaryList.js**\n\t----------------------------------\n\texport const SummaryList = ({ title, users }) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h2>{title}</h2>\n\t\t\t\t{users.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={i} className=\"user\">\n\t\t\t\t\t\t\t<div className=\"name\">{user.name}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</>\n\t\t)\n\t}\n\t----------------------------------\n- you can get the full code for this example here: [edwardtanguay/howto-highOrderComponent-react](https://github.com/edwardtanguay/howto-highOrderComponent-react)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-24 00:14:33","systemWhoCreated":"systemUnknown"},{"id":475,"category":"Webpack","title":"Webpack site that bundles HTML, SASS, custom JavaScript modules, npm modules, and reads local JSON and external API data","body":"- this project is meant to get you started with Webpack by providing a site that solves many of the features a modern website has to solve: components, dynamical JavaScript  injection, SASS, loading data from local JSON, fetching data from external APIs, bundling the site and deploying to an online CDN\n- the site looks like this:##webpackHowtojamstackall\n- this site can be published in minutes at CDN servers\n\t- Netlify:\n\t\t- Build command: `npm run build`\n\t\t- Publish directory: `dist/`\n\t\t- https://webpackjamstackmodulesnpm.netlify.app\n\t- Vercel\n\t\t- Build command: `npm run build`\n\t\t- Output directory: `dist`\n\t\t- https://webpack-jamstack-modules-npm.vercel.app\n- you can find the **full code to this project** at this repository: [edwardtanguay/webpackJamstackModulesNpm](https://github.com/edwardtanguay/webpackJamstackModulesNpm)\n- it builds as `mode=development` locally and as `mode=production` on CDN servers\n\t- if you publish it to GitHub Pages, be sure to make a production build locally and then copy that to a repository\n\t\t- note this could be automated as well\n- I got started creating this site with [this Fireship video](https://www.youtube.com/watch?v=5IG4UmULyoA) which is the most straightforward explanation how to set up a simple Webpack bundling environment working that I've seen\n- features\n\t- organization somewhat like create-react-app##theorgancra\n\t- uses axios instead of fetch\n\t- you can place images in the `/src/html/images` folder and they will be copied to `/dist` on build\n\t- JavaScript can be injected (`tools/insertJavaScriptOnPage.js`) so that components can have interactivity##interactivityjscomp\n\t- SASS only: allows SASS files without creating css files##showsassonly\n\t- hot-loading: changes in any file but index.html will trigger the Browser to refresh\n\t- Emmet: VSCode provides emmet suggestions in a .js file while typing within a string literal\n\t\t- although the emmet `.` creates React-style `className` instead of `class`\n\t- custom components one recognizes a React-like structure##onerecogreactlike\n\t- loading API data was solved by making the component asynchronous and using `async/await`##theasyncshowit\n- functionality that could be added to this site:\n\t- TypeScript\n\t- responsive design","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-27 14:40:08","systemWhoCreated":"systemUnknown"},{"id":477,"category":"React","title":"How to create a higher-order component that wraps a component and displays a spinner icon while its component loads","body":"- this example shows you how to wrap a component with a HOC that displays a spinner while that component's data loads\n- this example only simulates the loading, i.e. a wait from from 1-5 seconds for each component it loads\n- there are two components: Books and Users\n- you can **clone the full code** at this repository: [edwardtanguay/howto-hoc-withLoading](https://github.com/edwardtanguay/howto-hoc-withLoading)\n- the app looks like this:#gif#withloadingHowtoAnd2\n- **App.js**\n\t------------------------------\n\timport './App.scss';\n\timport { Books } from './components/books';\n\timport { Users } from './components/users';\n\timport { withLoading } from './hocs/withLoading';\n\n\tconst WithLoadingBooks = withLoading(Books, 'Loading books...');\n\tconst WithLoadingUsers = withLoading(Users, 'Loading users...');\n\n\tfunction App() {\n\t  return (\n\t\t<div className=\"App\">\n\t\t\t<WithLoadingBooks/>\n\t\t\t<WithLoadingUsers/>\n\t\t</div>\n\t  );\n\t}\n\n\texport default App;\n\t------------------------------\n- **withLoading.js**\n\t-----------------------------------\n\timport { useState, useEffect } from 'react';\n\timport { FaSpinner } from 'react-icons/fa';\n\n\tconst Loading = ({message}) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h2>{message}</h2>\n\t\t\t\t<p><FaSpinner className=\"spinner\" /></p>\n\t\t\t</>\n\t\t)\n\t};\n\n\texport const withLoading = (Component, loadingMessage) => (props) => {\n\t\tconst [isLoading, setIsLoading] = useState(true);\n\t\tconst secondsToWait = Math.floor(Math.random() * 4000) + 1000;\n\t\tuseEffect(() => {\n\t\t\tsetTimeout(() => setIsLoading(false), secondsToWait);\n\t\t}, []);\n\t\treturn isLoading ? <Loading message={loadingMessage} /> : <Component {...props} />;\n\t};\n\t-----------------------------------\n- **Books.js**\n\t---------------------------------------\n\texport const Books = () => {\n\t\treturn (\n\t\t\t<>\n\t\t\t<h2>Books</h2>\n\t\t\t<p>These are the books.</p>\n\t\t\t</>\n\t\t)\n\t}\n\t---------------------------------------\n- **Users.js**\n\t-------------------------------------------\n\texport const Users = () => {\n\t\treturn (\n\t\t\t<>\n\t\t\t<h2>Users</h2>\n\t\t\t<p>These are the users.</p>\n\t\t\t</>\n\t\t)\n\t}\n\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2021-12-27 19:00:52","systemWhoCreated":"systemUnknown"},{"id":478,"category":"Gatsby","title":"Build a two-page website with Gatsby and host at Netlify","body":"- these instructions will show you how to get a Gatsby website up and running, including:\n\t- add data to the `gatsby-config.js` file and retrieve it with GraphQL\n\t- install and use SASS\n\t- add multiple pages with nav menu\n\t- use `<Layout>` to create header and footer that shows on each page \n\t- use `<Seo>` to display page title in tab header\n\t- use performance-optimized `<StaticImage>`\n\t- deploy site at Netlify\n\t- use this site in the future as a Gatsby starter site\n- if you need an overview of what Gatsby is, see [these notes](https://onespace.netlify.app/techItems?id=384)\n- sample Gatsby sites made with this howto\n\t- 2022-01-04\n\t\t- code: [edwardtanguay/gatsby-edward-starter-site](https://github.com/edwardtanguay/gatsby-edward-starter-site)\n\t\t- site: [gatsby-edward-starter-site.netlify.app](https://gatsby-edward-starter-site.netlify.app)\n\t\t- site looks like this:#gif#gatsbyshowstarteredwww\n\t- 2022-05-31\n\t\t- code: [edwardtanguay/gatsby-simple-site2](https://github.com/edwardtanguay/gatsby-simple-site2)\n\t\t- site: [gatsby-simple-site2.netlify.app](https://gatsby-simple-site2.netlify.app)\n\t\t- site looks like this:#gif#gatsby222ok\n- install latest version of Gatsby CLI globally\n\t- find out if you have it: `npm list -g --depth=0`\n\t- if so, uninstall it: `npm un -g gatsby-cli`\n\t- reinstall: `npm i -g gatsby-cli`\n\t- check version again: `npm list -g --depth=0`\n- create a default Gatsby site\n\t- go to webs directory\n\t- `gatsby new gatsby-simple-site` (this will create a directory one level below called `gatsby-simple-site`)\n\t\t- takes around 2 minutes\n- open in VSCode\n\t- `cd gatsby-simple-site`\n\t- `code .`\n\t- look around, looks create-react-app-like\n- start website\n\t- `npm start`\n\t- if you get this error in Firefox:##thefirstfoxgats\n\t- fix it like this:##fixed8000gatsby\n\t- notice there are now 4 other pages to click on (2022-05-31) including TypeScript, a server-side-rendered page, and a deferred-static-generation page, worth exploring##notice5pages\n- explore code\n\t- note that it is hot-loading like create-react-app or Live Server\n\t- `index.js` \n\t\t- change text\n\t\t- notice **StaticImage** is from Gatsby\n\t\t\t- change `width` and `quality`\n\t\t\t- add a new jpg image to `src/images`\n\t\t\t- add `transformOptions={{grayscale: true, rotate: 90}}` and edit values\n\t\t\t- StaticImage is a way to optimize speed and performance of the website\n\t\t- notice **Link** is also from Gatsby\n\t- `page-2.js`\n\t\t- notice how `<Layout>` works\n\t\t\t- add `<hr/>` before and after children\n\t\t\t- change text in footer: \"This site was built\"\n\t\t\t- notice how GraphQL is used in Gatsby:\n\t\t\t\t- add subtitle to `gatsby-config.js`, add to GraphQL query, then use in header (restart is required)##thewaygraphql\n\t\t- notice how `<Seo>` works\n\t\t\t- add subtitle:##addsubtitletoseo\n\t\t- explore server-side-rendering page\n\t\t- explore deferred-static-generation page\n- customize site content\n\t- **index.js**\n\t\t- Seo \"Home\" to \"Welcome\"\n\t\t- delete links and moreLinks\n\t\t- leave samplePageLinks\n\t\t- links to layout and add `<nav>`\n\t- **layout.js**\n\t\t- remove header\n\t\t\t- replace with `<h1>`\n\t\t- remove footer\n\t- **page-2.js**\n\t\t- rename to `about.js`\n\t\t- simply this and index.js to one sentence\n\t- site should look like this:##gatsbywithsomestyleing\n- customize site styling\n\t- install SASS\n\t\t- `npm i sass gatsby-plugin-sass` (over a minute)\n\t\t- in `gatsby-config.js`, add to plugins: `gatsby-plugin-sass`\n\t- create **styles/reset.scss**\n\t\t----------------------------------\n\t\thtml, body, div, span, applet, object, iframe,\n\t\th1, h2, h3, h4, h5, h6, p, blockquote, pre,\n\t\ta, abbr, acronym, address, big, cite, code,\n\t\tdel, dfn, em, img, ins, kbd, q, s, samp,\n\t\tsmall, strike, strong, sub, sup, tt, var,\n\t\tb, u, i, center,\n\t\tdl, dt, dd, ol, ul, li,\n\t\tfieldset, form, label, legend,\n\t\ttable, caption, tbody, tfoot, thead, tr, th, td,\n\t\tarticle, aside, canvas, details, embed, \n\t\tfigure, figcaption, footer, header, hgroup, \n\t\tmenu, nav, output, ruby, section, summary,\n\t\ttime, mark, audio, video {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tborder: 0;\n\t\t\tfont-size: 100%;\n\t\t\tfont: inherit;\n\t\t\tvertical-align: baseline;\n\t\t}\n\t\tarticle, aside, details, figcaption, figure, \n\t\tfooter, header, hgroup, menu, nav, section {\n\t\t\tdisplay: block;\n\t\t}\n\t\tbody {\n\t\t\tline-height: 1;\n\t\t}\n\t\tol, ul {\n\t\t\tlist-style: none;\n\t\t}\n\t\tblockquote, q {\n\t\t\tquotes: none;\n\t\t}\n\t\tblockquote:before, blockquote:after,\n\t\tq:before, q:after {\n\t\t\tcontent: '';\n\t\t\tcontent: none;\n\t\t}\n\t\ttable {\n\t\t\tborder-collapse: collapse;\n\t\t\tborder-spacing: 0;\n\t\t}\n\t\t----------------------------------\n\t- styles should be completely reset now:##gatsresetted\n\t- add **main.scss**\n\t\t--------------------------------------\n\t\tbody {\n\t\t\tfont-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\n\t\t\th1 {\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tpadding: 10px 10px 10px 25px;\n\t\t\t}\n\t\t\tnav {\n\t\t\t\tdisplay: flex;\n\t\t\t\tbackground-color: #777;\n\t\t\t\tpadding: 3px 0 5px 20px;\n\t\t\t\tfont-size: 1.3rem;\n\t\t\t\ta {\n\t\t\t\t\tmargin-left: 10px;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\t\t\t\t[aria-current]:not([aria-current=\"false\"]) {\n\t\t\t\t\tcolor: Yellow;\n\t\t\t\t\ttext-shadow: 1px 1px 1px #000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmain {\n\t\t\t\tpadding: 20px 20px 20px 30px;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tfont-size: 1.2rem;\n\t\t\t}\n\t\t}\n\t\t--------------------------------------\n- index.js\n\t---------------------------------\n\timport '../styles/reset.scss';\n\timport '../styles/main.scss';\t\n\t---------------------------------\n- add image\n\t- save image to `src/images/project.png`\n\t- add `import { StaticImage } from \"gatsby-plugin-image\"`\n\t- add the static image:\n\t\t----------------------------------------\n\t\t<StaticImage src=\"../images/project.png\" alt=\"project\" aspectRatio={3 / 2}\n\t\t\twidth={200}\n\t\t\ttransformOptions={{ grayscale: false, rotate: 0 }}\n\t\t/>\n\t\t----------------------------------------\n\t- site should now look like this:##gatsnowwithgraphic\n- delete everything you don't need\n\t- `/images`\n\t\t- the astronaut image\n\t\t- (don't delete the gatsby icon)\n\t- two lock files\n\t- `README.md`\n- if site is broken, try:\n\t- `rm -rf node_modules`\n\t- `npm i`\n\t- run `gatsby clean`\n- publish to Netlify\n\t- push to GitHub repository\n\t- set up at Netlify\n\t\t- use all default settings\n\t\t- takes 2 minutes##andthenetlifgat\n- learn more\n\t- see the starters: [gatsbyjs.com/starters](https://www.gatsbyjs.com/starters)\n\t- see the plugins: [gatsbyjs.com/plugins](https://www.gatsbyjs.com/plugins)\n\t- see the documentation: [gatsbyjs.com/docs/how-to/](https://www.gatsbyjs.com/docs/how-to)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-31 07:39:25","systemWhoCreated":"systemUnknown"},{"id":480,"category":"Socket.io","title":"How to create a JS/DOM chat application with Socket.io","body":"- This application will show you the basics of using Socket.io to create a website on which multiple users can interact with each other in real time\n- here is a demonstration of how the site works:#gif#thechatappworkingok\n- you can get the full code of this application here: [edwardtanguay/socketio-basic-chat](https://github.com/edwardtanguay/socketio-basic-chat)\n- basically there are two parts to this app, the backend (`server.js`) and the frontend (`index.html`)\n- **server.js**\n\t----------------------------------------\n\timport http from 'http';\n\timport path from 'path';\n\timport express from 'express';\n\timport { Server as socketIO } from 'socket.io';\n\n\tconst app = express();\n\tconst PORT = 5011;\n\tconst __dirname = path.resolve(path.dirname(''));\n\tconst server = http.Server(app);\n\tconst io = new socketIO(server);\n\n\tconst quotes = [\n\t\t\"The fact that I'm using words doesn’t necessarily mean that I’m saying anything.\",\n\t\t\"There is no communication that is so simple that it cannot be misunderstood.\",\n\t\t\"Don't assume that prior communication has been effective and that people get it.\",\n\t\t\"Your aim in conversation should not be to persuade, but to clarify.\",\n\t\t\"Rational discussion is useful only when there is a significant base of shared assumptions.\",\n\t\t\"Every problem seems to start with bad communication. Someone isn't listening.\",\n\t\t\"Good communication is just as stimulating as black coffee, and just as hard to sleep after.\"\n\t];\n\tlet currentQuoteIndex = 0;\n\n\tapp.get('/', (req, res) => {\n\t\tres.sendFile(__dirname + '/public/index.html');\n\t});\n\n\tconst showQuote = (socket) => {\n\t\tconst quote = quotes[currentQuoteIndex];\n\t\tsocket.emit('quote', quote);\n\t\tcurrentQuoteIndex++;\n\t\tif (currentQuoteIndex > quotes.length - 1) {\n\t\t\tcurrentQuoteIndex = 0;\n\t\t}\n\t}\n\n\tio.on('connection', (socket) => {\n\n\t\tshowQuote(socket);\n\n\t\tsetInterval(() => {\n\t\t\tshowQuote(socket);\n\t\t}, 7000);\n\n\t\tsocket.on('greeting', (data) => {\n\t\t\tconsole.log(data);\n\t\t});\n\n\t\tsocket.on('message', (data) => {\n\t\t\tio.emit('message', data);\n\t\t});\n\t})\n\n\tserver.listen(PORT, () => {\n\t\tconsole.log(`listening on port http://localhost:${PORT}`);\n\t})\n\t----------------------------------------\n- **index.html**\n\t--------------------------------------------\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\n\t\t<title>Socket.IO</title>\n\t\t<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n\t\t\t  rel=\"stylesheet\">\n\n\t\t<script src=\"https://cdn.socket.io/4.4.0/socket.io.min.js\"></script>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground: #333;\n\t\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\t\twidth: 600px;\n\t\t\t}\n\n\t\t\tform {\n\t\t\t\tpadding: 20px;\n\t\t\t\twidth: 500px;\n\t\t\t\tpadding-right: 50px;\n\t\t\t\tmargin: 0 auto;\n\t\t\t}\n\n\t\t\t#messages {\n\t\t\t\tlist-style-type: none;\n\t\t\t\tmargin: 0 auto 0 auto;\n\t\t\t\tpadding: 0;\n\t\t\t\twidth: 500px;\n\t\t\t\theight: 200px;\n\t\t\t\tborder: 1px solid #fff;\n\t\t\t\toverflow-y: auto;\n\t\t\t\tbackground: #222;\n\t\t\t}\n\n\t\t\t#messages li {\n\t\t\t\tpadding: 5px 10px;\n\t\t\t}\n\n\t\t\t#messages li:nth-child(odd) {\n\t\t\t\tbackground: #aaa;\n\t\t\t}\n\n\t\t\t#messages li:nth-child(even) {\n\t\t\t\tbackground: #ccc;\n\t\t\t}\n\n\t\t\t#message {\n\t\t\t\tbackground: #999;\n\t\t\t\twidth: 429px;\n\t\t\t}\n\n\t\t\tbutton {\n\t\t\t\tmargin-left: 10px;\n\t\t\t}\n\n\t\t\t.quote {\n\t\t\t\tcolor: rgb(206, 206, 115);\n\t\t\t\twidth: 500px;\n\t\t\t\tmargin: 5px auto 5px auto;\n\t\t\t\tfont-style: italic;\n\t\t\t\tfont-size: 1.1rem;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tmargin: 20px auto 10px auto !important;\n\t\t\t\tcolor: #aaa;\n\t\t\t\twidth: 500px !important;\n\t\t\t\tfont-size: 2.5rem;\n\t\t\t}\n\t\t\t.formrow {\n\t\t\t\tdisplay: flex;\n\t\t\t\tmargin: 0 auto;\n\t\t\t\twidth: 500px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div class=\"container-fluid\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<h1>Chat Box</h1>\n\t\t\t\t<ul id=\"messages\">\n\t\t\t\t</ul>\n\t\t\t\t<div class=\"quote\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<form action=\"\">\n\t\t\t\t\t<div class=\"formrow\">\n\t\t\t\t\t\t<input id=\"message\"\n\t\t\t\t\t\t\t   autocomplete=\"off\"\n\t\t\t\t\t\t\t   type=\"text\"\n\t\t\t\t\t\t\t   class=\"form-control\">\n\t\t\t\t\t\t<span class=\"input-group-btn\">\n\t\t\t\t\t\t\t<button class=\"btn btn-secondary\"\n\t\t\t\t\t\t\t\t\ttype=\"submit\">Send</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t\t<script>\n\t\t\tconst socket = io();\n\t\t\tconst formElem = document.querySelector('form');\n\t\t\tconst messageElem = document.querySelector('#message');\n\t\t\tconst messagesElem = document.querySelector('#messages');\n\t\t\tconst quoteElem = document.querySelector('.quote');\n\t\t\tmessageElem.focus();\n\n\t\t\tfunction fadeIn(el, time) {\n\t\t\t\tel.style.opacity = 0;\n\n\t\t\t\tvar last = +new Date();\n\t\t\t\tvar tick = function () {\n\t\t\t\t\tel.style.opacity = +el.style.opacity + (new Date() - last) / time;\n\t\t\t\t\tlast = +new Date();\n\n\t\t\t\t\tif (+el.style.opacity < 1) {\n\t\t\t\t\t\t(window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttick();\n\t\t\t}\n\n\t\t\tformElem.onsubmit = (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst message = messageElem.value;\n\t\t\t\tsocket.emit('message', message);\n\t\t\t\tmessageElem.value = '';\n\t\t\t};\n\n\t\t\tsocket.on('message', (data) => {\n\t\t\t\tconst li = document.createElement('li');\n\t\t\t\tli.appendChild(document.createTextNode(data));\n\t\t\t\tmessagesElem.appendChild(li);\n\t\t\t\tmessagesElem.scrollTop = messagesElem.scrollHeight;\n\t\t\t\tmessageElem.focus();\n\t\t\t});\n\n\t\t\tsocket.on('quote', (data) => {\n\t\t\t\tquoteElem.innerText = `\"${data}\"`;\n\t\t\t\tfadeIn(quoteElem, 2000);\n\t\t\t});\n\t\t</script>\n\t</body>\n\n\t</html>\n\t--------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-06 00:09:20","systemWhoCreated":"systemUnknown"},{"id":481,"category":"JavaScript","title":"Create a cashier calculator to return change","body":"- this is a solution to a JavaScript exercise create a function that simulates what a cashier has to do when a customer has a certain amount to pay, pays more than the amount, and the cashier has to calculate the change\n- this solution allows for various currencies, e.g. Euro and Dollar is provided here\n- this is just a JavaScript file run in node, no frontend, so looks like this:#gif#cashierproblem222\n- here is the full code:\n\t-------------------------------------------------\n\tconst moneyDollar = {\n\t\tunits: [\n\t\t\t{\n\t\t\t\tvalue: 500,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 200,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 100,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 50,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 20,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 10,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 5,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .25,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .1,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .05,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .01,\n\t\t\t\tkind: 'coin'\n\t\t\t}\n\t\t]\n\t}\n\tconst moneyEuro = {\n\t\tunits: [\n\t\t\t{\n\t\t\t\tvalue: 500,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 200,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 100,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 50,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 20,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 10,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 5,\n\t\t\t\tkind: 'note'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 2,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 1,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .5,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .2,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .1,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .05,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .02,\n\t\t\t\tkind: 'coin'\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: .01,\n\t\t\t\tkind: 'coin'\n\t\t\t}\n\t\t]\n\t}\n\n\tconst getChange = (price, payAmount, money) => {\n\t\tconst ret = {\n\t\t\treturnMoney: []\n\t\t};\n\t\tret.payback = payAmount - price;\n\t\tlet tempPayback = ret.payback;\n\n\t\tif (ret.payback < 0) {\n\t\t\tret.error = true;\n\t\t} else {\n\t\t\tmoney.units.forEach(unit => {\n\t\t\t\tif (unit.value <= tempPayback) {\n\t\t\t\t\twhile (unit.value <= tempPayback) {\n\t\t\t\t\t\tret.returnMoney.push(unit);\n\t\t\t\t\t\ttempPayback -= unit.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\tconst result = getChange(3.56, 1, moneyEuro);\n\n\tconsole.log(result);\n\t-------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-07 12:08:51","systemWhoCreated":"systemUnknown"},{"id":483,"category":"Laravel","title":"Get local Laravel 8 site running and deploy to Heroku","body":"- set up Laravel site\n\t- go to your webs directory\n\t- `composer create-project --prefer-dist laravel/laravel site001`\n\t- `php artisan serve`##laravelworkssite\n- change start page\n\t- set up Git\n\t\t- `git init`\n\t\t- make initial commit\n\t- create view: `resources/views/main.blade.php`:\n\t\t---------------------------------------------\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Welcome</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Welcome</h1>\n\t\t\t<p>Welcome to this site.</p>\n\t\t</body>\n\t\t</html>\n\t\t---------------------------------------------\n\t- change `welcome` to `main` in routes file: `routes/web.php`\n\t\t---------------------------\n\t\tRoute;get('/', function () {\n\t\t\treturn view('main');\n\t\t});\n\t\t---------------------------\n\t- commit changes\n- deploy to Heroku\n\t- create a `Procfile`\n\t\t---------------------------------------\n\t\tweb: vendor/bin/heroku-php-apache2 public/\n\t\t---------------------------------------\n\t- commit to local Git\n\t- create site at Heroku\n\t\t- `heroku login`\n\t\t- `heroku create`\n\t- set encryption key\n\t\t- `php artisan key:generate --show`\n\t\t\t- it will show a long key, e.g. nnnnnnnnnnnnnnnnnnnnnnnnnnn\n\t\t- `heroku config:set APP_KEY=nnnnnnnnnnnnnnnnnnnnnnnnnnn`\n\t- push local repository to Heroku\n\t\t- `git push heroku master`\n\t- look at your Heroku site in your browser\n\t\t- `heroku open`\n- change URL to custom name\n\t- browser: \n\t\t- log into Heroku\n\t\t- settings, rename to e.g. `et-laravel`\n\t- terminal:\n\t\t- `git remote rm heroku`\n\t\t\t- (removes all references to the remote repository)\n\t\t- `heroku git:remote -a et-laravel`\n\t- make small change to site\n\t- `git push heroku master`\n\t- in browser: https://et-laravel.herokuapp.com##thelaravelsiteok\n- switch to GitHub-publishing\n\t- copy current site being directly deployed to Heroku, e.g. with `git push heroku master`\n\t\t- copied everything but `vendor` and `.git` to site002\n\t- recreate vendor directory\n\t\t- `composer install`\n\t- start site locally\n\t\t- `php artisan serve`\n\t- commit and push to new GitHub repository: \n\t\t- https://github.com/edwardtanguay/et-laravel2\n\t- repoint Heroku app to this repository","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-08 21:49:13","systemWhoCreated":"systemUnknown"},{"id":484,"category":"Symfony","title":"Get local Symfony 5 site running and deploy to Heroku","body":"- setup environment:\n\t- `php -v`\n\t\t---------------------------------------\n\t\tPHP 7.3.27 (cli) (built: Feb  2 2021 20:46:26) ( ZTS MSVC15 (Visual C++ 2017) x64 )\n\t\tCopyright (c) 1997-2018 The PHP Group\n\t\tZend Engine v3.3.27, Copyright (c) 1998-2018 Zend Technologies\t\t\t\n\t\t---------------------------------------\n\t\t- if not installed, install with XAMPP: https://www.apachefriends.org\n\t- `composer -V`\n\t\t-------------------------------\n\t\tComposer version 1.10.13 2020-09-09 11:46:34\n\t\t-------------------------------\n\t\t- reinstalled from here: https://getcomposer.org/doc/00-intro.md\n\t\t- now:\n\t\t\t-------------------------------------------\n\t\t\tComposer version 2.2.3 2021-12-31 12:18:53\n\t\t\t-------------------------------------------\n\t- `git --version`\n\t\t--------------------------\n\t\tgit version 2.29.2.windows.2\n\t\t--------------------------\n\t- `php bin/console about`\n\t\t---------------------------------\n\t\tSymfony Version 5.4.2\n\t\t---------------------------------\n- create simple Symfony website\n\t- in webs directory\n\t\t- `composer create-project symfony/website-skeleton symfony-heroku`\n\t\t\t- just hit enter for each of the prompts\n\t\t- `cd symfony-heroku`\n\t\t- install git and commit\n\t\t\t- `git init`\n\t\t\t- `git add .`\n\t\t\t- `git commit -m \"initial import\"`\n\t\t- install Symfony CLI\n\t\t\t- https://symfony.com/download\n\t\t- start server\n\t\t\t- `symfony server:start`\n\t\t\t- in browser: http://localhost:8000\n\t\t- install profiler\n\t\t\t- `composer require --dev symfony/profiler-pack`\n\t\t- install HttpFoundation\n\t\t\t- `composer require symfony/http-foundation`\n\t\t- create a controller \"Main\"\n\t\t\t- `config/routes.yaml`\n\t\t\t\t------------------------------\n\t\t\t\tindex:\n\t\t\t\t   path: /\n\t\t\t\t   controller: App\\Controller\\MainController;main\n\t\t\t\t------------------------------\n\t\t\t- `src/Controller/MainController.php`\n\t\t\t\t------------------------------------\n\t\t\t\t<?php\n\n\t\t\t\tnamespace App\\Controller;\n\n\t\t\t\tuse Symfony\\Component\\HttpFoundation\\Response;\n\n\t\t\t\tclass MainController {\n\t\t\t\t\tfunction main() {\n\t\t\t\t\t\treturn new Response('<h1>Website</h1><p>Welcome to this site.</p>');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t------------------------------------\n- deploy site to Heroku\n\t- `heroku login`\n\t- `heroku create`\n\t- create Procfile\n\t\t- *\"By default, Heroku will launch an Apache web server together with PHP to serve applications.\"*\n\t\t- `Procfile` (in root)\n\t\t\t-------------------------------------\n\t\t\tweb: heroku-php-apache2 public/\n\t\t\t-------------------------------------\n\t\t- commit to Git\n\t- `heroku config:set APP_ENV=prod`\n\t- deploy it\n\t\t- `git push heroku master`\n\t- successful: https://stormy-wave-23746.herokuapp.com\n\t- rename site\n\t\t- browser: \n\t\t\t- log into Heroku\n\t\t\t- settings, rename to `et-symfony`\n\t\t- terminal:\n\t\t\t- `git remote rm heroku`\n\t\t\t- `heroku git:remote -a et-symfony`\n\t\t- make small change to site\n\t\t- `git push heroku master`\n\t\t- in browser: https://et-symfony.herokuapp.com##thesymfonysiteok\n- trouble-shooting\n\t- `symfony check:req`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-08 21:55:04","systemWhoCreated":"systemUnknown"},{"id":485,"category":"React","title":"How to use Boostrap/Sass in React","body":"- these instructions show you how to make a starter React site that uses Bootstrap 5 (via npm), Bootstrap Icons and Sass\n- the site looks like this:##thesitebootoklooks\n- you can get the code for this site here: https://github.com/edwardtanguay/create-react-app-bootstrap-sass\n- set up a `create-react-app` site or use this [blankcra](https://github.com/edwardtanguay/blankcra)\n- install Bootstrap 5, Bootstrap Icons and Sass\n\t- `npm i bootstrap bootstrap-icons sass`\n- **index.js**\n\t--------------------------------------------\n\timport React from 'react';\n\timport ReactDOM from 'react-dom';\n\timport App from './App';\n\timport './App.scss';\n\n\tReactDOM.render(\n\t  <React.StrictMode>\n\t\t<App />\n\t  </React.StrictMode>,\n\t  document.getElementById('root')\n\t);\n\t--------------------------------------------\n- **App.scss**\n\t-----------------------------------------\n\t$primary: rgb(180, 110, 29); \n\n\t@import \"~bootstrap/scss/bootstrap.scss\";\n\t@import \"~bootstrap-icons/font/bootstrap-icons.css\";\n\n\tbody {\n\t\tbackground: #333;\n\t\tp {\n\t\t\tcolor: ivory;\n\t\t\tfont-size: 1.4rem;\n\t\t}\n\t}\n\t-----------------------------------------\n- **App.js**\n\t-----------------------------------\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App container mt-5\">\n\t\t\t\t<h1 className=\"text-primary mb-4\"><i className=\"bi bi-diagram-2-fill\"></i> React-Bootstrap-Sass Site</h1>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-----------------------------------\n- further information:\n\t- you can change the colors here: `node_modules\\bootstrap\\scss\\_variables.scss`##thecolorschangsoss\n\t- Linked-In Learning has a course on this: [Bootstrap 4 with Sass](https://www.linkedin.com/learning/bootstrap-4-with-sass/) (2019)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-13 01:37:20","systemWhoCreated":"systemUnknown"},{"id":486,"category":"JavaScript","title":"Two data-driven JavaScript apps that fetch data from (1) local module and (2) external API","body":"- this app demonstrates two sites, one that loads data from a JavaScript object imported from a local module, and the other that fetchs JSON data from an external API:##twodatadrivenapps\n- notice how it uses string literals to create HTML as templates\n- you can view the full code here: https://github.com/edwardtanguay/javascript-data-driven-sites\n- **readFromObject/js/main.js**\n\t---------------------------------------------\n\timport { employees } from '../data/employees.js';\n\n\tconst contentElem = document.querySelector('.content');\n\n\tcontentElem.innerHTML += `There are ${employees.length} employees.`;\n\n\tcontentElem.innerHTML += employees.map(emp => {\n\t\treturn `\n\t<h2>${emp.firstName} ${emp.lastName} (${emp.address.country})</h2>\n\t<section class=\"body\">\n\t${emp.notes}\n\t</section>\n\t`;\n\t}).join('');\n\t---------------------------------------------\n- **fetchFromApi/js/main.js**\n\t------------------------------------------\n\tconst contentElem = document.querySelector('.content');\n\tcontentElem.innerHTML = 'Loading...';\n\n\t(async () => {\n\t\tconst response = await fetch('https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/employees.json');\n\t\tconst employees = await response.json();\n\n\t\tcontentElem.innerHTML = `There are ${employees.length} employees.`;\n\n\t\tcontentElem.innerHTML += employees.map(emp => {\n\t\t\treturn `\n\t<h2>${emp.firstName} ${emp.lastName} (${emp.address.country})</h2>\n\t<section class=\"body\">\n\t${emp.notes}\n\t</section>\n\t`;\n\t\t}).join('');\n\t})();\n\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-14 23:17:56","systemWhoCreated":"systemUnknown"},{"id":487,"category":"Jest","title":"How to use Jest with ES6 modules (import/export) instead of CommonJS modules (require)","body":"- these instructions show how to set up Jest to test a JavaScript function module, first with CommonJS modules (require) and then how to convert it to newer ES6 modules (import/export)\n- note the **ExperimentalWarning** that is issued: *\"VM Modules is an experimental feature. This feature could change at any time.\"*##jest2saveasimport\n- first install Jest using CommonJS modules (require)\n\t- create directory `jest001`\n\t- `npm init -y`\n\t- `npm i -D jest` \n\t- `npm i lodash` (is used in functions.js)\n\t- package.json: change to `\"test\": \"jest\"`\n\t- **functions.js**\n\t\t----------------------------------\n\t\tconst _ = require('lodash');\n\n\t\tconst isPlainObject = (potentialObject) => {\n\t\t\treturn typeof potentialObject === 'object' && !Array.isArray(potentialObject) && potentialObject !== null;\n\t\t};\n\n\t\tconst makePairs = (obj) => {\n\t\t\tif (obj === null) return [];\n\t\t\tif (Array.isArray(obj)) return [];\n\t\t\tconst answer = Object.entries(obj);\n\t\t\treturn answer;\n\t\t};\n\n\t\tconst without = (obj, prop) => {\n\t\t\tconst entries = Object.entries(obj);\n\t\t\tconst retObj = {};\n\t\t\tfor (const entry of entries) {\n\t\t\t\tconst key = entry[0];\n\t\t\t\tconst value = entry[1];\n\t\t\t\tif (key !== prop) {\n\t\t\t\t\tretObj[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn retObj;\n\t\t};\n\n\t\tconst isEmpty = (obj) => {\n\t\t\treturn _.isEmpty(obj);\n\t\t};\n\n\t\tconst isEqualDeep = (obj1, obj2) => {\n\t\t\treturn _.isEqual(obj1, obj2);\n\t\t};\n\n\t\tmodule.exports = { isPlainObject, makePairs, without, isEmpty, isEqualDeep };\n\t\t----------------------------------\n\t- **functions.test.js**\n\t\t-------------------------------------\n\t\texpect(isPlainObject(undefined)).toBe(false);\n\t\t\texpect(isPlainObject(null)).toBe(false);\n\t\t});\n\n\t\ttest('makePairs() is correctly implemented', () => {\n\t\t\texpect(makePairs({ a: 1, b: 2 })).toStrictEqual([['a', 1], ['b', 2]]);\n\t\t\texpect(makePairs({ a: 1, ok: 2, name: 'Georg' })).toStrictEqual([['a', 1], ['ok', 2], ['name', 'Georg']]);\n\t\t\texpect(makePairs({})).toStrictEqual([]);\n\t\t\texpect(makePairs(null)).toStrictEqual([]);\n\t\t\texpect(makePairs([])).toStrictEqual([]);\n\t\t\texpect(makePairs([1, 2, 3])).toStrictEqual([]);\n\t\t\texpect(makePairs(false)).toStrictEqual([]);\n\t\t\texpect(makePairs(true)).toStrictEqual([]);\n\t\t});\n\n\t\ttest('without() is correctly implemented', () => {\n\t\t\texpect(without({ a: 1, b: 2 }, 'b')).toStrictEqual({ a: 1 });\n\t\t\texpect(without({ a: 1, b: 2 }, 'a')).toStrictEqual({ b: 2 });\n\t\t\texpect(without({ a: 1, b: 2 }, 'c')).toStrictEqual({ a: 1, b: 2 });\n\t\t});\n\n\t\ttest('isEmpty() is correctly implemented', () => {\n\t\t\texpect(isEmpty({ a: 1, b: undefined })).toBe(false);\n\t\t\texpect(isEmpty({})).toBe(true);\n\t\t});\n\n\t\ttest('isEqualDeep() is correctly implemented', () => {\n\t\t\texpect(isEqualDeep({ a: 1, b: { c: 1 } }, { a: 1, b: { c: 1 } })).toBe(true);\n\t\t\texpect(isEqualDeep({ a: 1, b: { c: 1 } }, { a: 1, b: { c: 2 } })).toBe(false);\n\t\t});\n\t\t-------------------------------------\n\t- `npm test`\n- now upgrade it to ES6 modules (import/export)\n\t- in **package.json** change test command:\n\t\t- change to `\"test\": \"NODE_OPTIONS=--experimental-vm-modules jest\"`\n\t- in **functions.test.js** change first two lines from CommonJS to ES6 format:\n\t\t------------------------------------------------\n\t\timport { expect } from '@jest/globals';\n\t\timport { isPlainObject, makePairs, without, isEmpty, isEqualDeep } from './functions.js';\n\t\t------------------------------------------------\n\t- in **functions.js** \n\t\t- change lodash require to import: `import _ from 'lodash';`\n\t\t- remove last line with `module.exports...`\n\t\t- add `export` to the front of each `const` method\n- final code is here: https://github.com/edwardtanguay/jest-convert-commonjs-to-es6","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-17 19:17:14","systemWhoCreated":"systemUnknown"},{"id":489,"category":"bash","title":"Bash script that creates pictures of people who don't exist","body":"- this bash script will accesses the [thispersondoesnotexist.com](https://thispersondoesnotexist.com) website to download images of people who don't exist, useful if you need images of non-real people for demos, instructional material, etc.#gif#bashScriptCreatePeopleImages\n- based on [this code](https://gist.github.com/johnjreiser/b4e46c06dfb28e3034c3f78c819b4c3f)\n- read about [Generative adversarial network](https://en.wikipedia.org/wiki/Generative_adversarial_network), a set of machine learning algorithms that generate new photographs that look at least superficially authentic to human observers\n- **getpics.sh**\n\t------------------------------------------------------\n\t#!/bin/bash\n\n\tMAX=10\n\tif [[ ! -z \"$1\" ]]; then\n\t\t\tMAX=$1\n\tfi\n\n\tfor i in $(seq -f \"%03g\" 1 $MAX); do\n\t\tFILE=person${i}.jpg\n\t\tcurl 'https://thispersondoesnotexist.com/image' -H 'authority: thispersondoesnotexist.com' -H 'pragma: no-cache' -H 'cache-control: no-cache' -H 'upgrade-insecure-requests: 1' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.80 Safari/537.36' -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3' -H 'referer: https://thispersondoesnotexist.com/' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-US,en;q=0.9' --compressed -o $FILE\n\t\tsleep 1\n\tdone\n\t------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-18 18:08:34","systemWhoCreated":"systemUnknown"},{"id":490,"category":"JavaScript Classes","title":"How to attach JavaScript class methods as event handlers","body":"- full code here: https://github.com/edwardtanguay/javascript-classes-methods-eventhandlers\n- this example demonstrates how to create class methods that can be used as event handlers, e.g. for vanilla JavaScript sites#gif#javascriptClassModulesEventHandlers\n- the main change you have to make is below in **line 14**: convert any method you want to attach as an event handler into arrow function notation:##theclassExampleforevents\n- **StatusBox.js**\n\t---------------------------------------------\n\texport class StatusBox {\n\t\tconstructor(parentElem, status = 'offline') {\n\t\t\tthis.parentElem = parentElem;\n\t\t\tthis.status = status;\n\n\t\t\tthis.parentElem.innerHTML += this.getHtml();\n\n\t\t\tthis.buttonElem = this.parentElem.querySelector('button');\n\t\t\tthis.statusElem = this.parentElem.querySelector('span.status');\n\n\t\t\tthis.buttonElem.addEventListener('click', this.toggle);\n\t\t}\n\n\t\ttoggle = () => {\n\t\t\tthis.status = this.status === 'online' ? 'offline' : 'online';\n\t\t\tthis.statusElem.innerHTML = this.status;\n\t\t}\n\n\t\tgetHtml() {\n\t\t\treturn `\n\t<div class=\"infoBox\">\n\t\t<div class=\"title\">Status Box</div>\t\n\t\t<div class=\"body\">The status is: <span class=\"status\">${this.status}</span></div>\n\t\t<button>Toggle</button>\n\t</div>\n\t\t\t\t`;\n\t\t}\n\t}\n\t---------------------------------------------\n- **main.js**\n\t-------------------------------------------\n\timport { StatusBox } from './StatusBox.js';\n\n\tconst contentElem = document.querySelector('.content');\n\tconst statusBox = new StatusBox(contentElem);\n\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-25 19:21:10","systemWhoCreated":"systemUnknown"},{"id":491,"category":"React","title":"Structuring and styling a React site with Higher-Order Components (HOCs) and styled-components","body":"- full code is here: https://github.com/edwardtanguay/react-two-components-share-functionality-hoc\n- **Higher-Order Components**\n\t- [Higher-order components](https://www.codingame.com/playgrounds/8595/reactjs-higher-order-components-tutorial) are *functions that take a component and return a new component. A higher-order component (HOC) is an advanced technique in React.js for reusing a component logic. Higher-Order Components are not part of the React API. They are the pattern that emerges from React's compositional nature. The component transforms props into UI, and a higher-order component converts a component into another component.*\n\t- this project demonstrates one implementation of Higher-Order Components#gif#higherOrderComponentsSiteExample\n\t- the two higher-order components are `src\\managers\\dataManager.js` and `src\\managers\\siteManager.js` and can be seen being used in **App.js**:\n\t\t----------------------------------------\n\t\timport _Nav from './components/Nav';\n\t\timport _PageHome from './pages/PageHome';\n\t\timport _PageEmployees from './pages/PageEmployees';\n\t\timport _PageCustomers from './pages/PageCustomers';\n\t\timport { dataManager } from './managers/dataManager';\n\t\timport { siteManager } from './managers/siteManager';\n\n\t\tconst Nav = siteManager(_Nav);\n\t\tconst PageHome = siteManager(dataManager(_PageHome));\n\t\tconst PageEmployees = siteManager(dataManager(_PageEmployees));\n\t\tconst PageCustomers = siteManager(dataManager(_PageCustomers));\n\t\t----------------------------------------\n\t\t- notice that higher-order components **wrap other components in order to produce similar components that are provided with functionality**\n\t\t\t- **SiteManager** provides a config and other Components\n\t\t\t- **DataManager** provides data\n\t\t\t\t- note that because DataManager provides the data, it also provides features related to data loading e.g. it provides every page with a loading spinner while the data for that page is loading\n- **InfoBox**\n\t- parameters: status, width, title\n\t- special parameter: `children`\n\t\t- note that the parameter `children` can be anywhere in the list of parameters\n- **styled-components**\n\t- *\"styled-components are CSS for JavaScript developers\"*\n\t- VSCode extension for syntax coloring and intellisense: vscode-styled-components##vscodestyledcomponentsext\n\t- disadvantages\n\t\t- in VSCode\n\t\t\t- you can't hover over colors to change them visually\n\t\t\t- reformat doesn't reformat styles\n\t- look at the styled-component in `Nav.js` for instance, the SiteMessage style has nothing to do with the rest of the application, only with the Nav component and so it is (a) better situated in the component where it is used, and (b) we can more easily make it dynamic with JavaScript, i.e. have it display a different color based on a JavaScript variable\n- **dataManager.js**\n\t- the DataManager was kept simply on purpose to give a basis implementation that can be expanded on\n\t\t- advantage: simplicity, i.e. all data for all pages is loaded in the DataManager so each page can use any data source (e.g. `employees`) or any data function (e.g. `getUkEmployees`)\n\t\t- disadvantage: possible inefficiency, i.e. *all* data for *every* page needs to be loaded for *each* page, so if a page needs quick-loading data, it still will have to wait for data to be loaded that will be used for other pages\n\t\t- possible extensions to address the above issues\n\t\t\t- build a cache in LocalStorage which is refetched e.g. every 10 min / 1 hour / 24 hours, etc. or when the uses clicks \"refetch data\"\n\t\t\t- use [useMemo](https://edwardtanguay.netlify.app/howtos?id=463)\n\t- note the employees are loaded from a local JSON file, while customers are loaded from an API\n\t- child components can get prepared data (e.g. `getLocalUK`) or the raw source data (e.g. `employees`)\n\t- you can determine the current component that is requesting data with `Component.name`:\n\t\t---------------------------------------\n\t\tif (Component.name === 'PageEmployees') {\n\t\t\treturn !dataLoaded ? <PageLoader/> : <Component {...props} ukEmployees={getUkEmployees()} usaEmployees={getUsaEmployees()} />\n\t\t}\n\t\tif (Component.name === 'PageCustomers') {\n\t\t\treturn !dataLoaded ? <PageLoader /> : <Component {...props} customers={customers} ukCustomers={getUkCustomers()} />\n\t\t}\n\t\t---------------------------------------\n\t- and if you base data loading on which component is requesting data, then you can load like this:\n\t\t---------------------------------------------\n\t\tuseEffect(() => {\n\t\t\tsetTimeout(async () => {\n\t\t\t\tif (Component.name === 'PageEmployees') {\n\t\t\t\t\tsetEmployees(employees);\n\t\t\t\t}\n\t\t\t\tif (Component.name === 'PageCustomers') {\n\t\t\t\t\tsetCustomers(await fetchCustomers());\n\t\t\t\t}\n\t\t\t\tsetDataLoaded(true);\n\t\t\t}, pageWaitingEmulationInSeconds * 1000);\n\t\t}, []);\n\t\t---------------------------------------------\n\t- note that data can be ameliorated/decorated/validated, i.e. new fields can be added, fields can be changed, prepared for easier presentation on the frontend\n\t\t-----------------------------\n\t\tuseEffect(() => {\n\t\t\temployees.map(m => m.fullName = `${m.firstName} ${m.lastName}`);\n\t\t\tsetEmployees([...employees]);\n\t\t}, [employees]);\n\t\t-----------------------------\n\t\t- if using TypeScript, this would be the place to make sure the data conformed to interfaces\n- **PageLoader.js**\n\t- this component is used to show a loading area until the current page has all its data to display\n\t- note that PageLoader uses `<Fade>` with `transitionDuration=\"10\"` which prevents the loading icon from animation motion into place\n\t\t- if you want the icon to cutely move into its position (looks a bit cartoony) then set transitionDuration to 400 (default)\n- **.env**\n\t- note that this file must have the variable `REACT_APP_SITEMODE = development`\n\t\t- other values are `testing` and `production`\n\t\t- when this site is on e.g. Netlify, there will be no `REACT_APP_SITEMODE` variable and therefore it will be `production` as default","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-27 07:39:09","systemWhoCreated":"systemUnknown"},{"id":492,"category":"JavaScript Classes","title":"Create a reusable JavaScript component as a class in a module that displays a clickable 5-star rating","body":"- the full code for this project can be found here: https://github.com/edwardtanguay/five-stars-rating-control\n- this project is a refactoring and further development of this earlier project: [Make five star control which can be clicked to change](https://edwardtanguay.netlify.app/howtos?id=462)#gif#classJavaScriptFiveStarsModuleGif\n\t- as in the original project, only HTML, CSS and JavaScript is used\n\t- the code was put into a class and loaded as a JavaScript module\n\t- the class was made to be fully self-contained component and so can be created as many times as necessary on the page each which contains its own state\n\t- the 16 components shown here are created in **main.js** with this code:\n\t\t----------------------------------------\n\t\timport { StarComponent } from './StarComponent.js';\n\n\t\tfor (let i = 1; i <= 16; i++) {\n\t\t\tStarComponent.instantiate(document, i);\n\t\t}\n\t\t----------------------------------------\n\t- each component saves its own state in **localStorage** so that on refreshing the page, all components retain their values##classStarComponentLoclstor\n- the **index.html** file is extremely simple since the components have to be completely created in JavaScript to maintain their isolated module nature\n\t---------------------------------------\n\t<body>\n\t\t<div class=\"content\"></div>\n\t</body>\n\t---------------------------------------\n- the StarComponent exists as a JavaScript class\n\t- note that two methods are static including `instantiate()` in order that the class can be created as a one-liner\n\t- note that since it serves as an event handler,  **the `setStars()` method has to be written in arrow function notation** so that the `this` variable refers to the class and not to the element on which the event is attached\n\t- **StarComponent.js**\n\t\t--------------------------\n\t\texport class StarComponent {\n\n\t\t\tconstructor(document, id, numberOfStars = 3) {\n\t\t\t\tthis.document = document;\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.contentElem = this.document.querySelector('.content');\n\t\t\t\tthis.starControlElem = this.createDivWithClassNameAndAppend('starControl', this.contentElem);\n\t\t\t\tthis.starsElem = this.createDivWithClassNameAndAppend('stars', this.starControlElem);\n\t\t\t\tthis.numberElem = this.createDivWithClassNameAndAppend('number', this.starControlElem);\n\t\t\t\tthis.numberOfStars = numberOfStars;\n\t\t\t}\n\n\t\t\tcreateDivWithClassNameAndAppend(className, parentElem) {\n\t\t\t\tconst div = this.createDivWithClassName(className);\n\t\t\t\tparentElem.appendChild(div);\n\t\t\t\treturn div;\n\t\t\t}\n\n\t\t\tcreateDivWithClassName(className) {\n\t\t\t\tconst div = document.createElement('div');\n\t\t\t\tdiv.classList.add(className);\n\t\t\t\treturn div;\n\t\t\t}\n\n\t\t\tsetStars = (numberOfStars) => {\n\t\t\t\tthis.numberOfStars = numberOfStars;\n\t\t\t\tthis.createStars();\n\t\t\t\tlocalStorage.setItem(StarComponent.getComponentStateIdCode(this.id), this.numberOfStars);\n\t\t\t}\n\n\t\t\tcreateStars() {\n\t\t\t\tthis.starsElem.innerHTML = '';\n\t\t\t\tfor (let i = 1; i <= 5; i++) {\n\t\t\t\t\tconst starElem = document.createElement('i');\n\t\t\t\t\tif (i <= this.numberOfStars) {\n\t\t\t\t\t\tstarElem.classList.add('fa', 'fa-star');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstarElem.classList.add('fa', 'fa-star-o');\n\t\t\t\t\t}\n\t\t\t\t\tstarElem.addEventListener('click', () => this.setStars(i));\n\t\t\t\t\tthis.starsElem.appendChild(starElem);\n\t\t\t\t}\n\t\t\t\tthis.numberElem.innerText = this.numberOfStars;\n\t\t\t}\n\n\t\t\tstatic getComponentStateIdCode(id) {\n\t\t\t\treturn `numberOfStars-${id}`;\n\t\t\t}\n\n\t\t\tstatic instantiate(document, id) {\n\t\t\t\tconst cachedStars = Number(localStorage.getItem(StarComponent.getComponentStateIdCode(id)));\n\t\t\t\tconst numberOfStars = cachedStars === 0 ? 3 : cachedStars;\n\t\t\t\tconst starComponent = new StarComponent(document, id, numberOfStars);\n\t\t\t\tstarComponent.createStars();\n\t\t\t}\n\n\t\t}\n\t\t--------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-28 18:14:35","systemWhoCreated":"systemUnknown"},{"id":493,"category":"React","title":"Create function and class components to show the differences","body":"- full code here: https://github.com/edwardtanguay/react-class-and-function-components\n- the project has two components, one class, one function, which perform the same functionality#gif#classFunctionComponentsGifHowto\n- the point is to show how each approach accomplishes the same tasks, e.g. store and use state, handle button clicks, etc.\n- this could definitely be expanded to include how e.g. `componentDidMount`, `componentWillUnmount`, `getDerivedStateFromProps`, `getSnapshotBeforeUpdate`, `componentDidUpdate`, etc. are use in function components with e.g. `useEffect` etc.\n- **ShowInfo.js** (functional component)\n\t----------------------------------\n\timport { useState } from 'react';\n\n\texport const ShowInfo = ({ title, children }) => {\n\t\tconst [status, setStatus] = useState('notApproved');\n\n\t\tconst handleChangeStatus = () => {\n\t\t\tsetStatus(status === 'approved' ? 'notApproved' : 'approved'); \n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"infoBox\">\n\t\t\t\t<div className=\"title\">{title}</div>\n\t\t\t\t<p>This is the info from the function component.</p>\n\t\t\t\t<div className=\"status\"><button onClick={handleChangeStatus}>CHANGE STATUS</button> <span className={status}>{status === 'approved' ? 'Approved' : 'Not Approved'}</span></div>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t)\n\t}\n\t----------------------------------\n- **ShowInfoAsClass.js**\n\t------------------------------------\n\timport { Component } from 'react';\n\n\texport class ShowInfoAsClass extends Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\tstatus: 'notApproved'\n\t\t\t};\n\t\t}\n\t\thandleChangeStatus = () => {\n\t\t\tthis.setState({status: this.state.status === 'approved' ? 'notApproved' : 'approved'});\n\t\t}\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div className=\"infoBox\">\n\t\t\t\t\t<div className=\"title\">{this.props.title}</div>\n\t\t\t\t\t<p>This is the info from the class component.</p>\n\t\t\t\t<div className=\"status\"><button onClick={this.handleChangeStatus}>CHANGE STATUS</button> <span className={this.state.status}>{this.state.status === 'approved' ? 'Approved' : 'Not Approved'}</span></div>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t}\n\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-28 21:25:20","systemWhoCreated":"systemUnknown"},{"id":494,"category":"React","title":"Single-item cart and grouped-item cart with React","body":"- full code is here: https://github.com/edwardtanguay/react-item-cart-grouped-item-cart\n- this is a proof-of-concept project for a shopping cart that groups the items so that not every individual product is shown, but rather items are grouped by kind with a total number next to each group#gif#gifPlantCartSingleAndGrouped\n- note that the single-point-of-truth is the single-item array in the cart variable (in **AppContext.js**)\n\t- the grouped-item array is always derived from the single-item array (in **AppContext.js** UseEffect)\n\t- if you were to save the state in localStorage, you would of course store the single-item array\n- **AppContext.js**\n\t---------------------------------------\n\timport { createContext, useState, useEffect } from 'react';\n\timport items from './data/items.json';\n\n\tconst AppContext = createContext();\n\n\tconst _cart = {\n\t\titems: []\n\t};\n\n\texport const AppProvider = ({ children }) => {\n\t\tconst [cart, setCart] = useState(_cart);\n\t\tconst [groupedItems, setGroupedItems] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\tconst obj = {};\n\t\t\tconst _groupedItems = [];\n\t\t\tcart.items.forEach(item => {\n\t\t\t\tif (!obj[item.id]) {\n\t\t\t\t\tobj[item.id] = 1;\n\t\t\t\t} else {\n\t\t\t\t\tobj[item.id]++;\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst ids = Object.keys(obj);\n\t\t\tids.forEach(id => {\n\t\t\t\tconst groupedItem = {};\n\t\t\t\tgroupedItem.id = id;\n\t\t\t\tgroupedItem.name = items.find(item => item.id === Number(id)).name;\n\t\t\t\tgroupedItem.image_small =\n\t\t\t\t\tgroupedItem.total = obj[id];\n\t\t\t\tgroupedItem.image_small = items.find(item => item.id === Number(id)).image_small;\n\t\t\t\t_groupedItems.push(groupedItem);\n\t\t\t});\n\t\t\tconsole.log(_groupedItems);\n\t\t\tsetGroupedItems([..._groupedItems]);\n\t\t}, [cart]);\n\n\t\tconst addToCart = (item) => {\n\t\t\tcart.items.push(item);\n\t\t\tsetCart({ ...cart });\n\t\t}\n\n\t\treturn (\n\t\t\t<AppContext.Provider value={{\n\t\t\t\tcart,\n\t\t\t\taddToCart,\n\t\t\t\tgroupedItems\n\t\t\t}} >\n\t\t\t\t{children}\n\t\t\t</AppContext.Provider>\n\t\t);\n\t};\n\n\texport default AppContext;\n\t---------------------------------------\n- **PageItemCart.js**\n\t--------------------------------------\n\timport { useContext } from 'react';\n\timport AppContext from '../AppContext';\n\n\tconst PageItemCart = ({ items, getImagePathAndFileName }) => {\n\t\tconst { addToCart, cart } = useContext(AppContext);\n\n\t\treturn (\n\t\t\t<div className=\"page pageItemCart\">\n\t\t\t\t<fieldset className=\"store\">\n\t\t\t\t\t<legend>Store</legend>\n\t\t\t\t\t{items.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={i} className=\"item\">\n\t\t\t\t\t\t\t\t<img onClick={() => addToCart(item)} src={getImagePathAndFileName(item.image_small)} alt=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</fieldset>\n\t\t\t\t<fieldset className=\"cart\">\n\t\t\t\t\t<legend>Item Cart</legend>\n\t\t\t\t\t{cart.items.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"itemCartItem\" key={i}>\n\t\t\t\t\t\t\t\t<img onClick={() => addToCart(item)} src={getImagePathAndFileName(item.image_small)} alt=\"\" />\n\t\t\t\t\t\t\t\t<div>{item.name}</div>\n\t\t\t\t\t\t\t</div>)\n\t\t\t\t\t})}\n\t\t\t\t</fieldset>\n\t\t\t</div>\n\t\t)\n\t}\n\texport default PageItemCart;\n\t--------------------------------------\n- **PageGroupedItemCart.js**\n\t---------------------------------------------\n\timport { useContext } from 'react';\n\timport AppContext from '../AppContext';\n\n\tconst PageGroupedItemCart = ({ getImagePathAndFileName }) => {\n\t\tconst { groupedItems } = useContext(AppContext);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<fieldset className=\"cart\">\n\t\t\t\t\t<legend>Grouped Item Cart</legend>\n\t\t\t\t\t{groupedItems.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"itemCartItem\" key={i}>\n\t\t\t\t\t\t\t\t<img src={getImagePathAndFileName(item.image_small)} alt=\"\" />\n\t\t\t\t\t\t\t\t<div>{item.name} ({item.total}x)</div>\n\t\t\t\t\t\t\t</div>)\n\t\t\t\t\t})}\n\t\t\t\t</fieldset>\n\t\t\t</>\n\t\t)\n\t}\n\texport default PageGroupedItemCart;\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-01-29 19:13:24","systemWhoCreated":"systemUnknown"},{"id":496,"category":"React","title":"Create pages that display items with instant search that updates the url state","body":"- full code for this project can be found here: https://github.com/edwardtanguay/react-items-page-search-and-display\n- each page shows a list of items which can be easily searched, viewed and bookmarked#gif#gifItemSearchPageProject\n\tThis site demonstrates how to display multiple items on a page with search feature and a click-to-see-more-details feature.\n\tNote that the URL and the tab title change appropriately.\n\tNote also that there are examples of two data sources: a local JSON file and APIs.\n- **Page: Employees**\n\t- loads from JSON file\n\t- variables are named specifically, i.e. with the word employee instead of item\n\t- all functions are self-contained on the page\n- **Page: Customers**\n\t- loads from API\n\t- variables are named generically with the word item\n\t- functionality for this page is imported from itemPageManager and shared with the products page\n- **Page: Products**\n\t- loads from API\n\t- variables are named generically with the word item\n\t- functionality for this page is imported from itemPageManager and shared with the customers page\n- note that hooks cannot be put into HOCs, e.g.:\n\t-------------------------------------\n\tconst isSmartphone = useMediaQuery({\n\t\tquery: '(max-width: 577px)'\n\t});\n\t-------------------------------------\n\t- if you try to put it in an HOC, you get this error:##thehookhocerror\n- note that for each customer item, there is a corresponding realistic photo created from [thispersondoesnotexist.com](https://thispersondoesnotexist.com) which makes these useful to use for realistic-looking demo sites, the name of the photo is the `customerID` and can be easily mapped","points":20,"extras":"","systemWhenCreated":"2022-01-31 08:42:30","systemWhoCreated":"systemUnknown"},{"id":498,"category":"React","title":"How to pass and change state variables via props","body":"- get the full code here: [edwardtanguay/react-maintain-state-variables-via-props](https://github.com/edwardtanguay/react-maintain-state-variables-via-props)\n\t- note that I refactored ShowPassenger so that it only has one change handler (`handleChangeField`) which differs from the code listed below\n- this project shows how to a state variable (here: an array of passenger object) down multiple levels of components, via props, allowing the components to chance the original state variable in the highest component:#gif#gifReactPassStateViaProps\n- note you have to spread the empty passenger objects, otherwise you create an array with two object variables that have a pointer to the same object\n\t------------------------------------------\n\tconst _passengers = [{ ..._emptyPassenger }, { ..._emptyPassenger }];\n\t------------------------------------------\n- note that the operating strategy is send the hangleChange methods down to the children so that they can change their parent's state variables:\n\t----------------------------------------\n\t<ShowPassenger key={index} passenger={passenger} handlePassengerChange={handlePassengerChange} handlePassengerAdd={handlePassengerAdd} handlePassengerDelete={handlePassengerDelete} canDelete={passengers.length >= 2} />\n\t----------------------------------------\n- **App.js**\n\t------------------------------------------------\n\timport { useEffect, useState } from 'react';\n\timport { ShowPassenger } from './components/ShowPassenger';\n\timport './App.scss';\n\n\tconst _emptyPassenger = {\n\t\tid: 0,\n\t\tgenericTitle: '',\n\t\tname: '',\n\t\tairport: 'Berlin',\n\t\tstart: '',\n\t\tend: ''\n\t};\n\n\tconst fillDataIntoPassengers = (passengers) => {\n\t\tpassengers.forEach((passenger, index) => {\n\t\t\tpassenger.id = index;\n\t\t\tpassenger.genericTitle = `Passenger #${index + 1}`;\n\t\t});\n\t\treturn passengers;\n\t}\n\n\tfunction App() {\n\t\tconst [passengers, setPassengers] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\tconst _passengers = [{ ..._emptyPassenger }, { ..._emptyPassenger }];\n\t\t\tsetPassengers([...fillDataIntoPassengers(_passengers)]);\n\t\t}, []);\n\n\t\tconst handlePassengerChange = (passenger) => {\n\t\t\tpassengers[passenger.index] = passenger;\n\t\t\tsetPassengers([...passengers]);\n\t\t};\n\n\t\tconst handlePassengerAdd = () => {\n\t\t\tconst _passengers = [...passengers, { ..._emptyPassenger }];\n\t\t\tfillDataIntoPassengers(_passengers);\n\t\t\tsetPassengers([..._passengers]);\n\t\t};\n\n\t\tconst handlePassengerDelete = (index) => {\n\t\t\tconst _passengers = [...passengers];\n\t\t\t_passengers.splice(index, 1);\n\t\t\tfillDataIntoPassengers(_passengers);\n\t\t\tsetPassengers([..._passengers]);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>{passengers.length} Passengers:</h1>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<div className=\"passengers\">\n\t\t\t\t\t\t{passengers.map((passenger, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ShowPassenger key={index} passenger={passenger} handlePassengerChange={handlePassengerChange} handlePassengerAdd={handlePassengerAdd} handlePassengerDelete={handlePassengerDelete} canDelete={passengers.length >= 2} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<pre>\n\t\t\t\t\t\t{JSON.stringify(passengers, null, 2)}\n\t\t\t\t\t</pre>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t------------------------------------------------\n- **ShowPassenger.js**\n\t----------------------------------------------------\n\timport { FormControlText } from './FormControlText';\n\timport { FormControlAirport } from './FormControlAirport';\n\timport { FormControlDate } from './FormControlDate';\n\timport { RiDeleteBin6Line } from 'react-icons/ri';\n\timport { BsPlusLg } from 'react-icons/bs';\n\n\texport const ShowPassenger = ({ passenger, handlePassengerChange, handlePassengerAdd, handlePassengerDelete, canDelete }) => {\n\n\t\tconst handleChangeName = (name) => {\n\t\t\tpassenger.name = name;\n\t\t\thandlePassengerChange(passenger);\n\t\t}\n\n\t\tconst handleChangeAirport = (airport) => {\n\t\t\tpassenger.airport = airport;\n\t\t\thandlePassengerChange(passenger);\n\t\t};\n\n\t\tconst handleChangeStart = (start) => {\n\t\t\tpassenger.start = start;\n\t\t\thandlePassengerChange(passenger);\n\t\t}\n\n\t\tconst handleChangeEnd = (end) => {\n\t\t\tpassenger.end = end;\n\t\t\thandlePassengerChange(passenger);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"control_showPassenger\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<h2>{passenger.genericTitle}</h2>\n\t\t\t\t\t{!canDelete && (\n\t\t\t\t\t\t<RiDeleteBin6Line className='iconDisabled' />\n\t\t\t\t\t)}\n\t\t\t\t\t{canDelete && (\n\t\t\t\t\t\t<RiDeleteBin6Line className='icon' onClick={() => handlePassengerDelete(passenger.id)} />\n\t\t\t\t\t)}\n\t\t\t\t\t<BsPlusLg className=\"icon\" onClick={handlePassengerAdd} />\n\t\t\t\t</div>\n\t\t\t\t<FormControlText label=\"Name\" text={passenger.name} handleChangeText={handleChangeName} />\n\t\t\t\t<FormControlAirport label=\"From\" airport={passenger.airport} handleChangeAirport={handleChangeAirport} />\n\t\t\t\t<FormControlDate label=\"Start\" date={passenger.start} handleChangeDate={handleChangeStart} />\n\t\t\t\t<FormControlDate label=\"End\" date={passenger.end} handleChangeDate={handleChangeEnd} />\n\t\t\t</div>\n\t\t)\n\t}\n\t----------------------------------------------------\n- **FormControlAirport.js**\n\t-------------------------------------------\n\tconst airports = ['Berlin', 'Hamburg', 'Munich', 'Hannover', 'Düsseldorf'];\n\n\texport const FormControlAirport = ({ label, airport, handleChangeAirport }) => {\n\n\t\treturn (\n\t\t\t<div className=\"control_airport\">\n\t\t\t\t<label>{label}</label>\n\t\t\t\t<select value={airport} onChange={(e) => handleChangeAirport(e.target.value)}>\n\t\t\t\t\t{airports.map((_airport, index) => (\n\t\t\t\t\t\t<option key={index} value={_airport}>\n\t\t\t\t\t\t\t{_airport}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t)\n\t}\n\t-------------------------------------------\n- **FormControlText.js**\n\t-------------------------------------------\n\texport const FormControlText = ({ label, text, handleChangeText }) => {\n\t\treturn (\n\t\t\t<div className=\"control_text\">\n\t\t\t\t<label>{label}</label>\n\t\t\t\t<input type=\"text\" value={text} onChange={(e) => handleChangeText(e.target.value)} />\n\t\t\t</div>\n\t\t)\n\t}\n\t-------------------------------------------\n- **FormControlDate.js**\n\t---------------------------------------------\n\texport const FormControlDate = ({ label, date, handleChangeDate }) => {\n\t\treturn (\n\t\t\t<div className=\"control_text\">\n\t\t\t\t<label>{label}</label>\n\t\t\t\t<input type=\"date\" value={date} onChange={(e) => handleChangeDate(e.target.value)} />\n\t\t\t</div>\n\t\t)\n\t}\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-03 03:05:19","systemWhoCreated":"systemUnknown"},{"id":499,"category":"React","title":"Use DOM manipulation in a React site with UseRef","body":"- full code is here: [edwardtanguay/react-dom-connection](https://github.com/edwardtanguay/react-dom-connection.git)\n- this example shows how you can use useRef to create a JavaScript variable such as `containerElem` which is acts as a DOM element as in JavaScript/DOM programming\n- this is useful if you have e.g. legacy JavaScript/DOM code that needs to run in a React app\n- this examples shows that you can create a DOM element, change the style, add a class and an event listener to it:#gif#gifShowConnectionDomReact2\n- **App.js**\n\t------------------------------------\n\timport { useRef, useEffect } from 'react';\n\timport './App.scss';\n\n\tfunction App() {\n\n\t\tconst pianoElem = useRef(null);\n\t\tconst contents = useRef(null);\n\n\t\t// class JavaScript function\n\t\tconst showIt = () => {\n\t\t\tif (contents.current.innerHTML === '') {\n\t\t\t\tcontents.current.innerHTML = 'succeeded';\n\t\t\t} else {\n\t\t\t\tcontents.current.innerHTML = '';\n\t\t\t}\n\t\t}\n\n\t\tuseEffect(() => {\n\n\t\t\t// make classic DOM element\n\t\t\tconst para = document.createElement(\"p\");\n\t\t\tpara.innerText = \"click this text\";\n\t\t\tpara.classList.add('clickText');\n\n\t\t\t// attach DOM element to page \n\t\t\tpianoElem.current.appendChild(para);\n\n\t\t\t// manipulate DOM element\n\t\t\tpianoElem.current.style.color = 'red';\n\n\t\t\t// attach even to DOM element\n\t\t\tpianoElem.current.addEventListener(\"click\", showIt)\n\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Testing DOM to Vanilla JavaScript</h1>\n\t\t\t\t<div ref={pianoElem}></div>\n\t\t\t\t<div ref={contents}></div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-03 22:48:31","systemWhoCreated":"systemUnknown"},{"id":500,"category":"Sass","title":"How to convert .css files to .scss (Sass) files on the fly in VSCode","body":"- the easiest way to use Sass in a JavaScript/DOM project is as follows:\n- install the Live Sass Compiler extension##thelivesassss\n- note if the above extension doesn't work or causes problems, particularly on Ubuntu, there is another extension by Glenn Marks that may work:##noteIfNotWorkGlenn\n- create a Sass file in e.g. `css/main.scss`\n- you will then see a **Watch** button on the bottom status bar of VSCode:##seesasswatch\n- if you don't see this message, you might want to expend your VSCode to full screen or more to make sure there is room for it to be displayed on the bottom status bar\n- click it and all your **.css** files will be automatically converted into **.scss** files\n- in your `index.hmtl` file link to the .css file as always:##maincssasnormal","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-04 14:40:34","systemWhoCreated":"systemUnknown"},{"id":501,"category":"React","title":"How to capture and respond to key press on a React site","body":"- code is here: [edwardtanguay/react-keypress-event](https://github.com/edwardtanguay/react-keypress-event)\n- notice you can begin typing immediately after page load#gif#reactSiteTypeImmediate2\n- notice also that there is now margin problem (scroll bars don't show)\n- **App.js**\n\t-------------------------------------\n\timport { useState, useRef, useEffect } from 'react';\n\timport './App.scss';\n\n\tfunction App() {\n\t\tconst [text, setText] = useState('start typing');\n\t\tconst appElem = useRef(null);\n\n\t\tuseEffect(() => {\n\t\t\tappElem.current.focus();\n\t\t}, []);\n\n\t\tconst handleKeyPress = (e) => {\n\t\t\tsetText(e.key);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"App\" ref={appElem} onKeyPress={(e) => handleKeyPress(e)} tabIndex=\"0\">\n\t\t\t\t<p className=\"showText\">{text}</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-------------------------------------\n- **App.scss**\n\t----------------------------\n\tbody {\n\t\tbackground: #333;\n\t\tcolor: #ccc;\n\t\tfont-size: 1.7rem;\n\t}\n\t.App {\n\t\tpadding: 50px;\n\t\tbox-sizing: border-box;\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t\tfont-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\n\t\t.showText {\n\t\t\tfont-size: 9rem;\n\t\t}\n\t}\n\t----------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-09 17:36:28","systemWhoCreated":"systemUnknown"},{"id":502,"category":"JavaScript","title":"How to use recursion to find similar flights","body":"- get full code here: [edwardtanguay/test-recursion-flights](https://github.com/edwardtanguay/test-recursion-flights)\n- the task that this solution solves is: given an array of arrays of passenger flights to specific airports, **find all airports which every passenger flies to**\n- note that recursion is used, i.e. the function `compareFlights` is initially called which starts comparing arrays to arrays and if a match#gif#testRecursionFlights\n- **index.js** \n\t---------------------------------------\n\tconst flightCollections = [\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"berlin\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"london\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"london\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"bordeux\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"london\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"munich\"\n\t\t\t}\n\t\t]\n\t];\n\n\tconst commonDestinations = [];\n\n\tconst compareFlights = (currentIndex, currentAirport = null) => {\n\t\tconst flights1 = flightCollections[currentIndex];\n\t\tconst flights2 = flightCollections[currentIndex + 1];\n\t\tconst atEnd = flightCollections.length - currentIndex === 2;\n\n\t\tconst airportsAreTheSame = (currentAirport, flight1, flight2) => {\n\t\t\treturn (currentAirport === null || flight1.airport === currentAirport) && flight1.airport === flight2.airport;\n\t\t};\n\n\t\tif (!atEnd) {\n\t\t\tflights1.forEach((flight1) => {\n\t\t\t\tflights2.forEach(flight2 => {\n\t\t\t\t\tif (airportsAreTheSame(currentAirport, flight1, flight2)) {\n\t\t\t\t\t\tcompareFlights(currentIndex + 1, flight1.airport);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tflights1.forEach((flight1) => {\n\t\t\t\tflights2.forEach(flight2 => {\n\t\t\t\t\tif (airportsAreTheSame(currentAirport, flight1, flight2)) {\n\t\t\t\t\t\tcommonDestinations.push({ airport: flight1.airport });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tcompareFlights(0);\n\tconsole.log(commonDestinations);\n\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-10 11:47:24","systemWhoCreated":"systemUnknown"},{"id":503,"category":"React","title":"React site with Audio element and JavaScript classes that interact with React function components","body":"- full code here: [edwardtanguay/test-react-class-component](https://github.com/edwardtanguay/test-react-class-component)\n- this example shows (1) how to play standard piano notes with AudioContext, as well as (2) how to allow JavaScript classes to interact with React functional components\n- note that Piano.js (React function compenent) imports both AudioManager (JavaScript class) and RecordingManager (React function manager). AudioManager is responsible for playing music, and RecordingManager for recording it. RecordingManager accepts AudioManager as a prop, while AudioManager then accepts an inject function from RecordingManager as a parameter.#gif#audioComponentsClasses\n- **Piano.js** (React function component)\n\t---------------------------------------\n\timport { AudioManager } from \"../classes/AudioManager\";\n\timport { RecordingManager } from \"../components/RecordingManager\";\n\timport { getNoteFromNoteName } from \"../utils/channelKeyMap\";\n\n\tconst audioManager = new AudioManager();\n\n\texport const Piano = () => {\n\n\t\tconst handlePianoKeyPress = (noteName) => {\n\t\t\tconst note = getNoteFromNoteName(noteName);\n\t\t\taudioManager.noteOn(note, 35);\n\t\t\taudioManager.noteOffWithKeyPress(note);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"component_piano\">\n\t\t\t\t<div className=\"piano\">\n\t\t\t\t\t{['C5', 'D5', 'E5', 'F5', 'G5', 'A5', 'B5', 'C6'].map((letter, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<button key={i} className=\"whiteKey\" onClick={() => handlePianoKeyPress(letter)}>{letter.substring(1,0)}</button>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<RecordingManager audioManager={audioManager} />\n\t\t\t</div>\n\t\t)\n\t}\n\t---------------------------------------\n- **AudioManager.js** (JavaScript class)\n\t----------------------------\n\twindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n\texport class AudioManager {\n\n\t\tconstructor() {\n\t\t\tthis.ctx = new AudioContext();\n\t\t\tthis.recordNote = null;\n\t\t\tthis.oscillators = {};\n\t\t}\n\n\t\tinjectRecordNote(recordNote) {\n\t\t\tthis.recordNote = recordNote;\n\t\t}\n\n\t\tmidiToFrequency(number) {\n\t\t\tconst a = 440;\n\t\t\treturn (a / 32) * 2 ** ((number - 9) / 12);\n\t\t}\n\n\t\tnoteOn(note, velocity) {\n\t\t\tconst oscGain = this.ctx.createGain();\n\t\t\toscGain.gain.value = 0.33;\n\t\t\tconst velocityGainAmount = (1 / 127) * velocity;\n\t\t\tconst velocityGain = this.ctx.createGain();\n\n\t\t\tconst osc = this.ctx.createOscillator();\n\t\t\tosc.type = 'sine';\n\t\t\tosc.frequency.value = this.midiToFrequency(note);\n\t\t\tvelocityGain.gain.value = velocityGainAmount;\n\n\t\t\tosc.connect(oscGain);\n\t\t\tosc.connect(velocityGain);\n\t\t\tvelocityGain.connect(this.ctx.destination);\n\n\t\t\tosc.gain = oscGain;\n\n\t\t\tconsole.log(osc.frequency.value);\n\t\t\tthis.oscillators[note.toString()] = osc;\n\t\t\tosc.start();\n\t\t\tthis.recordNote(note);\n\t\t}\n\n\t\tnoteOffWithKeyPress(note) {\n\t\t\tconst osc = this.oscillators[note.toString()];\n\t\t\tsetTimeout(() => {\n\t\t\t\tosc.stop();\n\t\t\t\tosc.disconnect();\n\t\t\t}, 200);\n\n\t\t\tdelete this.oscillators[note.toString()];\n\t\t}\n\t}\n\t----------------------------\n- **RecordingManager.js** (React functional component) \n\t----------------------------------------\n\timport { useState } from 'react';\n\timport { RiRecordCircleFill } from 'react-icons/ri';\n\n\texport const RecordingManager = ({ audioManager }) => {\n\t\tconst [isRecording, setIsRecording] = useState(false);\n\t\tconst [recordingArray, setRecordingArray] = useState([]);\n\n\t\tconst handleRecordButton = () => {\n\t\t\tsetIsRecording(!isRecording);\n\t\t}\n\n\t\tconst recordNote = (note) => {\n\t\t\tif (isRecording) {\n\t\t\t\trecordingArray.push(note);\n\t\t\t\tsetRecordingArray([...recordingArray]);\n\t\t\t}\n\t\t}\n\n\t\taudioManager.injectRecordNote(recordNote);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<button className={`recordButton${isRecording ? ' recording' : ''}`} onClick={handleRecordButton}><RiRecordCircleFill className=\"icon\" /><span>Record</span></button>\n\t\t\t\t<div className=\"recordedNotes\">\n\t\t\t\t\t{recordingArray.map((note) => note).join(', ')}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-11 02:13:49","systemWhoCreated":"systemUnknown"},{"id":504,"category":"React","title":"Create a reusable todolist component in React that uses localStorage","body":"- full code here: [edwardtanguay/todolist-react-multiple-components](https://github.com/edwardtanguay/todolist-react-multiple-components)\n- use app live here: [https://todolist-react-multiple-components.netlify.app](https://todolist-react-multiple-components.netlify.app)\n- this sample app shows a number of concepts: (1) how to create components that are 100% separate from each other, you can create as many todolist components as you want, (2) how to use `useRef` to programmatically set focus in a field, (3) how to use `localStorage` to save todo-list data in the user's browser, and (4) how to use radio buttons in React#gif#reactMultipleComponentsTodolist\n- note that you send an idCode (e.g. `person001`) as a prop to each instance of the component\n\t- the component uses this idCode to keep e.g. the radio buttons and localStorage separate from the other components\n- **App.js**\n\t------------------------------\n\timport './App.scss';\n\timport { TodoList } from './components/TodoList';\n\n\tconst persons = ['person001','person002','person003','person004'];\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{persons.map(m => <TodoList idCode={m} key={m}/>)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t------------------------------\n- **TodoList.js**\n\t----------------------------------------\n\timport { useState, useRef, useEffect } from 'react';\n\n\texport const TodoList = ({ idCode }) => {\n\t\tconst [area, setArea] = useState('home');\n\t\tconst [todo, setTodo] = useState('');\n\t\tconst [todoList, setTodoList] = useState([]);\n\t\tconst todoInputBox = useRef(null);\n\n\t\tconst addPrefix = (text) => {\n\t\t\treturn `${idCode}-${text}`;\n\t\t}\n\n\t\tuseEffect(() => {\n\t\t\tconst _todoList = JSON.parse(localStorage.getItem(addPrefix('todoList')));\n\t\t\t_todoList !== null && setTodoList([..._todoList]);\n\t\t\tidCode === 'person001' && todoInputBox.current.focus();\n\t\t}, []);\n\n\t\tconst saveToLocalStorage = (_todoList) => {\n\t\t\tlocalStorage.setItem(addPrefix('todoList'), JSON.stringify(_todoList));\n\t\t}\n\n\t\tconst handleClearButton = (e) => {\n\t\t\te.preventDefault();\n\t\t\tsaveToLocalStorage([]);\n\t\t\tsetTodoList([]);\n\t\t\ttodoInputBox.current.focus();\n\t\t}\n\n\t\tconst handleAddTodoButton = (e) => {\n\t\t\te.preventDefault();\n\t\t\tif (todo.trim() !== '') {\n\t\t\t\ttodoList.push(`${todo} (${area})`);\n\t\t\t\tsaveToLocalStorage(todoList);\n\t\t\t\tsetTodo('');\n\t\t\t}\n\t\t\ttodoInputBox.current.focus();\n\t\t}\n\n\t\tconst handleAreaChange = (e) => {\n\t\t\tsetArea(e.target.value);\n\t\t\ttodoInputBox.current.focus();\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"todoListComponent\">\n\t\t\t\t<form>\n\t\t\t\t\t<input id={addPrefix('home')} type=\"radio\" name=\"area\" value=\"home\" checked={area === \"home\"} onChange={(e) => handleAreaChange(e)} />\n\t\t\t\t\t<label htmlFor={addPrefix('home')}>Home</label>\n\n\t\t\t\t\t<input id={addPrefix('work')} type=\"radio\" name=\"area\" value=\"work\" checked={area === \"work\"} onChange={(e) => handleAreaChange(e)} />\n\t\t\t\t\t<label htmlFor={addPrefix('work')}>Work</label>\n\n\t\t\t\t\t<span>{idCode}</span>\n\n\t\t\t\t\t<button className=\"clearButton\" onClick={(e) => handleClearButton(e)}>Clear</button>\n\n\t\t\t\t\t<div className=\"inputArea\">\n\t\t\t\t\t\t<input type=\"text\" ref={todoInputBox} value={todo} onChange={(e) => setTodo(e.target.value)} />\n\t\t\t\t\t\t<button onClick={(e) => handleAddTodoButton(e)}>Add Todo</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t\t<div className=\"todoList\">\n\t\t\t\t\t{todoList.map((m, i) => <div key={i}>{m}</div>)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t};\n\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-12 00:36:35","systemWhoCreated":"systemUnknown"},{"id":505,"category":"Promises","title":"JavaScript try/catch, Promise consumed by .then(), Promise consumed by async/await","body":"- code is here: [edwardtanguay/promises-async-await](https://github.com/edwardtanguay/promises-async-await)\n- these examples show the evolution of asynchronous data fetching and error handling in JavaScript#gif#asyncawaittrycatch\n- **trycatch.js**\n\t------------------------------------\n\tconst getId = () => {\n\t\tconst id = Math.floor(Math.random() * 3); // 0, 1, 2\n\t\tif (id === 0) {\n\t\t\tthrow new Error('id not found');\n\t\t} else {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\ttry {\n\t\tconst id = getId();\n\t\tconsole.log(id);\n\t}\n\tcatch (err) {\n\t\tconsole.log(err.message);\n\t}\n\t------------------------------------\n- **callback.js**\n\t-----------------------------------\n\tconst getId = (callback) => {\n\t\tsetTimeout(() => {\n\t\t\tconst id = Math.floor(Math.random() * 3); // 0, 1, 2\n\t\t\tif (id === 0) {\n\t\t\t\tthrow new Error(\"id not found\");\n\t\t\t} else {\n\t\t\t\tcallback(id);\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\tconst app = () => {\n\t\tconsole.log('getting id...');\n\t\ttry {\n\t\t\tgetId(id => {\n\t\t\t\tconsole.log(`ID is ${id}`);\n\t\t\t});\n\t\t}\n\t\tcatch (err) {\n\t\t\tconsole.log(`ERROR: ${err.message}`);\n\t\t\t/*\n\t\t\t\"As far as I know, it is not possible to catch exceptions thrown in JavaScript callbacks (at least, not in any straightforward manner).\" \n\t\t\t\"If you can use Promises and async/await, it can be solved.\"\n\t\t\thttps://stackoverflow.com/questions/3677783/is-it-possible-to-catch-exceptions-thrown-in-a-javascript-async-callback\n\t\t*/\n\t\t}\n\t};\n\tapp();\n\t-----------------------------------\n- **promises.js**\n\t----------------------------------------\n\tconst getId = () => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst id = Math.floor(Math.random() * 3);\n\t\t\t\tid === 0 ? reject('id not found') : resolve(id);\n\t\t\t}, 1000);\n\t\t});\n\t};\n\n\tconst getEmployee = (id) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tswitch (id) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tname: \"Sancho Rodrigez\"\n\t\t\t\t\t\t});\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tname: \"Wolfram Randomlich\"\n\t\t\t\t\t\t});\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treject(`employee not found with id ${id}`);\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t})\n\t}\n\n\t// call with .then\n\tconst app1 = () => {\n\t\tconsole.log('getting id...');\n\t\tgetId()\n\t\t\t.then(id => {\n\t\t\t\tconsole.log(`The id is: ${id}`);\n\t\t\t\tconsole.log('getting employee...');\n\t\t\t\tgetEmployee(id)\n\t\t\t\t\t.then(employee => {\n\t\t\t\t\t\tconsole.log(`Employee is: ${employee.name}`);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tconsole.log(`ERROR: ${error}`);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(`ERROR: ${error}`);\n\t\t\t})\n\t};\n\tapp1();\n\n\t// call with async/await\n\tconst app2 = async () => {\n\t\tconsole.log('getting id...');\n\t\ttry {\n\t\t\tconst id = await getId();\n\t\t\tconsole.log(`ID is: ${id}`);\n\t\t\tconsole.log('getting employee...');\n\t\t\ttry {\n\t\t\t\tconst employee = await getEmployee(id);\n\t\t\t\tconsole.log(`Employee is: ${employee.name}`);\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(`ERROR: ${error}`);\n\t\t\t}\n\t\t}\n\t\tcatch (error) {\n\t\t\tconsole.log(`ERROR: ${error}`);\n\t\t}\n\t}\n\t// app2();\n\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-18 08:03:52","systemWhoCreated":"systemUnknown"},{"id":506,"category":"React","title":"Examples of consuming APIs with fetch and axios","body":"- full code at: [edwardtanguay/examples-of-fetch-and-axios](https://github.com/edwardtanguay/examples-of-fetch-and-axios)\n- data in this example is fetched from the [Northwind database JSON files](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json)\n- this code shows how to load data from APIs using both the standard `fetch()` as well as the library `axios()`##axiosandfetchok\n- **App.js**\n\t------------------------------------\n\timport { useState, useEffect } from 'react';\n\timport axios from 'axios';\n\timport './App.scss';\n\n\tconst employeesUrl = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/employees.json';\n\tconst customersUrl = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/customers.json';\n\n\tfunction App() {\n\t\tconst [employees, setEmployees] = useState([]);\n\t\tconst [customers, setCustomers] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(employeesUrl);\n\t\t\t\tconst _employees = await response.json();\n\t\t\t\tsetEmployees([..._employees]);\n\t\t\t})();\n\t\t\t(async () => {\n\t\t\t\tconst response = await axios.get(customersUrl);\n\t\t\t\tsetCustomers([...response.data]);\n\t\t\t})();\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Example of fetch and axios</h1>\n\t\t\t\t<h2>Employees</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{employees.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i}>{item.firstName} {item.lastName}</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t\t<h2>Customers</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{customers.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i}>{item.contactName}</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-18 08:43:27","systemWhoCreated":"systemUnknown"},{"id":507,"category":"GraphQL","title":"How to set up a GraphQL backend with MongoDB and Express","body":"- the project shows you how to setup a GraphQL server locally with Apollo and Express which serves data from a MongoDB database\n- full code is here: [edwardtanguay/graphql-apollo-express-mongodb](https://github.com/edwardtanguay/graphql-apollo-express-mongodb)\n- create a MongoDB collection called `persons` and fill with fake data\n\t- `npm init -y`\n- in **package.json**, remember to set type to modules##remembertypemoddd\n- install necessary packages\n\t- `npm i faker@5.5.3`\n\t- `npm i mongoose`\n- **createFakedata.js**\n\t-------------------------------------\n\timport mongoose from 'mongoose';\n\timport faker from 'faker';\n\n\tconst mongoURI = 'mongodb://localhost:27017/store';\n\n\tconst PersonSchema = new mongoose.Schema({\n\t\tfirstName: { type: String },\n\t\tlastName: { type: String },\n\t\temail: { type: String },\n\t},\n\t\t{\n\t\t\tcollection: \"persons\", versionKey: false\n\t\t}\n\t);\n\n\tconst Person = mongoose.model('Person', PersonSchema);\n\n\ttry {\n\t\tawait mongoose.connect(mongoURI);\n\t\tconsole.log(`connected to database`);\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\tprocess.exit(1)\n\t}\n\n\tconst persons = [];\n\n\tfor (let i = 1; i <= 20; i++) {\n\t\tconst firstName = faker.name.firstName();\n\t\tconst lastName = faker.name.lastName();\n\t\tconst email = faker.internet.email(`${firstName} ${lastName}`);\n\t\tpersons.push({\n\t\t\tfirstName: firstName,\n\t\t\tlastName: lastName,\n\t\t\temail: email\n\t\t});\n\t}\n\n\tpersons.forEach(person => Person.create(person));\n\t-------------------------------------\n- execute with `node createFakedata.js`\n- check your MongoDB to see that you have data in a `Persons` collection##seedatainmongo\n- then **set up your GraphQL server with Express** which reads from MongoDB\n- install necessary packages\n\t- `npm i apollo-server-express`\n\t- `npm i express`\n\t- `npm i graphql`\n- **server.js**\n\t----------------------------------------\n\timport { ApolloServer } from 'apollo-server-express';\n\timport { ApolloServerPluginLandingPageGraphQLPlayground } from 'apollo-server-core';\n\timport express from 'express';\n\timport mongoose from 'mongoose';\n\n\tconst port = 4044;\n\tconst mongoURI = 'mongodb://localhost:27017/store';\n\n\tconst typeDefs = `\n\t\ttype Query {\n\t\t\tcustomers(limit:Int): [Person]\n\t\t}\n\n\t\ttype Person {\n\t\t\tfirstName: String!\n\t\t\tlastName: String!\n\t\t\temail: String!\n\t\t}\n\n\t\tinput CreateCustomerInput {\n\t\t\tfirstName: String!\n\t\t\tlastName: String!\n\t\t\temail: String!\n\t\t}\n\n\t\ttype Mutation {\n\t\t\tcreateCustomer(input: CreateCustomerInput): Person\n\t\t}\n\t`;\n\n\tconst PersonSchema = new mongoose.Schema(\n\t\t{\n\t\t\tfirstName: { type: String },\n\t\t\tlastName: { type: String },\n\t\t\temail: { type: String }\n\t\t},\n\t\t{ collection: 'persons', versionKey: false }\n\t);\n\n\tconst Person = mongoose.model('Person', PersonSchema);\n\n\tconst resolvers = {\n\t\tQuery: {\n\t\t\tcustomers: async (_, { limit }) => {\n\t\t\t\treturn await Person.find().limit(limit);\n\t\t\t}\n\t\t},\n\t\tMutation: {\n\t\t\tcreateCustomer: async (_, {input}) => {\n\t\t\t\tconsole.log(input);\n\t\t\t\treturn await Person.create(input);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst app = express();\n\n\tconst server = new ApolloServer({\n\t\ttypeDefs,\n\t\tresolvers,\n\t\tplugins: [ApolloServerPluginLandingPageGraphQLPlayground()]\n\t});\n\n\tawait server.start();\n\n\tserver.applyMiddleware({ app });\n\n\tapp.listen(port, () => console.log(`server is running on: http://localhost:${port}`));\n\n\ttry {\n\t\tawait mongoose.connect(mongoURI);\n\t\tconsole.log('connected to database');\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\tprocess.exit(1);\n\t}\n\t----------------------------------------\n- run your server with `node server.js` \n\t- you will get the following playground in your browser\n\t- type in query to get e.g. all firstNames:##getallfirstgraphql\n\t- Note that when querying GraphQL, **you cannot have all fields returned by default**, you have to specify each field that you want, this is by design\n\t\t- Stack Overflow: [How to query all the GraphQL type fields without writing a long query?](https://stackoverflow.com/questions/34199982/how-to-query-all-the-graphql-type-fields-without-writing-a-long-query)\n\t\t\t- *You're asking how to do something that GraphQL, by design, does not support.*\n\t\t\t- *Unfortunately what you'd like to do is not possible. GraphQL requires you to be explicit about specifying which fields you would like returned from your query.*\n\t- But note you can use [GraphQL Fragments](https://www.apollographql.com/docs/react/data/fragments):\n\t\t- define fragments:\n\t\t\t-----------------------------\n\t\t\tfragment NameParts on Person {\n\t\t\t  firstName\n\t\t\t  lastName\n\t\t\t}\n\t\t\t------------------------------------\n\t\t- use fragments:\n\t\t\t------------------------------------\n\t\t\tquery GetPerson {\n\t\t\t  people(id: \"7\") {\n\t\t\t\t...NameParts\n\t\t\t\tavatar(size: LARGE)\n\t\t\t  }\n\t\t\t}\n\t\t\t------------------------------------\n\t- type in mutation to create a new Person in the persons collection:##andthemutationforang\n- this Howto was based on this code: [NikoHamburg/graphDemo](https://github.com/NikoHamburg/graphDemo)\n- an example of a more complicated project using GraphQL: [NikoHamburg/graphQLAPI](https://github.com/NikoHamburg/graphQLAPI)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-23 12:00:44","systemWhoCreated":"systemUnknown"},{"id":508,"category":"Linux","title":"How to fix the \"System limit for number of file watchers reached\" error on Ubuntu","body":"- sometimes when working on Ubuntu in React projects, I have seen the following problem:##watchererrorubuntu\n- the solution appears to be to increase the **inotify watch limit**\n- a solution that worked for someone on Ubuntu in one instance was this:\n\t- edit system control configuration file\n\t\t- `sudo vi /etc/sysctl.conf` (edit\n\t- add the following line to the bottom of the file:\n\t\t-------------------------------------------\n\t\tfs.inotify.max_user_watches=524288\n\t\t-------------------------------------------\n\t\t- save and exit\n\t- load settings from the sysctl.conf file:\n\t\t- `sudo sysctl -p`\n- if that doesn't solve the problem for you, see more details in this Stack Overflow question: [React Native Error: ENOSPC: System limit for number of file watchers reached](https://stackoverflow.com/questions/55763428/react-native-error-enospc-system-limit-for-number-of-file-watchers-reached)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-23 13:14:11","systemWhoCreated":"systemUnknown"},{"id":509,"category":"React Router","title":"How to create a vertical menu page with React Router v6","body":"- get full code here: [edwardtanguay/react-router-vertical-menu-page](https://github.com/edwardtanguay/react-router-vertical-menu-page)\n- this project was based on [this code](https://codesandbox.io/s/nested-routes-outlet-lpllv?file=/src/App.js)\n\t- note that I switched the data source from a JavaScript object to a JSON file, which makes the move to backend API easier#gif#theVerticalMenuReact\n- note the use of `<Outlet/>`\n\t- *\"An Outlet should be used in parent route elements to render their child route elements. This allows nested UI to show up when child routes are rendered. If the parent route matched exactly, it will render a child index route or nothing if there is no index route.\"* - [documentation](https://reactrouter.com/docs/en/v6/api)\n- **App.js**\n\t------------------------------------\n\timport * as React from 'react';\n\timport {\n\t\tBrowserRouter as Router,\n\t\tRoute,\n\t\tRoutes,\n\t\tNavLink\n\t} from 'react-router-dom';\n\timport './App.scss';\n\timport { PageHome } from './pages/PageHome';\n\timport { PageTopics } from './pages/PageTopics';\n\timport { PageResource } from './pages/PageResource';\n\timport { PageTopic } from './pages/PageTopic';\n\n\texport default function App() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Edward's Howtos</h1>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<NavLink to=\"/\">Home</NavLink>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<NavLink to=\"/topics\">Topics</NavLink>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<Routes>\n\t\t\t\t\t\t<Route path=\"/\" element={<PageHome />} />\n\t\t\t\t\t\t<Route path=\"/topics\" element={<PageTopics />}>\n\t\t\t\t\t\t\t<Route path=\":topicId\" element={<PageTopic />}>\n\t\t\t\t\t\t\t\t<Route path=\":resourceId\" element={<PageResource />} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Routes>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n\t------------------------------------\n- **PageHome.js**\n\t-------------------------------\n\timport { NavLink } from 'react-router-dom';\n\n\texport function PageHome() {\n\t\treturn (\n\t\t\t<div className=\"areaHome\">\n\t\t\t\t<p>\n\t\t\t\t\tWelcome to our content index. Head over to <NavLink to=\"/topics\">topics</NavLink> to see our catalog.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n\t-------------------------------\n- **PageTopics.js**\n\t------------------------------------------\n\timport { Outlet, NavLink } from 'react-router-dom';\n\timport { getTopics } from '../tools/dataManager';\n\n\texport function PageTopics() {\n\t\tconst topics = getTopics();\n\n\t\treturn (\n\t\t\t<div className=\"areaTopics\">\n\t\t\t\t<ul>\n\t\t\t\t\t{topics.map(({ name, id }) => (\n\t\t\t\t\t\t<li key={id}>\n\t\t\t\t\t\t\t<NavLink to={id}>{name}</NavLink>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<Outlet />\n\t\t\t</div>\n\t\t);\n\t}\n\t------------------------------------------\n- **PageTopic.js**\n\t------------------------------------------\n\timport { useParams, NavLink, Outlet } from 'react-router-dom';\n\timport { getTopic } from '../tools/dataManager';\n\n\texport function PageTopic() {\n\t\tconst { topicId } = useParams();\n\t\tconst topic = getTopic(topicId);\n\n\t\treturn (\n\t\t\t<div className=\"areaTopic\">\n\t\t\t\t<h2>{topic.name} Howtos</h2>\n\t\t\t\t<p>{topic.name}: {topic.description}</p>\n\t\t\t\t<ul>\n\t\t\t\t\t{topic.resources.map((sub) => (\n\t\t\t\t\t\t<li key={sub.id}>\n\t\t\t\t\t\t\t<NavLink to={sub.id}>{sub.name}</NavLink>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<Outlet />\n\t\t\t</div>\n\t\t);\n\t}\n\t------------------------------------------\n- **PageResource.js**\n\t------------------------------------------\n\timport { useParams } from 'react-router-dom';\n\timport { getResource } from '../tools/dataManager';\n\n\texport function PageResource() {\n\t\tconst { topicId, resourceId } = useParams();\n\t\tconst { name, description, id } = getResource({ topicId, resourceId });\n\n\t\treturn (\n\t\t\t<div className=\"areaResource\">\n\t\t\t\t<h3>{name}</h3>\n\t\t\t\t<p>{description}</p>\n\t\t\t\t<div className=\"link\">\n\t\t\t\t\t&gt;&gt;&gt; <a target=\"_blank\" href={`https://edwardtanguay.netlify.app/howtos?id=${id}`} rel=\"noreferrer\">Go to Howto</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-02-25 08:39:12","systemWhoCreated":"systemUnknown"},{"id":510,"category":"JavaScript","title":"Use Northwind JSON files to practice JavaScript array functions","body":"- convert online JSON file into JavaScript object in a local JavaScript file that you can run in Node\n\t- go to [Northwind JSON files repository](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json)\n\t- click **employees.json**\n\t- click **Raw**\n\t- CTRL-A, CTRL-C to copy\n\t- go to [JSON-to-JavaScript-Object converter](https://www.convertsimple.com/convert-json-to-javascript)\n\t- paste in your JSON text into the left-hand side\n\t- note the only difference are the removal of the quotation marks on the keys##thediffjsonobj\n\t- on the right-hand side, click **Copy to Clipboard**\n- save the JavaScript object as a variable in a file\n\t- create file: `funcarrays.js`\n\t- type `const employees = ` and press CTRL-V to paste your code\n\t- add a semi-colon at the end\n\t- at bottom of file, type `console.log(employees.length);`\n\t- execute the file with `node funcarrays.js`\n\t- since there are 9 employee objects in the above array, you should see the number: `9` \n- move object to bottom of file, code to top\n\t- normally we would import this JavaScript object from another file, but for now let's make it so we can code at the top and have all our data stored somewhere under our code in the file\n\t- delete console.log line\n\t- convert `const employees` to a **classic function** (not an arrow function) \n\t\t- reason: **you can call classic functions before they are declared in code** (JavaScript weirdness hack)\n\t\t- top of function should look like this:\n\t\t\t-------------------------------\n\t\t\tfunction getEmployees() {\n\t\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\temployeeID: 2,\n\t\t\t\t\tlastName: \"Fuller\",\n\t\t\t-------------------------------\n\t\t- bottom of function should look like this:\n\t\t\t-------------------------------\n\t\t\t\t\t\t\t48304,\n\t\t\t\t\t\t\t55113,\n\t\t\t\t\t\t\t55439\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\t\t\t-------------------------------\n\t- then above the `getEmployees()` function type this:\n\t\t----------------------------------\n\t\tconst employees = getEmployees();\n\t\tconsole.log(employees.length);\n\t\t----------------------------------\n\t- format your code so that you have a space at top to use your data, and a space for all the data you need at the bottom (we can create as many functions as we like, e.g. `getCustomers()`, `getProducts()`, `getOrders()`, etc.\n\t- also, install the VSCode **Quokka** extension, press **F1**, click on **Quokka.js: Start on Current File** and you have your\n\t- and add a comment separator between your code and data:##formatjscodejson\n\t- we can now add as many data `get()` functions as we want before this line and have access to them all in our code, so that we can practice querying and manipulating data with function arrays","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-01 07:07:51","systemWhoCreated":"systemUnknown"},{"id":511,"category":"JavaScript","title":"Join JavaScript arrays with ES6 functions in Export/Import modules","body":"- background\n\t- in the [previous howto](https://edwardtanguay.netlify.app/howtos?id=510), we loaded an array of employees from a `getEmployees()` function in the same JavaScript file\n\t- the problem with this is that it doesn't scale: if you have two or three functions such as `getCustomers()` and `getProducts()` then the file becomes long and cumbersome\n\t- JavaScript modules are a solution to encapsulate these functions so that you import them in one line from any file\n\t- the goal of this howto is to convert the `getEmployees()` function from the previous howto file to a module and import it from the main file\n\t- we will then import `customers` and `orders` from modules and combine them with ES6 array functions\n- set up project\n\t- using modules requires you to have a package.json file and hence a new directory and project\n\t- under you **projects** directory, create a directory called `moduletest`\n\t- go into it with `cd moduletest`\n\t- create `main.js` (this file will import your data modules)\n- create **customers** module and import into `main.js`\n\t- copy the [customers.json](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json) files into `data_customers.js`\n\t\t- (you can leave it as JSON format since it is also valid JavaScript object syntax)\n\t\t- your `customers.js` file should look like this:##customersFileLook\n\t- in main, import and display the number of customers:\n\t\t-----------------------------\n\t\timport { customers } from './customers.js';\n\n\t\tconsole.log(customers.length);\n\t\t-----------------------------\n\t- run it with `node main.js` and you will get this error:##thetypemoderror\n\t\t- set up an npm project by typing `npm init -y` which will create a `package.json` file\n\t\t- in the `package.json` file add `\"type\": \"module\" entry##addentrymodtyp\n\t\t- run `node main.js` again and it will display the number of customers in the JavaScript object in the `customers.js` file##gothe91\n- create **orders** module and import into `main.js`\n\t- create a `orders.js` file the same way as you created the `customers.js` file above and import it into main.js\n\t- display both with:\n\t\t-------------------------------------\n\t\tconsole.log(`There are ${customers.length} customers and ${orders.length} orders.`);\n\t\t-------------------------------------\n- practice basic ES6 functions\n\t- 1. display how many customers in London\n\t\t--------------------------------------\n\t\tconsole.log(`There are ${customers.filter(m => m.address.city === 'London').length} customers in London.`);\n\t\t--------------------------------------\n\t- 2. turn this into a function `getNumberOfCustomersInCity(city)` and display for **Nantes** and **Paris**\n\t- 3. display how many orders in 1996\n\t\t------------------------------------------\n\t\tconsole.log(`There were ${orders.fitler(m => m.orderDate.startsWith('1996')).length} orders in 1996`);\n\t\t------------------------------------------\n\t- 4. turn this into a function `getNumberOfOrdersForYear(year)` and display for 1997 and 1998\n\t- 5. display the company name of the customer with ID `CONSH`\n\t- 6. write a function `getCompanyNameById(id)` which returns the company names for `LAUGB`, `FRANR`, and `GALED`\n- use ES6 functions to join the two arrays together\n\t- 7. create function `getOrderDatesByCustomerId(customerId)` which e.g. if you send `LAUGB` as a parameter, it returns the object:\n\t\t-------------------------------------\n\t\t{\n\t\t\tname: \"Laughing Bacchus Wine Cellars\",\n\t\t\torderDates: [\n\t\t\t\t\"1997-04-03\",\n\t\t\t\t\"1997-08-05\",\n\t\t\t\t\"1998-01-01\"\n\t\t\t]\n\t\t}\n\t\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-01 23:49:15","systemWhoCreated":"systemUnknown"},{"id":512,"category":"JavaScript","title":"Use ES6 functions to display data from two arrays in an HTML file","body":"- create a standard HTML file called `info.html` with the emmet **doc** command\n- in the HEAD area, connect the JavaScript file and enable ES6 modules:\n\t-----------------------------\n\t<script type=\"module\" defer src=\"./info.js\"></script>\n\t-----------------------------\n- create **info.js**\n\t- import arrays\n\t\t--------------------------------------------\n\t\timport { customers } from './customers.js';\n\t\timport { orders } from './orders.js';\n\t\t--------------------------------------------\n\t- display static title **Info Page** and dynamic data##displaydyanimsi\n\t\t- **info.html**\n\t\t\t--------------------------------------------\n\t\t\t\t<h1>Info Page</h1>\n\t\t\t\t<div class=\"mainInfo\"></div>\n\t\t\t--------------------------------------------\n\t\t- **info.js**\n\t\t\t-----------------------------------------------------\n\t\t\tconst mainInfoElem = document.querySelector('.mainInfo');\n\t\t\tmainInfoElem.innerHTML = `There are ${customers.length} customers and ${orders.length} orders.`;\n\t\t\t-----------------------------------------------------\n\t- display customers in France:##addcustomfran\n\t- display order information for a given array of order ids:\n\t\t- `const orderIds = [10839, 10810, 10825, 10829];`##thelistorderinfo","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-02 01:34:03","systemWhoCreated":"systemUnknown"},{"id":513,"category":"JavaScript","title":"JavaScript Closures","body":"- an example of closure, what's going on here?\n\t------------------------------------\n\tconst add = (function () {\n\t\tlet counter = 0;\n\t\treturn function () { counter += 1; return counter }\n\t})();\n\n\tconsole.log(add());\n\tconsole.log(add());\n\tconsole.log(add());\n\t------------------------------------\n- the same closure with arrow syntax, what's going on here?\n\t----------------------------------\n\tconst add = (() => {\n\t\tlet counter = 0;\n\t\treturn () => {\n\t\t\tcounter += 1;\n\t\t\treturn counter;\n\t\t}\n\t})();\n\n\tconsole.log(add());\n\tconsole.log(add());\n\tconsole.log(add());\n\t----------------------------------\n- the essence of closure:##whatisclosureexplanation\n- one of the best explanations of closures is at [w3schools: JavaScript closure](https://www.w3schools.com/js/js_function_closures.asp)\n- an example with a shopping cart made with closure that collects items\n\t----------------------------------------\n\tconst cart = (customerId) => {\n\t\tconst whenCreated = new Date();\n\t\tconst items = [];\n\t\treturn (item) => {\n\t\t\titems.push(item);\n\t\t\treturn `Cart for customer ${customerId} created at ${whenCreated.toISOString()} has ${items.length} items: ${items.join(', ')}`;\n\t\t};\n\t};\n\n\tconst cart1 = cart(111);\n\tconst cart2 = cart(222);\n\n\tconsole.log(cart1('milk'));\n\tconsole.log(cart2('bread'));\n\tconsole.log(cart1('apples'));\n\tsetTimeout(() => {\n\t\tconsole.log(cart1('butter'));\t\n\t}, 1000);\n\t----------------------------------------\n- a closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment)\n- you can use a closure anywhere that you might normally use **a JavaScript class object with only a single method**\n- today, a much more organized, robust and useful design pattern which enables you to take advantage of this private scope, is now built into ES6: **JavaScript classes**","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-07 05:38:12","systemWhoCreated":"systemUnknown"},{"id":514,"category":"JavaScript","title":"JavaScript Recursion","body":"- recursion jokes:\n\t- *To understand recursion, you must first understand recursion.*\n\t- search Google for *recursion*\n\t- here we go again:##recursiongoagain\n- example of recursion in code, what's going on here?\n\t---------------------------------\n\tconst countdown = (num) => {\n\t\tconsole.log(num);\n\t\tif (num > 0) {\n\t\t\tcountdown(num - 1);\n\t\t} else {\n\t\t\tconsole.log('blast off');\n\t\t}\n\t}\n\tcountdown(10);\n\t---------------------------------\n- concepts: base case, recursive case, return statement##recursionbasecase\n- a good site to learn basic recursion: [Programiz: JavaScript Recursion](https://www.programiz.com/javascript/recursion)\n- this recursive function reverses the order of characters in a string\n\t- identify the counter-intuitive aspect of this example of recursion:\n\t\t---------------------------------------------\n\t\tfunction reverseString(str) {\n\t\t\tif (str === '') {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\treturn reverseString(str.substring(1)) + str.charAt(0);\n\t\t\t}\n\t\t}\n\t\tconsole.log(reverseString(\"live\"))\n\t\t---------------------------------------------\n- real-life example of recursion: scan n number of arrays to find all items which are contained in each array\n\t-------------------------------------------\n\tconst flightCollections = [\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"berlin\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"london\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"london\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"bordeux\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t}\n\t\t],\n\t\t[\n\t\t\t{\n\t\t\t\tairport: \"hamburg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"london\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tairport: \"paris\"\n\t\t\t}\n\t\t]\n\t];\n\n\tconst commonDestinations = [];\n\n\tconst compareFlights = (currentIndex, currentAirport = null) => {\n\t\tconst flights1 = flightCollections[currentIndex];\n\t\tconst flights2 = flightCollections[currentIndex + 1];\n\t\tconst atEnd = flightCollections.length - currentIndex === 2;\n\n\t\tconst airportsAreTheSame = (currentAirport, flight1, flight2) => {\n\t\t\treturn (currentAirport === null || flight1.airport === currentAirport) && flight1.airport === flight2.airport;\n\t\t};\n\n\t\tif (!atEnd) {\n\t\t\tflights1.forEach((flight1) => {\n\t\t\t\tflights2.forEach(flight2 => {\n\t\t\t\t\tif (airportsAreTheSame(currentAirport, flight1, flight2)) {\n\t\t\t\t\t\tcompareFlights(currentIndex + 1, flight1.airport);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tflights1.forEach((flight1) => {\n\t\t\t\tflights2.forEach(flight2 => {\n\t\t\t\t\tif (airportsAreTheSame(currentAirport, flight1, flight2)) {\n\t\t\t\t\t\tcommonDestinations.push({ airport: flight1.airport });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tcompareFlights(0);\n\tconsole.log(commonDestinations);\n\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-07 06:39:04","systemWhoCreated":"systemUnknown"},{"id":515,"category":"JavaScript","title":"JavaScript Callbacks","body":"- basic callback example, what's going on here?\n\t-----------------------------------\n\tfunction messageDisplayer(message) {\n\t\tconsole.log(message);\n\t}\n\n\tfunction calculator(num1, num2, callback) {\n\t\tlet sum = num1 + num2;\n\t\tcallback(sum);\n\t}\n\n\tcalculator(5, 5, messageDisplayer);\n\t-----------------------------------\n- callback basics: [w3schools: JavaScript callbacks](https://www.w3schools.com/js/js_callback.asp)\n\t- JavaScript functions are executed in the sequence they are called, not in the sequence they are defined\n\t- when you pass a function as an argument, remember not to use parenthesis\n- dumb functions are flexible functions\n\t- a callback function is a function passed into another function as an argument which is then invoked inside the outer function to complete some kind of routine or action\n\t- a function that accepts other functions as arguments is called a higher-order function \n\t- a function is a value representing an **action**\n\t- regular values like strings or numbers represent data\n\t\t- a function represents an **action**\n\t- we can pass a call-back function to a higher-order function which executes the call-back function based on its own logic\n\t- the higher-order function doesn't know what it is doing\n\t\t----------------------------------------\n\t\tconst caller = func => {\n\t\t\tconsole.log(\"I accept a function and then call it.\")\n\t\t\tconsole.log(\"I have no idea what I'm going to say.\")\n\t\t\tfunc();\n\t\t\tconsole.log('---');\n\t\t}\n\n\t\tconst giveStatus = () => {\n\t\t\tconsole.log(\"All systems are running.\")\n\t\t}\n\n\t\tconst giveWeatherReport = () => {\n\t\t\tconsole.log(\"Tomorrow will be sunny.\")\n\t\t}\n\n\t\tconst giveLunchMenu = () => {\n\t\t\tconsole.log('Today we have soup.');\n\t\t}\n\n\t\tcaller(giveStatus);\n\t\tcaller(giveWeatherReport);\n\t\tcaller(giveLunchMenu);\n\t\t----------------------------------------\n- callbacks for unblocking code execution\n\t- some tasks take longer than others\n\t- want to keep the program flow moving\n\t\t----------------------------------------------\n\t\tconst getDataFromDistantServer = callback => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tcallback([\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tfirstName: 'Harald',\n\t\t\t\t\t\tlastName: 'Stadthoven'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\tfirstName: 'Claudia',\n\t\t\t\t\t\tlastName: 'Berkson'\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\t}, 5000);\n\t\t};\n\n\t\tconst getData = () => {\n\t\t\tconsole.log(`retrieving data...`);\n\t\t\tgetDataFromDistantServer(records => {\n\t\t\t\tconsole.log(`I received ${records.length} records: ${records.map(m=> `${m.firstName} ${m.lastName}`).join(', ')}`);\n\t\t\t});\n\t\t\tconsole.log(`this may take awhile so giving control back to you...`);\n\t\t}\n\n\t\t// application\n\t\tconsole.log('first task');\n\t\tgetData();\n\t\tconsole.log('third task');\n\t\t----------------------------------------------\n- why we need callbacks on websites (because of asynchronous data fetching)\n\t-----------------------------------------------------\n\t<!DOCTYPE html>\n\t<html>\n\n\t<head>\n\t\t<title>Callback Demonstration</title>\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\t\t}\n\n\t\t\th2 {\n\t\t\t\tfont-size: 18px;\n\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\tfont-weight: normal;\n\t\t\t\tfont-style: italic;\n\t\t\t\tcolor: #888;\n\t\t\t}\n\n\t\t\tdiv#app {\n\t\t\t\tmargin: 30px;\n\t\t\t\tbackground-color: #ddd;\n\t\t\t\tpadding: 20px;\n\t\t\t\tborder: 1px solid #aaa;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\twidth: 900px;\n\t\t\t\tmin-height: 400px;\n\t\t\t}\n\n\t\t\tsection.header {\n\t\t\t\tborder-bottom: 1px solid #aaa;\n\t\t\t\tpadding-bottom: 10px;\n\t\t\t\tfont-size: 22px;\n\t\t\t}\n\n\t\t\tsection.site {\n\t\t\t\tborder-bottom: 1px solid #aaa;\n\t\t\t\tpadding: 10px 0;\n\t\t\t}\n\n\t\t\tsection.dataArea {\n\t\t\t\tpadding: 10px 0;\n\t\t\t}\n\n\t\t\tdiv.showInfoArea {\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\n\t\t\t.info {\n\t\t\t\tmargin: 0 0 0 10px;\n\t\t\t}\n\n\t\t\t.typeSomething {\n\t\t\t\tmargin: 10px 0 0 0;\n\t\t\t}\n\n\t\t\th5 {\n\t\t\t\tmargin: 20px 0 10px 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\n\t\t\tul {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\tbutton {\n\t\t\t\tmargin: 0 5px 0 0;\n\t\t\t}\n\n\t\t\t.loadingGraphic {\n\t\t\t\tmargin: 20px 0 0 10px;\n\t\t\t\twidth: 30px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<div id=\"app\">\n\t\t\t<section class=\"header\">\n\t\t\t\tWhy-We-Need-Callbacks Demonstration\n\t\t\t</section>\n\t\t\t<section class=\"site\">\n\t\t\t\t<h2>Area with basic site interactivity:</h2>\n\t\t\t\t<div class=\"showInfoArea\">\n\t\t\t\t\t<button @click=\"showingInformation = !showingInformation\">Show Information</button>\n\t\t\t\t\t<div class=\"info\"\n\t\t\t\t\t\t v-show=\"showingInformation\">This is the information.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"typeSomething\">\n\t\t\t\t\tYou can type something: <input type=\"text\">\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<section class=\"dataArea\">\n\t\t\t\t<h2>Area where data is accessed from external APIs, etc.</h2>\n\t\t\t\t<div class=\"buttonArea\">\n\t\t\t\t\t<button @click=\"getLocalData()\">Get Local Data</button>\n\t\t\t\t\t<button @click=\"getExternalDataWithoutCallback()\">Get External Data Without Callback</button>\n\t\t\t\t\t<button @click=\"getSimulatedExternalDataWithCallback()\"\n\t\t\t\t\t\t\t:disabled=\"recordsStatus === 'loadingRecords'\">Get Simulated External Data With\n\t\t\t\t\t\tCallback</button>\n\t\t\t\t\t<button @click=\"getRealExternalDataWithCallback()\"\n\t\t\t\t\t\t\t:disabled=\"recordsStatus === 'loadingRecords'\">Get Real External Data With Callback</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"recordsArea\">\n\t\t\t\t\t<div v-show=\"recordsStatus === 'showingRecords'\">\n\t\t\t\t\t\t<h5>Records:</h5>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li v-for=\"record in records\">\n\t\t\t\t\t\t\t\t{{ record.firstName }} {{ record.lastName }}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-show=\"recordsStatus === 'loadingRecords'\">\n\t\t\t\t\t\t<img src=\"images/loading.gif\"\n\t\t\t\t\t\t\t class=\"loadingGraphic\"\n\t\t\t\t\t\t\t alt=\"loading\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\t\t<script>\n\t\t\tconst App = {\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tshowingInformation: false,\n\t\t\t\t\t\trecordsStatus: 'noRecords',\n\t\t\t\t\t\trecords: []\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tgetLocalData() {\n\t\t\t\t\t\tthis.records = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\tfirstName: 'Harald',\n\t\t\t\t\t\t\t\tlastName: 'Localmann'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\tfirstName: 'Claudia',\n\t\t\t\t\t\t\t\tlastName: 'Localmann'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t];\n\t\t\t\t\t\tthis.recordsStatus = 'showingRecords';\n\t\t\t\t\t},\n\t\t\t\t\tgetExternalDataWithoutCallback() {\n\t\t\t\t\t\tthis.simulateBlockingWork(5000);\n\t\t\t\t\t\tthis.records = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\tfirstName: 'Leonard',\n\t\t\t\t\t\t\t\tlastName: 'Externalmann'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\tfirstName: 'Louis',\n\t\t\t\t\t\t\t\tlastName: 'Externalmann'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t];\n\t\t\t\t\t\tthis.recordsStatus = 'showingRecords';\n\t\t\t\t\t},\n\t\t\t\t\tsimulateBlockingWork(ms) {\n\t\t\t\t\t\tvar start = new Date().getTime();\n\t\t\t\t\t\tlet now = 0;\n\t\t\t\t\t\tlet difference = 0;\n\t\t\t\t\t\tfor (var i = 0; i < 10000000000000000; i++) {\n\t\t\t\t\t\t\tnow = new Date().getTime();\n\t\t\t\t\t\t\tdifference = now - start;\n\t\t\t\t\t\t\tif (difference > ms) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetSimulatedExternalDataWithCallback() {\n\t\t\t\t\t\tthis.recordsStatus = 'loadingRecords';\n\t\t\t\t\t\tthis.getDataFromDistantServer(records => {\n\t\t\t\t\t\t\tthis.records = records;\n\t\t\t\t\t\t\tthis.recordsStatus = 'showingRecords';\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tgetRealExternalDataWithCallback() {\n\t\t\t\t\t\tthis.recordsStatus = 'loadingRecords';\n\t\t\t\t\t\tconst ts1 = new Date().getTime();\n\t\t\t\t\t\tfetch('https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/employees.json')\n\t\t\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t\t\t.then((records) => {\n\t\t\t\t\t\t\t\tconst ts2 = new Date().getTime();\n\t\t\t\t\t\t\t\tthis.records = records;\n\t\t\t\t\t\t\t\tthis.recordsStatus = 'showingRecords';\n\t\t\t\t\t\t\t\tconsole.log(`${ts2 - ts1} milliseconds`);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tgetDataFromDistantServer(callback) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tcallback([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\tfirstName: 'Harald',\n\t\t\t\t\t\t\t\t\tlastName: 'Callbackmann'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\t\tfirstName: 'Claudia',\n\t\t\t\t\t\t\t\t\tlastName: 'Callbackmann'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}, 5000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tVue.createApp(App).mount('#app');\n\t\t</script>\n\t</body>\n\n\t</html>\n\t-----------------------------------------------------\n- the problem with callbacks: callback hell (therefore: JavaScript promises and async/await)##callbackhellexample","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-07 07:51:16","systemWhoCreated":"systemUnknown"},{"id":516,"category":"JavaScript","title":"How to read and write to a JSON file via a JavaScript/DOM app (using Node/Express)","body":"- frontend code: [edwardtanguay/node-express-ejs-javascript-dom-json](https://github.com/edwardtanguay/node-express-ejs-javascript-dom-json)\n- backend code: [edwardtanguay/node-express-ejs-javascript-dom-json-backend](https://github.com/edwardtanguay/node-express-ejs-javascript-dom-json-backend)\n- This app shows how to create a frontend form in JavaScript/DOM which uses fetch to read and write to a JSON file via a Node/Express API#gif#apichangepassword\n- **FRONTEND**\n\t- **index.js**\n\t\t-------------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>read-json-site</title>\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"./css/main.css\">\n\t\t\t\t  <script src=\"./js/main.js\" defer type=\"module\"></script>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Info Site</h1>\n\t\t\t<p>Message: <span class=\"message\"></span></p>\n\t\t\t<form>\n\t\t\t\t<input type=\"text\" class=\"newMessage\">\n\t\t\t\t<button class=\"btnChange\">Change</button>\n\t\t\t</form>\n\t\t</body>\n\n\t\t</html>\n\t\t-------------------------------------------------\n\t- **main.js**\n\t\t------------------------------------------\n\t\tconst messageElem = document.querySelector('.message');\n\t\tconst newMessageElem = document.querySelector('.newMessage');\n\t\tconst btnChange = document.querySelector('.btnChange');\n\n\t\tconst emulationLoadTimeInSeconds = 1000;\n\n\t\tmessageElem.innerHTML = '<span class=\"loading\">loading...</span>';\n\t\tnewMessageElem.value = '';\n\n\t\tconst setFormToLoading = () => {\n\t\t\tnewMessageElem.disabled = true;\n\t\t\tbtnChange.disabled = true;\n\t\t}\n\n\t\tconst setFormToReady = (data) => {\n\t\t\tmessageElem.innerHTML = data.message;\n\t\t\tnewMessageElem.value = data.message;\n\t\t\tnewMessageElem.disabled = false;\n\t\t\tbtnChange.disabled = false;\n\t\t}\n\n\t\tsetFormToLoading();\n\n\t\tbtnChange.addEventListener('click', (e) => {\n\t\t\te.preventDefault();\n\t\t\tsetFormToLoading();\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ message: newMessageElem.value })\n\t\t\t};\n\t\t\tsetTimeout(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch('http://localhost:3100', requestOptions);\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetFormToReady(data);\n\t\t\t\t})();\n\t\t\t}, emulationLoadTimeInSeconds);\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch('http://localhost:3100');\n\t\t\t\tconst data = await response.json();\n\t\t\t\tsetFormToReady(data);\n\t\t\t})();\n\t\t}, emulationLoadTimeInSeconds);\n\t\t------------------------------------------\n- **BACKEND**\n\t- **api.js**\n\t\t--------------------------------------------\n\t\timport express from 'express';\n\t\timport cors from 'cors';\n\t\timport fs from 'fs';\n\n\t\tconst app = express();\n\t\tconst PORT = 3100;\n\n\t\tapp.use(cors());\n\t\tapp.use(express.json());\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tfs.readFile('./api/data/data.json', (err, data) => {\n\t\t\t\tres.send(data.toString());\n\t\t\t});\n\t\t});\n\n\t\tapp.post('/', (req, res) => {\n\t\t\tconst message = req.body.message;\n\t\t\tconst data = {\n\t\t\t\tmessage\n\t\t\t};\n\t\t\tfs.writeFile('./api/data/data.json', JSON.stringify(data), (err) => {\n\t\t\t\tres.status(200).json({\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\tmessage\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(PORT, () => {\n\t\t\tconsole.log(`Listening on port http://localhost:${PORT}`);\n\t\t});\n\t\t--------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-09 07:04:22","systemWhoCreated":"systemUnknown"},{"id":517,"category":"JavaScript","title":"Two examples of OOP design patterns using JavaScript classes: Singleton and Factory","body":"- full code: [edwardtanguay/javascript-class-oop-patterns](https://github.com/edwardtanguay/javascript-class-oop-patterns)\n- This code shows two examples of design patterns using JavaScript classes: (1) Singleton Pattern and (2) Factory Pattern#gif#oopclassescode\n- I created three versions of the Singleton Pattern, the last two which use async since it makes more sense to have a singleton pattern when you have an object that is costly to instantiate, i.e. takes a certain amount of time to fetch data\n- **oop-10-simpleSingleton.js**\n\t--------------------------------------------\n\tclass Employees {\n\t\tconstructor() {\n\t\t\tif (Employees._instance) {\n\t\t\t\treturn Employees._instance\n\t\t\t}\n\t\t\tEmployees._instance = this;\n\n\t\t\tthis.employees = [\n\t\t\t\t{\n\t\t\t\t\tid: 2,\n\t\t\t\t\tlastName: \"Nordruf\",\n\t\t\t\t\tfirstName: \"Andreas\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 3,\n\t\t\t\t\tlastName: \"Moritor\",\n\t\t\t\t\tfirstName: \"Nico\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 4,\n\t\t\t\t\tlastName: \"Rothchild\",\n\t\t\t\t\tfirstName: \"Maria\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tconsole.log('work done');\n\t\t}\n\n\t\tlist() {\n\t\t\treturn this.employees.map(m => `${m.firstName} ${m.lastName} (${m.id})`);\n\t\t}\n\t}\n\n\tconst employees = new Employees();\n\tconst emp = new Employees();\n\n\tconsole.log(employees.list());\n\tconsole.log(emp.list());\n\t--------------------------------------------\n- **oop-11-asyncSingleton.js**\n\t------------------------------------\n\timport fetch from 'node-fetch';\n\n\tclass Employees {\n\t\tconstructor() {\n\t\t\tif (Employees._instance) {\n\t\t\t\treturn Employees._instance\n\t\t\t}\n\t\t\tEmployees._instance = this;\n\n\t\t\tthis.emulatedWaitTimeInSeconds = 2;\n\t\t\tthis.employees = [];\n\t\t\tthis.dataLoaded = false;\n\n\t\t\tthis.url = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/employees.json';\n\n\t\t\tthis.initPromise = (async () => {\n\t\t\t\t\tconst response = await fetch(this.url);\n\t\t\t\t\tthis.employees = await response.json();\n\t\t\t\t\tthis.dataLoaded = true;\n\t\t\t\t\tconsole.log(`work done: got ${this.employees.length} employees`);\n\t\t\t})();\n\t\t}\n\n\t\tasync list() {\n\t\t\tawait this.initPromise;\n\t\t\treturn this.employees.map(m => `${m.firstName} ${m.lastName} (${m.employeeID})`);\n\t\t}\n\n\t}\n\n\tconst employees = new Employees();\n\tconst emps = new Employees();\n\n\tconsole.log(111);\n\t(async () => {\n\t\tconsole.log(await employees.list());\n\t})();\n\tconsole.log(222);\n\t(async () => {\n\t\tconsole.log(await emps.list());\n\t})();\n\tconsole.log(333);\n\t------------------------------------\n- **oop-12-asyncSingletonEmulated.js**\n\t------------------------------------\n\tconst fetch = () => {\n\t\treturn new Promise((resolve) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve({\n\t\t\t\t\tjson: () => new Promise((r) => r([\n\t\t\t\t\t\t{ firstName: 'Arthur', lastName: 'Pym', employeeID: 1 },\n\t\t\t\t\t\t{ firstName: 'August', lastName: 'Barnard', employeeID: 2 },\n\t\t\t\t\t\t{ firstName: 'Mildred', lastName: 'Poe', employeeID: 3 }\n\t\t\t\t\t]))\n\t\t\t\t});\n\t\t\t}, 3000);\n\t\t});\n\t}\n\n\tclass Employees {\n\t\tconstructor() {\n\t\t\tif (Employees._instance) {\n\t\t\t\treturn Employees._instance\n\t\t\t}\n\t\t\tEmployees._instance = this;\n\n\t\t\tthis.emulatedWaitTimeInSeconds = 2;\n\t\t\tthis.employees = [];\n\t\t\tthis.dataLoaded = false;\n\n\t\t\tthis.url = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/employees.json';\n\n\t\t\tthis.initPromise = (async () => {\n\t\t\t\tconst response = await fetch();\n\t\t\t\t// this.employees = await fetch2(); \n\t\t\t\tthis.employees = await response.json();\n\t\t\t\tthis.dataLoaded = true;\n\t\t\t\tconsole.log(`work done: got ${this.employees.length} employees`);\n\t\t\t})();\n\t\t}\n\n\t\tasync list() {\n\t\t\tawait this.initPromise;\n\t\t\treturn this.employees.map(m => `${m.firstName} ${m.lastName} (${m.employeeID})`);\n\t\t}\n\n\t}\n\n\tconst employees = new Employees();\n\tconst emps = new Employees();\n\n\tconsole.log(111);\n\t(async () => {\n\t\tconsole.log(await employees.list());\n\t})();\n\tconsole.log(222);\n\t(async () => {\n\t\tconsole.log(await emps.list());\n\t})();\n\tconsole.log(333);\n\t------------------------------------\n- the factory pattern shows how to make one class responsible for creating other classes, hence you have one central place to create objects so that you can do e.g. logging, reporting, etc.\n- **oop-20-factory.js**\n\t-------------------------------------\n\tclass Person {\n\t\tconstructor(firstName, lastName) {\n\t\t\tthis.firstName = firstName;\n\t\t\tthis.lastName = lastName;\n\t\t}\n\n\t\tdisplayAsLine() {\n\t\t\treturn `${firstName} ${lastName}`;\n\t\t}\n\t}\n\n\tclass Employee extends Person {\n\t\tconstructor(firstName, lastName, employeeNumber) {\n\t\t\tsuper(firstName, lastName);\n\t\t\tthis.employeeNumber = employeeNumber;\n\t\t}\n\n\t\tdisplayAsLine() {\n\t\t\treturn `${this.firstName} ${this.lastName} (empnr. ${this.employeeNumber})`;\n\t\t}\n\t}\n\n\tclass Customer extends Person {\n\t\tconstructor(firstName, lastName, company, salesPerYear) {\n\t\t\tsuper(firstName, lastName);\n\t\t\tthis.company = company;\n\t\t\tthis.salesPerYear = salesPerYear;\n\t\t}\n\n\t\tdisplayAsLine() {\n\t\t\treturn `${this.firstName} ${this.lastName} from ${this.company} with ${this.salesPerYear} sales per year`;\n\t\t}\n\t}\n\n\tclass PersonFactory {\n\t\tconstructor() {\n\t\t\tthis.personsCreated = [];\n\t\t}\n\n\t\tinstantiate(kind, obj) {\n\t\t\tswitch (kind) {\n\t\t\t\tcase 'employee':\n\t\t\t\t\tconst employee = new Employee(obj.firstName ?? '(unknown)', obj.lastName ?? '(unknown)', obj.employeeNumber ?? '(unknown)');\n\t\t\t\t\tthis.personsCreated.push(employee);\n\t\t\t\t\treturn employee;\n\t\t\t\tcase 'customer':\n\t\t\t\t\tconst customer = new Customer(obj.firstName ?? '(unknown)', obj.lastName ?? '(unknown)', obj.company ?? '(unknown)', obj.salesPerYear ?? 0);\n\t\t\t\t\tthis.personsCreated.push(customer);\n\t\t\t\t\treturn customer;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`unrecognized Person kind: \"${kind}`);\n\t\t\t}\n\t\t}\n\n\t\tgetReport() {\n\t\t\treturn `\n\tPersons Created:\n\t=============================\n\t${this.personsCreated.map(m => m.displayAsLine()). join('\\r\\n')}`;\n\t\t}\n\t}\n\n\tconst factory = new PersonFactory();\n\tfactory.instantiate('employee', {firstName: 'Johannes', lastName: 'Roberts', employeeNumber: 728 });\n\tfactory.instantiate('customer', {firstName: 'Friedrich', lastName: 'Schanz', company: 'Antwerp Ltd.'});\n\tfactory.instantiate('employee', {firstName: 'Angelika', lastName: 'Holzheim', employeeNumber: 234 });\n\n\tconsole.log(factory.getReport());\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-10 07:44:41","systemWhoCreated":"systemUnknown"},{"id":518,"category":"Netlify","title":"How to solve a 404 error on a React Router site at Netlify","body":"- you set up a React site with React-Router\n- you published it to Netlify\n- your site works, you can click through the menu\n- then you make a copy of the url with a route, or make a bookmark and click on it, and you receive an error:#gif#netlify404reactrouter\n- **SOLUTION:**\n\t- create a file named `_redirects` in the **public** directory of your site, with this one line as content:\n\t\t---------------------------\n\t\t/* /index.html 200\n\t\t---------------------------\n\t- make sure it is in the **public** directory and not the root:##thefixnetlifyerrorreact\n\t- push your change to GitHub which will update your Netlify site\n\t- that should solve the problem","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-11 19:12:56","systemWhoCreated":"systemUnknown"},{"id":519,"category":"React","title":"Why you shouldn't hide sensitive information with React conditional rendering","body":"- it might be tempting to create a React website which allows a user to log in and see priviliged information\n- but one should remember that React is a **frontend** framework\n- this means that **all information** is sent to the browser, and then only then is hidden or shown\n- to demonstrate this, consider this React site:\n\t----------------------------------------\n\tconst loggedIn = false;\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Website</h1>\n\t\t\t\t<hr />\n\t\t\t\t{loggedIn && (\n\t\t\t\t\t<div>secret</div>\n\t\t\t\t)}\n\t\t\t\t<hr />\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t----------------------------------------\n- if you inspect the page's DOM, you will see that the information is indeed not to be found:##reactnotloggedok\n- this may tempt you to store sensitive information in conditional rendering on a React site and show it only to logged-in users\n- however, if you right-click on your page and **View page source**:##viewpagesourcebrowser\n- you will see a small amount of HTML with a link to a JavaScript file:##smallhtmlreact\n- click on that link, look around in the file, and you will find your sensitive information in plain text even though it is being blended out in DOM with conditional rendering:##findinforeact","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-13 12:46:24","systemWhoCreated":"systemUnknown"},{"id":520,"category":"JavaScript","title":"How to use .map() to output an array in JavaScript/DOM","body":"- the main point you have to remember is that, unlike React, you have to export any HTML in backticked string literals##thelisthtmlshow\n- **index.html**\n\t-----------------------------------------\n\t<!DOCTYPE html>\n\t<head>\n\t\t<title>dcd test</title>\n\t\t<script src=\"./js/main.js\"\n\t\t\t\tdefer></script>\n\t</head>\n\t<body>\n\t\t<div class=\"content\"></div>\n\t</body>\n\t</html>\n\t-----------------------------------------\n- **js/main.js**\n\t------------------------------------------\n\tconst contentElem = document.querySelector('.content');\n\n\tconst colors = ['orange', 'yellow', 'black'];\n\n\tcontentElem.innerHTML = `\n\t<ul>\n\t\t${colors.map(color => {\n\t\t\treturn `<li>${color}</li>`;\n\t\t}).join('')}\n\t</ul>\n\t`;\n\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-13 14:05:47","systemWhoCreated":"systemUnknown"},{"id":521,"category":"Netlify","title":"How to share .json files via fetch() on Netlify","body":"- you can put .json files in e.g. a `/share` folder in your `/public` folder of a React project\n- then you can access them in your browser e.g. [https://edwardtanguay.netlify.app/share/howtos.json](https://edwardtanguay.netlify.app/share/howtos.json)\n- but if you try to access them via `fetch()` as with this code:\n\t-----------------------------------\n\tconst contentElem = document.querySelector('.content');\n\n\tconst url = 'https://edwardtanguay.netlify.app/share/howtos.json';\n\n\t(async () => {\n\t\tconst response = await fetch(url);\n\t\tconst howtos = await response.json();\n\n\t\tcontentElem.innerHTML = `\n\t<ul>\n\t\t${howtos.sort((a,b) => a.systemWhenCreated > b.systemWhenCreated).map(howto => {\n\t\t\treturn `<li>${howto.title}</li>`;\n\t\t}).join('')}\n\t</ul>\n\t`;\n\t})();\n\t-----------------------------------\n- you will get a CORS error like this:##apinetflifycors","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-13 14:27:34","systemWhoCreated":"systemUnknown"},{"id":522,"category":"JavaScript","title":"Create and publish data-driven JavaScript/DOM app with ES6 modules to Netlify, with Jest testing","body":"- intro\n\t- this project shows you how to \n\t\t- create a data-driven website with JavaScript/DOM using Sass\n\t\t- use ES6 modules to organize helper functions and classes\n\t\t- test the application locally\n\t\t- publish the site to Netlify\n\t\t- test the online site in your browser and smartphone\n\t\t- make updates to your app and immediately publish live\n\t- when you complete this project, you will have everything you need to build data-driven apps that run on browser/smartphone, which you can continually update##thepreviewmodulesjs\n\t- find the full code for this site here: [edwardtanguay/create-publish-javascript-dom-netlify](https://github.com/edwardtanguay/create-publish-javascript-dom-netlify)\n\t- what you won't have\n\t\t- users will not be able to log in and there will be no protected data\n\t\t\t- for this you would need a backend\n\t\t\t- all code (HTML, CSS, JavaScript) is sent to the browser so all code is public\n\t\t- you will not be able to access a database\n\t\t\t- but you have access to a file with a JavaScript object\n\t\t\t\t- this makes the step toward using a database such as MongoDB later a smaller one\n\t\t\t\t- both solutions consume JavaScript objects in the same way\n\t\t- this project does not use React or any other frontend library (like Vue.js)\n\t\t\t- converting this project to React would involve quite a number of steps\n\t\t\t- adding Vue.js to this site would change the structure of it\n\t\t\t- both React and Vue.js invert how one views state in an appliation\n\t\t- loading data from APIs is not covered in this project, although\n\t\t- you won't be using the npm package manager\n\t\t\t- anything you add later will be via a CDN, e.g. Bootstrap, Vue.js\n\t- these notes are meant to be notes for a live-coding so not all code is supplied\n\t\t- if you are not following along in a live-coding, then refer to the [finished project](https://github.com/edwardtanguay/create-publish-javascript-dom-netlify) for the appropriate code\n- steps\n\t- make a minimal functioning DOM site with HTML, CSS and JavaScript\n\t\t- make directory\n\t\t\t- create a meaningful name, it will be the name of your site online, e.g. `nameofapp.netlify.app`\n\t\t\t\t- unique but short as possible\n\t\t\t\t- or for testing purposes: long and unique\n\t\t- copy VSCode in that directory\n\t\t- `index.html`\n\t\t- `css/main.css`\n\t\t- `js/main.js`\n\t\t\t- script element first top of file\n\t\t\t\t- **ERROR:** `Uncaught TypeError: contentElem is null`\n\t\t\t- **FIX:** then script element at bottom\n\t\t\t\t- works\n\t\t\t- then move back up\n\t\t\t\t- doesn't work\n\t\t\t- **FIX:** then add `defer`\n\t\t\t\t- works\n\t- add git \n\t\t- you always want to develop with Git, even if you do not publish your repository to GitHub\n\t\t\t- it helps you organize your code changes\n\t\t\t- you can go back to any previous state of your app\n\t\t- `git init`\n\t\t- commit locally\n\t- add Sass\n\t\t- you always want to develop with Sass instead of CSS\n\t\t\t- the nesting feature alone enables you to achieve more with less styling code\n\t\t- you can't add it via npm, so we will use a VSCode extension: \n\t\t\t- install **Live Sass Compiler, by Ritwick Dey**##thelivesassokok\n\t\t- rename `.css` file to `.scss`\n\t\t- click on the words **Watch Sass** that appear in your task bar at the bottom of VSCode##appearwatchsass\n\t\t- you will see that CSS files get automatically created##sassautomaticly\n\t\t- now anytime you change your `.scss` file, it will be compiled automatically into CSS\n\t\t- convert your CSS to SASS now (nest styles) and then look at the converted CSS\n\t\t\t- e.g. convert to dark mode and fix padding, etc.\n\t- check in Git\n\t\t- see history: `git log --oneline`\n\t\t- go back to initial commit: `git checkout HASH`\n\t\t- return to current HEAD: `git switch -`\n\t- add ES6 modules\n\t\t- make **tools.js** as test\n\t\t\t- `export const message = 'test';`\n\t\t\t- in main: import\n\t\t\t- **ERROR:**  `Uncaught SyntaxError: import declarations may only appear at top level of a module`\n\t\t\t- **FIX:** in `index.html`: add `type=\"module\"` to script tag\n\t\t- add **tools.js**\n\t\t\t- sentencize()\n\t\t\t\t- this is a test\n\t\t\t\t- --> This is a test.\n\t\t\t- getTodaysDate()\n\t\t\t\t- --> \"Monday, March 23, 2022\"\n\t\t\t- tools.js\n\t\t\t\t------------------------------------------\n\t\t\t\texport const capitalizeFirstCharacter = (text) => {\n\t\t\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1);\n\t\t\t\t}\n\n\t\t\t\texport const getTodaysDate = () => {\n\t\t\t\t\tconst currentDate = new Date();\n\t\t\t\t\tconst options = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' };\n\t\t\t\t\treturn currentDate.toLocaleDateString('en-us', options);\n\t\t\t\t}\n\t\t\t\t------------------------------------------\n\t\t\t- main.js\n\t\t\t\t---------------------------------------\n\t\t\t\timport { capitalizeFirstCharacter, getTodaysDate } from './tools.js';\n\n\t\t\t\tconst contentElem = document.querySelector('.content');\n\n\t\t\t\tcontentElem.innerHTML = `\n\t\t\t\t\t<p>${capitalizeFirstCharacter('this is a test')}</p>\n\t\t\t\t\t<p>${getTodaysDate()}</p>\n\t\t\t\t`;\n\t\t\t\t---------------------------------------\n\t\t- convert tools.js to using documentation\n\t\t\t------------------------------------------\n\t\t\t/**\n\t\t\t * Capitalize the first letter of a string.\n\t\t\t *\n\t\t\t * tools.capitalizeFirstLetter(\"this is the title of the article\");\n\t\t\t *\n\t\t\t * \"This is the title of the article\"\n\t\t\t */\n\t\t\t------------------------------------------\n\t\t- import as wildcard in order to get intellisense\n\t\t\t------------------------------\n\t\t\timport * as tools from './tools.js';\n\t\t\t------------------------------\n\t\t- all available functions are now shown as intellisense##allavailablearefunc\n\t\t- it now shows documentation when you use the function##gettheintellisense\n\t- add data\n\t\t- create file `/js/data/flashcards.js` (copy from code from the [finished project](https://github.com/edwardtanguay/create-publish-javascript-dom-netlify))\n\t\t- note you are exporting a constant that is an array of objects that represent flashcards\n\t\t\t- this data comes from a real project where I collect flashcards in order to find useful information fast\n\t\t\t\t- https://onespace.netlify.app/flashcards\n\t\t- style it in Sass\n\t- push to GitHub with same name as directory\n\t- publish at Netlify\n\t\t- change name to same name as directory and GitHub repository\n\t\t- for your free account on Netlify you have 300 minutes of build time\n\t\t- remember every time you push to your repository, Netlify will start a new build##netlifynotices\n- Jest testing\n\t- install Jest\n\t\t- `npm init -y`\n\t\t- `npm i -D jest`\n\t\t- in **package.json** set up `npm test` command:\n\t\t\t- `\"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\"`\n\t\t\t\t- (experimental syntax because we use ES6 `import` instead of CommonJS `require`)\n\t\t\t- also add `\"type\": \"module\",`\n\t\t\t\t- also in order to use ES6 `import`\n\t- set up tests:\n\t\t- create **testing/test.js**\n\t\t-----------------------------\n\t\timport * as tools from '../js/tools.js';\n\n\t\tdescribe('capitalizeFirstCharacter() is correctly implemented', () => {\n\t\t\ttest.each`\n\t\t\tinput | expected\n\t\t\t${'test'} | ${'Test'}\n\t\t\t${'this is a test'} | ${'This is a test'}\n\t\t\t${'Test'} | ${'Test'}\n\t\t\t${''} | ${''}\n\t\t\t${'123'} | ${'123'}\n\t\t\t`('convert $input to $expected', ({ input, expected }) => {\n\t\t\t\texpect(tools.capitalizeFirstCharacter(input)).toBe(expected);\n\t\t\t});\n\t\t});\n\n\t\ttest('getTodaysDate() is correctly implemented', () => {\n\t\t\tconst currentDate = new Date();\n\t\t\tconst options = { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' };\n\t\t\tconst correctDate = currentDate.toLocaleDateString('en-us', options);\n\t\t\texpect(tools.getTodaysDate()).toBe(correctDate);\n\t\t});\n\t\t-----------------------------\n\t- run Jest tests with: `npm test`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-14 07:38:30","systemWhoCreated":"systemUnknown"},{"id":523,"category":"JavaScript","title":"JavaScript/DOM app with menu and pseudo-login","body":"- full code here: https://github.com/edwardtanguay/dom-js-menu-pseudo-login\n- this is a work in progress\n- the goal is to make a JavaScript/DOM site based on arrays of JavaScript objects which emulate a login site on the frontend\n- it will be built in a way that will be easy to port to a backend site which gets data from JSON files, API calls or a database##thecommusofar","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-15 08:50:42","systemWhoCreated":"systemUnknown"},{"id":524,"category":"React","title":"Create Frontend CRUD with React and json-server","body":"- these instructions show you how to use **json-server** to set up an API that runs locally and is loaded together with the website (via `npm-run-all`) with one command `npm start`\n- the code also shows how to enable the user to delete and edit items displayed from the JSON file by calling the API with `DELETE` and `PUT` commands\n- full code here: [edwardtanguay/react-json-server-crud](https://github.com/edwardtanguay/react-json-server-crud)#gif#thecrudreactjson\n- set basic create-react-app site\n\t- e.g. copy files from [edwardtanguay/blankcra-dark](https://github.com/edwardtanguay/blankcra-dark)\n\t- `npm i`\n\t- test with `npm start`\n\t- `git init` and make initial commit\n- set up json-server and test in browser\n\t- `npm i json-server`\n\t- create **src/data/db.json**\n\t\t------------------------------------------\n\t\t{\n\t\t\t\"tests\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"name\": \"test\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"name\": \"test2\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t------------------------------------------\n\t- add to **package.json**\n\t\t------------------------------------\n\t\t\"api\": \"json-server --watch ./src/data/db.json --port 5000\"\n\t\t------------------------------------\n\t- test API with `npm run api`\n\t- in browser: `http://localhost:5000/tests`##thetestapiokok\n- replace JSON data source with real data and test\n\t- copy in data\n\t\t------------------------------------------\n\t\t{\n\t\t\t\"flashcards\": [\n\t\t\t\t(...copy and paste array from from: https://edwardtanguay.netlify.app/share/flashcards.json)\n\t\t\t]\t\t\n\t\t}\n\t\t------------------------------------------\n\t- alter **App.js**\n\t\t------------------------------------------\n\t\timport { useEffect, useState } from 'react';\n\t\timport './App.scss';\n\n\t\tconst url = 'http://localhost:5000/flashcards';\n\n\t\tfunction App() {\n\t\t\tconst [flashcards, setFlashcards] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch(url);\n\t\t\t\t\tconst flashcards = await response.json();\n\t\t\t\t\tsetFlashcards(flashcards);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>{flashcards.length} Flashcards</h1>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t------------------------------------------\n\t- you should see##theappnumberfla\n- display flashcards as cards\n\t- add to **App.js**\n\t\t--------------------------------------------------\n\t\t<div className=\"flashcards\">\n\t\t\t{flashcards.map((flashcard, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Flashcard key={i} flashcard={flashcard} />\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t\t--------------------------------------------------\n\t- **components/Flashcard.js**\n\t\t----------------------------------------------------\n\t\t<div className=\"flashcards\">\n\t\t\t{flashcards.map((flashcard, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Flashcard key={i} flashcard={flashcard} />\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t\t----------------------------------------------------\n\t- add to **App.scss**\n\t\t----------------------------------------------------\n\t\t.flashcards {\n\t\t\t.flashcard {\n\t\t\t\tbackground: #222;\n\t\t\t\tpadding: 10px;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tmargin: 0 0 20px 0;\n\t\t\t\t.front {\n\t\t\t\t\tfont-size: 1.1rem;\n\t\t\t\t\tmargin: 0 0 5px 0;\n\t\t\t\t\t.category {\n\t\t\t\t\t\tcolor: #fff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.back {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\tcolor: rgb(202, 224, 122);\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t----------------------------------------------------\n\t- listed flashcards should look like this:##listedflalooklike\n- program Delete button\n\t- App.js\n\t\t--------------------------------------\n\t\tconst deleteItem = (id) => {\n\t\t\tif (id !== undefined) {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst options = {\n\t\t\t\t\t\tmethod: 'DELETE'\n\t\t\t\t\t};\n\t\t\t\t\tconst response = await fetch(`${url}/${id}`, options);\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tsetFlashcards([...flashcards.filter(m => m.id !== id)]);\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\n\t\t<Flashcard key={i} flashcard={flashcard} deleteItem={deleteItem} />\n\t\t--------------------------------------\n\t- Flashcard.js\n\t\t-------------------------------------------\n\t\texport const Flashcard = ({flashcard, deleteItem}) => {\n\n\t\t<div className=\"panel\"><button onClick={() => deleteItem(flashcard.id)}>Delete</button></div>\n\t\t-------------------------------------------\n- program Edit button\n\t- see [original code](https://github.com/edwardtanguay/react-json-server-crud)\n- enable dual backend-frontend start with `npm start`\n\t- `npm i -D npm-run-all`\n\t- **.env**\n\t\t------------------------------\n\t\tPORT = 3333\n\t\t------------------------------\n\t- in **package.json**/scripts:\n\t\t-------------------------------------------\n\t\t\"start\": \"run-p api appstart\",\n\t\t\"api\": \"json-server --watch ./src/data/db.json --port 5000\",\n\t\t\"appstart\": \"react-scripts start\",\n\t\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-17 22:34:03","systemWhoCreated":"systemUnknown"},{"id":525,"category":"React","title":"How to run a React site and backend API simultaneously with npm-run-all","body":"- these instructions show you how to run local frontend (e.g. React) and backend (e.g. Node/Express) that you want to run simultaneously\n- these scripts:##scriptsthatstartnn\n- start the frontend and backend:##runpbackendfrontend\n- see [documentation](https://www.npmjs.com/package/npm-run-all/v/4.1.5)\n\t- *run-s is for sequential, run-p is for parallel*\n\t- documentation for [run-p](https://github.com/mysticatea/npm-run-all/blob/HEAD/docs/run-p.md)\n- installation and setup\n\t- `npm i -D npm-run-all` (`-D` means put it in devDependencies)\n\t- add backend script, e.g. `\"backend\": \"./node_modules/.bin/nodemon\",`\n\t- change React state script from start to appstart e.g. `\"appstart\": \"react-scripts start\",`\n\t- add new start script: `\"start\": \"run-p backend appstart\",`\n- one problem is that if you will have at this point is if you have e.g. another React site already running on 3001, then when you start this site, the start script will ask you if you want to run it on another port, but this run-p script does not wait for the answer and your frontend won't be able to start\n\t- to fix this error, put a static PORT number in the `.env` file, e.g. `PORT = 3100` so that your React site always starts on that port","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-19 15:34:56","systemWhoCreated":"systemUnknown"},{"id":526,"category":"Slack","title":"How to create a Slack channel and add all members to it","body":"- go to https://www.channeltools.io\n\t- click the **Add to Slack** button\n\t- in Browser, choose workspace you want to add channel tools to\n- create new channel, e.g. **job-research**\n\t- in that channel, enter the commands:\n\t\t- `/invite @Channel Tools`\n\t\t- `/invite_channel #general`\n\t- you will then see this, click on **Yes, invite all members**:##thenseechanneltools","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-22 19:00:15","systemWhoCreated":"systemUnknown"},{"id":528,"category":"DOM","title":"How to avoid errors with innerHTML","body":"- given this HTML:\n\t-----------------------------\n\t<body>\n\t\t<div class=\"container\"></div>\n\t</body>\n\t-----------------------------\n- this JavaScript:\n\t----------------------------\n\tconst containerElem = document.querySelector('.container');\n\tcontainerElem.innerHTML = '<div>';\n\tcontainerElem.innerHTML += 'test';\n\tcontainerElem.innerHTML += '</div>';\n\t----------------------------\n- will produce this DOM:##thisdomwrongok\n- the reason is:\n\t- you can't add pieces of illegal HTML like that\n\t- a `<div>` tag with no `</div>` is illegal\n\t- instead, build the entire HTML string in a string variable and then add one piece of legal HTML \n- the best way is to use string literals like this:\n\t-----------------------------------\n\tcontainerElem.innerHTML = `\n\t<div>\n\ttest\n\t</div>\n\t`;\n\t-----------------------------------\n- which produces this:##nowprodthisok\n- note that with string literals, back ticks inside a `.map()` which itself is inside back ticks will indeed work, as long as inside the `.map()` you have a `return`:##cardscardinstringlit","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-23 20:18:07","systemWhoCreated":"systemUnknown"},{"id":529,"category":"Vite","title":"Create a React site with Vite","body":"- these instructions will show you how to set up a React site with Sass using Vite and publish it to Netlify\n- full code is here: [edwardtanguay/vite002](https://github.com/edwardtanguay/vite002)##thesasssitenow\n- set up basic React site with Vite\n\t- go to projects directory\n\t- `npm init vite`\n\t\t- vite002\n\t\t- react\n\t\t- react\n\t- `cd vite002`\n\t- `code .`\n\t- `git init`\n\t- `npm i`\n\t- `npm run dev`\n- minimize app\n\t- **App.jsx**\n\t\t-----------------------------------\n\t\timport './App.css'\n\n\t\tfunction App() {\n\t\t  return (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t</div>\n\t\t  )\n\t\t}\n\n\t\texport default App;\n\t\t-----------------------------------\n\t- **App.css**\n\t\t------------------------------------\n\t\tbody {\n\t\t\tbackground: #333;\n\t\t\tcolor: #ccc;\n\t\t\tpadding: 0 20px;\n\t\t}\n\t\t------------------------------------\n- add SASS\n\t- stop server\n\t- `npm i -D sass`\n\t- rename App.css to **App.scss**\n\t- in App.jsx change line to: `import './App.scss'`\n\t- change **App.css** to:\n\t\t-----------------------------\n\t\tbody {\n\t\t\tbackground: #333;\n\t\t\tcolor: #ccc;\n\t\t\tpadding: 0 20px;\n\n\t\t\th1 {\n\t\t\t\tcolor: rgb(226, 226, 151);\n\t\t\t}\n\t\t}\n\t\t-----------------------------\n\t- start server: `npm run dev`\n- publish to Netlify\t\n\t- push to GitHub\n\t- set up at Netlify\n\t- accept all defaults##vitenetlif","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-24 20:17:22","systemWhoCreated":"systemUnknown"},{"id":530,"category":"React","title":"Use react-hook-form to create an interactive form in React","body":"- these instructions will show you how to create an interactive form in React with validation and data transformation\n- get full code here: [edwardtanguay/test-react-hook-form](https://github.com/edwardtanguay/test-react-hook-form)\n- try this out live at: [test-react-hook-form.netlify.app](https://test-react-hook-form.netlify.app)\n- for a deep-dive into react-hook-form, see [these videos](https://www.youtube.com/channel/UC9qgXurGpQzePCx928oyIZg/videos)#gif#thereactformhookok\n- `npm i react-hook-form`\n- **App.jsx**\n\t-----------------------------------\n\timport { useState, useEffect } from 'react';\n\timport { useForm } from 'react-hook-form';\n\timport './App.scss'\n\n\tfunction App() {\n\t\tconst [formData, setFormData] = useState({});\n\t\tconst { register, handleSubmit, setValue, watch, formState: { errors } } = useForm({\n\t\t\tdefaultValues: {\n\t\t\t\tdepartment: 'Sales'\n\t\t\t}\n\t\t});\n\n\t\tuseEffect(() => {\n\t\t\tconst firstName = watch('firstName');\n\t\t\tif (firstName === '/nk') {\n\t\t\t\tsetValue('firstName', 'Nick');\n\t\t\t\tsetValue('lastName', 'Kronkatch');\n\t\t\t}\n\t\t}, [watch('firstName')])\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Info Site</h1>\n\n\t\t\t\t<div className=\"intro\">\n\t\t\t\t\t<p>Please fill out form.</p>\n\t\t\t\t\t<p>Tip: for \"Nick Kronkatch\", type in first name field: <code>/nk</code></p>\n\t\t\t\t</div>\n\n\t\t\t\t<form onSubmit={handleSubmit((data) => {\n\t\t\t\t\tsetFormData(data);\n\t\t\t\t})}>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<input type=\"text\" {...register(\"firstName\", { required: 'Please enter a first name.' })} placeholder=\"First Name\" />\n\t\t\t\t\t\t<div className=\"info\">{errors.firstName?.message}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<input type=\"text\" {...register(\"lastName\", { required: 'Please enter a last name.', minLength: { value: 4, message: 'You need to have at least 4 characters in last name.' } })} placeholder=\"Last Name\" />\n\t\t\t\t\t\t<div className=\"info\">{errors.lastName?.message}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<input type=\"text\" {...register(\"department\", { required: 'Please enter a department.', minLength: { value: 4, message: 'You need to have at least 4 characters in department.' } })} placeholder=\"Department\" />\n\t\t\t\t\t\t<div className=\"info\">{errors.department?.message}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button disabled={Object.keys(errors).length}>Send</button>\n\n\t\t\t\t\t{Object.keys(formData).length > 0 && (\n\t\t\t\t\t\t<div className=\"formData\"><pre>{JSON.stringify(formData, null, 2)}</pre></div>\n\t\t\t\t\t)}\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n\n\texport default App;\n\t-----------------------------------\n- **App.scss**\n\t-------------------------------------\n\tbody {\n\t\tbackground: #333;\n\t\tcolor: #ccc;\n\t\tpadding: 20px;\n\n\t\th1 {\n\t\t\tcolor: rgb(226, 226, 151);\n\t\t\tmargin: 0;\n\t\t}\n\n\t\tform {\n\t\t\t.row {\n\t\t\t\tmargin: 0 0 0.5rem 0;\n\t\t\t\tinput {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t};placeholder {\n\t\t\t\t\tcolor: #888;\n\t\t\t\t}\n\t\t\t\tdiv.info {\n\t\t\t\t\tfont-size: 0.6rem;\n\t\t\t\t\tcolor: rgb(238, 153, 153);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.formData {\n\t\t\tbackground: #444;\n\t\t\tpadding: 1px 10px;\n\t\t\tmargin: 20px 0 0 0;\n\t\t}\n\n\t\tp {\n\t\t\tmargin: 0;\n\t\t\tfont-size: .9rem;\n\t\t}\n\n\t\t.intro {\n\t\t\tmargin: 0 0 10px 0;\n\t\t\tcode {\n\t\t\t\tcolor: rgb(87, 165, 42);\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tbackground: #222;\n\t\t\t}\n\t\t}\n\t}\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-24 21:49:16","systemWhoCreated":"systemUnknown"},{"id":531,"category":"React","title":"Create a simple form with Formik on a React site","body":"- these instructions will show you how to create a simple, interactive form in React with Formik\n- see full code here: [edwardtanguay/test-react-form-formik](https://github.com/edwardtanguay/test-react-form-formik)\n- you can try out this form online here: [test-react-form-formik.netlify.app](https://test-react-form-formik.netlify.app)##theformikoksdkf\n- `npm i formik`\n- **BasicForm.jsx**\n\t------------------------------------------\n\timport { useState } from 'react';\n\timport { Formik } from 'formik';\n\n\texport const BasicForm = () => {\n\t\tconst [formData, setFormData] = useState({});\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>Please fill out the information: </p>\n\t\t\t\t<Formik\n\t\t\t\t\tinitialValues={{ email: '', password: '' }}\n\t\t\t\t\tvalidate={values => {\n\t\t\t\t\t\tconst errors = {};\n\t\t\t\t\t\tif (!values.email) {\n\t\t\t\t\t\t\terrors.email = 'Required';\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\terrors.email = 'Invalid email address';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!values.password) {\n\t\t\t\t\t\t\terrors.password = 'Required';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn errors;\n\t\t\t\t\t}}\n\t\t\t\t\tonSubmit={(values, { setSubmitting }) => {\n\t\t\t\t\t\tsetFormData(values);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{({\n\t\t\t\t\t\tvalues,\n\t\t\t\t\t\terrors,\n\t\t\t\t\t\ttouched,\n\t\t\t\t\t\thandleChange,\n\t\t\t\t\t\thandleBlur,\n\t\t\t\t\t\thandleSubmit,\n\t\t\t\t\t\tisSubmitting\n\t\t\t\t\t}) => (\n\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\tvalue={values.email}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t{errors.email && touched.email && errors.email}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\tvalue={values.password}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t{errors.password && touched.password && errors.password}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button type=\"submit\" disabled={Object.keys(errors).length}>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t\t{Object.keys(formData).length > 0 && (\n\t\t\t\t\t<div className=\"formData\"><pre>{JSON.stringify(formData, null, 2)}</pre></div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t};\n\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-24 22:31:27","systemWhoCreated":"systemUnknown"},{"id":532,"category":"React","title":"How to use Bootstrap in React","body":"- these instructions will show you how to set up a React Site with Bootstrap\n- full code is here: [edwardtanguay/test-react-bootstrap5](https://github.com/edwardtanguay/test-react-bootstrap5)##thechangedbootstrap55\n- `npm i react-bootstrap bootstrap@5.1.3`\n- use create-react-app or [Vite](https://edwardtanguay.netlify.app/howtos?id=529) to set up a basic React site\n- **App.jsx** - import CSS, Button, and then use can use Buttons with various variants:\n\t----------------------------------------\n\timport { Button } from 'react-bootstrap';\n\timport 'bootstrap/dist/css/bootstrap.min.css';\n\timport './App.scss'\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t<Button variant=\"success\">Get Info</Button>\n\t\t\t\t<Button className=\"ms-2\" variant=\"danger\">Stop Process</Button>\n\t\t\t</div>\n\t\t)\n\t}\n\n\texport default App;\n\t----------------------------------------\n- **App.scss** - reduce your stylesheet to the minimum to let Bootstrap take over most of the styling\n\t--------------------------------\n\tbody {\n\t\tpadding: 2rem;\n\t}\n\t--------------------------------\n- your basic site should look like this:##thebasicsreactbootstrap5\n- make a form in a component\n\t- **Login.jsx** - create component and simply import what you need, with custom styling `app-form`\n\t\t----------------------------------------------------\n\t\timport { Button, Form, Card } from 'react-bootstrap';\n\n\t\texport const Login = () => {\n\t\t\treturn (\n\t\t\t\t<Card className=\"mt-3 app-form\">\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formLogin\">\n\t\t\t\t\t\t\t\t<Form.Label>Login</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control type=\"email\" placeholder=\"Type in your login or e-mail address\" />\n\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\t\t\t\t\tMake sure to use the e-mail you used when you signed up.\n\t\t\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n\t\t\t\t\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control type=\"password\" placeholder=\"Password\" />\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n\t\t\t\t\t\t\t\t<Form.Check type=\"checkbox\" label=\"Stay logged in\" />\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t)\n\t\t};\n\t\t----------------------------------------------------\n\t- **App.jsx** - import Login, also add Container\n\t\t---------------------------------------------------------\n\t\timport { Container, Button } from 'react-bootstrap';\n\t\timport 'bootstrap/dist/css/bootstrap.min.css';\n\t\timport './App.scss'\n\t\timport { Login } from './components/Login';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t\t<Button variant=\"success\">Get Info</Button>\n\t\t\t\t\t\t<Button className=\"ms-2\" variant=\"danger\">Stop Process</Button>\n\t\t\t\t\t\t<Login />\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\n\t\texport default App;\n\t\t---------------------------------------------------------\n\t- **App.scss* - let Container take over layout, but add `app-form` custom styling for the form\n\t\t----------------------------------\n\t\tbody {\n\t\t\t.app-form {\n\t\t\t\tbackground: #eee;\n\t\t\t}\n\t\t}\n\t\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-25 08:49:13","systemWhoCreated":"systemUnknown"},{"id":533,"category":"React","title":"Create an employee site with Vite, React-Bootstrap, Bootswatch, React-Hook-Forms, json-server and deploy at Netlify","body":"- these instructions show you how to combine Vite, React-Bootstrap, Bootswatch, React Hook Forms, json-server and a slider to display employee data. \n- full code at: [edwardtanguay/live-coding-vite-bootstrap-json-server](https://github.com/edwardtanguay/live-coding-vite-bootstrap-json-server)\n- online at: [live-coding-vite-bootstrap-json-server.netlify.app](https://live-coding-vite-bootstrap-json-server.netlify.app)#gif#reacthooksliderdo\n- note that in a Vite React site that you deploy to Netlify, put the images folder in a folder called `public` (as with create-react-app, but you have to create it in Vite) and reference them in `img` tags as e.g. `<img src=\"images/employees/employee_1.jpg\"/>`\n- these Bootstrap themes you can download from [bootswatch.com](https://bootswatch.com)##bootswatchfiles\n- **Employees.jsx**\n\t-----------------------------------------------\n\timport { useState, useEffect } from 'react';\n\timport { Carousel, Form, Button } from 'react-bootstrap';\n\timport { useForm } from 'react-hook-form';\n\n\texport const Employees = () => {\n\t\tconst [formData, setFormData] = useState({});\n\t\tconst [photoWidth, setPhotoWidth] = useState(100);\n\t\tconst { register, handleSubmit, watch, setValue, formState: { errors } } = useForm({\n\t\t\tdefaultValues: {\n\t\t\t\tdepartment: 'Sales'\n\t\t\t}\n\t\t});\n\t\tconst [employees, setEmployees] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch('http://localhost:5000/employees');\n\t\t\t\tconst employees = await response.json();\n\t\t\t\tsetEmployees(employees);\n\t\t\t})();\n\t\t}, []);\n\n\t\tuseEffect(() => {\n\t\t\tconst firstName = watch('firstName');\n\t\t\tif (firstName.startsWith('/') && firstName.endsWith('/')) {\n\t\t\t\tconst rest = firstName.replaceAll('/', '');\n\t\t\t\tconst id = Number(rest);\n\t\t\t\tif (!isNaN(id) && id !== 0) {\n\t\t\t\t\tconst employee = employees.find(m => m.id === id);\n\t\t\t\t\tif (employee !== undefined) {\n\t\t\t\t\t\tsetValue('firstName', employee.firstName);\n\t\t\t\t\t\tsetValue('lastName', employee.lastName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, [watch('firstName')]);\n\n\t\tconst handleSliderChange = (e) => {\n\t\t\tsetPhotoWidth(e.target.value)\n\t\t}\n\t\tconst handleCarouselChange = (data) => {\n\t\t\tconsole.log(data);\n\t\t}\n\t\tconst showCarouselText = () => {\n\t\t\treturn photoWidth > 350;\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"app-slider-area\">\n\t\t\t\t\t<input type=\"range\" min=\"100\" max=\"400\" onChange={handleSliderChange} value={photoWidth} />\n\t\t\t\t</div>\n\n\t\t\t\t<Carousel style={{ 'width': `${photoWidth}px` }} onSelect={handleCarouselChange} controls={showCarouselText()} indicators={showCarouselText()}>\n\t\t\t\t\t{employees.map((employee, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Carousel.Item key={index}>\n\t\t\t\t\t\t\t\t<img\n\n\t\t\t\t\t\t\t\t\tclassName=\"d-block w-100\"\n\t\t\t\t\t\t\t\t\tsrc={`images/employees/employee_${employee.id}.jpg`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{showCarouselText() && (\n\t\t\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t\t\t<h3>{employee.firstName} {employee.lastName} ({employee.id})</h3>\n\t\t\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</Carousel>\n\n\t\t\t\t<Form className=\"mt-4\" onSubmit={handleSubmit((data) => {\n\t\t\t\t\tsetFormData(data);\n\t\t\t\t})}>\n\t\t\t\t\t<Form.Group className=\"mb-3 app-form-group\">\n\t\t\t\t\t\t<Form.Label>First Name</Form.Label>\n\t\t\t\t\t\t<input className=\"app-input\" type=\"text\" {...register(\"firstName\", { required: 'First name is required.', minLength: { value: 2, message: 'First name must be at least 2 characters.' } })} />\n\t\t\t\t\t\t<Form.Text className=\"text-muted app-text-danger\">\n\t\t\t\t\t\t\t<div>{errors.firstName?.message}</div>\n\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\t\t\tYou can type in an id (<code>/id/</code>) for auto-complete, e.g. <code>/5/</code>.\n\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t<Form.Group className=\"mb-3 app-form-group\">\n\t\t\t\t\t\t<Form.Label>Last Name</Form.Label>\n\t\t\t\t\t\t<input className=\"app-input\" type=\"text\" {...register(\"lastName\", { required: 'Last name is required.', minLength: { value: 2, message: 'Last name must be at least 2 characters.' } })} />\n\t\t\t\t\t\t<Form.Text className=\"text-muted app-text-danger\">\n\t\t\t\t\t\t\t<div>{errors.lastName?.message}</div>\n\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t<Form.Group className=\"mb-3 app-form-group\">\n\t\t\t\t\t\t<Form.Label>Department</Form.Label>\n\t\t\t\t\t\t<input className=\"app-input\" type=\"text\" {...register(\"department\", { required: 'Department is required.' })} />\n\t\t\t\t\t\t<Form.Text className=\"text-muted app-text-danger\">\n\t\t\t\t\t\t\t<div>{errors.department?.message}</div>\n\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t<Button disabled={Object.keys(errors).length} variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t\t{Object.keys(formData).length > 0 && (\n\t\t\t\t\t\t<div className=\"formData\"><pre>{JSON.stringify(formData, null, 2)}</pre></div>\n\t\t\t\t\t)}\n\t\t\t\t</Form>\n\t\t\t</>\n\t\t)\n\t}\n\t-----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-03-25 18:03:18","systemWhoCreated":"systemUnknown"},{"id":534,"category":"CLI","title":"How to use yargs and dotenv to create a simple CLI","body":"- `npm i yargs@13.3.2`\n- `npm i dotenv`\n- **serverjob.js**\n\t--------------------------------------\n\tconst argv = require('yargs').argv;\n\tconst dotenv = require('dotenv');\n\n\tdotenv.config();\n\tconst test = process.env.TEST;\n\n\tconst { server, action } = argv; \n\tconst password = process.env.PASSWORD;\n\n\tif (![server, action, password].includes(undefined)) {\n\t\tconsole.log(`performing ${action} on ${server} with password \"${password}\"`)\n\t} else {\n\t\tconsole.log(`\n\tSETUP: define password in .env file, e.g.:\n\t---\n\tPASSWORD = 123\n\t---\n\n\tUSAGE:\n\tnode serverjob.js --server=nnn --action=nnn`);\n\t}\n\t--------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-01 07:21:44","systemWhoCreated":"systemUnknown"},{"id":535,"category":"API","title":"How to create a frontend/backend Gutenberg-API search machine","body":"- full code here: [edwardtanguay/livecoding-api-gutenberg-react-fetch](https://github.com/edwardtanguay/livecoding-api-gutenberg-react-fetch)\n- online live site: [livecoding-api-gutenberg-react-fetch.netlify.app](https://livecoding-api-gutenberg-react-fetch.netlify.app)#gif#thegutenbergsearch\n- features\n\t- frontend created with Vite\n\t- starts both backend and frontend with one command `npm start` (uses `npm-run-all`)\n\t- exposes API\n\t- consumes API\n\t- uses both fetch and axios\n\t- autofocus of search box\n\t- waiting spinner during API load\n\t- published at Netlify\n- **App.jsx**\n\t-------------------------------------------\n\timport { useState, useEffect } from 'react'\n\timport './App.scss'\n\timport { FaSpinner } from 'react-icons/fa';\n\n\tfunction App() {\n\t\tconst [books, setBooks] = useState([]);\n\t\tconst [searchText, setSearchText] = useState([]);\n\t\tconst [searchingBooks, setSearchingBooks] = useState(true);\n\n\t\tconst lookupBooks = async () => {\n\t\t\tsetSearchingBooks(true);\n\t\t\tconst requestOptions = {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ searchText })\n\t\t\t};\n\t\t\tconst response = await fetch('http://localhost:3055/searchbooks', requestOptions);\n\t\t\tconst books = await response.json();\n\t\t\tsetSearchingBooks(false);\n\t\t\tsetBooks([...books]);\n\t\t}\n\n\t\tuseEffect(() => {\n\t\t\tlookupBooks();\n\t\t}, []);\n\n\t\tconst handleButtonClick = () => {\n\t\t\tsetBooks([]);\n\t\t\tlookupBooks();\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Gutenberg Project Books Search</h1>\n\t\t\t\t{searchingBooks && (\n\t\t\t\t\t<div><FaSpinner className=\"spinner\" /></div>\n\t\t\t\t)}\n\t\t\t\t{!searchingBooks && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<input className=\"searchText\" autoFocus type=\"text\" value={searchText} onChange={(e) => setSearchText(e.target.value)} />\n\t\t\t\t\t\t<button className=\"btnSearch\" onClick={handleButtonClick}>Search</button>\n\t\t\t\t\t\t{books.length === 0 && (\n\t\t\t\t\t\t\t<div className=\"message\">No books found.</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={i} className=\"book\">\n\t\t\t\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\"><img className=\"cover\" src={book.imageUrl}/></a>\n\t\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"title\"><a href={book.bookUrl} target=\"_blank\">{book.title}</a></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"author\">{book.author}</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t}\n\n\texport default App;\n\t-------------------------------------------\n- **server.js**\n\t-------------------------------------------\n\timport express from 'express';\n\timport cors from 'cors';\n\timport axios from 'axios';\n\n\tconst app = express();\n\tconst port = 3055;\n\tapp.use(cors());\n\tapp.use(express.json());\n\n\tapp.get('/', (req, res) => {\n\t\tres.send('This is the Gutenberg API. Use /searchbooks');\n\t});\n\n\tconst getBookUrl = (rawBook) => {\n\t\tlet url = '';\n\t\tconst formatPairs = Object.entries(rawBook.formats);\n\t\tformatPairs.forEach(([key, value]) => {\n\t\t\tif (value.endsWith('.txt') || value.endsWith('.htm') || value.endsWith('.html.images')) {\n\t\t\t\turl = value;\n\t\t\t}\n\t\t});\n\t\treturn url; \n\t};\n\n\tconst getBooks = async (searchText) => {\n\t\tconst books = [];\n\t\tconst url = `https://gutendex.com/books/?search=${searchText}`;\n\t\tconst response = await axios.get(url);\n\t\tconst rawBooks = response.data.results;\n\t\trawBooks.forEach(rawBook => {\n\t\t\tbooks.push({\n\t\t\t\ttitle: rawBook.title,\n\t\t\t\timageUrl: rawBook.formats['image/jpeg'] ? rawBook.formats['image/jpeg'] : 'images/blank.png',\n\t\t\t\tauthor: rawBook.authors && rawBook.authors.length > 0 ? rawBook.authors[0].name : '(no author listed)',\n\t\t\t\tbookUrl: getBookUrl(rawBook) \n\t\t\t});\n\t\t})\n\t\treturn books;\n\t}\n\n\tapp.post('/searchbooks', async (req, res) => {\n\t\tconst searchText = req.body.searchText;\n\t\tconst books = await getBooks(req.body.searchText);\n\t\tres.json(books);\n\t});\n\n\tapp.listen(port, () => {\n\t\tconsole.log(`listening at: http://localhost:${port}`);\n\t});\n\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-01 21:33:29","systemWhoCreated":"systemUnknown"},{"id":536,"category":"Promises","title":"To demonstrate Promises, write a function that emulates loading data from two APIs","body":"- full code here: [edwardtanguay/js-promises-async-await-plus-then](https://github.com/edwardtanguay/js-promises-async-await-plus-then)\n- the goal of this exercise is to demonstrate a real-world example of why you would need to use Promises\n- we want to build a function `apiDataServer` which gets data from two different APIs and returns the data together#gif#twoapisgetdataasync\n- there are a number of issues one has to consider when making this function\t\n\t- the point is that these APIs may take a different amount of time to get their data\n\t- but the `apiDataServer` function needs to wait for the slowest API to return its data\n\t- only after it has data from all of its APIs should it return the combined data\n\t- the API calls will be mocked with `setTimeout` in order to demonstrate that they can take different amounts of time to return their data\n\t- the two API calls will be to `getEmployees` and `getEvents`\n\t- an example of the object that is returned containing data from both calls is this, here with now errors:\n\t\t-------------------------------------------\n\t\t{\n\t\t\temployees: [ { name: 'Henri', age: 33 }, { name: 'Randal', age: 34 } ],\n\t\t\terrors: [],\n\t\t\t\tinfo: {\n\t\t\t\tserviceName: 'API Data Service',\n\t\t\t\tversion: '3.021',\n\t\t\t\telapsedTime: '1.330112600 seconds'\n\t\t\t},\n\t\t\tevents: [\n\t\t\t\t{ date: '2022-04-06', eventName: 'All-Hands Meeting' },\n\t\t\t\t{ date: '2022-04-08', eventName: 'Sales Meeting' }\n\t\t\t]\n\t\t}\n\t\t-------------------------------------------\n\t- or one of the services may have had an error of some kind which should be nicely reported in the data, here an example of employees having had an error:\n\t\t--------------------------------------------------\n\t\t{\n\t\t\temployees: [],\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tdataSource: 'employees',\n\t\t\t\t\terror: 'API not available at the moment.'\n\t\t\t\t}\n\t\t\t],\n\t\t\tinfo: {\n\t\t\t\tserviceName: 'API Data Service',\n\t\t\t\tversion: '3.021',\n\t\t\t\telapsedTime: '2.120965600 seconds'\n\t\t\t},\n\t\t\tevents: [\n\t\t\t\t{ date: '2022-04-06', eventName: 'All-Hands Meeting' },\n\t\t\t\t{ date: '2022-04-08', eventName: 'Sales Meeting' }     \n\t\t\t]\n\t\t}\n\t\t--------------------------------------------------\n\t- for a sense of reality, other data is also reported, e.g. how long the APIs took, etc.\n- set up project\n\t- empty directory\n\t- **index.js**\n\t\t-------------------------------\n\t\tconst apiDataServer = () => {\n\t\t\tconsole.log('get data');\n\t\t};\n\t\tapiDataServer();\n\t\t-------------------------------\n\t- we will need a random number generator:\n\t\t---------------------------------------\n\t\tconst getRand = (from, to) => Math.floor(Math.random() * ((to - from) + 1)) + from;\n\t\t---------------------------------------\n\t- we will need a way to measure elapsed time:\n\t\t------------------------------------------\n\t\tconst startElapsedTime = () => {\n\t\t\treturn process.hrtime();\n\t\t};\n\n\t\tconst getElapsedTime = (timer) => {\n\t\t\tconst padLeft = (num, size) => {\n\t\t\t\tnum = num.toString();\n\t\t\t\twhile (num.length < size) num = \"0\" + num;\n\t\t\t\treturn num;\n\t\t\t}\n\t\t\tconst ms = parseInt(process.hrtime(timer)[1] / 1000000);\n\t\t\tconst paddedMs = padLeft(ms, 3);\n\t\t\treturn `${process.hrtime(timer)[0]}.${paddedMs} seconds`;\n\t\t}\n\t\t------------------------------------------\n- build two mock API functions for employees and consume\n\t- **getEmployees**\n\t\t--------------------------------------------------\n\t\tconst getEmployees = async () => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst ms = getRand(1000, 3000);\n\t\t\t\tconst num = getRand(1, 2);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (num !== 1) {\n\t\t\t\t\t\tresolve([{ name: \"Henri\", age: 33 }, { name: \"Randal\", age: 34 }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new Error('API not available at the moment.'));\n\t\t\t\t\t}\n\t\t\t\t}, ms);\n\t\t\t});\n\t\t};\n\t\t--------------------------------------------------\n\t- restructure **apiDataServer** to process asynchronous API call:\n\t\t-----------------------------------------\n\t\tconst apiDataServer = async () => {\n\t\t\tconst timer = startElapsedTime();\n\n\t\t\tconst obj = {\n\t\t\t\temployees: [],\n\t\t\t\tinfo: {\n\t\t\t\t\tservice: 'API Data Server',\n\t\t\t\t\tversion: 'v5.11',\n\t\t\t\t\telapsedTime: ''\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tobj.employees = await getEmployees();\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tobj.employees = [];\n\t\t\t}\n\n\t\t\tobj.info.elapsedTime = getElapsedTime(timer);\n\n\t\t\treturn obj;\n\t\t};\n\n\t\t(async () => {\n\t\t\tconst data = await apiDataServer();\n\t\t\tconsole.log(data);\n\t\t})();\n\t\t-----------------------------------------\n\t- deal gracefully with errors:\n\t\t------------------------------------------\n\t\tcatch (e) {\n\t\t\tobj.employees = [];\n\t\t\tobj.errors.push(e.message);\n\t\t}\n\t\t------------------------------------------\n- add mock API for events and consume\n\t- add second API:\n\t\t---------------------------------------------\n\t\tconst getEvents = async () => new Promise((resolve, reject) => {\n\t\t\tconst ms = getRand(1000, 3000);\n\t\t\tconst num = getRand(1, 2);\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (num !== 1) {\n\t\t\t\t\tresolve([{ date: \"2022-04-06\", eventName: 'All-Hands Meeting' }, { date: \"2022-04-08\", eventName: 'Sales Meeting' }]);\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error('Calendar service currently down.'));\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t});\n\t\t---------------------------------------------\n\t- update **apiDataServer** to consume events as well\n- task is complete\n- now: appreciate `async/await` by implementing older syntax for consuming promises: `.then()`\n\t- replace events code block with `.then()` syntax:\n\t\t-------------------------------------------------\n\t\tobj.info.elapsedTime = getElapsedTime(timer);\n\t\treturn getEvents()\n\t\t\t.then(events => {\n\t\t\t\tobj.events = events;\n\t\t\t\treturn obj;\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tobj.events = [];\n\t\t\t\tobj.errors.push({ dataSource: 'events', error: err.message });\n\t\t\t\treturn obj;\n\t\t\t});\n\t\t-------------------------------------------------\n\t- revert event code back to `async/await`\n\t- lesson: use `async/await` to consume promises instead of `.then()`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-06 07:23:18","systemWhoCreated":"systemUnknown"},{"id":537,"category":"JavaScript/DOM","title":"Build a JavaScript/DOM TodoList which saves data in a JSON file via a json-server API","body":"- full code here: [edwardtanguay/live-coding-todo-list-json-server](https://github.com/edwardtanguay/live-coding-todo-list-json-server)\n- in this project, we create a JSON file then serve it as an API with json-server\n- this project has a JavaScript/DOM frontend created with Vite running on one port address, and the json-server backend API running on another port address\n- the frontend communicates with the backend API via its port\n- I used `npm-run-all` to set up an npm script which starts both frontend and backend with one command, namely `npm start`#gif#showjsonserverastodoapp2\n- **main.js**\n\t-------------------------------------------------\n\timport './style.css';\n\n\tdocument.querySelector('#app').innerHTML = `\n\t\t<h1>Todo App</h1>\n\t<form>\n\t\t<div class=\"row\">\n\t\t<input class=\"text\" type=\"text\" /> \n\t\t<button class=\"btnAdd\">Add Item</button>\n\t\t</div>\n\t\t<div class=\"tasks\"></div>\n\t</form>\n\t`;\n\n\tconst textElem = document.querySelector('.text');\n\tconst btnAddElem = document.querySelector('.btnAdd');\n\tconst tasksElem = document.querySelector('.tasks');\n\n\tconst getTasks = async () => {\n\t\tconst response = await fetch('http://localhost:5011/todos');\n\t\tconst data = await response.json();\n\t\treturn data;\n\t};\n\n\tconst renderList = async () => {\n\t\ttasksElem.innerHTML = '';\n\t\tconst tasks = await getTasks();\n\t\ttasks.forEach((task) => {\n\t\t\tconst taskElem = document.createElement('div');\n\t\t\ttaskElem.setAttribute('data-id', task.id);\n\t\t\ttaskElem.setAttribute('data-finished', task.finished);\n\t\t\ttaskElem.innerHTML = `\n\t\t <input type=\"checkbox\" ${\n\t\t\ttask.finished ? 'checked' : ''\n\t\t } class=\"toggleFinished\"/> \n\t\t <div>${task.text}</div>\n\t\t <button class=\"btnDelete\">delete</button>\n\t\t`;\n\t\t\ttaskElem.classList.add('task');\n\t\t\ttasksElem.appendChild(taskElem);\n\t\t});\n\t\ttextElem.value = '';\n\t\ttextElem.focus();\n\n\t\t// delete button events\n\t\tconst deleteButtonElems = document.querySelectorAll('.btnDelete');\n\t\tdeleteButtonElems.forEach((m) =>\n\t\t\tm.addEventListener('click', async (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst currentTaskElem = m.parentElement;\n\t\t\t\tconst currentId = currentTaskElem.dataset.id;\n\t\t\t\tconst requestOptions = {\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t};\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`http://localhost:5011/todos/${currentId}`,\n\t\t\t\t\trequestOptions\n\t\t\t\t);\n\t\t\t\trenderList();\n\t\t\t})\n\t\t);\n\n\t\t// checkbox events\n\t\tconst checkboxElems = document.querySelectorAll('.toggleFinished');\n\t\tcheckboxElems.forEach((m) =>\n\t\t\tm.addEventListener('change', async () => {\n\t\t\t\tconst currentTaskElem = m.parentElement;\n\t\t\t\tconst currentId = currentTaskElem.dataset.id;\n\t\t\t\tconst currentFinished =\n\t\t\t\t\tcurrentTaskElem.dataset.finished === 'true' ? true : false;\n\t\t\t\tconst requestOptions = {\n\t\t\t\t\tmethod: 'PATCH',\n\t\t\t\t\tbody: JSON.stringify({ finished: !currentFinished }),\n\t\t\t\t\theaders: { 'Content-type': 'application/json; charset=UTF-8' },\n\t\t\t\t};\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`http://localhost:5011/todos/${currentId}`,\n\t\t\t\t\trequestOptions\n\t\t\t\t);\n\t\t\t\trenderList();\n\t\t\t})\n\t\t);\n\t};\n\n\trenderList();\n\n\tbtnAddElem.addEventListener('click', async (e) => {\n\t\te.preventDefault();\n\n\t\tconst newTodo = {\n\t\t\ttext: textElem.value,\n\t\t\tfinished: false,\n\t\t};\n\n\t\tconst requestOptions = {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(newTodo),\n\t\t\theaders: { 'Content-type': 'application/json; charset=UTF-8' },\n\t\t};\n\t\tconst response = await fetch('http://localhost:5011/todos', requestOptions);\n\t\trenderList();\n\t});\n\t-------------------------------------------------\n- **package.json**\n\t------------------------------------------------\n\t{\n\t\t\"name\": \"live-coding-todo-list-json-server\",\n\t\t\"private\": true,\n\t\t\"version\": \"0.0.0\",\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"vite\",\n\t\t\t\"build\": \"vite build\",\n\t\t\t\"preview\": \"vite preview\",\n\t\t\t\"api\": \"json-server --watch ./data/data.json --port 5011\",\n\t\t\t\"start\": \"run-p api dev\"\n\t\t},\n\t\t\"devDependencies\": {\n\t\t\t\"vite\": \"^2.9.0\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"json-server\": \"^0.17.0\"\n\t\t}\n\t}\n\t------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-07 08:47:40","systemWhoCreated":"systemUnknown"},{"id":538,"category":"Vite","title":"VIDEO NOTES: Vite 2.0 Crash Course - codeSTACKr - 15 min","body":"- VIDEO: [Vite 2.0 Crash Course | Super Fast Build Tool for JavaScript, React, Vue, Svelte, & Lit (2021)](https://www.youtube.com/watch?v=LQQ3CR2JTX8)\n- Vite is the next generation in frontend tooling\n- says it uses **Rollup** to build, **esbuild** to prebundle\n- Vite was created by **Evan You**, creator of Vue, but Vite is not a Vue-only tool\n- problems with Webpack, Parcel and Rollup:\n\t- they have to build everything every time you save\n- to solve this problem, Vite has taken a completely backwards approach, but it works\n\t- Vite **prebundles with esbuild**, Rollup is used to bundle for production\n\t- **esbuild is written in Go** which makes it **100x faster** than bundlers written in JavaScript##esbuildthespeed\n- what about [Snowpack](https://www.snowpack.dev)\n\t- a no-bundle, native ESM server as well\n\t\t- ESM or *EcmaScript modules* = [JavaScript's native module system](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\n\t- **Vite was inspired by Snowpack** Version 1.0 but has key differences\n\t\t- Vite has **multipage support out of the box**\n\t\t\t- e.g. in JS/DOM you just have to create a new folder and file and it just works, modules are taken care of for you\n\t\t\t- to build for production, you just have to add your entry points:##buildforproduction\n\t\t- Vite has **automatic code-splitting**\n\t\t\t- only loads CSS for the part of the application that you are using\n\t\t\t- this is going to make large applications faster\n\t\t- Vite has **Automatic Dynamic Import Polyfill**\n\t\t\t- gives you better backward compatibility to older browsers\n\t- NOTE: actually as of four days ago, **Snowpack is no longer being developed**##nomoresnowpack\n- shows how to use Vite\n\t- creates **JS/DOM app**\n\t\t- `npm init @vitejs/app` but looks like it is the same as `npm create vite`##lookssammm\n\t\t- although I get that this syntax is deprecated##deprecvite\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t\t- shows every file\n\t\t- `npm run build`\n\t\t\t- looks in dist folder\n\t\t\t- serves this build with `npm run serve`\n\t\t\t- port 3000 is dev server, 5000 is build server\n\t- shows speed of **Vite vs. create-react-app** in building an app\n\t\t- you can use the dot notation to install in the current directory##usedotto\n\t\t- there are **more commands to type with Vite, but it is 4x faster**\n\t\t- Vite **00:30**, create-react-app **02:17** ##crawaitpic\n\t\t- compares **build sizes**\n\t\t\t- Vite dist folder: **144 K**\n\t\t\t- create-react-app build folder: **544 K**\n\t\t- compares **full project size**\n\t\t\t- Vite: **44 MB, 1,795 files**\n\t\t\t- create-react-app: **262 MB, 36,213 files**\n\t\t- compares **hot-loading**\n\t\t\t- makes a small change in a .js file\n\t\t\t- Vite: 0.05 seconds\n\t\t\t- create-react-app: 1.02 seconds\n\t\t\t- note in Vite: hot-loading does not change the state\n- deployment\n\t- mentions options: \n\t\t- Netlify\n\t\t- GitHub Pages\n\t\t- [Firebase](https://firebase.google.com/docs/hosting/quickstart?hl=en)\n\t\t- Heroku\n\t\t- [Cloudflare Pages](https://pages.cloudflare.com)\n\t- **he uses Cloudflare**\n\t\t- pushes Vite project to GitHub\n\t\t- on Cloudflare\n\t- I created a site to deploy at Cloudflare\n\t\t- by the way: **to run Vite on another port**, make this change:##changeporvite\n\t\t- created account at Cloudflare, you apparently can't create account with Google##cloudfllacou\n\t\t- the only two entries you have to fill in are **Build command** and **Build output directory**:##cloudflaresites\n\t\t- shows progress as it builds##cloudflareprogresss\n\t\t- published the Vite site in *830 seconds**##finished30\n\t\t- looks fine online: [vite-test-002.pages.dev](https://vite-test-002.pages.dev)\n\t\t- made change, pushed again, it automatically noticed push and started rebuilding:##aftertttthechange\n\t\t- Cloudflare has a nice feature that **you can view past deployment builds**, could be useful for testing to see if something was broken on an earlier build, etc.##cloudflaaaafeature\n- see also:\n\t- VIDEO: [Learn Vite with Evan You](https://www.youtube.com/watch?v=DkGV5F4XnfQ)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-24 18:12:24","systemWhoCreated":"systemUnknown"},{"id":539,"category":"React","title":"Create a personal Job-Search application in React","body":"- background\n\t- technically this is an example of how to use **useState** and **event handlers** in React\n\t- practically this is an example of how to create a React application to organize your job search process\n- full code is here: [edwardtanguay/task-job-application-process-state-events](https://github.com/edwardtanguay/task-job-application-process-state-events)\n- final site will look like this:#gif#taskjobapplicationinteractive\n- set up basic React site\n\t- use Vite: `npm create vite`\n\t- install Git: `init git`\n\t- install node_modules: `npm i`\n\t- open terminal and go to your projects directory\n\t- clean up site to blank minimum\n\t- install Sass\n\t- add title##thejobappproc\n- add job data and display each job in box\n\t- **data/jobs.json**\n\t\t-------------------------------------\n\t\t[\n\t\t\t{\n\t\t\t\t\"position\": \"Frontend Web Entwickler\",\n\t\t\t\t\"url\": \"https://berlinstartupjobs.com/engineering/frontend-web-entwickler-interhome-gmbh-part-of-hotelplan-group\",\n\t\t\t\t\"skills\": \"TypeScript, VueJS, NUXT, HTML, CSS, TailWind\",\n\t\t\t\t\"bulkText\": \"Deine Aufgaben Gemeinsam mit Kolleginnen und Kollegen in Deinem Team entwickelst Du die verschiedenen Webseiten und Webanwendungen der Interhome Group weiter Du programmierst Webseiten und Progressive Webapps in modernen Webtechnologien Technische Umsetzung von Designs in CSS Du bist ein/e Vollblut-Software-Entwickler/in und bringst folgende Skills mit: Gute Kenntnisse in Javascript und optional Typescript, insbesondere VueJS und NUXT Gute allgemeine Kenntnisse von HTML, CSS (Kenntnisse von TailwindCSS sind von Vorteil) Interesse an neuen Technologien sowie Spaß am Entwickeln Gute Deutsch- und Englischkenntnisse Teamfähigkeit und Kommunikationsstärke Projekterfahrung als Entwickler/in sind von Vorteil Idealerweise DevOps-Erfahrung (Kubernetes, AgroCD, Ranger) sowie Erfahrung mit Progressive Webapps Ein (Fach)-hochschulabschluss oder eine abgeschlossene Ausbildung im Bereich Informatik sind von Vorteil Was Dich erwartet Spannende und vielseitige Projekte in einem internationalen Umfeld Die Möglichkeit, im Herzen von Berlin oder in der sonnigsten Stadt Deutschlands, in Freiburg, zu arbeiten Betriebliche Altersvorsorge und die Möglichkeit zu flexiblem, hybriden Arbeiten (Homeoffice) Attraktive Mitarbeiterrabatte und Sportangebote (Hansefit)\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"position\": \"React Native Mobile Developer\",\n\t\t\t\t\"url\": \"https://berlinstartupjobs.com/engineering/react-native-mobile-developer-prospr-at-work\",\n\t\t\t\t\"skills\": \"Node.js, React, React Native, Firebase, Socket.io, Redis, MySQL, AWS\",\n\t\t\t\t\"bulkText\": \"Working With Us You’ll build new product features from start to finish: through conception, research, development, refinement, documentation and maintenance.  You’ll work on key initiatives to keep our systems elegant and productivity high.  You’ll build and improve processes and internal tools with simplicity and productivity in mind.  You’ll gain ownership and domain expertise over part of the codebase, and contribute to growing it in accordance with our standards and best practices.  You will review code from your peers.  You will mentor more junior developers.  You will have the option of contributing to our team blog.  You will collaborate as a team on product vision and software design decisions.  What You Bring 3+ years of experience Shipped and maintained code in production; experience with SaaS/B2B products a plus.  Expert knowledge of Javascript Advanced knowledge of React Native and either Java/Android SDK or Swift/C# Familiarity with Firebase and strong knowledge of Android Studio or Xcode Meticulous mindset but you also understand that software engineering is about making trade-offs, balancing business and technical needs Good communication skills, comfortable working in a team, and can easily work with non-technical colleagues Fluent in English 🙌   Why Work With Us The best tools: MacBook Pro, 34” UltraWide Monitor, Beats Headphones Learning Budget: EUR 3.000 / year Urban Sports Club Membership Monthly BVG Ticket Annual Team Retreat Competitive Salary: €70k – €85k Equity Participation: 0.25% – 0.5% Flexible Work Policy\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"position\": \"Full Stack Engineer (Node.js)\",\n\t\t\t\t\"url\": \"https://berlinstartupjobs.com/engineering/full-stack-engineer-node-js-m-f-d-minddoc\",\n\t\t\t\t\"skills\": \"Node.js, JavaScript, Vue.js, React, Angular, Docker, Helm\",\n\t\t\t\t\"bulkText\": \"As a Full Stack Engineer (Node.js) (m/f/d) you… will work with a cross functional agile team on the backend systems that power our therapy platform which is one of the leading digital applications for guided and unguided treatment for mental health are somebody who is familiar with state of the art technology and development stack and best-practices, you have the option to contribute to the technology strategy and roadmap of the team significantly contribute with your day to day work and deliverables to the overall success of our therapy product and its user satisfaction (therapists, patients, patient management) contribute to an engineering culture where developers enjoy working and keep learning You have close contact with our product and QA team as well as our users (e.g, therapist) and help them troubleshoot, debug, and maintain a high quality of our product Your profil You have a track record in building web applications in agile environments.  +4 years experience with any enterprise technology like Javascript and Node.js or similar You have experience using any frontend frameworks like Vue.js, React or Angular You have experience in test-driven development – we work extensively with Jest to ensure we have 100% test coverage throughout You have very good knowledge of Git, development workflow automation and CI. Continuous Delivery is in our DNA.  You know how to use Docker for local development. Basic knowledge of Helm is a plus You have an appreciation for great user experience as much as for awesome tech architecture You are great at communicating with people, motivating everyone and getting the whole team on the same page Fluency in English, German is a plus.  As our products are used by patients with severe mental health diseases, we put a lot of emphasis into secure applications, documentation, verification, and validation to make sure our products are both: beneficial and safe at the same time. This comes with its own challenges for sure, but at the same time provides us the opportunity to deliver a product that really is meaningful, unique in the market and helps people (more than yet another food delivery service probably) The most important one: willingness to learn. We are constantly learning new things and we enjoy it a lot. We don’t expect to find people experienced in all of them. If you are excited about our tech-stack and you think you are a fast learner, do not hesitate to apply!  Our offer 30 vacation days (full-time) Working in a motivated, international team with offices in Berlin and Munich Unique combination of startup spirit and family business – flat hierarchies and direct decision-making processes Complimentary drinks and sponsored lunch Employee benefits at Schoen Clinic such as company pension schemes or discounts from over 600 different brands Rental options for company bikes\"\n\t\t\t}\n\t\t]\n\t\t-------------------------------------\n\t- styled jobs should look something like this:##somethingstyledok\n- add **displayKind** kind variable to switch between full-view and list mode, e.g. values are **full** or **list**\n\t- the code at this point is here: [edwardtanguay/task-job-application-tracker-app](https://github.com/edwardtanguay/task-job-application-tracker-app)\n\t- your site should look something like this: ##displayKindStageOf\n- create a toggle button to enable the user to switch between **full** and **list** display modes\n\t- first: the wrong way (without state variables)\n\t\t- `<button onClick={handleToggleView}>Toggle View</button>`\n\t\t- the event handler:\n\t\t\t----------------------------\n\t\t\tconst handleToggleView = () => {\n\t\t\t\tdisplayKind = displayKind === 'full' ? 'list' : 'full';\n\t\t\t}\n\t\t\t----------------------------\n\t\t- show in console.log that the variable is actually changing\n\t- problem: the site doesn't react to the change of the variable\n\t\t- reason: because it is an ordinary variable and not a **state variable**\n\t\t- solution: change it to a **state variable**\n\t- solve with state variable\n\t\t------------------------------------\n\t\timport { useState } from 'react';\n\n\t\tconst [displayKind, setDisplayKind] = useState('list');\n\n\t\tconst handleToggleView = () => {\n\t\t\tconst _displayKind = displayKind === 'full' ? 'list' : 'full';\n\t\t\tsetDisplayKind(_displayKind);\n\t\t};\n\t\t------------------------------------\n- for each job: add a status\n\t- status can be one of these values: send, wait, interview, declined, accepted\n\t- set all jobs to status \"send\"\n\t- make button in each job box\n\t\t---------------------------\n\t\t<button className=\"status\">{job.status}</button>\n\t\t---------------------------\n\t- style it \n\t- make event handler: **handleStatusChange** that changes the status\n\t- make conditional styling, e.g. change background according to each status","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-24 23:46:47","systemWhoCreated":"systemUnknown"},{"id":540,"category":"React","title":"Refactor, add local storage, and API call to job app","body":"- this howto is a continuation of this howto: [Create a personal Job-Search application in React](https://edwardtanguay.netlify.app/howtos?id=539)\n- we want to extend it in three ways\n\t- 1. refactor it into smaller components\n\t- 2. add local storage so the view mode (displayKind) and job statuses remain after you close and open the browser\n\t- 3. add an API call to get more information about the technologies and skills wanted for each job\n- final code for this project is here: [edwardtanguay/task-job-app-refactor-localstorage-api](https://github.com/edwardtanguay/task-job-app-refactor-localstorage-api)##titleforij\n- set up previous project as base\n\t- download this code from the previous project into your project directory: [edwardtanguay/task-job-application-process-state-events](https://github.com/edwardtanguay/task-job-application-process-state-events)\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t\t- initial commit\n\t- `npm run dev`\n\t- should look like this:##taskjoblooklike\n- **1. refactoring**\n\t- in App.jsx, extract the `<div className=\"jobs\">` HTML block into a component called `./components/JobsFull.jsx`\n\t- in App.jsx, extract the `<div className=\"jobList\">` HTML block into a component called `./components/JobsList.jsx`\n\t- import and use both components into App.jsx\n\t- consider: does it make sense to refactor JobFull out of JobsFull?\n\t\t- reasons: \n\t\t\t- it makes your code easier to read and understand\n\t\t\t- you want to use JobFull somewhere else if your application or in tests\n- **2. add localStorage**\n\t- create function to save to localStorage\n\t\t----------------------------------\n\t\tconst saveToLocalStorage = () => {\n\t\t\tconst jobAppState = {\n\t\t\t\tdisplayKind,\n\t\t\t\tjobs,\n\t\t\t};\n\t\t\tlocalStorage.setItem('jobAppState', JSON.stringify(jobAppState));\n\t\t};\n\t\t----------------------------------\n\t- add `saveToLocalStorage();` to HandleToggleView:\n\t\t---------------------------------\n\t\tconst handleToggleView = () => {\n\t\t\tconst _displayKind = displayKind === 'full' ? 'list' : 'full';\n\t\t\tsetDisplayKind(_displayKind);\n\t\t\tsaveToLocalStorage();\n\t\t};\n\t\t---------------------------------\n\t- PROBLEM: notice that **it saves the old value** (!) of the state variable **displayKind** \n\t\t- why? \n\t\t- because saving a state variable in React is an asynchronous process\n\t\t- SOLUTION: **use the useEffect hook** to observe the variables we want to save to localStorage and **run code when these variables change**\n\t\t\t------------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\tsaveToLocalStorage();\n\t\t\t}, [displayKind, jobs]);\n\t\t\t------------------------------\n\t\t- notes that now jobs are also being properly saved to local storage\n\t- on page load, check if there is localStorage for this page, if so, load it\n\t\t---------------------------\n\t\tconst loadLocalStorage = () => {\n\t\t\tconst jobAppState = JSON.parse(localStorage.getItem('jobAppState'));\n\t\t\tconsole.log(jobAppState);\n\t\t};\n\t\t---------------------------\n\t- if you see that it useEffect() is firing twice on pageLoad:##twotimeseffect\n\t- remove **StrictMode** which runs useEffect twice in development mode##noStrictok\n\t- after removing StrictMode, useEffect will only run once on page load##onlyoncccck\n\t- \n\t\t------------------------------------------\n\t\tconst loadLocalStorage = () => {\n\t\t\tconst jobAppState = JSON.parse(localStorage.getItem('jobAppState'));\n\t\t\tif (jobAppState === null) {\n\t\t\t\tsetDisplayKind('list');\n\t\t\t\tsetJobs(_jobs);\n\t\t\t} else {\n\t\t\t\tconsole.log(jobAppState.displayKind);\n\t\t\t\tsetDisplayKind(jobAppState.displayKind);\n\t\t\t\tsetJobs(jobAppState.jobs);\n\t\t\t}\n\t\t};\n\t\t------------------------------------------\n- 3. Call API to get description of skills\n\t- load techItems and display on page as test\n\t\t- url: https://edwardtanguay.netlify.app/share/techItems.json\n\t\t- make state variable for techItems\n\t\t- create load function with fetch or axios\n\t\t\t---------------------------------------\n\t\t\tconst loadTechItems = () => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch(techItemsUrl);\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetTechItems(data);\n\t\t\t\t})();\n\t\t\t}\n\t\t\t---------------------------------------\n\t- in **jobsFull.jsx** display dummy definitions\n\t\t--------------------------------------------\n\t\t<ul className=\"skillDefinitions\">\n\t\t\t{skillDefinitions.map((sd, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<li>{sd.title} - {sd.description}</li>\n\t\t\t\t)\n\t\t\t})}\n\t\t</ul>\n\t\t--------------------------------------------\n\t- see full code for details","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-26 06:23:45","systemWhoCreated":"systemUnknown"},{"id":541,"category":"React","title":"Add low-security login to job app (forms with React)","body":"- this howto is a continuation of this howto: [Refactor, add local storage, and API call to job app](https://edwardtanguay.netlify.app/howtos?id=540)\n- we want to extend it in the following way\n\t- 1. authentication: add a low-security form so that uses can log in and see specific information\n\t- 2. authorization: enable two users to access different data\n- final code for this project is here: [edwardtanguay/task-job-app-add-low-security-form](https://github.com/edwardtanguay/task-job-app-add-low-security-form) #gif#tasksecurityappjob\n- set up previous project as base\n\t- download this code from the previous project into your project directory: [edwardtanguay/task-job-app-refactor-localstorage-api](https://github.com/edwardtanguay/task-job-app-refactor-localstorage-api)\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t\t- initial commit\n\t- `npm run dev`\n\t- should look like this:##taskshosholok\n- **implement low security form**\n\t- add state variable **userIsLoggedIn** and set state to logged out\n\t\t- `const [userIsLoggedIn, setUserIsLoggedIn] = useState(false);`\n\t\t- `{userIsLoggedIn ? () : ()}`\n\t- add HTML for login form\n\t\t---------------------------------------\n\t\t<form>\n\t\t\t<fieldset>\n\t\t\t\t<legend>Welcome</legend>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<label htmlFor=\"login\">Login</label>\n\t\t\t\t\t<input type=\"text\" id=\"login\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t\t<input type=\"password\" id=\"password\" />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t<button>Enter</button>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t\t---------------------------------------\n\t- add styling\n\t\t-----------------------------------------\n\t\tform {\n\t\t\twidth: 600px;\n\n\t\t\tfieldset {\n\t\t\t\tborder: 1px solid #888;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tpadding: 20px;\n\n\t\t\t\tlegend {\n\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t}\n\n\t\t\t\t.row {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-content: start;\n\t\t\t\t\tpadding: 5px;\n\n\t\t\t\t\tlabel {\n\t\t\t\t\t\t&:after {\n\t\t\t\t\t\t\tcontent: \":\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twidth: 115px;\n\t\t\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tinput {\n\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\twidth: 300px;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.invalid input {\n\t\t\t\t\tcolor: red;\n\t\t\t\t}\n\n\t\t\t\t.note {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tmargin: 0 0 20px 97px;\n\t\t\t\t}\n\n\t\t\t\t.buttonRow {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: right;\n\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\tpadding: 5px;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t-----------------------------------------\n\t- focus cursor\n\t\t- `autoFocus`\n\t- handle submit button\n\t\t--------------------------------\n\t\tconst handleSubmitButton = () => {\n\t\t\t// do something with login/password\n\t\t}\n\t\t--------------------------------\n\t- **consider:**: how do we get the values from the login and password fields?\n\t\t- **answer:**: connect each field to a **state variable**\n\t\t\t---------------------------------------\n\t\t\tconst [formLogin, setFormLogin] = useState('');\n\n\t\t\t<input autoFocus value={formLogin} onChange={(e) => handleFormLogin(e)} type=\"text\" id=\"login\" />\n\n\t\t\tconst handleFormLogin = (e) => {\n\t\t\t\t// set value\n\t\t\t}\n\t\t\t---------------------------------------\n\t- **consider:**: why can you no longer type in the text box?\n\t\t- **answer:**: we have to actually change the value\n\t\t\t----------------------------------------\n\t\t\tsetFormLogin(e.target.value);\n\t\t\t----------------------------------------\n\t\t- display it to test: `{formLogin}`\n\t- connect password field to state variable in same way\n\t- now show that we have the form values in our submit button handler\n\t\t-------------------------------\n\t\tconsole.log(formLogin, formPassword);\n\t\t-------------------------------\n\t- **consider:** why does the button reload the page?\n\t\t- **answer:** send `e` as event and do a `e.preventDefault()`\n\t- check password and change state variable if correct\n\t- to log out: browser refresh\n\t- handle bad login with message\n\t\t- add dummy test\n\t\t\t--------------------------------------------------\n\t\t\t<div className=\"messageOnForm\">nnn</div>\n\t\t\t--------------------------------------------------\n\t\t- style it\n\t\t\t----------------------------\n\t\t\t.messageOnForm {\n\t\t\t\tcolor: yellow;\n\t\t\t\tmargin: -20px 0 0 120px;\n\t\t\t}\t\t\t\n\t\t\t----------------------------\n\t\t- extend button handler\n\t\t\t-----------------------------\n\t\t\tconst handleSubmitButton = (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tif (formPassword === '342') {\n\t\t\t\t\tsetUserIsLoggedIn(true);\n\t\t\t\t} else {\n\t\t\t\t\tsetMessageForm('bad login');\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t\t-----------------------------\n\t- **understand low-security level of this solution**\n\t\t- **consider:** where is your password stored?\n\t\t\t- on the frontend (!) in the bundled JavaScript file (!)\n\t\t- **consider:** how could a hacker find out your password?\n\t\t\t- do a CTRL-U and look around in the bundled JavaScript files, search for \"password\"\n\t- **increase security**\n\t\t- `npm i md5`\n\t\t\t--------------------------------------\n\t\t\timport md5 from 'md5';\n\n\t\t\t// temp\n\t\t\tconsole.log(md5('mypassword'));\n\n\t\t\tconst handleSubmitButton = (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst hash = md5(formPassword);\n\t\t\t\tif (hash === '8c6744c9d42ec2cb9e8885b54ff744d0') {\n\t\t\t\t\tsetUserIsLoggedIn(true);\n\t\t\t\t} else {\n\t\t\t\t\tsetMessageForm('bad login');\n\t\t\t\t}\n\t\t\t};\n\t\t\t--------------------------------------\n\t\t- now a hacker could theoretically find all of your raw data on the site\n\t\t- but he won't be able to find your password and so can't log into the site to see your presentation of your data\n\t\t- one could say this security level \"hides presented data but doesn't protect raw data\"\n\t\t\t- makes if more difficult to find your data\n\t\t\t- protects you from bots scraping your page\n\t\t\t- helps you understand security in a more sophisticated, pragmatic way\n\t\t\t- enables you to set up easy-to-use development frontends which can then in one step be completely secured by a backend\n\t- implement login button\n\t\t----------------------------------------\n\t\t<div className=\"buttonArea\">\n\t\t\t<button onClick={handleToggleView}>Toggle View</button>\n\t\t\t<button>Logout</button>\n\t\t</div>\t\t\t\t\n\n\t\t.buttonArea {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\tconst handleLogoutButton = () => {\n\t\t\tsetFormLogin('');\n\t\t\tsetFormPassword('');\n\t\t\tsetUserIsLoggedIn(false);\n\t\t}\n\t\t----------------------------------------\n- **2. authorization: two users have different access**\n\t- the goal: two users\n\t\t- me: can see list or full\n\t\t- guest: can only see list\n\t- implement\n\t\t--------------------------------\n\t\tconst [userGroup, setUserGroup] = useState('');\n\n\t\tconst handleLogoutButton = () => {\n\t\t\tsetFormLogin('');\n\t\t\tsetFormPassword('');\n\t\t\tsetUserGroup('');\n\t\t\tsetUserIsLoggedIn(false);\n\t\t};\n\n\t\t{userGroup === 'fullAccessMembers' && (\n\t\t\t<button onClick={handleToggleView}>\n\t\t\t\tToggle View\n\t\t\t</button>\n\t\t)}\t\t\n\t\t--------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-27 06:15:45","systemWhoCreated":"systemUnknown"},{"id":542,"category":"React Forms","title":"Implement Validation into forms in job app using the react-hook-form library","body":"- this code is a continuation of this [job-app project](https://edwardtanguay.netlify.app/howtos?id=541)\n- start with this code: [edwardtanguay/live-coding-job-app-forms-low-security-auth](https://github.com/edwardtanguay/live-coding-job-app-forms-low-security-auth)\n- the full code for this project is here: [edwardtanguay/task-job-app-form-validation](https://github.com/edwardtanguay/task-job-app-form-validation)\n- when finished with this howto, your app should work like this: #gif#taskjobappvalidationok\n- **1. implement basic validation on Login form**\n\t- notify that each field is required\n\t\t-----------------------------------\n\t\t{fieldLogin.trim().length === 0 && (\n\t\t\t<div className=\"fieldNote\">required</div>\n\t\t)}\n\n\t\t.fieldNote {\n\t\t\tfont-size: 1rem;\n\t\t\tmargin: 7px 0 0 5px;\n\t\t\tcolor: rgb(226, 194, 134);\n\t\t}\n\t\t-----------------------------------\n\t- make button disabled until all fields are valid\n\t\t-------------------------------------------\n\t\t<button disabled={fieldLogin.trim().length === 0 || fieldPassword.trim().length === 0} onClick={handleSubmitButton}>Enter</button>\n\t\t-------------------------------------------\n\t- **consider: ** as a form's complexity increases, implementing validation in this way will become quite complex quite quickly\n- **2. use react-hook-form to implement a page that adds a job**\n\t- react-hook-form background info:\n\t\t- this is a library that enables you to manage the complexity of larger forms including accessing values of fields (without state variables for each) and validation\n\t\t- if interested, see this [general howto on react-hook-form](https://edwardtanguay.netlify.app/howtos?id=530)\n\t\t- see [Bill Luo's YouTube series on react-hook-form](https://www.youtube.com/channel/UC9qgXurGpQzePCx928oyIZg/videos)\n\t- build a new view: Add Job\n\t\t---------------------------------------------\n\t\tconst displayKinds = ['list', 'full', 'addJob'];\n\n\t\tconst handleToggleView = () => {\n\t\t\tlet displayKindIndex = displayKinds.indexOf(displayKind);\n\t\t\tdisplayKindIndex++;\n\t\t\tif (displayKindIndex > displayKinds.length - 1) {\n\t\t\t\tdisplayKindIndex = 0;\n\t\t\t}\n\t\t\tsetDisplayKind(displayKinds[displayKindIndex]);\n\t\t};\t\t\n\n\t\t{displayKind === 'full' && (\n\t\t\t<JobsFull\n\t\t\t\tjobs={jobs}\n\t\t\t\thandleStatusChange={handleStatusChange}\n\t\t\t\ttechItems={techItems}\n\t\t\t/>\n\t\t)}\n\t\t{displayKind === 'list' && <JobsList jobs={jobs} />}\n\t\t{displayKind === 'addJob' && <div>add job</div>}\t\t\n\t\t---------------------------------------------\n\t- create **AddJob.jsx** component\n\t\t----------------------------------------\n\t\texport const AddJob = () => {\n\t\t\treturn (\n\t\t\t\t<div>add job component</div>\n\t\t\t)\n\t\t}\n\n\t\t{displayKind === 'addJob' && <AddJob />}\n\t\t----------------------------------------\n\t- install react-hook-form\n\t\t- `npm i react-hook-form`\n\t- replace **AddJob.jsx** with this code:\n\t\t------------------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport { useForm } from 'react-hook-form';\n\t\timport jobSites from '../data/jobSites.json';\n\n\t\texport const AddJob = () => {\n\t\t\tconst [formData, setFormData] = useState({});\n\t\t\tconst {\n\t\t\t\tregister,\n\t\t\t\thandleSubmit,\n\t\t\t\tsetValue,\n\t\t\t\twatch,\n\t\t\t\tformState: { errors },\n\t\t\t} = useForm({\n\t\t\t\tdefaultValues: {\n\t\t\t\t\tskills: 'HTML, CSS, JavaScript, React',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tuseEffect(() => {\n\t\t\t\tconst position = watch('position');\n\t\t\t\tif (position === '/r') {\n\t\t\t\t\tsetValue('position', 'Frontend React Developer');\n\t\t\t\t\tsetValue('skills', 'React, JavaScript, HTML, CSS');\n\t\t\t\t}\n\t\t\t}, [watch('position')]);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"page_addJob\">\n\t\t\t\t\t<h3>Find Jobs:</h3>\n\t\t\t\t\t<ul className=\"jobSites\">\n\t\t\t\t\t\t{jobSites.map((jobSite, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<a target=\"_blank\" href={jobSite.url}>\n\t\t\t\t\t\t\t\t\t\t{jobSite.name}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<h3>Add a Job:</h3>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<form\n\t\t\t\t\t\t\tonSubmit={handleSubmit((data) => {\n\t\t\t\t\t\t\t\tsetFormData(data);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName=\"field_position\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t{...register('position', {\n\t\t\t\t\t\t\t\t\t\trequired: 'Please enter a position.',\n\t\t\t\t\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\t\t\t\t\tvalue: 4,\n\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t'You need to have at least 4 characters in position name.',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Position\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">{errors.position?.message}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName=\"field_url\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t{...register('url', {\n\t\t\t\t\t\t\t\t\t\trequired: 'Please enter a URL.',\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\tplaceholder=\"URL\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">{errors.url?.message}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tclassName=\"field_skills\"\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t{...register('skills', {\n\t\t\t\t\t\t\t\t\t\trequired:\n\t\t\t\t\t\t\t\t\t\t\t'Please enter skills in comma separated form.',\n\t\t\t\t\t\t\t\t\t\tminLength: {\n\t\t\t\t\t\t\t\t\t\t\tvalue: 4,\n\t\t\t\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\t\t\t\t'You need to have at least 4 characters in this field.',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Skills\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">{errors.skills?.message}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<textArea\n\t\t\t\t\t\t\t\t\tclassName=\"field_bulkText\"\n\t\t\t\t\t\t\t\t\t{...register('bulkText', {\n\t\t\t\t\t\t\t\t\t\trequired:\n\t\t\t\t\t\t\t\t\t\t\t'Please copy the text from the job site and paste it in here.',\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\tplaceholder=\"Copy and paste text from job site here.\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">{errors.bulkText?.message}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button disabled={Object.keys(errors).length}>Add the Job</button>\n\n\t\t\t\t\t\t\t{Object.keys(formData).length > 0 && (\n\t\t\t\t\t\t\t\t<div className=\"formData\">\n\t\t\t\t\t\t\t\t\t<div className=\"info\">This will be sent to the backend:</div>\n\t\t\t\t\t\t\t\t\t<pre>{JSON.stringify(formData, null, 2)}</pre>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t------------------------------------------------------\n\t- add styles to **App.scss**:\n\t\t------------------------------------\n\t\t.page_addJob {\n\t\t\th3 {\n\t\t\t\tmargin: 20px 0 10px 0;\n\t\t\t}\n\n\t\t\tul.jobSites {\n\t\t\t\tmargin: 0;\n\n\t\t\t\ta {\n\t\t\t\t\tcolor: rgb(149, 223, 149);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tform {\n\t\t\t\t.row {\n\t\t\t\t\tmargin: 0 0 0.5rem 0;\n\n\t\t\t\t\tinput {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t};placeholder {\n\t\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\t}\n\n\t\t\t\t\tdiv.info {\n\t\t\t\t\t\tfont-size: 0.9rem;\n\t\t\t\t\t\tcolor: yellow;\n\t\t\t\t\t}\n\n\t\t\t\t\t.field_position {\n\t\t\t\t\t\twidth: 500px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.field_url {\n\t\t\t\t\t\twidth: 800px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.field_skills {\n\t\t\t\t\t\twidth: 800px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.field_bulkText {\n\t\t\t\t\t\twidth: 800px;\n\t\t\t\t\t\theight: 100px;\n\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbutton {\n\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\tmargin: 10px 0 0 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.formData {\n\t\t\t\tbackground: #444;\n\t\t\t\tpadding: 1px 10px;\n\t\t\t\tmargin: 20px 0 0 0;\n\t\t\t\tfont-size: 0.9rem;\n\t\t\t\tcolor: rgb(185, 157, 86);\n\n\t\t\t\tpre {\n\t\t\t\t\twhite-space: pre-wrap;\n\t\t\t\t\twhite-space: -moz-pre-wrap;\n\t\t\t\t\twhite-space: -pre-wrap;\n\t\t\t\t\twhite-space: -o-pre-wrap;\n\t\t\t\t\tword-wrap: break-word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-04-28 06:19:03","systemWhoCreated":"systemUnknown"},{"id":543,"category":"Sass","title":"Extend job-app with advanced Sass and json-server","body":"- this howto is an extension of this [job-app project](https://edwardtanguay.netlify.app/howtos?id=542)\n- start with this code: [edwardtanguay/task-job-app-form-validation](https://github.com/edwardtanguay/task-job-app-form-validation)\n- the full code of this project is here: [edwardtanguay/task-job-app-advanced-sass-plus](https://github.com/edwardtanguay/task-job-app-advanced-sass-plus)\n- when finished, your app should look like this#gif#taskjobappwithjsonserver\n- **1. add advanced Sass features**\n\t- nesting\n\t\t- already implemented, probably the #1 reason to use Sass\n\t- variables\n\t\t- color\n\t\t\t- $color_skills\n\t\t\t\t- skills and skill definitions are the same color##skillsyellowkj\n\t\t\t\t- problem: if you want to change this color, you have to change it in two places\n\t\t\t\t- solution: define them from one variable and use the variable twice\n\t\t\t\t- change the variable and see how both colors change\n\t\t- fontSize\n\t\t\t- $fontSize_small: 0.9rem;\n\t\t\t- $fontSize_medium: 1.2rem;\n\t\t\t- $fontSize_large: 1.5rem;\n\t- @import\n\t\t- create `styles` directory\n\t\t- move all variable to _variables_default.scss\n\t\t- create _variables_customer001.scss\n\t\t\t-------------------------------------------\n\t\t\t$color_skills: orange;\n\t\t\t$fontSize_small: 1.1rem;\n\t\t\t$fontSize_medium: 1.5rem;\n\t\t\t$fontSize_large: 1.8rem;\n\t\t\t-------------------------------------------\n\t- @mixin\n\t\t- _variables_customer001.scss\n\t\t\t------------------------------------\n\t\t\t@mixin border {\n\t\t\t\tborder: 2px solid orange;\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tbox-shadow: #fff 2px 2px 10px;\n\t\t\t}\n\t\t\t------------------------------------\n\t\t- _variables_default.scss\n\t\t\t------------------------------------\n\t\t\t@mixin border {\n\t\t\t\tborder: 1px solid #666;\n\t\t\t\tborder-radius: 5px;\n\t\t\t}\n\t\t\t------------------------------------\n\t- @extend\n\t\t- add styles to Toggle View and Logout buttons\n\t\t\t- `btn_normal`\n\t\t\t- `btn_logout`\n\t\t- add these styles\n\t\t\t--------------------------------------------------\n\t\t\t.buttonArea {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\t.btn_normal {\n\t\t\t\t\tfont-family: monospace;\n\t\t\t\t}\n\t\t\t\t.btn_logout {\n\t\t\t\t\t@extend .btn_normal;\n\t\t\t\t\tcolor: red;\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t- @function\n\t\t- add to App.scss\n\t\t\t-----------------------------------\n\t\t\t@function sum($numbers...) {\n\t\t\t  $sum: 0;\n\t\t\t  @each $number in $numbers {\n\t\t\t\t$sum: $sum + $number;\n\t\t\t  }\n\t\t\t  @return $sum;\n\t\t\t}\n\t\t\t-----------------------------------\n\t\t- use function\n\t\t\t------------------------------------\n\t\t\tpadding: 0 sum(20px, 50px);\n\t\t\t------------------------------------\n\t\t- make _functions.scss\n\t\t- make the second parameter a value in each style sheet\n\t\t\t-----------------------------------\n\t\t\tpadding: 0 sum(20px, $siteIndent);\n\t\t\t-----------------------------------\n\t- other useful Sass features\n\t\t- [@if and @else](https://sass-lang.com/documentation/at-rules/control/if)\n\t\t- [@each](https://sass-lang.com/documentation/at-rules/control/each)\n\t\t- [@for](https://sass-lang.com/documentation/at-rules/control/for)\n\t\t- [@while] (https://sass-lang.com/documentation/at-rules/control/while)\n- **2. implement json-server to save new jobs**\n\t- refactor structure of JSON file(s) to conform to json-server\n\t\t- add ids\n\t\t\t- site should still work\n\t\t- make jobs a parameter of a base object\n\t\t\t- rename `jobs.json` to `db.json`\n\t\t\t- change access to data\n\t\t\t\t------------------------------------------\n\t\t\t\timport db from './data/db.json';\n\n\t\t\t\tconst _jobs = db.jobs;\n\t\t\t\t------------------------------------------\n\t\t- also bring jobSites into `db.json`\n\t\t\t- **addJob.jsx**\n\t\t\t\t-----------------------------------\n\t\t\t\timport db from '../data/db.json';\n\n\t\t\t\tconst jobSites = db.jobSites; \n\t\t\t\t-----------------------------------\n\t- install json-server\n\t\t- `npm i json-server`\n\t\t- **package.json**\n\t\t\t---------------------------------------\n\t\t\t\"api\": \"json-server --watch ./src/data/db.json --port 4555\",\n\t\t\t---------------------------------------\n\t\t- start with `npm run api`\n\t\t- click on link\n\t- create dual-start script with npm-run-all\n\t\t- `npm i npm-run-all -D`\n\t\t- add new start script\n\t\t\t-----------------------------\n\t\t    \"start\": \"run-p api dev\",\n\t\t\t-----------------------------\n\t\t- from now on, start API and site with `npm start`\n\t- load jobs via fetch\n\t\t- load and display jobs as test\n\t\t\t---------------------------------------------\n\t\t\tconst jobsUrl = 'http://localhost:4555/jobs';\n\n\t\t\tconst loadJobs = () => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch(jobsUrl);\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t})();\n\t\t\t};\n\n\t\t\tloadJobs();\n\t\t\t---------------------------------------------\n\t\t- now load jobs for app to use\n\t\t\t- remove jobs from localStorage (since we now store to database)\n\t\t\t- load jobs in useEffect\n\t\t\t\t----------------------------------------\n\t\t\t\tconst loadJobs = async () => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await fetch(jobsUrl);\n\t\t\t\t\t\tconst _jobs = await response.json();\n\t\t\t\t\t\t_jobs.forEach((job) => {\n\t\t\t\t\t\t\tjob.status = 'accepted';\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetJobs(_jobs);\n\t\t\t\t\t})();\n\t\t\t\t};\n\t\t\t\t----------------------------------------\n\t\t- save full job when status changes (since localStorage no longer does this)\n\t\t\t- add status to each job in db.json\n\t\t\t- test with [Postman](https://www.postman.com/downloads)\n\t\t\t\t- `http://localhost:4555/jobs/1`\n\t\t\t\t- method = PUT\n\t\t\t\t- body, raw, JSON\n\t\t\t\t- your Postman post should look like this:##thepostmanshowit\n\t\t\t- save the status to db on status change\n\t\t\t\t----------------------------------------\n\t\t\t\tconst saveJobToDb = async (job) => {\n\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\tbody: JSON.stringify(job),\n\t\t\t\t\t\theaders: { 'Content-type': 'application/json; charset=UTF-8' },\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait fetch(jobsUrl + '/' + job.id, requestOptions);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t};\t\t\t\t\t\n\t\t\t\t----------------------------------------\n\t\t\t- call it in handleStatusChange\n\t\t\t\t---------------------------------------\n\t\t\t\tsaveJobToDb(job);\n\t\t\t\t---------------------------------------\n\t\t- add job to database on add form\n\t\t\t- test in Postman##postmanandadd\n\t\t\t- add handler to \"Add the Job\" button\n\t\t\t\t-------------------------------------\n\t\t\t\tconst handleAddJobButton = async () => {\n\t\t\t\t\tconsole.log(formData);\n\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: JSON.stringify(formData),\n\t\t\t\t\t\theaders: { 'Content-type': 'application/json; charset=UTF-8' },\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait fetch(jobsUrl, requestOptions);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t-------------------------------------\n\t\t\t- attach to button and see the problem (formData is not yet filled)\n\t\t\t- solve with useEffect\n\t\t\t\t--------------------------------------------------\n\t\t\t\tconst clearForm = () => {\n\t\t\t\t\tsetValue('position', '');\n\t\t\t\t\tsetValue('url', '');\n\t\t\t\t\tsetValue('skills', defaultSkills);\n\t\t\t\t\tsetValue('bulkText', '');\n\t\t\t\t};\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\tif (Object.keys(formData).length > 0) {\n\t\t\t\t\t\tformData.status = 'send';\n\t\t\t\t\t\thandleAddJobButton();\n\t\t\t\t\t\tsetFormData({});\n\t\t\t\t\t\tclearForm();\n\t\t\t\t\t}\n\t\t\t\t}, [formData]);\t\t\t\n\t\t\t\t--------------------------------------------------\n\t\t\t- note that you need to reload data when you click the displayKind button now\n\t\t\t\t----------------------------------\n\t\t\t\tconst handleToggleView = () => {\n\t\t\t\t\t...\n\t\t\t\t\tloadJobs();\n\t\t\t\t};\t\t\t\t\n\t\t\t\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-02 07:34:44","systemWhoCreated":"systemUnknown"},{"id":544,"category":"React","title":"Create React site with React Bootstrap and Bootswatch templates","body":"- full code for this project is here: [edwardtanguay/task-use-react-bootstrap-bootswatch-vite](https://github.com/edwardtanguay/task-use-react-bootstrap-bootswatch-vite)\n- final project should look like this#gif#tasktehappandreactbootstrap2\n- set up vite project\n\t- `npm create vite`\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- **package.json**\n\t\t- `\"dev\": \"vite --port 3345\",`\n\t- `npm run dev`\n\t- clean up to minimum\n- implement Bootstrap the JS/DOM, non-React way (will later undo)\n\t- [Bootstrap site](https://getbootstrap.com/docs/5.1/getting-started/introduction)\n\t- paste into **index.html**\n\t\t-----------------------------------------------\n\t\t<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\n\t\t-----------------------------------------------\n\t- **App.jsx**\n\t\t---------------------------------------------\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t  <h1>Company Site</h1>\n\t\t\t\t\t\t<button className=\"btn-primary me-1\">Employees</button>\n\t\t\t\t\t\t<button className=\"btn-primary\">Customers</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t---------------------------------------------\n\t- consider: this is Bootstrap in React but not React Bootstrap\n- take out non-React-Bootstrap and implememnt React Bootstrap\n\t- remove JS/DOM Bootstrap\n\t\t- **index.html**\n\t\t\t- delete bootstrap link\n\t- implement React Bootstrap\n\t\t- [React Bootstrap site](https://react-bootstrap.github.io/getting-started/introduction/)\n\t\t- `npm install react-bootstrap bootstrap`\n\t\t- import 'bootstrap/dist/css/bootstrap.min.css';\n\t- use React Bootstrap componennts\n\t\t----------------------------------------\n\t\t<Container>\n\t\t\t<h1>Company Site</h1>\n\t\t\t<Button className=\"me-1\">Employees</Button>\n\t\t\t<Button className=\"me-1\">Customers</Button>\n\t\t</Container>\t\t\n\t\t----------------------------------------\n\t- add class to second button: `btn-success`\n- implement Bootswatch themes\n\t- make directory `styles`\n\t- [Bootswatch site](https://bootswatch.com)\n\t\t- download Darkly css file\n\t\t\t- rename `bootstrap.darkly.min.css`\n\t\t\t- `import './styles/bootstrap.darkly.min.css';`\n\t\t- download Morph css file\n\t\t\t- rename `bootstrap.morph.min.css`\n\t\t\t- `import './styles/bootstrap.morph.min.css';`\n\t\t- download Quartz css file\n\t\t\t- rename `bootstrap.quartz.min.css`\n\t\t\t- `import './styles/bootstrap.quartz.min.css';`\n- enable buttons to display employees or customers data\n\t- add area for employee/customer content\n\t\t- see [React Bootstrap components](https://react-bootstrap.github.io/components/alerts)\n\t\t- copy in simple card\n\t\t\t---------------------------------------\n\t\t\t<Card className=\"mt-4\">\n\t\t\t\t<Card.Body>This is some text within a card body.</Card.Body>\n\t\t\t</Card>\n\t\t\t---------------------------------------\n\t\t- look at other templates\n\t\t- make and import Employees component\n\t\t\t------------------------------------\n\t\t\texport const Employees = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Employees</h2>\n\t\t\t\t\t\t<p>This is the employees page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------------\n\t\t- make and import Customers component\n\t\t\t------------------------------------\n\t\t\texport const Customers = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Customers</h2>\n\t\t\t\t\t\t<p>This is the customers page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------------\n\t- enable button clicks to display respective content\n\t\t- consider: what state variable(s) do you need?\n\t\t- e.g. currentPage\n\t\t\t------------------------------------\n\t\t\timport { useState } from 'react';\n\n\t\t\tconst [currentPage, setCurrentPage] = useState('employees');\n\n\t\t\t{currentPage == 'employees' && <Employees />}\n\t\t\t{currentPage == 'customers' && <Customers />}\n\t\t\t------------------------------------\n\t\t- enable buttons\n\t\t\t---------------------------------------\n\t\t\t<Button onClick={() => setCurrentPage('employees')} className=\"me-1\">Employees</Button>\n\t\t\t<Button onClick={() => setCurrentPage('customers')} className=\"btn-success me-1\">Customers</Button>\n\t\t\t---------------------------------------\n\t\t- consider: what don't you have with this solution that you have with React Router?\n\t- display employees and customers are pages\n\t\t- download `employees.json` and `customers.json` from [Northwind data site](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json)\n\t\t- employees\n\t\t\t---------------------------------------\n\t\t\timport employees from '../data/employees.json';\n\n\t\t\texport const Employees = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Employees</h2>\n\t\t\t\t\t\t<p>This is the employees page.</p>\n\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{employees.map((emp, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={index}>{emp.firstName} {emp.lastName}</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t---------------------------------------\n\t- add carousel to the employee page\n\t\t- see [React Bootstrap components: carousel](https://react-bootstrap.github.io/components/carousel)\n\t\t- copy in the code\n\t\t- copy in photos\n\t\t- customize:\n\t\t\t----------------------------------------------------\n\t\t\t<Carousel style={{ width: '300px' }}>\n\t\t\t\t{employees.map((emp, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Carousel.Item>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName=\"d-block w-100\"\n\t\t\t\t\t\t\t\tsrc={`images/employees/employee_${emp.employeeID}.jpg`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Carousel.Caption>\n\t\t\t\t\t\t\t\t<div>{emp.firstName} {emp.lastName}</div>\n\t\t\t\t\t\t\t</Carousel.Caption>\n\t\t\t\t\t\t</Carousel.Item>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Carousel>\t\t\t\n\t\t\t----------------------------------------------------\n\t- add tables to the customer page\n\t\t- see [React Bootstrap components: table](https://react-bootstrap.github.io/components/table)\n\t\t- copy in code\n\t\t- customize:\n\t\t\t---------------------------------------------------\n\t\t\t<Table striped bordered hover>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t<th>First Name</th>\n\t\t\t\t\t\t<th>Last Name</th>\n\t\t\t\t\t\t<th>Company</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{customers.slice(1, 10).map((cust, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{cust.customerID}</td>\n\t\t\t\t\t\t\t\t<td>{cust.contactName.split(' ')[0]}</td>\n\t\t\t\t\t\t\t\t<td>{cust.contactName.split(' ')[1]}</td>\n\t\t\t\t\t\t\t\t<td>{cust.companyName}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t\t---------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-03 08:06:56","systemWhoCreated":"systemUnknown"},{"id":545,"category":"React","title":"Strategy for modern website development with React","body":"- **fetching, manipulating, displaying, sending, and reacting to changes in data** is 90% of web application programming\n\t- keep [Jamstack](https://jamstack.org) in mind\n\t\t- super fast, globally distributed **frontends**\n\t\t\t- free: Netlify, Vercel, Cloudflare\n\t\t- headless, dedicated **backends** that serve data\n\t\t\t- free: Heroku\n\t\t\t- low cost: Hetzner, Digital Ocean\n\t\t- communication between between frontends and backends requires **asynchronous data fetching**\n- for React sites, this means:\n\t- **1. create state variables** you need\n\t\t- what data is going to change that will require a **react**ion to that data?\n\t\t- everything else can be a normal variable\n\t- **2. load data** you need\n\t\t- *local data*\n\t\t\t- simply import it before your function loads\n\t\t\t- if this is data that will change:\n\t\t\t\t- load it as a temporary variable (`_employees`) \n\t\t\t\t- save it as the default value of a state variable \n\t\t\t\t\t- `const [employees, setEmployees] = useState(_employees)`\n\t\t- *remote data*\n\t\t\t- load it in **useEffect()** \n\t\t\t- load it with **fetch()** (or axios)\n\t\t\t- loading remote data always occurs in a different *time zone*\n\t\t\t\t- there it always requires **async/await**\n\t\t\t- *whenever* the data arrives, save it in a *state variable*\n\t\t\t\t- REMEMBER: always save a *copy* of a state variable as its new value since *state varialbles are immutable*\n\t\t\t\t\t- string\n\t\t\t\t\t\t- `setMode(mode);`\n\t\t\t\t\t- number\n\t\t\t\t\t\t- `setCount(count);`\n\t\t\t\t\t- boolean\n\t\t\t\t\t\t- `setDataIsLoaded(dataIsLoaded);`\n\t\t\t\t\t- **array** - spread it\n\t\t\t\t\t\t- `setEmployees([...employees]);`\n\t\t\t\t\t- **object** - spread it\n\t\t\t\t\t\t- `setConfig({...config});`\n\t\t\t\t- TIP: many problems in React revolve around problems with saving data to state variables, advice: always use _temp variable\n\t\t\t\t\t----------------------------------------\n\t\t\t\t\tconst _employees = employees.filter(m => m.vacationDaysLeft > 10);\n\t\t\t\t\tsetEmployees(_employees);\n\t\t\t\t\t----------------------------------------\n\t- **3. build logic into JSX** to *react* to and change *state variables*\n\t\t- usually you react to **state variables** that will be changing as the user uses the, as data loaded into the site, etc.\n\t\t\t- however, you often also need to react (once on pageLoad) to e.g. **props** sent into the component, or **normal** variables imported e.g. config variables, etc.\n\t\t- build conditional statements\n\t\t\t- if/then: `{employees.length === 0 && (...)}`\n\t\t\t- if/then/else: `{config.userIsPayingCustomer ? (...) : (...)}`\n\t\t\t- for everything else, extract logic to a function: `{jobRequiresFavoriteTechnologies(job) && (...)`\n\t\t- build event handles for events\n\t\t\t- inline\n\t\t\t\t-------------------------------------------\n\t\t\t\t<button onClick={() => setSiteLayout('darkmode')}>Dark Mode</button>\n\t\t\t\t-------------------------------------------\n\t\t\t- call a handling function\n\t\t\t\t-----------------------------------------\n\t\t\t\t<button onClick={() => handleProcessContract(contract)}>Process Contract</button>\n\t\t\t\t-----------------------------------------\n\t\t- common uses for JSX logic:\n\t\t\t- let the user know that data is loading\n\t\t\t- disable functionality that is not available yet (e.g. because data is still loading)\n\t\t\t- change state based on user activity: selected dropdown choice, pressed button, clicked link, etc.\n\t\t\t- make changes in state variables with events and event handles\n\t- **4. refactor app into components**\n\t\t- React makes refactoring code into components easy\n\t\t- therefore a common development strategy is to \"refactor as you go\", refactor when:\n\t\t\t- a component is more than two screens long - extract a obvious code units out into a component\n\t\t\t- you notice repetive code - collect all instances of repetative code, condense it into a component, call it from all places where it was used\n\t\t- obvious components\n\t\t\t- pages\n\t\t\t- a display unit for an item in an array - send object as prop\n\t\t\t\t------------------------------------\n\t\t\t\t{employees.map((emp, index) => {<Employee employee={emp}})}\n\t\t\t\t------------------------------------\n\t\t\t- any reusable code \n\t\t- send props to the component that make it unique\n\t\t\t------------------------------------\n\t\t\t<SmartButton userIsOnline={userIsOnline} kind=\"warning\"/>\n\t\t\t------------------------------------\n\t\t- remember that each component is its own universe with its own:\n\t\t\t- imports\n\t\t\t- state variables\n\t\t\t- useEffect() functions\n\t\t\t- JSX\n\t\t\t- child components\n\t\t- components trees have no depth limit\n\t\t\t- a React site is: components in components in components ... in App.jsx","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-04 06:38:35","systemWhoCreated":"systemUnknown"},{"id":546,"category":"React","title":"Create a React site with simple top navbar using React Router v6","body":"- get the full code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n- your finished site should look something like this:#gif#taskpersonalsitereactrouter\n- set up blank site with Vite\n\t- `npm create vite`\n\t- change into directory and `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n\t- `clean up site to dark theme`\n\t- install Sass\n\t\t- `npm i sass`\n\t\t- rename all css to scss\n- first make the pages we need\n\t- **pages/PageWelcome.jsx**\n\t- **pages/PageBooks.jsx**\n\t- **pages/PageAbout.jsx**\n- add nav bar\n\t- site should look something like this:##pagesshouldlookok\n- set up React Router\n\t- `npm i react-router-dom@6`\n\t- **main.js**\n\t\t- remove React.StrictMode (developing help we don't need)\n\t\t- `import { BrowserRouter } from 'react-router-dom';`\n\t\t- wrap App with `<BrowserRouter>`\n\t- create links\n\t\t- use **NavLink instead of Link** in order to style the active page\n\t\t\t--------------------------------------\n\t\t\timport { NavLink } from 'react-router-dom';\n\n\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink> |{' '}\n\t\t\t<NavLink to=\"/books\">Books</NavLink> |{' '}\n\t\t\t<NavLink to=\"/about\">About</NavLink>\n\t\t\t--------------------------------------\n\t- create routes\n\t\t----------------------------------------\n\t\timport { NavLink, Routes, Route } from 'react-router-dom';\n\n\t\t<Routes>\n\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t<Route path=\"/books\" element={<PageBooks />} />\n\t\t\t<Route path=\"/about\" element={<PageAbout />} />\n\t\t</Routes>\n\t\t----------------------------------------\n\t- styling for Navlinks\n\t\t--------------------------------\n\t\ta {\n\t\t\tcolor: #aaa;\n\t\t\ttext-decoration: none;\n\t\t}\n\n\t\ta.active {\n\t\t\tcolor: yellow;\n\t\t}\n\t\t--------------------------------\n\t- set default page\n\t\t- add `Navigate` to import\n\t\t----------------------------------------\n\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />}/>\n\t\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-11 07:04:29","systemWhoCreated":"systemUnknown"},{"id":547,"category":"React Router","title":"Create advanced React Router site with nested navbars using useParams, useNavigate, useLocation, Outlet and useOutletContext","body":"- the full code for this project is here: [edwardtanguay/howto-react-router-nested-navbars](https://github.com/edwardtanguay/howto-react-router-nested-navbars)\n- when finished, this project will look like this:#gif#reactroutersiteadvanced\n- setup\n\t- this howto uses this project as its base code: [Create a React site with simple top navbar using React Router v6](https://edwardtanguay.netlify.app/howtos?id=546)\n\t- download here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t- copy to directory\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n- **nested navbar**\n\t- make three book category components in /components\n\t\t------------------------------\n\t\t<BookGroupFantasy />\n\t\t<BookGroupPolitics />\n\t\t<BookGroupTechnology />\n\t\t------------------------------\n\t- make NavLinks\n\t\t-----------------------------------\n\t\t<ul>\n\t\t\t<li><NavLink to=\"fantasy\">Fantasy</NavLink></li>\n\t\t\t<li><NavLink to=\"politics\">Politics</NavLink></li>\n\t\t\t<li><NavLink to=\"technology\">Technology</NavLink></li>\n\t\t</ul>\n\t\t<hr/>\n\t\t-----------------------------------\n\t\t- consider: \n\t\t\t- clicking the links already changes the URL\n\t\t\t- we now need to respond to the URL changing with Routes\n\t- add routes\n\t\t------------------------------------\n\t\t<Routes>\n\t\t\t<Route path=\"fantasy\" element={<BookGroupFantasy />}/>\n\t\t\t<Route path=\"politics\" element={<BookGroupPolitics />}/>\n\t\t\t<Route path=\"technology\" element={<BookGroupTechnology />}/>\n\t\t</Routes>\t\t\n\t\t------------------------------------\n\t\t- fix error:##theerrorbookscon\n\t\t\t- **App.jsx**\n\t\t\t\t------------------------------------\n\t\t\t\t<Route path=\"/books/*\" element={<PageBooks />} />\n\t\t\t\t------------------------------------\n\t\t- make default choice \"fantasy\"\n\t\t\t- **App.jsx**\n\t\t\t\t------------------------------------\n\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />}/>\n\t\t\t\t------------------------------------\n- **id-based nested navbar with params and Outlet**\n\t- scenario: you have an array of items you want to display based on id, e.g.\n\t\t- `/howtos/342`\n\t\t- `/howtos/23`\t\t\n\t- make Howtos page\n\t- fetch and display all howto titles on page\n\t\t- url: https://edwardtanguay.netlify.app/share/howtos.json\n\t- display only PHP items that display fully\n\t- display navlinks\t\n\t\t- consider: <NavLink to=\"???\"/>\n\t\t\t- how can we link to a dynamic item?\n\t\t\t- we want to be able to link to item on its unique id, e.g. /howtos/233\n\t\t- **App.jsx**\n\t\t\t--------------------------------\n\t\t\t<Route path=\"/howtos\" element={<PageHowtos />}>\n\t\t\t\t<Route path=\":id\"/>\n\t\t\t</Route>\n\t\t\t--------------------------------\n\t\t- **Howtos.jsx**\n\t\t\t--------------------------------------\n\t\t\tconst { id } = useParams();\n\t\t\t--------------------------------------\n\t\t- in the Howtos page, we can now read in the id from the URL\n\t\t- make NavLinks change the id number being displayed\n\t\t\t-----------------------------------\n\t\t\t<NavLink className=\"navlink\" to={`${howto.id}`}>\n\t\t\t\t{howto.title} ({howto.id})\n\t\t\t</NavLink>\n\t\t\t-----------------------------------\n\t- display only the item clicked on\n\t\t--------------------------------\n\t\t{howto.id == id && (\n\t\t--------------------------------\n\t\t- consider: why does `==` work but not `===`?\n\t- solve more elegantly with `Outlet`\n\t\t- **PageHowtos.jsx**\n\t\t\t---------------------------------------------------\n\t\t\tconst [count, setCount] = useOutletContext();\n\n\t\t\tconst getCurrentHowto = () => {\n\t\t\t\tif (id) {\n\t\t\t\t\treturn howtos.find((m) => m.id == id);\n\t\t\t\t} else {\n\t\t\t\t\tif (howtos.length > 0) {\n\t\t\t\t\t\tconst _id = String(howtos[0].id);\n\t\t\t\t\t\tnavigate(_id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t----------------------------------------------------\n\t\t- **Howto.jsx**\n\t\t\t-----------------------------\n\t\t\timport { useOutletContext } from 'react-router-dom';\n\n\t\t\texport const Howto = () => {\n\t\t\t\tconst howto = useOutletContext();\n\t\t\t-----------------------------\n- **show and hide navlinks with useLocation**\n\t- change 'php' to 'react' so you have many more NavLinks\n\t- to fix this crowded UX problem, make it so when an item is showing, the links are not showing\n\t- take out default navigate\n\t\t---------------------------------------\n\t\tconst getCurrentHowto = () => {\n\t\t\treturn howtos.find((m) => m.id == id);\n\t\t};\t\t\n\t\t---------------------------------------\n\t- add useLocation()\n\t\t---------------------------------------\n\t\tconst { pathname } = useLocation();\t\t\n\n\t\t{pathname === '/howtos' ? (\n\t\t\t<nav>\n\t\t\t\t...\n\t\t\t</nav>\n\t\t) : (\n\t\t\t<div className=\"closeArea\">\n\t\t\t\t<button className=\"close\">\n\t\t\t\t\t<NavLink to=\"/howtos\">close</NavLink>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)}\n\t\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-12 02:51:26","systemWhoCreated":"systemUnknown"},{"id":548,"category":"useContext","title":"Create React site with React Router and UseContext","body":"- the purpose of this howto is to demonstrate:\n\t- why one needs useContext in a React application\n\t- how to implement useContext\n- we will first solve the problem of global variables the inefficient way, i.e. passing variables from component to component\n- we will then solve the same problem with useContext, which allows us to make these variables available to any component directly\n- you can find the full code for this site here: [edwardtanguay/howto-react-router-site-with-usecontext](https://github.com/edwardtanguay/howto-react-router-site-with-usecontext)\n- the final site will look and work like this:#gif#howtoReactUseContextSite\n- setup\n\t- this howto uses the following project as its base code: [Create a React site with simple top navbar using React Router v6](https://edwardtanguay.netlify.app/howtos?id=546)\n\t- download the code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t- copy to directory\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n- restructure site:\n\t- rename Book Club\n\t- add Members page##bookrestrus\n- load data in App and on every page\n\t- App.jsx\n\t\t- load books\n\t\t- load members\n\t\t- config\n\t\t\t- layout: professional, casual\n\t\t\t- clubName: \"The Book Club\"\n\t- display all data on every page\n\t- for data, see: http://edwardtanguay.netlify.app/share\n\t- basic code to load data:\n\t\t----------------------------------------\n\t\tconst [books, setBooks] = useState([]);\n\t\tconst [members, setMembers] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tsetBooks((await axios.get(booksUrl)).data);\n\t\t\t})();\n\t\t}, []);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tsetMembers((await axios.get(membersUrl)).data);\n\t\t\t})();\n\t\t}, []);\n\n\t\t----------------------------------------\n\t- pass books and employees to each page and have each page use these arrays \t\t\n- delete and edit buttons\n\t------------------------------------------\n\tconst handleDeleteBook = (book) => {\n\t\tconst _books = books.filter((m) => m.id !== book.id);\n\t\tsetBooks(_books);\n\t};\n\n\tconst handleEditBook = (book) => {\n\t\tconst _books = books.map((m) => {\n\t\t\tif (m.id === book.id) {\n\t\t\t\tm.title = m.title + ' - FINISHED';\n\t\t\t}\n\t\t\treturn m;\n\t\t});\n\t\tsetBooks(_books);\n\t};\t\n\n\t<div className=\"buttons\">\n\t\t<button\n\t\t\tonClick={() => handleDeleteBook(book)}\n\t\t>\n\t\t\tDelete\n\t\t</button>\n\t\t<button\n\t\t\tonClick={() => handleEditBook(book)}\n\t\t>\n\t\t\tEdit\n\t\t</button>\n\t</div>\t\n\t------------------------------------------\n- refactor code to display Member into component to show that you have to pass setMembers down two levels\n- **consider:** \n\t- we have to pass the data and functions to each component\n\t- the more components we have, and the more levels of components we have, the more code we have simply to pass around data\n\t- it would be more efficient if we would load books and members in one place and have each component access to them directly\n\t- this is the problem that the **useContext** hook solves\n- **implement useContext**\n\t- first only siteTitle\n\t\t- **src\\contexts\\AppContext.jsx**\n\t\t\t-------------------------------------\n\t\t\timport { createContext } from 'react';\n\n\t\t\texport const AppContext = createContext();\n\n\t\t\texport const AppProvider = ({ children }) => {\n\t\t\t\tconst siteTitle = \"The Book Club\"\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider value={{\n\t\t\t\t\t\tsiteTitle\n\t\t\t\t\t}}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\n\t\t\t};\n\t\t\t-------------------------------------\n\t\t- **main.jsx**\n\t\t\t---------------------------------\n\t\t\timport { AppProvider } from './AppContext.js';\n\n\t\t\t<BrowserRouter>\n\t\t\t\t<AppProvider>\n\t\t\t\t\t<App />\n\t\t\t\t</AppProvider>\n\t\t\t</BrowserRouter>\t\t\t\n\t\t\t---------------------------------\n\t\t- **App.jsx**\n\t\t\t-------------------------------------\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from './AppContext';\t\t\n\n\t\t\tconst { siteTitle } = useContext(AppContext);\n\t\t\t-------------------------------------\n\t\t- add members and books\n\t- refactor site so that all components only use AppContext as their source of variables","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-14 04:13:13","systemWhoCreated":"systemUnknown"},{"id":549,"category":"React","title":"Create simple example of useContext","body":"- Create a site with two components: \n\t- Customers\n\t- Employees\n- each component uses the variable `companyName` \n\t- instead of passing this variable from the parent to each component\n\t- this variable is saved centrally in useContext \n- full code is here: [edwardtanguay/howto-react-usecontext-simple](https://github.com/edwardtanguay/howto-react-usecontext-simple)\n- finished site should look like this: ##thereactuseconok\n- **setup**\n\t- in project directory\n\t- `npm create vite`\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n\t- add `components/Customers.jsx`\n\t\t---------------------------------------\n\t\texport const Customers = () => {\n\t\t\tconst companyName = 'ccc';\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2>Customers</h2>\n\t\t\t\t\t<p>These are the customers of {companyName}.</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\n\t\t---------------------------------------\n\t- add `components/Employees.jsx`\n\t\t----------------------------------------\n\t\texport const Employees = () => {\n\t\t\tconst companyName = 'eee';\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2>Employees</h2>\n\t\t\t\t\t<p>These are the employees of {companyName}.</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\n\t\t----------------------------------------\n\t- import and display on App.jsx\n- **add useContext** to share the variable `companyName`\n\t- 1. create AppContext.jsx\n\t\t---------------------------------\n\t\timport { createContext } from 'react';\n\n\t\texport const AppContext = createContext();\n\n\t\texport const AppProvider = ({ children }) => {\n\t\t\tconst companyName = \"The Widget Company\";\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider value={{\n\t\t\t\t\tcompanyName\n\t\t\t\t}}>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\n\t\t};\t\t\n\t\t---------------------------------\n\t- 2. wrap application in the context (so that any component in the application has access to the context's variables)\n\t\t- index.js\n\t\t\t-------------------------------------\n\t\t\timport { AppProvider } from './AppContext';\n\n\t\t\t<AppProvider>\n\t\t\t\t<App />\n\t\t\t</AppProvider>\n\t\t\t-------------------------------------\n\t- 3. for each component that needs the context's variables, import the context and use the variables\n\t\t- Customers.jsc\n\t\t\t-----------------------------------------\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from '../AppContext';\n\n\t\t\tconst { companyName } = useContext(AppContext); \n\t\t\t-----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-16 08:23:14","systemWhoCreated":"systemUnknown"},{"id":550,"category":"React","title":"Basic example of useReducer that increments a number","body":"- full code for this howto is here: [edwardtanguay/howto-usereducer-basic](https://github.com/edwardtanguay/howto-usereducer-basic)\n- final project should look like this: #gif#usereducerbasicsok\n- setup\n\t- create React site with Vite and minimize it\n\t\t- e.g. with [edwardtanguay/blank-vite-dark](https://github.com/edwardtanguay/blank-vite-dark)\n- build incrementally\n\t- number and lastAction with buttons\n\t- add whenLastClicked\n\t- add numberOfClicks\n- **App.jsx** finished\n\t--------------------------------------------\n\timport './App.scss';\n\timport { useReducer } from 'react';\n\n\tconst initialState = {\n\t\tnumber: 0,\n\t\tlastAction: '',\n\t\twhenLastClicked: '',\n\t\tnumberOfClicks: 0\n\t};\n\n\tfunction reducer(state, action) {\n\t\tlet obj = {};\n\t\tobj.whenLastClicked = new Date();\n\t\tobj.numberOfClicks = state.numberOfClicks + 1;\n\t\tswitch (action.direction) {\n\t\t\tcase 'up':\n\t\t\t\tobj.number = state.number + 1;\n\t\t\t\tobj.lastAction = 'increment';\n\t\t\t\tbreak;\n\t\t\tcase 'down':\n\t\t\t\tobj.number = state.number - 1;\n\t\t\t\tobj.lastAction = 'decrement';\n\t\t\t\tbreak;\n\t\t\tcase 'reset':\n\t\t\t\tobj = { ...initialState };\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error();\n\t\t}\n\t\treturn obj;\n\t}\n\n\tfunction App() {\n\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Basic Example of useReducer:</h1>\n\t\t\t\t<div>Number: {state.number}</div>\n\t\t\t\t<div>Last action: {state.lastAction}</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={() => dispatch({ direction: 'down' })}>\n\t\t\t\t\t\t-\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => dispatch({ direction: 'up' })}>+</button>\n\t\t\t\t\t<button onClick={() => dispatch({ direction: 'reset' })}>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<pre>{JSON.stringify(state, null, 2)}</pre>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t--------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-16 22:46:49","systemWhoCreated":"systemUnknown"},{"id":551,"category":"useReducer","title":"More complicated example of useReducer that updates API-fetched data","body":"- this howto shows how to use useReducer to state state in a more efficient way to be passed to components\n- the full code can be found here: [edwardtanguay/howto-fetch-data-and-edit-with-usereducer](https://github.com/edwardtanguay/howto-fetch-data-and-edit-with-usereducer)\n- the final site should function something like this: #gif#howtoUsereducerEditTechbooks\n- setup\n\t- this howto uses the following project as its base code: [Create a React site with simple top navbar using React Router v6](https://edwardtanguay.netlify.app/howtos?id=546)\n\t- download the code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t- copy to directory\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n- fetch tech books and display on PageBooks page in two components: TechBooks and TechBook\n\t- see info at [edwardtanguay.netlify.app/share](https://edwardtanguay.netlify.app/share)\n\t- either use axios or fetch to fetch and display the data\n\t\t-------------------------------\n\t\timport { useState, useEffect } from 'react';\n\n\t\tconst techBooksUrl = 'https://edwardtanguay.netlify.app/share/techBooks.json';\n\n\t\texport const PageBooks = () => {\n\t\t\tconst [techBooks, setTechBooks] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async() => {\n\t\t\t\t\tconst response = await fetch(techBooksUrl);\n\t\t\t\t\tconst _techBooks = await response.json();\n\t\t\t\t\tsetTechBooks(_techBooks);\n\t\t\t\t})();\n\t\t\t})\n\n\t\t\treturn (\n\t\t\t\t<div className=\"page_books\">\n\t\t\t\t\t<h2>Books</h2>\n\t\t\t\t\t<p>I have {techBooks.length} tech books.</p>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\t\t\n\t\t-------------------------------\n- display the full tech book with image\n\t- jsx\n\t\t------------------------------------------\n\t\t<p>I have following {techBooks.length} tech books:</p>\n\t\t<div className=\"techBooks\">\n\t\t\t{techBooks.map((techBook, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={index} className=\"techBook\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`https://edwardtanguay.netlify.app/share/images/techBooks/${techBook.idCode}.jpg`}\n\t\t\t\t\t\t\talt=\"tech book\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t<div className=\"title\">{techBook.title}</div>\n\t\t\t\t\t\t\t<div className=\"description\">{techBook.description}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\t\t\n\t\t------------------------------------------\n\t- scss\n\t\t---------------------------------\n\t\t.techBooks {\n\t\t\t.techBook {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tpadding: 20px;\n\t\t\t\tmargin-bottom: 10px;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tdisplay: flex;\n\n\t\t\t\timg {\n\t\t\t\t\theight: 170px;\n\t\t\t\t}\n\n\t\t\t\t.info {\n\t\t\t\t\tmargin-left: 10px;\n\n\t\t\t\t\t.title {\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\tcolor: rgb(233, 233, 123);\n\t\t\t\t\t}\n\t\t\t\t\t.description {\n\t\t\t\t\t\tfont-size: 1.1rem;\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t---------------------------------\n- refactor into components\n\t- components/TechBooks.jsx\n\t\t--------------------------------------\n\t\texport const TechBooks = ({ techBooks }) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"techBooks\">\n\t\t\t\t\t{techBooks.map((techBook, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={index} className=\"techBook\">\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={`https://edwardtanguay.netlify.app/share/images/techBooks/${techBook.idCode}.jpg`}\n\t\t\t\t\t\t\t\t\talt=\"tech book\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t<div className=\"title\">{techBook.title}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t{techBook.description}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t--------------------------------------\n\t- components/TechBook.jsx\n\t\t------------------------------------\n\t\timport { TechBook } from '../components/TechBook';\n\n\t\texport const TechBooks = ({ techBooks }) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"techBooks\">\n\t\t\t\t\t{techBooks.map((techBook, index) => {\n\t\t\t\t\t\treturn <TechBook key={index} techBook={techBook} />;\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t------------------------------------\n- add delete and edit button\n\t----------------------------------------\n\t<button onClick={() => handleDeleteTechBook(techBook)}>Delete</button>\n\t----------------------------------------\n- consider: we have a problem that we are passing too many props\n\t- we could solve with useContext\n\t- we could solve with useReducer\n\t- we could solve with useContext and useReducer\n- refactor to use useReducer\n\t- 1. import useReducer\n\t- 2. replace state variable\n\t\t----------------------------------\n\t\tconst [state, dispatch] = useReducer(reducer, []);\n\t\t----------------------------------\n\t- 3. replace `setTechBooks(_techBooks)`\n\t\t---------------------------------\n\t\tdispatch({ type: 'load', payload: _techBooks });\t\t\n\t\t---------------------------------\n\t- 4. define reducer function\n\t\t----------------------------------------\n\t\tconst reducer = (techBooks, action) => {\n\t\t\tswitch (action.type) {\n\t\t\t\tcase 'load':\n\t\t\t\t\treturn [...action.payload]\n\t\t\t}\n\t\t};\t\t\n\t\t----------------------------------------\n- refactor handleDeleteTechBook\n\t---------------------------------------\n\tconst handleDeleteTechBook = (techBook) => {\n\t\tdispatch({ type: 'delete', payload: {techBook}})\n\t};\n\n\tcase 'delete':\n\t\tconst _techBooks = techBooks.filter(\n\t\t\t(m) => m.id !== action.payload.techBook.id\n\t\t);\n\t\treturn _techBooks;\n\t---------------------------------------\n- now just send dispatch down\n\t-----------------------------------\n\t<button onClick={() => dispatch({ type: 'delete', payload: { techBook } })}>Delete</button>\n\t-----------------------------------\n- now add Mark Finished button\n\t-----------------------------------\n\t<button onClick={() => dispatch({ type: 'markFinished', payload: { techBook } })}>Mark Finished</button>\n\t-----------------------------------\n- rename dispatch to dispatchTechBooks\n- add enum-like object variable\n\t------------------------------------------\n\texport const TECHBOOKS_ACTION = {\n\t\tLOAD: 'load',\n\t\tMARK_FINISHED: 'markFinished',\n\t\tDELETE: 'delete',\n\t};\n\n\tconst reducer = (techBooks, action) => {\n\t\tswitch (action.type) {\n\t\t\tcase TECHBOOKS_ACTION.LOAD:\n\t\t\t\treturn [...action.payload];\n\t\t\tcase TECHBOOKS_ACTION.MARK_FINISHED:\n\t\t\t\taction.payload.techBook.title += ' -- FINISHED';\n\t\t\t\treturn [...techBooks];\n\t\t\tcase TECHBOOKS_ACTION.DELETE:\n\t\t\t\tconst _techBooks = techBooks.filter(\n\t\t\t\t\t(m) => m.id !== action.payload.techBook.id\n\t\t\t\t);\n\t\t\t\treturn _techBooks;\n\t\t}\n\t};\t\n\t------------------------------------------\n- add more functionality: \n\t- add and increase rank buttons\n\t\t-----------------------------------\n\t\t<button\n\t\t\tonClick={() =>\n\t\t\t\tdispatchTechBooks({\n\t\t\t\t\ttype: TECHBOOKS_ACTION.DECREASE_RANK,\n\t\t\t\t\tpayload: { techBook },\n\t\t\t\t})\n\t\t\t}\n\t\t>\n\t\t\t-\n\t\t</button>\n\t\t<button\n\t\t\tonClick={() =>\n\t\t\t\tdispatchTechBooks({\n\t\t\t\t\ttype: TECHBOOKS_ACTION.INCREASE_RANK,\n\t\t\t\t\tpayload: { techBook },\n\t\t\t\t})\n\t\t\t}\n\t\t>\n\t\t\t+\n\t\t</button>\t\n\t\t-----------------------------------\n\t- handle actions\n\t\t-----------------------------------\n\t\tcase TECHBOOKS_ACTION.INCREASE_RANK:\n\t\t\taction.payload.techBook.rank = (Number(action.payload.techBook.rank) + .1).toFixed(1);\n\t\t\treturn [...techBooks];\n\t\tcase TECHBOOKS_ACTION.DECREASE_RANK:\n\t\t\taction.payload.techBook.rank = (action.payload.techBook.rank - .1).toFixed(1);\n\t\t\treturn [...techBooks];\n\t\t-----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-17 07:54:38","systemWhoCreated":"systemUnknown"},{"id":552,"category":"React","title":"Publish React website to frontend providers Netlify, Vercel and Cloudflare","body":"- background\n\t- this howto will demonstrate how to create a React website and publish it the providers Netlify, Vercel and Cloudflare\n\t- note that you are only able to publish the frontend of your local website to these three providers\n\t- if you have a backend to your local website, e.g. that runs on Node/Express, you will need to publish this part of the website at a provider such as Heroku, one of the cloud services AWS, Azure, Google Cloud Platform, or a virtual or physical machine in the Cloud such as at Hetzner (Germany) or Digital Ocean\n\t- it is also possible to publish your frontend React site at GitHub pages but not as straight-forward as with the Jamstack-philosophy providers Netlify, Vercel and Cloudflare\n\t- in my experience, the easiest free solution for frontend and backend publishing for MERN stack websites today is:\n\t\t- frontend: Netlify \n\t\t\t- unlimited number of sites which automatically pull on pushes to a GitHub repository\n\t\t\t- decent free domain names: name.netlify.app\n\t\t\t- I have less experience with Vercel and Cloudflare but they seem to provide the same service as Netlify with slightly different features: try them as well\n\t\t- backend: Heroku \n\t\t\t- up to 5 sites which automatically pull on pushes from a GitHub repository\n\t\t\t- (up to 100 sites if you provide your credit card information)\n\t\t\t- machines sleep which can take up to 8 seconds to spin up, but this can be accounted for on the front end in order to provide decent UX\n- the final code for this project is here: [edwardtanguay/howto-frontend-react-site-showcase](https://github.com/edwardtanguay/howto-frontend-react-site-showcase)\n- in this howto we publish the same React site to all three providers and get images and React Router to work on all three: \n\t- [howto-frontend-react-site-showcase.netlify.app/books](https://howto-frontend-react-site-showcase.netlify.app/books)\n\t- [howto-frontend-react-site-showcase.vercel.app/books](https://howto-frontend-react-site-showcase.vercel.app/books)\n\t- [howto-frontend-react-site-showcase.pages.dev/books](https://howto-frontend-react-site-showcase.pages.dev/books)\n- note they all look identical:##allethreeonpages\n- 1. publish a simple text site to Netlify\n\t- create Vite site\n\t- name it how you want your domain to be called, e.g. `edward-frontend-react-site-showcase`\n\t\t- note that this name needs to be unique at these providers\n\t\t- for test and howto site, best to prefix with your name to avoid duplicates\n\t- `npm i`\n\t- `git init`\n\t- reduce site it to simple text\n\t- push it to GitHub with same name e.g. `edward-frontend-react-site-showcase`\n\t- 1. create site at Netlify\n\t\t- go to [www.netlify.com](https://www.netlify.com)\n\t\t- log in or sign up with your GitHub account\n\t\t- click [Add New Site] > [Import existing project]\n\t\t- [GitHub]\n\t\t- search for and click on the site you just pushed\n\t\t- accept all defaults and click [Deploy Site]##acceptalldefaultkjk\n\t\t- as site is being built, rename it:\n\t\t\t- [Site settings]\n\t\t\t- [Change site name]\n\t\t\t- paste the name of your site e.g. `edward-frontend-react-site-showcase`\n\t\t- click on **Deploys** in the menu then on your URL##clickondepoyeit\n\t\t- make a change on the local site, push to GitHub, and see that it is automatically deployed\n- 2. display photos on Netlify site\n\t- **avoid pitfall: broken images**\n\t\t- always put photos in `/public/images` directory\n\t\t- refer to images as e.g. `<img src=\"images/test.jpg\"/>`\n\t\t- note that with Vite sites you have to create the `/public` folder\n\t\t- note that this strategy will work for all dynamic that you want to access from HTML, e.g. image, audio and video files\n\t- do it wrong first to experience the problem:\n\t\t- **wrong way #1**:\n\t\t\t- download [this image](https://edwardtanguay.netlify.app/share/images/techBooks/bashCookbook.jpg) to `/src/images`\n\t\t\t- display like this:\n\t\t\t\t---------------------------------------\n\t\t\t\t<p>Here is the image:</p>\n\t\t\t\t<hr />\n\t\t\t\t<img src=\"src/images/bashCookbook.jpg\" />\n\t\t\t\t<hr />\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- locally it will work:##workforthelocalkj\n\t\t\t- push your changes to GitHub and see that the photo is broken online:##withbrokenwimage\n\t\t- **wrong way #2**\n\t\t\t- create `/public/images` directory\n\t\t\t- move image to `/public/images/bashCookbook.jpg`\n\t\t\t- locally the image is now broken\n\t\t\t- change to: \n\t\t\t\t--------------------------------------\n\t\t\t\t<p>Here is the image in public directory:</p>\n\t\t\t\t<hr />\n\t\t\t\t<img src=\"public/images/bashCookbook.jpg\" />\n\t\t\t\t<hr />\n\t\t\t\t--------------------------------------\n\t\t\t- locally it works\n\t\t\t- push changes to GitHub\n\t\t\t- see that image is still broken\n\t- do it **the right way**:\n\t\t- change to:\n\t\t\t------------------------------------------\n\t\t\t<p>Here is the image in the public directory referenced correctly:</p>\n\t\t\t<hr />\n\t\t\t<img src=\"images/bashCookbook.jpg\" />\n\t\t\t<hr />\n\t\t\t------------------------------------------\n\t\t- locally it works\n\t\t- push changes to GitHub\n\t\t- see that image is now showing##bokonlineworkshshows\n- 3. implement React Router on page on Netlify site\n\t- **avoid pitfall: refreshing page on selected route causes 404 error**\n\t- implement React Router and experience the problem at Netlify\n\t\t- [Create a React site with simple top navbar using React Router v6](https://edwardtanguay.netlify.app/howtos?id=546)\n\t\t- App.jsx\n\t\t\t---------------------------------------------\n\t\t\timport './App.scss';\n\t\t\timport { PageWelcome } from './pages/PageWelcome';\n\t\t\timport { PageBooks } from './pages/PageBooks';\n\t\t\timport { NavLink, Routes, Route } from 'react-router-dom';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink> |{' '}\n\t\t\t\t\t\t<NavLink to=\"/books\">Books</NavLink>\n\t\t\t\t\t\t<Routes>\n\t\t\t\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t\t\t\t<Route path=\"/books\" element={<PageBooks />} />\n\t\t\t\t\t\t</Routes>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t---------------------------------------------\n\t\t- push to GitHub\n\t\t- view at Netlify\n\t\t\t- note that React Router works\n\t\t\t- note you can refresh the main page:##notecanrefesshr\n\t\t\t- but note that if you refresh a routed page, you get a 404:##ifrefereshwrong\n\t- fix the problem\n\t\t- add a file called `_redirects` to the `/public` directory with the following text:\n\t\t\t-----------------------------------------------\n\t\t\t/* /index.html 200\n\t\t\t-----------------------------------------------\n\t\t- see this howto: [How to solve a 404 error on a React Router site at Netlify](https://edwardtanguay.netlify.app/howtos?id=518)\n\t\t- push change to GitHub\n\t\t- view at Netlify again\n\t\t- see refreshing a routed page works\n- publish to Vercel\n\t- go to [vercel.com](https://vercel.com)\n\t- log in or sign up with GitHub\n\t- [New Project]\n\t- search and click the [Import] button\n\t- it will be published at e.g. [howto-frontend-react-site-showcase.vercel.app](https://howto-frontend-react-site-showcase.vercel.app)\n\t- note that you have the same React Router problem at Vercel:##vercelproblemkj\n\t\t- create in root directory **vercel.json**:\n\t- fix the React Router update-page problem:\n\t\t- add **vercel.json** in root directory with this content:\n\t\t\t--------------------------------------\n\t\t\t{\n\t\t\t\t\"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/\" }]\n\t\t\t}\n\t\t\t--------------------------------------\n\t\t- push to GitHub, check Vercel and see that the refresh on a routed page now works\n\t\t- and it still works on Netlify\n- publish to Cloudflare\n\t- go to [cloudflare.com](https://www.cloudflare.com)\n\t- note you have to sign up via e-mail\n\t\t- I used my Google mail and it was an easy 3-minute process\n\t- click on [Pages]\n\t- [Create project] > [Connect to Git]\n\t- select repository, [Begin Setup]\n\t- note you have to manually type in **Build command** and **Build output directory**##cloudflaright\n\t- [Continue to Project]\n\t- everything works, e.g.: [howto-frontend-react-site-showcase.pages.dev](https://howto-frontend-react-site-showcase.pages.dev)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-23 07:54:02","systemWhoCreated":"systemUnknown"},{"id":553,"category":"Heroku","title":"Publish simple Node/Express API to Heroku and consume it from React site at Netlify","body":"- this howto shows how to build a distributed application using three separate servers for frontend, backend, images:\n\t- frontend is a React site at Netlify\n\t- backend API is a Node/Express site at Heroku\n\t- frontend loads images from a second Netlify site\n- frontend is here:\n\t- [ejt-howto-test-api-frontend.netlify.app/books](https://ejt-howto-test-api-frontend.netlify.app/books)\n\t- code is here: [edwardtanguay/ejt-howto-test-api-frontend](https://github.com/edwardtanguay/ejt-howto-test-api-frontend)\n- backend is here:\n\t- [ejt-howto-test-api.herokuapp.com](https://ejt-howto-test-api.herokuapp.com)\n\t- code is here: [edwardtanguay/ejt-howto-test-api](https://github.com/edwardtanguay/ejt-howto-test-api)\n- **1. Set up and publish simple Node/Express API to Heroku**\n\t- create local Node/Express API\n\t\t- create **directory name with 30 or less characters**\n\t\t\t- this is a Heroku limit\n\t\t\t- since this will be a part of your Heroku url (https://nnnnnnnnn.herokuapp.com) it needs to be unique\n\t\t\t- therefore to avoid conflicts for personal projects to **prefix your sites with your initials**\n\t\t\t\t- e.g. `ejt-howto-test-api`\n\t\t- server.js\n\t\t\t----------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst PORT = 4433;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\treturn res.json(getBooks());\n\t\t\t});\n\t\t\tapp.listen(PORT, () => {\n\t\t\t\tconsole.log(`server running on http://localhost:${PORT}`);\n\t\t\t});\t\t\n\t\t\t----------------------------------------\n\t- get Heroku account\n\t\t- if you don't have an account, [Sign Up]\n\t\t- login\n\t- set up Heroku app\n\t\t- [New], {Create new app]\n\t\t- App name (tip: same as directory and repository name), e.g. `ejt-howto-test-api`\n\t\t- Europe\n\t\t- [Create App]\n\t- try to connect local code to Heroku app via **GitHub repository**\n\t\t- Deployment Method: [GitHub]\n\t\t- [Connect to GitHub]\n\t\t\t- **2022-05-23:** I get this error:##itemherokagit\n\t\t\t- **2022-05-23:** *Heroku has temporarily disabled the OAuth connection to GitHub repositories*, see [Heroku and GitHub: \"Items could not be retrieved, Internal server error\"](https://stackoverflow.com/questions/71892543/heroku-and-github-items-could-not-be-retrieved-internal-server-error)\t\n\t- instead, connect to **Heroku Git repository**\n\t\t- Deploy\n\t\t- [Heroku Git]\n\t\t- install Heroku Git\n\t\t\t- Download and install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli)\n\t\t\t- during Windows install, got this message but otherwise it said that it completed:##windoherokugo\t\n\t\t- `heroku login`\n\t\t\t- browser, click button, go back\n\t\t- `git init`\n\t\t\t- create `.gitignore` for node_modules\n\t\t- `heroku git:remote -a ejt-howto-test-api`\n\t\t- `git commit -am \"initial commit\"`\n\t\t- `git push heroku master`\n\t- note it doesn't work\n\t\t- because of PORT number\n\t\t- change to:\n\t\t\t------------------------------\n\t\t\tconst PORT = process.env.PORT || 4433;\t\t\n\t\t\t------------------------------\n\t\t- commit and push\n\t\t- it works\n\t- change to serve JSON\n\t\t- add to bottom: \n\t\t\t-----------------------------------\n\t\t\tfunction getBooks() {\n\t\t\t}\n\t\t\t-----------------------------------\n\t\t- copy in from: https://edwardtanguay.netlify.app/share/techBooks.json\n\t\t- change to:\n\t\t\t-------------------------------\n\t\t\treturn res.json(getBooks());\n\t\t\t-------------------------------\n\t\t- note it doesn't change (because we are running node)\n\t\t\t- for now, just start again with `node server.js`\n\t- consume from another local site\n\t\t- course website\n\t\t- src\\pages\\edward\\subpages\\menu\\Menu.jsx\n\t\t\t-------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\n\t\t\tconst url = 'http://localhost:4433';\n\n\t\t\texport const Menu = () => {\n\t\t\t\tconst [books, setBooks] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetBooks((await axios.get(url)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t<li>There are {books.length} books.</li>\n\t\t\t-------------------------------------\n\t\t- note error:##theerrorbforfbook\n\t\t- fix cors error like this\n\t\t\t- `npm i cors`\n\t\t\t- `import cors from 'cors';`\n\t\t\t- `app.use(cors());`\n\t\t\t- no more cors error locally\n\t- push change and consume Heroku API from local course website\n\t\t- push change from VSCode interface\n\t\t- watch progress on Heroku dashboard under \"Overview\"\n\t\t- JSON still served in browser\n\t\t- in local website, change url to: https://ejt-howto-test-api.herokuapp.com\n\t\t- still shows 15 books\n\t- change backend to nodemon\n\t\t- `npm i nodemon` (note: not as a dev dependency)\n\t\t- change start to:\n\t\t\t----------------------------------------\n\t\t\t\"start\": \"./node_modules/.bin/nodemon\"\n\t\t\t----------------------------------------\n\t\t- push changes to Heroku\n\t\t- local site now responds to changes, and Heroku site works\n- **2. Set up and publish React website to Netlify which consumes data from Heroku API**\n\t- set this starter site up locally (React-Router)\n\t\t- [edwardtanguay/howto-frontend-react-site-showcase](https://github.com/edwardtanguay/howto-frontend-react-site-showcase)\n\t- copy above code from course website to books page\n\t\t- display all titles of books:\n\t\t\t-------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\n\t\t\t// const url = 'http://localhost:4433';\n\t\t\tconst url = 'https://ejt-howto-test-api.herokuapp.com';\n\n\t\t\texport const PageBooks = () => {\n\t\t\t\tconst [books, setBooks] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetBooks((await axios.get(url)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Books</h2>\n\t\t\t\t\t\t<p>There are {books.length} books.</p>\n\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{books.map((book, index) => {\n\t\t\t\t\t\t\t\treturn <li key={index}>{book.title}</li>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------------\n\t- publish to GitHub\n\t\t- [edwardtanguay/ejt-howto-test-api-frontend](https://github.com/edwardtanguay/ejt-howto-test-api-frontend)\n\t- publish to Netlify\n\t\t- [ejt-howto-test-api-frontend.netlify.app](https://ejt-howto-test-api-frontend.netlify.app)\n\t- currently:\n\t\t- 1. frontend is at Netlify\n\t\t- 2. backend is at Heroku\n\t\t- 3. now load images from edwardtanguay.netlify.app\n\t\t\t- JSX\n\t\t\t\t---------------------------------------\n\t\t\t\t<h2>Books</h2>\n\t\t\t\t<p>There are {books.length} books.</p>\n\t\t\t\t<div className=\"books\">\n\t\t\t\t\t{books.map((book, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={index} className=\"book\">\n\t\t\t\t\t\t\t\t<img src={`https://edwardtanguay.netlify.app/share/images/techBooks/${book.idCode}.jpg`} alt=\"book\"/>\n\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t\t\t\t\t\t<div className=\"description\">{book.description}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t---------------------------------------\n\t\t\t- Sass\n\t\t\t\t-------------------------------------------\n\t\t\t\t.books {\n\t\t\t\t\t.book {\n\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\tmargin-bottom: 10px;\n\t\t\t\t\t\tpadding: 20px;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\twidth: 600px;\n\n\t\t\t\t\t\timg {\n\t\t\t\t\t\t\theight: 160px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.info {\n\t\t\t\t\t\t\tmargin-left: 10px;\n\t\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\t\tcolor: rgb(203, 159, 76);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t\t-------------------------------------------\n\t- push changes to Netlify\n- improve UX of distributed application\n\t- notice it blinks upon loading: #gif#noticethatblinksnetlyy\n\t- add a spinner\n\t\t- `npm i react-icons`\n\t\t- add to page\n\t\t\t----------------------------------\n\t\t\timport { FaSpinner } from 'react-icons/fa';\n\n\t\t\t<div className=\"spinner\">\n\t\t\t\t<FaSpinner />\n\t\t\t</div>\t\t\t\n\t\t\t----------------------------------\n\t\t- add styling for spinner\n\t\t\t------------------------------------\n\t\t\t.spinner {\n\t\t\t\tcolor: #aaa;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tanimation: spin infinite 2s linear;\n\t\t\t}\n\n\t\t\t@keyframes spin {\n\t\t\t\tfrom {\n\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t}\n\n\t\t\t\tto {\n\t\t\t\t\ttransform: rotate(360deg);\n\t\t\t\t}\n\t\t\t}\n\t\t\t------------------------------------\n\t- problem:\n\t\t- your Netlify/Heroku distributed site will sometimes take .5 seconds to load and sometimes 5-8 seconds depending on if the backend has to be spun up or not\n\t\t- add 5 seconds to the load time\n\t\t\t-----------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetBooks((await axios.get(url)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, 5000);\n\t\t\t}, []);\n\t\t\t-----------------------------\n\t\t- note that the 5-8 second load time has a nice UX now:#gif#theniceuxinin\n\t\t- however, change the wait time to `0` and note that when the page loads within a second, it has bad-UX blinking:#gif#notethatstillblinkskj\n\t\t- solve this with a fade animation in both cases\n\t\t\t- [react-fade-in](https://www.npmjs.com/package/react-fade-in)\n\t\t\t- `npm i react-fade-in`\n\t\t\t- wrap everything under the Books title in `<FadeIn></FadeIn>`\n\t\t- note that in both cases there is a more pleasant fade-in:#gif#morepleasenatfadein\n\t- publish to Netlify\n\t\t- note that it works fades in nicely within a second\n\t\t- access your site after a few hours and see that you get a nice spinner while the backend is spun up","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-24 06:52:15","systemWhoCreated":"systemUnknown"},{"id":554,"category":"Heroku","title":"How to fix Heroku Node/Express app that output \"There is nothing here\" and \"404 - Not found - nginx\"","body":"- I set up two identical Node/Express apps at Heroku each which functioned as an API that provides a JSON file\n- one app works and one didn't, here is their output, the only difference was that on the Overview tab of the Heroku dashboard, the app that works showed \"npm start\" while the other app showed \"bin/boot\":##hadsetuptwobuton\n- both use nodemon the same was, with no nodemon.json file, package.json files are similar:\n\t--------------------------------------\n\t{\n\t\t\"name\": \"ejt-livecoding-apisite-back\",\n\t\t\"version\": \"1.0.0\",\n\t\t\"description\": \"\",\n\t\t\"type\": \"module\",\n\t\t\"main\": \"server.js\",\n\t\t\"scripts\": {\n\t\t\t\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\t\t\t\"start\": \"./node_modules/.bin/nodemon\"\n\t\t},\n\t\t\"author\": \"\",\n\t\t\"license\": \"ISC\",\n\t\t\"dependencies\": {\n\t\t\t\"cors\": \"^2.8.5\",\n\t\t\t\"express\": \"^4.18.1\",\n\t\t\t\"nodemon\": \"^2.0.16\"\n\t\t},\n\t\t\"devDependencies\": {}\n\t}\n\t--------------------------------------\n- the fix was to create a file called `Procfile` (no extension) in the root directory which has one line:\n\t------------------------\n\tweb: npm start\n\t------------------------\n- now backend works: [ejt-livecoding-apisite-back.herokuapp.com](https://ejt-livecoding-apisite-back.herokuapp.com)\n- and frontend works: [ejt-livcoding-apisite-front.netlify.app/books](https://ejt-livcoding-apisite-front.netlify.app/books)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-25 07:56:01","systemWhoCreated":"systemUnknown"},{"id":555,"category":"TypeScript","title":"Create a React Site with TypeScript","body":"- this howto will show you how to create a React site which uses TypeScript \n\t- you will learn the basics of using strong-typing within a React/JSX context\n\t- you will learn practice use of TypeScript's interfaces and enums\n- the code for this site you can find here: [edwardtanguay/howto-typescript-react-site](https://github.com/edwardtanguay/howto-typescript-react-site)\n- the finished site should look like this:##typereactfinished\n- create a React/TypeScript site with Vite\n\t- in your termain, go to your project directory \n\t- `npm create vite`\n\t- give it a name such as `typescript-react-test-site`\n\t- choose **react** and **react-ts**\n\t- cd into your newly created directory, e.g. `cd typescript-react-test-site`\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n- what are the differences?\n\t- App.jsx is now App.tsx\n\t- two files `tsconfig.json` and `tsconfig.node.json`\n\t- otherwise everything is the same\n\t- **you now have type safety**\n\t\t- try to set count to a string\n\t\t\t-------------------------\n\t\t\tsetCount('nnn');\n\t\t\t-------------------------\n\t\t- note TypeScript notifies you of this error while developing##tshasprobl\n\t\t- rename App.tsx to App.jsx\n\t\t- note that JavaScript finds no problem with this##jsnoprobl\n\t\t- rename back to .tsx\n\t- **for variables without values you have to specify a type in order to have type safety**\n\t\t- otherwise TypeScript will default to type `any` which means you are back to JavaScript##notethatifno\n\t\t- when you define the types, you have type safety##greennohastype\n- useful features of TypeScript\n\t- **interfaces**\n\t\t- you can define objects so that they must have a specific type for each property, errors will be reported in your editor:##badscoresan\n\t\t- when you use variables that have interface types, VSCode/TypeScript will give you accurate information in JavaScript code and JSX regarding which properties you are allowed to use and what types these properties have:##typescriptintellisense\n\t- **enums**\n\t\t- with enums you can define a list of allowed values for a property##theenumexamples\n\t\t- enums are useful for conditional rendering, but note if you want to display their value, you need to use the enum itself as an array and pass the value of the variable as the index:##usingeneums\n- use interfaces/models to convert unstructured data (e.g. from an API) into structured data: \n\t- first load raw book data directly:\n\t\t-----------------------------------------\n\t\timport { useEffect, useState } from 'react';\n\t\timport axios from 'axios';\n\n\t\tconst url = 'https://gutendex.com/books/?search=paris';\n\n\t\tfunction App() {\n\t\t\tconst [books, setBooks] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetBooks((await axios.get(url)).data.results);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t{books.length === 0 ? (\n\t\t\t\t\t\t<div>Loading...</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<h2>There are {books.length} books:</h2>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t-----------------------------------------\n\t- now list out the books and display properties\n\t- note the TypeScript starts to complain that it does not know the types, which means you have unstructured data:##typesshowsdirtydata\n\t- if you just display `book.authors[0]` the books that have no authors will cause an error\n\t- so you need to code logic into JSX which you should avoid as much as possible\n\t- TypeScript also informs us that authors is not known for certain##notforscertain\n\t- a solution to this is to create TypeScript interfaces and models which implement these interfaces\n\t\t- **src/interfaces.tsx**\n\t\t\t----------------------------------\n\t\t\texport interface IBook {\n\t\t\t\ttitle: string;\n\t\t\t\tauthor: string;\n\t\t\t}\t\t\t\n\t\t\t----------------------------------\n\t\t- **src/bookModel.ts**\n\t\t\t----------------------------------\n\t\t\timport { IBook } from './interfaces';\n\n\t\t\texport const getBooks = (rawBooks: any[]) => {\n\t\t\t\tconst books: IBook[] = [];\n\t\t\t\trawBooks.forEach((rawBook: any) => {\n\t\t\t\t\tconst book: IBook = {\n\t\t\t\t\t\ttitle: rawBook.title,\n\t\t\t\t\t\tauthor: rawBook.authors.length > 0 ? rawBook.authors[0].name : '(unknown)'\n\t\t\t\t\t}\n\t\t\t\t\tbooks.push(book);\n\t\t\t\t});\n\n\t\t\t\treturn books;\n\t\t\t}\t\t\t\n\t\t\t----------------------------------\n\t\t- **App.tsx**\n\t\t\t-------------------------------------\n\t\t\timport { IBook } from './data/interfaces';\n\t\t\timport { getBooks } from './data/bookModel'; \n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst rawBooks = (await axios.get(url)).data.results;\n\t\t\t\t\tconst _books: IBook[] = getBooks(rawBooks);\n\t\t\t\t\tsetBooks(_books);\n\t\t\t\t})();\n\t\t\t}, []);\n\t\t\t-------------------------------------\n\t\t- note now that TypeScript is complaining in a cryptic way that we are trying to save an array of objects of type IBook into an untyped array ##nevertypescript\n\t\t- the solution for this is to inform TypeScript that our state variable `books` is an array of type IBooks\n\t\t- now in JSX, we have a clean and structured array of objects that always have a title and always have an author, which gives us the assurance that we will not receive errors because of missing data, wrong types, etc.:##alwaystitleauth","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-30 07:12:23","systemWhoCreated":"systemUnknown"},{"id":556,"category":"React","title":"Create custom hooks in React","body":"- this howto will show you how to create custom hooks in React that you can use similarly to standard hooks such as useState and useEffect\n- you can find the full code to this project here: [edwardtanguay/howto-create-custom-react-hooks](https://github.com/edwardtanguay/howto-create-custom-react-hooks)\n- the finished site should look like this:#gif#usefetchcustomhooksok\n- **set up base site** that uses React Router and Sass:\n\t- download the code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t- create directory e.g. `howto-create-custom-react-hooks` and paste in downloaded code files\n\t- open terminal in that directory \n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n\t- open site at http://localhost:3000 and you should see a site like this:#gif#thebasesiteforstart\n- customize the site\n\t- title: React Custom Hooks\n\t- welcome page: Explore the custom hooks on this site and create more.##customizedreacthooks\n- **useToggle**\n\t- add a useToggle page on the site##thepageUseToggle\n\t- write your wish code for useToggle first, e.g. you want to create three buttons to change whether a user is online or not:\n\t\t---------------------------------------\n\t\t{userIsOnline ? (\n\t\t\t<p>User is currently online.</p>\n\t\t) : (\n\t\t\t<p>User is logged out.</p>\n\t\t)}\n\t\t---------------------------------------\n\t- make a useToggle variable for it:\n\t\t-----------------------------------------\n\t\tconst [userIsOnline, toggleUserIsOnline] = useToggle(false);\n\t\t-----------------------------------------\n\t- add button:\n\t\t----------------------------------------\n\t\t<button onClick={() => toggleUserIsOnline()}>Toggle online status</button>\n\t\t----------------------------------------\n\t- create hook: `hooks/useToggle.jsx`\n\t\t- create return value:\n\t\t\t----------------------------------------------------\n\t\t\treturn [value, toggleValue];\n\t\t\t----------------------------------------------------\n\t\t- create internal function\n\t\t\t------------------------------------------\n\t\t\tconst toggleValue = () => {\n\t\t\t\tsetValue(!value);\n\t\t\t}\n\t\t\t------------------------------------------\n\t- import the hook:\n\t\t--------------------------------\n\t\timport { useToggle } from '../hooks/useToggle';\n\t\t--------------------------------\n\t- make \"logon\" and \"logoff\" buttons\n\t\t--------------------------------------\n\t\t<button onClick={() => toggleUserIsOnline(true)}>logon</button>\n\t\t<button onClick={() => toggleUserIsOnline(false)}>logoff</button>\n\t\t--------------------------------------\n\t- update hook logic to force value\n\t\t------------------------------------------\n\t\tconst toggleValue = (_value = null) => {\n\t\t\tconsole.log(value);\n\t\t\tif (_value === null) {\n\t\t\t\t_value = !value;\n\t\t\t\tsetValue(_value);\n\t\t\t} else {\n\t\t\t\tsetValue(_value);\n\t\t\t}\n\t\t};\n\t\t------------------------------------------\n\t- use the hook again for other toggle values\n\t\t- **layoutIsDark**\n\t\t\t--------------------------------------------\n\t\t\tconst [layoutIsDark, toggleLayoutIsDark] = useToggle(true);\n\n\t\t\t{layoutIsDark ? <p>Layout is dark.</p> : <p>Layout is light.</p>}\n\n\t\t\t<hr/>\n\t\t\t<button onClick={() => toggleLayoutIsDark()}>Toggle layout</button>\n\t\t\t<button onClick={() => toggleLayoutIsDark(true)}>Set layout to dark</button>\n\t\t\t<button onClick={() => toggleLayoutIsDark(false)}>Set layout to light</button>\n\t\t\t--------------------------------------------\n\t\t- **projectIsFinished**\n\t\t\t-----------------------------------------------\n\t\t\tconst [projectIsFinished, toggleProjectIsFinished] = useToggle(false);\n\n\t\t\t{projectIsFinished ? <p>Project has been completed.</p> : <p>Project is not finished.</p>}\n\n\t\t\t<hr/>\n\t\t\t<button onClick={() => toggleProjectIsFinished()}>Toggle project status</button>\n\t\t\t<button onClick={() => toggleProjectIsFinished(true)}>Set project to finished</button>\n\t\t\t<button onClick={() => toggleProjectIsFinished(false)}>Set project to unfinished</button>\n\t\t\t-----------------------------------------------\n- **useFetch**\n\t- on Books page, write wish code:\n\t\t------------------------------------------\n\t\tconst [techBooks] = useFetch('https://edwardtanguay.netlify.app/share/techBooks.json');\n\n\t\t<h3>There are {techBooks.length} tech books.</h3>\n\t\t------------------------------------------\n\t- create hook: `src\\pages\\PageBooks.jsx`:\n\t\t------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport axios from 'axios';\n\n\t\texport const useFetch = (url) => {\n\t\t\tconst [items, setItems] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetItems((await axios.get(url)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn [items];\n\t\t};\n\t\t------------------------------------------\n\t- use the hook again:\n\t\t-------------------------------------\n\t\tconst [generalBooks] = useFetch('https://edwardtanguay.netlify.app/share/books.json');\n\t\t-------------------------------------\n\t- extend the hook with `totalItems`\n\t\t------------------------------------\n\t\treturn [items, items.length];\n\t\t------------------------------------\n\t- extend the hook with `isLoading`\n\t\t-------------------------------------\n\t\treturn [items, items.length, items.length === 0];\t\t\n\t\t-------------------------------------\n\t- extend the hook with `mockWait`\n\t\t------------------------------------\n\t\texport const useFetch = (url, mockWait = false) => {\n\n\t\tconst _items = (await axios.get(url)).data;\n\t\tif (mockWait) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetItems(_items);\n\t\t\t}, Math.floor(Math.random() * 2000) + 1000);\n\t\t} else {\n\t\t\tsetItems(_items);\n\t\t}\n\t\t------------------------------------\n\t- in second use of useFetch, only use the first and fourth items of the returning array\n\t\t-------------------------------------\n\t\tconst [generalBooks, whatever, generalBooksAreLoading] = useFetch(\n\t\t\t'https://edwardtanguay.netlify.app/share/books.json', true\n\t\t);\n\t\t-------------------------------------\n\t- refactor to return object instead of array:\n\t\t-------------------------------------\n\t\treturn {\n\t\t\titems,\n\t\t\ttotalItems: items.length,\n\t\t\tisLoading: items.length === 0,\n\t\t};\n\n\t\tconst {\n\t\t\titems: techBooks,\n\t\t\ttotalItems: totalTechBooks,\n\t\t\tisLoading: techBooksAreLoading,\n\t\t} = useFetch(\n\t\t\t'https://edwardtanguay.netlify.app/share/techBooks.json',\n\t\t\ttrue\n\t\t);\n\t\tconst { items: generalBooks, isLoading: generalBooksAreLoading } = useFetch(\n\t\t\t'https://edwardtanguay.netlify.app/share/books.json',\n\t\t\ttrue\n\t\t);\n\t\t-------------------------------------\n- complete site\n\t- remove About page\n\t- change Books page to useEffect","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-05-31 02:28:18","systemWhoCreated":"systemUnknown"},{"id":557,"category":"styled-components","title":"Use styled-components in a React site","body":"- this howto will show you an implementation of styled-components in order to create an interactive linguistic activity which changes styles dynamically on button click\n- full code is here:\n\t- [edwardtanguay/howto-styled-components-with-react](https://github.com/edwardtanguay/howto-styled-components-with-react) (imports nouns from local JSON file)\n\t- [edwardtanguay/howto-styled-components2](https://github.com/edwardtanguay/howto-styled-components2) (fetches nouns via API)\n\t- [edwardtanguay/live-coding-styled-components-react](https://github.com/edwardtanguay/live-coding-styled-components-react) (displays buttons and words in three colors according to article)\n- the finished app works like this:#gif#theappgermannounsarticles\n- basic info\n\t- styled-components enables you to easily combine JavaScript with styles in order to make style dynamic based on code\n\t- styled-components are used when you need to change the styling on the site dynamically\n\t- one can of course do this with embedded dynamic styles such as\n\t\t--------------------------------------------\n\t\t<div style={{display: choice !== 'der' && 'none'}}>DER is selected</div>\n\t\t--------------------------------------------\n\t- but styled-components has the advantage that it:\n\t\t- enables you to extract the main business logic out of JSX where it becomes increasingly convoluted as complexity increases\n\t\t- offers many more features, see [styled-components.com/docs](https://styled-components.com/docs)\n\t- not that one does not need to choose between styled-components and Sass but can use them both:\n\t\t- Sass for static styling application wide\n\t\t- styled-components for dynamic styling within a specific component\n- **set up base site** that uses Sass:\n\t- download the code here: [edwardtanguay/blank-vite-dark](https://github.com/edwardtanguay/blank-vite-dark)\n\t- create directory e.g. `howto-create-custom-react-hooks` and paste in downloaded code files\n\t- open terminal in that directory \n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n\t- open site at http://localhost:3000 \n\t- your site should look like this:##okthewelcometosite\n- **fetch German article/nouns and display in grid**\n\t- before we apply styled-components, we want to first fetch the German nouns via API and display them in a grid\n\t- import axios, fetch the nouns, and display how many:\n\t\t-------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport './App.scss';\n\t\timport axios from 'axios';\n\n\t\tconst url = 'https://edwardtanguay.netlify.app/share/germanNouns.json';\n\n\t\tfunction App() {\n\t\t\tconst [nouns, setNouns] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetNouns((await axios.get(url)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>German Article Practice</h1>\n\t\t\t\t\t<div>There are {nouns.length} nouns.</div>\t\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t-------------------------------------------\n\t- display nouns:\n\t\t--------------------------------------\n\t\t<div className=\"nouns\">\n\t\t\t{nouns.map((noun, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"noun\">\n\t\t\t\t\t\t{noun.article} {noun.singular}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\t\t\n\t\t--------------------------------------\n\t- style with Sass\n\t\t-------------------------------------\n\t\t.nouns {\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns: repeat(5, 1fr);\n\t\t\tgrid-template-rows: repeat(5, 1fr);\n\t\t\tgrid-column-gap: 2px;\n\t\t\tgrid-row-gap: 2px;\n\n\t\t\t.noun {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #eee;\n\t\t\t\tpadding: 5px;\n\t\t\t}\n\t\t}\n\t\t-------------------------------------\n\t- make random: **qstr.js**\n\t\t----------------------------------\n\t\texport const randomize = (array) => {\n\t\t\tlet currentIndex = array.length,\n\t\t\t\trandomIndex;\n\t\t\twhile (currentIndex != 0) {\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex--;\n\t\t\t\t[array[currentIndex], array[randomIndex]] = [\n\t\t\t\t\tarray[randomIndex],\n\t\t\t\t\tarray[currentIndex],\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn array;\n\t\t};\t\t\n\n\t\timport * as qstr from './qstr';\n\n\t\tqstr.randomize(nouns);\n\t\t----------------------------------\n\t- add buttons\n\t\t----------------------------------\n\t\t<div className=\"buttons\">\n\t\t\t<button>der</button>\n\t\t\t<button>die</button>\n\t\t\t<button>das</button>\n\t\t\t<button>hide</button>\n\t\t</div>\n\n\t\t.buttons {\n\t\t\tpadding: 0 0 20px 0;\n\n\t\t\tbutton {\n\t\t\t\tfont-size: 1.5rem;\n\t\t\t\tmargin-right: 10px;\n\t\t\t\tpadding: 5px;\n\t\t\t\twidth: 100px;\n\t\t\t}\n\t\t}\t\t\n\t\t----------------------------------\n\t- your site should now look like this:##allthenounsbuttons\n- **add styled-components** and interactivity\n\t- add state variable `choice` and enable buttons to change it\n\t\t------------------------------------------\n\t\tconst [choice, setChoice] = useState('hide');\n\n\t\t<div className=\"buttons\">\n\t\t\t<button onClick={() => setChoice('der')}>der</button>\n\t\t\t<button onClick={() => setChoice('die')}>die</button>\n\t\t\t<button onClick={() => setChoice('das')}>das</button>\n\t\t\t<button onClick={() => setChoice('hide')}>hide</button>\n\t\t</div>\n\t\t<div>{choice}</div>\n\t\t------------------------------------------\n\t- import styled-components\n\t\t- `npm i styled-components`\n\t\t- App.jsx\n\t\t\t----------------------------------------------\n\t\t\t- import styled from 'styled-components';\n\t\t\t----------------------------------------------\n\t- change buttons into styled components and change clicked button to green:\n\t\t---------------------------------------------\n\t\tconst Button = styled.button`\n\t\t\tbackground-color: ${(props) =>\n\t\t\t\tprops.mode === 'selected' ? 'green' : '#eee'};\n\t\t`;\n\n\t\t<Button\n\t\t\tonClick={() => setChoice('der')}\n\t\t\tmode={choice === 'der' ? 'selected' : 'unselected'}\n\t\t>\n\t\t\tder\n\t\t</Button>\n\t\t<Button\n\t\t\tonClick={() => setChoice('die')}\n\t\t\tmode={choice === 'die' ? 'selected' : 'unselected'}\n\t\t>\n\t\t\tdie\n\t\t</Button>\n\t\t<Button\n\t\t\tonClick={() => setChoice('das')}\n\t\t\tmode={choice === 'das' ? 'selected' : 'unselected'}\n\t\t>\n\t\t\tdas\n\t\t</Button>\n\t\t<Button\n\t\t\tonClick={() => setChoice('hide')}\n\t\t\tmode={choice === 'hide' ? 'selected' : 'unselected'}\n\t\t>\n\t\t\thide\n\t\t</Button>\t\t\n\t\t---------------------------------------------\n\t- change noun divs to Noun components and make them react to the choice\n\t\t---------------------------------------\n\t\tconst Noun = styled.div`\n\t\t\tbackground-color: ${(props) =>\n\t\t\t\tprops.mode === 'selected' ? 'green' : '#444'};\n\t\t\tcolor: ${(props) =>\n\t\t\t\tprops.mode === 'selected' ? 'white' : '#777'};\n\t\t\tpadding: 5px;\n\t\t`;\n\n\t\t<Noun mode={choice === noun.article ? 'selected' : 'unselected'}>\n\t\t\t{choice === noun.article && <>{noun.article}</>}{' '}\n\t\t\t{noun.singular}\n\t\t</Noun>\n\t\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-01 05:05:21","systemWhoCreated":"systemUnknown"},{"id":558,"category":"Vue.js","title":"How to use the Vue.js CDN to extend any website's functionality","body":"- this howto shows how to add Vue.js functionality to a simple HTML page to:\n\t- fetch data via an API\n\t- display the data on the page\n- note we are using Vue.js 3.0\n- full code is here: [edwardtanguay/howto-html-and-vuejs-cdn](https://github.com/edwardtanguay/howto-html-and-vuejs-cdn)\n- final site should work like this:#gif#finalsiteforvuejsapi\n- create directory e.g. `howto-html-and-vuejs-cdn`\n- **index.html**\n\t-------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>German Article Practice</title>\n\t</head>\n\t<body>\n\t<h1>German Article Practice</h1>\t\n\t</body>\n\t</html>\n\t-------------------------------------------\n- open in live server:##showitliveserverhtml\n- add link to Vue.js CDN in HEAD\n\t-----------------------------------------\n\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t-----------------------------------------\n- set up Vue.js on page and display data\n\t-----------------------------------------\n\t<div id=\"app\">\n\t\t<div>Message: {{message}}</div>\n\t</div>\n\n\t<script>\n\t\tconst app = Vue.createApp({\n\t\t\tdata() {\n\t\t\t\treturn {\n\t\t\t\t\tmessage: 'this is a test'\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tapp.mount('#app');\n\t</script>\n\t-----------------------------------------\n- add a button click to change the text\n\t----------------------------------------\n\t<button @click=\"changeMessage()\">Change message</button>\n\t----------------------------------------\n- load data from API and display on screen\n\t- create an initialize function that gets executed on page load:\n\t\t----------------------------------------\n\t\tconst vm = app.mount('#app');\n\t\tvm.initialize();\t\n\n\t\tinitialize() {\n\t\t\tthis.message = 'changed on page load';\n\t\t}\n\t\t----------------------------------------\n\t- create dummy state variable: `nouns`\n\t\t----------------------------------------\n\t\tnouns: []\t\t\n\n\t\tthis.nouns = ['aaa','bbb','ccc'];\n\n\t\t<ul>\n\t\t\t<li v-for=\"noun in nouns\">\n\t\t\t\t{{noun}}\n\t\t\t</li>\n\t\t</ul>\n\t\t----------------------------------------\n\t- note how easily you can dynamically change the data on the page, in `changeMessage()`:\n\t\t--------------------------------\n\t\tthis.nouns.push('nnn');\t\t\n\t\t--------------------------------\n\t- load data from API\n\t\t------------------------------------------\n\t\t(async () => {\n\t\t\tconst response = await fetch('https://edwardtanguay.netlify.app/share/germanNouns.json');\n\t\t\tthis.nouns = await response.json();\n\t\t})();\n\n\t\t{{noun.article}} {{noun.singular}}\n\t\t------------------------------------------\n\t- randomize:\n\t\t--------------------------------------------\n\t\trandomize(array) {\n\t\t\tlet currentIndex = array.length,\n\t\t\t\trandomIndex;\n\t\t\twhile (currentIndex != 0) {\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex--;\n\t\t\t\t[array[currentIndex], array[randomIndex]] = [\n\t\t\t\t\tarray[randomIndex],\n\t\t\t\t\tarray[currentIndex],\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\tthis.nouns = this.randomize(await response.json());\n\t\t--------------------------------------------\n\t- style\n\t\t- change ul/li to divs\n\t\t- add styles to head\n\t\t\t----------------------------------------\n\t\t\t<style>\n\t\t\t\t.nouns {\n\t\t\t\t\tdisplay: grid;\n\t\t\t\t\tgrid-template-columns: repeat(5, 1fr);\n\t\t\t\t\tgrid-template-rows: repeat(5, 1fr);\n\t\t\t\t\tgrid-column-gap: 2px;\n\t\t\t\t\tgrid-row-gap: 2px;\n\t\t\t\t}\n\t\t\t\t.noun {\n\t\t\t\t\tbackground-color: #eee;\n\t\t\t\t\tcolor: #333;\n\t\t\t\t\tpadding: 5px;\n\t\t\t\t\tfont-size: .8rem;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t}\n\t\t\t</style>\t\t\n\t\t\t----------------------------------------\n\t- site should now look like this:##germanartshoul\n- add interactivity\n\t- add buttons\n\t\t-------------------------------------\n\t\t.buttons {\n\t\t\tmargin-bottom: 10px;\n\t\t}\n\t\tbutton {\n\t\t\tmargin-right: 5px;\n\t\t}\t\t\n\n\t\t<div class=\"buttons\">\n\t\t\t<button>der</button>\n\t\t\t<button>die</button>\n\t\t\t<button>das</button>\n\t\t\t<button>hide</button>\n\t\t</div>\n\t\t-------------------------------------\n\t- create state variable `choice` and show change on button click\n\t\t----------------------------------------\n\t\tchoice: 'hide'\n\n\t\t:class=\"{selected: choice === 'der'}\" \n\t\t----------------------------------------\n\t- your buttons should now work like this:#gif#tehfourbuttonsj\n\t- make nouns change based on choice\n\t\t---------------------------------------\n\t\t<span v-if=\"noun.article === choice\">{{noun.article}}</span>\n\n\t\t<div class=\"noun\" :class=\"{selected: noun.article === choice}\" v-for=\"noun in nouns\">\n\n\t\tdiv.noun.selected {\n\t\t\tbackground: green;\n\t\t\tcolor: white;\n\t\t\tfont-weight: bold;\n\t\t}\t\t\n\t\t---------------------------------------\n- fix styles\n\t----------------------------------\n\tbody {\n\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\tpadding: 20px;\n\t}\t\n\n\tbutton {\n\t\tmargin-right: 5px;\n\t\tborder: 1px solid #aaa;\n\t\tborder-radius: 5px;\n\t\tpadding: 2px 6px;\n\t}\t\n\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-01 06:12:31","systemWhoCreated":"systemUnknown"},{"id":559,"category":"Jest","title":"React testing overview and unit testing with Jest in a React application","body":"- As we move from monolith design (you control the environment in which your code runs) to distributed design (you don't control this environment), testing is becoming more import\n\t- the code you write is increasingly dependent on:\n\t\t- other code that you have written\n\t\t- other code that your team has written\n\t\t- third-party code that was written by people you don't know\n\t\t- characteristics of the \n\t\t\t- operating system environment \n\t\t\t- network environment\n\t\t\t- cloud environment\t\t\n\t- any changes in any of these code bases or environments can break your code\n\t- **therefore you need tests which make sure your code works as expected today and into the future**\n- Overview of testing React applications\n\t- 1. unit testing \n\t\t- e.g. test if all functions and classes in app libraries work as expected\n\t\t- tools\n\t\t\t- [Jest](https://jestjs.io/docs/tutorial-react)\n\t- 2. integration testing\n\t\t- e.g. test if a child component can update context state in a parent\n\t\t- tools\n\t\t\t- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro)\n\t\t\t- [Enzyme](https://enzymejs.github.io/enzyme)\n\t- 3. end-to-end testing \n\t\t- test the application from the point of view of the user, e.g. uses a mock browser, clicks buttons, fills in fields, tests for certain error messages and results\n\t\t- tools\n\t\t\t- [Cypress](https://www.cypress.io)\n- Career tip:\n\t- make yourself an expert in testing and be forever appreciated in development teams\n- using Jest unit testing in various environments\n\t- 1. **an older React site created with create-react-app**\n\t\t- technical issues in making sure Jest works\n\t\t\t- getting Jest to work with ES6 modules (import) instead of with CommonJS modules (require)\n\t\t\t- testing both JavaScript and TypeScript files\n\t\t- course web site\n\t\t\t- this site was created with create-react-app and so Jest is automatically installed: \n\t\t\t\t- note that for some reason (our upgrade to React 18?) I had to install jest-watch-typeahead##hadtoinstallwatchahead\n\t\t\t\t- in a site created with create-react-app, you simply have to create files which end with `.test.js` and which contain tests which test classes or functions in the similarly named file\n\t\t\t\t\t- note you can have one centralized test file e.g. `global.test.js` which tests all tests in application\n\t\t\t\t\t- but having a test file for each file which is imported tends to keep your tests more organized in a larger application\n\t\t\t\t\t\t- developers know if they create a new function or class, where they need to create the test for it (in the similarly-named test file)\n\t\t\t\t- to execute all `.test.js` files, type `npm test`\n\t\t\t- qtools is a directory with \"quick tools\", e.g. files that can be imported which contain useful functions\n\t\t\t\t- qstr = functions that manipulate strings\n\t\t\t\t- qarr = functions that manipulate arrays\n\t\t\t\t- qmat = functions that do mathematical calculations\n\t\t\t- examine current tests\n\t\t\t\t- note we currently have **one test suite** (one test file) and **two tests** (two Jest tests in that one file) in that test suite:##overviewtestsuites\n\t\t\t\t- improve tests\n\t\t\t\t\t- common task between sprints\n\t\t\t\t\t- add edge cases\n\t\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\t\texpect(qstr.capitalizeFirstLetter('this is a sentence: !#$%^&*()')).toBe('This is a sentence: !#$%^&*()');\n\t\t\t\t\t\texpect(qstr.capitalizeFirstLetter('1234567890')).toBe('1234567890');\n\t\t\t\t\t\texpect(qstr.capitalizeFirstLetter('überhaupt')).toBe('Überhaupt');\t\t\t\t\t\t\n\t\t\t\t\t\t-----------------------------------------------\n\t\t\t\t- scenario: develop changes function which fixes their local problem, but causes problems elsewhere\n\t\t\t\t\t- break the test by changing a function for a specific reason\n\t\t\t\t\t\t- Menu.jsx\n\t\t\t\t\t\t\t----------------------------------\n\t\t\t\t\t\t\timport * as qstr from '../../../../qtools/qstr';\n\n\t\t\t\t\t\t\tlet projectTitle = 'taking notes on %tech% books';\n\t\t\t\t\t\t\tprojectTitle = qstr.capitalizeFirstLetter(projectTitle);\t\n\n\t\t\t\t\t\t\t<h3>Project 001</h3>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<b>Title</b>: {projectTitle}\n\t\t\t\t\t\t\t</p>\t\t\t\t\t\n\n\t\t\t\t\t\t\tline = qstr.replaceAll(line, '%', '');\t\t\t\t\t\t\n\t\t\t\t\t\t\t----------------------------------\n\t\t\t\t\t- fix this problem by creating a few function called `removeSpecialMarkdown()` using TDD (test-driven development)\n\t\t\t\t\t\t- write the tests first:\n\t\t\t\t\t\t\t------------------------------------------\n\t\t\t\t\t\t\ttest('qstr.removeSpecialMarkdown() works', () => {\n\t\t\t\t\t\t\t\texpect(qstr.removeSpecialMarkdown('markdown')).toBe('markdown');\n\t\t\t\t\t\t\t\texpect(qstr.removeSpecialMarkdown('%markdown%')).toBe('markdown');\n\t\t\t\t\t\t\t\texpect(qstr.removeSpecialMarkdown('## - %markdown%')).toBe('- markdown');\n\t\t\t\t\t\t\t\texpect(qstr.removeSpecialMarkdown('%% - %markdown%')).toBe('- markdown');\n\t\t\t\t\t\t\t\texpect(qstr.removeSpecialMarkdown('%% - %öffnen%')).toBe('- öffnen');\n\t\t\t\t\t\t\t});\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t------------------------------------------\n\t\t\t\t\t\t- develop the function until all tests pass, that's when you know you are finished\n\t\t\t\t\t\t\t-------------------------------------------\n\t\t\t\t\t\t\texport const removeSpecialMarkdown = (line: string) => {\n\t\t\t\t\t\t\t\tline = qstr.replaceAll(line, '%', '');\n\t\t\t\t\t\t\t\tline = qstr.replaceAll(line, '#', '');\n\t\t\t\t\t\t\t\tline = line.trim();\n\t\t\t\t\t\t\t\treturn line;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-------------------------------------------\n\t\t\t\t- if you would like to practice writing Jest tests, feel free to do so in the course site, there's lots of work to do\n\t\t\t\t\t- e.g. replaceAll\n\t\t\t\t\t\t----------------------------------------------------------------\n\t\t\t\t\t\ttest('qstr.replaceAll() works', () => {\n\t\t\t\t\t\t\texpect(qstr.replaceAll('test','x', '')).toBe('test');\n\t\t\t\t\t\t\texpect(qstr.replaceAll('test')).toBe('test');\n\t\t\t\t\t\t\texpect(qstr.replaceAll('test', 'est', 'xx')).toBe('txx');\n\t\t\t\t\t\t\texpect(qstr.replaceAll('ooxooxoo', 'x', '')).toBe('oooooo');\n\t\t\t\t\t\t});\t\t\t\t\t\t\n\t\t\t\t\t\t----------------------------------------------------------------\n\t\t\t\t- for an overview of all matchers besides (`toBe`) see: [Edward's Notes on Jest](https://onespace.netlify.app/techItems?id=19)\n\t- 2. **a new create-react-app site**\n\t\t- create new site with create-react-app\n\t\t- make a library file e.g. `tools.js` which exports functions\n\t\t- make a file in the same directory called `tools.test.js` to test the files\n\t\t- `npm run test`\n\t- 3. **a new React site created with Vite**\n\t\t- see this guide: [Setup Jest with Vite](https://hung.dev/jest-vite)\n\t\t\t- *\"I had a chance to use Vite in my daily work and I’m very happy with that, my Developer Experience (DX) and productivity have increased dramatically, it’s blazing fast. However, speed is not the only factor to make a high quality web application. We also need tests. Even though I’m happy with Vite, it took me a while to successfully integrate Jest with Vite.\"*","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-02 05:49:39","systemWhoCreated":"systemUnknown"},{"id":560,"category":"React","title":"How to create a higher-order component to load data for other components","body":"- this howto will show you how to create two pages in a React site which have their data loaded for them by a higher-order component\n- full code is here: [edwardtanguay/howto-higher-order-components-react](https://github.com/edwardtanguay/howto-higher-order-components-react)\n- **set up base site** that uses React Router and Sass:\n\t- download the code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t- create directory e.g. `howto-create-custom-react-hooks` and paste in downloaded code files\n\t- open terminal in that directory \n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n\t- open site at http://localhost:3000 and you should see a site like this:#gif#thebasesiteforstart\n- change site so that instead of \"Books\" it has two pages:\n\t- Tech Books\n\t- General Books\n- **/src/hocs/withBookLoading.jsx**\n\t--------------------------------------------\n\timport { useEffect, useState } from 'react';\n\timport axios from 'axios';\n\n\tconst techBooksUrl = 'https://edwardtanguay.netlify.app/share/techBooks.json';\n\tconst generalBooksUrl = 'https://edwardtanguay.netlify.app/share/books.json';\n\n\texport const withBookLoading = (Component) => {\n\t\treturn (props) => {\n\t\t\tconst [techBooks, setTechBooks] = useState([]);\n\t\t\tconst [generalBooks, setGeneralBooks] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetTechBooks((await axios.get(techBooksUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetGeneralBooks((await axios.get(generalBooksUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<Component\n\t\t\t\t\t{...props}\n\t\t\t\t\ttechBooks={techBooks}\n\t\t\t\t\tgeneralBooks={generalBooks}\n\t\t\t\t/>\n\t\t\t);\n\t\t};\n\t};\n\t--------------------------------------------\n- **PageTechBooks.jsx**\n\t----------------------------------------\n\texport const PageTechBooks = ({techBooks}) => {\n\t\treturn (\n\t\t\t<div className=\"page_techBooks\">\n\t\t\t\t<h2>Tech Books</h2>\n\t\t\t\t<p>There are {techBooks.length} tech books.</p>\n\t\t\t</div>\n\t\t)\n\t}\t\n\t----------------------------------------\n- changes in **App.jsx**\n\t-----------------------------------------\n\timport { withBookLoading } from './hocs/withBookLoading';\n\n\tconst PageTechBooksWithBookLoading = withBookLoading(PageTechBooks);\n\tconst PageGeneralBooksWithBookLoading = withBookLoading(PageGeneralBooks);\n\n\t<Route path=\"/tech-books\" element={<PageTechBooksWithBookLoading />} />\n\t<Route path=\"/general-books\" element={<PageGeneralBooksWithBookLoading />} />\n\t-----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-02 07:30:53","systemWhoCreated":"systemUnknown"},{"id":561,"category":"Next.js","title":"Set up a Next.js site with file routing and SSG/CSR/SSR data fetching","body":"- this howto will take you through the steps of creating a Next.js site using `create-next-app`, create multiple pages each which load according to a different rending strategy\n\t- static-site generation (SSG)\n\t\t- with getStaticProps() and a \"revalidate: 600\" property to regenerate the static files every 10 minutes\n\t\t- local JSON file as in create-react-app and Vite site \n\t- client-side rendering (CSR)\n\t\t- with useState/useEffect as in create-react-app and Vite site\n\t- server-side rendering (SSR)\n\t\t- with getServerSideProps() which fetches data on the server\n\t- the pages themselves are server-side generated so that the meta information including title, description and icon are sent to browser and thus work well with social-media preview links, etc.\n- code:\n\t- full code of this project is here: [edwardtanguay/nextapp006](https://github.com/edwardtanguay/nextapp006)\n\t- pre-version of this site is here:\n\t\t- [edwardtanguay/nextapp005](https://github.com/edwardtanguay/nextapp005)\n- the finished site will look something like this:#gif#nextjsokandsite\n- set up site\n\t- `npx create-next-app nextapp006`\n\t- `cd nextapp006`\n\t- `code .`\n\t- note: node_modules and git already set up\n\t- `yarn dev`\n\t- view in browser: Next.js start site\n- look around\n\t- what's different from create-react-app and Vite?\n\t- directories with obligatory names\n\t\t- pages\n\t\t- public\n- customize site\n\t- change `/pages/index.js` and notice hot-loading\n\t\t- `<title>Info Site</title>`\n\t- notice styles\n\t\t- `/styles/globals.css` for pure styles (classic CSS)\n\t\t- `Home.module.css` for targeted styles (CSS modules)\n\t- change Head information\n\t\t- add new icon\n\t\t\t- https://github.com/edwardtanguay/nextapp005/tree/main/public\n\t- index.js\n\t\t------------------------------------------\n\t\timport Head from 'next/head';\n\t\timport styles from '../styles/Home.module.css';\n\n\t\texport default function Home() {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<Head>\n\t\t\t\t\t\t<title>Tech Resources</title>\n\t\t\t\t\t\t<meta\n\t\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\t\tcontent=\"Tech Resource Site\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<link rel=\"icon\" href=\"/globe.ico\" />\n\t\t\t\t\t</Head>\n\t\t\t\t\t<h1>Tech Resource Site</h1>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t<p className={styles.highlight}>More changes coming soon...</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\t\t\n\t\t------------------------------------------\n\t- Home.module.css\n\t\t-----------------------------------------\n\t\tp.highlight {\n\t\t\tcolor: yellow;\n\t\t}\n\t\t-----------------------------------------\n\t- globals.css\n\t\t------------------------------------------\n\t\tbody {\n\t\t\tpadding: 0 1rem;\n\t\t\tmargin: 0;\n\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\tbackground-color: #333;\n\t\t\tcolor: rgb(226, 226, 164);\n\t\t}\n\n\t\tp {\n\t\t\tcolor: white;\n\t\t\tfont-size: 1.3rem;\n\t\t}\t\t\n\t\t------------------------------------------\n- deploy site\n\t- push to GitHub repository, e.g. https://github.com/edwardtanguay/nextapp006\n\t- set up site at [Vercel](https://vercel.com)\n\t\t- login\n\t\t- New Project\n\t\t- Import\n\t\t- Deploy\n\t\t- finished in 30 seconds\n\t- https://nextapp006.vercel.app\n- bookmarking and social media linking \n\t- set bookmark\n\t- post on Slack\n\t- in order to get immediate updates, include a random code in the URL: ##inorderupdates22\n- implement page routing\n\t- create pages as components as in Vite\n\t\t- /pages/code.js\n\t\t\t----------------------------------------\n\t\t\texport const Code = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Code Page</h2>\n\t\t\t\t\t\t<p>These are the code examples.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t----------------------------------------\n\t- go to: http://localhost:3000/code\n\t- note error, since it has to be a default export##mustbedefaultok\n\t- change to default:\n\t\t------------------------------\n\t\texport default Code;\n\t\t------------------------------\n\t- make Nav component\n\t\t--------------------------------\n\t\texport const Nav = () => {\n\t\t\treturn (\n\t\t\t\t<nav>\n\t\t\t\t\t<span>Welcome</span>\n\t\t\t\t\t<span className=\"separator\">|</span>\n\t\t\t\t\t<span>Code</span>\n\t\t\t\t</nav>\n\t\t\t);\n\t\t};\t\n\t\t--------------------------------\n\t- header\n\t\t- SiteHeader.js\n\t\t\t-----------------------------------\n\t\t\texport const SiteHeader = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h1>Tech Resource Site</h1>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------\n\t- add SiteHeader and Nav to both pages\n\t- page routing\n\t\t- implement nav links with Link\n\t\t\t------------------------------------------\n\t\t\timport Link from 'next/link';\n\n\t\t\texport const Nav = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<Link href=\"/\">Welcome</Link>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"separator\">|</span>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<Link href=\"/code\">Code</Link>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</nav>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\n\t\t- style Nav \n\t\t\t- `npm i sass`\n\t\t\t- globals.scss\n\t\t\t\t---------------------------------------------\n\t\t\t\t$maxBoxWidth: 600px;\n\n\t\t\t\tnav {\n\t\t\t\t  display: flex;\n\t\t\t\t  background-color: #222;\n\t\t\t\t  padding: 5px;\n\t\t\t\t  max-width: $maxBoxWidth;\n\t\t\t\t  color: #ccc;\n\t\t\t\t  font-size: 1.4rem;\n\n\t\t\t\t  .separator {\n\t\t\t\t\tcolor: #777;\n\t\t\t\t\tmargin: 0 5px;\n\t\t\t\t  }\n\n\t\t\t\t  a {\n\t\t\t\t\tcolor: white;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t  }\n\n\t\t\t\t  a.active {\n\t\t\t\t\tcolor: yellow;\n\t\t\t\t  }\n\n\t\t\t\t}\t\t\t\n\t\t\t\t---------------------------------------------\t\t\t\n\t\t- enable active link styling\n\t\t\t- /components/NavLink.js\n\t\t\t\t-------------------------------------\n\t\t\t\timport { useRouter } from 'next/router';\n\t\t\t\timport Link from 'next/link';\n\t\t\t\timport PropTypes from 'prop-types';\n\n\t\t\t\texport const NavLink = ({ href, exact, children, ...props }) => {\n\t\t\t\t\tconst { pathname } = useRouter();\n\t\t\t\t\tconsole.log(pathname);\n\t\t\t\t\tconsole.log(href);\n\t\t\t\t\tconst isActive = exact ? pathname === href : pathname.startsWith(href);\n\n\t\t\t\t\tif (isActive) {\n\t\t\t\t\t\tprops.className += ' active';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Link href={href}>\n\t\t\t\t\t\t\t<a {...props}>\n\t\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tNavLink.propTypes = {\n\t\t\t\t\thref: PropTypes.string.isRequired,\n\t\t\t\t\texact: PropTypes.bool\n\t\t\t\t};\n\n\t\t\t\tNavLink.defaultProps = {\n\t\t\t\t\texact: false\n\t\t\t\t};\t\t\t\n\t\t\t\t-------------------------------------\n\t\t\t- change Link to NavLink\n\t\t\t\t- add \"exact\" to Welcome\n\t\t\t- show SEO advantages of Next.js\n\t\t\t\t- find a [custom icon](https://iconarchive.com/tag/code-.ico)\n\t\t\t\t\t- or use [these](https://github.com/edwardtanguay/nextapp005/tree/main/public)\n\t\t\t\t- code.js\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t\t<Head>\n\t\t\t\t\t\t<title>Code Examples</title>\n\t\t\t\t\t\t<meta\n\t\t\t\t\t\t\tname=\"description\"\n\t\t\t\t\t\t\tcontent=\"Lots of code examples to help you in your development.\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<link rel=\"icon\" href=\"/code.ico\" />\n\t\t\t\t\t</Head>\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t- publish at Vercel \n\t\t\t\t- page-based link previews on Slack##thetwolinksicons\n\t\t- make head dynamic\n\t\t\t- DynamicHeader.js\n\t\t\t\t-----------------------------------------------\n\t\t\t\timport Head from 'next/head';\n\n\t\t\t\texport const DynamicHead = ({\n\t\t\t\t\ttitle = \"Tech Resource Site\",\n\t\t\t\t\tdescription = 'Tech tools to keep you up on the latest tech',\n\t\t\t\t\ticon = 'globe.ico'\n\t\t\t\t}) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Head>\n\t\t\t\t\t\t\t<title>{title}</title>\n\t\t\t\t\t\t\t<meta name=\"description\" content={description} />\n\t\t\t\t\t\t\t<link rel=\"icon\" href={`/${icon}`} />\n\t\t\t\t\t\t</Head>\n\t\t\t\t\t);\n\t\t\t\t};\t\t\t\n\t\t\t\t-----------------------------------------------\t\n\t\t\t- add to both pages\n\t\t- pages with multiple route segments, e.g. `/about/background`\n\t\t\t- About\n\t\t\t\t- Background\n\t\t\t\t- Contents\n\t\t\t\t- Coming Soon\t\t\t\n\t\t\t- put pages in directory\n\t\t- page with params\n\t\t\t- create techItems.json: [techItems](https://edwardtanguay.netlify.app/share/techitems.json)\n\t\t\t- create tech-items page\n\t\t\t\t- tech-items directory\n\t\t\t\t\t- index.js\n\t\t\t- click on a link and see generic 404\n\t\t\t\t- create custom 404 page\n\t\t\t\t\t- create `404.js` page in /pages\n\t\t\t\t\t\t----------------------------------------\n\t\t\t\t\t\timport { NavLink } from '../components/NavLink';\n\t\t\t\t\t\timport styles from '../styles/Page404.module.css';\n\n\t\t\t\t\t\tconst FourOhFour = () => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<div className={styles.error}>404 Error</div>\n\t\t\t\t\t\t\t\t\t<p>Sorry, this page doesn't exist. Go back to <NavLink href=\"/\">welcome page</NavLink>.</p>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\texport default FourOhFour;\n\n\t\t\t\t\t\tdiv.error {\n\t\t\t\t\t\t\tcolor: #444;\n\t\t\t\t\t\t\tfont-size: 8rem;\n\t\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t----------------------------------------\n\t\t\t- [id].js page\n\t\t\t\t------------------------------------------\n\t\t\t\timport { useEffect, useState } from 'react';\n\t\t\t\timport { SiteHeader } from '../../components/SiteHeader';\n\t\t\t\timport { Nav } from '../../components/Nav';\n\t\t\t\timport { useRouter } from 'next/router';\n\t\t\t\timport * as qstr from '../../qtools/qstr';\n\t\t\t\timport axios from 'axios';\n\t\t\t\timport styles from '../../styles/TechItem.module.css';\n\t\t\t\timport { DynamicHead } from '../../components/DynamicHead';\n\n\t\t\t\tconst url = 'https://edwardtanguay.netlify.app/share/techitems.json';\n\n\t\t\t\tconst TechItems = () => {\n\t\t\t\t\tconst [techItem, setTechItem] = useState({});\n\t\t\t\t\tconst router = useRouter();\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\tif (!router.isReady) return;\n\t\t\t\t\t\tconst id = router.query['id'];\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tconst _techItems = (await axios.get(url)).data;\n\t\t\t\t\t\t\tconst _techItem = _techItems.find((m) => String(m.id) === id);\n\t\t\t\t\t\t\tif (_techItem) {\n\t\t\t\t\t\t\t\t_techItem.description = qstr.getQuickDefinitionFromExtras(\n\t\t\t\t\t\t\t\t\t_techItem.extras\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tsetTechItem(_techItem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})();\n\t\t\t\t\t}, [router.isReady]);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<DynamicHead />\n\t\t\t\t\t\t\t<SiteHeader />\n\t\t\t\t\t\t\t<Nav />\n\t\t\t\t\t\t\t<code>\n\t\t\t\t\t\t\t\tThe data on this page is loaded via useEffect/axios (much as\n\t\t\t\t\t\t\t\twith create-react-app and Vite) and so can be considered{' '}\n\t\t\t\t\t\t\t\t<a href=\"https://nextjs.org/docs/basic-features/data-fetching/overview\">\n\t\t\t\t\t\t\t\t\tclient-side rendering (CSR)\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t.\n\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t{Object.entries(techItem).length > 0 && (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<h2>{techItem.title}</h2>\n\t\t\t\t\t\t\t\t\t<p className={styles.description}>{techItem.description}</p>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\thref={`https://onespace.netlify.app/techItems?id=${techItem.id}`}\n\t\t\t\t\t\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tget more info\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\texport default TechItems;\n\t\t\t\t------------------------------------------\n- images\n\t- there is an Image component but difficult to resize and make dynamic\n\t- best to just put in `/public/images` and access via the `<img src=\"images/imageName.jpg\"/>` element\n\t- **index.js**\n\t\t---------------------------------------\n\t\t<img src=\"images/screenWithCode.jpg\" alt=\"code on screen\"/>\n\t\t---------------------------------------\n- make examples of each kind of data rendering strategies\n\t- there are three rendering strategies\n\t\t- SSG = Static-Site Generation\n\t\t\t- /tech-items/index.js\n\t\t- CSR = Client-Side Rendering\n\t\t\t- /tech-items/[id].js\n\t\t- SSR = Server-Side Rendering\n\t- server-side rendering using getServerSideProps()\n\t\t- pages/members/index.js\n\t\t\t---------------------------------\n\t\t\timport { SiteHeader } from '../../components/SiteHeader';\n\t\t\timport { Nav } from '../../components/Nav';\n\t\t\timport { DynamicHead } from '../../components/DynamicHead';\n\t\t\timport axios from 'axios';\n\t\t\timport router from 'next/router';\n\n\t\t\tconst url = 'https://edwardtanguay.netlify.app/share/employees.json';\n\n\t\t\texport async function getServerSideProps() {\n\t\t\t\tconst members = (await axios.get(url)).data;\n\t\t\t\treturn {\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tmembers,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst handleClickMember = (member) => {\n\t\t\t\trouter.push(`/members/${member.employeeID}`);\n\t\t\t}\n\n\t\t\texport default function Members({ members }) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"page_members\">\n\t\t\t\t\t\t<DynamicHead title=\"Members\" description=\"People who make the tech resource site run.\" icon=\"user.ico\" />\n\t\t\t\t\t\t<SiteHeader />\n\t\t\t\t\t\t<Nav />\n\t\t\t\t\t\t<code>\n\t\t\t\t\t\t\tThe data on this page is loaded via getServerSideProps() and so\n\t\t\t\t\t\t\tis{' '}\n\t\t\t\t\t\t\t<a href=\"https://nextjs.org/docs/basic-features/data-fetching/overview\">\n\t\t\t\t\t\t\t\tserver-side rendering (SSR)\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t.\n\t\t\t\t\t\t</code>\n\t\t\t\t\t\t<p>There are {members.length} members.</p>\n\t\t\t\t\t\t<div className=\"members\">\n\t\t\t\t\t\t\t{members.map((member, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={index} className=\"member\" onClick={() => handleClickMember(member)}>\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={`https://edwardtanguay.netlify.app/share/images/employees/employee_${member.employeeID}.jpg`}\n\t\t\t\t\t\t\t\t\t\t\talt={`member: ${member.firstName} ${member.lastName}`}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\t\t\t\t\t\t\t{member.firstName} {member.lastName}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t\t---------------------------------\n\t\t- add styles, note in global with Sass: page_members.scss\n\t\t\t------------------------------------------\n\t\t\t.page_member {\n\t\t\t\t\t.singleMember {\n\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\tpadding: 20px;\n\t\t\t\t\t\tmargin: 20px 0 10px 0;\n\t\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\t\tborder: 1px solid #555;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\twidth: 570px;\n\n\t\t\t\t\t\timg {\n\t\t\t\t\t\t\twidth: 190px;\n\t\t\t\t\t\t\tobject-fit: cover;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.info {\n\t\t\t\t\t\t\tmargin-left: 10px;\n\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t\t.notes {\n\t\t\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t}\n\t\t\t.page_members {\n\t\t\t\t.members {\n\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\twidth: 610px;\n\n\t\t\t\t\t.member {\n\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\tpadding: 10px;\n\t\t\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\t\tborder: 1px solid #555;\n\t\t\t\t\t\tdisplay: flex;\n\n\t\t\t\t\t\timg {\n\t\t\t\t\t\t\twidth: 40px;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.info {\n\t\t\t\t\t\t\tmargin-left: 10px;\n\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t.member:hover {\n\t\t\t\t\t\tbackground-color: #292929;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t------------------------------------------\n\t- static-site generation using getStaticProps(), **[id].js**\n\t\t---------------------------------------------\n\t\timport Head from 'next/head';\n\t\timport { SiteHeader } from '../../components/SiteHeader';\n\t\timport { Nav } from '../../components/Nav';\n\t\timport { useRouter } from 'next/router';\n\t\timport axios from 'axios';\n\t\timport { DynamicHead } from '../../components/DynamicHead';\n\n\t\tconst url = 'https://edwardtanguay.netlify.app/share/employees.json';\n\n\t\texport async function getStaticProps() {\n\t\t\tconst members = (await axios.get(url)).data;\n\t\t\treturn {\n\t\t\t\tprops: {\n\t\t\t\t\tmembers,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\texport async function getStaticPaths() {\n\t\t\tconst members = (await axios.get(url)).data;\n\t\t\tconst paths = members.map((m) => ({\n\t\t\t\tparams: { id: String(m.employeeID) },\n\t\t\t}));\n\t\t\treturn {\n\t\t\t\tpaths,\n\t\t\t\tfallback: true,\n\t\t\t};\n\t\t}\n\n\t\tconst Members = ({ members }) => {\n\t\t\tconst router = useRouter();\n\t\t\tconst id = router.query['id'];\n\t\t\tlet member = {};\n\t\t\tlet paths = [];\n\t\t\tif (members !== undefined) {\n\t\t\t\tmember = members.find((m) => m.employeeID === Number(id));\n\t\t\t\tpaths = members.map((m) => ({ id: String(m.employeeID) }));\n\t\t\t}\n\t\t\tconsole.log('paths', paths);\n\t\t\treturn (\n\t\t\t\t<div className=\"page_member\">\n\t\t\t\t\t<DynamicHead />\n\t\t\t\t\t<SiteHeader />\n\t\t\t\t\t<Nav />\n\t\t\t\t\t<code>\n\t\t\t\t\t\tThe data on this page is loaded via getStaticProps() and so is{' '}\n\t\t\t\t\t\t<a href=\"https://nextjs.org/docs/basic-features/data-fetching/overview\">\n\t\t\t\t\t\t\tstatic-site generation (SSG)\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t.\n\t\t\t\t\t</code>\n\t\t\t\t\t<div className=\"singleMember\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`https://edwardtanguay.netlify.app/share/images/employees/employee_${member.employeeID}.jpg`}\n\t\t\t\t\t\t\talt={`member: ${member.firstName} ${member.lastName}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\t\t\t{member.firstName} {member.lastName}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"notes\">\n\t\t\t\t\t\t\t\t{member.notes}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\n\t\texport default Members;\n\t\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-07 08:46:14","systemWhoCreated":"systemUnknown"},{"id":562,"category":"Redux","title":"Create a React shop app that uses Redux to manage application data","body":"- this howto shows you the basics of getting Redux (Redux Toolkit) running in a React site (created with Vite)\n- there are two pages:\n\t- shop\n\t\t- user can purchase books which are added to the shopping cart\n\t- shopping cart\n\t\t- user can increase the total number of each item\n\t\t- user can delete items\n- each page has access to the Redux store\n- code\n\t- full code is of this project is here: [edwardtanguay/howto-redux-app-shopping-app](https://github.com/edwardtanguay/howto-redux-app-shopping-app)\n\t\t- **also see this version which fills the books array in redux with data from an API call, and note that it is done not in the Redux store (as you do in e.g. useContext) but in the main page App.jsx:** [edwardtanguay/live-coding-d032-redux](https://github.com/edwardtanguay/live-coding-d032-redux)\n\t- other pre-versions of this project that might be helpful are here:\n\t\t- a simplified example of a one-page React site with counter implemented in Redux Toolkit is here: [edwardtanguay/howto-react-redux-site](https://github.com/edwardtanguay/howto-react-redux-site)\n\t\t- a working prototype for this shop site is here: [edwardtanguay/howto-react-redux-prototype-shopping-app](https://github.com/edwardtanguay/howto-react-redux-prototype-shopping-app)\n- the finished app should work like this:#gif#thefinishedappforreduxbooks\n- **set up base site** that uses React Router and Sass:\n\t- download the code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t- create directory e.g. `howto-create-custom-react-hooks` and paste in downloaded code files\n\t- open terminal in that directory \n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t- `npm run dev`\n\t- open site at http://localhost:3000 and you should see a site like this:#gif#thebasesiteforstart\n- convert to \"Shopping App\" and pages to:\n\t- Welcome\n\t- Books\n\t- Cart\n- set up Redux boiler plate code as simple number counter:\n\t- recommended folder structure for Redux sites: https://redux.js.org/faq/code-structure\n\t\t- **/src/app**\n\t\t\t- (all App files)\n\t\t\t- (will contain Redux store)\n\t\t- **/src/common**\n\t\t\t- (all non-Redux \"common\" files of the app)\n\t\t\t\t- (components, pages)\n\t\t- **/features**\n\t\t\t- (will contain the Redux state slices)\n\t\t\t\t- *A \"slice\" is a collection of Redux reducer logic and actions for a single feature in your app, typically defined together in a single file.* - \n\t- install Redux npm packages\n\t\t- `npm i @reduxjs/toolkit react-redux`\n\t- Redux boiler plate\n\t\t- **add Redux store**\n\t\t\t- /src/app/store.js\n\t\t\t\t-----------------------------------\n\t\t\t\timport { configureStore } from '@reduxjs/toolkit';\n\t\t\t\t// TODO: import slice\n\n\t\t\t\texport const store = configureStore({\n\t\t\t\t\t// TODO: add slice\n\t\t\t\t});\t\t\t\n\t\t\t\t-----------------------------------\n\t\t- **wrap app in Redux provider**\n\t\t\t- /src/main.jsx\n\t\t\t\t---------------------------------------\n\t\t\t\timport { store } from './app/store';\n\t\t\t\timport { Provider } from 'react-redux';\t\t\t\n\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\t\t\n\t\t\t\t---------------------------------------\n\t\t- **add slice of state called \"cart\"**\n\t\t\t- /src/features/cart/cartSlice.js\n\t\t\t\t----------------------------------\n\t\t\t\timport { createSlice } from '@reduxjs/toolkit';\n\n\t\t\t\tconst initialState = {\n\t\t\t\t\tcounter: 0\n\t\t\t\t};\n\n\t\t\t\texport const cartSlice = createSlice({\n\t\t\t\t\tname: 'cart',\n\t\t\t\t\tinitialState,\n\t\t\t\t\treducers: {\n\t\t\t\t\t\tadd: (state) => {\n\t\t\t\t\t\t\tstate.counter += 1;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsubtract: (state) => {\n\t\t\t\t\t\t\tstate.counter -= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\texport const { add, subtract } = cartSlice.actions;\n\t\t\t\texport default cartSlice.reducer;\n\t\t\t\t----------------------------------\n\t\t- now that we have our slice built, add it to the store\n\t\t\t- /src/app/store.js\n\t\t\t\t---------------------------------------------\n\t\t\t\timport cartReducer from '../features/cart/cartSlice';\n\n\t\t\t\treducer: {\n\t\t\t\t\tcart: cartReducer\n\t\t\t\t}\n\t\t\t\t---------------------------------------------\n\t\t- **use Redux state on pages**\n\t\t\t- /src/pages/PageBooks.jsx\n\t\t\t\t-----------------------------------------------\n\t\t\t\timport { useDispatch } from 'react-redux';\n\t\t\t\timport { add, subtract} from '../features/cart/cartSlice';\n\n\t\t\t\texport const PageBooks = () => {\n\t\t\t\t\tconst dispatch = useDispatch();\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"page_books\">\n\t\t\t\t\t\t\t<h2>Books</h2>\n\t\t\t\t\t\t\t<button onClick={() => dispatch(add())}>Add book</button>\n\t\t\t\t\t\t\t<button onClick={() => dispatch(subtract())}>Subtract book</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------------\n\t\t\t- /src/pages/PageCart.jsx\n\t\t\t\t--------------------------------------------\n\t\t\t\timport { useSelector } from 'react-redux';\n\n\t\t\t\texport const PageCart = () => {\n\t\t\t\t\tconst { counter } = useSelector((state) => state.cart);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"page_cart\">\n\t\t\t\t\t\t\t<h2>Shopping Cart</h2>\n\t\t\t\t\t\t\t<p>Number of books: {counter}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t- customize shop app\n\t\t- in cart, convert counter to items\n\t\t\t- cartSlice.js\n\t\t\t\t------------------------------------\n\t\t\t\titems: [],\n\n\t\t\t\tstate.items.push('book')\n\n\t\t\t\tstate.items.pop();\n\t\t\t\t------------------------------------\n\t\t\t- PageCart.jsx\n\t\t\t\t------------------------------------\n\t\t\t\tconst { items } = useSelector((state) => state.cart);\n\n\t\t\t\t<p>Number of books: {items.length}</p>\n\t\t\t\t<ul>\n\t\t\t\t\t{items.map((item, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={index}>{item}</li>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t\t------------------------------------\n\t\t- add specific books to add\n\t\t\t- cartSlice.js: rename actions to addItem/removeItem\n\t\t\t- PageBooks.jsx\n\t\t\t\t-------------------------------------------\n\t\t\t\t<button onClick={() => dispatch({ type:'cart/addItem', payload: {title: 'Node.js Cookbook', price: 23.99}})}>Node.js Cookbook</button>\n\t\t\t\t<button onClick={() => dispatch({ type:'cart/addItem', payload: {title: 'Building Microservices', price: 29.99}})}>Building Microservices</button>\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t- add customerName\n\t\t\t- PageBooks.jsx\n\t\t\t\t---------------------------------------\n\t\t\t\tconst { customerName } = useSelector((state) => state.cart);\n\n\t\t\t\t{customerName !== '' ? (\n\t\t\t\t\t<h2>Books for {customerName}</h2>\n\t\t\t\t) : (\n\t\t\t\t\t<h2>Books</h2>\n\t\t\t\t)}\n\t\t\t\t---------------------------------------\n\t\t\t- PageWelcome.jsx\n\t\t\t\t-------------------------------------------------\n\t\t\t\timport { useDispatch, useSelector } from 'react-redux';\n\n\t\t\t\tconst dispatch = useDispatch();\n\t\t\t\tconst { customerName } = useSelector((state) => state.cart);\n\n\t\t\t\t<p>Your name: <input\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'cart/changeCustomerName',\n\t\t\t\t\t\t\tpayload: e.target.value \n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tvalue={customerName} /></p>\t\t\t\t\n\t\t\t\t-------------------------------------------------\n\t\t- add coupon\n\t\t\t- cartSlice.js\n\t\t\t\t------------------------------------------------\n\t\t\t\taction.payload.discountedPrice = action.payload.price * (state.coupon ? .9 : 1);\n\n\t\t\t\taddCoupon: (state) => {\n\t\t\t\t\tstate.coupon = true;\n\t\t\t\t\tstate.items.forEach(m=>m.discountedPrice = m.price * .9)\n\t\t\t\t}\n\n\t\t\t\texport const { addItem, removeItem, addCoupon } = cartSlice.actions;\n\t\t\t\t------------------------------------------------\n\t\t\t- pageCart.jsx\n\t\t\t\t-------------------------------------------\n\t\t\t\timport { addCoupon } from '../features/cart/cartSlice';\n\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={() => dispatch(addCoupon())}>Add Coupon</button>\n\t\t\t\t</div>\t\t\n\n\t\t\t\t<li key={index}>\n\t\t\t\t\t{item.title} - {formatPrice(item.price)} - (discount price: {formatPrice(item.discountedPrice)})\n\t\t\t\t</li>\n\t\t\t\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-08 05:42:50","systemWhoCreated":"systemUnknown"},{"id":564,"category":"Node","title":"Create CLI script command with Node.js, e.g. to backup .env file","body":"- this howto shows you how to use Node.js to create scripts\n\t- historically in a Linux environment one would use other languages for this, particularly bash scripts\n\t- traditionally one used any language that was installed, e.g. Perl, Ruby, Python, PHP, or more recently Rust or Go\n\t- a common use of scripts is to do file access tasks, e.g. backups, data converstion, etc.\n\t- commonly these scripts are not only run manually when needed but by cron jobs (Linux) or by automated task (Windows)\n\t- in the MERN stack it is very convenient to simply use Node for these tasks since it is the language which runs our servers as well\n\t- also since Node is installed with npm, it is common to wrap these tasks in npm scripts so that you have a central command \"npm run\" to start all tasks\n- find full code here: [edwardtanguay/howto-basic-book-site](https://github.com/edwardtanguay/howto-basic-book-site)\n- create a mock website for which we need to write scripts \n\t- **set up base site** that uses React Router and Sass:\n\t\t- download the code here: [edwardtanguay/test-react-router-navbar-site-v6](https://github.com/edwardtanguay/test-react-router-navbar-site-v6)\n\t\t- create directory e.g. `howto-basic-book-site` and paste in downloaded code files\n\t\t- open terminal in that directory \n\t\t- `code .`\n\t\t- `npm i`\n\t\t- `git init`\n\t\t- `npm run dev`\n\t\t- open site at http://localhost:3000 and you should see a site like this:#gif#thebasesiteforstart\n\t- change title to \"Book Site\"\n- the idea here is that we have a book site and we want to write a CLI for it, so we'll call it the \"Book CLI\"\n\t- to call it we will use the short name `bcli`\n- set up the simplest script\n\t- /scripts/bcli-backup.js\n\t\t--------------------------------------\n\t\tconsole.log('backing up .env file...');\n\t\t--------------------------------------\n\t- execute it with `node /scripts/bcli-backup.js`\n- wrap with an npm script\n\t- package.json\n\t\t- ` \"backup\": \"node scripts/bcli-backup.js\"`\n\t- execute with: `npm run backup`\n- program the backup script so that it actually copies the env file to a backup directory\n\t- create backup directory, e.g. `D:\\general-backup`\n\t\t- for Linux e.g. `\\home\\edward\\general-backup`\n\t- create `.env` file\n\t\t--------------------------------------\n\t\tAPI_KEY = 72627262\n\t\t--------------------------------------\n\t- in `.gitignore` file, add:\n\t\t-------------------------------------------\n\t\t.env\n\t\t-------------------------------------------\n\t- notice that the .env file will not be checked it, hence if you lose it, you have no copy of it\n\t- in `bcli-backup.js` first add the copy command to just copy the file to a backup file in the same directory, as a test\n\t\t------------------------------------------\n\t\tconst rs = require('fs');\n\t\tfs.copyFile('.env', 'D:\\\\general-backup\\\\.env-back', (err) => {\n\t\t\tif (err)\n\t\t\t\tthrow err;\n\t\t\tconsole.log('finished');\n\t\t});\n\t\t------------------------------------------\n- convert require (CommonJS - older) to import (ES6 - newer)\n\t- change require to: `import fs from 'fs';`\n\t\t- or use VSCode quick fix\n\t- `\"type\": \"module\",`\n\t- rename file from js to mjs\n\t\t- `.mjs` indicates that the file is an ES6 module file and not a CommonJS file\n- add time stamp to file name\n\t-----------------------------------\n\tconst targetFilename = 'D:\\\\general-backup\\\\' + timeStampifyFileName('.env');\n\n\tfunction getCurrentDateTime() {\n\t\tvar now = new Date();\n\t\tvar year = now.getFullYear();\n\t\tvar month = now.getMonth() + 1;\n\t\tvar day = now.getDate();\n\t\tvar hour = now.getHours();\n\t\tvar minute = now.getMinutes();\n\t\tvar second = now.getSeconds();\n\t\tif (month.toString().length == 1) {\n\t\t\tmonth = '0' + month;\n\t\t}\n\t\tif (day.toString().length == 1) {\n\t\t\tday = '0' + day;\n\t\t}\n\t\tif (hour.toString().length == 1) {\n\t\t\thour = '0' + hour;\n\t\t}\n\t\tif (minute.toString().length == 1) {\n\t\t\tminute = '0' + minute;\n\t\t}\n\t\tif (second.toString().length == 1) {\n\t\t\tsecond = '0' + second;\n\t\t}\n\t\tvar dateTime = year + '-' + month + '-' + day + '-' + hour + '-' + minute + '-' + second;\n\t\treturn dateTime;\n\t}\n\n\tfunction timeStampifyFileName(filename, idCode='backup') {\n\t\treturn `${filename}.${idCode}-${getCurrentDateTime()}`;\n\t}\n\t-----------------------------------\n- put functions into library so that they are reusable and can be easily documented and tested\n\t- create `/scripts/qtools/qdat.mjs`\n\t\t-------------------------------------------------\n\t\texport const getCurrentDateTime = () => {\n\n\t\texport const timeStampifyFileName = (filename, idCode='backup') => {\n\t\t-------------------------------------------------\n\t- import it:\n\t\t----------------------------------------\n\t\timport * as qdat from './qtools/qdat.mjs';\n\n\t\tconst targetFilename = 'D:\\\\general-backup\\\\' + qdat.timeStampifyFileName('.env');\n\t\t----------------------------------------\n\t- it works, now add documentation in qdat.mjs file\n\t\t---------------------------------------------------\n\t\t/**\n\t\t * Returns text string containing current date-and-time-stamp, used for labeling files, etc.\n\t\t * \n\t\t * qdat.getCurrentDateTime()\n\t\t * \n\t\t * 2022-06-13-06-23-19\n\t\t */\n\n\t\t/**\n\t\t * Adds a suffix to the end of a filename so that it has a timestamp, used for backup or log files, etc.\n\t\t * \n\t\t * qdat.tempStampifyFileName('index.html')\n\t\t * index.html.backup-2022-06-13-06-23-19\n\t\t * \n\t\t * qdat.tempStampifyFileName('index.html','log')\n\t\t * index.html.log-2022-06-13-06-23-19\n\t\t */\n\t\t---------------------------------------------------\n\t- note that you now have very nice intellisense:##niceintelligsesnsj\n\t- note that you could/should write (Jest) tests for these methods to make sure they do what they say they do now and into the future\n- automate scripts\n\t- for a backup script like this, it would make sense to run it every morning at 2:00, for instance\n\t\t- Linux: cron job\n\t\t- Windows: Windows Task Scheduler\n\t- or we could run the task every time we start our website\n\t\t- `npm i npm-run-all -D`\n\t- in npm scripts\n\t\t------------------------------------\n\t\t \"start\": \"run-p backup dev\",\n\t\t------------------------------------\n- next steps:\n\t- make one console command with parameters\n\t\t- see onespace project: `npm run dpod`\n\t\t- use a command line parameter parser, e.g. [minimist](https://www.npmjs.com/package/minimist)\n\t\t- then new scripts are all called form this command, e.g.\n\t\t\t- `npm run bcli -- backup`\n\t\t\t- `npm run bcli -- import excelReports`\n\t\t\t- `npm run bcli -- import jsonFromSalesDepartment`\n\t\t\t- `npm run bcli -- createPage --title=\"July Conference\"`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-13 07:06:20","systemWhoCreated":"systemUnknown"},{"id":565,"category":"npm","title":"Upgrade npm to 8.12.1 to avoid Windows \"global local deprecated\" error","body":"- if you are using npm and getting this warning:##thelownpmsd\n- upgrade to version 8.12.1\n\t- `npm install --global --production npm-windows-upgrade`\n\t- enter CMD **with administrator rights**\n\t- `npm-windows-upgrade`\n- it should now be 8.12.1##now122\n- and you don't get that error anymore:##noerrorkjkj","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-13 15:19:28","systemWhoCreated":"systemUnknown"},{"id":566,"category":"Node/Express","title":"Create a data-driven, server-side Node/Express site (no framework, no templating engine)","body":"- background of website servers / JavaScript frameworks\n\t- static sites\n\t\t- since ca. 1989\n\t\t- put static files on the server which are served 1-to-1 to browsers\n\t- server-side rendered sites\n\t\t- since ca. 1993 with e.g. CGI/Perl\n\t\t- early general website servers still uses today are Apache (1995) and nginx (2002)\n\t\t- a web server dynamically renders files on the server machine and serves the results to the browser via the Internet\n\t\t- enables websites to be generated on-the-fly from databases\n\t\t- enables sites to perform authentication and authorization of users\n\t\t- PHP, Ruby-on-Rails, ASP.NET, Django(Python)\n\t\t- often seen as complete web technology stacks, e.g. LAMP (Linux, Apache, MySQL, PHP) or .NET (Windows, IIS, SQL Server, C#)\n\t\t- **Node/Express** + templating engines such as **EJS**, Pug, Mustache, Dust\n\t\t\t- note: Pug was formerly called Jade\n\t- client-side rendering\n\t\t- since ca. 2013 with JavaScript frameworks such as **React**, Vue.js, Angular\n\t\t- send HTML and JavaScript to browsers and then let that JavaScript dynamically render a **single-page-application**\n\t- server-side-rendered sites *revisited*\n\t\t- since ca. 2016 with e.g. Next.js\n\t\t- take programming patterns (such as React) from the frontend to the backend\n\t\t- render components on the server instead in the browser\n\t\t- advantages\n\t\t\t- SEO and security of server-side\n\t\t\t- yet with the new programming paradigms of JavaScript frameworks\n\t- static sites *revisited*\n\t\t- since ca. 2016 with the **Jamstack philosophy**\n\t\t- difference: static-site generators create sites dynamically which are then served statically\n\t\t\t- all content is prerendered into static files\n\t\t- CDN providers such as **Netlify** and **Vercel** serve these static files\n\t\t- advantages\n\t\t\t- extremely fast sites from geolocated servers\n\t\t\t- extremely secure\n\t\t\t\t- \"you can't have your database hacked when you don't have a database\"\n\t\t\t\t- \"you don't have any backend bugs when you don't have a backend\"\n\t\t- data exists on other servers, in the cloud on data-dedicated servers \n\t\t\t- this is where the term **headless** comes from, e.g. headless content management system, i.e. only the data \"body\", no frontend \"head\"\n\t\t- data is accessed and manipulated from static sites via REST APIs and GraphQL\n\t- mix-and-match\n\t\t- the most interesting frameworks today generate all three paradigms: server-side, client-side, static\n\t\t\t- for React: Next.js, Gatsby\n\t\t\t- for Vue.js: Nuxt\n\t\t\t- for Angular: Angular Universal\n- this howto has four purposes:\n\t- it is a useful way to build a small, data-driven website that collects data from various sources and displays it in the browser, e.g. as a development tool or as some kind of information dashboard site\n\t- it is a project that will give us a better idea and appreciation of what is behind various frameworks that we use, such as React, Next.js, Gatsby, Vue.js, Angular, and since we are now on the backend, of what one can do with languages such as PHP, C#, Java, Go, and Rust when building the backends of websites\n\t- it expands our understanding of what one can do with Node and Express since, while we are still in JavaScript as we were when writing JS/DOM and React sites, we are now on the backend and thus have many more opportunities of what our code can effect on computers and on the web\n\t- this code can be the beginning of our own JavaScript framework, either with a general purpose or a specific purpose\n\t\t- some job ads I have seen ask for skills in Node/Express/JavaScript and general web technology since they have written their own web framwork for some niche business area and need developers to maintain and expand it\n- specifically, this howto takes you step-by-step to show you how to use Node/Express to create data-driven, server-side generated website\n\t- when we were developing JavaScript/DOM sites, our JavaScript code was client-side, so what was our server?\n\t\t- one could say that the server was simply our operating system, or the file system which sent HTML files directly to our browser one-to-one\n\t\t- we often used VSCode Live-Server which is software that serves HTML/CSS/JavaScript files not from the file system but via localhost and a specific port (5500)\n\t\t\t- Live Server is in effect simply a server like the one we are building today, but in the form of a VSCode extension\n\t- but now we are working in Node, our JavaScript code is no longer in the browser but in the server\n\t\t- with Node/Express we no longer have to send HTML/CSS/JavaScript files one-to-one to the browser\n\t\t- have now have complete control over what we send to the browser\n\t\t- we can manipulate it before it is sent\n\t\t- we can determine if someone is logged in and only send them HTML/CSS/JavaScript code they are allowed to see and use\n\t\t- we can render the HTML based on various kinds of template engines before the HTML is sent to the browser, e.g. EJS, mustache\n\t\t- we can create content management systems so that any new `.md` file that we (or even a non-developer employee) copies to a directory becomes a new page on the site or a new article in the site\n- full code is here: howto-node-express-server-side-mvc [edwardtanguay/howto-node-express-server-side-mvc](https://github.com/edwardtanguay/howto-node-express-server-side-mvc)\n\t- here are some older versions of this project that might be useful\n\t\t- [version 003](https://github.com/edwardtanguay/live-coding-node-express-server-side-rendering)\n\t\t- [version 002](https://github.com/edwardtanguay/howto-node-express-server-side-rendering2)\n\t\t- [version 001](https://github.com/edwardtanguay/howto-node-express-server-side-rendering)\n- this Node/Express site can easily be deployed to Heroku as shown here: [howto-node-express-server-side.herokuapp.com](https://howto-node-express-server-side.herokuapp.com)\n- when finished the site should look something like this:##infoSiteHowLooks\n- **create Node/Express server that serves HTML text**\n\t- make directory `howto-node-express-server-side-rendering`\n\t- `code howto-node-express-server-side-rendering`\n\t- set up a npm project with package.json file\n\t\t- `npm init -y`\n\t\t- enable ES6 modules:\n\t\t\t- `\"type\": \"module\",`\n\t- set up a local repository\n\t\t- `git init`\t\t\t\n\t- we will need Express\n\t\t- `npm i express`\n\t- problem: 400+ files to check in\n\t\t- solution: create `.gitignore`\n\t\t\t--------------------------------------\n\t\t\tnode_modules\n\t\t\t--------------------------------------\t\t\n\t- initial commit\n\t- server.js\n\t\t-----------------------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst port = 3007;\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send('welcome to this <b>website</b>');\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Listening at http://localhost:${port}`);\n\t\t});\n\t\t-----------------------------------------\n\t- start server with `node server.js`\n- problem: after every code change you have to restart server\n\t- solution: install **nodemon**\n\t\t- `npm i nodemon -D`\n\t\t\t- `-D` means to put it in devDependencies instead of dependences since e.g. Netlify doesn't need it to execute on the server and thus doesn't need to include it in the build\n\t\t\t- i.e. we only need it for **dev**elopment, hence *dev*Dependences\n\t\t- `nodemon server.js`\n\t\t\t- make change, see it restart\n\t\t- package.json\n\t\t\t----------------------------\n\t\t\t\"start\": \"nodemon server.js\"\t\n\t\t\t----------------------------\n\t\t- `npm start`\n\t\t\t- note: it's better to install nodemon as a package in your project like this instead of using it global \n\t\t\t\t- reason: anyone who clones your repository is sure to have it when they execute npm start, whether they have nodemon installed globally or not\n- **Node/Express server that serves data-generated, dynamic HTML**\n\t- get data from somewhere else and display it as HTML\n\t- `npm i axios`\n\t- `import axios from 'axios';`\n\t- get data from API\n\t\t----------------------------------------\n\t\tconst nouns = (\n\t\t\tawait axios.get('https://edwardtanguay.netlify.app/share/germanNouns.json')\n\t\t).data;\t\n\t\t----------------------------------------\n\t- notice Node now has **top-level await**\n\t\t- no need for IIFEs or async functions\n\t\t- but only when you use **ES6 modules**\n\t\t\t- another reason to use ES6 modules\n\t- display the data\n\t\t----------------------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send(\n\t\t\t\t`<ul>${nouns\n\t\t\t\t\t.map((m) => `<li>${m.article} ${m.singular}</li>`)\n\t\t\t\t\t.join('')}</ul>`\n\t\t\t);\n\t\t});\t\t\t\n\t\t----------------------------------------\n- **implement MVC pattern**\n\t- note these are MVC terms\n\t\t- **M**odel ==> models.js\n\t\t- **V**iew ==> views.js\n\t\t- **C**ontroller = server.js\n\t- supports the strategy: separation of concerns\n\t- advantages\n\t\t- code is more easily reusable\n\t\t- code is easier to test\n\t\t- enables patterns such as [dependency injection](https://en.wikipedia.org/wiki/Dependency_injection)\n\t- implement models\n\t\t- models.js\n\t\t\t------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\tconst nouns = (\n\t\t\t\tawait axios.get('https://edwardtanguay.netlify.app/share/germanNouns.json')\n\t\t\t).data;\n\n\t\t\texport const siteData = {\n\t\t\t\tnouns\n\t\t\t};\t\t\t\t\n\t\t\t------------------------------\n\t\t- modify server.js\n\t\t\t--------------------------------\n\t\t\timport { siteData } from './models.js';\n\n\t\t\tsiteData.nouns;\n\t\t\t--------------------------------\n\t- implement views\n\t\t- views.js\n\t\t\t-----------------------------------\n\t\t\texport const siteView = ({nouns}) => {\n\t\t\t\treturn `<ul>${nouns\n\t\t\t\t\t.map((m) => `<li>${m.article} ${m.singular}</li>`)\n\t\t\t\t\t.join('')}</ul>`;\n\t\t\t};\n\t\t\t-----------------------------------\n\t\t- server.js\n\t\t\t-------------------------------------------\n\t\t\timport express from 'express';\n\t\t\timport { siteModel } from './models.js';\n\t\t\timport { siteView } from './views.js';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3008;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send(siteView(siteModel));\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening at http://localhost:${port}`);\n\t\t\t});\n\t\t\t-------------------------------------------\n- add full HTML text and CSS\n\t- in server.js\n\t\t---------------------------------------\n\t\tapp.use(express.static('public'));\n\t\t---------------------------------------\n\t- in views.js\n\t\t--------------------------------------\n\t\texport const siteView = ({ nouns }) => {\n\t\t\treturn `\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\" href=\"main.css\" />\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<ul>${nouns.map((m) => `<li>${m.article} ${m.singular}</li>`).join('')}</ul>\n\t\t</body>\n\t\t</html>\n\t\t`;\n\t\t};\n\t\t--------------------------------------\n\t- public/main.css\n\t\t----------------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-size: 1.3rem;\n\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t}\n\t\t----------------------------------------------\n- problem: site is starting to grow so we need to not have all files in the root, but more of an organized structure\n\t- solution:\n\t\t- now that we have a **public** directory, make a **src** directory as well and put everything in there except server.js\n\t\t- this is more of a classic, expected structure for Node/React projects\n\t- your structure should now look like this:##nowsrcchange\n- add more data sources to the **model** and display them with the **view**\n\t- **read data from a local JSON file: books**\n\t\t- download [books](https://edwardtanguay.netlify.app/share/books.json) into file: `data/books.json`\n\t\t- add to models.js\n\t\t\t-----------------------------------\n\t\t\timport fs from 'fs';\n\n\t\t\t...\n\n\t\t\tconst books = JSON.parse(fs.readFileSync('./src/data/books.json'));\n\n\t\t\t...\n\n\t\t\texport const siteData = {\n\t\t\t\tnouns,\n\t\t\t\tbooks\n\t\t\t}\n\t\t\t-----------------------------------\n\t\t\t- note that the path to the data file is relative to root, not to the calling file\n\t\t- add to views.js\n\t\t\t-----------------------------\n\t\t\texport const siteView = ({nouns, books}) => {\n\n\t\t\t...\n\n\t\t\t<body>\n\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t<ul>\n\t\t\t\t<li><b>API call: </b>There are ${nouns.length} nouns.</li>\t\n\t\t\t\t<li><b>Local JSON file: </b>There are ${books.length} books.</li>\t\n\t\t\t\t</ul>\n\t\t\t</body>\n\t\t\t-----------------------------\n\t\t- in main.css add:\n\t\t\t--------------------------------------\n\t\t\tli b {\n\t\t\t\tcolor: orange;\n\t\t\t}\n\t\t\t--------------------------------------\n\t\t- your site should now look like this:##withorangeandiii\n\t- problem: we will be adding more data sources which will make the models.js file crowded and unorganized\n\t\t- solution: make each data source a module which is imported\n\t\t\t- models.js\n\t\t\t\t-----------------------------------------------\n\t\t\t\timport nouns from './dataSources/nouns_apiCall.js';\n\t\t\t\timport books from './dataSources/books_localJsonFile.js';\n\n\t\t\t\texport const siteData = {\n\t\t\t\t\tnouns,\n\t\t\t\t\tbooks\n\t\t\t\t}\n\t\t\t\t-----------------------------------------------\n\t\t\t- src/dataSources/books_localJsonFile.js\n\t\t\t\t----------------------------------------------\n\t\t\t\timport fs from 'fs';\n\n\t\t\t\tconst books = JSON.parse(fs.readFileSync('./src/data/books.json'));\n\n\t\t\t\texport default books;\n\t\t\t\t----------------------------------------------\n\t\t\t- src/dataSources/nouns_apiCall.js\n\t\t\t\t---------------------------------------------------\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\tconst nouns = (\n\t\t\t\t\tawait axios.get('https://edwardtanguay.netlify.app/share/germanNouns.json')\n\t\t\t\t).data;\n\n\t\t\t\texport default nouns;\n\t\t\t\t---------------------------------------------------\n\t- **read data from an Excel file: translations**\n\t\t- this is an .xlsx file downloaded from a Google Drive spreadsheet which was created as an export from your Google Translation history\n\t\t- `npm i exceljs`\n\t\t- download the xlsx file from [this repository](https://github.com/edwardtanguay/live-coding-node-express-server-side-rendering) or download your own from exporting your Google Translations history to a Google sheet and then downloading that as an .xlsx file\n\t\t\t- call it **googleTranslations.xlsx**\n\t\t- translations_excelFile.js\n\t\t\t----------------------------------------\n\t\t\timport Excel from 'exceljs';\n\n\t\t\tconst getTranslations = async () => {\n\t\t\t\tconst wb = new Excel.Workbook();\n\t\t\t\tawait wb.xlsx.readFile('./src/data/googleTranslations.xlsx');\n\t\t\t\tconst translations = [];\n\t\t\t\t// const ws = wb.getWorksheet('Saved translations');\n\t\t\t\tconst ws = wb.getWorksheet(1);\n\t\t\t\tfor (let row = 2; row <= 100000; row++) {\n\t\t\t\t\tconst fromLanguageCell = `A${row}`;\n\t\t\t\t\tconst toLanguageCell = `B${row}`;\n\t\t\t\t\tconst fromPhraseCell = `C${row}`;\n\t\t\t\t\tconst toPhraseCell = `D${row}`;\n\n\t\t\t\t\tconst fromLanguage = ws.getCell(fromLanguageCell).value;\n\t\t\t\t\tconst toLanguage = ws.getCell(toLanguageCell).value;\n\t\t\t\t\tconst fromPhrase = ws.getCell(fromPhraseCell).value;\n\t\t\t\t\tconst toPhrase = ws.getCell(toPhraseCell).value;\n\t\t\t\t\tif (fromLanguage === null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttranslations.push({\n\t\t\t\t\t\t\tfromLanguage,\n\t\t\t\t\t\t\ttoLanguage,\n\t\t\t\t\t\t\tfromPhrase,\n\t\t\t\t\t\t\ttoPhrase\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn translations;\n\t\t\t};\n\n\t\t\texport default await getTranslations();\n\t\t\t----------------------------------------\n\n\t\t- models.js\n\t\t\t--------------------------------------------------\n\t\t\timport nouns from './dataSources/nouns_apiCall.js';\n\t\t\timport books from './dataSources/books_localJsonFile.js';\n\t\t\timport translations from './dataSources/translations_excelFile.js';\n\n\t\t\texport const siteData = {\n\t\t\t\tnouns,\n\t\t\t\tbooks,\n\t\t\t\ttranslations\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------\n\t- **read data from files in a directory: jobs**\n\t\t- background\n\t\t\t- these are .md files, each file contains layout for a job advertisement\n\t\t\t- our module component creates for each job an object in an array called jobs\n\t\t\t\t- each object contains HTML that was parsed from the markdown content in the file\n\t\t\t- to add a new object, one simply has to add a new .md file\n\t\t- download [this repository](https://github.com/edwardtanguay/howto-node-express-server-side-mvc)\n\t\t\t- copy the .md files to **src/data/jobs**\n\t\t\t- copy the qtools directory to **src**\n\t\t\t- put it in **src**\n\t\t\t- `npm i markdown-it`\n\t\t- jobs_mdFiles.js\n\t\t\t--------------------------------------\n\t\t\timport * as qfil from '../qtools/qfil.js';\n\t\t\timport * as qstr from '../qtools/qstr.js';\n\n\t\t\tconst getJobs = () => {\n\t\t\t\tconst jobs = [];\n\t\t\t\tconst jobFileNames = qfil.getSiteRelativePathAndFileNames('src/data/jobs');\n\t\t\t\tjobFileNames.forEach((jobFileName) => {\n\t\t\t\t\tconst lines = qfil.getFileAsLines(jobFileName);\n\t\t\t\t\tconst markdown = qstr.convertLinesToStringBlock(lines);\n\t\t\t\t\tconst html = qstr.parseMarkDown(markdown);\n\n\t\t\t\t\tlet idCode = qstr.chopLeft(jobFileName, 'data/jobs/');\n\t\t\t\t\tidCode = qstr.chopRight(idCode, '.md');\n\n\t\t\t\t\tjobs.push({\n\t\t\t\t\t\tidCode,\n\t\t\t\t\t\thtml\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\treturn jobs;\n\t\t\t};\n\n\t\t\texport default getJobs();\t\t\t\t\t\n\t\t\t--------------------------------------\n\t\t- add to views.js\n\t- test on Linux\n\t\t- if you are using Windows, then on an Ubuntu machine install the environment as follows to be able to test the rest of md files\n\t\t\t- `sudo apt install node`\n\t\t\t- `sudo apt install npm`\n\t\t\t- push your code to a repository and from Ubuntu clone it\n\t\t\t- install VSCode via Ubuntu Software, search for **vscode**\n\t\t- you might need to install nvm\n\t\t\t- see [these instructions](https://tecadmin.net/how-to-install-nvm-on-ubuntu-20-04)\n\t- convert the view so that it shows not only how many items but some of the items\n\t\t- to show how to display the actual data, particularly the job listening HTML that have been converted from markdown to HTML, let's display three items from each collection\n\t\t- change view.js to this code\n\t\t\t----------------------------------------------\n\t\t\t<body>\n\t\t\t\t<h1>Info Site</h1>\n\n\t\t\t\t<h2><b>API call: </b>There are ${nouns.length} nouns.</h2>\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t${nouns.filter((m,i) => i < 3).map(m => m.article + ' ' + m.singular).join(', ')}, ...\n\t\t\t\t</div>\n\n\t\t\t\t<h2><b>Local JSON file: </b>There are ${books.length} books.</h2>\t\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t${books.filter((m,i) => i < 3).map(m => m.title).join(', ')}, ...\n\t\t\t\t</div>\n\n\t\t\t\t<h2><b>Local Excel file: </b>There are ${translations.length} translations.</h2>\t\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t${translations.filter((m,i) => i < 3).map(m => m.fromPhrase).join(', ')}, ...\n\t\t\t\t</div>\n\n\t\t\t\t<h2><b>Local directory of markdown files: </b>There are ${jobs.length} jobs.</h2>\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\tID-CODE: ${jobs[0].idCode}\n\t\t\t\t\t${jobs[0].html}\n\t\t\t\t</div>\n\t\t\t</body>\t\t\t\n\t\t\t----------------------------------------------\n\t\t- some styling changes to main.css\n\t\t\t-------------------------------------------\n\t\t\th2 b {\n\t\t\t\tcolor: orange;\n\t\t\t}\n\n\t\t\tdiv.content {\n\t\t\t\tmargin-left: 20px;\n\t\t\t\tcolor: #999;\n\t\t\t\tfont-family: monospace;\n\t\t\t\tfont-size: .8rem;\n\t\t\t}\n\n\t\t\ta {\n\t\t\t\tcolor: rgb(229, 229, 169);\n\t\t\t}\n\t\t\t-------------------------------------------\n\t- **read images from directory and display**\n\t\t- create the directory /public/images and add three photos to it##addtopublicimsdf\n\t\t- dataSources/images_landscapePhotos.js\n\t\t\t-----------------------------------------\n\t\t\timport * as qfil from '../qtools/qfil.js';\n\t\t\timport * as qstr from '../qtools/qstr.js';\n\n\t\t\tconst getLandscapePhotos = () => {\n\t\t\t\tconst landscapePhotos = [];\n\t\t\t\tconst pathAndFileNames = qfil.getSiteRelativePathAndFileNames('public/images');\n\t\t\t\tpathAndFileNames.forEach((pathAndFileName) => {\n\t\t\t\t\tlet fileName = qstr.chopLeft(pathAndFileName, 'public/images');\n\t\t\t\t\tfileName = qstr.chopLeft(fileName, '/');\n\t\t\t\t\tfileName = qstr.chopLeft(fileName, '\\\\');\n\n\t\t\t\t\tlandscapePhotos.push(fileName);\n\t\t\t\t});\n\t\t\t\treturn landscapePhotos;\n\t\t\t};\n\n\t\t\texport default getLandscapePhotos();\n\t\t\t-----------------------------------------\n\t\t- add to views.js\n\t\t\t--------------------------------------\n\t\t\t<h2><b>Local directory of images: </b>There are ${\n\t\t\t\tlandscapePhotos.length\n\t\t\t} landscape photos.</h2>\n\t\t\t<div class=\"content\">\n\t\t\t\t${landscapePhotos\n\t\t\t\t\t.filter((m, i) => i < 3)\n\t\t\t\t\t.map(fileName => `<img src=\"images/${fileName}\"/>`)\n\t\t\t\t\t.join('')}\n\t\t\t</div>\t\t\t\n\t\t\t--------------------------------------\t\t\t\n\t- **publish to site at Heroku**\n\t\t- set up for Heroku\n\t\t\t- make start run Node\n\t\t\t\t--------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon server.js\",\n\t\t\t\t\t\"start\": \"node server.js\"\n\t\t\t\t},\t\t\t\n\t\t\t\t--------------------------------\n\t\t\t- change so that when on Heroku, use dynamic port\n\t\t\t\t---------------------------------\n\t\t\t\tconst port = process.env.PORT || 3007;\t\t\t\t\n\t\t\t\t---------------------------------\n\t\t- log into: https://heroku.com\n\t\t- new app, give name, Europe\n\t\t- [GitHub]\n\t\t- [Connect to GitHub]\n\t\t- search for repository, click [Connect]\n\t\t- [Enable Automatic Deploys]\n\t\t- [Overview]\n\t\t- [Open app]\n\t\t- to debug: heroku logs -a howto-node-express-server-side --tail\n\t\t- see: https://javascript.plainenglish.io/hosting-node-js-app-on-heroku-in-less-than-5-mins-bc7ce244c8d0\n\t- todo:\n\t\t- read data from a local SQLite database\n\t\t- read data from a local XML file\n\t\t- read data from a local MySQL database\n\t\t- read data from local csv file\n\t\t- read data from an MongoDB Atlas database\n\t\t- read data from GraphQL API: githubRepositories\n\t\t- build internal API and read data from client-side via Vue.js on page load and on button click\n\t\t- publish to site on Debian server at Hetzner\n\t\t- add testing with vitest","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-15 05:28:01","systemWhoCreated":"systemUnknown"},{"id":567,"category":"GitHub","title":"Create GitHub Organization and set up web team site with workflow","body":"- create an organization\n\t- --> Profile > Settings > Organizations\n\t- [New organization]\n\t- [Create a free organization]\n\t\t- Organization acount name: e.g. `Web Team 002`\n\t\t\t- Note the URL for this name would be e.g. https://github.com/Web-Team-002\n\t\t- Contact email: `nnn@company.com` (email where you want to receive info regarding this organization)\n\t\t- [x] My personal account\n\t\t- (prove you are a human)\n\t\t- [x] I hereby ...\n\t\t- [Next]\n\t- don't add any other members yet\n\t\t- --> Skip this step\n\t- don't need to provide any information on how you will use GitHub\n\t\t- [Submit]\n- create repositories\n\t- frontend\n\t\t- [Create a new repository]\n\t\t- Repository name: `frontend`\n\t\t- [x] Private\n\t\t- [x] Add a README file\n\t\t- [Create repository]\n\t- backend\n\t\t- click on your project name\n\t\t\t- --> Web-Team-002\n\t\t- --> Repositories\n\t\t- [New repository]\n\t\t- Repository name: `backend`\n\t\t- [x] Private\n\t\t- [x] Add a README file\n\t\t- [Create repository]\n\t- your organization should now look something like this:##reposomethingwlike\n- in frontend make two branches \"main\" and \"dev\"\n\t- --> frontend\n\t\t- note main already exists##notemainall\n\t- create dev branch\n\t\t- --> 1 branch\n\t\t- [New Branch]\n\t\t- Branch name: `dev`\n\t\t- Branch source: main\n\t\t- [Create branch]\n\t- set dev to be default branch\n\t\t- --> Settings\n\t\t- --> Branches\n\t\t- click icon with two arrows##thetwoarrrr\n\t\t- select dev##dotheseldev\n\t\t- [Update]\n\t\t- [I understand, update the default branch.]\n- clone and set up first version of your frontend\n\t- in GitHub, click on your frontend repository##doclickfront\n\t- copy the clone line of the repository link##copythecodeclone \n\t- in your terminal, make a directory with organization name, e.g. `Web-Team-002`\n\t- cd into it\n\t- `git clone` ... (paste copied repository link)`\n\t- `cd frontend`\n\t- `code .`\n\t- copy base site code in (if you have some) and update README.me\n\t\t- IMPORTANT: when working in a web team, before you make a change to the site, first create a branch\n\t\t\t- e.g. `edward-create-base-site`\n\t\t\t\t- your name and what your task is, separated by hyphens, all lowercase\n\t\t- as an example of importing a functional React site (made with Vite), we'll start with this code: \n\t\t\t- go to this repository: [edwardtanguay/web-team-site](https://github.com/edwardtanguay/web-team-site)\n\t\t\t- download the files as a zip:##firstthedownlaas\n\t\t\t- copy all files you need:##copyallyouneedd\n\t\t\t- paste the files into your site:##pasteintosite\n\t\t\t- test locally in browser\n\t\t\t\t- `npm i`\n\t\t\t\t- `npm run dev`\n\t\t\t- (ignore this warning if you see it: it is a Vite issue that doesn't affect the site's usability)##ignoreifseej\n\t\t- update README.md\n\t\t\t- `- base site is up`\n\t\t- commit code with message `finished` and push\n\t\t\t- note: easiest at the beginning here is to use the VSCode git GUI\n\t\t\t\t- type in commit message, CTRL-Enter, then click the [Sync Changes] button##syncchagnesispush\n\t\t\t\t- this does a push to your branch\n\t\t\t\t- in the future you can type in the Git commands in the terminal (add, commit, push, etc.) for practice\n\t\t\t\t- but VSCode makes these steps simple which increases your developing speed\n\t- create pull-request\n\t\t- on GitHub go to frontend repository\n\t\t- [Compare & pull request]\n\t\t- [Create pull request]\n\t\t- change to Squash and Merge##choosequuash\n\t\t- [Squash and merge]\n\t\t- write a clear message e.g. `Edward: added index page`\n\t\t\t- these messages will make up your Git log history so it's important you make them clear and meaningful:\n\t\t\t\t- first name with first letter capitalized \n\t\t\t\t- colon, space\n\t\t\t\t- describe in **lowercase past-tense English** what you did\n\t\t- [Confirm squash and merge]\n\t\t- note that we are merging our task branch into **dev** since we defined it as the default branch earlier##confiremsuash222\n\t- look at change locally in dev\n\t\t- in VSCode switch back to dev\n\t\t- note that your changes are gone\n\t\t- git pull\n\t\t- your changes appear\n- publish at Netlify\n\t- Netlify will publish from the main branch\n\t\t- so first merge from dev to main\n\t\t\t- `git checkout main`\n\t\t\t- `git merge dev`\n\t\t\t- look at it in browser, test\n\t\t\t- `git push`\n\t\t\t- go back to dev: `git checkout dev`\n\t- publish the main branch at Netlify\n\t\t- in browser, go to Netlify\n\t\t- login\n\t\t- add new site > import existing site > GitHub\n\t\t- Add another organization\n\t\t- all repositories > Install\n\t\t- frontend\n\t\t- branch to deploy: **main**\n\t\t- deploy site (it will regonize the Vite React site so accept all defaults)\n\t\t- rename site\n\t\t\t- site settings > change site name\n\t\t\t- webteam002\n\t\t- to your online site in browser\n- solve this problem: [How to solve a 404 error on a React Router site at Netlify](https://edwardtanguay.netlify.app/howtos?id=518)\n\t- don't forget to create new local branch e.g. `edward-fix-404-problem`\n\t- push branch to GitHub\n\t- create pull request\n\t- merge branch into dev\n\t- merge dev into main\n\t- check the online site so see that problem is solved\n- create npm script to list out Git history of who has done what and when\n\t- add to scripts in **package.json**\n\t\t-----------------------------------\n\t\t\"sc\": \"git log --pretty=format:\\\"%h - %ad - %s\\\" --date=format:\\\"%Y-%m-%d %H:%M:%S\\\"\",\t\t\n\t\t-----------------------------------\n\t- now to get history:\n\t\t-----------------------------\n\t\tnpm run sc\n\t\t-----------------------------\n\t- to see code at a certain time in the history\n\t\t- make sure you have no uncommited changes\n\t\t- copy the hash, e.g. `ea4385d`\n\t\t- then: `git checkout ea4385d`\n\t\t- look around\n\t\t- to go back: `git switch -`\n- invite other people and get them up to speed making changes to the site\n\t- People\n\t- Invite Member\n- make **Trello board** or **GitHub Project** for your web team to keep track of tasks\n\t- consider giving each task a specific number or idCode e.g. `task-fix-404-page` and name your branches `edward-task-fix-404-page`\n\t\t- helps you when you are looking at a task card, to find the appropriate branch\n\t\t- makes naming branches simply copy-and-paste\n- set up backend\n\t- set up simple API\n\t- consume from frontend locally\n\t- publish at Heroku\n\t- test online if frontend at Netlify can access data from backend at Heroku\n- secure backend so it can only be access from the frontend at Netlify","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-17 03:37:06","systemWhoCreated":"systemUnknown"},{"id":569,"category":"EJS","title":"Create a Node/Express/EJS site that displays various types of data","body":"- this howto shows you how to use the templating engine EJS to make multipage Node/Express server-side web sites\n\t- full code is here: [edwardtanguay/howto-node-express-ejs-mvc-site](https://github.com/edwardtanguay/howto-node-express-ejs-mvc-site)\n\t- the final site should work like this:#gif#thesiteherokuejs\n- the EJS site we will build in this howto is based on this site: [edwardtanguay.netlify.app/howtos?id=566](https://edwardtanguay.netlify.app/howtos?id=566)\n\t- this site looks like this:##infoSiteHowLooks\n\t- analyze the code of this site\n\t- it has an MVC pattern \n\t\t- the control (server.js) gets data from the module which fetches data from various sources (external API, local JSON file, Excel file, directory of images, and directory of md files)\n\t\t- this data is sent as an object to the view which displays the data\n\t- note that the view uses simple ES6 [template string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) syntax\n- problem: while the above ES6 template string syntax can be a decent solution for simple one-page sites and can go a long way even if you have a nav bar with server-side pages, using a template engine solves many problems you would have to solve later \n\t- solution: the most popular server-side template engine for Node/Express sites is called **EJS** (i.e. **E**mbedded **J**ava**S**cript templates)\n- create new directory e.g. `howto-node-express-ejs-mvc-site` and copy in site from [the above site's repository](https://github.com/edwardtanguay/howto-node-express-server-side-mvc)\n- **swap out the template string syntax for EJS templating**\n\t- set up basic EJS plumbing:\n\t\t- since this site has an MVC structure, we are essentially swapping out the **V**iew format, from ES6-template-strings to EJS\n\t\t- `npm i ejs`\n\t\t- create `public/views/pages/index.ejs`\n\t\t\t---------------------------------\n\t\t\ttest of <b>ejs</b>\n\t\t\t---------------------------------\n\t\t- in server.js\n\t\t\t------------------------------------------\n\t\t\timport path from 'path';\n\n\t\t\tconst __dirname = path.resolve(path.dirname(''));\n\n\t\t\tapp.set('view engine', 'ejs');\n\t\t\tapp.et('views', path.join(__dirname, './public/views'));\t\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.render('pages/index')\n\t\t\t});\t\t\n\t\t\t------------------------------------------\n\t- send in model data to the view as we did before\n\t\t- server.js\n\t\t\t-----------------------------------------\n\t\t\tres.render('pages/index', siteData)\n\t\t\t-----------------------------------------\n\t- and display it in the view\n\t\t- index.ejs\n\t\t\t-----------------------------------------\n\t\t\ttest of <b>ejs</b>\n\t\t\t<hr />\n\t\t\tthere are <%=nouns.length%> nouns\n\t\t\t-----------------------------------------\n\t- the site should now look like this:##likethistestofejs90\n\t- recreate the former site in EJS syntax\n\t\t-----------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t\t  content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"main.css\" />\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Info Site</h1>\n\t\t\t<div>\n\t\t\t\tthere are <%=nouns.length%> nouns\n\t\t\t</div>\n\t\t</body>\n\n\t\t</html>\n\t\t-----------------------------------------------\n\t- the site should now look like this:##fixedlayoutdark\n\t- note that our MVC structure makes it easy to swap templating engines:\n\t\t- we simply swap the view component\n\t\t- data is still sent as object to the view as before\n\t\t- stylesheet is still used by the view in the same way as before\n\t- convert the ES6-template-string syntax to EJS syntax\n\t\t- convert this:\n\t\t\t--------------------------------------------------------\n\t\t\t<h2><b>API call: </b>There are ${nouns.length} nouns.</h2>\n\t\t\t<div class=\"content\">\n\t\t\t\t${nouns\n\t\t\t\t\t.filter((m, i) => i < 3)\n\t\t\t\t\t.map((m) => m.article + ' ' + m.singular)\n\t\t\t\t\t.join(', ')}, ...\n\t\t\t</div>\t\t\t\n\t\t\t--------------------------------------------------------\n\t\t- to this: \n\t\t\t--------------------------------------------------------\n\t\t\t<h2><b>API call: </b>There are <%=nouns.length%> nouns.</h2>\n\t\t\t<div class=\"content\">\n\t\t\t\t<ul>\n\t\t\t\t<% for(const noun of nouns.slice(0,3)) { %>\n\t\t\t\t\t<li><%=noun.article%> <%=noun.singular%></li>\t\n\t\t\t\t<%}%>\n\t\t\t\t<li>...</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t--------------------------------------------------------\n\t- convert rest of site:\n\t\t---------------------------------------------\n\t\t<h2><b>Local JSON file: </b>There are <%=books.length%> books.</h2>\n\t\t<div class=\"content\">\n\t\t\t<ul>\n\t\t\t\t<% for(const\n\t\t\t\t   book\n\t\t\t\t   of\n\t\t\t\t   books.slice(0,3))\n\t\t\t\t   {\n\t\t\t\t   %>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<%=book.title%>\n\t\t\t\t\t</li>\n\t\t\t\t\t<%}%>\n\t\t\t\t\t\t<li>...</li>\n\t\t\t</ul>\n\t\t</div>\n\n\t\t<h2><b>Local Excel file: </b>There are <%=translations.length%> translations.</h2>\n\t\t<div class=\"content\">\n\t\t\t<ul>\n\t\t\t\t<% for(const\n\t\t\t\t   translation\n\t\t\t\t   of\n\t\t\t\t   translations.slice(0,3))\n\t\t\t\t   {\n\t\t\t\t   %>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<%=translation.fromPhrase%>\n\t\t\t\t\t</li>\n\t\t\t\t\t<%}%>\n\t\t\t\t\t\t<li>...</li>\n\t\t\t</ul>\n\t\t</div>\n\n\t\t<h2><b>Local directory of images: </b>There are <%=landscapePhotos.length%> landscape photos.</h2>\n\t\t<div class=\"content\">\n\t\t\t\t<% for(const\n\t\t\t\t   fileName\n\t\t\t\t   of\n\t\t\t\t   landscapePhotos)\n\t\t\t\t   {\n\t\t\t\t   %>\n\t\t\t\t\t<img src=\"images/<%=fileName%>\" />\n\t\t\t\t\t<%}%>\n\t\t</div>\n\n\t\t<h2><b>Local directory of markdown files: </b>There are <%=jobs.length%> jobs.</h2>\n\t\t<div class=\"content\">\n\t\t\t\t<% for(const\n\t\t\t\t   job\n\t\t\t\t   of\n\t\t\t\t   jobs)\n\t\t\t\t   {\n\t\t\t\t   %>\n\t\t\t\t\t<div class=\"job\">\n\t\t\t\t\t\tID-CODE: <%=job.idCode%>\n\t\t\t\t\t\t<%-job.html%>\n\t\t\t\t\t</div>\n\t\t\t\t\t<%}%>\n\t\t</div>\t\t\n\t\t---------------------------------------------\n\t- note in particular this syntax:\n\t\t-------------------------------------------------\n\t\t<img src=\"images/<%=fileName%>\" />\n\n\t\t<%-job.html%>\n\t\t-------------------------------------------------\n- make nouns pages\n\t- server.js\n\t\t-----------------------------\n\t\tapp.get('/nouns', (req, res) => {\n\t\t\tres.render('pages/nouns', siteData)\n\t\t});\t\t\n\t\t-----------------------------\n\t- views/pages/nouns.ejs\n\t\t----------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t\t  content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"main.css\" />\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Info Site</h1>\n\n\t\t\t<h2><b>API call: </b>There are <%=nouns.length%> nouns.</h2>\n\t\t\t<div class=\"content\">\n\t\t\t\t<ul>\n\t\t\t\t\t<% for(const\n\t\t\t\t\t   noun\n\t\t\t\t\t   of\n\t\t\t\t\t   nouns.slice(0,3))\n\t\t\t\t\t   {\n\t\t\t\t\t   %>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<%=noun.article%>\n\t\t\t\t\t\t\t\t<%=noun.singular%>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<%}%>\n\t\t\t\t\t\t\t<li>...</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t</body>\n\n\t\t</html>\t\t\n\t\t----------------------------------------\n- make header with nav bar with welcome and noun page\n\t- views/partials/header.ejs\n\t\t----------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t\t  content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"main.css\" />\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Information Site</h1>\n\t\t\t<nav>\n\t\t\t\t<a href=\"/\">welcome</a> | \n\t\t\t\t<a href=\"nouns\">nouns</a>\n\t\t\t</nav>\t\t\n\t\t----------------------------------------\n\t- views/partials/footer.ejs\n\t\t------------------------------------------\n\t\t</body>\n\n\t\t</html>\n\t\t------------------------------------------\n\t- views/pages/nouns.ejs\n\t\t--------------------------------------\n\t\t<%- include('../partials/header');%>\n\t\t\t<h2><b>API call: </b>There are <%=nouns.length%> nouns.</h2>\n\t\t\t<div class=\"content\">\n\t\t\t\t<ul>\n\t\t\t\t\t<% for(const\n\t\t\t\t\t   noun\n\t\t\t\t\t   of\n\t\t\t\t\t   nouns.slice(0,3))\n\t\t\t\t\t   {\n\t\t\t\t\t   %>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<%=noun.article%>\n\t\t\t\t\t\t\t\t<%=noun.singular%>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<%}%>\n\t\t\t\t\t\t\t<li>...</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t<%- include('../partials/footer');%>\t\t\n\t\t--------------------------------------\n\t- main.css\n\t\t-------------------------------------\n\t\tnav a {\n\t\t\ttext-decoration: none;\n\t\t\tcolor: orange;\n\t\t}\n\t\t-------------------------------------\n- create rest of pages\n\t- see code here: [edwardtanguay/howto-node-express-ejs-mvc-site](https://github.com/edwardtanguay/howto-node-express-ejs-mvc-site)\n- **publish site to Heroku**\n\t- set up for Heroku\n\t\t- make sure start runs node:\n\t\t\t--------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon server.js\",\n\t\t\t\t\"start\": \"node server.js\"\n\t\t\t},\t\t\t\n\t\t\t--------------------------------\n\t\t- makes sure server uses dynamic port\n\t\t\t---------------------------------\n\t\t\tconst port = process.env.PORT || 3007;\t\t\t\t\n\t\t\t---------------------------------\n\t- log into: https://heroku.com\n\t- new app, give name, Europe\n\t- [GitHub]\n\t- [Connect to GitHub]\n\t- search for repository, click [Connect]\n\t- [Enable Automatic Deploys]\n\t- [Overview]\n\t- [Open app]\n\t- to debug: heroku logs -a howto-node-express-ejs-mvc --tail","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-20 08:40:45","systemWhoCreated":"systemUnknown"},{"id":570,"category":"API","title":"Create read-only Node/Express API and Search Engine Frontend","body":"- this howto will demonstrate the following:\n\t- two local projects\n\t\t- backend read-only Node/Express API\n\t\t- frontend React site that reads data from API\n\t- deploy online\n\t\t- backend at Heroku\n\t\t- frontend at Netlify\n\t\t- project backend so that it can only be accessed from the frontend\n\t\t\t- test from local site\n\t\t\t- test from Postman\n\t\t- improve UX for slow-loading backend\n- the finished application (frontend/backend) will work like this:#gif#willworkfrontendback\n- **build backend**\n\t- full code can be found here: [edwardtanguay/howto-ejt-backend-dern001](https://github.com/edwardtanguay/howto-ejt-backend-dern001)\n\t- create directory e.g. `howto-ejt-backend-dern001`\n\t\t- the \"ejt\" part should be your initials or some short, personal code so that your online projects at Netlify and Heroku have unique URLs\n\t- use this Node/Express repository as a base: [edwardtanguay/howto-node-express-server-side-mvc](https://github.com/edwardtanguay/howto-node-express-server-side-mvc)##tehsdiemvcrepo\n\t\t- copy files to directory\n\t\t- `npm i`\n\t\t- `git init`, initial commit\n\t\t- `npm run dev`\n\t- this Node/Express project has an MVC structure\n\t\t- controller = server.js\n\t\t- module = modules.js\n\t\t- view = views.js\n\t- convert this site to a \"headless API\"\n\t\t- remove the head (views.js)\n\t\t- replace with API routes (raw JSON data)\n\t- remove views\n\t\t- delete views.js\n\t- add API routes\n\t\t- main route\n\t\t\t-------------------------------------------\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send(`\n\t\t\t\t<!DOCTYPE html>\n\t\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<title>Info API</title>\n\t\t\t\t</head>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #aaa;\n\t\t\t\t\t\tpadding: 0 0 0 20px;\n\t\t\t\t\t\tfont-family: monospace;\n\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t} \n\t\t\t\t\ta {\n\t\t\t\t\t\tcolor: #333;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<body>\n\t\t\t   <h1>Data API</h1> \n\t\t\t   <ul>\n\t\t\t   ${Object.entries(siteData)\n\t\t\t\t\t.map((entry) => {\n\t\t\t\t\t\tconst idCode = entry[0];\n\t\t\t\t\t\tconst data = entry[1];\n\t\t\t\t\t\tconst fullUrl = `${url}/${idCode}`;\n\t\t\t\t\t\treturn `<li><a href=\"${fullUrl}\">${fullUrl}</a></li>`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('')}\n\t\t\t   </ul>\n\t\t\t\t</body>\n\t\t\t\t</html>\n\t\t\t\t`);\n\t\t\t});\n\t\t\t-------------------------------------------\n\t\t- all other routes\n\t\t\t---------------------------------------\n\t\t\tfor (const entry of Object.entries(siteData)) {\n\t\t\t\tconst idCode = entry[0];\n\t\t\t\tconst data = entry[1];\n\t\t\t\tapp.get('/' + idCode, (req, res) => {\n\t\t\t\t\tres.send(data);\n\t\t\t\t});\n\t\t\t}\n\t\t\t---------------------------------------\n- **build frontend**\n\t- with the frontend, we want to build a search machine called \"Search Info\" which searches our data\n\t- full code can be found here: [edwardtanguay/howto-ejt-frontend-dern001](https://github.com/edwardtanguay/howto-ejt-frontend-dern001)\n\t- create base Vite site with name e.g. `howto-ejt-frontend-dern001`\n\t\t- same as backend but with \"frontend\" so that these projects can be easily matched\n\t\t- in projects folder next to backend site: `npm create vite`\n\t\t- `howto-ejt-frontend-dern001`\n\t\t- `code howto-ejt-frontend-dern001`\n\t\t- with Peacock extension, two colors to easily distinguish projects:\n\t\t\t- backend: F1, navy\n\t\t\t- frontend: F1, darkgreen\n\t\t\t- F1, darken\n\t\t- `npm i`\n\t\t- `git init`, initial commit\n\t\t- App.js\n\t\t\t---------------------------\n\t\t\timport './App.css';\n\n\t\t\tfunction App() {\n\t\t\t  return <div className=\"App\">\n\t\t\t  <div>Testing</div>\n\t\t\t  </div>;\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t---------------------------\n\t\t- App.css\n\t\t\t---------------------------------------\n\t\t\tbody {\n\t\t\t  padding: 20px;\n\t\t\t  text-align: center;\n\t\t\t  background-color: #282c34;\n\t\t\t  min-height: 100vh;\n\t\t\t  display: flex;\n\t\t\t  flex-direction: column;\n\t\t\t  align-items: center;\n\t\t\t  font-size: 1.6rem;\n\t\t\t  color: white;\n\t\t\t}\n\t\t\t---------------------------------------\n\t- as test, display all nouns\n\t\t- App.js\n\t\t\t---------------------------------------------\n\t\t\timport { useEffect, useState } from 'react';\n\t\t\timport axios from 'axios';\n\t\t\timport './App.css';\n\n\t\t\tconst url = 'http://localhost:3007/nouns';\n\n\t\t\tfunction App() {\n\t\t\t\tconst [nouns, setNouns] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetNouns((await axios.get(url)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Nouns</h1>\n\t\t\t\t\t\t<div className=\"nouns\">\n\t\t\t\t\t\t\t{nouns.map((noun, i) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={i}>{noun.article} {noun.singular}</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\t\t\n\t\t\t---------------------------------------------\n\t\t- error##thecorsproblsmk\n\t\t- but note it's no problem in Postman##forthenounsjs\n\t\t- understand [SOP and CORS](https://blog.dataminded.com/cors-and-the-sop-explained-f59de3a5078)\n\t\t- implement CORS on backend and allow all frontend clients to access it\n\t\t\t- `npm i cors`\n\t\t\t- server.js\n\t\t\t\t------------------------------\n\t\t\t\timport cors from 'cors';\n\n\t\t\t\tapp.use(cors());\n\t\t\t\t------------------------------\n\t\t- works now:##thenounsworksnow\n\t- test numerous collections (nouns and landscape photos)\n\t\t- backend: make route to load all, server.js:\n\t\t\t---------------------------------\n\t\t\tapp.get('/all', (req, res) => {\n\t\t\t\tres.send(siteData);\n\t\t\t});\n\t\t\t---------------------------------\n\t\t- test on frontend, App.js:\n\t\t\t---------------------------------------\n\t\t\tconst url = 'http://localhost:3007/all';\n\n\t\t\tconst [siteData, setSiteData] = useState({});\n\n\t\t\tsetSiteData((await axios.get(url)).data);\n\n\t\t\t{siteData.nouns.map((noun, i) => {\n\t\t\t---------------------------------------\n\t\t- error:##thebackenderrorsitedstata\n\t\t- but works in Postman:##testallwithpostman\n\t\t- solution: wait for data to load\n\t\t\t---------------------------------------\n\t\t\t{Object.entries(siteData).length === 0 ? (\n\t\t\t\t<div>Loading...</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t...\n\t\t\t\t</>\n\t\t\t)}\t\t\t\t\n\t\t\t---------------------------------------\n\t\t- show photos\n\t\t\t-------------------------------\n\t\t\tconst baseUrl = 'http://localhost:3007';\n\t\t\tconst url = `${baseUrl}/all`;\t\t\t\n\n\t\t\t<h1>Landscape Photos</h1>\n\t\t\t<div className=\"landscapePhotos\">\n\t\t\t\t{siteData.landscapePhotos.map((photo, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t<img src={`${baseUrl}/images/${photo}`} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t-------------------------------\n\t- create search machine for all items\n\t\t- create and show searchItems as test\n\t\t\t----------------------------------------------------------\n\t\t\tconst separator = '|';\n\n\t\t\tconst [searchItems, setSearchItems] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst siteData = (await axios.get(url)).data;\n\t\t\t\t\tconst _searchItems = [];\n\n\t\t\t\t\tsiteData.nouns.forEach(item => {\n\t\t\t\t\t\t_searchItems.push({\n\t\t\t\t\t\t\tkind: 'noun',\n\t\t\t\t\t\t\tbulkSearch: item.singular,\n\t\t\t\t\t\t\titem\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tsiteData.books.forEach(item => {\n\t\t\t\t\t\t_searchItems.push({\n\t\t\t\t\t\t\tkind: 'book',\n\t\t\t\t\t\t\tbulkSearch: item.title + separator + item.description,\n\t\t\t\t\t\t\titem\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tsetSearchItems(_searchItems);\n\n\t\t\t\t})();\n\t\t\t}, []);\t\t\t\n\n\t\t\t<h1>Search Items</h1>\n\t\t\t<div className=\"searchItems\">\n\t\t\t\t{searchItems.map((item, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t<b>{item.kind}</b>: {item.bulkSearch}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\t\t\t\n\t\t\t----------------------------------------------------------\n\t\t- make search box which shows items that match the bulkSearch field\n\t\t\t- App.css\n\t\t\t\t----------------------------------------------\n\t\t\t\th1 {\n\t\t\t\t\tmargin: 20px 0 10px 0;\n\t\t\t\t}\n\n\t\t\t\tinput.searchBox {\n\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\tmargin: 0 0 30px 0;\n\t\t\t\t}\n\n\t\t\t\tb {\n\t\t\t\t\tcolor: yellow;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t----------------------------------------------\n\t\t\t- App.js\n\t\t\t\t-------------------------------------------\n\t\t\t\tconst [filteredSearchItems, setFilteredSearchItems] = useState([]);\n\n\t\t\t\tsetFilteredSearchItems([]);\t\t\t\t\n\n\t\t\t\tconst handleSearch = (e) => {\n\t\t\t\t\tconst searchText = e.target.value;\n\t\t\t\t\tconst _filteredSearchItems = searchItems.filter(m => m.bulkSearch.toLowerCase().includes(searchText.toLowerCase()));\n\t\t\t\t\tsetFilteredSearchItems(_filteredSearchItems);\n\t\t\t\t}\t\t\t\t\n\n\t\t\t\t<h1>Info Search</h1>\n\t\t\t\t\t<input className=\"searchBox\" autoFocus onChange={(e) => handleSearch(e)} />\n\t\t\t\t<div className=\"searchItems\">\n\t\t\t\t\t{filteredSearchItems.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t\t<b>{item.kind}</b>: {item.bulkSearch}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t\t- finds both kinds of items:##findsbothkindsok\n\t\t\t- create components for book noun and book\n\t\t\t\t- convert to Sass: `npm i sass` and rename to scss, restart\n\t\t\t\t- App.scss\n\t\t\t\t-----------------------------------------------\n\t\t\t\t.item {\n\t\t\t\t\tbackground: #222;\n\t\t\t\t\twidth: 800px;\n\t\t\t\t\tpadding: 10px 20px 30px 20px;\n\t\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\t\tborder: 1px solid #444;\n\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t}\n\n\t\t\t\tlegend {\n\t\t\t\t\tcolor: rgb(237, 237, 137);\n\t\t\t\t}\n\n\t\t\t\t.book {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tpadding: 20px 30px;\n\n\t\t\t\t\timg {\n\t\t\t\t\t\theight: 200px;\n\t\t\t\t\t\tmargin-right: 20px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.info {\n\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------------\n\t\t\t- Noun.jsx\n\t\t\t\t-------------------------------------\n\t\t\t\texport const Noun = ({ item }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<fieldset className=\"item noun\">\n\t\t\t\t\t\t\t<legend>Noun</legend>\n\t\t\t\t\t\t\t{item.article} {item.singular}\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t);\n\t\t\t\t};\t\t\t\t\n\t\t\t\t-------------------------------------\n\t\t\t- Book.jsx\n\t\t\t\t----------------------------------------\n\t\t\t\texport const Book = ({ item }) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<fieldset className=\"item book\">\n\t\t\t\t\t\t\t<legend>Book</legend>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={`http://edwardtanguay.netlify.app/share/images/books/${item.idcode}.png`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t<div className=\"title\">{item.title}</div>\n\t\t\t\t\t\t\t\t<div className=\"description\">{item.description}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t----------------------------------------\n\t\t\t- App.jsx\n\t\t\t\t-----------------------------------------\n\t\t\t\t<div className=\"searchItems\">\n\t\t\t\t\t{filteredSearchItems.map((item, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{item.kind === 'noun' && (\n\t\t\t\t\t\t\t\t\t<Noun item={item.item} />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{item.kind === 'book' && (\n\t\t\t\t\t\t\t\t\t<Book item={item.item} />\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t\t- fix backspace to empty in searchbox:\n\t\t\t\t-------------------------------------\n\t\t\t\tif (searchText === '') {\n\t\t\t\t\t_filteredSearchItems = [];\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-------------------------------------\n\t\t- add rest of items\n\t\t\t- see code here: [edwardtanguay/howto-ejt-frontend-dern001](https://github.com/edwardtanguay/howto-ejt-frontend-dern001)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-20 23:40:54","systemWhoCreated":"systemUnknown"},{"id":571,"category":"Node","title":"Publish read-only Node/Express API at Heroku with frontend search engine site at Netlify","body":"- the goal of this howto is to do the following:\n\t- publish a Node/Express/API at Heroku and a Vite-React site at Netlify dealing with the issue of **getting the environment variables set correctly** locally (in the .env file) and online (as environment variables on the Heroku and Netlify providers) so that **the local frontend automatically uses the local backend** and **the online Netlify frontend automatically uses the online Heroku backend**\n\t- start with this project: [edwardtanguay.netlify.app/howtos?id=570](https://edwardtanguay.netlify.app/howtos?id=570)\n\t- this project consists of two code bases: \n\t\t- a backend Node/Express API which serves data fetched from various sources\n\t\t- a frontend React site which fetches its data from the backend\n\t- set up this project so that it works locally\n\t- publish the backend at Heroku\n\t\t- test with Postman\n\t\t- test with local frontend\n\t- publish the frontend at Netlify\n\t\t- enable online frontend to fetch data from online backend \n- **set up a parent directory that contains both backend and frontend projects**\n\t- create a directory under your projects folder called e.g. `howto-ejt-dern002`\n\t\t- note that you will create two folders under this called \n\t\t\t- `howto-ejt-backend-dern002`\n\t\t\t- `howto-ejt-frontend-dern002`\n\t\t- note that **ejt** should be your initials so that you have a uniquely named sites at Heroku and Netlify\n\t\t- note that app names at Heroku cannot exceed **30 characters**\n\t\t\t- \"backend-\" is 8 characters\n\t\t\t- therefore **the name of this local parent project should be no more than 23 characters**\n\t\t\t- e.g. `howto-ejt-dern002` is **17 characters**\n\t\t- Netlify url names have a much longer limite of 63 characters which is an Internet domain limit\n\t\t- planning the name of your backend/frontend project now will save you confusion later\n- **set up the backend**\n\t- create directory called e.g. `howto-ejt-backend-dern002` in parent directory\n\t- download this repository's files into it: [edwardtanguay/howto-ejt-backend-dern001](https://github.com/edwardtanguay/howto-ejt-backend-dern001)\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t\t- initial commit\n\t- `npm run dev`\n\t- backend should be running locally like this##backendhsouldlocal\n- **set up the frontend**\n\t- create directory called e.g. `howto-ejt-frontend-dern002` in parent directory\n\t- download this repository's files into it: [edwardtanguay/howto-ejt-frontend-dern001](https://github.com/edwardtanguay/howto-ejt-frontend-dern001)\n\t- `code .`\n\t- `npm i`\n\t- `git init`\n\t\t- initial commit\n\t- `npm run dev`\n\t- site should run and look like this, connecting to backend port number (3007), search works after 3rd character:##theshowandfront\n\t- fix key warning in browser console\n\t\t- `<React.Fragment key={i}>`\n- **publish backend to Heroku**\n\t- note at Heroku, you have a limit of 5 free apps\n\t\t- if you give them your credit card information, you won't be charged and will have a limit of 100 free apps\n\t\t- if you have reached your limit, delete an app now to make room for this app that we are publishing\n\t- push local repository to GitHub\n\t\t- e.g. my repo is here: [edwardtanguay/howto-ejt-backend-dern002](https://github.com/edwardtanguay/howto-ejt-backend-dern002)\n\t- log into [heroku.com](https://id.heroku.com/login)\n\t- [New]\n\t- [Create new app]\n\t- enter name, e.g. `howto-ejt-backend-dern002`\n\t- [Europe]\n\t- [Create app]##tehcreatappisail\n\t- [GitHub]\n\t- search for your app\n\t- [Connect]##okandapp2find\n\t- [Enable Automatic Deploys]\n\t- [Deploy Branch]##enabbanddeploy\n\t- [Overview]##tooverviewsdf\n\t- [Open app]\n\t- note the site works, but the url links are still displaying localhost:##partareok\n\t- solve url link problem by creating environment variables\n\t\t- create `.env` file in root\n\t\t\t----------------------------\n\t\t\tBASE_URL = http://localhost\n\t\t\t----------------------------\n\t\t- add the `.env` file to `.gitignore` file so it doesn't get checked into GitHub:#gif#theenvgirtnorn\n\t\t- server.js\n\t\t\t--------------------------------------------\n\t\t\timport dotenv from 'dotenv';\n\n\t\t\tdotenv.config();\n\t\t\tconst mode = process.env.MODE;\n\t\t\tconst baseUrl = process.env.BASE_URL;\n\t\t\tconst port = process.env.PORT;\n\t\t\tconst url = mode === 'development' ? `${baseUrl}:${port}` : baseUrl;\n\t\t\t--------------------------------------------\n\t- **(NOTE: if you need to debug an error occurring in your Heroku compilation)**\n\t\t- `heroku login`\n\t\t- `heroku logs -a howto-ejt-backend-dern002 --tail`\t\n\t\t- this will enable you to view log output during the compilation including exact errors that occurred:##seethelogisdfjk\n\t- push to GitHub\n\t\t- go to Heroku/Overview again and you will see \"Build in progress...Just now\"\n\t\t- when finished, click [Open app] again\n\t\t- note that baseUrl at Heroku is `undefined`\n\t\t\t- reason: there is no `.env` file at Heroku since it was not uploaded to GitHub\n\t\t\t- instead, we need to create matching environment variables at Heroku##theundefinjj\n\t- create environment variable `baseUrl` at Heroku\n\t\t- at Heroku, click on Settings and then [Reveal Config Vars]\n\t\t- enter `BASE_URL` and `howto-ejt-backend-dern002`:##thesetandsreveal\n\t- our backend routes now show correctly:##andnowitworksokdataapi\n- **publish frontend to Netlify**\t\n\t- test consuming Heroku backend from local frontend site\n\t\t- stop the local backend server\n\t\t- start the local frontend server which will not work since it has no access to the local backend:##nowonlyloading\n\t\t- change the base url to point to the online backend at Heroku\n\t\t\t-----------------------------------\n\t\t\t// const baseUrl = 'http://localhost:3007';\n\t\t\tconst baseUrl = 'https://howto-ejt-backend-dern002.herokuapp.com';\t\t\t\n\t\t\t-----------------------------------\n\t\t- the local frontend can use the online backend:##andcouworks\n\t- implement environment variables on frontend as we did on backend\n\t\t- create `.env` file and add an entry in `.gitignore` so that we don't push it to our GitHub repository\n\t\t\t--------------------------------------------\n\t\t\tVITE_BACKEND_URL = http://localhost:3007\t\t\n\t\t\t--------------------------------------------\n\t\t- NOTE: \n\t\t\t- In Vite, environment variables need to start with \"VITE_\"\n\t\t\t- And note, this is not the backend but the frontend. *\"Since any variables exposed to your Vite source code will end up in your client bundle, VITE_* variables should not contain any sensitive information.\"* \n\t\t\t- see: [vitejs.dev/guide/env-and-mode.html#env-files](https://vitejs.dev/guide/env-and-mode.html#env-files)\n\t\t- use environment variables in App.jsx\n\t\t\t------------------------------------\n\t\t\tconst backend_url = import.meta.env.VITE_BACKEND_URL;\n\n\t\t\tconst url = `${backend_url}/all`;\n\t\t\t------------------------------------\n\t- public site at Netlify\n\t\t- push code changes to GitHub\n\t\t\t- https://github.com/edwardtanguay/howto-ejt-frontend-dern002\n\t\t- login to [https://app.netlify.com](Netlify)\n\t\t- publish site\n\t\t\t- [Add new site]\n\t\t\t- [Import and existing project]\n\t\t\t- [GitHub]\n\t\t\t- search for e.g. \"dern\"\n\t\t\t- choose site, e.g. \"howto-ejt-frontend-dern002\"\n\t\t\t- leave all defaults and click [Deploy site]:##netfldefaulask\n\t\t\t- [Site settings]\n\t\t\t- [Change site name]\n\t\t\t- enter e.g. `howto-ejt-frontend-dern002`\n\t\t\t- click on live URL\n\t\t\t- notice it is just loading, since it doesn't have the backend URL:##nowonlyloadinj\n\t\t- add environment variable at Netlify to tell it where to find the Heroku backend\n\t\t\t- [Deploy settings]\n\t\t\t- [Environment]\n\t\t\t- [Edit variables]\n\t\t\t\t- Key: `VITE_BACKEND_URL`\n\t\t\t\t- Value: `https://howto-ejt-backend-dern002.herokuapp.com`##andnowatnetlvar\n\t\t\t- problem: the site still can't access the environment variable:##badonlinvie\n\t\t\t\t- solution: we need to redeploy the site so that it reads in the environment variables again:##triggerdeployde\n\t\t\t- after we redeploy, the site works accessing the backend:##worksandright","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-22 08:19:15","systemWhoCreated":"systemUnknown"},{"id":572,"category":"Heroku-Netlify","title":"Password-protected job app: read-only Node/Express API at Heroku with frontend at Netlify","body":"- this howto will show how to make a simple online job app\n\t- you add new jobs by adding .md files in a directory then push these to a GitHub repository\n\t- to access the jobs online you have to type in a password\n\t- this site could easily be a realistic app that you e.g. update via computer and use via smartphone\n- we will create two projects: a backend and a frontend\n\t- both projects will be made from scratch\n\t- backend \n\t\t- a Node/Express API that has one route `GET /jobs`\n\t\t- the request must have a variable called `password` with the correct password in it\n\t\t- the password is checked on the backend\n\t\t- the job data is only returned if the password is correct\n\t- frontend\n\t\t- a simply Vite React site which shows the title \"Jobs\"\n\t\t- it has one input box that asks for a password\n\t\t- when the user types in a password, it sends the password and fetches the jobs data\n\t\t- depending on if the password was correct, it will display the jobs data or an error message from the backend\n- code and sites for this project are here:\n\t- backend code: [edwardtanguay/ejt0-jobs-backend](https://github.com/edwardtanguay/ejt0-jobs-backend)\n\t- frontend code: [edwardtanguay/ejt0-jobs](https://github.com/edwardtanguay/ejt0-jobs)\n\t- backend site: https://ejt0-jobs-backend.herokuapp.com/jobs\n\t- frontend site: https://ejt0-jobs.netlify.app\n- set up this frontend/backend site locally\n\t- decide on names\n\t\t- site directory: `PROJECT-ejt0-jobs`\n\t\t\t- backend: `ejt0-jobs-backend`\n\t\t\t\t- backend URL will be: `https://ejt0-jobs-backend.herokuapp.com`\n\t\t\t- frontend: `ejt0-jobs`\n\t\t\t\t- frontend URL will be: `https://ejt0-jobs.netlify.app`\n\t- create site directory: `PROJECT-ejt0-jobs`\n- **setup basic backend and frontend that work together locally with test data**\n\t- backend setup: **ejt0-jobs-backend**\n\t\t- in site directory\n\t\t- `mkdir ejt0-jobs-backend`\n\t\t- `code ejt0-jobs-backend`\n\t\t- F1, navy (Peacock color: blue for backend)\n\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- enable ES6 modules: `\"type\":\"module\",`\n\t\t\t\t- development start script: `\"dev\": \"nodemon server.js\",`\n\t\t\t\t- Heroku start script: `\"start\": \"node server.js\"`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3021;\n\n\t\t\tapp.get('/jobs', (req, res) => {\n\t\t\t\tres.send([\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Job #1'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Job #2'\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\n\t\t- `npm i express`\n\t\t- `git init`, initial commit\n\t\t- .gitignore\n\t\t\t---------------------------------\n\t\t\tnode_modules\n\t\t\t---------------------------------\n\t\t- `npm run dev`\n\t- frontend setup: **ejt0-jobs**\n\t\t- in site directory\t\n\t\t- `npm create vite`\n\t\t\t- `ejt0-jobs`\n\t\t\t- react\n\t\t\t- react\n\t\t- `code ejt0-jobs`\n\t\t\t- F1, darkgreen (Peacock color: green for frontend)\n\t\t- minimize\n\t\t\t- src/Jobs.jsx\n\t\t\t\t----------------------------------------\n\t\t\t\timport './App.css'\n\n\t\t\t\tfunction App() {\n\t\t\t\t  return (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t  <h1>Jobs</h1>\n\t\t\t\t\t</div>\n\t\t\t\t  )\n\t\t\t\t}\n\n\t\t\t\texport default App\t\t\t\t\n\t\t\t\t----------------------------------------\n\t\t\t- src/App.css\n\t\t\t\t--------------------------------------\n\t\t\t\tbody {\n\t\t\t\t  background-color: #333;\n\t\t\t\t  color: #ccc;  \n\t\t\t\t  padding: 0 20px;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t- start\n\t\t\t- `npm i`\n\t\t\t- `npm run dev`\n\t\t- GitHub\n\t\t\t- `git init`\n\t\t\t- initial commit\n\t\t- add Sass\n\t\t\t- rename all .css to .scss\n\t\t\t- `npm i sass`\n\t\t\t- src/App.scss\n\t\t\t\t-------------------------------\n\t\t\t\tbody {\n\t\t\t\t  background-color: #333;\n\t\t\t\t  color: #ccc;\n\t\t\t\t  padding: 0 20px;\n\n\t\t\t\t  h1 {\n\t\t\t\t\tcolor: brown;\n\t\t\t\t  }\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-------------------------------\n\t\t- fetch and display data from backend\n\t\t\t- `npm i axios`\n\t\t\t- App.jsx\n\t\t\t\t----------------------------------------\n\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\timport axios from 'axios';\n\t\t\t\timport './App.scss';\n\n\t\t\t\tconst url = 'http://localhost:3021';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\tconst [jobs, setJobs] = useState([]);\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tsetJobs((await axios.get(url)).data);\n\t\t\t\t\t\t})();\n\t\t\t\t\t}, []);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>Jobs</h1>\n\t\t\t\t\t\t\t<p>There are {jobs.length} jobs.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\texport default App;\t\t\n\t\t\t\t----------------------------------------\n\t\t- cors problem:##thecorrsksjd\n\t\t- add cors to **backend**\n\t\t\t- `npm i cors`\n\t\t\t- server.js\n\t\t\t\t-----------------------------\n\t\t\t\timport cors from 'cors';\n\n\t\t\t\tapp.use(cors());\t\t\t\t\n\t\t\t\t-----------------------------\n\t- backend/frontend work together locally##backfrontandworkok\n- **publish frontend and backend to Heroku and Netlify so that app works online**\n\t- publish backend to Heroku\n\t\t- push changes to repository, e.g. to [edwardtanguay/ejt0-jobs-backend](https://github.com/edwardtanguay/ejt0-jobs-backend)\n\t\t- log into [Heroku](https://dashboard.heroku.com/apps)\n\t\t- [New]\n\t\t- [Create app]\n\t\t- `ejt0-jobs-backend`\n\t\t- Europe\n\t\t- [Create app]\n\t\t- [GitHub]\n\t\t- search for: `ejt0-jobs-backend`\n\t\t- [Connect]\n\t\t- [Enable Automatic Deploys]\n\t\t- [Deploy Branch]\n\t\t- Overview\n\t\t- when Deployed##whendeploysdj\n\t\t- [Open app]\n\t\t- error##theapperrrheko\n\t\t- debug like this:\n\t\t\t- `heroku login`\n\t\t\t- `heroku logs -a ejt0-jobs-backend --tail`\n\t\t- you then see all the logs from the Heroku server:##badheokserrror\n\t\t- we need to make the port dynamic, i.e. read it from an environment variable\n\t\t\t- `npm i dotenv`\n\t\t\t- server.js\n\t\t\t\t------------------------\n\t\t\t\timport dotenv from 'dotenv';\n\n\t\t\t\tdotenv.config();\n\t\t\t\tconst app = express();\n\t\t\t\tconst port = process.env.PORT;\t\t\t\t\n\t\t\t\t------------------------\n\t\t\t- .env\n\t\t\t\t-----------------------------\n\t\t\t\tPORT = 3012\n\t\t\t\t-----------------------------\n\t\t\t- .gitignore\n\t\t\t\t----------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.env\n\t\t\t\t----------------------------\n\t\t\t- commit \"added dynamic port\"\n\t\t\t- push changes to repository\n\t\t\t- Heroku starts rebuilding your project immediately##herokustartemim\n\t\t\t- when finished, [Open app]\n\t\t\t- this is correct since we have no `/` route:##thisiscorrr\n\t\t\t- but our `/jobs` route works:##butourworkssdf\n\t- publish frontend to Netlify\n\t\t- push changes to [edwardtanguay/ejt0-jobs](https://github.com/edwardtanguay/ejt0-jobs)\n\t\t- log in at [www.netlify.com](https://www.netlify.com)\n\t\t- [Add new site]\n\t\t- [Import existing project]\n\t\t- [GitHub]\n\t\t- search for: `ejt0-jobs` and choose frontend project (not backend)\n\t\t- accept all defaults, [Deploy site]\n\t\t- [Site settings]\n\t\t- [Change site name]\n\t\t- change to: `ejt0-jobs`\n\t\t- [Deploys]\n\t\t- click on URL, e.g.: https://ejt0-jobs.netlify.app\n\t\t- problem: there are 0 jobs:##therearezeroj\n\t\t- look in the browser console\n\t\t\t- problem: it's trying to connect our localhost from Netlify (!):##thebrowsandlook\n\t\t\t- solution: make an environment variable `BACKEND_URL` which is different for each environment:\n\t\t\t\t- local: **http://localhost:3021/jobs**\n\t\t\t\t- Netlify: **https://ejt0-jobs-backend.herokuapp.com/jobs**\n\t\t- implement environment variable BACKEND_URL\n\t\t\t- App.jsx\n\t\t\t\t---------------------------------\n\t\t\t\tconst backend_url = import.meta.env.VITE_BACKEND_URL;\n\n\t\t\t\tsetJobs((await axios.get(backend_url)).data);\n\t\t\t\t---------------------------------\n\t\t\t- .env\n\t\t\t\t----------------------------\n\t\t\t\tVITE_BACKEND_URL = http://localhost:3012/jobs\n\t\t\t\t----------------------------\n\t\t\t- add to .gitignore\n\t\t\t\t------------------------\n\t\t\t\t.env\n\t\t\t\t------------------------\n\t\t\t- test locally\n\t\t\t- commit \"implemented .env\"\n\t\t\t- push changes to GitHub\n\t\t\t- you see it's already building at Netlify:##alreadybuilsidfjsd\n\t\t- try online Netlify site again\n\t\t\t- problem: it's still 0:##stillkjsdkfat0\n\t\t\t- solution: we need to add the environment variable pointing to Heroku backend\n\t\t\t\t- [Deploy settings]\n\t\t\t\t- [Environment]\n\t\t\t\t- [Edit variables]\n\t\t\t\t- Key: `VITE_BACKEND_URL`\n\t\t\t\t- Value: e.g. `https://ejt0-jobs-backend.herokuapp.com/jobs`\n\t\t\t\t- [Save]\n\t\t- try online Netlify site again\t\t\n\t\t\t- problem: it's still 0:##stillkjsdkfat0\n\t\t\t- solution: after changing environment variables, we need to redeploy\n\t\t\t\t- [Deploys]\n\t\t\t\t- [Trigger Deploy], [Deploy Site]\n\t\t- try online Netlify site again##itworksdfijanadjiok\n- **TODO: add following features as detailed howto**\n\t- **1. add .md file feature**\n\t\t- allow developer to add .md files to src/data/jobs directory which are sent via the `/jobs` route as an array of objects containing HTML to display\n\t\t\t- download [edwardtanguay/livecode-ejt-backend-dern003](https://github.com/edwardtanguay/livecode-ejt-backend-dern003) and copy the /src/data/jobs/*.md files to /data/jobs\n\t\t- backend\n\t\t\t- also copy qtools from the same repository above to the root directory\n\t\t\t- server.js\n\t\t\t\t--------------------------------------\n\t\t\t\timport jobs from './models/jobs_mdFiles.js';\n\n\t\t\t    res.send(jobs);\n\t\t\t\t--------------------------------------\n\t\t\t- send this array as JSON in the /jobs route\n\t\t- frontend\n\t\t\t- App.jsx\n\t\t\t\t---------------------------------\n\t\t\t\t<p className=\"message\">There are {jobs.length} jobs.</p>\n\t\t\t\t{jobs.map((job, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"job\"\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: job.html }}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t---------------------------------\n\t\t\t- App.scss\n\t\t\t\t------------------------------------\n\t\t\t\tdiv.job {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tpadding: 5px 20px;\n\t\t\t\t\tmargin: 0 0 20px 0;\n\t\t\t\t\tborder-radius: 5px;\n\n\t\t\t\t\th1 {\n\t\t\t\t\t  color: orange;\n\t\t\t\t\t  margin-top: 10px;\n\t\t\t\t\t}\n\n\t\t\t\t\ta {\n\t\t\t\t\t  color: rgb(228, 228, 112);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.message {\n\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t------------------------------------\n\t- **2. password project site**\n\t\t- frontend\n\t\t\t- jobs no longer loaded with useEffect pageload\n\t\t\t- password input box\n\t\t\t- handlePasswordEntry\n\t\t\t\t- fetch `/jobs` and send password \n\t\t- backend\n\t\t\t- send jobs only if password is correct\n\t\t\t- password stored in environment variable, in clear text for now","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-23 07:36:42","systemWhoCreated":"systemUnknown"},{"id":573,"category":"SQL/NoSQL","title":"Understand the history and background of SQL and NoSQL databases","body":"- Today we have generally two kinds of databases, **SQL** and **NoSQL**, both being very much used in modern projects\n\t- SQL is older (1970s - today)\n\t- NoSQL is newer (2005 - today)\n\t- SQL is a solid, robust solution for saving data and allowing it to be easily queried, but around 2005 it became clear that it wasn't the best solution to handle **big data** and **distributed databases**\n\t\t- SQL is rigidly structured and centralized, saving data in rigid tables with **columns** and **rows** inside a database\n\t\t- NoSQL is more flexible, e.g. MongoDB saves loosely-structured blocks of JSON (called **documents**) in **collections** inside a database\n\t\t- **NoSQL** can save more complex data in a **collection** than **SQL** can save in a **table**##nownijsinjtable\n\t- today both SQL and NoSQL are well-established, both having many use-case scenarios\n\t\t- NoSQL is often used \n\t\t\t- for big data \n\t\t\t- for distributed data solutions\n\t\t\t- in scenarios where data is less structured, i.e. where each item doesn't necessary have the same fields or kinds of data\n\t\t- SQL is used in many classic scenarios\n\t\t\t- the LA**M**P stack uses (Linux, Apache, **MySQL**, PHP)\n\t\t\t- the .NET stack most commonly uses **SQL Server**\n\t\t\t- many content management platforms use **MySQL**, e.g. **Wordpress**\n\t\t\t- many projects and tutorials have **Postgresql** as their default database\n\t\t\t\t- Ben Awad: [Fullstack React GraphQL TypeScript Tutorial](https://www.youtube.com/watch?v=I6ypD7qv3Z8)\n\t\t\t- embedded IoT (Internet-of-Things) projects often use **SQLite** as a low-memory, file-based database\n\t\t\t\t- [Setting up SQLite lightweight database on Raspberry Pi](https://www.youtube.com/watch?v=OFi4qsoy0CM)\n\t\t\t- while Cloud platforms like AWS and Azure offer a range of NoSQL data services\n\t\t\t\t- **AWS** offers **RDS and Aurora** as SQL database services \n\t\t\t\t- **Azure** offers a service that it simply calles **SQL Database**, basically a Microsoft SQL Server in the cloud\n\t- there are typically about [3-4 times more SQL jobs](https://www.stepstone.de/5/job-search-simple.html?what=mysql&where=berlin&radius=30) than NoSQL jobs, and many jobs require knowledge and skills in both##thesqlnosqls\n\t- therefore modern developers should have experience with both SQL and NoSQL databases\n- a quick look at the difference between MongoDB and SQL query languages\n\t- [MongoDB Query Documents with SQL comparison](https://www.mongodb.com/docs/manual/tutorial/query-documents)\n\t- an example of sending queries to a SQLite database in DB Browser application:#gif#thesqlitetestshow\n- a historical timeline of NoSQL and SQL databases\n\t- **SQL** \n\t\t- a query language used in RDBMS (Relational Database Management Systems) aka \"relational databases\"\n\t\t- 1970s created as query language used in various database implementations\n\t\t\t- various syntaxes\n\t\t- 1979 **Oracle**\n\t\t- 1986/1989 first standards\n\t\t- 1989 Microsoft **SQL Server**\n\t\t- **1992 major standard: [SQL-92]**\n\t\t\t- SQL-92 became the basic standard of SQL: https://learnsql.com/blog/history-of-sql-standards\n\t\t\t- today the basic commands of SQL are the same for the most popular SQL database\n\t\t\t\t- SQL Server: `SELECT * FROM Employees WHERE age > 55 ORDER BY LastName`\n\t\t\t\t- MySQL: `SELECT * FROM Employees WHERE age > 55 ORDER BY LastName`\n\t\t\t- but SQL in applications is usually written for a specific database and can rarely be copy and pasted to be used in other SQL databases with out modificiation\n\t\t\t\t- SQL Server: `SELECT TOP 10 * FROM Employees`\n\t\t\t\t- MySQL: `SELECT * FROM Employees LIMIT 10`\n\t\t- 1995 **MySQL**\t\n\t\t\t- when Oracle aquired MySQL in 2009, a fork of MySQL called **MariaDB** was created \n\t\t\t- today these two databases are basically the same:\n\t\t\t\t- MySQL is owned and supported by Oracle\n\t\t\t\t- MariaDB is developed by the community and managed by the MariaDB Foundation\n\t\t\t- if you have skills in MySQL then you have skills in MariaDB, and visa versa\n\t\t- 1996 **PostgreSQL**\n\t\t\t- how to [pronounce PostgreSQL](https://www.youtube.com/watch?v=PG_0BBmVDok)\n\t\t\t\t- **[POST-gress]** (most common)\n\t\t\t\t- [post-GRESS-kyew-ell]\n\t\t\t\t- [post-gress-SEE-kwell]\n\t\t- 2000 **SQLite**\n\t\t\t- file-based\n\t\t\t- no installation\n\t\t\t- simplistic but SQL-92 compatible\n\t\t- problems with SQL\n\t\t\t- 1. you have to **map** the **objects** in your code to the rigid **relatonal** tables in your SQL databases, hence ORMs (**Object Relational Mapping**)\n\t\t\t\t- **Sequelize** for MySQL/MariaDB, Postgres, SQLite but also SQL Server\n\t\t\t\t- **Hibernate** for Oracle (Java projects)\n\t\t\t\t- **Entity Framework** and **NHibernate** for SQL Server (.NET projects)\n\t\t\t- 2. can't easily represent rich documents (e.g. curriculum.json)\n\t\t\t- 3. doesn't scale well with distributed systems (e.g. big data)\n\t- **NoSQL** \n\t\t- solved all three of the problems of SQL \n\t\t- 2003 **memcached**\n\t\t\t- provides a very large hash table distributed across multiple machines\n\t\t- 2005 Google's **Big Table**\n\t\t\t- wide-column and key-value NoSQL database service \n\t\t\t- wide-column: has tables, rows, and columns like RDBMS but columns can vary, e.g. with \"column families\"\n\t\t- 2005 **CouchDB**\n\t\t\t- saves JSON documents, similar to MongoDB\n\t\t- 2007 **MongoDB**\n\t\t\t- CouchDB is good for pre-defined queries where MongoDB is better for dynamic queries\n\t\t- 2007 **Neo4J**\n\t\t\t- graph database: to map the hierarchical and complex relationships of the data structures with fast data analytics\n\t\t- 2008 Apache **HBase**\n\t\t\t- modeled after Google's Big Table\n\t\t- 2008 Facebook's **Cassandra**\n\t\t\t- Amazon's answer to Google's Big Table\n\t\t\t- designed to handle large amounts of data distributed across many servers\n\t\t\t- provides high availability with no single point of failure\n\t\t- 2009 **Redis** - most popular key-value database\n\t\t- 2010 **Elasticsearch** - full-text search engine based on JSON documents\n\t\t- 2012 **DynamoDB** - Amazon's NoSQL cloud database service that supports key-value and document data structures","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-26 21:11:19","systemWhoCreated":"systemUnknown"},{"id":574,"category":"SQLite","title":"How to install DB Browser for SQLite on Windows and Ubuntu and retrieve/change data in an SQLite database","body":"- **install DB Browser for SQL on Windows**\n\t- install\n\t\t- go to the [DB Browser download page](https://sqlitebrowser.org/dl)\n\t\t- click the download link##downlodbdb\n\t\t- double-click on the downloaded msi file##doudoubddb\n\t\t- next, accept, next, next, next, install, finish\n\t\t- find in C:\\Programs, right-click and attach to task bar##rightclickandattachto\n\t\t- click on the icon in the taskbar to open it, should look like this:##shoulddbdb\n\t- test\n\t\t- download test SQLite database file here: [edwardtanguay.netlify.app/share](https://edwardtanguay.netlify.app/share)\n\t\t- right-click and download this zip file:##gotothedodb\n\t\t- unzip the SQLite file and put it in your project directory in a new directory named e.g. `c:\\test-sqlite`\n\t\t- in the DB Browser application, click on [Open Database], go to e.g. `c:\\test-sqlite` and click on the file named `northwind_database.sqlite`\n\t\t- you should see tables shown here:##seetablesok\n- **install DB Browser for SQL on Ubuntu**\n\t- prepare installation\n\t\t- `sudo add-apt-repository -y ppa:linuxgndu/sqlitebrowser`\n\t\t- `sudo apt-get update`\n\t- install\n\t\t- `sudo apt-get install sqlitebrowser`\n\t\t- click on 9-dots icon in lower-left and add DB Browser for SQLite to favorites##addtofavdbubun\n\t\t- download test SQLite database file here: [edwardtanguay.netlify.app/share](https://edwardtanguay.netlify.app/share)\n\t\t- right-click and download this zip file:##gotothedodb\n\t\t- unzip the downloaded .zip file\n\t\t- copy the file `northwind_database.sqlite` to e.g. `~/home/edward/projects/test-sqlite`\n\t\t- in the DB Browser application, click on [Open Database], go to your `test-sqlite` directory and click on the file named `northwind_database.sqlite`\n\t\t- it should look like this:##shouldlooklikei\n- **learn basic SQL CRUD commands**\n\t- **Read** data\n\t\t- click on the [Execute SQL] table and type: `SELECT * FROM Employees` then press F5 to execute:##thefirsssql\n\t\t- then try these self-explanatory commands and see what they do:\n\t\t\t---------------------------------------------\n\t\t\tSELECT * FROM Employees WHERE BirthDate > '1960-01-01'\n\t\t\tSELECT * FROM Employees WHERE BirthDate > '1960-01-01' ORDER BY BirthDate\n\t\t\tSELECT * FROM Employees WHERE BirthDate > '1960-01-01' ORDER BY BirthDate DESC\n\t\t\tSELECT FirstName, LastName, BirthDate FROM Employees WHERE BirthDate > '1960-01-01' ORDER BY BirthDate DESC\n\t\t\t---------------------------------------------\n\t- **Create** a table\n\t\t- execute CREATE TABLE command with an autoincrementing ID, title and body \n\t\t\t----------------------------------------------\n\t\t\tCREATE TABLE \"Notes\" (\n\t\t\t\t\"id\"\tINTEGER NOT NULL,\n\t\t\t\t\"title\"\tTEXT,\n\t\t\t\t\"body\"\tTEXT,\n\t\t\t\tPRIMARY KEY(\"id\" AUTOINCREMENT)\n\t\t\t)\t\t\t\n\t\t\t----------------------------------------------\n\t- **Insert** records\n\t\t- insert a note\n\t\t\t-------------------------------------------------------------\n\t\t\tINSERT INTO Notes (title,body) VALUES (\"First Note\", \"This is the first note.\")\n\t\t\t-------------------------------------------------------------\n\t\t- list out all notes\n\t\t\t---------------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------------\t\t\n\t\t- insert another note\n\t\t\t-------------------------------------------------------------\n\t\t\tINSERT INTO Notes (title,body) VALUES (\"Second Note\", \"This is the second note.\")\n\t\t\t-------------------------------------------------------------\n\t\t- list out all notes\n\t\t\t---------------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------------\n\t- **Delete** a record\n\t\t- delete the first note\n\t\t\t----------------------------------------------\n\t\t\tDELETE FROM Notes WHERE id = 1\n\t\t\t----------------------------------------------\n\t\t- show that only the second note remains\n\t\t\t---------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------\n\t- **Update** a record\n\t\t- update the second note\n\t\t\t-----------------------------------------\n\t\t\tUPDATE Notes SET title = 'Changed Second Note' WHERE id = 2\n\t\t\t-----------------------------------------\n\t\t- show that the second note's title has changed\n\t\t\t---------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------\n- **learn advanced JOIN commands**\n\t- tables in SQL tables are typically related by the primary and foreign keys\n\t- the Northwind database is a good example of tables related by primary and foreign keys:##theforprimkeys\n\t- query data with these relationships using JOIN:\n\t\t-----------------------------------------------------------------\n\t\tSELECT * FROM Employees\n\t\tSELECT * FROM EmployeeTerritories\n\t\tSELECT * FROM Employees AS e JOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID FROM Employees AS e JOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\t-----------------------------------------------------------------\n\t- now join the Terroritories table\n\t\t-----------------------------------------------------\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID,t.TerritoryDescription FROM Employees AS e \n\t\tJOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tJOIN Territories AS t ON et.TerritoryID = t.TerritoryID\n\t\t-----------------------------------------------------\n\t- now only get the information for one employee\n\t\t---------------------------------------------\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID,t.TerritoryDescription FROM Employees AS e \n\t\tJOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tJOIN Territories AS t ON et.TerritoryID = t.TerritoryID\n\t\tWHERE e.EmployeeID = 1\n\t\t---------------------------------------------\n\t- the final query will show the join data from three tables:##thejoindone","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-26 23:21:50","systemWhoCreated":"systemUnknown"},{"id":575,"category":"SQLite","title":"Create read-only Node/Express API that provides data from an SQLite database","body":"- this howto will show you how to make a local backend API that displays data from a local SQLite database using SQL commands\n\t- full code is here: [edwardtanguay/ejt-emp-cust-api](https://github.com/edwardtanguay/ejt-emp-cust-api)\n\t- the final API will work something like this:#gif#theapiokgifdo\n- set up base API\n\t- `mkdir ejt-emp-cust-api`\n\t- `code ejt-emp-cust-api`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- enable ES6 modules: `\"type\":\"module\",`\n\t\t\t\t- development start script: `\"dev\": \"nodemon server.js\",`\n\t\t\t\t- start script (e.g. for Heroku): `\"start\": \"node server.js\"`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3022;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('test api');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n- setup documentation page on main route\n\t- server.js\n\t\t-------------------------------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send(`\n\t\t\t\t<style>\n\t\t\t\tli {\n\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t}\t\n\t\t\t\t</style>\n\t\t\t\t<h1>Employee/Customer API</h1>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"http://localhost:${port}/employees\">http://localhost:${port}/employees</a> = all employees</li>\n\t\t\t\t\t<li><a href=\"http://localhost:${port}/employees/23\">http://localhost:${port}/employees/23</a> = employee with ID 23</li>\n\t\t\t\t\t<li><a href=\"http://localhost:${port}/employees-territories/23\">http://localhost:${port}/employees-territories/23</a> = territories of employee with ID 23</li>\n\t\t\t\t</ul>\n\t\t\t`);\n\t\t});\n\t\t-------------------------------------------------\n\t- in your browser, localhost:3023 should look like this:##theempcustapi\n- get the Northwind SQLite database\n\t- download from https://edwardtanguay.netlify.app/share\n\t- download zip\n\t- unpack as `northwind_database.sqlite`\n\t- create directory \"data\" and copy to `data/northwind_database.sqlite`\n\t- open this file in DB Browser##theopedbok\n- download and set up qtools\n\t- these are \"quick tools\" that enable you to, among other things, easily connect to and retrieve data from a local SQLite database\n\t- create `qtools` directory in project\n\t- download project as zip file: https://github.com/edwardtanguay/qtools\n\t- unzip the directory\n\t- copy all .js files to `qtools` in your project:##alljsfilestoqtools\n\t- open **package.json** file from qtools download\n\t\t- copy all dependencies to your projects package.json file##copzallente\n\t- `npm i`\n\t- qtools has many functions which can do more than read SQLite database files, but this is what we will use it for\n- in server.js, create route `/employees` and return all employees as JSON\n\t- create dummy data to test sending JSON first\n\t\t------------------------------------------\n\t\timport * as qsql from './qtools/qsql.js';\n\n\t\tapp.get('/employees', (req, res) => {\n\t\t\tconst employees = [\n\t\t\t\t{\n\t\t\t\t\tname: \"emp1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"emp2\"\n\t\t\t\t}\n\t\t\t];\n\t\t\tres.send(employees);\n\t\t}\t\t\n\t\t------------------------------------------\n\t- in your browser, the route output the following JSON:##themployeeemp1\n- change `/employees` route to output data from SQLite database as JSON \n\t- qsql.js: change path and file name to database\n\t\t-----------------------------------\n\t\tconst absoluteDbPathAndFileName = qsys.buildSystemAbsolutePathAndFileName(\n\t\t\t'data/northwind_database.sqlite'\n\t\t);\t\t\n\t\t-----------------------------------\n\t- server.js: call sqlite functions to get data from databaes, notice the `async` and `await` keywords\n\t\t-------------------------------\n\t\tapp.get('/employees', async (req, res) => {\n\t\t\tconst employees = await qsql.getRecordsWithSql(\"SELECT * FROM Employees\");\n\t\t\tconsole.log(employees);\n\t\t\tres.send(employees);\n\t\t});\t\t\n\t\t-------------------------------\n\t- your route should now print out the following nine employee objects:##shouldnowninee\n\t- change the SQL command to only output objects with the properties:\n\t\t- id\n\t\t- fullName\n\t\t- title\n\t\t- notes\n\t- first map EmployeeID to id:\n\t\t- server.js\n\t\t\t-------------------------------------------\n\t\t\tconst employees = await qsql.getRecordsWithSql(`\n\t\t\t\tSELECT \n\t\t\t\tEmployeeID as id\n\t\t\t\tFROM Employees\n\t\t\t`);\n\t\t\t-------------------------------------------\n\t\t- this outputs the following:##idmappedabout\n\t- map the rest of the fields:\n\t\t---------------------------------------------------\n\t\tapp.get('/employees', async (req, res) => {\n\t\t\tconst employees = await qsql.getRecordsWithSql(`\n\t\t\t\tSELECT \n\t\t\t\tEmployeeID as id,\n\t\t\t\tFirstName || ' ' || LastName as fullName,\n\t\t\t\tTitle as title,\n\t\t\t\tNotes as notes\n\t\t\t\tFROM Employees\n\t\t\t`);\n\t\t\tres.send(employees);\n\t\t});\t\t\n\t\t---------------------------------------------------\n\t- your /employees route output will now look like this:##thefullroutenow\n- create `/employees/:id` route\n\t----------------------------------------------------\n\tapp.get('/employees/:id', async (req, res) => {\n\t\tconst id = req.params.id;\n\t\tconst employees = await qsql.getRecordsWithSql(`\n\t\t\tSELECT \n\t\t\tEmployeeID as id,\n\t\t\tFirstName || ' ' || LastName as fullName,\n\t\t\tTitle as title,\n\t\t\tNotes as notes\n\t\t\tFROM Employees\n\t\t\tWHERE EmployeeID = ${id}\n\t\t`);\n\t\tres.send(employees[0]);\n\t});\n\t----------------------------------------------------\n\t- the output will look like this:##theonerecoooo\n- create `/employees-territories/:id` route\n\t----------------------------------------------------\n\tapp.get('/employees-territories/:id', async (req, res) => {\n\t\tconst id = req.params.id;\n\t\tconst records = await qsql.getRecordsWithSql(`\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID,t.TerritoryDescription FROM Employees AS e\n\t\tJOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tJOIN Territories AS t ON et.TerritoryID = t.TerritoryID\n\t\tWHERE e.EmployeeID = ${id}\n\t\t\t`);\n\t\tconst obj = {\n\t\t\tname: records[0].FirstName + ' ' + records[0].LastName,\n\t\t\tterritories: records.map(m => m.TerritoryDescription.trim())\n\t\t}\n\t\tres.send(obj);\n\t});\n\t----------------------------------------------------\n\t- the output will look like this:##thelastterris","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-27 07:03:32","systemWhoCreated":"systemUnknown"},{"id":577,"category":"MySQL","title":"Install MySQL and MySQL Workbench on Windows and import Northwind database","body":"- this howto will help you get the following installed on Windows, in my case on Windows 10\n\t- MySQL Server\n\t- MySQL Workbench\n- **note that these instructions include working through at least 3 problems during the installation which I left in the instructions in case you experience them as well**\n- check to see if MySQL is already installed\n\t- check if there are any instances of MySQL server or tools such as Workbench installed:##mysqlinstllll\n\t- check `C:\\Program Files (x86)\\MySQL\\MySQL Installer for Windows`##myinstall1\n\t- check `C:\\Program Files\\MySQL`##myinstall22\n\t- delete all instances of MySQL and its software\n\t\t- in deinstall/install programs, delete all instances with right-click > uninstall:##deeletemyyy\n\t\t- when they are all gone:##nowgonenn\n\t\t- check the directories again:\n\t\t\t- delete the empty: `C:\\Program Files\\MySQL`\n\t\t- MySQL should now be completely removed from your system\n- Install MySQL Server\n\t- install MySQL server \n\t\t- go to: https://dev.mysql.com/downloads/mysql\n\t\t- download the MSI installer:##thewinanddownok\n\t\t- download the larger msi file:##thetheclicklarger\n\t\t- click **No thanks, just start my download.**##thenothanks\n\t\t- execute the downloaded file to begin the install\n\t\t- Developer Default\n\t\t- Execute\n\t\t- Next, Yes\n\t\t- Execute, takes about 10 minutes##thewininstalformy\n\t\t- Next 5x\n\t\t- root password: \"rootroot\" (for testing)\n\t\t- Next\n\t\t- Execute\n\t\t- Next, Next\n\t\t- connect to server:##thefserverok\n\t\t- Next\n\t\t- Execute\n\t\t\t- got this error:##theerrortaking \n\t\t\t\t- Cancel\n\t\t\t- it continued on, had to check this box, and this connection failed:##butthefailed\n\t\t\t- couldn't start it in Services either:##couldksdj\n\t\t- restarted computer\n\t\t\t- still can't start it automatically\n\t\t\t- removing everything again, now lots more to deinstall##nowlots\n\t\t\t\t- also deleted `C:\\ProgramData\\MySQL` this time\n\t\t\t- restarted computer\n\t\t\t- reinstalling from beginning\n\t\t\t\t- restarted: mysql-installer-community-8.0.29.0.msi\n\t\t\t\t- this time it worked, I think it was because I deleted `C:\\ProgramData\\MySQL` since it asked me for a password again:##thistimeworkedsdf\n\t\t- it started the workbench:##thewowowowk\n\t\t- and it started the shell##anditshell\n- test access to MySQL at command line\n\t- Windows explorer: `C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin`\n\t- shift-right-click to Powershell\n\t- `./mysql -root -p`\n\t- log in as root\n\t\t- can't log in with password given (rootroot)##passwordbadkj\n\t\t- you need to specify \"u\" in the command since ODBC is the default user somehow \n\t\t\t- `./mysql -u root -p`##theuuuand\n\t\t- show databases:##dotheshowddd\n\t- log out with `quit`\n- set environment variable so you can access MySQL from the terminal in any directory\n\t- in system path, add: `C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin`##tehenvinin\n- set up Northwind database tables in database\n\t- create directory: `c:\\projects\\setupNorthwind`\n\t- `mysql -u root -p`##loggedinokok\n\t- create a webuser that only has access to read the database\n\t\t- see what users are in system\n\t\t\t- `SELECT User FROM mysql.user;`\t\n\t\t- `CREATE USER webuser@localhost IDENTIFIED BY 'passpass';`\n\t\t\t- `GRANT SELECT on northwind.* TO webuser@localhost;`\n\t\t- see what users are in system now\n\t\t\t- `SELECT User FROM mysql.user;`\t\n\t- install northwind database into mysql\n\t\t- https://github.com/dalers/mywind\n\t\t- unpack and copy files to `c:\\projects\\setupNorthwind`\n\t\t\t- northwind.sql\n\t\t\t- northwind-data.sql##thewtosssl\n\t\t- `SHOW DATABASES;`\n\t\t- `CREATE DATABASE northwind;`\n\t\t- `SHOW DATABASES;`\n\t\t- import method that causes UTF-8 problems:\n\t\t\t- `USE northwind;`\n\t\t\t- `SOURCE northwind.sql;`\n\t\t\t- `SHOW TABLES;`\n\t\t\t- `SELECT * FROM customers;` (empty)\n\t\t\t- `SOURCE northwind-data.sql;`\n\t\t\t- `SELECT * FROM customers;`\n\t\t\t- `SELECT company,last_name,first_name FROM customers;`##thebadutf\n\t\t- exit\n- open and test MySQL Workbench\n\t- Windows icon, \"workbench\", start program\n\t- connect to MySQL database\n\t\t- get this error, that path is set in environment##getthikksj\n\t\t- changed port from 3307 to standard 3306 and it worked##changed2206\n\t\t- note that the UTF-8 characters are bad in the MySQL Workbench as well:##theotherbadkjkj\n- delete northwind database and reimport with correct UTF-8 encoding\n\t- delete database:##deleteththedata\n\t- in terminal again\n\t\t- log in again: `mysql -u root -p`\n\t\t- `create database northwind;`\n\t\t- `quit;`\n\t\t- import with UTF-8 encoding\n\t\t\t-------------------------------------------------\n\t\t\tmysql -u root -p -e \"source northwind.sql\" northwind --default-character-set=UTF8\n\t\t\tmysql -u root -p -e \"source northwind-data.sql\" northwind --default-character-set=UTF8\n\t\t\t-------------------------------------------------\n\t\t- log in again: `mysql -u root -p`\n\t\t- `use northwind;`\n\t\t- `SELECT company,last_name,first_name FROM customers;`\n\t\t- you can see that some of the characters are correctly displayed in the terminal:##halfokoknow\n\t\t- but in the workbench, they are all correctly displayed now:##mysqlchar7t8oko","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-28 01:00:50","systemWhoCreated":"systemUnknown"},{"id":578,"category":"MySQL","title":"Install MySQL and MySQL Workbench (and DBeaver) on Ubuntu and import Northwind database","body":"- these instructions will show you how to\n\t- install MySQL on Ubuntu\n\t- install MySQL Workbench to manage your MySQL databases\n\t\t- since one time that I installed Workbench on Linux the character encoding was broken, I also show how to install an alternative MySQL manager: DBeaver\n- make sure you don't already have MySQL installed\n\t- `mysql -V`##nomysqlwithv\n- install MySQL\n\t- `sudo apt update`\n\t\t- 30 seconds\n\t- `sudo apt install mysql-server`\n\t\t- 3 minutes\t\n\t- secure the MySQL server as you would when you have the server in production\n\t\t- `sudo mysql`\n\t\t- `ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootroot';`\n\t\t\t- note: the password **rootroot** is for testing, change accordingly to your purposes\n\t\t- `quit`\n\t\t- `sudo mysql_secure_installation`##theanonanon\n\t\t\t- remove anonymous users\n\t\t\t- disallow root remotely\n\t\t\t- remove test databases\n\t\t\t- reload privilege tables\n\t\t\t- note that mysql database is secure, even root user needs mysql password##therootroottry\n- **import the Northwind database** into MySQL server\n\t- make directory `~/northwindSetup`\n\t- https://github.com/dalers/mywind\n\t- unpack and copy files to `~/northwindSetup`\n\t\t- northwind.sql\n\t\t- northwind-data.sql\n\t- `SHOW DATABASES;`\n\t- `CREATE DATABASE northwind;`\n\t- `SHOW DATABASES;`\n\t- `USE northwind;`\n\t- `SOURCE northwind.sql;`\n\t\t- 1 minute\n\t- `SHOW TABLES;`\n\t- `SELECT * FROM customers;` (empty)\n\t- `SOURCE northwind-data.sql`\n\t\t- 5 minutes\n\t- `SELECT * FROM customers;`\n\t- `SELECT company,last_name,first_name FROM customers;`##showingcorrectutttf8\n\t- exit\n- create secure webuser that only has read rights to the northwind database\n\t- `SELECT User FROM mysql.user;`\n\t- `CREATE USER webuser@localhost IDENTIFIED BY 'passpass';`\n\t- `revoke all privileges on *.* from webuser@localhost;`\n\t- `GRANT SELECT on *.* TO webuser@localhost`\n\t- `ALTER USER webuser@localhost IDENTIFIED WITH mysql_native_password BY 'passpass';`\n\t- `SELECT User FROM mysql.user;`\n- access with webuser to show it only has read rights\n\t- `mysql -u webuser -p`\n\t- `SHOW DATABASES;`\n\t- `use northwind;`\n\t- `SHOW TABLES;`\n\t- `SELECT * FROM products;`\n\t- `DESCRIBE products;`\n\t- `SELECT id,product_name FROM products;`\n\t- `INSERT INTO products (product_name) VALUES (\"Product 888\");` (command denied to user)\n- install MySQL management console applications\n\t- **install MySQL Workbench**\n\t\t- `snap install mysql-workbench-community`\n\t\t- Show Applications\n\t\t\t- add to favorites\n\t\t\t- open##thworkworkbenc\n\t\t- set up connection for webuser\n\t\t\t- get error: **An AppArmor policy prevents this sender from sending this message to this recipient**\n\t\t\t- problem: snap application is sandboxed\n\t\t\t- fix: `sudo snap connect mysql-workbench-community:password-manager-service :password-manager-service`\n\t\t- log in as webuser##thewebwebuserok\n\t\t- during one install, my MySQL Workbench had issue with UTF-8 encoding on Ubuntu:##worksbenchubuntuchars\n\t- **install DBeaver**\n\t\t- `sudo snap install dbeaver-ce`\n\t\t- add to favorites\n\t\t- open\n\t\t- yes to create sample database\n\t\t\t- allow it to download SQLite drivers\n\t\t\t- explore database##theveavsdf\n\t\t- connect to MySQL database\n\t\t\t- Database\n\t\t\t- New Database Connection\n\t\t\t- enter credentials for webuser\n\t\t\t- open database\n\t\t\t\t- allow to download MySQL drivers\n\t\t- explore tables##explorerbeave\n\t\t- build SQL commands##employeesubuntubeaver","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-28 01:48:09","systemWhoCreated":"systemUnknown"},{"id":579,"category":"MySQL","title":"Create Node/Express API that reads data from a MySQL database","body":"- this howto will show you how to make a local backend API that displays data from a local MySQL database using SQL commands\n\t- full code is here: [edwardtanguay/ejt-emp-cust-api-mysql](https://github.com/edwardtanguay/ejt-emp-cust-api-mysql)\n- before you start, make sure you have MySQL installed and the Northwind database created, use these howtos for Windows and Ubuntu if necessary:\n\t- [Install MySQL and MySQL Workbench on Windows and import Northwind database](https://edwardtanguay.netlify.app/howtos?id=577)\n\t- [Install MySQL and MySQL Workbench (and DBeaver) on Ubuntu and import Northwind database](https://edwardtanguay.netlify.app/howtos?id=578)\n- as a security measure, we will create a specific MySQL user that only has read rights to a specific database\n- here is the main route showing how it connects to the MySQL database, and the data that it sends:##showtheapipi\n- set up base API\n\t- `mkdir ejt-emp-cust-api-mysql`\n\t- `code ejt-emp-cust-api-mysql`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- enable ES6 modules: `\"type\":\"module\",`\n\t\t\t\t- development start script: `\"dev\": \"nodemon server.js\",`\n\t\t\t\t- start script (e.g. for Heroku): `\"start\": \"node server.js\"`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3022;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('test api');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n- add route that retrieves data from MySQL database\n\t- first set up a user in the MySQL database that only has read access to the Northwind database, e.g. can only use the SELECT command in that one database\n\t\t- `CREATE USER webuser@127.0.0.1 IDENTIFIED BY 'passpass';`\n\t\t- `GRANT SELECT on *.* TO webuser@127.0.0.1`\n\t\t- `ALTER USER webuser@127.0.0.1 IDENTIFIED WITH mysql_native_password BY 'passpass';`\n\t- in server.js\n\t\t- `npm i mysql`\n\t\t- add route\n\t\t\t---------------------------------------\n\t\t\tapp.get('/customers', (req,res) => {\n\t\t\t\tconst connection = mysql.createConnection({\n\t\t\t\t\thost: 'localhost',\n\t\t\t\t\tuser: 'webuser',\n\t\t\t\t\tpassword: 'passpass',\n\t\t\t\t\tdatabase: 'northwind'\n\t\t\t\t});\n\t\t\t\tconnection.connect((err) => {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tconst sql = 'SELECT company,last_name,first_name FROM customers';\n\t\t\t\t\tconnection.query(sql, (err, records) => {\n\t\t\t\t\t\tif (err) throw err;\n\t\t\t\t\t\tres.send(records);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------\n\t- now shows data:##nowshowskjdkfdata\n- put sensitive data in .env file\n\t- .gitignore\n\t\t- add `.env`\n\t- .env file\n\t\t---------------------------------------\n\t\tUSER = webuser\n\t\tPASSWORD = passpass\n\t\t---------------------------------------\n\t- `npm i dotenv`\n\t- add to server.js\n\t\t------------------------------------\n\t\timport dotenv from 'dotenv';\n\n\t\tdotenv.config();\n\n\t\tuser: process.env.USER,\n\t\tpassword: process.env.PASSWORD,\t\n\t\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-28 01:56:08","systemWhoCreated":"systemUnknown"},{"id":580,"category":"Sequelize","title":"Create Node/Express CRUD API that stores data in a SQLite database using the Sequelize ORM","body":"- in this howto we are going to build a CRUD API which allows a client to add, delete, edit and get flashcards\n\t- these flashcards will be saved in an SQLite database\n\t- in order to avoid the need to create SQL statements such as CREATE TABLE, SELECT, INSERT INTO, DELETE and UPDATE, we use an ORM which simplies this work for us\n\t\t- there are many SQL ORMs to use such as [Knew.js](https://knexjs.org), [Sequelize](https://sequelize.org), [TypeORM](https://typeorm.io) and [Prisma](https://www.prisma.io)\n\t\t- in this project we will use Sequelize which has it's advantages and disadvantages\n\t\t\t- quit up-to-speed time for basic Object-to-SQL mapping\n\t\t\t- lack of ES6 module support\n\t- full code is here: [edwardtanguay/howto-ejt-sequelize-api](https://github.com/edwardtanguay/howto-ejt-sequelize-api)\n- **set up a basic API**\n\t- `mkdir howto-ejt-sequelize-api`\n\t- `code howto-ejt-sequelize-api`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- Sequelize doesn't natively support ES6 modules so no need to do this:\n\t\t\t\t\t- `\"type\":\"module\",`\n\t\t\t\t- create start script: `\"dev\": \"nodemon server.js\",`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3022;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('<h1>Flashcard API</h1>');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n\t\t\t- you should see \"Flashcard API\" in your browser\n- **set up Sequelize with SQLite**\n\t- create an empty SQLite database called `data/main.sqlite`\n\t\t- create `data` directory in project\n\t\t- copy path to this\n\t\t- in DB Browser for SQLite\n\t\t\t- [New Database]\n\t\t\t- (paste path)\n\t\t\t- `main.sqlite`\n\t\t\t- create dummy table and delete so that you can save the empty SQLite file\n\t\t\t- [Write Changes]##tehsaveempty\n\t- install Sequelize and driver for SQLite\n\t\t- Sequelize gives you one interface to save data to [https://sequelize.org/docs/v6/getting-started](various SQL databases)##choosethedatabase\n\t\t- we'll install for SQLite:\n\t\t\t`npm i sequelize sqlite3`\n\t- install Sequelize CLI and initialize your project as a Sequelize project\n\t\t- `npm i -g sequelize-cli`\n\t\t- `sequelize init`\n\t\t- take a look around:\n\t\t\t- config\n\t\t\t\t- config.json\n\t\t\t\t\t- information about your databases in development, testing and production\n\t\t\t\t\t- for this howto, we will enter information about our SQLite database for development\n\t\t\t- migrations\n\t\t\t\t- Sequelize uses this directory to keep track of schema changes you make to your database \n\t\t\t- models\n\t\t\t\t- Sequelize will generate a file here for each database table we create\n\t\t\t\t\t- one has one model per datatable\n\t\t\t\t\t- when you use an ORM, you interface with your **object-oriented models**, not with your **raw database tables**\n\t\t\t\t- index.js interfaces with our models\n\t\t\t- seeders\n\t\t\t\t- will population your database tables with default data after you e.g. change the schema\n\t\t\t\t- we won't use for this project\n\t\t- set up config.json\n\t\t\t--------------------------------------\n\t\t\t\"development\": {\n\t\t\t\t\"dialect\": \"sqlite\",\n\t\t\t\t\"storage\": \"data/main.sqlite\"\n\t\t\t},\t\t\t\n\t\t\t--------------------------------------\n\t- create Flashcard model\n\t\t- `sequelize model:generate --name Flashcard --attributes category:string,front:string,back:string`\n\t\t- note changes in\n\t\t\t- migrations\n\t\t\t- models\n\t\t- note that no database table has been created in our SQLite database yet\n\t- enable server to synchronize changes to database\n\t\t- in server.js: add `async` and `await sequelize.sync()` statements to app.listen\n\t\t\t-----------------------------------\n\t\t\tapp.listen(port, async () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t\tawait sequelize.sync();\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------\n\t\t- when you make the above changes and nodemon runs, Sequelize automatically interfaces with your database and creates the table it now needs to maintain your Flashcard model##seethatsqlwork\n\t\t- in DB Browser, press F5 to see changes\n\t\t\t- notice that it gives SQLite datatypes that it would also give to MySQL, e.g. VARCHAR(255)\n\t\t\t- SQLite will ignore these, but we see that we can now very easily swap out our database from SQLite to MySQL\n\t\t\t- the ORM is now an abstraction to whatever database we happen to use##theflashcardcreate\n- **create API routes in server.js**\n\t- import Flashcard from models and enable posting of JSON \n\t\t-------------------------------------------\n\t\tconst { sequelize, Flashcard } = require('./models');\n\n\t\tapp.use(express.json());\n\t\t-------------------------------------------\n\t- **create a flashcard** route: `POST /flashcards`\n\t\t-----------------------------------------\n\t\tapp.post('/flashcards', async (req, res) => {\n\t\t\tconst { category, front, back } = req.body;\n\t\t\ttry {\n\t\t\t\tconst flashcard = await Flashcard.create({ category, front, back });\n\t\t\t\treturn res.json(flashcard);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn res.status(500);\n\t\t\t}\n\t\t});\t\t\n\t\t-----------------------------------------\n\t\t- test in Postman:##postflashpostman\n\t\t- in DB Browser, click on the Browse Data tab and press F5, note the automatically added fields: **id**, **createdAt**, and **updatedAt**##indbbrowsfff\n\t\t- post another flashcard:\n\t\t\t------------------------------------\n\t\t\t{\n\t\t\t\t\"category\": \"git\",\n\t\t\t\t\"front\": \"only show the last commit\",\n\t\t\t\t\"back\": \"git log -1\"\n\t\t\t}\t\t\t\n\t\t\t------------------------------------\n\t- **get all flashcards** route: `GET /flashcards`\n\t\t-----------------------------------------\n\t\tapp.get('/flashcards', async (req, res) => {\n\t\t\ttry {\n\t\t\t\tconst flashcards = await Flashcard.findAll();\n\t\t\t\treturn res.json(flashcards);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn res.status(500);\n\t\t\t}\n\t\t});\t\n\t\t-----------------------------------------\n\t\t- test in Postman:##getftheflash\n\t\t- in DB Browser, F5##seconddbbtrtrowser\n\t- **get a flashcard** route: `GET /flashcards/:id`\n\t\t-----------------------------------------\n\t\tapp.get('/flashcards/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\ttry {\n\t\t\t\tconst flashcard = await Flashcard.findOne({\n\t\t\t\t\twhere: { id }\n\t\t\t\t});\n\t\t\t\treturn res.json(flashcard);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn res.status(500);\n\t\t\t}\n\t\t});\n\t\t-----------------------------------------\n\t\t- test in Postman:##theonetwoflashok\n\t- **change a flashcard** route: `PUT /flashcards/:id`\n\t\t-----------------------------------------\n\t\tapp.put('/flashcards/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst { category, front, back } = req.body;\n\t\t\ttry {\n\t\t\t\tconst flashcard = await Flashcard.findOne({\n\t\t\t\t\twhere: { id }\n\t\t\t\t});\n\n\t\t\t\tflashcard.category = category;\n\t\t\t\tflashcard.front = front;\n\t\t\t\tflashcard.back = back;\n\n\t\t\t\tawait flashcard.save();\n\n\t\t\t\treturn res.json(flashcard);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn res.status(500);\n\t\t\t}\n\t\t});\n\t\t-----------------------------------------\n\t\t- test in Postman:##theputflashaj\n\t\t- check in DB Browser:##thedbbrowwwwput\n\t- **delete a flashcard** route: `DELETE /flashcards/:id`\n\t\t-----------------------------------------\n\t\tapp.delete('/flashcards/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\ttry {\n\t\t\t\tconst flashcard = await Flashcard.findOne({\n\t\t\t\t\twhere: { id }\n\t\t\t\t});\n\n\t\t\t\tawait flashcard.destroy();\n\n\t\t\t\treturn res.json({message: `Flashcard with id ${id} deleted.`});\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\treturn res.status(500);\n\t\t\t}\n\t\t});\n\t\t-----------------------------------------\n\t\t- test in Postman:##flashcdeleteapi\n\t\t- check in DB Browser:##dbbrowdeleteok","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-29 07:32:52","systemWhoCreated":"systemUnknown"},{"id":581,"category":"MongoDB","title":"Create read-only Node/Express API that reads MongoDB database","body":"- this howto will demonstrate how to do the following:\n\t- import a JSON file into a local MongoDB database\n\t- build a Node/Express API which reads the MongoDB and outputs data on a route\n- full code is here: [edwardtanguay/ejt-howto-mongo-api-mongoclient](https://github.com/edwardtanguay/ejt-howto-mongo-api-mongoclient)\t\n- import data into a MongoDB database\n\t- create directory called `dataImport`\n\t- goto: https://edwardtanguay.netlify.app/share\n\t- download employees.json to `dataImport`\n\t- open terminal in directory `dataImport`\n\t- make sure you have the `mongoimport` command installed\n\t\t- `mongoimport --version`\n\t\t- if you are on Ubuntu, `mongoimport` should be installed with MongoDB\n\t\t- to use `mongoimport` on Windows, you have to download and install **MongoDB Database Tools**\n\t\t\t- go to the **MongoDB Database Tools** download page [here](https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools)\n\t\t\t- download the MSI file (not zip) and execute it##theimportdosn\n\t\t\t- should now have it here:##shouldnonon\n\t\t\t- add system variable to that directory, e.g. `C:\\Program Files\\MongoDB\\Tools\\100\\bin`:##tehsyssyjsk\n\t\t\t- the command `mongoimport --version` should now show:##showthecommimpo\n\t- in MongoDBCompass look at what databases you currenty have:\n\t\t- [Connect]\n\t\t- click Databases##thedatainmoncom\n\t- import the file\n\t\t- `mongoimport --db northwind --collection employees --type json --file employees.json --jsonArray`\n\t\t- if successful, it should display how many documents it imported, note:\n\t\t\t- in SQL, you import **records** into a **table**\n\t\t\t- in MongoDB, you import **documents** into a **collection**##thedocsintocoll\n\t- in Compass: **View > Reload Data** and you will see the new database:##theoneonesdkjiconn\n\t- click on databaes **northwind** and collection **employees** to view the 9 **documents**:##thenorthwindokok\n- **set up a basic API**\n\t- `mkdir ejt-howto-mongo-api-mongoclient`\n\t- `code ejt-howto-mongo-api-mongoclient`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- `\"type\":\"module\",`\n\t\t\t\t- create start script: `\"dev\": \"nodemon server.js\",`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3022;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('<h1>MongoDB Test</h1>');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n\t\t\t- you should see \"Flashcard API\" in your browser\n- **connect to MongoDB and get data**\n\t- `npm i mongodb`\n\t- add to server.js:\n\t\t-----------------------------------------\n\t\timport { MongoClient } from 'mongodb';\n\n\t\tconst conn = 'mongodb://localhost:27017';\n\t\tconst client = new MongoClient(conn);\n\n\t\tawait client.connect();\n\t\tconst db = client.db('northwind');\n\t\tconst users = await db.collection('employees').find().toArray();\n\t\tconsole.log(users);\t\n\t\t-----------------------------------------\n- create route that loads and makes all employee documents available via `GET /employee`\n\t----------------------\n\tconst getData = async (done) => {\n\t\tawait client.connect();\n\t\tconst db = client.db('northwind');\n\t\tdone(db);\n\t};\n\n\tapp.get('/', (req, res) => {\n\t\tres.send('<h1>MongoDB Test</h1>');\n\t});\n\n\tapp.get('/employees', (req, res) => {\n\t\tgetData(async (db) => {\n\t\t\tconst users = await db\n\t\t\t\t.collection('employees')\n\t\t\t\t.find()\n\t\t\t\t.toArray();\n\t\t\tres.json(users);\n\t\t});\n\t});\t\n\t----------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-06-30 08:21:19","systemWhoCreated":"systemUnknown"},{"id":582,"category":"MongoDB","title":"MongoDB overview and orientation within the larger database landscape","body":"- landscape of modern databases, management tools and ORMs\n\t- some databases are not listed, e.g. Oracle (SQL), CloudDB (NoSQL), and other NoSQL databases\n\t- there are many other ORMs, but those listed are the most popular:##serverLandscapeOrm\n- MongoDB tools we will be using\n\t- 1. **MongoDB 6.0** - database server\n\t- 2. **MongoDB Compass** - GUI administration tool\n\t- 3. **NoSQLBooster** - GUI administration tool with some extra features\n\t- 4. **mongosh** - interactive shell to manipulate MongoDB database\n\t- 5. **mongoimport** - command-line tool to import JSON files into MongoDB collections\n\t- 6. **MongoClient** - the native Node driver for connections to MongoDB\n\t- 7. **Mongoose** - JavaScript/TypeScript ODM for more sophisticated access to MongoDB in Node/Express APIs, etc.\n\t- 8. **Mongo Atlas** - free, managed MongoDB database in the cloud, access via connection string and password from your applications, local or online\n- MongoClient vs Mongoose\n\t- **MongoClient** \n\t\t- use\n\t\t\t- `npm i mongodb`\n\t\t\t- `import { MongoClient } from 'mongodb';`\n\t\t- is used for simple data access to a MongoDB from code, but any larger application will use Mongoose or some other ORM/ODM such as Prisma\t\n\t- **Mongoose**\n\t\t- use\n\t\t\t- `npm i mongoose`\n\t\t\t- `import mongoose from 'mongoose';`\n\t\t- schema\n\t\t\t- defines the structure of collection documents\n\t\t\t- a different file for each schema\n\t\t- model\n\t\t\t- a model is a schema in a form that you can use\n\t\t\t\t- class -> object\n\t\t\t\t- schema -> model\n\t\t- validation\n\t\t- middleware\n\t\t\t- pre- and post-define events that happen when saving\n\t\t- all Mongo commands are available in Mongoose\n- MongoDB Atlas vs. self-managed MongoDB\n\t- **MongoDB Atlas** \n\t\t- is a unique offer to not only have a cloud-based, managed database via connection string but with a generous free tier ([512MB/month](https://www.mongodb.com/mongodb-on-aws/pricing))  \n\t\t- compare to e.g. \n\t\t\t- [Fly.io](https://fly.io/docs/about/pricing/#free-allowances) offers Postgres which is not a managed database service, and MySQL and beta SQLite, but it is not as straight-forward as MongoDB Atlas\n\t\t\t- managed SQL and NoSQL databases at AWS and Azure can be quite expensive even for the beginning pricing packages\n\t\t\t\t- AWS and Azure have a 12-month free-period on some services but after that you pay the full price\n\t- **self-managed MongoDB**\n\t\t- you can install MongoDB locally on your machine for free\n\t\t- you can also install MongoDB on a e.g. Hetzner or Digital Ocean machine and use it for free","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-04 08:09:04","systemWhoCreated":"systemUnknown"},{"id":583,"category":"Mongoose","title":"Create book CRUD API with Mongoose","body":"- background\n\t- Mongoose is a wrapper around MongoDB\n\t- it enables you to interact with your database simply by using JavaScript objects\n\t- in this API we are going to an API that performs CRUD operations for a small book website\n\t- instead of communicating directly with the MongoDB database as we did with [this API](https://edwardtanguay.netlify.app/howtos?id=581)\n\t\t- we are going to build a MVC-like abstraction layer between our code and the MongoDB\n\t\t- create a **schema and model** for a book\n\t\t\t- a schema defines what fields a book has\n\t\t\t- a model is a schema in a form you can use\n\t\t- create book **objects**\n\t\t\t- change these book objects\n\t\t\t- save these book objects\n\t\t\t- Mongoose will take care of all of the communication with the database\n\t- just as when we used Sequelize (ORM - Object Relational Mapper) which in turn communicated with SQLite and MySQL\n\t\t- we will now use Mongoose (ODM - Object Document Mapper) which in turn will communicate with MongoDB\n\t- full code is here: [edwardtanguay/ejt-howto-mongoose-api](https://github.com/edwardtanguay/ejt-howto-mongoose-api)\n\t\t- also, full code to this API together with a frontend Vite site that consumes the API is here: [edwardtanguay/live-coding-ejt-mongoose-book-api](https://github.com/edwardtanguay/live-coding-ejt-mongoose-book-api)##tehbookspapisite\n- **set up a basic API**\n\t- `mkdir ejt-howto-mongoose-api`\n\t- `code ejt-howto-mongoose-api`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- `\"type\":\"module\",`\n\t\t\t\t- create start script: `\"dev\": \"nodemon server.js\",`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3022;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('<h1>Book Site API</h1>');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n\t\t\t- you should see \"Book Site API\" in your browser\n- note\n\t- unlike with SQL projects\n\t\t- we're not going to first create a database and a table\n\t\t- we're going to create a connect to a non-existent database, and a model\n\t\t- then the first time we use this model, it will create database and collection for us\n\t- we make a connect to Mongoose in the server\n\t\t- each model file uses this connection by importing Mongoose\n- set up connection to Mongoose\n\t- `npm i mongoose`\n\t- **server.js**\n\t\t-----------------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\tmongoose.connect('mongodb://localhost/bookapi');\n\t\t-----------------------------------------\n- create a book model\n\t- **models/Book.js**\n\t\t--------------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\tconst bookSchema = new mongoose.Schema({\n\t\t\ttitle: String,\n\t\t\tdescription: String,\n\t\t\tnumberOfPages: Number,\n\t\t\tlanguage: String,\n\t\t\timageUrl: String, \n\t\t\tbuyUrl: String\n\t\t});\n\n\t\texport const Book = mongoose.model('book', bookSchema);\n\t\t--------------------------------------\n- use the book model\t\n\t- **server.js**\n\t\t-------------------------------\n\t\tapp.post('/book', async (req, res) => {\n\t\t\tconst book = new Book({\n\t\t\t\ttitle: 'ttt',\n\t\t\t\tdescription: 'ddd',\n\t\t\t\tnumberOfPages:999 \n\t\t\t});\n\t\t\tawait book.save();\n\n\t\t\tconsole.log('book created: ' + new Date());\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: 'book was created'\n\t\t\t});\n\t\t});\t\t\n\t\t-------------------------------\n- create database, collection and book\n\t- with Postman, make a POST request to `http://localhost:3022/book`\n\t- look in the MongoDB database\n\t\t- database **bookapi** was created\n\t\t- collection **books** was created\n\t\t- document was created\n\t- notice the Mongoose model-to-collection plural magic##pluralmagicmongoose\n- create import CLI to fill books with data\n\t- make test CLI first\n\t\t- **cli/importBooks.js**\n\t\t\t-------------------------------------\n\t\t\timport mongoose from 'mongoose';\n\t\t\timport { Book } from '../models/Book.js';\n\n\t\t\tmongoose.connect('mongodb://localhost/bookapi');\n\n\t\t\tconsole.log('connected to mongoose')\n\n\t\t\tconst book = new Book({\n\t\t\t\ttitle: 'tttimported',\n\t\t\t\tdescription: 'dddimported',\n\t\t\t\tnumberOfPages: 555\n\t\t\t});\n\t\t\tawait book.save();\n\t\t\tconsole.log('imported completed');\n\t\t\tprocess.exit(1);\n\t\t\t-------------------------------------\n\t\t- **package.json**\n\t\t\t----------------------------------------\n\t\t\t\"import\": \"node cli/importBooks.js\"\n\t\t\t----------------------------------------\n\t\t- `npm run import`\n\t\t- check database:##theimporteksjdkfone\n\t- import data from API and fill database\n\t\t- `npm i axios`\n\t\t- get data\n\t\t\t-------------------------------------\n\t\t\tconst url = 'https://edwardtanguay.netlify.app/share/books.json';\n\t\t\tconst books = (await axios.get(url)).data;\n\t\t\tconsole.log(books);\t\t\t\n\t\t\t-------------------------------------\n\t\t- import books and remap into new book schema\n\t\t\t-------------------------------------\n\t\t\timport mongoose from 'mongoose';\n\t\t\timport { Book } from '../models/Book.js';\n\t\t\timport axios from 'axios';\n\n\t\t\tmongoose.connect('mongodb://localhost/bookapi');\n\n\t\t\tconst url = 'https://edwardtanguay.netlify.app/share/books.json';\n\n\t\t\tconsole.log('connected to mongoose');\n\n\t\t\tconst rawBooks = (await axios.get(url)).data;\n\n\t\t\tfor(const rawBook of rawBooks) {\n\t\t\t\tconsole.log(`processing ${rawBook.title}...`);\n\t\t\t\tconst book = new Book({\n\t\t\t\t\ttitle: rawBook.title,\n\t\t\t\t\tdescription: rawBook.description,\n\t\t\t\t\tnumberOfPages: Number(rawBook.totalpages),\n\t\t\t\t\tlanguage: rawBook.language,\n\t\t\t\t\timageUrl: `http://edwardtanguay.netlify.app/share/images/books/${rawBook.idcode}.png`,\n\t\t\t\t\tbuyUrl: rawBook.buyUrl\n\t\t\t\t});\n\t\t\t\tawait book.save();\n\t\t\t};\n\n\t\t\tconsole.log('imported completed');\n\t\t\tprocess.exit(1);\n\t\t\t-------------------------------------\n- complete **CRUD** routes\n\t- **C**reate: `POST /book`\n\t\t----------------------------------------\n\t\tapp.post('/book', async (req, res) => {\n\t\t\tconst book = new Book(req.body);\n\t\t\tawait book.save();\n\t\t\tres.status(200).json({ message: 'added book', book });\n\t\t});\n\t\t----------------------------------------\n\t- **R**ead: `GET /book`\n\t\t----------------------------------------\n\t\tapp.get('/book', async (req, res) => {\n\t\t\tconst books = await Book.find();\n\t\t\tres.status(200).json({ message: 'all books', books });\n\t\t});\n\t\t----------------------------------------\n\t- **R**ead: `GET /book/id`\n\t\t----------------------------------------\n\t\tapp.get('/book/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst book = await Book.find({ _id: id });\n\t\t\tres.status(200).json({ message: 'fetched single book', book });\n\t\t});\t\t\n\t\t----------------------------------------\n\t- **U**pdate: `PUT /book/id`\n\t\t----------------------------------------\n\t\tapp.put('/book/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst oldBook = await Book.find({ _id: id });\n\t\t\tawait Book.updateOne({ _id: id }, { $set: { ...req.body } });\n\t\t\tconst newBook = await Book.find({ _id: id });\n\t\t\tres.status(200).json({ message: 'replaced book', oldBook, newBook });\n\t\t});\t\t\n\t\t----------------------------------------\n\t- **U**pdate: `PATCH /book/id`\n\t\t----------------------------------------\n\t\tapp.patch('/book/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst oldBook = await Book.find({ _id: id });\n\t\t\tawait Book.updateOne({ _id: id }, { $set: { ...req.body } });\n\t\t\tconst newBook = await Book.find({ _id: id });\n\t\t\tres.status(200).json({ message: 'replaced book', oldBook, newBook });\n\t\t});\t\t\n\t\t----------------------------------------\n\t- **D**elete: `DELETE /book/id`\n\t\t----------------------------------------\n\t\tapp.delete('/book/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst book = await Book.find({ _id: id });\n\t\t\tawait Book.deleteOne({ _id: id });\n\t\t\tres.status(200).json({ message: 'deleted book', book });\n\t\t});\n\t\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-05 05:59:21","systemWhoCreated":"systemUnknown"},{"id":584,"category":"MongoDB","title":"Get account at MongoDB Atlas and connect via mongosh, mongoimport, Compass and NoSQLBooster","body":"- background\n\t- the goal of this howto is to \n\t\t- get a free MongoDB Atlas account\n\t\t- understand the basic terminology and online interface\n\t\t- connect to online MongoDB database via mongosh, mongoimport, Compass and NoSQLBooster so that you can manager your online databases and collections locally\n\t\t- copy collections from your offline to online databases and visa versa\n\t\t- connect your offline apps to online databases\n\t- a MongoDB Atlas account enables you to\n\t\t- create and use MongoDB databases that exist online\n\t\t- you can access them from local apps\n\t\t- you can access them from online apps, e.g. at Heroku\n\t- MongoDB Atlas has general free tier\n\t\t- no need to give credit card information (as with e.g. at AWS or Azure)\n\t\t- unlimited features that don't expire (as with e.g. NoSQLBooster)\n\t\t- you have anough features to use it as a main database solution for online apps\n\t\t\t- e.g. essential part of a free-to-run online MERN app:\n\t\t\t\t- Frontend: Netlify\n\t\t\t\t- Backend: Heroku\n\t\t\t\t- Database: MongoDB Atlas\n- go to: https://www.mongodb.com\n\t- register with Google or GitHub\n\t- when you are registered and signed in, you should see something like this:##atlastthefirst\n- note on terminology##thesixtermskdj\n\t- 1. account > 2. project > 3. cluster > **4. databases** > **5. collections** > **6. databases**\n\t- 1. account\n\t\t- you have one account at MongoDB Atlas\n\t- 2. project\n\t\t- for now you need only **one project** e.g. \"mernprojects\"\n\t- 3. cluster\n\t\t- for now you need only **one cluster** e.g. \"Cluster0\"\n\t\t- cluster vs. database\n\t\t\t- a MontoDB Atlas cluster is like your local MongoDB server, or like your local MySQL server\n\t\t\t\t- each cluster has databases (like SQL databases)\n\t\t\t\t- each database has collections (like SQL tables)\n\t\t\t\t- each collection has documents (like SQL records)\t\t\n\t- **4. databases**\n\t\t- your cluster (server) has databases\n\t\t- but to get to your databases, you have to click on [Browse Collections]##tothecollll\n\t- **5. collections** and **6. documents**\n\t\t- after you click on [Browser Collections] you come to the most useful dashboard of MongoDB Atlas\n\t\t- here you have your main Cluster (server) where you can create databases, which have ##mostussatlas\n- create databases and collections\n\t- click [Create Database]\n\t- give name and collection name\n\t- typically you will want to name your database the name of your **app**, e.g. `app-bookstore-001`##savethbookkk\n\t- the MongoDB Atlas interface is useful enough to manage your collections and documents directory online##andinserstisj\n- enable access from local shell, applications (like Compass or NoSQLBooster) and your online apps\n\t- **Network Access** and **Database Access**:##dataneenet\n\t- **Network Access**\n\t\t- Add IP Address\n\t\t- Allow access from anywhere\n\t\t\t- `0.0.0.0/0`\n\t\t\t- this is quite secure since login/password is also needed\n\t\t- Confirm\n\t\t\t- notice \"Pending...\" message\n\t\t\t\t- changes to your MongoDB Atlas cluster can take 2-5 minutes to take effect##networkaccessokok\n\t- **Database Access**\n\t\t- [Add New Database User]\n\t\t- Password\n\t\t- *appuser*\n\t\t\t- this is not a person's account but your app's account\n\t\t\t- your app (e.g. at Heroku) will connect to your database using this account\n\t\t\t- therefore create an meaningful name for this user is e.g. **app001user** or **app-bookstore-001-user**\n\t\t- create a password yourself\n\t\t\t- best for test apps is to have an easy-to-remember-but-secure password since you find yourself often typing it into e.g. mongosh, etc.\n\t\t\t- save it in a password app such as [KeePass](https://keepass.info)\n\t\t\t\t- copy it from there when you need it with the \"copy for 10 seconds\" feature\n\t\t\t- note you won't be able to find out your password again, you can only reset it\n\t\t\t- later to further secure online apps, replace with autogenerated password\n\t\t- choose: **Read and write to any database**\n\t\t\t- however, if you have an app that really only needs to read data, then **Only read any database**\n\t\t- click *Add User*\n\t\t\t- note message: \"We are deploying your changes (current action: configuring MongoDB)\"\n\t\t\t\t- can take 2-5 minutes to take effect\n- to get connection strings in order to connect from e.g. **mongosh**, **Compass**, **NoSQLBooster**, or a **Heroku app**\n\t- click **Database > Connect**##thedatabaseconnn\n- access with **mongosh**\n\t- [Connect with the MongoDB Shell]\n\t- copy connection string\n\t- in shell, paste it in changing the information appropriately:\n\t\t- `mongosh \"mongodb+srv://cluster0.ogshn.mongodb.net/api001\" --apiVersion 1 --username app001user`##loginowksdoright\n\t- `show dbs`\n\t- `use api001`\n\t- `show collections`\n\t- `db.articles.find()`\n\t- `db.extraarticles.insertOne({title: \"The New Article\"})`\n\t- goto MongoDB Atlas online and check to see that what you just added exists there:##itdoesijidjde\n- upload data with **mongoimport**\n\t- create file to import called `articles.json`\n\t\t----------------------------------\n\t\t[\n\t\t\t{\n\t\t\t\t\"title\": \"Third Article\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"title\": \"Fourth Article\"\n\t\t\t}\n\t\t]\n\t\t----------------------------------\n\t- database > cluster0 > primary##gotheconnecinin\n\t\t- copy the cluster name\n\t- create mongoimport command:\n\t\t- mongoimport --host **cluster0-shard-00-01.ogshn.mongodb.net:27017**  --db **api001** --collection **articles** --type json --file **articles.json** --jsonArray --authenticationDatabase admin --ssl --username **app001user**\n\t\t- `mongoimport --host cluster0-shard-00-01.ogshn.mongodb.net:27017  --db api001 --collection articles --type json --file articles.json --jsonArray --authenticationDatabase admin --ssl --username app001user`##theartikjgtotgo\n\t- see that they were added to the online database, click **REFRESH**:##wasimportedokok\n- access with **MongoDB Compass**\n\t- click: Database > Connect\n\t- Connect Using MongoDB Compass\n\t- copy and modify connection string, e.g.\n\t\t`mongodb+srv://app001user:<password>@cluster0.ogshn.mongodb.net`\n\t- start Compass\n\t- paste in above text with `<password>` text as is\n\t- click: **Authentication** > **Username/Password**:\n\t\t- username: `app001user`\n\t\t- password: (type in your password here)\n\t- you should have access to your online databases and collections##gotthearticlees\n- access with **NoSQLBooster**\n\t- click: Database > Connect\n\t- copy and modify connection string, e.g.\n\t\t- `mongodb+srv://app001user:<password>@cluster0.ogshn.mongodb.net`\n\t\t- note: leave in the actual text `<password>`\n\t- start NoSQLBooster\n\t\t- Connect > Create:##goandconnectj\n\t\t- click **[From URI]** button:##clickfromuriok\n\t\t- paste connection string and click **[OK]**:##pasteandconnectionstring\n\t\t- click on **Authentication**, type password, and click on **Save & Connect**##andtheauuuth\n\t\t- you may now use your online database and collections as if they were local##andshowthetwo\n- **copy collections** from local to online databases, or visa versa\n\t- export the collection you want to transfer\n\t\t- use Compass\n\t\t- go to e.g. local collection\n\t\t- click on [Export Collection]##cliskexpo\n\t\t- [x] Export Full Collection\n\t\t- [SELECT FIELDS]\n\t\t- [SELECT OUTPUT]\n\t\t- [JSON]\n\t\t- [BROWSE]\n\t\t- [EXPORT]##transferbooksdkj\n\t- import the exported collection you want to transfer\n\t\t- use Compass\n\t\t- go to e.g. online database in which you want to transfer the collection\n\t\t- create new collection, give it e.g. the same name as the original collection\n\t\t- in the menu, click **Collection > Import Data**\n\t\t- Select File > JSON > [IMPORT]\n- **use online database collections from local apps**\n\t- e.g. an API running locally\n\t- make an environment variable for the connection string:\n\t\t----------------------------\n\t\tmongoose.connect('mongodb://localhost/bookapi');\n\t\t----------------------------\n\t- put the MongoDB Atlas connection string (with clear-text password) into your .env file as e.g.\n\t\t------------------------------\n\t\tMONGO_CONNECTION = mongodb+srv://app001user:thisisthepassword@cluster0.ogshn.mongodb.net/bookapi\n\t\t------------------------------\n\t- make sure you have `.env` listed in your `.gitignore` file so that your MongoDB password does not get checked into your online repository\n\t- note: in application development, you normally have your localhost connection locally:\n\t\t------------------------------\n\t\tMONGO_CONNECTION = mongodb://localhost/bookapi\n\t\t------------------------------\n\t\t- so that your MongoDB connection is not saved in clear-text anywhere\n\t\t- then on your Heroku app, you create an environment variabled called `MONGO_CONNECTION` and paste in your mongo connection string there where it is protected","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-06 07:01:31","systemWhoCreated":"systemUnknown"},{"id":585,"category":"Mongoose","title":"How to use advanced Mongoose features in a realistic app (bookstore with CRUD API)","body":"- background\n\t- this howto teaching advanced Mongoose features and extends this howto: [Create book CRUD API with Mongoose](https://edwardtanguay.netlify.app/howtos?id=583)\n\t- we will be extending the API with Mongoose features and testing such as:\n\t\t- new SchemaTypes: Date, array, object, reference to another object (e.g. to later populate)\n\t\t- validation\n\t\t- querying with where()\n\t\t- methods and statics\n\t\t- custom queries\n\t\t- virtuals (temporary fields on models for the frontend)\n\t\t- middleware with pre and post hooks\n\t- we won't be altering the Frontend in this URL to respond to these changes, but merely testing with Postman\n\t- full code is here: [edwardtanguay/howto-advanced-mongoose](https://github.com/edwardtanguay/howto-advanced-mongoose)\n- set up book site with API and frontend\n\t- https://github.com/edwardtanguay/live-coding-ejt-mongoose-book-api\n- Mongoose basics\n\t- connections\n\t- schemas\n\t- models\n- Mongoose SchemaTypes and validation\n\t- https://mongoosejs.com/docs/schematypes.html\n\t- add types\n\t\t----------------------------\n\t\twhenPurchased: Date,\t\t\n\t\trelatedBook: mongoose.SchemaTypes.ObjectId,\n\t\ttopics: [String],\n\t\tauthor: {\n\t\t\tfirstName: String,\n\t\t\tlastName: String\n\t\t}\t\t\n\t\t----------------------------\t\n\t- postman\n\t\t- add book with new data\n\t\t\t------------------------------------\n\t\t\t\"whenPurchased\": \"2021-07-06 20:28:53\",\n\t\t\t\"relatedBook\": \"62c3fca5997884b0fdda419c\",\n\t\t\t\"topics\": [\"argumentation\", \"critical thinking\"],\n\t\t\t\"author\": {\n\t\t\t\t\"firstName\": \"Edward\",\n\t\t\t\t\"lastName\": \"Damer\"\n\t\t\t}\t\t\t\n\t\t\t------------------------------------\n\t- nested objects\n\t\t- e.g. author\n\t\t- we decide we are going to at some point add magazines and so want to reuse the author schema\n\t\t- remove it so it is its own schema, and add a new field\n\t\t\t-------------------------------------\n\t\t\tconst authorSchema = new mongoose.Schema({\n\t\t\t\tfirstName: String,\n\t\t\t\tlastName: String,\n\t\t\t\turl: String \n\t\t\t});\n\t\t\t-------------------------------------\n\t\t- send url now with postman as well\n\t- catching type errors\n\t\t- change date to \"nnn...\"\n\t\t- post again and see error\n\t\t- wrap in try/catch\n\t\t\t-----------------------------------------\n\t\t\ttry {\n\t\t\t\t...\n\t\t\t} catch (err) {\n\t\t\t\tres.status(400).json({ error: err.message, invalidBook: book});\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------\n\t- required field\n\t\t- convert from String to object:\n\t\t\t---------------------------------\n\t\t\ttitle: {\n\t\t\t\ttype: String,\n\t\t\t\trequired: true\n\t\t\t},\t\t\t\n\t\t\t---------------------------------\n\t\t- test without sending title, get error\n\t- force lowercase\n\t\t- add email and force it to uppercase\n\t\t\t------------------------------\n\t\t\temail: {\n\t\t\t\ttype: String,\n\t\t\t\tlowercase: true\n\t\t\t}\t\t\t\n\t\t\t------------------------------\n\t\t- test with Postman\n\t- default values\n\t\t- make the whenCreated a default value of current date/time\n\t\t\t----------------------------------------\n\t\t\twhenCreated : {\n\t\t\t\ttype: Date,\n\t\t\t\tdefault: () => Date.now()\n\t\t\t},\n\t\t\t----------------------------------------\n\t\t- in Postman remove date and test\n\t- min/max values\n\t\t- force number of pages to between 10 and 2000\n\t\t\t--------------------------------------\n\t\t\tnumberOfPages: {\n\t\t\t\ttype: Number,\n\t\t\t\tmin: 10,\n\t\t\t\tmax: 2000,\n\t\t\t\trequired: true\n\t\t\t},\n\t\t\t--------------------------------------\n\t\t- in Postman, try: 6666, 666, 200, 2, -2, and leaving the field out\n\t- minLength/maxLength\n\t\t- force title to be a certain size\n\t\t\t------------------------------------------------\n\t\t\ttitle: {\n\t\t\t\ttype: String,\n\t\t\t\trequired: true,\n\t\t\t\tminLength: 5,\n\t\t\t\tmaxLength: 255\n\t\t\t},\n\t\t\t------------------------------------------------\n\t- custom validations\n\t\t- require email to be valid\n\t\t\t---------------------------------\n\t\t\tvalidate: {\n\t\t\t\tvalidator: function(v) {\n\t\t\t\t\treturn /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(v);\n\t\t\t\t},\n\t\t\t\tmessage: \"Please enter a valid email\"\n\t\t\t},\t\t\t\n\t\t\t---------------------------------\n\t- note\n\t\t- only runs on save() method, not on e.g. Book.findOneAndUpdate()\n\t\t\t- therefore don't use\n\t\t- you can pass a string to topics\n- Mongoose Querying\n\t- create new route which gets books of a certain language\n\t\t- basic route find() syntax first\n\t\t\t-----------------------------------------\n\t\t\tapp.get('/books-by-language/:language', async (req, res) => {\n\t\t\t\tconst language = req.params.language;\n\t\t\t\tconst books = await Book.find({language}).sort({ title: 1 });\n\t\t\t\tres.status(200).json({\n\t\t\t\t\tmessage: `fetched all books written in ${language}`,\n\t\t\t\t\tbooks,\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------------\n\t\t- change to Mongoose query syntax\n\t\t\t---------------------------------------\n\t\t    const books = await Book.where('language').equals(language).sort('title');\n\t\t\t---------------------------------------\n\t- see [more features of Mongoose querying](https://mongoosejs.com/docs/queries.html)\n- Mongoose Populate\n\t- set related book of \"21 lessons\" to \"Homo Deus\" (62c3fca5997884b0fdda415a)\n\t\t- add id to relatedBook field in 21 lessons\n\t- expand the schema for relatedBook\n\t\t------------------------------------------\n\t\trelatedBook: {\n\t\t\ttype: mongoose.SchemaTypes.ObjectId,\n\t\t\tref: 'book',\n\t\t},\t\t\n\t\t------------------------------------------\n\t- add populate\n\t\t--------------------------------------\n\t    const books = await Book.where('language').equals(language).sort('title').populate('relatedBook');\n\t\t--------------------------------------\n\t- now notice the object returned as relatedBook populated with all fields\n- Mongoose Methods \n\t- add method to schema called enhanceTitle which gives more information\n\t\t-----------------------------------\n\t\tbookSchema.methods.enhanceTitle = function () {\n\t\t\tif (this.numberOfPages >= 200) {\n\t\t\t\tthis.title = this.title + ' (long book)';\n\t\t\t}\n\t\t}\n\t\t-----------------------------------\n\t- call it in the route to dynamically change the title\n\t\t---------------------------------\n\t\tbooks.forEach(book => console.log(book.enhanceTitle()));\t\t\n\t\t---------------------------------\n\t- note that you need to take this into account if you allow the user to change the title\n\t\t- this is more suitable for read-only sites\n- Mongoose Static Methods\n\t- create a function on the schema that finds all short English books and use it in a new route\n\t- Book.js\n\t\t---------------------------------------\n\t\tbookSchema.statics.findShortEnglishBooks = function () {\n\t\t\treturn this.where('language').equals('english').where('numberOfPages').lte(200);\n\t\t}\t\t\n\t\t---------------------------------------\n\t- server.js\n\t\t---------------------------------------\n\t\tapp.get('/short-english-books', async (req, res) => {\n\t\t\tconst books = await Book.findShortEnglishBooks();\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: `fetched all short books in English`,\n\t\t\t\tbooks,\n\t\t\t});\n\t\t});\n\t\t---------------------------------------\n\t- or even more flexible, Book.js\n\t\t----------------------------------------------\n\t\tbookSchema.statics.findShortBooksByLanguage = function (language) {\n\t\t\treturn this.where('language').equals(language).where('numberOfPages').lte(200);\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- server.js\n\t\t-----------------------------------\n\t\tapp.get('/short-books-by-language/:language', async (req, res) => {\n\t\t\tconst language = req.params.language;\n\t\t\tconst books = await Book.findShortBooksByLanguage(language);\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: `fetched all short books in ${language}`,\n\t\t\t\tbooks,\n\t\t\t});\n\t\t});\n\t\t-----------------------------------\n\t- note that we have to call a static method **on the model itself**\n- Mongoose Custom Queries\n\t- make previous example of short-books-by-language more flexible\n\t- Book.js\n\t\t---------------------------------\n\t\tbookSchema.query.byLanguage = function (language) {\n\t\t\treturn this.where('language').equals(language);\n\t\t}\n\t\t---------------------------------\n\t- server.js\n\t\t--------------------------------\n\t\tapp.get('/long-books-by-language/:language', async (req, res) => {\n\t\t\tconst language = req.params.language;\n\t\t\tconst books = await Book.where().byLanguage(language).where('numberOfPages').gt(200);\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: `fetched all long books in ${language}`,\n\t\t\t\tbooks,\n\t\t\t});\n\t\t});\t\t\n\t\t--------------------------------\n\t- note that we have to call a query method on a **where()** or **find()** method\n- Mongoose Virtuals\n\t- create a new field that exists to be sent to the front end, but will not be saved in the database\n\t- e.g. a field that shows all the info of a book on one line\n\t- Book.js\n\t\t--------------------------\n\t\tbookSchema.virtual('bookInfoText').get(function () {\n\t\t\treturn `${this.title}, ${this.numberOfPages} pages: ${this.description}`;\n\t\t});\n\n\t\tbookSchema.set('toJSON', { virtuals: true });\t\t\n\t\t--------------------------\n\t- now in all routes, this field is automatically in the exported JSON\n\t\t- not that for this to be the case, you need the `toJSON` command\n\t\t- otherwise the fields will only be available on the object\n- Mongoose Middleware\n\t- background\n\t\t- middleware gives you **pre** and **post** hooks on specific commands\n\t\t- the most useful commands that have these hooks are **save()**, **validate()**, **remove()**\n\t- **pre** hook\n\t\t- make a whenUpdated field that is written right before object is saved\n\t\t- Book.js\n\t\t\t----------------------------------------\n\t\t\tbookSchema.pre('save', function (next) {\n\t\t\t\tthis.whenUpdated = Date.now();\n\t\t\t\tnext();\n\t\t\t});\n\t\t\t----------------------------------------\n\t\t- note you have to change the PUT/PATCH routes to use .save() and not updateOne() in order for these hooks to run\n\t\t\t-------------------------------------------\n\t\t\tapp.patch('/book/:id', async (req, res) => {\n\t\t\t\tconst id = req.params.id;\n\t\t\t\tconst oldBook = await Book.findOne({ _id: id });\n\t\t\t\tconst book = await Book.findOne({ _id: id });\n\t\t\t\tObject.entries(req.body).forEach(kv => {\n\t\t\t\t\tbook[kv[0]] = kv[1];\n\t\t\t\t}) \n\t\t\t\tbook.save(); \n\t\t\t\tconst newBook = await Book.findOne({ _id: id });\n\t\t\t\tres.status(200).json({\n\t\t\t\t\tmessage: 'patched book with id=' + id,\n\t\t\t\t\toldBook,\n\t\t\t\t\tnewBook,\n\t\t\t\t});\n\t\t\t});\t\t\n\t\t\t-------------------------------------------\n\t- **post** hook\n\t\t- after book is saved, log info in the console\n\t\t- Book.js\n\t\t\t-----------------------------------\n\t\t\tbookSchema.post('save', function (doc,next) {\n\t\t\t\tconst dt = new Date();\n\t\t\t\tconst timestamp = dt.toISOString();\n\t\t\t\tconsole.log(`${timestamp}: updated book \"${doc.title}`);\n\t\t\t\tnext();\n\t\t\t});\n\t\t\t-----------------------------------\n\t\t- test in save, wherever .save() is used, it will log to the console","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-07 08:17:50","systemWhoCreated":"systemUnknown"},{"id":586,"category":"Socket.io","title":"Create a Node-Express-backend-React-frontend chat application with Socket.io","body":"- background\n\t- these instructions show you how to create two projects, backend and frontend, which demonstrate a chat application that works via socket.io\n\t- this howto uses React as the frontend, if you want to make a socket.io application with JS/DOM, see this howto: [How to create a JS/DOM chat application with Socket.io](https://edwardtanguay.netlify.app/howtos?id=480)\n\t- full code is here: \n\t\t- backend: [edwardtanguay/ejt-socketio-react-backend](https://github.com/edwardtanguay/ejt-socketio-react-backend)\n\t\t- frontend: [edwardtanguay/ejt-socketio-react-frontend](https://github.com/edwardtanguay/ejt-socketio-react-frontend)\n- **set up socket.io backend using CommonJS (require)**\n\t- `mkdir ejt-socketio-react-backend`\n\t- `code ejt-socketio-react-backend`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- **package.json**\n\t\t\t\t- `\"dev\": \"nodemon server.js\",`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t\t- `npm i socket.io`\n\t\t- **server.js** (with CommonJS modules)\n\t\t\t------------------------------\n\t\t\tconst app = require('express')();\n\t\t\tconst httpServer = require('http').createServer(app);\n\t\t\tconst io = require('socket.io')(httpServer, { cors: {} });\n\n\t\t\tconst port = 3377;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('<h1>Socket.io backend</h1>');\n\t\t\t});\n\n\t\t\tio.on('connection', (socket) => {\n\t\t\t\tconsole.log('>>> server noticed a client is connected');\n\t\t\t\tsocket.on('disconnect', () => {\n\t\t\t\t\tconsole.log('>>> SERVER NOTICED CLIENT DISCONNECTED');\n\t\t\t\t});\n\t\t\t});\n\n\t\t\thttpServer.listen(port, () => {\n\t\t\t\tconsole.log(`>>> server is listening on port http://localhost:${port}`);\n\t\t\t});\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n\t\t\t- you should see \"Book Site API\" in your browser\n- **set up frontend**\n\t- `npm install socket.io`\n\t- `npm create vite`\n\t\t- `ejt-socketio-react-frontend`\n\t- clean it up and add Sass, etc. so it looks something like this:##basicstari\n\t- set up socket.io on frontend\n\t\t- `npm i socket.io-client`\n\t\t- **.env**\n\t\t\t--------------------------------\n\t\t\tVITE_SOCKET_ENDPOINT=http://localhost:3377\t\t\t\n\t\t\t--------------------------------\n\t\t- **src/socketio.service.js**\n\t\t\t---------------------------------------\n\t\t\timport { io } from 'socket.io-client';\n\n\t\t\tlet socket;\n\n\t\t\texport const initiateSocketConnection = () => {\n\t\t\t\tsocket = io(import.meta.env.VITE_SOCKET_ENDPOINT);\n\t\t\t};\n\n\t\t\texport const sendTestMessage = (cb) => {\n\t\t\t\tsocket.emit('reportConnection', 'connected');\n\t\t\t};\n\t\t\t---------------------------------------\n\t\t- **App.js**\n\t\t\t--------------------------------------------\n\t\t\timport { initiateSocketConnection } from './socketio.service';\t\t\t\n\n\t\t\tuseEffect(() => {\n\t\t\t\tinitiateSocketConnection();\n\t\t\t\tsendTestMessage((err, data) => {\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t});\n\t\t\t\treturn () => {\n\t\t\t\t\tdisconnectSocket();\n\t\t\t\t};\n\t\t\t}, []);\n\t\t\t--------------------------------------------\n\t- backend and frontend should now work together, the backend reporting each time a client connects or disconnects:##serverreporporoting\n- **switch backend from CommonJS to ES modules**\n\t- **package.json**\n\t\t-----------------------------\n\t\t\"type\":\"module\",\n\t\t-----------------------------\n\t- \n- **event emitting and handling**\n\t- make the client report that they are connected when they connect\n\t- frontend\n\t\t- **socketio.service.js**\n\t\t\t---------------------------------------\n\t\t\texport const reportConnection = (cb) => {\n\t\t\t\tsocket.emit('reportConnection', 'connected');\n\t\t\t};\n\t\t\t---------------------------------------\n\t\t- **App.jsx**\n\t\t\t-------------------------------\n\t\t\timport { initiateSocketConnection, reportConnection} from './socketio.service';\t\t\t\n\n\t\t\tuseEffect(() => {\n\t\t\t\tinitiateSocketConnection();\n\t\t\t\treportConnection((err, data) => {\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t});\n\t\t\t\treturn () => {\n\t\t\t\t\tdisconnectSocket();\n\t\t\t\t};\n\t\t\t}, []);\n\t\t\t-------------------------------\n\t- backend\n\t\t- **server.js**\n\t\t\t-----------------------------------\n\t\t\tsocket.on('reportConnection', (msg) => {\n\t\t\t\tconsole.log('a client reported: ' + msg);\n\t\t\t});\t\t\n\t\t\t-----------------------------------\n\t- in addition to the server reporting that client is connected, client now reports its own connection##clientisrepopopo\n- **add chat functionality**\n\t- we want to now create a chat functionality so that clients can communicate with each other via the server\n\t- use the code from this howto: [How to create a JS/DOM chat application with Socket.io](https://edwardtanguay.netlify.app/howtos?id=480)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-08 07:55:35","systemWhoCreated":"systemUnknown"},{"id":587,"category":"SQLite","title":"Create a Node/Express API that reads a SQLite file","body":"- this howto shows how to create an API with Node/Express with numerous routes that export data from tables in an SQLite database\n- full code is here [edwardtanguay/ejt-sqlite-test-api](https://github.com/edwardtanguay/ejt-sqlite-test-api)\n- the final project should look and work something like this:##theselqiapi\n- **set up a basic API**\n\t- `mkdir ejt-sqlite-test-api`\n\t- `code ejt-sqlite-test-api`\n\t- in VSCode\n\t\t- set up npm with package.json file\n\t\t\t- `npm init -y`\n\t\t\t- package.json\n\t\t\t\t- `\"type\":\"module\",`\n\t\t\t\t- create start script: `\"dev\": \"nodemon server.js\",`\t\n\t\t\t- `npm i -D nodemon`\n\t\t\t- `npm i express`\n\t\t- server.js\n\t\t\t------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3022;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('<h1>Book Site API</h1>');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------\t\t\n\t\t- set up local Git\n\t\t\t- `git init`\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t---------------------------------\n\t\t\t- initial commit\n\t\t- `npm run dev`\n\t\t\t- you should see \"Book Site API\" in your browser\n- **install DB Browser for SQLite**\n\t- install **DB Browser for SQLite** here: https://sqlitebrowser.org/dl\n\t\t- for windows just download and execute installer\n\t\t- for Ubuntu the easiest way to install is: `snap install sqlitebrowser`\n\t- download the northwind database file and copy to `data/northwind_database.sqlite`\n\t\t- get it from here: https://edwardtanguay.netlify.app/share##showwherenorth\n\t- in DB Browser, open up the `northwind.sqlite` file to view and browse the Northwind database tables:##showhowdbopensql\n- **import qtools into project**\n\t- see repository here: https://github.com/edwardtanguay/qtools\n\t- follow instructions in the README file\n- **write the API routes**\n\t- create all API routes by sending SQL statements to the SQLite database file\n\t\t-----------------------------------------------\n\t\timport * as qsql from './qtools/qsql.js';\n\t\timport * as qfil from './qtools/qfil.js';\n\n\t\t...\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tconst indexContent = qfil.getFileAsStringBlock('views/index.html');\n\t\t\tres.send(indexContent);\n\t\t});\n\n\t\t// http://localhost:3345/employees\n\t\tapp.get('/employees', async (req, res) => {\n\t\t\tconst employees = await qsql.getRecordsWithSql(\n\t\t\t\t'SELECT EmployeeID, LastName, FirstName, BirthDate, City, Title FROM Employees'\n\t\t\t);\n\t\t\tres.json(employees);\n\t\t});\n\n\t\t// http://localhost:3345/employees/5\n\t\tapp.get('/employees/:id', async (req, res) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst employees = await qsql.getRecordsWithSql(\n\t\t\t\t`SELECT EmployeeID, LastName, FirstName, BirthDate, City, Title FROM Employees WHERE EmployeeID = ${id}`\n\t\t\t);\n\t\t\tres.json(employees);\n\t\t});\n\n\t\t// http://localhost:3345/employees-by-city/London\n\t\tapp.get('/employees-by-city/:city', async (req, res) => {\n\t\t\tconst city = req.params.city;\n\t\t\tconst employees = await qsql.getRecordsWithSql(\n\t\t\t\t`SELECT EmployeeID, LastName, FirstName, BirthDate, City, Title FROM Employees WHERE City = '${city}'`\n\t\t\t);\n\t\t\tres.json(employees);\n\t\t});\n\n\t\t// http://localhost:3345/employees-by-birth-year/1952\n\t\tapp.get('/employees-by-birth-year/:year', async (req, res) => {\n\t\t\tconst year = req.params.year;\n\t\t\tconst employees = await qsql.getRecordsWithSql(\n\t\t\t\t`SELECT EmployeeID, LastName, FirstName, BirthDate, City, Title FROM Employees WHERE substr(Birthdate,1,4)  = '${year}'`\n\t\t\t);\n\t\t\tres.json(employees);\n\t\t});\n\n\t\t// http://localhost:3345/employees-search/french\n\t\tapp.get('/employees-search/:searchText', async (req, res) => {\n\t\t\tconst searchText = req.params.searchText;\n\t\t\tconst employees = await qsql.getRecordsWithSql(\n\t\t\t\t`SELECT FirstName, LastName, Title, Notes FROM Employees WHERE Notes LIKE '%${searchText}%' OR Title LIKE '%${searchText}%'`\n\t\t\t);\n\t\t\tres.json(employees);\n\t\t});\n\n\t\t// http://localhost:3345/employee-territories-by-employee/2\n\t\tapp.get('/employee-territories-by-employee/:employeeId', async (req, res) => {\n\t\t\tconst employeeId = req.params.employeeId;\n\t\t\tconst records = await qsql.getRecordsWithSql(\n\t\t\t\t`SELECT FirstName, LastName, TRIM(t.TerritoryDescription) AS territory FROM Employees AS e \n\t\tJOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tJOIN Territories AS t ON et.TerritoryID = t.TerritoryID\n\t\tWHERE e.EmployeeID = ${employeeId}`\n\t\t\t);\n\t\t\tconst data = {\n\t\t\t\temployee: `${records[0].FirstName} ${records[0].LastName}`,\n\t\t\t\tterritories: records.map((m) => m.territory)\n\t\t\t};\n\t\t\tres.json(data);\n\t\t});\n\t\t-----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-08 16:30:18","systemWhoCreated":"systemUnknown"},{"id":588,"category":"MERN","title":"Create full-stack MERN site published at Heroku/Netlify saving data to MongoDB Atlas","body":"- **What we will build**\n\t- a useful, functional full-stack MERN site which allows you to collect, save and display information about job leads \n\t\t- this is the beginning of a project which will become a site that managers your job seeking process\n\t- data will be saved in a database at your MongoDB Atlas database and will access your backend API at Heroku\n\t- frontend will be at Netlify and will access your API at Heroku\n\t- in this version, this site will be read-only\n\t- you will have one local directory for the project called **ejt-job-manager-project** where `ejt` are your initials (don't use `ejt` since those are my initials)\n\t\t- inside this folder you will have two projects:\n\t\t\t- **ejt-job-manager-backend**\n\t\t\t\t- this will also be the name of your\n\t\t\t\t\t- backend repository at GitHub\n\t\t\t\t\t- your app at Heroku\n\t\t\t\t- Heroku app names must be 30 characters or less \n\t\t\t\t- the URL to your backend API will be: `http://ejt-job-manager-backend.herokuapp.com`\n\t\t\t- **ejt-job-manager**\n\t\t\t\t- this will be the name of your\n\t\t\t\t\t- frontend repository at GitHub\n\t\t\t\t\t- your app at Netlify\n\t\t\t\t- your Netlify URL will be called http://ejt-job-manager.netlify.app\n\t\t\t\t\t- it doesn't have the word `frontend` in it since will be an outward-facing URL that you will give to other people  in order for them to log into your site\n- **What we will use:**\n\t- Node/Express and MongoDB Atlas will be used for the backend\n\t- React (Vite) will be used for the frontend\n- **Full code here:**\n\t- backend: [edwardtanguay/ejt-job-manager-backend](https://github.com/edwardtanguay/ejt-job-manager-backend)\n\t- frontend: [edwardtanguay/ejt-job-manager](https://github.com/edwardtanguay/ejt-job-manager)\n- **STEP A: Create minimal MERN app with backend, frontend and database running online at Heroku, Netlify and MongoDB Atlas**\n\t- the three parts of the app will be:\n\t\t- **1. Database at MongoDB Atlas:** at MongoDB Atlas a database called `job-manager` with one collection `job-sources` that contains URLs of job sites\n\t\t- **2. Backend API at Heroku** with one route `/job-sources` which accesses the MongoDB database and returns all job-sources as an array\n\t\t- **3. Frontend React site at Netlify** that fetches JSON from the API route `/job-sources` at Heroku and displays these as links on a web page\n\t- set up local folder structure\n\t\t- `ejt-job-manager-project`\n\t\t\t- `data-import`\n\t\t\t- `ejt-job-manager-backend`\n\t\t\t- `ejt-job-manager`\n\t- **1. Database at MongoDB Atlas:**:\n\t\t- create file: `ejt-job-manager/data-import/job-sources.json`\n\t\t\t------------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Stepstone - JavaScript/React in Berlin\",\n\t\t\t\t\t\"url\": \"https://www.stepstone.de/work/react-javascript/in-berlin?radius=30&q=react%20javascript%20\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Monster.de - JavaScript/React in Berlin\",\n\t\t\t\t\t\"url\": \"https://www.monster.de/jobs/suche?q=react+javascript&where=berlin&page=1&so=m.h.sh\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Berlin Startup Jobs - JavaScript/React\",\n\t\t\t\t\t\"url\": \"https://berlinstartupjobs.com/?s=javascript+react\"\n\t\t\t\t}\t\t\t\t\n\t\t\t]\n\t\t\t------------------------------------\n\t\t- in Compass, log into your Database cluster at MongoDB Atlas\n\t\t\t- if you don't already have a connect to click on, get it from the online Atlas site: \n\t\t\t\t- Database\n\t\t\t\t- Connect\n\t\t\t\t- Connect using MongoDB Compass\n\t\t\t\t- Copy the connection string, then open MongoDB Compass.\n\t\t- click on \"+\" button:##clickondbarrow\n\t\t\t- \"Create Database\", `ejt-job-manager`, `job-sources`, [Create Database]##andcrethedb\n\t\t\t- [Import Data]\n\t\t\t- select file, `ejt-job-manager-project/data-import/job-sources.json`\n\t\t\t- [Import]\n\t\t- database collection shows in Compass##showsincompassdata \n\t\t- database collection shows in MongoDB Atlas##showsinmondatlas\n\t- **2. Backend API at Heroku**\n\t\t- open VSCode in `ejt-job-manager-project/ejt-job-manager-backend`\n\t\t- **set up a basic API**\n\t\t\t- set up npm with package.json file\n\t\t\t\t- `npm init -y`\n\t\t\t\t- package.json\n\t\t\t\t\t- `\"type\":\"module\",`\n\t\t\t\t\t- create start scripts: \n\t\t\t\t\t\t- `\"dev\": \"nodemon server.js\",`\t(for development)\n\t\t\t\t\t\t- `\"start\": \"node server.js\",`\t(for Heroku)\n\t\t\t\t- `npm i -D nodemon`\n\t\t\t\t- `npm i express`\n\t\t\t- server.js\n\t\t\t\t------------------------------\n\t\t\t\timport express from 'express';\n\n\t\t\t\tconst app = express();\n\t\t\t\tconst port = process.env.PORT || 3044;\n\n\t\t\t\tapp.get('/', (req, res) => {\n\t\t\t\t\tres.send('<h1>Job Manager API</h1>');\n\t\t\t\t});\n\n\t\t\t\tapp.listen(port, () => {\n\t\t\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t\t\t});\t\t\t\n\t\t\t\t------------------------------\t\n\t\t\t- test with: `npm run dev`\n\t\t\t- `npm run dev`\n\t\t\t\t- you should see \"Job Manager API\" in your browser\n\t\t\t- set up local Git\n\t\t\t\t- `git init`\n\t\t\t\t- .gitignore\n\t\t\t\t\t---------------------------------\n\t\t\t\t\tnode_modules\n\t\t\t\t\t---------------------------------\n\t\t\t\t- initial commit\n\t\t- **add connection to online database**\n\t\t\t- at MongoDB Atlas / Database Access, create job-manager-user with read rights for now, and click [Add User]##readthedatabasruser\n\t\t\t- save password in password manager, e.g. [Keepass](https://keepass.info) since you can only reset your password in the future\n\t\t\t- Database > Connect > Connect your application and copy connection string##thegettheconnstring\n\t\t\t- copy the connection string into your `.env` file:##theenvfiletwo\n\t\t\t- install\n\t\t\t\t- `npm i mongoose`\n\t\t\t\t- `npm i dotenv`\t\n\t\t\t- models/JobSource.js\n\t\t\t\t--------------------------------------\n\t\t\t\timport mongoose from 'mongoose';\n\n\t\t\t\tconst jobSourceSchema = new mongoose.Schema({\n\t\t\t\t\tname: String,\n\t\t\t\t\turl: String\n\t\t\t\t});\n\n\t\t\t\texport const JobSource = mongoose.model('job-source', jobSourceSchema);\n\t\t\t\t--------------------------------------\n\t\t\t- server.js\n\t\t\t\t--------------------------------\n\t\t\t\timport dotenv from 'dotenv';\n\t\t\t\timport mongoose from 'mongoose';\n\t\t\t\timport { JobSource } from './models/JobSource.js';\n\n\t\t\t\tdotenv.config();\n\n\t\t\t\tconst MONGODB_URL =\n\t\t\t\t\tprocess.env.MONGODB_URL || 'mongodb://localhost/ejt-job-manager';\n\n\t\t\t\tmongoose.connect(MONGODB_URL, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tconsole.log({\n\t\t\t\t\t\t\terror: \"Cannot connect to MongoDB database.\",\n\t\t\t\t\t\t\terr: `\"${err}\"`\n\t\t\t\t\t\t});\n\t\t\t\t\t} \n\t\t\t\t});\t\t\t\t\n\t\t\t\t--------------------------------\n\t\t\t- .gitignore (**don't push MongoDB connection string to repository!**)\n\t\t\t\t---------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.env\t\t\t\t\n\t\t\t\t---------------------------\n\t\t\t- test first in local database, import JSON file as you did above, add ` - LOCAL DATA` to an entry, and change name in .env file to `MONGODB_URL222` and test##testhtatitworklocl\n\t\t\t- then change .env file connection variable name back to `MONGDB_URL` and test, be sure to restart server first:##andonlinetestmong\n\t\t- publish to Heroku and set up environmental variables\n\t\t\t- push all changes to repository: `ejt-job-manager-backend`\n\t\t\t- go to Heroku\n\t\t\t\t- [New]\n\t\t\t\t- [Create new app]\n\t\t\t\t- [Create App]##thecreatappherk\n\t\t\t\t- [GitHub]\n\t\t\t\t- repo-name: `ejt-job-manager-backend`\n\t\t\t\t\t- [Search]\n\t\t\t\t\t- [Connect]\n\t\t\t\t- [Enable Automatic Deploys]\n\t\t\t\t- [Deploy Branch]\n\t\t\t\t- Menu: Overview\n\t\t\t\t- wait till deployed##newdplaosy\n\t\t\t\t- Menu: Settings \n\t\t\t\t\t- [Config Vars]\n\t\t\t\t\t- add variable from .env file\n\t\t\t\t- [Open App]##adntheonworkshskj\n\t\t\t\t- goto https://ejt-job-manager-backend.herokuapp.com/job-sources\n\t\t\t\t- you should see this##dothejobsour\n\t- **3. Frontend React site at Netlify**\n\t\t- set up minimistic React frontend site with Vite\n\t\t\t- in terminal at `ejt-job-manager-project` type `npm create vite` with name `ejt-job-manager`\n\t\t\t- enter site with VSCode\n\t\t\t\t- `cd ejt-job-manager` and `code .` to \n\t\t\t- add Sass and minimalize the site \n\t\t\t\t- `npm i`\n\t\t\t\t- `npm run dev`\n\t\t\t\t- `npm i sass`\n\t\t\t\t- rename css to scss everywhere\n\t\t\t\t- App.jsx\n\t\t\t\t\t-----------------------------\n\t\t\t\t\timport './App.scss'\n\n\t\t\t\t\tfunction App() {\n\t\t\t\t\t  return (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>EJT Job Manager</h1>\n\t\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t  )\n\t\t\t\t\t}\n\n\t\t\t\t\texport default App\t\t\t\t\t\n\t\t\t\t\t-----------------------------\n\t\t\t\t- App.scss\n\t\t\t\t\t-------------------------------\n\t\t\t\t\tbody {\n\t\t\t\t\t  background-color: #333;\n\t\t\t\t\t  color: #ccc;\n\t\t\t\t\t  padding: 2rem;\n\t\t\t\t\t  font-size: 1.4rem;\n\t\t\t\t\t  h1 {\n\t\t\t\t\t\tmargin: 0\n\t\t\t\t\t  }\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t-------------------------------\n\t\t\t- site should look something like this:##theminminok\n\t\t- fetch data from local backend\n\t\t\t- set backend to read local data again (change .env variable and restart)\n\t\t\t- `npm i axios`\n\t\t\t- add code to fetch job source data\n\t\t\t\t-----------------------------------\n\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\timport './App.scss';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\tconst backend_url = 'http://localhost:3044/job-sources';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\tconst [jobSources, setJobSources] = useState([]);\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tsetJobSources((await axios.get(backend_url)).data);\n\t\t\t\t\t\t})();\n\t\t\t\t\t}, []);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>EJT Job Manager</h1>\n\t\t\t\t\t\t<p>There are {jobSources.length} job sources.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\texport default App;\t\t\t\t\n\t\t\t\t-----------------------------------\n\t\t\t- you will get a CORS error:##thecorrrrrrpro\n\t\t\t- in backend, add cors\n\t\t\t\t- `npm i cors`\n\t\t\t\t- `import cors from 'cors';`\n\t\t\t\t- `app.use(cors());`\n\t\t\t- you now get 3 job sources:##nowtherearethree\n\t\t\t- display the job sources as well:\n\t\t\t\t------------------------------\n\t\t\t\t<p>There are {jobSources.length} job sources:</p>\n\t\t\t\t<ul>\n\t\t\t\t\t{jobSources.map((jobSource, i) => {\n\t\t\t\t\t\treturn <li key={i}>{jobSource.name}</li>;\n\t\t\t\t\t})}\n\t\t\t\t</ul>\t\t\t\t\n\t\t\t\t------------------------------\n\t\t\t- note you are displaying local data:##thelocalandthree\n\t\t\t- add backend url\n\t\t\t\t-------------------------------------------\n\t\t\t\tconst backend_url = import.meta.env.VITE_BACKEND_URL || 'http://localhost:3044/job-sources';\n\t\t\t\t-------------------------------------------\n\t\t\t\t- it shows \"LOCAL DATA\"\n\t\t\t- test the online app, `.env` file:\n\t\t\t\t-------------------------------------------\n\t\t\t\thttps://ejt-job-manager-backend.herokuapp.com/job-sources\n\t\t\t\t-------------------------------------------\n\t\t\t\t- it shows \"ONLINE DATA\"##thelocalonline\n\t\t- publish to Netlify\n\t\t\t- push to repository\n\t\t\t\t- `git init`\n\t\t\t\t- initial commit\n\t\t\t- go to: https://www.netlify.com\n\t\t\t\t- [Add new site]\n\t\t\t\t- [Import Existing Project]\n\t\t\t\t- [GitHub]\n\t\t\t\t- search and select\n\t\t\t\t- [Deploy Site]\n\t\t\t\t- [Site settings], [Change site name], `ejt-job-manager`\n\t\t\t- add environment variable\n\t\t\t\t- note the site will show LOCAL DATA since it is reading your local API\n\t\t\t\t\t- shut down local API so see what others see##whatotherseee\n\t\t\t\t- add environment variable to Netlify\n\t\t\t\t\t- Site settings > Build & deploy > Environment\n\t\t\t\t\t- `VITE_BACKEND_URL`\n\t\t\t\t\t\t- `https://ejt-job-manager-backend.herokuapp.com/job-sources`\n\t\t\t- Your Netlify site will now display data from your Heroku site which gets its data from your MongoDB Atlas site:##tehonlinefinished","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-11 18:49:23","systemWhoCreated":"systemUnknown"},{"id":589,"category":"JWT","title":"Add JWT login authentication to an online MERN site","body":"- **What we will build**\n\t- we will extend this project in which we built a full-stack MERN app running at Netlify (frontend), Heroku (backend) connecting to an online database (MongoDB Atlas): \n\t\t- [Create full-stack MERN site published at Heroku/Netlify saving data to MongoDB Atlas](https://edwardtanguay.netlify.app/howtos?id=588)\n\t- the final state of this project was that we could visit the site at Netlify, which fetched data from the Heroku API, which in turn fetched data from MongoDB Atlas:##tehonlinefinished\n\t- the task we will accomplish in this howto is:\n\t\t- when a user comes to this page, they are not allowed to see the job sources \n\t\t- instead they see a login form\n\t\t- if they login successfully, they able to view the information for 20 seconds\n\t\t- after 20 seconds are expired, they are logged out and they have to log in again to see the information\n\t\t\t- (20 seconds is of course for demonstration purposes, one can change this to any length of time later and keep a user logged in when they movement on the site, but the important aspect here is that our JWT tokens at some point expire which increases the security of our site)\n\t\t\t- after implementing login, the site looks like this:#gif#fadetest001\n\t- note that after successful login, **the user can refresh the page and stay logged in**\n\t\t- this is accomplished via a **maintain-login** route which sends the JWT token back\n\t- we will keep this site one page for the time being\n\t\t- the user object returned from a successful login will be saved in a variable in React\n\t\t- if the user object exists, only then will another fetch be called to get the sensitive data, in our case the job sources\n- **What we will use:**\n\t- Node/React\n\t- JWT\n\t- Postman\n\t- VSCode REST Client\n- full code here:\n\t- backend: https://github.com/edwardtanguay/ej3-job-manager-backend\n\t- frontend: https://github.com/edwardtanguay/ej3-job-manager\n\t- here's another version with somewhat better features such as a fade-in on the frontend to prevent screen blinking\n\t\t- backend: https://github.com/edwardtanguay/ej2-job-manager-backend\n\t\t- frontend: https://github.com/edwardtanguay/ej2-job-manager\n- The basics of JWT:##jwtstructuresdkj\n- begin with this online full-stack MERN application: [Create full-stack MERN site published at Heroku/Netlify saving data to MongoDB Atlas](https://edwardtanguay.netlify.app/howtos?id=588)\n\t- 1. if you have completed the above project, then continue on at the next point in this howto\n\t- 2. if you have not completed the above project, either complete it first, or set up the project from the respositories as follows:\n\t\t- directory structure:\n\t\t\t- `ej3-job-manager-project`\n\t\t\t\t- `data-import`\n\t\t\t\t- `ej3-job-manager-backend`\n\t\t\t\t- `ej3-job-manager`\n\t\t- set up database as described\n\t\t- clone the repositories into the above structure\n- change frontend so that job-sources are only fetched if `currentUser` exists (if user is logged in)\n\t- App.jsx\n\t\t-----------------------------------------------------\n\t\tfunction App() {\n\t\t\tconst [jobSources, setJobSources] = useState([]);\n\t\t\tconst [currentUser, setCurrentUser] = useState({});\n\n\t\t\tconst getJobSources = async () => {\n\t\t\t\tsetJobSources((await axios.get(backend_url)).data);\n\t\t\t};\n\n\t\t\tconst userIsLoggedIn = () => {\n\t\t\t\treturn Object.keys(currentUser).length > 0;\n\t\t\t};\n\n\t\t\tuseEffect(() => {\n\t\t\t\tif (userIsLoggedIn()) {\n\t\t\t\t\tgetJobSources();\n\t\t\t\t}\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>EJT Job Manager</h1>\n\n\t\t\t\t\t{userIsLoggedIn() ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>There are {jobSources.length} job sources:</p>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{jobSources.map((jobSource, i) => {\n\t\t\t\t\t\t\t\t\treturn <li key={i}>{jobSource.name}</li>;\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<form className=\"login\">\n\t\t\t\t\t\t\t<h2>Login...</h2>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\t\t\n\t\t-----------------------------------------------------\n\t- note now if you can fill the **currentUser** default value with fields (emulate that a user is logged in) then the sensitive data (job-sources in this case) are fetched and shown\n- create **simple** login\n\t- we will now create a simple login form \n\t\t- user clicks on button\n\t\t- post is sent to /login route on backend API\n\t\t- login always succeeds\n\t\t- user object is sent back\n\t\t- data is displayed\n\t- FRONTEND App.jsx code:\n\t\t--------------------------------------------------\n\t\tconst backend_base_url = 'http://localhost:3044';\n\n\t    const [username, setUsername] = useState('');\n\t\tconst [password, setPassword] = useState('');\n\n\t\tconst handleLoginButton = async () => {\n\t\t\tconst _currentUser = (await axios.post(backend_base_url + '/login')).data;\n\t\t\tgetJobSources();\n\t\t\tsetCurrentUser(_currentUser);\n\t\t};\n\t\t--------------------------------------------------\n\t- FRONTEND App.jsx JSX:\n\t\t--------------------------------------------\n\t\t<form className=\"login\">\n\t\t\t<div className=\"row\">\n\t\t\t\tusername:{' '}\n\t\t\t\t<input\n\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\n\t\t\t\t\tvalue={username}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"row\">\n\t\t\t\tpassword:{' '}\n\t\t\t\t<input\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\tvalue={password}\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"row\">\n\t\t\t\t<button type=\"button\" onClick={handleLoginButton}>\n\t\t\t\t\tLogin\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</form>\t\t\n\t\t--------------------------------------------\n\t- BACKEND server.js\n\t\t-----------------------------------------\n\t\tapp.post('/login', async (req, res) => {\n\t\t\tres.status(200).json({\"username\": \"hans\"});\n\t\t});\n\t\t-----------------------------------------\n\t- **note:** even if user does not enter login/password, they are still logged in\n- change login process so that it checks username and password and only sends the user object back if correct\n\t- FRONTEND App.jsx\n\t\t----------------------------------------\n\t\tconst [message, setMessage] = useState('');\n\n\t\tconst handleLoginButton = async () => {\n\t\t\tconst response = await fetch(backend_base_url + '/login', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({ username, password })\n\t\t\t});\n\t\t\tsetUsername('');\n\t\t\tsetPassword('');\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tgetJobSources();\n\t\t\t\tsetCurrentUser(data.user);\n\t\t\t} else {\n\t\t\t\tsetMessage('bad login');\n\t\t\t}\n\t\t};\n\n\t\t<div>{message}</div>\n\t\t----------------------------------------\n\t- BACKEND server.js\n\t\t-----------------------------------\n\t\tconst user = {\n\t\t\tid: 1,\n\t\t\tusername: 'hans',\n\t\t\tfirstName: 'Hans',\n\t\t\tlastName: 'Richter'\n\t\t};\n\n\t\tapp.use(express.json());\n\n\t\tapp.post('/login', (req, res) => {\n\t\t\tconst username = req.body.username;\n\t\t\tconst password = req.body.password;\n\t\t\tif (username === 'hans' && password === '123') {\n\t\t\t\tres.json({\n\t\t\t\t\tuser\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tres.sendStatus(500);\n\t\t\t}\n\t\t});\n\t\t-----------------------------------\n\t- **note:** that after the user logs in, if they refresh they page, they are logged out again\n- on successful login, send client JWT token which they can later prove that they have logged in\n\t- BACKEND\n\t\t- `npm i jsonwebtoken`\n\t- BACKEND: server.js\n\t\t--------------------------------\n\t\timport jwt from 'jsonwebtoken';\n\n\t\tjwt.sign({ user }, 'secretkey', { expiresIn: '20s' }, (err, token) => {\t\t\t\t\t\n\t\t\tres.json({\n\t\t\t\tuser,\n\t\t\t\ttoken\n\t\t\t});\n\t\t});\t\t\n\t\t--------------------------------\n\t- FRONTEND: App.jsx\n\t\t------------------------------------\n\t\tlocalStorage.setItem('token', data.token);\n\t\t------------------------------------\n\t- **note:** still if user refreshes page, they are logged out\n\t- **note:** We set the expiration time of the JWT in order to increase security, 20 seconds is only for testing purposes, more realistically it would be 20, 40, 60 minutes, etc. The main point is that these JWTs don't lie around forever which hackers can use to get into the site.\n- enable client when refreshing page to present the server the JWT token to prove that it has already logged in\n\t- BACKEND: server.js\n\t\t-----------------------------------\n\t\tconst verifyToken = (req, res, next) => {\n\t\t\tconst bearerHeader = req.headers['authorization'];\n\t\t\tif (typeof bearerHeader !== 'undefined') {\n\t\t\t\tconst bearer = bearerHeader.split(' ');\n\t\t\t\tconst bearerToken = bearer[1];\n\t\t\t\treq.token = bearerToken;\n\t\t\t\tnext();\n\t\t\t} else {\n\t\t\t\tres.sendStatus(403);\n\t\t\t}\n\t\t};\n\n\t\tconst decodeJwt = (token) => {\n\t\t\tlet base64Url = token.split('.')[1];\n\t\t\tlet base64 = base64Url.replace('-', '+').replace('_', '/');\n\t\t\tlet decodedData = JSON.parse(Buffer.from(base64, 'base64').toString('binary'));\n\t\t\treturn decodedData;\n\t\t}\n\n\t\tapp.post('/maintain-login', verifyToken, (req, res) => {\n\t\t\tjwt.verify(req.token, 'secretkey', (err, authData) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tres.sendStatus(403);\n\t\t\t\t} else {\n\t\t\t\t\tconst data = decodeJwt(req.token);\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tuser: data.user\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\t\t\n\t\t-----------------------------------\n- test this first with **Postman**\n- then test with VSCode **Rest Client**\n\t- in your VSCode, install the [Rest Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) extension\n\t- test.rest\n\t\t----------------------------------------------------------\n\t\t@url = http://localhost:3044\n\n\t\t## TEST\n\t\tGET {{url}}\n\n\t\t### LOGIN\n\t\tPOST {{url}}/login\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"username\": \"hans\",\n\t\t\t\"password\": \"123\"\n\t\t}\n\n\t\t### MAINTAIN LOGIN\n\t\tPOST {{url}}/maintain-login\n\t\tcontent-type: application/json\n\t\tauthorization: Bearer \n\t\t----------------------------------------------------------\n- enable client to send present its saved JWT token when the user refreshes the page in order to keep the user logged in\n\t- FRONTEND: App.jsx\n\t\t---------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(backend_base_url + '/maintain-login', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tauthorization: 'Bearer ' + localStorage.getItem('token')\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetCurrentUser(data.user);\n\t\t\t\t\tgetJobSources();\n\t\t\t\t} else {\n\t\t\t\t\tsetCurrentUser({});\n\t\t\t\t}\n\t\t\t})();\n\t\t}, []);\t\t\n\n\t\tconst handleLogoutButton = () => {\n\t\t\tlocalStorage.setItem('token', '');\n\t\t\tsetCurrentUser({});\n\t\t};\t\t\n\n\t\t<button className=\"logout\" onClick={handleLogoutButton}>\n\t\t\tLogout\n\t\t</button>\n\t\t---------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-13 05:16:55","systemWhoCreated":"systemUnknown"},{"id":590,"category":"Authorization","title":"Implement authorization using bcrypt in a full-stack MERN app that has basic authentication","body":"- **What we will build**\n\t- we will extend our full-stack MERN application to which [we just added JWT to authenticate our users](https://edwardtanguay.netlify.app/howtos?id=589)\n\t- we will base our authorization on a concept of users, accessGroups and pages\n\t\t- each user has a list of accessGroups to which they belong\n\t\t- each page has a list of accessGroups to which it allows access\n\t\t- there is always an active user, if no users is logged in, then anonymous user is active, who also belongs to specific groups\n\t- we will build a new collection called users\n\t\t- passwords stored as bcrypt hashes\n- **What we will use**\n\t- backend\n\t\t- Node\n\t\t- Express\n\t\t- MongoDB\n\t\t- bcrypt\n\t- frontend\n\t\t- React (Vite)\n\t\t- Sass\n- finished site will look like this:#gif#thebcryptok\n- full code is here:\n\t- backend: https://github.com/edwardtanguay/ej4-job-manager-backend\n\t- frontend: https://github.com/edwardtanguay/ej4-job-manager\n- **set up project**\n\t- if you are continuing this job-manager project from the last howto ([Add JWT login authentication to an online MERN site](https://edwardtanguay.netlify.app/howtos?id=589)), then continue with that project\n\t- if you are starting this job-manager project with this howto, then set up a project called e.g. `nnn-job-manager` where `nnn` is a unique code (e.g. your initials) so that your project name is unique at Netlify and Heroku\n\t- in your projects directory:\n\t\t- `mkdir nnn-job-manager-project`\n\t\t- `cd nnn-job-manager-project`\n\t\t- clone backend:\n\t\t\t- `git clone git@github.com:edwardtanguay/ej2-job-manager-backend.git nnn-job-manager-backend`\n\t\t- clone frontend:\n\t\t\t- `git clone git@github.com:edwardtanguay/ej2-job-manager.git nnn-job-manager`\n\t\t- open projects in two VSCodes\n\t\t\t- `code nnn-job-manager-backend`\n\t\t\t- `code nnn-job-manager`\n\t\t- create MongoDB database and collection and set up in backend\n\t\t\t- create database `nnn-job-manager`\n\t\t\t- create collections for each .json file in backend: `dev/dataImport`\n\t\t\t- change connection string to `nnn-job-manager`\n\t\t- setup and start each project\n\t\t\t- `rm -rf .git` \n\t\t\t- `git init`\n\t\t\t- `npm i`\n\t\t\t- `npm run dev`\n- authorization concept\n\t- users\n\t\t- anonymousUser\n\t\t\t- loggedOutUsers\n\t\t- edward\n\t\t\t- loggedInUsers, administrators\n\t\t- jason\n\t\t\t- loggedInUsers, jobSeekers\n\t\t- richter\n\t\t\t- loggedInUsers, companies\n\t- pages\n\t\t- login\n\t\t\t- loggedOutUsers\n\t\t- welcome\n\t\t\t- loggedInUsers\n\t\t- jobSources\n\t\t\t- adminstrators, jobSeekers\n\t\t- cv\n\t\t\t- administrators, companies\n\t- concepts\n\t\t- there is always an active user\n\t\t\t- if no particular user, then by default: anonymousUser\n\t\t\t- even this users has specific rights, e.g. anonymousUser is the only user that has access to the Login page\n\t\t- useContext variables and functions\n\t\t\t- currentUser\n\t\t\t- e.g. currentUserIsInAccessGroup('administrators')\n- password hashing concept\n\t- see: [Why and how to use bcrypt for hashing passwords](https://edwardtanguay.netlify.app/howtos?searchText=bcryp)\n\t- never save clear-text passwords in the database\n\t- one could encrypt the password and save the encrypted form in the database\n\t\t- but what can be encrypted can be decrypted\n\t\t- if a hacker gets access to the decryption algorithm, then they can decrypt all your passwords\n\t- therefore create a hash of your password \n\t\t- a hash is a one-way process\n\t\t- the hash cannot be converted back into the password\n\t\t\t- it is too complex\n\t\t\t- the algorithm (e.g. bycrypt) is slow by design\n\t\t\t- it would take too long and too much CPU processing power to find the password\n\t\t- bcrypt cannot get the original password, but it can hash a new password and tell you if the hashes match\n\t\t\t- hence you can check to see if a person knows their password\n\t- but there are rainbow tables which have the hashs of known passwords\n\t\t- therefore use a salt\n\t\t- choose a high enough saltRounds number\n\t\t\t- \"you want to select a number that is high enough to prevent attacks, but not slower than potential user patience\"\n\t\t\t- current default is 10\t\t\t\n- make collection users\n\t- dev/dataImport/users.json\n\t\t---------------------------------\n\t\t[\n\t\t\t{\n\t\t\t\t\"username\": \"anonymousUser\",\n\t\t\t\t\"firstName\": \"Anonymous\",\n\t\t\t\t\"lastName\": \"User\",\n\t\t\t\t\"hash\": \"nnn\",\n\t\t\t\t\"accessGroups\": [\"loggedOutUsers\"]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"username\": \"edward\",\n\t\t\t\t\"firstName\": \"Edward\",\n\t\t\t\t\"lastName\": \"Tanguay\",\n\t\t\t\t\"hash\": \"nnn\",\n\t\t\t\t\"accessGroups\": [\"loggedInUsers\", \"administrators\"]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"username\": \"jason\",\n\t\t\t\t\"firstName\": \"Jason\",\n\t\t\t\t\"lastName\": \"Jenkins\",\n\t\t\t\t\"hash\": \"nnn\",\n\t\t\t\t\"accessGroups\": [\"loggedInUsers\", \"jobSeekers\"]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"username\": \"richter\",\n\t\t\t\t\"firstName\": \"Henri\",\n\t\t\t\t\"lastName\": \"Richter\",\n\t\t\t\t\"hash\": \"nnn\",\n\t\t\t\t\"accessGroups\": [\"loggedInUsers\", \"companies\"]\n\t\t\t}\n\t\t]\t\t\n\t\t---------------------------------\n\t- learn to use bcrypt\n\t\t- `npm i bcrypt`\n\t\t- dev/bcrypt.js\n\t\t\t------------------------------\n\t\t\timport bcrypt from 'bcrypt';\n\n\t\t\t// CREATE SALT AND HASH WHEN USER CREATES PASSWORD\n\t\t\tconst salt = await bcrypt.genSalt();\n\t\t\tconsole.log(`salt: ${salt}`);\n\t\t\tconst hash = await bcrypt.hash('password', salt);\n\t\t\tconsole.log(`hash: ${hash}`);\n\n\t\t\t// SAVE CREATED HASH IN THE DATABASE FOR THE USER\n\t\t\tconst hash1 = '$2b$10$7als6Vw2sOiqRyj22YdVfO0MCJ8R.8yc4bYYgHrncOXMRS8gdgNQC';\n\t\t\tconst hash2 = '$2b$10$DYtulkXrR3XyWiRoCTzRG.dn7d.gduklI8hocQpHraMi0NEQ0fgfG';\n\t\t\tconst hash3 = '$2b$10$CeLYT7jAguaiJZsEjAej.O0Fqh/rIGk6209whKjCee0RyPRKwzndy';\n\n\t\t\t// WHEN USER LOGS IN, ASK BCRYPT IF THE HASH IN THE DATABASE WOULD COME FROM THIS PASSWORD\n\t\t\tconsole.log(await bcrypt.compare('password', hash1));\n\t\t\tconsole.log(await bcrypt.compare('password', hash2));\n\t\t\tconsole.log(await bcrypt.compare('password', hash3));\n\t\t\t------------------------------\n\t\t- dev/generateHashes.js\n\t\t\t---------------------------------\n\t\t\timport bcrypt from 'bcrypt';\n\n\t\t\tconst createHash = async (password) => {\n\t\t\t\tconst salt = await bcrypt.genSalt();\n\t\t\t\tconst hash = await bcrypt.hash(password, salt);\n\t\t\t\treturn hash;\n\t\t\t};\n\n\t\t\tconst passwords = ['anonymousUser123', 'edward123', 'jason123', 'richter123'];\n\n\t\t\tpasswords.forEach((password) => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst hash = await createHash('nnn');\n\t\t\t\t\tconsole.log(`${password} => ${hash}`);\n\t\t\t\t})();\n\t\t\t});\t\t\t\n\t\t\t---------------------------------\n\t\t- generated hashes\n\t\t\t- note that each time the hashes are different but this doesn't matter, they can all be matched back to the password:##pickonandusit\n\t\t- choose one set and add those hashes to users.json\n\t\t- import into collection called users\t\n- backend: /login\n\t- now get user from database and check has with bcrypt\n\t- server.js\n\t\t----------------------------------\n\t\timport bcrypt from 'bcrypt';\n\n\t\tapp.post('/login', async (req, res) => {\n\t\t\tconst username = req.body.username;\n\t\t\tlet password = req.body.password;\n\t\t\tconst user = await User.findOne({ username });\n\t\t\tif (user === null) {\n\t\t\t\tres.status(403).send('user not found');\n\t\t\t} else {\n\t\t\t\tconst passwordIsCorrect = await bcrypt.compare(\n\t\t\t\t\tpassword,\n\t\t\t\t\tuser.hash\n\t\t\t\t);\n\t\t\t\tif (passwordIsCorrect) {\n\t\t\t\t\tconst frontendUser = { username, firstName: user.firstName, lastName: user.lastName, accessGroups: user.accessGroups };\n\t\t\t\t\tjwt.sign(\n\t\t\t\t\t\t{ user },\n\t\t\t\t\t\t'secretkey',\n\t\t\t\t\t\t{ expiresIn: '20s' },\n\t\t\t\t\t\t(err, token) => {\n\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\tuser: frontendUser,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(403).send('bad password');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t----------------------------------\n- frontend: display user in box with all information\n\t- change front end to handle the new authorization concept\n\t- App.jsx\n\t\t----------------------------------------------\n\t\tconst userIsLoggedIn = () => {\n\t\t\treturn currentUser.username !== 'anonymousUser';\n\t\t};\n\n\t\tconst currentUserIsInAccessGroup = (accessGroup) => {\n\t\t\tif (currentUser.accessGroups) {\n\t\t\t\treturn currentUser.accessGroups.includes(accessGroup);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\t\t\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(backend_base_url + '/maintain-login', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tauthorization: 'Bearer ' + localStorage.getItem('token'),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetCurrentUser(data.user);\n\t\t\t\t\tgetJobSources();\n\t\t\t\t} else {\n\t\t\t\t\tconst response = await fetch(backend_base_url + '/login', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tusername: 'anonymousUser',\n\t\t\t\t\t\t\tpassword: 'anonymousUser123',\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tgetJobSources();\n\t\t\t\t\t\tsetCurrentUser(data.user);\n\t\t\t\t\t\tlocalStorage.setItem('token', data.token);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetMessage('bad login');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t}, []);\t\t\n\n\t\tconst handleLogoutButton = () => {\n\t\t\tlocalStorage.removeItem('token');\n\t\t\tsetCurrentUser({username: 'anonymousUser'});\n\t\t};\t\t\n\n\t\t<div className=\"loggedInInfo\">\n\t\t\t{userIsLoggedIn() && (\n\t\t\t\t<div>\n\t\t\t\t\tLogged in: {currentUser.firstName}{' '}\n\t\t\t\t\t{currentUser.lastName}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t\t<div className=\"info\">\n\t\t\t{currentUserIsInAccessGroup('administrators') && (\n\t\t\t\t<div>info for administrators</div>\n\t\t\t)}\n\t\t\t{currentUserIsInAccessGroup('jobSeekers') && (\n\t\t\t\t<div>new job information for job seekers</div>\n\t\t\t)}\n\t\t</div>\t\t\n\t\t----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-14 06:55:15","systemWhoCreated":"systemUnknown"},{"id":591,"category":"MERN","title":"Implement Frontend authentication/authorization in a MERN application with React Router","body":"- **What we will do:**\n\t- extend our full-stack MERN application from this point: [Implement authorization using bcrypt in a full-stack MERN app that has basic authentication](https://edwardtanguay.netlify.app/howtos?id=590)\n\t- add React Router with pages:\n\t\t- Welcome\n\t\t- Register\n\t\t- Login\n\t\t- Job Sources\n\t\t- CV\n\t\t- Applications\n\t- make it so each user who is logged in only sees appropriate pages\n- **What we will use:**\n\t- backend\n\t\t- Node\n\t\t- Express \n\t\t- cors\n\t\t- dotenv\n\t\t- bcrypt\n\t- frontend\n\t\t- React (Vite)\n\t\t- Sass\n\t\t- React Router\n- finished site will work something like this:#gif#theej6onehowto\n- full code is here:\n\t- backend: https://github.com/edwardtanguay/ej6-job-manager-backend\n\t- frontend: https://github.com/edwardtanguay/ej6-job-manager\n- set up project\n\t- if you are continuing this job-manager project form the last howto ([Implement authorization using bcrypt in a full-stack MERN app that has basic authentication](https://edwardtanguay.netlify.app/howtos?id=590)) then continue with that\n\t- if you are starting this job-manager project with this howto, then set up a project called `nnn-job-manager` where `nnn` is a unique code (e.g. your initials) so that your project name is unique at Netlify and Heroku\n\t- in your projects directory\n\t\t- `mkdir nnn-job-manager-project`\n\t\t- `cd nnn-job-manager-project`\n\t\t- clone backend:\n\t\t\t- `git clone https://github.com/edwardtanguay/ej4-job-manager-backend.git nnn-job-manager-project`\n\t\t- clone frontend:\n\t\t\t- `git clone https://github.com/edwardtanguay/ej4-job-manager.git nnn-job-manager`\n\t\t- open project in two VSCodes\n\t\t\t- `code nnn-job-manager-backend`\n\t\t\t- `code nnn-job-manager`\n\t- set up each project\n\t\t- `rm -rf .git`\n\t\t- `git init`\n\t\t- `npm i`\n\t- create MongoDB database and collection and set up in backend\n\t\t- create database `nnn-job-manager`\n\t\t- create collections for each .json file in backend:\n\t\t\t- `dev/dataImport/jobSources.json`\n\t\t\t- `dev/dataImport/users.json`\n\t\t- generate hashes for users with `dev/generateHashes.js`\n\t\t\t- copy hashes into database collection `users`\n\t\t- point Mongoose connection string to correct database\n\t- start each project\n\t\t- `npm run dev`\t\n\t- test that one can log in as each user\n\t- both sites\n\t\t- git: initial commit\n- add pages and React Router:\n\t- add page components\n\t\t- src/pages/PageWelcome.jsx\n\t\t\t---------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t---------------------------\n\t\t- src/pages/PageJobSources.jsx\n\t\t\t------------------------------\n\t\t\texport const PageJobSources = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the Job Sources page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------\n\t\t- src/pages/PageJobApplications.jsx\n\t\t\t-----------------------------------\n\t\t\texport const PageJobApplications = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the Job Applications page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------\n\t\t- src/pages/PageCv.jsx\n\t\t\t---------------------------\n\t\t\texport const PageCv = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the CV page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------\n\t\t- src/pages/PageLogin.jsx\n\t\t\t---------------------------\n\t\t\texport const PageLogin = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the Login page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------\n\t\t- src/pages/PageRegister.jsx\n\t\t\t---------------------------\n\t\t\texport const PageRegister = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the Register page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------\n\t- implement React Router\n\t\t- `npm i react-router-dom`\n\t\t- main.js\n\t\t\t- remove React.StrictMode (developing help we don't need)\n\t\t\t- `import { BrowserRouter } from 'react-router-dom';`\n\t\t\t- wrap App with `<BrowserRouter>`\n\t\t- App.jsx\n\t\t\t-----------------------------------\nimport { NavLink, Route, Routes } from 'react-router-dom';\n\n\t\t\timport { PageWelcome } from './pages/PageWelcome';\n\t\t\timport { PageJobSources } from './pages/PageJobSources';\n\t\t\timport { PageJobApplications } from './pages/PageJobApplications';\n\t\t\timport { PageCv } from './pages/PageCv';\n\t\t\timport { PageLogin } from './pages/PageLogin';\n\t\t\timport { PageRegister } from './pages/PageRegister';\t\t\n\n\t\t\t<nav>\n\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\t\t\t\t<NavLink to=\"/job-sources\">Job Sources</NavLink> \n\t\t\t\t<NavLink to=\"/job-applications\">Job Applications</NavLink>\n\t\t\t\t<NavLink to=\"/cv\">CV</NavLink>\n\t\t\t\t<NavLink to=\"/login\">Login</NavLink> \n\t\t\t\t<NavLink to=\"/register\">Register</NavLink>\n\t\t\t</nav>\t\t\n\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t<Route path=\"/job-sources\" element={<PageJobSources />} />\n\t\t\t\t<Route path=\"/job-applications\" element={<PageJobApplications />} />\n\t\t\t\t<Route path=\"/cv\" element={<PageCv />} />\n\t\t\t\t<Route path=\"/login\" element={<PageLogin />} />\n\t\t\t\t<Route path=\"/register\" element={<PageRegister />} />\n\t\t\t</Routes>\n\t\t\t-----------------------------------\n\t\t- App.scss\n\t\t\t------------------------------\n\t\t\tnav {\n\t\t\t\ta {\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\t\t\t\ta:not(:last-of-type);after {\n\t\t\t\t\tcolor: #444;\n\t\t\t\t\tcontent: ' | ';\n\t\t\t\t}\n\n\t\t\t\ta.active {\n\t\t\t\t\tcolor: yellow;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t------------------------------\n- make login work on login page\n\t- App.jsx\n\t\t- move all JSX code to Login page\n\t\t- for now, pass all needed variables to Login page\n\t\t\t------------------------------------\n\t\t\t<Route path=\"/login\" element={<PageLogin message={message} jobSources={jobSources} userIsLoggedIn={userIsLoggedIn} currentUser={currentUser} currentUserIsInAccessGroup={currentUserIsInAccessGroup} handleLogoutButton={handleLogoutButton} handleLoginButton={handleLoginButton} username={username} password={password} setUsername={setUsername} setPassword={setPassword}/>} />\t\t\n\t\t\t------------------------------------\n\t- Login.jsx\n\t\t-------------------------------------------------\n\t\texport const PageLogin = ({message, jobSources, userIsLoggedIn, currentUser, currentUserIsInAccessGroup, handleLogoutButton, handleLoginButton, username, password, setUsername, setPassword}) => {\n\t\t-------------------------------------------------\n- move code to correct pages\n\t- move JobSearch display code to JobSearch page\n\t- put logged-in name and logout button on top in App.jsx for all pages\n\t\t- App.jsx\n\t\t\t--------------------------------\n\t\t\t{userIsLoggedIn() && (\n\t\t\t\t<div className=\"loggedInInfo\">\n\t\t\t\t\t{currentUser.firstName} {currentUser.lastName} <button className=\"logout\" onClick={handleLogoutButton}>\n\t\t\tLogout\n\t\t</button>\n\t\t\t\t</div>\n\t\t\t)}\t\t\t\n\t\t\t--------------------------------\n\t\t- App.scss\n\t\t\t---------------------------\n\t\t\t.loggedInInfo {\n\t\t\t\tcolor: orange;\n\t\t\t\tborder-bottom: 1px solid #444;\n\t\t\t\tpadding-bottom: 10px;\n\t\t\t\tmargin-bottom: 5px;\n\t\t\t}\t\t\t\n\t\t\t---------------------------\n- set up pages to reflect logged-in user rights\n\t- App.jsx\n\t\t-----------------------------------------------\n\t\tconst currentUserIsInAccessGroups = (accessGroups) => {\n\t\t\tlet rb = false;\n\t\t\taccessGroups.forEach((accessGroup) => {\n\t\t\t\tconsole.log(`checking ${accessGroup}`, currentUser.accessGroups);\n\t\t\t\tconsole.log(currentUser.accessGroups.includes(accessGroup));\n\t\t\t\tif (currentUser.accessGroups.includes(accessGroup)) {\n\t\t\t\t\trb = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn rb;\n\t\t};\t\t\n\n\t\t<nav>\n\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\n\t\t\t{currentUserIsInAccessGroups([\n\t\t\t\t'jobSeekers',\n\t\t\t\t'administrators',\n\t\t\t]) && <NavLink to=\"/job-sources\">Job Sources</NavLink>}\n\t\t\t{currentUserIsInAccessGroups(['administrators']) && (\n\t\t\t\t<NavLink to=\"/job-applications\">\n\t\t\t\t\tJob Applications\n\t\t\t\t</NavLink>\n\t\t\t)}\n\t\t\t{currentUserIsInAccessGroups([\n\t\t\t\t'administrators',\n\t\t\t\t'companies',\n\t\t\t]) && <NavLink to=\"/cv\">CV</NavLink>}\n\t\t\t{currentUserIsInAccessGroups([\n\t\t\t\t'loggedOutUsers',\n\t\t\t]) && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t\t\t\t<NavLink to=\"/register\">Register</NavLink>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t</nav>\n\t\t-----------------------------------------------\n- move the login message \"bad login\" to general site message\n\t- App.jsx\n\t\t------------------------------------\n\t\tsetTimeout(() => {\n\t\t\tsetMessage('');\n\t\t}, 3000);\n\n\t\t{message !== '' && <div className=\"siteMessage\">{message}</div>}\n\t\t------------------------------------\n\t- App.scss\n\t\t---------------------------------------\n\t\t.siteMessage {\n\t\t\tbackground-color: #444;\n\t\t\tcolor: tomato;\n\t\t\tpadding: 5px;\n\t\t\tborder-radius: 5px;\n\t\t\tmargin-top: 5px;\n\t\t}\t\t\n\t\t---------------------------------------\n- move code for login page to login page\n\t- App.jsx, move:\n\t\t------------------------------------\n\t\tconst [username, setUsername] = useState('');\n\t\tconst [password, setPassword] = useState('');\t\t\n\n\t\thandleLoginButton\n\n\t\tbackend_base_url={backend_base_url}\n\t\tsetMessage={setMessage}\n\t\tgetJobSources={getJobSources}\n\t\tsetCurrentUser={setCurrentUser}\t\t\n\t\t------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-17 20:56:17","systemWhoCreated":"systemUnknown"},{"id":592,"category":"useReducer","title":"Create React site with useContext/useReducer as state solution","body":"- **What we will build:**\n\t- a React website (Vite) reads an array of flashcards from the API backend\n\t- buttons enable you to delete, edit and add flashcards\n\t- these actions are managed by a **useReducer** that is in a **useContext**\n- **How we will build it**\n\t- first we will build a simple solution of a counter with useContext\n\t- then we will convert the counter to a useReducer\n\t- then we will add actions which manage the add, delete and edit buttons\n- **What we will use**\n\t- React (Vite)\n\t- useContext\n\t- useReducer\n- code of various versions of this project here:\n\t- COMPLETED VERSION 1: https://github.com/edwardtanguay/ejt-add-edit-delete-rh2\n\t- COMPLETED VERSION 2: https://github.com/edwardtanguay/ej8-reducer-context\n\t- implements add: https://github.com/edwardtanguay/ejt-reducer-context\n\t- generic itemType: https://github.com/edwardtanguay/ej3-reducer-context\n\t- keeps \"dispatch\", handles all errors on save: https://github.com/edwardtanguay/ejt-add-edit-delete-rh\n- finished site will work something like this:#gif#adddeledit001\n- setup minimalized React site with Vite\n\t- setup \n\t\t- go to projects folder\n\t\t- `npm create vite`\n\t\t\t- give project name, e.g. `ejt-reducer-context`\n\t\t- `code ejt-reducer-context`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- minimize and add SASS\n\t\t- empty both css files\n\t\t- reduce App.jsx\n\t\t- .prettierrc in\n\t\t- add SASS\n\t- set up Git\n- implement useContext with counter example\n\t- main.jsx\n\t\t----------------------------------------\n\t\timport { AppProvider } from './AppContext';\n\n\t\tReactDOM.createRoot(document.getElementById('root')).render(\n\t\t\t<AppProvider>\n\t\t\t\t<App />\n\t\t\t</AppProvider>\n\t\t);\t\t\n\t\t----------------------------------------\n\t- App.jsx\n\t\t--------------------------------\n\t\timport './App.scss';\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from './AppContext';\n\n\t\tfunction App() {\n\t\t\tconst { count, setCount } = useContext(AppContext);\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>useContext / useReducer Site</h1>\n\t\t\t\t\t<div>count = {count}</div>\n\t\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"decrease\"\n\t\t\t\t\t\t\tonClick={() => setCount(count - 1)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t-\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"increase\"\n\t\t\t\t\t\t\tonClick={() => setCount(count + 1)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t--------------------------------\n\t- src/AppContext.jsx\n\t\t--------------------------------------------\n\t\timport { useState } from 'react';\n\t\timport { createContext } from 'react';\n\n\t\texport const AppContext = createContext();\n\n\t\texport const AppProvider = ({ children }) => {\n\t\t\tconst [count, setCount] = useState(1);\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider value={{\n\t\t\t\t\tcount,\n\t\t\t\t\tsetCount\n\t\t\t\t}}>{children}</AppContext.Provider>\n\t\t\t)\n\t\t}\t\t\n\t\t--------------------------------------------\n- implement useReducer into counter example\n\t- AppContext.jsx\n\t\t------------------------------\n\t\timport { createContext } from 'react';\n\t\timport { useReducer } from 'react';\n\n\t\texport const AppContext = createContext();\n\n\t\tconst initialState = {\n\t\t\tcount: 0\n\t\t};\n\n\t\tfunction reducer(state, action) {\n\t\t\tlet obj = {...state};\n\t\t\tswitch (action) {\n\t\t\t\tcase 'increaseCount':\n\t\t\t\t\tobj.count++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decreaseCount':\n\t\t\t\t\tobj.count--;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\n\n\t\texport const AppProvider = ({ children }) => {\n\t\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider value={{\n\t\t\t\t\tstate,\n\t\t\t\t\tdispatch\n\t\t\t\t}}>{children}</AppContext.Provider>\n\t\t\t)\n\t\t}\t\t\n\t\t------------------------------\n\t- App.jsx\n\t\t---------------------------------\n\t\tfunction App() {\n\t\t\tconst { state, dispatch } = useContext(AppContext);\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>useContext / useReducer Site</h1>\n\t\t\t\t\t<div>count = {state.count}</div>\n\t\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"decrease\"\n\t\t\t\t\t\t\tonClick={() => dispatch('decreaseCount')}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t-\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"increase\"\n\t\t\t\t\t\t\tonClick={() => dispatch('increaseCount')}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t+\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\t\t\n\t\t---------------------------------\n- implement **json-server** to serve items to the frontend to do display\n\t- create JSON file of items\n\t\t- src\\data\\db.json\n\t\t- fill with this content:\n\t\t\t-----------------------------------\n\t\t\t{\n\t\t\t\t\"germanNouns\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\t\"article\": \"die\",\n\t\t\t\t\t\t\"singular\": \"Notiz\",\n\t\t\t\t\t\t\"plural\": \"die Notizen\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\t\"article\": \"das\",\n\t\t\t\t\t\t\"singular\": \"Interface\",\n\t\t\t\t\t\t\"plural\": \"die Interfaces\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\t\"article\": \"der\",\n\t\t\t\t\t\t\"singular\": \"Workshop\",\n\t\t\t\t\t\t\"plural\": \"die Workshops\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t-----------------------------------\n\t- install and start the json-server\n\t\t- `npm i json-server`\n\t\t- package.json\n\t\t\t-----------------------------\n\t\t    \"api\": \"json-server --watch ./src/data/db.json --port 4555\"\n\t\t\t-----------------------------\n\t- with the Rest Client extension, test all REST verbs with this REST-Client file:\n\t\t- test.rest\n\t\t\t----------------------------------------\n\t\t\t@url = http://localhost:4555\n\n\t\t\t### GET ALL ITEMS\n\t\t\tGET {{url}}/germanNouns\n\n\t\t\t### ADD ITEM\n\t\t\tPOST {{url}}/germanNouns\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"article\": \"nnn\",\n\t\t\t\t\"singular\": \"nnn\",\n\t\t\t\t\"plural\": \"nnn\"\n\t\t\t}\n\n\t\t\t### REPLACE ALL FIELDS IN AN ITEM\n\t\t\tPUT {{url}}/germanNouns/4\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"article\": \"die\",\n\t\t\t\t\"singular\": \"Bibliothek\",\n\t\t\t\t\"plural\": \"die Librarys\"\n\t\t\t}\n\n\t\t\t### REPLACE ONE FIELD IN AN ITEM\n\t\t\tPATCH {{url}}/germanNouns/4 \n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"singular\": \"Library\"\n\t\t\t}\n\n\t\t\t### DELETE AN ITEM\n\t\t\tDELETE {{url}}/germanNouns/4 \t\t\t\n\t\t\t----------------------------------------\n\t- configure a start script to launch both frontend and backend (api)\n\t\t- `npm i -D npm-run-all`\n\t\t- package.json\n\t\t\t-----------------------------------\n\t\t\t\"start\": \"run-p api dev\",\n\t\t\t-----------------------------------\n\t\t- `npm start` to start both frontend and backend\n- display all items from json-server\n\t- `npm i axios`\n\t- refactor AppContext, notice\n\t\t- the switch on `action` has changed to `action.type`\n\t- AppContext.jsx\n\t\t-----------------------------------------\n\t\timport axios from 'axios';\n\n\t\tconst api_base_url = 'http://localhost:4555';\n\n\t\tconst initialState = {\n\t\t\tcount: 0,\n\t\t\tgermanNouns: []\n\t\t};\t\t\n\n\t\tfunction reducer(state, action) {\n\t\t\tlet obj = { ...state };\n\t\t\tswitch (action.type) {\n\t\t\t\tcase 'increaseCount':\n\t\t\t\t\tobj.count++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'decreaseCount':\n\t\t\t\t\tobj.count--;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'loadGermanNouns':\n\t\t\t\t\tobj.germanNouns = action.payload;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\t\t\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst _germanNouns = (await axios.get(`${api_base_url}/germanNouns`)).data;\n\t\t\t\tdispatch({type: 'loadGermanNouns', payload: _germanNouns})\t\t\t\n\t\t\t})();\n\t\t}, []);\t\t\n\t\t-----------------------------------------\n\t- App.jsx\n\t\t----------------------------\n\t\t<h2>Count</h2>\n\t\t<h2>Items from API</h2>\n\n\t\tonClick={() => dispatch({ type: 'decreaseCount' })}\n\t\tonClick={() => dispatch({ type: 'increaseCount' })}\n\n\t\t<div className=\"germanNounArea\">\n\t\t\t{state.germanNouns.map((item, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"germanNoun\" key={i}>{item.singular}</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\t\t\n\t\t----------------------------\n\t- update App.scss\n\t\t-----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #eee;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 1rem;\n\t\t\tfont-size: 1.5rem;\n\n\t\t\th1 {\n\t\t\t\tfont-size: 2.6rem;\n\t\t\t\tcolor: #aaa;\n\t\t\t}\n\n\t\t\th2 {\n\t\t\t\tbackground-color: #222;\n\t\t\t\tpadding: .2rem .5rem;\n\t\t\t\tmax-width: 28rem;\n\t\t\t\tborder-radius: .5rem;\n\t\t\t}\n\n\t\t\t.countArea {\n\t\t\t\tmargin-top: 1rem;\n\t\t\t\tmargin-bottom: 2rem;\n\t\t\t\tdisplay: flex;\n\n\t\t\t\tbutton {\n\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\tmargin-right: .5rem;\n\t\t\t\t\twidth: 4rem;\n\t\t\t\t}\n\n\t\t\t\t.count {\n\t\t\t\t\tfont-size: 2.7rem;\n\t\t\t\t\tmargin-left: .8rem;\n\t\t\t\t\tcolor: orange;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.germanNounArea {\n\t\t\t\t.germanNoun {\n\t\t\t\t\tbackground-color: #444;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------\n\t- your site should now look something like this:##secondDesignCountItems\n- display all fields of items and style\n\t- App.jsx\n\t\t----------------------------------\n\t\t<div className=\"germanNounArea\">\n\t\t\t{state.germanNouns.map((item, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<fieldset className=\"germanNoun\" key={i}>\n\t\t\t\t\t\t<legend>ID: {item.id}</legend>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label htmlFor=\"article\">Article</label>\n\t\t\t\t\t\t\t<div className=\"value\">{item.article}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label htmlFor=\"singular\">Singular</label>\n\t\t\t\t\t\t\t<div className=\"value\">{item.singular}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label htmlFor=\"plural\">Plural</label>\n\t\t\t\t\t\t\t<div className=\"value\">{item.plural}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</fieldset>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\t\t\n\t\t----------------------------------\n\t- App.scss\n\t\t--------------------------------\n\t\t.germanNounArea {\n\n\t\t\tfieldset.germanNoun {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder: 1px solid #666;\n\t\t\t\tcolor: rgb(226, 226, 144);\n\t\t\t\tmax-width: 38rem;\n\n\t\t\t\tlegend {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\tfont-family: monospace;\n\t\t\t\t}\n\n\t\t\t\t.row {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-content: start;\n\n\t\t\t\t\tlabel {\n\t\t\t\t\t\t&:after {\n\t\t\t\t\t\t\tcontent: \":\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twidth: 6rem;\n\t\t\t\t\t\tmargin: 0 0 10px 0;\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t}\n\n\t\t\t\t\t.value {\n\t\t\t\t\t\tcolor: #fff;\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\tfont-family: monospace;\n\t\t\t\t\t}\n\n\t\t\t\t\tinput {\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\twidth: 300px;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t--------------------------------\n\t- your display should now look something like this:##thirditerationdoing\n- display manage buttons to each item\n\t- App.jsx\n\t\t-----------------------------\n\t\t<div className=\"buttonRow\">\n\t\t\t<button>Edit</button>\n\t\t\t<button>Delete</button>\n\t\t\t<button>Add</button>\n\t\t</div>\t\t\n\t\t-----------------------------\n\t- App.scss\n\t\t-----------------------------------\n\t\t.buttonRow {\n\t\t\ttext-align: right;\n\t\t\tbackground-color: #4a4a4a;\n\t\t\tpadding: .3rem .3rem .7rem .3rem;\n\t\t\tbutton {\n\t\t\t\tmargin-right: .3rem;\n\t\t\t}\n\t\t}\n\t\t-----------------------------------\n\t- items with buttons should look something like this:##somethiliethis\n- implement edit functionality with state variables\n\t-  add needed field on items\n\t\t- AppContext.jsx\n\t\t\t--------------------------------\n\t\t\tconst initialState = {\n\t\t\t\tcount: 0,\n\t\t\t\tgermanNouns: [],\n\t\t\t\tgermanNounForm: {\n\t\t\t\t\tarticle: 'aa',\n\t\t\t\t\tsingular: 'ss',\n\t\t\t\t\tplural: 'pp'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_germanNouns.forEach(m => {\n\t\t\t\tm.isEditing = false;\n\t\t\t\tm.manageMessage = 'Manage Options:';\n\t\t\t});\t\t\t\n\t\t\t--------------------------------\n\t\t- App.jsx\n\t\t\t---------------------------\n\t\t\t<div className=\"buttonRow\">\n\t\t\t\t<div className=\"manageMessage\">{item.manageMessage}</div>\n\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t<button>Edit</button>\n\t\t\t\t\t<button>Delete</button>\n\t\t\t\t\t<button onClick={handleButtonAdd}>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\t\n\t\t\t---------------------------\n\t\t- App.scss\n\t\t\t-----------------------------\n\t\t\t.buttonRow {\n\t\t\t\ttext-align: right;\n\t\t\t\tbackground-color: #4a4a4a;\n\t\t\t\tpadding: .3rem .3rem .7rem .3rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: space-between;\n\n\t\t\t\t.manageMessage {\n\t\t\t\t\tcolor: #666;\n\t\t\t\t\tmargin-left: .5rem;\n\t\t\t\t\tmargin-top: .2rem;\n\t\t\t\t\tmargin-right: 1rem;\n\t\t\t\t\ttext-align: left;\n\t\t\t\t}\n\t\t\t\t.buttonArea {\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-----------------------------\n\t\t- items should look like this:##tehmanageoption\n- add edit and delete functionality without API calls\n\t- AppContext.jsx\n\t\t----------------------------------------\n\t\tcase 'changeItemProperty':\n\t\t\titemType = action.payload.itemType;\n\t\t\tproperty = action.payload.property;\n\t\t\tid = action.payload.id;\n\t\t\tvalue = action.payload.value;\n\t\t\tstate[itemType].find((m) => m.id === id)[property] = value;\n\t\t\tbreak;\n\t\tcase 'toggleItemEditing':\n\t\t\titemType = action.payload.itemType;\n\t\t\tid = action.payload.id;\n\t\t\titem = state[itemType].find((m) => m.id === id);\n\t\t\titem.isEditing = !item.isEditing;\n\t\t\titem.manageMessage = 'Edit this item.'\n\t\t\tbreak;\n\t\tcase 'clearItemEditing':\n\t\t\titemType = action.payload.itemType;\n\t\t\tid = action.payload.id;\n\t\t\titem = state[itemType].find((m) => m.id === id);\n\t\t\titem.isEditing = false; \n\t\t\titem.article = item.originalItem.article;\n\t\t\titem.singular = item.originalItem.singular;\n\t\t\titem.plural = item.originalItem.plural;\n\t\t\titem.manageMessage = 'Manage options:';\n\t\t\tbreak;\n\t\tcase 'toggleItemDeleting':\n\t\t\titemType = action.payload.itemType;\n\t\t\tid = action.payload.id;\n\t\t\titem = state[itemType].find((m) => m.id === id);\n\t\t\titem.isDeleting = !item.isDeleting;\n\t\t\titem.manageMessage = 'Are you sure you want to delete this item?'\n\t\t\tbreak;\n\t\tcase 'clearItemDeleting':\n\t\t\titemType = action.payload.itemType;\n\t\t\tid = action.payload.id;\n\t\t\titem = state[itemType].find((m) => m.id === id);\n\t\t\titem.isDeleting = false;\n\t\t\titem.manageMessage = 'Manage options:';\n\t\t\tbreak;\n\t\tcase 'saveItemEditing':\n\t\t\titemType = action.payload.itemType;\n\t\t\tid = action.payload.id;\n\t\t\titem = state[itemType].find((m) => m.id === id);\n\t\t\tsaveItem = { article, singular, plural } = item;\n\t\t\titem.isEditing = false;\n\t\t\titem.manageMessage = 'Manage options:';\n\t\t\tbreak;\n\t\t----------------------------------------\n\t- App.jsx\n\t\t--------------------------------------------\n\t\t<div className=\"row\">\n\t\t\t<label htmlFor=\"article\">Article</label>\n\t\t\t{item.isEditing ? (\n\t\t\t\t<input\n\t\t\t\t\tid=\"article\"\n\t\t\t\t\tvalue={item.article}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'changeItemProperty',\n\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\titemType: 'germanNouns',\n\t\t\t\t\t\t\t\tproperty: 'article',\n\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\tvalue: e.target.value,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<div className=\"value\">{item.article}</div>\n\t\t\t)}\n\t\t</div>\n\n\t\t<div className=\"buttonRow\">\n\t\t\t<div className=\"manageMessage\">\n\t\t\t\t{item.manageMessage}\n\t\t\t</div>\n\t\t\t<div className=\"buttonArea\">\n\t\t\t\t{!item.isEditing && !item.isDeleting && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'toggleItemEditing',\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'toggleItemDeleting',\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={handleButtonAdd}>\n\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{item.isEditing && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'clearItemEditing',\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>Clear</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'saveItemEditing',\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\tSave\t\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{item.isDeleting && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'clearItemEditing',\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>Yes, delete it.</button>\n\t\t\t\t\t\t<button\n\n\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\ttype: 'clearItemDeleting',\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\tNo, do not delete it.\t\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t--------------------------------------------\n- interaction with form should now work like this, without doing any API calls yet:#gif#likethisWithoutApi\n- fix the blink-on-load issue\n\t- index.html\n\t\t------------------------------\n\t\t<style>\n\t\t\t  body {\n\t\t\t\t\tbackground-color: #333;\n\t\t\t  }\n\t\t</style>\n\t\t------------------------------\n\t- App.scss\n\t\t--------------------------------\n\t\tanimation: fadein .1s ease-in;\n\n\t\t@keyframes fadein {\n\t\t\tfrom {\n\t\t\t\topacity: 0;\n\t\t\t}\n\n\t\t\tto {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t}\n\t\t--------------------------------\n- add API call to editing handler\n\t- you can't (or shouldn't) add an API call inside the reducer since:\n\t\t- *\"Reducers should be pure functions and perform operations based on predefined actions. Hence, they should not have any side effects and should return the same values when given the same arguments. This makes them predictable and easy to test when implemented.\"*\n\t- therefore we need to create a function like a Thunk or an actionCreator in Redux\n\t- I wrote a custom generic function called **actionManager** which will handle all of our actions (edit, delete, add)\n\t- AppContext.jsx\n\t\t----------------------------------------------\n\t\tconst actionManager = async (action) => {\n\t\t\tconst itemType = action.payload.itemType;\n\t\t\tconst id = action.payload.id;\n\t\t\tconst item = action.payload.item;\n\t\t\tlet response = {};\n\t\t\tswitch (action.type) {\n\t\t\t\tcase 'deleteItem':\n\t\t\t\t\tresponse = await axios.delete(\n\t\t\t\t\t\t`${api_base_url}/${itemType}/${id}`\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (response.status === 200) {\n\t\t\t\tdispatch(action);\n\t\t\t} else {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'displayItemMessage',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\titemType,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tmessage: `error: api response = ${response.status}`,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t};\t\t\n\t\t----------------------------------------------\n\t- App.jsx\n\t\t----------------------------------------\n\t\tconst { state, dispatch, actionManager } = useContext(AppContext);\t\t\n\n\t\t<button\n\t\t\tonClick={(e) =>\n\t\t\t\tactionManager({\n\t\t\t\t\ttype: 'deleteItem',\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\titemType:\n\t\t\t\t\t\t\t'germanNouns',\n\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t>\n\t\t\tYes, delete it.\n\t\t</button>\t\t\n\t\t----------------------------------------\n- add delete to the actionManager\n\t- AppContext.jsx\n\t\t------------------------------------\n\t\tcase 'saveItemEditing':\n\t\t\tresponse = await axios.patch(\n\t\t\t\t`${api_base_url}/${itemType}/${id}`,item\n\t\t\t);\n\t\t\tbreak;\t\t\n\t\t------------------------------------\n- add add to the actionManager\n\t- AppContext.jsx\n\t\t------------------------------------\n\t\tcase 'beginAddingItem':\n\t\t\t_state.isAdding = true;\n\t\t\t_state.addMessage = 'Click Save to add the item:';\n\t\t\tbreak;\n\t\tcase 'clearAddingItem':\n\t\t\t_state.isAdding = false;\n\t\t\t_state.addMessage = '';\n\t\t\t_state.addItem = {\n\t\t\t\tarticle: '',\n\t\t\t\tsingular: '',\n\t\t\t\tplural: '',\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 'changeAddItemProperty':\n\t\t\titemType = action.payload.itemType;\n\t\t\tproperty = action.payload.property;\n\t\t\tid = action.payload.id;\n\t\t\tvalue = action.payload.value;\n\t\t\t_state.addItem[property] = value;\n\t\t\tbreak;\n\t\tcase 'saveItemAdding':\n\t\t\t_state.isAdding = false;\n\t\t\t_state.addMessage = '';\n\t\t\t_state.addItem = {\n\t\t\t\tarticle: '',\n\t\t\t\tsingular: '',\n\t\t\t\tplural: '',\n\t\t\t};\n\t\t\tbreak;\t\t\t\n\t\t------------------------------------\t\t\n\t- components/AddItemBox.jsx\n\t\t------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\texport const AddItemBox = () => {\n\t\t\tconst { state, dispatch, actionManager } = useContext(AppContext);\n\n\t\t\tconst item = {\n\t\t\t\tarticle: state.addItem.article,\n\t\t\t\tsingular: state.addItem.singular,\n\t\t\t\tplural: state.addItem.plural,\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{state.isAdding === true && (\n\t\t\t\t\t\t<fieldset className=\"germanNoun\">\n\t\t\t\t\t\t\t<legend>ADD ITEM</legend>\n\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"article\">Article</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"article\"\n\t\t\t\t\t\t\t\t\tvalue={item.article}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'changeAddItemProperty',\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\t\t\titemType: 'germanNouns',\n\t\t\t\t\t\t\t\t\t\t\t\tproperty: 'article',\n\t\t\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: e.target.value,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"singular\">Singular</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"singular\"\n\t\t\t\t\t\t\t\t\tvalue={item.singular}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'changeAddItemProperty',\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\t\t\titemType: 'germanNouns',\n\t\t\t\t\t\t\t\t\t\t\t\tproperty: 'singular',\n\t\t\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: e.target.value,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"plural\">Plural</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"plural\"\n\t\t\t\t\t\t\t\t\tvalue={item.plural}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'changeAddItemProperty',\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\t\t\titemType: 'germanNouns',\n\t\t\t\t\t\t\t\t\t\t\t\tproperty: 'plural',\n\t\t\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: e.target.value,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t\t<div className=\"message\">{state.addMessage}</div>\n\t\t\t\t\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\tdispatch({ type: 'clearAddingItem' })\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={(e) =>\n\t\t\t\t\t\t\t\t\t\t\tactionManager({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'saveItemAdding',\n\t\t\t\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\t\t\t\titemType: 'germanNouns',\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\t\t\t\t\t\t\t\titem: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tarticle: item.article,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsingular: item.singular,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tplural: item.plural,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t------------------------------\n- **NEXT TASKS:**\n\t- focus in first field after Edit and Add buttons","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-07-19 13:02:02","systemWhoCreated":"systemUnknown"},{"id":593,"category":"Sessions/Cookies","title":"Set up API that demonstrates how Sessions/Cookies work with Node/Express","body":"- **Background to state management for web applications**\n\t- the reason why you want to maintain state is mainly for **authentication**\n\t\t- a web application server (e.g. a Node/Express API) needs to know who is logged in, in order to provide the proper resources, give the proper access, etc.\n\t\t- the problem is that the web (HTTP) is stateless\n\t\t- therefore after the use provides correct credentials, the server needs a way for each subsequent request to the server to remember who they are and that they were logged in and that their session has not yet expired\n\t- there are basically two solutions to maintaining state in web applications: JWT and Sessions/Cookies\n\t\t- **JWT**\n\t\t\t- the **newer** more modern solution\n\t\t\t\t- created **2015**\n\t\t\t- how it works\n\t\t\t\t- 1. server generates **token**, sends token to browser\n\t\t\t\t- 2. browser receives token, and saves it client side\n\t\t\t\t- 3. the accessToken is included upon every subsequent request to the server\n\t\t\t- JWT is **stateless**\n\t\t\t\t- is not limited to one server, i.e. supports single-sign-on much easier\n\t\t\t\t\t- for this reason, in most larger applications the preferred solution\n\t\t\t\t- you have the manage the token on the frontend\n\t\t\t\t\t- save it somewhere (local storage, cookies)\n\t\t- **Sessions/Cookies**\n\t\t\t- the **older** solution\n\t\t\t\t- created **1995**\n\t\t\t- how it works\n\t\t\t\t- 1. server generates **sessionId**, signs it with secret key, sends browser cookie with sessionId\n\t\t\t\t- 2. browser receives cookie and saves it in cookie storage\n\t\t\t\t- 3. browser includes the cookie on every request\n\t\t\t- sessions are **stateful**\n\t\t\t\t- since the session is managed by and dependent on the server, it is more difficult to support single-sign-on, e.g. to allow the user to log into other servers after logging in on one server\n\t\t\t\t- you don't have to manage the token on the frontend\n\t\t\t\t\t- hence easier to test with API tools such as Postman or REST Client\n- **What we will build**\n\t- the simplest API that demonstrates how session/cookies work in order to maintain state in a Node/Express application\n\t- we will not build a frontend, only an API\n\t\t- with session/cookies, you can test the functionality with an API tool such as Postman or REST Client\n\t- we will publish and test this app at Heroku to show the session/cookies work from an online server as well\n\t\t- to do this, we will fix two common errors using the Heroku CLI and logging command\n- **How we will build it**\n\t- in order to focus on understanding how sessions and cookies work, we will simply the app as following\n\t\t- login name via URL\n\t\t- no passwords\n\t- to demonstrate how session time limits work, we will limit the session to 10 seconds\n\t\t- this means after logging in, the user will be automatically logged out in 10 seconds\n- **What we will use**\n\t- Node/Express\n\t- NPM packages\n\t\t- express-session\n\t\t- cookie-parser\n\t\t- dotenv (to save session secret in .env file)\n- you can get the full code for this project here:\n\t- https://github.com/edwardtanguay/et01-node-sessions-basic\n- the finished project will work something like this: #gif#gitforsesscookietest\n- **set up basic Node/Express site:**\n\t- create directory, e.g. `et01-node-sessions-basic`\n\t- `code `et01-node-sessions-basic`\n\t- `npm init -y`\n\t- package.json: \n\t\t- `\"type\": \"module\",`\n\t- `npm i express`\n\t- server.js\n\t\t------------------------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst PORT = 3024;\n\n\t\tapp.listen(PORT, () => {\n\t\t\tconsole.log(`listening at http://localhost:${PORT}`)\n\t\t});\t\t\n\t\t------------------------------------------\n\t- `node server.js`\n\t- the server should be listening:##thelistenijksj\n- **set up nodemon with npm start**\n\t- `npm i nodemon -D`\n\t- package.json\n\t\t-----------------------------------\n\t    \"start\": \"nodemon server.js\"\n\t\t-----------------------------------\n\t- start now with `npm start`\n- **create base route**\n\t- server.js\n\t\t----------------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send('session/cookie basic test');\n\t\t});\t\t\n\t\t----------------------------------\n\t- click on link in terminal to go to http://localhost:3024\n\t- you should see the text:##seetextokexpress\n- **set up REST Client file for easier testing**\n\t- make sure you have the VSCode Extension \"REST Client\" installed\n\t- test.rest\n\t\t----------------------------------------\n\t\t@url = http://localhost:3024\n\n\t\t### base route\n\t\t{{url}}\n\t\t----------------------------------------\n\t- click on the \"Send Request\" link that appears to test that route##thepoingitsend\n- **set up Git and publish to GitHub (manual Git command line version)**\n\t- `git init -b main`\n\t- .gitignore\n\t\t---------------------------\n\t\tnode_modules\n\t\t---------------------------\n\t- `git add .`\n\t- `git commit -m \"initial commit\"`\n\t- create repository on GitHub:##thercreaterep\n\t- push the directory\n\t\t- `git remote add origin git@github.com:edwardtanguay/et01-node-sessions-basic.git`\n\t\t- `git push -u origin main`\n\t- add a file and push\n\t\t- README.md\n\t\t\t----------------------------------\n\t\t\t# Session/Cookies test\n\t\t\t----------------------------------\n\t\t- `git add .`\n\t\t- `git commit -m \"added README\"`\n\t\t- `git push origin`\n- **set up users and login route**\n\t- add mock user database\n\t\t------------------------------\n\t\tconst users = [\n\t\t\t{\n\t\t\t\tusername: 'ja',\n\t\t\t\tfirstName: 'Jörg',\n\t\t\t\tlastName: 'Ackermann',\n\t\t\t\temail: 'ja@mail.com'\n\t\t\t},\n\t\t\t{\n\t\t\t\tusername: 'ac',\n\t\t\t\tfirstName: 'Angelika',\n\t\t\t\tlastName: 'Carstense',\n\t\t\t\temail: 'ac@mail.com'\n\t\t\t}\n\t\t];\t\n\t\t------------------------------\n\t- create login route\n\t\t-----------------------------------------\n\t\tapp.get('/login/:username', (req, res) => {\n\t\t\tconst user = users.find((user) => user.username === req.params.username);\n\t\t\tif (user) {\n\t\t\t\tres.send(`User identified: ${JSON.stringify(user)}`);\n\t\t\t} else {\n\t\t\t\tres.status(500).send('bad login');\n\t\t\t}\n\t\t});\t\t\n\t\t-----------------------------------------\n\t- add tests\n\t\t----------------------------------------\n\t\t### LOGIN JOERG\n\t\tGET {{url}}/login/ja\n\n\t\t### LOGIN ANGELIKA\n\t\tGET {{url}}/login/ac\n\n\t\t### BAD LOGIN\n\t\tGET {{url}}/login/nnn\n\n\t\t----------------------------------------\n- **add current-user route and show it won't work without sessions/cookies**\n\t- add current-user route\n\t\t------------------------------------\n\t\tapp.get('/current-user', (req, res) => {\n\t\t\tres.send('no user logged in');\n\t\t});\n\t\t------------------------------------\n\t- add test\n\t\t-----------------------------------\n\t\t### GET LOGGED IN USER\n\t\tGET {{url}}/current-user\n\t\t-----------------------------------\n- **add sessions/cookies in order to maintain user logins**\n\t- `npm i express-session`\n\t- `npm i cookie-parser`\n\t- import these in server.js\n\t\t---------------------------------------\n\t\timport session from 'express-session';\n\t\timport cookieParser from 'cookie-parser';\t\t\n\t\t---------------------------------------\n\t- setup for sessions\n\t\t--------------------------------\n\t\tapp.use(\n\t\t\tsession({\n\t\t\t\tresave: true,\n\t\t\t\tsaveUninitialized: true,\n\t\t\t\tsecret: 'tempsecret'\n\t\t\t})\n\t\t);\n\t\t--------------------------------\n\t- setup for cookies\n\t\t------------------------------------\n\t\tapp.use(cookieParser());\t\t\n\t\t------------------------------------\n\t- modify login route to save user session for 10 seconds\n\t\t-------------------------------------\n\t\treq.session.user = user;\n\t\treq.session.cookie.expires = new Date(Date.now() + 10000); // 10 seconds\n\t\treq.session.save();\n\t\tres.send(`User logged in: ${JSON.stringify(user)}`);\n\t\t-------------------------------------\n\t- modify current-user route to check for saved user\n\t\t-----------------------------------\n\t\tapp.get('/current-user', (req, res) => {\n\t\t\tif (req.session.user) {\n\t\t\t\tres.send(req.session.user);\n\t\t\t} else {\n\t\t\t\tres.send('no user logged in');\n\t\t\t}\n\t\t});\n\t\t-----------------------------------\n\t- test again and see that the logged-in user stays logged in for 10 seconds\n\t- create logout route\n\t\t-----------------------------\n\t\tapp.get('/logout', (req, res) => {\n\t\t\treq.session.destroy((err) => {\n\t\t\t\tres.send('User logged out');\n\t\t\t});\n\t\t});\n\t\t-----------------------------\n\t- create test for logout\n\t\t-------------------------------\n\t\t### LOGOUT \n\t\tGET {{url}}/logout\n\t\t-------------------------------\n\t- test again\n- **create real session secret and hide it in .env file**\n\t- `npm i dotenv`\t\t\n\t- import and set up dotenv in server.js\n\t\t------------------------------------\n\t\timport dotenv from 'dotenv';\n\n\t\tdotenv.config();\n\t\t------------------------------------\n\t- save real session secret in an .env file\n\t\t- .env\n\t\t\t-------------------------------\n\t\t\tSESSION_SECRET = 1234sdfsidf23434g\n\t\t\t-------------------------------\n\t\t- update .gitignore so .env file doesn't get pushed to GitHub\n\t\t\t---------------------------------\n\t\t\tnode_modules\n\t\t\t.env\n\t\t\t---------------------------------\n\t- read .env file from server.js\n\t\t-------------------------------------------\n\t\tsecret: process.env.SESSION_SECRET\n\t\t-------------------------------------------\n\t- test again\n- **publish to and test at Heroku**\n\t- create app at Heroku and push code\n\t\t- push changes to GitHub\n\t\t- Heroku\n\t\t- [New]\n\t\t- [Create new app]\n\t\t- use same name, e.g. `et01-node-sessions-basic`\n\t\t- Europe\n\t\t- [GitHub]\n\t\t- paste name again, [Search]\n\t\t- [Connect]\n\t\t- [Enable Automatic Deploys]\n\t\t- [Deploy Branch]\n\t- add session secret as environment variable\n\t\t- [Settings]\n\t\t- [Reveal Config Vars]\n\t\t- Key: `SESSION_SECRET`\n\t\t- Value: `283742ksjdfksj3843` (random string)\n\t\t- [Add]\n\t- test the Heroku app\n\t\t- [Overview]\n\t\t- [Open app]\n\t\t- test all routes in browser\n\t- you will get an error:##heraerrero\n\t- debug the error\n\t\t- `heroku login`\n\t\t\t- click login button in browser\n\t\t- `heroku logs -a et01-node-sessions-basic --tail`##thenodmoskjdf\n\t\t- the **npm start** command starts nodemon but it should start Node, since your app at Heroku should run on Node\n\t- fix error\n\t\t- package.json\n\t\t\t---------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon server.js\",\n\t\t\t\t\"start\": \"node server.js\"\n\t\t\t},\n\t\t\t---------------------------------\n\t\t- locally we use `npm run dev` for nodemon\n\t\t- Heroku will use `npm start` for Node\n\t- push to GitHub\n\t\t- at Heroku, click on [Overview]\n\t\t- build should automatically start in about 10 seconds##builshoskjwokau\n\t- test again\n\t\t- [Open app]\n\t\t- you get error again##heraerrero\n\t\t- look in logs, the problem is the Heroku app can't bind to port 3024 since Heroku randomly creates a port number for each app to run on##theloagsagain\n\t- fix the port problem\n\t\t- enable Heroku to use it's own port (which is automatically saved in an environment variable called PORT), otherwise use the local port for development\n\t\t\t----------------------------------------------\n\t\t\tconst PORT = process.env.PORT || 3024;\n\t\t\t----------------------------------------------\n\t- push to GitHub\n\t- wait for it to build again\n\t- test again\n\t\t- [Open app]\n\t\t- it will work:##theappwilwoksj\n\t\t- test all routes online with browser","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-14 07:35:14","systemWhoCreated":"systemUnknown"},{"id":595,"category":"TypeScript","title":"Create React Site with TypeScript: Data Cleansing with Types, Interfaces, Enums","body":"- **Why use TypeScript instead of JavaScript?**\n\t- TypeScript gives structure to JavaScript, makes it less **error-prone**, **more stabile** and **easier to test**\n\t- all JavaScript is syntactically valid TypeScript\n\t\t- this means that TypeScript is quite incremental, i.e. **you could create a React site in TypeScript and simply program in JavaScript**, adding only the TypeScript as you learn it\n\t\t\t- but even if you program in 100% JavaScript, you will still notice that TypeScript is there in the background protecting you from sloppy errors like this:##justjavascriptok\n\t\t- one way to understand this is to realize that TypeScript transpiles to JavaScript at build time\n\t\t\t- **TypeScript exists only as you develop and at build time, not in the final build code**\n\t\t\t\t- as you develop, VSCode will give you TypeScript errors\n\t\t\t\t- at build time, you will have a successful build only when you have no TypeScript errors\n\t\t\t\t\t- this means **when your TypeScript code builds successfully, all that is left is 100% efficient JavaScript that knows nothing about TypeScript**\n\t\t\t\t\t- e.g. if you create a site in TypeScript and publish it at Netlify, **the code that is running at Netlify is 100% JavaScript** and knows nothing about TypeScript\n\t\t\t\t\t- this means that **using TypeScript produces code that is simply JavaScript** and so **code you create with TypeScript can run anywhere JavaScript runs**\n\t\t\t- to understand this better, note that when the following code builds, **more than half of the TypeScript code does not even get transpiled** into JavaScript, and while the compiled JavaScript would technically run without errors, **TypeScript will not compile it since it violates the Type relationships defined by the user**##thewontwokrok\n\t\t- so while sites you build with TypeScript will run anywhere JavaScript runs, **the JavaScript that TypeScript creates safely conforms to a complex type structure that you defined in your original code**, which only exists in your original TypeScript files\n- **What makes TypeScript so difficult for JavaScript programmers?**\n\t- TypeScript contains many complex, mostly object-oriented-based patterns and concepts, e.g. **generics**, **type casting**, **type guarding**, **namespaces**\n\t\t- here is an example of generics and casting in a function I wrote for my open source framework in which many types of items which inherit from a parent class can use this one function by informing it which Types it should use##typescriptcompl\n\t\t- one reason why TypeScript excels at object-oriented patterns is that **TypeScript was created by Microsoft systems architect Anders Hejlsberg who also created C#** back in 2001\n\t\t\t- in essense, TypeScript is Microsoft's attempt to get JavaScript to act like and be more compatible with C#\n\t\t- these advanced features of TypeScript can make it a complex language to learn for JavaScript programmers, particularly JavaScript programmers who are not very familiar with object-oriented programming patterns\n\t\t- in addition, getting JavaScript to behave like C# doesn't come without odd errors that you can spend much time trying to resolve, e.g.:##typescriptnever\n\t\t- or this:##thecannot\n- **So how to get started with TypeScript that is useful, efficient but avoids the difficult complexities of TypeScript?**\t\t\n\t- the following is a **low-hanging-fruit approach to TypeScript** i.e. a way to use and benefit from the language without have to yet deal with its more complex OOP concepts and functionality\n\t\t1. to begin with, **use only the following features**:\n\t\t\t- **basic types** (string, number, boolean, string[], number[], boolean[])\n\t\t\t- **interfaces**\n\t\t\t- **enums**\n\t\t\t- none of these features require object-oriented expertise\n\t\t\t- using only these three features of TypeScript will provide your application with much more structure, security and useful intellisense while developing that you don't get from JavaScript\n\t\t\t\t- as you master and become comfortable with these features, you can explore the more complex features of TypeScript\n\t\t2. **use Vite** to create a React site in seconds that is completely set up with TypeScript and ready to develop\n\t\t\t- this bypasses much of the complexity that was often associated with TypeScript: getting it set up in your development environment##howtoreactvitekjsk\n- **What we will build**\n\t- a frontend React site that imports an array of objects as a JSON file and displays the content to the screen\n\t- the JSON file will contain an array of book objects that have non-uniform properties which we must handle according to specific rules\n\t\t- rule: books must have the following properties\n\t\t\t- id, number\n\t\t\t- title, string\n\t\t\t- description, string\n\t\t\t- language, string\n\t\t\t- yearMonth, string\n\t\t\t- numberInStock, number\n\t\t- rule: language property value must be either \"english\" or \"french\"\n\t\t\t- if language is blank or missing, then assign value \"english\"\n\t\t\t- for any other value, mark as error that only administrators can see\n\t\t- rule: no property can be empty\n\t\t\t- if empty, then mark as error\n\t\t- rule: all numbers must be numbers\n\t\t\t- if number is string and can be converted to number (e.g. \"4\") then convert it\n\t\t\t- if number is not number (e.g. \"none\" or \"n/a\"), mark as error that only administrators can see\n\t\t\t-------------------------------------------\n\t\t\t{\n\t\t\t\t\"id\": 1,\n\t\t\t\t\"idCode\": \"buildingMicroservices\",\n\t\t\t\t\"title\": \"Building Microservices\",\n\t\t\t\t\"description\": \"Seems to be a high-level abstract book how to not only implement microservices but how to get your head around the paradigm shifts involved, e.g. from request-response to event-driven patterns.\",\n\t\t\t\t\"yearMonth\": \"2021-09\",\n\t\t\t\t\"numberInStock\": \"4\",\n\t\t\t\t\"systemWhenCreated\": \"2022-05-17 00:54:35\",\n\t\t\t\t\"systemWhoCreated\": \"systemUnknown\"\n\t\t\t},\t\t\t\n\t\t\t-------------------------------------------\n\t- the goal is to deal with the complexity of this unstructured data using the three features of TypeScript\n\t\t- basic types\n\t\t- interfaces\n\t\t- enums\n- **How we will build it**\n\t- we will set up a TypeScript React site\n\t\t- we will look at how basic types work in TypeScript\n\t- we will first simply display the fields in the JSX and manage the data inconguities with conditional rendering\n\t\t- we will realize that as our data expands in complexity, our JSX would become increasingly convoluted and error prone\n\t- the solution will be create TypeScript interface that defines which properties our objects should have\n\t- we will then **make a data-cleansing function** to convert the raw objects into objects defined by the TypeScript interface\n\t- our JSX will then no longer use the raw objects but **our JSX will use the objects defined by the TypeScript interface**\n\t\t- the advantage of this is that our **JSX will no longer need to manage the incongruities in the data**, and so will be cleaner, easier to read, and less error prone\n\t- we will define one of the properties as an **enum** that is allowed to only have a certain, pre-defined list of values\n- **What we will use**\n\t- Vite \n\t- React\n\t- TypeScript\n- **Finished site**\n\t- code of examples of this site are here:\n\t\t- finished, completed all rules: https://github.com/edwardtanguay/et02-typescript-data-cleansing\n\t\t- interfaces, but rules not finished: https://github.com/edwardtanguay/et01-typescript-data-cleansing\n\t- a simpler example of this with different data but the same concepts, and two componennts (Employees and Books) is here:\n\t\t- https://github.com/edwardtanguay/ej00-typescript-basics\n\t- finished site should look something like this:##typescriptgoalsite\n- **Set up a minimized basic React TypeScript site with Vite**\n\t- setup \n\t\t- go to projects folder\n\t\t- `npm create vite`\n\t\t\t- give project name, e.g. `et01-typescript-data-cleansing`\n\t\t\t- select **react**\n\t\t\t- select **react-ts**\n\t\t- `code et01-typescript-data-cleansing`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- to view site click on link shown, e.g. http://127.0.0.1:5173\n\t- minimize and add SASS\n\t\t- empty both CSS files\n\t\t- reduce App.tsx\n\t\t\t--------------------------------\n\t\t\timport './App.scss';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>TypeScript Data-Cleansing Example</h1>\n\t\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t--------------------------------\n\t\t- convert to Sass\n\t\t\t- `npm i sass`\n\t\t\t- change all `.css` to `.scss`\n\t\t- styling for `App.scss`\n\t\t\t---------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tfont-size: 1.7rem;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------\n\t- your base site should look something like this:##thebaseokok\n\t- set up Git\n\t\t- `git init -b main`\n- **Experiment with TypeScript type basics**\n\t- note TypeScript infers types and complains even about your JavaScript sloppiness##ageageok\n\t- this is the same as the following, which is redundant##andthenum\n\t- any type that is inferred can simply be written as JavaScript##leaveoutless\n\t- note that TypeScript not only notifies you of errors in VSCode, but also it will prevent the code from building if there are errors##notealsobuild\n\t- type inference works even for arrays:##infernames\n\t- for array types, there is more an argument that one explicitly define the type, although it is optional:##moreclearkjs\n\t- note that TypeScript is intelligent enough to infer a union typed array##notenoneok\n\t- here it is usually clearer to explicitly define the type:##evenmoreexplic\n- **Display data from JSON book file**\n\t- go to: https://edwardtanguay.netlify.app/share\n\t- copy the link:##dowlnkunstr\n\t- in App.tsx, we will import this JSON into a state variable via axios and display all the books on the page, showing the following fields\n\t\t- id\n\t\t- title\n\t\t- description\n\t\t- language\n\t\t- yearMonth\n\t\t- numberInStock\n\t- App.tsx\n\t\t----------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport axios from 'axios';\n\t\timport './App.scss';\n\n\t\tconst [books, setBooks] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tsetBooks((await axios.get(url)).data);\n\t\t\t})();\n\t\t}, []);\t\t\n\n\t\t<h2>There are {books.length} books:</h2>\n\t\t<div className=\"bookArea\">\n\t\t\t{books.map((item, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<fieldset className=\"book\" key={i}>\n\t\t\t\t\t\t<legend>ID: {item.id}</legend>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Title</label>\n\t\t\t\t\t\t\t<div>{item.title}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t\t\t<div>{item.description}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Language</label>\n\t\t\t\t\t\t\t<div>{item.language}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Year/Month</label>\n\t\t\t\t\t\t\t<div>{item.yearMonth}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>In Stock</label>\n\t\t\t\t\t\t\t<div>{item.numberInStock}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t\t----------------------------------\n\t- book styles for App.scss\n\t\t---------------------\n\t\t.bookArea {\n\n\t\t\tfieldset.book {\n\t\t\t\tbackground-color: #555;\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder: 1px solid #666;\n\t\t\t\tcolor: #aaa;\n\t\t\t\tmax-width: 42rem;\n\n\t\t\t\tlegend {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tcolor: orange;\n\t\t\t\t\tfont-family: monospace;\n\t\t\t\t}\n\n\t\t\t\t.row {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-content: start;\n\t\t\t\t\tmargin: 0 0 10px 0;\n\n\t\t\t\t\tlabel {\n\t\t\t\t\t\t&:after {\n\t\t\t\t\t\t\tcontent: \":\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twidth: 7rem;\n\t\t\t\t\t\tmargin: 0 10px 10px 0;\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\t}\n\n\t\t\t\t\tdiv {\n\t\t\t\t\t\tcolor: #fff;\n\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\tfont-family: monospace;\n\t\t\t\t\t\tcolor: #000;\n\t\t\t\t\t\tbackground-color: #5c5c5c;\n\t\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\t\tborder: 1px solid #4c4c4c;\n\t\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t---------------------\n\t- note that the site works but TypeScript is showing errors in the code##thenever2\n\t\t- what this \"never\" error means is that TypeScript can't guarantee that \"id\" is a property of item, since we have not declared an interface for the books array yet\n\t\t- we will solve this below\n\t\t- for now, realize that you can still program the site and view it in your browser since the JavaScript is valid\n\t\t- TypeScript is just indicating an error since your data is not safe, i.e. it could be that item does not have an id, which is true. TypeScript is doing it's job here.\n\t\t- also notice that if you try to build the site in this state, TypeScript will not allow it to build\n\t\t- TODO: see if this TypeScript site will build at Netlify with a TypeScript error\n- **Notice the data incongruencies and decide what approach to take to solve this**\n\t- notice that many books have missing and invalid information:##thereareproblks\n\t- we could try to solve this problem **with conditional rendering** in JSX but:\n\t\t- it would get **incrementally complicated** \n\t\t- we should think about **separation of concerns**: the cleansed version of this data may be needed for e.g. an Android device, or to create an export JSON file, etc.\n\t- therefore the best way to do the data cleansing is with the concept of a **data model** which receives raw data, performs data cleansing, and outputs the cleansed data\n\t\t- for this example, we will simply program this in the App.tsx\n\t\t- but in a larger app, of course, the App.tsx would get its data from the a data model that would ideally be integrated into a central useContext/useReducer or Redux data store\n\t- note that building a data-cleaning data model is not specific to TypeScript--we could do this with JavaScript as well--but TypeScript is going to help us quite a bit in structuring this data with its features: **types**, **interfaces**, and **enums**\n- **Implement an IBook interface**\t\n\t- create interface\n\t\t---------------------------------\n\t\tinterface IBook {\n\t\t\tid: number;\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t\tlanguage: string;\n\t\t\tyearMonth: string;\n\t\t\tnumberInStock: number;\n\t\t}\t\t\n\t\t---------------------------------\n\t- refactor useEffect to do the data cleansing\n\t\t--------------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst rawBooks = (await axios.get(url)).data;\n\t\t\t\tconst books: IBook[] = [];\n\t\t\t\trawBooks.forEach((rawBook:any) => {\n\t\t\t\t\tconst book: IBook = {\n\t\t\t\t\t\tid: rawBook.id,\n\t\t\t\t\t\ttitle: rawBook.title,\n\t\t\t\t\t\tdescription: rawBook.description,\n\t\t\t\t\t\tlanguage: rawBook.language,\n\t\t\t\t\t\tyearMonth: rawBook.yearMonth,\n\t\t\t\t\t\tnumberInStock: rawBook.numberInStock,\n\t\t\t\t\t};\n\t\t\t\t\tbooks.push(book);\n\t\t\t\t});\n\t\t\t\tsetBooks(books);\n\t\t\t})();\n\t\t}, []);\t\t\n\t\t--------------------------------------\n\t- note you have to pass in a Generic type into the state variable to tell it what kind of type the objects in the array should be\n\t\t------------------------------------\n\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\t\t------------------------------------\n- **Solve the data incongruencies with data-cleansing**\n\t- if language is undefined or empty, then define as English\n\t\t---------------------------------------\n\t\tlanguage: !rawBook.language ? 'english' : rawBook.language,\n\t\t---------------------------------------\n\t- implement rest of the rules\n\t\t- TODO for future live-codings: perhaps reduce the rules a bit so they are not so complicated to implement, e.g. only \"replace blank language with english\" and \"if title is missing then mark as error\"","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-17 23:19:47","systemWhoCreated":"systemUnknown"},{"id":596,"category":"React","title":"Create a React App that reads data from API and displays interactively","body":"- **What we will build**\n\t- this will be an app that consumes data from a JSON file on an external server that contains [German nouns](https://edwardtanguay.netlify.app/share/germanNouns.json)##tehnounn\n\t- the nouns will be displayed in a way that the use can click on the singular word and then be shown the article and plural\n\t- it is a useful flashcard app\n- **What we will use**\n\t- Vite, React\n\t- useState, useEffect, fetch\n\t- components\n\t- Sass\n\t- conditional rendering\n- **Finished app**\n\t- the finished code is here at GitHub:\n\t\t- https://github.com/edwardtanguay/et01-german-nouns\n\t- the finish app is live at Netlify:\n\t\t- https://german-nouns.netlify.app\n- when finished, the app will work something like this:#gif#germannouns\n- **Set up a minimized basic React site with Vite**\n\t- setup \n\t\t- go to projects folder\n\t\t- `npm create vite`\n\t\t\t- give project name, e.g. `nn01-german-nouns`\n\t\t\t- select **react**\n\t\t- `code nn01-german-nouns`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- to view site click on link shown, e.g. http://127.0.0.1:5173\n\t- minimize and add SASS\n\t\t- empty both CSS files\n\t\t- reduce App.tsx\n\t\t\t--------------------------------\n\t\t\timport './App.scss';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>German Nouns</h1>\n\t\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t--------------------------------\n\t\t- convert to Sass\n\t\t\t- `npm i sass`\n\t\t\t- change all `.css` to `.scss`\n\t\t- styling for `App.scss`\n\t\t\t---------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tfont-size: 1.7rem;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------\n\t- set up Git\n\t\t- `git init -b main`\n- **App.jsx**\n\t---------------------------------------------\n\timport { useState, useEffect } from 'react';\n\timport './App.scss';\n\timport { NounArea } from './components/NounArea';\n\timport { shuffle } from './tools';\n\n\tconst baseUrl = 'https://edwardtanguay.netlify.app/share';\n\tconst germanNounsUrl = `${baseUrl}/germanNouns.json`;\n\n\tfunction App() {\n\t\tconst [nouns, setNouns] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(germanNounsUrl);\n\t\t\t\tconst _nouns = await response.json();\n\n\t\t\t\t_nouns.forEach(noun => {\n\t\t\t\t\tnoun.answerIsShowing = false;\n\t\t\t\t\tnoun.plural = noun.plural.substring(4);\n\t\t\t\t});\n\t\t\t\tshuffle(_nouns);\n\n\t\t\t\tsetNouns(_nouns);\n\t\t\t})();\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\n\t\t\t\t<NounArea nouns={nouns} setNouns={setNouns} />\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\t\n\t---------------------------------------------\n- **App.scss**\n\t--------------------------------------------\n\t$singularColor: rgb(214, 214, 106);\n\tbody {\n\t  background-color: #333;\n\t  font-family: sans-serif;\n\t  text-align: center;\n\n\t  .App {\n\t\t  display: flex;\n\t\t  justify-content: center;\n\t\t  flex-direction: column;\n\t\t.nounArea {\n\n\t\t  .backShowing {\n\t\t\tbackground-color: #222;\n\t\t  }\n\n\t\t  .frontShowing {\n\t\t\tbackground-color: #444; \n\t\t  }\n\n\t\t  .noun {\n\t\t\tmargin-bottom: 1rem;\n\t\t\tcursor: pointer;\n\t\t\theight: 3rem;\n\t\t\tdisplay:flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\n\t\t\t.front {\n\t\t\t  color: $singularColor;\n\t\t\t}\n\n\t\t\t.back {\n\t\t\t  .die {\n\t\t\t\tcolor: lightgreen;\n\t\t\t  }\n\t\t\t  .das {\n\t\t\t\tcolor: lightcoral;\n\t\t\t  }\n\t\t\t  .der {\n\t\t\t\tcolor: rgb(62, 202, 248);\n\t\t\t  }\n\t\t\t  .singular {\n\t\t\t\tcolor: $singularColor;\n\t\t\t  }\n\t\t\t  .plural {\n\t\t\t\tcolor: orange;\n\t\t\t  }\n\t\t\t  .separator {\n\t\t\t\tcolor: white;\n\t\t\t  }\n\n\t\t\t}\n\t\t  }\n\t\t}\n\t  }\n\t}\t\n\t--------------------------------------------\n- **components/NounArea.jsx**\n\t--------------------------------------\n\timport { Noun } from \"./Noun\";\n\n\texport const NounArea = ({ nouns, setNouns }) => {\n\t\treturn (\n\t\t\t<div className=\"nounArea\">\n\t\t\t\t<h2>German Nouns</h2>\n\t\t\t\t<p>There are {nouns.length} nouns.</p>\n\t\t\t\t{nouns.map((noun, i) => {\n\t\t\t\t\treturn <Noun noun={noun} key={i} nouns={nouns} setNouns={setNouns} />;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t};\n\t--------------------------------------\n- **components/Noun.jsx**\n\t-----------------------------------------------\n\texport const Noun = ({ noun, setNouns, nouns }) => {\n\t\tconst toggleAnswerIsShowing = (noun) => {\n\t\t\tnoun.answerIsShowing = !noun.answerIsShowing;\n\t\t\tsetNouns([...nouns]);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={noun.answerIsShowing ? 'noun backShowing' : 'noun frontShowing'} onClick={() => toggleAnswerIsShowing(noun)}>\n\t\t\t\t{!noun.answerIsShowing && (\n\t\t\t\t\t<div className=\"front\">{noun.singular}</div>\n\t\t\t\t)}\n\t\t\t\t{noun.answerIsShowing && (\n\t\t\t\t\t<div className=\"back\"><span className={noun.article}>{noun.article}</span> <span className=\"singular\">{noun.singular}</span><span className=\"separator\"> - </span><span className={noun.article}>{noun.plural}</span></div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t};\n\t-----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-20 01:42:29","systemWhoCreated":"systemUnknown"},{"id":597,"category":"Node","title":"How to set up a Gmail account to use nodemailer to send emails from Node","body":"- **What we will build**\n\t- this will be a simple Node app (server.js) which when executed, sends a mail to an email address\n\t- we can send unlimited e-mails with this solution\n\t- this is a good solution if you are building e.g. a registration page where the use needs to receive an email to confirm their email address\n\t- when we send a test mail, it will look something like this:##sendthemailkk\n\t- the email arrives immediately in the target mailbox and looks like this:##maillooksksklooks\t\n- **How we will build it**\n\t- we will use the free service **nodemailer** to send mail\n\t- we will send the mail via a **Gmail account that we set up** and secure with 2-factor authentication\n\t- we will use **dotenv** to hide the password in an .env file\n- **What we will use**\n\t- Node\n\t- nodemailer\n\t- dotenv\n\t- Gmail account\n- **Where to find the code**\n\t- GitHub repository of full code is here: https://github.com/edwardtanguay/et01-nodemailer-test\n- **1. Set up dedicated Gmail account for your application**\n\t- first decided on a name for the account\n\t\t- remember that **this name will be shown when people receive your mails**\n\t\t- therefore make it as **appropriate, professional and serious-looking** as possible\n\t\t- e.g. if you run a language community site called **Spanish Chat Group** choose a name such as:\n\t\t\t- **spanishchatgroup**@gmail.com\n\t\t\t- **spanishchatgroupsite**@gmail.com\n\t\t\t- **spanishchatgroupteam**@gmail.com\n\t\t- **create a new Gmail account**\n\t\t\t- go to: https://mail.google.com\n\t\t\t- create account with the account name you decided on above\n\t\t\t- takes about 3 minutes\n\t\t- **secure this Gmail account with 2-step verification** \n\t\t\t- note that in May 2022, Google requires apps that send email via Gmail to use only 2-step verified accounts\n\t\t\t- to use the Gmail account you just created, you will have to verify it with e.g. an SMS to your smartphone\n\t\t\t- goto: https://myaccount.google.com\n\t\t\t- sign in with your new account\n\t\t\t\t- 2-Step Verification \n\t\t\t\t\t- type smartphone number\n\t\t\t\t\t- SMS\n\t\t\t\t\t- typed in code from SMS, worked\n\t\t\t\t- App passwords\n\t\t\t\t\t- choose as app \"other\"\n\t\t\t\t\t- type in `nodemailer`\n\t\t\t\t\t- click [Generate]\n\t\t\t\t\t- copy the generated password and use it in as the password in your nodemailer code\t\n- **2. Create code to send test mail**\n\t- `npm i nodemailer`\n\t- `npm i dotenv`\n\t- **.env**\n\t\t-------------------------------\n\t\tPASSWORD = theIsThePasswordOfTheGmailAccountThatSendsEmails\n\t\t-------------------------------\n\t- **.gitignore**\n\t\t--------------------------------\n\t\tnode_modules\n\t\t.env\n\t\t--------------------------------\n\t- **server.js**\n\t\t------------------------------------\n\t\timport { createTransport } from 'nodemailer';\n\t\timport dotenv from 'dotenv';\n\n\t\tdotenv.config();\n\n\t\tconst transporter = createTransport({\n\t\t\tservice: 'gmail',\n\t\t\tauth: {\n\t\t\t\tuser: 'gmailAccountName',\n\t\t\t\tpass: process.env.PASSWORD,\n\t\t\t},\n\t\t});\n\n\t\tconst mailOptions = {\n\t\t\tfrom: 'Language Community Site <gmailAccountName@gmail.com>',\n\t\t\tto: 'recipient@xyzcompany.com',\n\t\t\tsubject: 'Please confirm your registration',\n\t\t\thtml: `\n\t\t<h1>Please confirm your registration</h1>\t\n\t\t<p>Thank you for signing up with us!</p>\n\t\t<p>Please click here to confirm your registration: https://edwardtanguay.netlify.app/howtos</p>\n\t\t`,\n\t\t};\n\n\t\ttransporter.sendMail(mailOptions, function (error, info) {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tconsole.log('Email sent: ' + info.response);\n\t\t\t}\n\t\t});\t\n\t\t------------------------------------\n\t- send test with `node server.js`\n\t\t- you should see:##thelineasodone\n\t\t- check your mail and you should see:##maillooksksklooks","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-20 11:18:24","systemWhoCreated":"systemUnknown"},{"id":598,"category":"React","title":"Create TypeScript React site with session-cookie authentication/authorization and email registration","body":"- **What we will build**\n\t- we will build a React site with **React Router** that implements **authentication/authorization** with **sessions/cookies**\n\t- users will be able to click on Register page, fill in information, receive email with confirmation link, click on it, and be a full member\n\t- the name of this site is \"Language Tandem Group\" just to give it a sense of a real community site which would require a registration process\n\t- the finished site will work like this:#gif#reactsiteregistrationdemo\n- **How it will work**\n\t- users can belong to the following accessGroups\n\t\t- loggedOutUsers\n\t\t- loggedInUsers\n\t\t- unconfirmedMembers\n\t\t- members\n\t- initially there will only be one user\n\t\t- anonymousUser\n\t\t\t- belongs to group: loggedOutUsers\n\t- the site will have the following pages which allow members in these accessGroups\n\t\t- Welcome\n\t\t\t- loggedOutUsers, loggedInUsers\n\t\t- Member Info\n\t\t\t- members\n\t\t- Register\n\t\t\t- loggedOutUsers\n\t\t- Login\n\t\t\t- loggedOutUsers\n\t\t- Logout\n\t\t\t- loggedInUsers\n\t\t- Confirm Link (hidden in navigation, accessed by link from confirmation email)\n\t\t\t- loggedOutUsers\n\t- register process\n\t\t- on Register page, user types in\n\t\t\t- first name\n\t\t\t- last name\n\t\t\t- email\n\t\t- user object is added to database with \n\t\t\t- access groups \"loggedInUsers\" and \"unconfirmedMembers\"\n\t\t\t- confirmationLinkCode = random number, e.g. 28374298347384\n\t\t- email is sent to email address provided by user\n\t\t- user is transfered to Login page\n\t\t- user logs in and is transferred to Welcome Page\n\t\t- on Welcome page, there is conditional rendering: if \"unconfirmedMembers\" then \"check your email for confirmation message\"\n\t\t- user clicks link in email e.g. https://sitename.netlify.app/confirmLink/28374298347384\n\t\t- random number in link is matched to confirmationLinkCode in the user object\n\t\t\t- user object in database is changed\n\t\t\t\t- accessGroups = loggedInUsers, members\n\t\t\t- user is transferred to Members page\n\t- **note** that for test purposes, user sessions only last for 10 seconds, so after that time if the user refreshes the page, they will be logged out\n\t\t- this would normally be set for e.g. 30 minutes\n- **What we will use**\n\t- React \n\t- Vite \n\t- TypeScript\n\t- sessions/cookies\n\t- React Router\n\t- nodemailer\n- **Where to find code**\n\t- GitHub repository with full code is here: \n\t\t- frontend: https://github.com/edwardtanguay/et01-react-register-frontend\n\t\t- backend: https://github.com/edwardtanguay/et01-react-register-backend\n- **1. Create React site with Vite and minimize**\n\t- we will be using **TypeScript** for this project\n\t- setup \n\t\t- go to your projects folder\n\t\t- `npm create vite`\n\t\t\t- give project name, e.g. `et01-react-register-frontend`\n\t\t\t\t- remember that backend names at Heroku must be 30 characters or less\n\t\t\t\t- this name is 28 characters with 5-character prefix `et01-` and 8 character suffix `-frontend`\n\t\t\t\t- backend project name will be 27 characters: `et01-react-register-backend`\n\t\t\t- select **react**\n\t\t\t- select **react-ts**\n\t\t- `code et01-react-register-frontend`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- to view site click on link shown, e.g. http://127.0.0.1:5173\n\t- set up local Git\n\t\t- `git init -b main`\t\n\t- minimize and add SASS\n\t\t- delete `src/assets` directory\n\t\t- delete `src/index.css` \n\t\t- `main.tsx` \n\t\t\t- delete the reference to index.css\n\t\t\t- delete React.StrictMode lines\n\t\t- empty `src/App.css`\n\t\t- convert to Sass\n\t\t\t- `npm i sass`\n\t\t\t- change all `App.css` to `App.scss`\t\t\n\t\t- reduce App.tsx\n\t\t\t--------------------------------\n\t\t\timport './App.scss';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Language Tandem Group</h1>\n\t\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t--------------------------------\n\t\t- styling for `App.scss`\n\t\t\t---------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tfont-size: 1.7rem;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\n\t\t\t\tanimation: fadein .2s ease-in;\n\t\t\t}\n\n\t\t\t@keyframes fadein {\n\t\t\t\tfrom {\n\t\t\t\t\topacity: 0;\n\t\t\t\t}\n\n\t\t\t\tto {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------\n\t\t- `index.html`\n\t\t\t----------------------------------------------\n\t\t\t<title>Language Tandem Site</title>\n\t\t\t<style>\n\t\t\t  body {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ccc;\n\t\t\t  }\n\t\t\t</style>\t\t\t\n\t\t\t----------------------------------------------\n\t- your base site should look something like this:##thebaseokokssks\n- **2. Implement Pages and React Router**\n\t- create all page components in `/src/pages/`\n\t\t- `PageWelcome.tsx`\n\t\t\t------------------------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to this page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\n\t\t- `PageMembers.tsx`\n\t\t\t------------------------------------------\n\t\t\texport const PageMembers = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the member information.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\n\t\t- `PageRegister.tsx`\n\t\t\t------------------------------------------\n\t\t\texport const PageRegister = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Register for this site here.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\n\t\t- `PageLogin.tsx`\n\t\t\t------------------------------------------\n\t\t\texport const PageLogin = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Log in here.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\n\t\t- `PageLogout.tsx`\n\t\t\t------------------------------------------\n\t\t\texport const PageLogout = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Log out here.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\n\t\t- `PageConfirmLink.tsx`\n\t\t\t------------------------------------------\n\t\t\texport const PageConfirmLink = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This page confirms the email link.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t------------------------------------------\t\n\t- set up React Router\n\t\t- `npm i react-router-dom`\n\t\t- `main.tsx`\n\t\t\t-------------------------------------------\n\t\t\timport { BrowserRouter } from 'react-router-dom';\n\n\t\t\t<BrowserRouter>\n\t\t\t\t<App />\n\t\t\t</BrowserRouter>\n\t\t\t-------------------------------------------\n\t\t- `App.tsx`\n\t\t\t--------------------------------------------\n\t\t\timport { NavLink, Route, Routes, Navigate } from 'react-router-dom';\n\n\t\t\timport { PageWelcome } from './pages/PageWelcome';\n\t\t\timport { PageMembers } from './pages/PageMembers';\n\t\t\timport { PageRegister } from './pages/PageRegister';\n\t\t\timport { PageLogin } from './pages/PageLogin';\n\t\t\timport { PageLogout } from './pages/PageLogout';\n\t\t\timport { PageConfirmLink } from './pages/PageConfirmLink';\n\n\t\t\t<nav>\n\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\t\t\t\t<NavLink to=\"/members\">Members</NavLink>\n\t\t\t\t<NavLink to=\"/register\">Register</NavLink>\n\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t\t<NavLink to=\"/logout\">Logout</NavLink>\n\t\t\t</nav>\n\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t<Route path=\"/members\" element={<PageMembers />} />\n\t\t\t\t<Route path=\"/register\" element={<PageRegister />} />\n\t\t\t\t<Route path=\"/login\" element={<PageLogin />} />\n\t\t\t\t<Route path=\"/logout\" element={<PageLogout />} />\n\t\t\t\t<Route path=\"/confirm-link\" element={<PageConfirmLink />} />\n\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />}/>\n\t\t\t</Routes>\n\t\t\t--------------------------------------------\n\t\t- `App.scss`\n\t\t\t---------------------------------------\n\t\t\tnav {\n\t\t\t\tmargin-top: .5rem;\n\t\t\t\tmargin-bottom: 1.5rem;\n\t\t\t\tpadding-bottom: .5rem;\n\t\t\t\tborder-bottom: 1px solid #555;\n\n\t\t\t\ta {\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\n\t\t\t\ta:not(:last-of-type);after {\n\t\t\t\t\tcolor: #444;\n\t\t\t\t\tcontent: ' | ';\n\t\t\t\t}\n\n\t\t\t\ta.active {\n\t\t\t\t\tcolor: yellow;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- your page should now work like this, be sure to test the `confirm-link` page as well:#gif#pageeshoulworksk\n- **3. Build backend API that works with TypeScript locally and at Heroku**\n\t- create backend\n\t\t- in project folder create backend directory at same level of frontend directory and open in VSCode\n\t\t\t- e.g. `mkdir et01-react-register-backend`\n\t\t\t- `code et01-react-register-backend`\n\t\t\t- when I work simultaneous on a frontend and backend, I give each a color to easily identify them\n\t\t\t- the VSCode extension [Peacock Plugin](https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock) works well for this:\n\t\t\t\t- **B**ackend is **B**lue (HTML color: `navy`)\n\t\t\t\t- **F**rontend is **F**uscia (HTML color: `purple`)##fronbackskdjf\n\t- **set up TypeScript up on the backend**\n\t\t- using TypeScript in the backend is not as easy as using TypeScrpt in the frontend\n\t\t\t- on the frontend, Vite sets everything up for us behind the scenes with the esbuild bundler\n\t\t\t- on the backend, we have to set everything up ourselves\n\t\t\t\t- this means we have toget everything to work with TypeScript and ES6 modules, both locally and at Heroku, which have their differences\n\t\t\t\t\t- locally, we need to start our `.ts` scripts with **ts-node** or to be precise, with **ts-node-esm** in order to use ES6 modules\n\t\t\t\t\t- Heroku, however, will execute JavaScript, i.e. the code created by the `npm run build` command, i.e. TypeScript transpiled into JavaScript\n\t\t- create `src/server.ts`\n\t\t\t----------------------------------\n\t\t\tinterface IUser {\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\taccessGroups: string[];\n\t\t\t}\n\n\t\t\tconst user: IUser = {\n\t\t\t\tfirstName: \"Hendrick\",\n\t\t\t\tlastName: \"Denzmann\",\n\t\t\t\taccessGroups: ['loggedInUsers', 'members']\n\t\t\t};\n\n\t\t\tconsole.log(user);\n\t\t\t----------------------------------\n\t\t- note that TypeScript is already being checked in my VSCode##notesalreaty\n\t\t\t- this is because I have **typescript.validate.enable** checked in Settings:##typescriptenablekj\n\t\t\t- if this settings is not checked in your VSCode code, check it now so that VSCode will help keep your code TypeSript conform as you develop\n\t\t- while TypeScript checking works in VSCode, if you try to execute the code with node: `node src/server.ts` \n\t\t\t- it returns an error since Node cannot natively execute JavaScript (as can [Deno](https://deno.land/) by the way)##canreunbut\n\t\t- **set up TypeScript locally for development**\n\t\t\t- `npm init -y`\n\t\t\t- `npm i nodemon -D`\n\t\t\t- `npm i typescript ts-node`\n\t\t\t- in **package.json** indicate that we want to use ES6 modules\n\t\t\t\t--------------------------------\n\t\t\t\t\"type\": \"module\",\n\t\t\t\t--------------------------------\n\t\t\t- in **package.json** create `npm run dev` script\n\t\t\t\t--------------------------\n\t\t\t\t \"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon\"\n\t\t\t\t  },\n\t\t\t\t--------------------------\n\t\t\t- create **nodemon.json** file which tells nodemon to watch all directories for changes in TypeScript files (`.ts`) and transpile them to JavaScript using the ECMAScript Module version (esm) of ts-node (`ts-node-esm`)\n\t\t\t\t----------------------------\n\t\t\t\t{\n\t\t\t\t  \"watch\": [\"\"],\n\t\t\t\t  \"ext\": \"ts\",\n\t\t\t\t  \"exec\": \"./node_modules/.bin/ts-node-esm src/server.ts\" \n\t\t\t\t}\t\t\t\t\n\t\t\t\t----------------------------\n\t\t- you are now able to execute your code with `npm run dev`##runwithsdrundev\n\t\t\t- note however, that we are not yet able to use ES6 imports with TypeScript\n\t\t\t\t- this we will set up in the next section since we need to import express and use as an ES6 module\n\t- set up Git and do an initial commit\n\t\t- `git init -b main`\n\t\t- .gitignore\n\t\t\t-------------------------------\n\t\t\tnode_modules\n\t\t\t-------------------------------\n\t- **create minimal API that returns user on base route (/)**\n\t\t- `npm i express`\n\t\t- add to **server.js**\n\t\t\t----------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst PORT = 3049;\n\n\t\t\tapp.listen(PORT, () => {\n\t\t\t\tconsole.log(`listening on port http://localhost:${PORT}`);\n\t\t\t});\n\t\t\t----------------------------------\n\t\t- executing this code generates the error:##doesnswimportexp\n\t\t- **solution:** we need to tell TypeScript how to work with ES6 modules\n\t\t\t- we do this by creating a TypeScript configuration file\n\t\t\t- create **tsconfig.json**\n\t\t\t\t----------------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\t\"target\": \"es6\",\n\t\t\t\t\t\t\"allowSyntheticDefaultImports\": true,\n\t\t\t\t\t\t\"moduleResolution\": \"node\",\n\t\t\t\t\t\t\"module\": \"esnext\"\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t\t----------------------------------------\n\t\t\t- `npm run dev`##tsconfnowrun\n\t\t- **server.ts:** add base route that outputs user\n\t\t\t------------------------------------------\n\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.send(user);\n\t\t\t});\t\t\t\n\t\t\t------------------------------------------\n\t\t- note that TypeScript would like to have `req` and `res` propertly definted as types:##notethattypesckreq\n\t\t\t- import TypeScript types for Express\n\t\t\t\t- `npm i -D @types/express`\n\t\t\t- add the proper types from express:##addepppskjas\n\t\t\t- note now that you have defined the types for `req` and `res`, VSCode gives you a dropdown list of all available methods on these objects:##notenowdefinetype\n\t\t- `npm run dev` should work and show the user object in the browser:##showinbrouser\t\n\t- **publish API at Heroku**\n\t\t- first, in **server.ts** enable Heroku to use its own port defined in an environment variable\n\t\t\t- `npm i dotenv`\n\t\t\t---------------------------------------------\n\t\t\timport dotenv from 'dotenv';\n\n\t\t\tdotenv.config();\n\n\t\t\tconst PORT = process.env.PORT || 3049;\n\t\t\t---------------------------------------------\n\t\t- set up build process to transpile TypeScript to JavaScript\n\t\t\t- since TypeScript compiles to JavaScript at build time, **Heroku is going to execute JavaScript, not TypeScript**\n\t\t\t- therefore we need to prepare our site to be able to execute our the TypeScript-transpiled JavaScript\n\t\t\t- in **package.json**, create a build script to execute the TypeScript compiler (tsc)\n\t\t\t\t--------------------------------------\n\t\t\t\t\"build\": \"tsc\"\n\t\t\t\t--------------------------------------\n\t\t\t- execute: `npm run build`\n\t\t\t\t- note that the build command created a file called **server.js** in our \"src\" directory##noteserverjs\n\t\t\t\t- note the absense of TypeScript code in the generated JavaScript:\n\t\t\t\t\t- our TypeScript interface is gone\n\t\t\t\t\t- all our TypeScript type references are gone\n\t\t\t- actually this generated JavaScript belongs in a \"build\" directory, not in our \"src\" file\n\t\t\t\t- delete the file `src/server.js`\n\t\t\t\t- in **tsconfig.json** add the following setting:\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\t\"outDir\": \"build\"\n\t\t\t\t\t-------------------------------------\n\t\t\t\t- execute `npm run build` again\n\t\t\t\t- the `server.js` file will now be in the **build** directory, no longer in our **src** directory:##nolonginsrc\n\t\t\t- in **package.json**, add two lines that tell Heroku to:\n\t\t\t\t- 1. transpile our TypeScript to JavaScript in a build process\n\t\t\t\t- 2. execute the resulting .js file in the build directory:\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t\t\"postinstall\": \"npm run build\",\n\t\t\t\t\t\"start\": \"node build/server.js\"\n\t\t\t\t\t-------------------------------------------\n\t\t\t- we are now ready to publish our TypeScript API at Heroku\n\t\t- push local Git repository to GitHub as e.g. **et01-react-register-backend**\n\t\t- go to [Heroku](https://dashboard.heroku.com)\n\t\t\t- create app\n\t\t\t\t- [New]\n\t\t\t\t- [Create new app]\n\t\t\t\t- `et01-react-register-backend`\n\t\t\t\t- Europe\n\t\t\t\t- [Create app]\n\t\t\t\t- [GitHub]\n\t\t\t\t- \"Search for a repository to connect to:\"\n\t\t\t\t\t- `et01-react-register-backend`\n\t\t\t\t\t- [Search]\n\t\t\t\t\t- [Connect]\n\t\t\t\t- [Enable Automatic Deploys]\n\t\t\t\t- [Deploy Branch]\n\t\t\t- watch it compile\n\t\t\t\t- Overview\n\t\t\t\t- watch \"Build in process...\"\n\t\t\t\t- when finished: [Open app]\n\t\t- you should see the user object in the browser:##theuserobjobjbro\n- **4. Implement sessions and cookies and complete all API routes: login, current-user, logout**\n\t- to keep this step as simple as possible\n\t\t- we will not check passwords, only the username to log in a user\n\t\t- passwords will be implemented when we move our data to MongoDB in the next step\n\t- make **test.rest** file to test the API\n\t\t-------------------------------------------------\n\t\t@url = http://localhost:3024\n\n\t\t### base route\n\t\t{{url}}\n\t\t-------------------------------------------------\n\t- extract interfaces and models into their own files and import them \n\t\t- interfaces.ts\n\t\t\t-------------------------------\n\t\t\texport interface IUser {\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\taccessGroups: string[];\n\t\t\t}\n\t\t\t-------------------------------\n\t\t- models.ts\n\t\t\t--------------------------------\n\t\t\timport { IUser } from './interfaces.js';\n\n\t\t\texport const user: IUser = {\n\t\t\t\tfirstName: \"Hendrick\",\n\t\t\t\tlastName: \"Denzmann\",\n\t\t\t\taccessGroups: ['loggedInUsers', 'members']\n\t\t\t};\t\t\t\n\t\t\t--------------------------------\n\t\t- server.ts\n\t\t\t-----------------------------------\n\t\t\timport { user } from './models.js';\n\t\t\t-----------------------------------\n\t\t- note the following:\n\t\t\t- we have to use the `.js` extension even though we are using TypeScript\n\t\t\t- technically this is only needed in `'./models.js'` but not `'./interfaces.js'` since the latter is not used in the compiled JavaScript\n\t\t\t- to understand this, execute a `npm run build` and note that the interfaces.ts file is created as `export {};` but no import statement exists for it\n\t\t\t\t- I would consider this a bug in the TypeScript compiler, since there is no reason to create a file if it is not imported\n\t\t\t- although it works, using the `.js` extension for ES6 modules in a TypeScript application is a non-optimal hack, a kind of [leaky abstraction](https://en.wikipedia.org/wiki/Leaky_abstraction)\n\t\t\t\t- optimal would be to not include the extension at all, as\n\t\t\t\t\t- Webpack solves in a create-react-app site\n\t\t\t\t\t- esbuild solves in a Vite site\n\t\t\t\t- I'm currently [looking for a solution to this](https://stackoverflow.com/questions/73449628/how-to-force-typescript-in-node-to-not-require-js-extension-when-importing-es6)\n\t- change mock user model to realistic users model\n\t\t- models.ts\n\t\t\t-----------------------------------------------\n\t\t\texport const getUsers = (): IUser[] => {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tusername: 'anonymousUser',\n\t\t\t\t\t\tfirstName: \"Anonymous\",\n\t\t\t\t\t\tlastName: \"User\",\n\t\t\t\t\t\taccessGroups: ['loggedOutUsers']\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tusername: 'hd',\n\t\t\t\t\t\tfirstName: \"Hendrick\",\n\t\t\t\t\t\tlastName: \"Denzmann\",\n\t\t\t\t\t\taccessGroups: ['loggedInUsers', 'members']\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tusername: 'an',\n\t\t\t\t\t\tfirstName: \"Andrea\",\n\t\t\t\t\t\tlastName: \"Netzelbach\",\n\t\t\t\t\t\taccessGroups: ['loggedInUsers', 'members']\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\t\t\n\t\t\t-----------------------------------------------\n\t\t- server.ts\n\t\t\t-----------------------------------------------\n\t\t\timport { getUsers } from './models.js';\n\n\t\t\tconst users = getUsers();\n\n\t\t\tres.send(users);\n\t\t\t-----------------------------------------------\n\t- set up sessions/cookies and get all necessary API routes working for login/logout\n\t\t- install needed npm packages\n\t\t\t- `npm i express-session`\n\t\t\t- `npm i cookie-parser`\n\t\t- set up **server.ts** for sessions\n\t\t\t---------------------------------------\n\t\t\timport session from 'express-session';\n\t\t\timport cookieParser from 'cookie-parser';\t\t\n\n\t\t\tapp.use(\n\t\t\t\tsession({\n\t\t\t\t\tresave: true,\n\t\t\t\t\tsaveUninitialized: true,\n\t\t\t\t\tsecret: 'tempsecret'\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tapp.use(cookieParser());\t\t\n\t\t\t------------------------------------\n\t\t- note that TypeScript is complaining that it isn't aware of types used in **express-session** and **cookie-parser**:##therrorfixsd\n\t\t\t- fix: import the types from npm\n\t\t\t\t- `npm i -D @types/express-session`\n\t\t\t\t- `npm i -D @types/cookie-parser`\n\t- set up login route\n\t\t- add login route to **server.ts**\n\t\t\t-----------------------------------------\n\t\t\tapp.post('/login', (req, res) => {\n\t\t\t\tconst username = req.body.username;\n\t\t\t\tconst user = users.find((user) => user.username === username);\n\t\t\t\tif (user) {\n\t\t\t\t\treq.session.user = user;\n\t\t\t\t\treq.session.cookie.expires = new Date(Date.now() + 10000); // 10 seconds\n\t\t\t\t\treq.session.save();\n\t\t\t\t\tres.send(`User logged in: ${JSON.stringify(user)}`);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(500).send('bad login');\n\t\t\t\t}\n\t\t\t});\n\t\t\t-----------------------------------------\n\t\t- **PROBLEM:** note that we get a typical error from TypeScript complaining that the property doesn't match a type, in this case `user` does not exist on req.session##typeicaltypeksj\n\t\t\t- we need to find a way to alter the type definition so that we can include any property on the object `req.session`\n\t\t\t- **FIX:** luckily one can often find answers to TypeScript issues like these by typing the error message into Google and finding answer such as [this one](https://stackoverflow.com/questions/65108033/property-user-does-not-exist-on-type-session-partialsessiondata) which gives us a cut-and-paste solution:\n\t\t\t\t-------------------------------------\n\t\t\t\tdeclare module 'express-session' {\n\t\t\t\t\texport interface SessionData {\n\t\t\t\t\t\tuser: { [key: string]: any };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t-------------------------------------\n\t\t- set up tests for both logins in **test.rest**\n\t\t\t---------------------------------------\n\t\t\t### LOGIN HENDRICK\n\t\t\tPOST {{url}}/login\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"username\": \"hd\"\n\t\t\t}\n\n\t\t\t### LOGIN ANDREA\n\t\t\tPOST {{url}}/login\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"username\": \"an\"\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- **PROBLEM:** note we get an error reading \"username\"##errorreadindfusername\n\t\t\t- **FIX:** we need to add middleware so Express can parse JSON being sent to the API\n\t\t\t\t-----------------------------------\n\t\t\t\tapp.use(express.json());\n\t\t\t\t-----------------------------------\n\t\t- login tests work now##showtestsowrkso\n\t- set up current-user route\n\t\t- add current-user route to **server.ts**\n\t\t\t-------------------------------------------------\n\t\t\tapp.get('/current-user', (req, res) => {\n\t\t\t\tif (req.session.user) {\n\t\t\t\t\tres.send(req.session.user);\n\t\t\t\t} else {\n\t\t\t\t\tres.send('no user logged in');\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- write test in **test.rest** and confirm that test works:\n\t\t\t----------------------------------------\n\t\t\t### GET CURRENT USER \n\t\t\t{{url}}/current-user\n\t\t\t----------------------------------------\n\t\t\t- note user stays logged in for 10 seconds, then is automatically logged out\n\t- set up logout route\n\t\t- add logout route to **server.ts**\n\t\t\t-------------------------------------------------\n\t\t\tapp.get('/logout', (req, res) => {\n\t\t\t\treq.session.destroy((err) => {\n\t\t\t\t\tres.send('User logged out');\n\t\t\t\t});\n\t\t\t});\t\t\n\t\t\t-------------------------------------------------\n\t\t- write test in **test.rest** and confirm that test works:\n\t\t\t----------------------------------------\n\t\t\t### LOGOUT GET \n\t\t\t{{url}}/logout\n\t\t\t----------------------------------------\n\t- **REFACTOR:** in order to prepare for using the API with the frontend, make it so there is always a user logged in, if not a specific user, then anonymousUser\n\t\t- in **server.ts**, replace all routes with refactored routes:\n\t\t\t----------------------------------------------\n\t\t\tconst loginSecondsMax = 10;\n\n\t\t\tconst logAnonymousUserIn = (req: express.Request, res: express.Response) => {\n\t\t\t\tconst user = users.find((user) => user.username === 'anonymousUser');\n\t\t\t\tif (user) {\n\t\t\t\t\treq.session.user = user;\n\t\t\t\t\treq.session.cookie.expires = new Date(Date.now() + loginSecondsMax * 1000);\n\t\t\t\t\treq.session.save();\n\t\t\t\t\tres.send({\n\t\t\t\t\t\t\"currentUser\": user\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tres.status(500).send('bad login');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst logUserIn = (username: string, req: express.Request, res: express.Response) => {\n\t\t\t\tlet user = users.find((user) => user.username === username);\n\t\t\t\tif (user) {\n\t\t\t\t\treq.session.user = user;\n\t\t\t\t\treq.session.cookie.expires = new Date(Date.now() + loginSecondsMax * 1000);\n\t\t\t\t\treq.session.save();\n\t\t\t\t\tres.send({\n\t\t\t\t\t\t\"currentUser\": user\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogAnonymousUserIn(req, res);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tapp.post('/login', (req: express.Request, res: express.Response) => {\n\t\t\t\tconst username = req.body.username;\n\t\t\t\tlogUserIn(username, req, res);\n\t\t\t});\n\n\t\t\tapp.get('/current-user', (req: express.Request, res: express.Response) => {\n\t\t\t\tconst user = req.session.user;\n\t\t\t\tif (user) {\n\t\t\t\t\tres.send({\n\t\t\t\t\t\t\"currentUser\": user\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlogAnonymousUserIn(req, res);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tapp.get('/logout', (req: express.Request, res: express.Response) => {\n\t\t\t\tlogAnonymousUserIn(req, res);\n\t\t\t});\t\t\t\n\t\t\t----------------------------------------------\n\t\t- test all routes and confirm that e.g. calling the logout route returns the current user as anonymousUser##logoutisanonyskj\t\t\n- **5. Set up frontend to use backend API for logging users in and out**\n\t- **on page load, log in current user**\n\t\t- this will now be anonymous user by default\n\t\t- set up environment variable for base url since it will be different when the site is online\n\t\t\t- App.txs\n\t\t\t\t----------------------------------------\n\t\t\t\tconst baseUrl = import.meta.env.VITE_BACKEND_URL;\n\t\t\t\t----------------------------------------\n\t\t\t- .env\n\t\t\t\t---------------------------------------\n\t\t\t\tVITE_BACKEND_URL = http://localhost:3049\n\t\t\t\t---------------------------------------\n\t\t\t- .gitignore\n\t\t\t\t---------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.env\n\t\t\t\t---------------------------------\n\t\t- get current user from /current-user route\n\t\t\t- `npm i axios`\n\t\t\t- App.tsx\n\t\t\t\t---------------------------------------------\n\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\timport axios from 'axios';\t\t\t\t\n\n\t\t\t\tconst [currentUser, setCurrentUser] = useState({});\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst data = (await axios.get(`${baseUrl}/current-user`)).data;\n\t\t\t\t\t\tconst _currentUser = data.currentUser;\n\t\t\t\t\t\tsetCurrentUser(_currentUser);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\t\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t\t- **PROBLEM:** CORS error##thecorswerorr\n\t\t\t\t- **FIX:** on backend, implement basic CORS\n\t\t\t\t\t- `npm i cors`\n\t\t\t\t\t- server.ts\n\t\t\t\t\t\t----------------------------------------\n\t\t\t\t\t\timport cors from 'cors';\n\n\t\t\t\t\t\tapp.use(cors());\n\t\t\t\t\t\t----------------------------------------\n\t\t\t- test to see what user is logged in, in **App.tsx**\n\t\t\t\t-----------------------------\n\t\t\t\t<pre>{currentUser.username}</pre>\n\t\t\t\t-----------------------------\n\t\t\t\t- this shows:##theusernameisin\n\t\t\t- **PROBLEM:** TypeScript is indicating that we haven't explicitly indicated that currentUser has any specific properties, i.e. username##typescriptnewkjeoeror\n\t\t\t\t- **FIX:** we need to define a type for currentUser\n\t\t\t\t\t- copy `interfaces.ts` from the backend and put it in the frontend in the `src` directory\n\t\t\t\t\t- App.tsx\n\t\t\t\t\t\t------------------------------------------------\n\t\t\t\t\t\timport { IUser } from './interfaces';\n\n\t\t\t\t\t\tconst [currentUser, setCurrentUser] = useState<IUser>({\n\t\t\t\t\t\t\tusername: '',\n\t\t\t\t\t\t\tfirstName: '',\n\t\t\t\t\t\t\tlastName: '',\n\t\t\t\t\t\t\taccessGroups: [] \n\t\t\t\t\t\t});\t\t\t\t\t\t\n\t\t\t\t\t\t------------------------------------------------\n\t\t\t\t\t- **note** that it in larger apps you want to have a model where you can get a e.g. empty IUser which is of type IUser, for the purpose of filling state variables, etc.\n\t\t\t\t\t\t- the apps data should come from one place, e.g. the app store, or the app model\n\t\t\t\t\t- **note** that our distributed MERN app now has the issue of sharing interfaces\n\t\t\t\t\t\t- if we update the backend IUser interface, we need to update it on the frontend as well\n\t\t\t\t\t\t- this could be handled with scripts that copy these files in a pre-hook before a commit, etc.\n\t\t\t\t\t- **note** that even though TypeScript is insuring that currentUser has a property username in JSX\n\t\t\t\t\t\t- this is only at develop time, not at run time\n\t\t\t\t\t\t- at run time, all of these types are gone since at run time we are running JavaScript, not TypeScript\n\t\t\t\t\t\t- therefore it can very well be that our frontend receives a currentUser object from the backend that does not have a username property and our code will break at run time\n\t\t\t\t\t\t- hence, even though we use TypeScript to protect our code from **ourselves**, TypeScript does not protect our code from the real world at run time\n\t\t\t\t\t\t- for that, we need to add validation and code the reacts to the case that currentUser may not have a property called username at run time\n\t\t\t\t\t\t- ideally we would do this in our model, so that our app can always depend on getting well-formed data and can concentrate on data presentation instead of data-cleansing and data-validation which should happen in the data model\n\t\t- display appropriate pages for anonymousUser\n\t\t\t- in **App.tsx** add conditional rendering to nav and Routes areas\n\t\t\t\t-------------------------------------------\n\t\t\t\timport { Page404 } from './pages/Page404';\n\n\t\t\t\t<nav>\n\t\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\t\t\t\t\t{currentUser.accessGroups.includes('members') && (\n\t\t\t\t\t\t<NavLink to=\"/members\">Members</NavLink>\n\t\t\t\t\t)}\n\t\t\t\t\t<NavLink to=\"/register\">Register</NavLink>\n\t\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t\t\t{currentUser.accessGroups.includes('loggedInUsers') && (\n\t\t\t\t\t\t<NavLink to=\"/logout\">Logout</NavLink>\n\t\t\t\t\t)}\n\t\t\t\t</nav>\n\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"*\" element={<Page404 />} />\n\t\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t\t{currentUser.accessGroups.includes('members') && (\n\t\t\t\t\t\t<Route path=\"/members\" element={<PageMembers />} />\n\t\t\t\t\t)}\n\t\t\t\t\t<Route path=\"/register\" element={<PageRegister />} />\n\t\t\t\t\t<Route path=\"/login\" element={<PageLogin />} />\n\t\t\t\t\t{currentUser.accessGroups.includes('loggedInUsers') && (\n\t\t\t\t\t\t<Route path=\"/logout\" element={<PageLogout />} />\n\t\t\t\t\t)}\n\t\t\t\t\t<Route path=\"/confirm-link\" element={<PageConfirmLink />} />\n\t\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />} />\n\t\t\t\t</Routes>\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t\t- pages/Page404.tsx\n\t\t\t\t----------------------------------------\n\t\t\t\texport const Page404 = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"page404\">\n\t\t\t\t\t\t\t<p>404 Page not found</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t----------------------------------------\n\t\t\t- add some styling for 404 page in **App.scss**\n\t\t\t\t----------------------------------------\n\t\t\t\t.page404 {\n\t\t\t\t\tcolor: #333;\n\t\t\t\t\tp {\n\t\t\t\t\t\tfont-size: 4rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t----------------------------------------\n\t\t\t- **note** that in the backend, you can now change the accessGroups for anonymousUser and the pages it can see will be automatically reflected\n\t\t\t\t- this is how the Anonymous-User Pattern enables you to control access logic via the user data instead of having it hard-coded in conditional rendering in the frontend\n\t\t- implement Login and Logout pages\n\t\t\t- implement Login page\n\t\t\t\t- **PageLogin.tsx**\n\t\t\t\t\t-----------------------------------------------------\n\t\t\t\t\texport const PageLogin = () => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t\t\t\t<button>Login</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t\t-----------------------------------------------------\n\t\t\t\t- **App.scss**\n\t\t\t\t\t---------------------------------------\n\t\t\t\t\tform {\n\t\t\t\t\t\tfieldset {\n\t\t\t\t\t\t\tmax-width: 15rem;\n\t\t\t\t\t\t\tlegend {\n\t\t\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t\t\t\tcolor: #777;\n\t\t\t\t\t\t\t\tpadding: .3rem;\n\t\t\t\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t\t\tborder: 0;\n\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\tborder-radius: 5px;\n\n\t\t\t\t\t\t\t.row {\n\t\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\t\tlabel {\n\t\t\t\t\t\t\t\t\tmargin-bottom: .3rem;\n\t\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinput {\n\t\t\t\t\t\t\t\t\twidth: 97%;\n\t\t\t\t\t\t\t\t\tbackground-color: #ccc;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.buttonRow {\n\t\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\t\tjustify-content: right;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t---------------------------------------\n\t\t\t\t- pass baseUrl from App.tsx to PageLogin.tsx\n\t\t\t\t\t- **note** that TypeScript changes the way you send props to child components\n\t\t\t\t\t\t- **PageLogin.tsx**\n\t\t\t\t\t\t\t----------------------------------------\n\t\t\t\t\t\t\tinterface IPageLoginProps {\n\t\t\t\t\t\t\t\tbaseUrl: string;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\texport const PageLogin = (props:IPageLoginProps) => {\n\t\t\t\t\t\t\t\tconst { baseUrl } = props;\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t----------------------------------------\n\t\t\t\t\t\t- **App.tsx**\n\t\t\t\t\t\t\t------------------------------------------\n\t\t\t\t\t\t\t<Route path=\"/login\" element={<PageLogin baseUrl={baseUrl} />} />\n\t\t\t\t\t\t\t------------------------------------------\n\t\t\t\t- **PageLogin.tsx**: implement the rest of the changes using this finished code for the page\n\t\t\t\t\t-----------------------------------\n\t\t\t\t\timport { useState } from 'react';\n\t\t\t\t\timport axios from 'axios';\n\t\t\t\t\timport { IUser } from '../interfaces';\n\n\t\t\t\t\tinterface IPageLoginProps {\n\t\t\t\t\t\tbaseUrl: string;\n\t\t\t\t\t\tsetCurrentUser: React.Dispatch<React.SetStateAction<IUser>>;\n\t\t\t\t\t}\n\n\t\t\t\t\texport const PageLogin = (props: IPageLoginProps) => {\n\t\t\t\t\t\tconst { baseUrl, setCurrentUser } = props;\n\t\t\t\t\t\tconst [formMessage, setFormMessage] = useState('');\n\t\t\t\t\t\tconst [username, setUsername] = useState('');\n\t\t\t\t\t\tconst [password, setPassword] = useState('');\n\n\t\t\t\t\t\tconst handleLoginButton = (e: React.MouseEvent<HTMLElement>) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\tconst data = (\n\t\t\t\t\t\t\t\t\tawait axios.post(\n\t\t\t\t\t\t\t\t\t\t`${baseUrl}/login`,\n\t\t\t\t\t\t\t\t\t\t{ username },\n\t\t\t\t\t\t\t\t\t\t{ withCredentials: true }\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t).data;\n\t\t\t\t\t\t\t\tconst _currentUser = data.currentUser;\n\t\t\t\t\t\t\t\tif (_currentUser.username === 'anonymousUser') {\n\t\t\t\t\t\t\t\t\tsetFormMessage('bad login');\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetCurrentUser(_currentUser);\n\t\t\t\t\t\t\t\t\tsetFormMessage('');\n\t\t\t\t\t\t\t\t\tsetUsername('');\n\t\t\t\t\t\t\t\t\tsetPassword('');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={username}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"formMessage\">{formMessage}</div>\n\t\t\t\t\t\t\t\t\t\t<button onClick={(e) => handleLoginButton(e)}>Login</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t);\n\t\t\t\t\t};\t\t\t\t\t\n\t\t\t\t\t-----------------------------------\n\t\t\t\t- **App.tsx**\n\t\t\t\t\t---------------------------------------\n\t\t\t\t\tconst data = (\n\t\t\t\t\t\tawait axios.get(`${baseUrl}/current-user`, {\n\t\t\t\t\t\t\twithCredentials: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t).data;\t\t\t\t\t\n\n\t\t\t\t\t{currentUser.username !== 'anonymousUser' && (\n\t\t\t\t\t\t<div className=\"userFullName\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{currentUser.firstName} {currentUser.lastName}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\t\t\t\t\t\n\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/login\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<PageLogin\n\t\t\t\t\t\t\t\tbaseUrl={baseUrl}\n\t\t\t\t\t\t\t\tsetCurrentUser={setCurrentUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\t\t\t\t\t\n\t\t\t\t\t---------------------------------------\n\t\t\t\t- on the backend in **server.ts**, configure settings for cookies to work\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\tapp.use(express.json());\n\t\t\t\t\tapp.use(\n\t\t\t\t\t\tcors({\n\t\t\t\t\t\t\torigin: \"http://localhost:5173\",\n\t\t\t\t\t\t\tmethods: ['POST', 'PUT', 'GET', 'OPTIONS', 'HEAD'],\n\t\t\t\t\t\t\tcredentials: true\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\t// app.set('trust proxy', 1)\n\n\t\t\t\t\tapp.use(cookieParser());\n\n\t\t\t\t\tapp.use(\n\t\t\t\t\t\tsession({\n\t\t\t\t\t\t\tresave: true,\n\t\t\t\t\t\t\tsaveUninitialized: true,\n\t\t\t\t\t\t\tsecret: 'tempsecret',\n\t\t\t\t\t\t\tcookie: {\n\t\t\t\t\t\t\t\thttpOnly: true,\n\t\t\t\t\t\t\t\tsameSite: 'lax',\n\t\t\t\t\t\t\t\tsecure: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t\tapp.all('/', function (req, res, next) {\n\t\t\t\t\t\tres.header(\"Access-Control-Allow-Origin\", \"http://localhost:5173\");\n\t\t\t\t\t\tres.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t- in **PageLogin.tsx**, after successful login, forward user to members page\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t\timport { useNavigate } from 'react-router-dom';\n\n\t\t\t\t\tconst navigate = useNavigate();\n\n\t\t\t\t\tnavigate('/members');\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t- in **App.tsx**, add conditional rendering for logged in users\n\t\t\t\t\t---------------------------------------\n\t\t\t\t\t{currentUser.accessGroups.includes('loggedOutUsers') && (\n\t\t\t\t\t\t<NavLink to=\"/register\">Register</NavLink>\n\t\t\t\t\t)}\n\t\t\t\t\t{currentUser.accessGroups.includes('loggedOutUsers') && (\n\t\t\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t\t\t)}\n\t\t\t\t\t---------------------------------------\n\t\t\t\t- **note** that these are the settings that work locally, they will have to be tweaked to work at Heroku\n\t\t\t- implement logout page\n\t\t\t\t- **PageLogout.tsx**\n\t\t\t\t\t------------------------------------------------------\n\t\t\t\t\timport axios from 'axios';\n\t\t\t\t\timport { IUser } from '../interfaces';\n\t\t\t\t\timport { useNavigate } from 'react-router-dom';\n\n\t\t\t\t\tinterface IPageLogoutProps {\n\t\t\t\t\t\tbaseUrl: string;\n\t\t\t\t\t\tsetCurrentUser: React.Dispatch<React.SetStateAction<IUser>>;\n\t\t\t\t\t}\n\n\t\t\t\t\texport const PageLogout = (props: IPageLogoutProps) => {\n\t\t\t\t\t\tconst { baseUrl, setCurrentUser } = props;\n\n\t\t\t\t\t\tconst navigate = useNavigate();\n\n\t\t\t\t\t\tconst handleLogoutButton = () => {\n\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\tconst data = (\n\t\t\t\t\t\t\t\t\tawait axios.get(\n\t\t\t\t\t\t\t\t\t\t`${baseUrl}/logout`)).data;\n\t\t\t\t\t\t\t\tconst _currentUser = data.currentUser;\n\t\t\t\t\t\t\t\tif (_currentUser.username === 'anonymousUser') {\n\t\t\t\t\t\t\t\t\tsetCurrentUser(_currentUser);\n\t\t\t\t\t\t\t\t\tnavigate('/');\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthrow new Error('ERROR: no anonymous user');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"pageLogout\">\n\t\t\t\t\t\t\t\t<button onClick={handleLogoutButton}>Logout now</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t};\t\t\t\t\t\n\t\t\t\t\t------------------------------------------------------\n\t\t\t\t- **App.tsx**\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/logout\"\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<PageLogout\n\t\t\t\t\t\t\t\tbaseUrl={baseUrl}\n\t\t\t\t\t\t\t\tsetCurrentUser={setCurrentUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\t\t\t\t\t\n\t\t\t\t\t----------------------------------------------\n\t\t\t- **PROBLEM:** cookies will not save on Vite's suggested website link: http://127.0.0.1:5173 but will work on http://localhost:5173\n\t\t\t\t- **FIX;** display http://localhost in the `npm run vite` script\n\t\t\t\t\t- `npm i -D npm-run-all`\n\t\t\t\t\t- **vite.localhost.js**\n\t\t\t\t\t\t-----------------------------------------\n\t\t\t\t\t\tconsole.log('LAUNCH WITH COOKIE SUPPORT: http://localhost:5173');\n\t\t\t\t\t\t-----------------------------------------\n\t\t\t\t\t- **package.json**\n\t\t\t\t\t\t-----------------------------------------------------\n\t\t\t\t\t\t\"scripts\": {\n\t\t\t\t\t\t\t\"dev\": \"run-p vitelocal vitelocalhost\",\n\t\t\t\t\t\t\t\"build\": \"tsc && vite build\",\n\t\t\t\t\t\t\t\"preview\": \"vite preview\",\n\t\t\t\t\t\t\t\"vitelocal\": \"vite\",\n\t\t\t\t\t\t\t\"vitelocalhost\": \"node vite.localhost.js\"\n\t\t\t\t\t\t},\t\t\n\t\t\t\t\t\t-----------------------------------------------------\n\t\t\t- on your local system, login and logout should now work like this:#gif#theloginlogoutstep\n\t- get current application running at Netlify and Heroku \n\t\t- we will have to tweak some settings to get our frontend and backend to run at Netlify and Heroku as they do locally\n\t\t- **prepare frontend for Netlify**\n\t\t\t- create backUrl variable on Netlify `https://et01-react-register-backend.herokuapp.com`\n\t\t\t\t- display backUrl variable on Netlify\n\t\t\t\t\t- **App.tsx** \n\t\t\t\t\t\t----------------------------------\n\t\t\t\t\t\tconsole.log(`*********** baseUrl = [${baseUrl}]`);\n\t\t\t\t\t\t----------------------------------\n\t\t\t\t\t- locally the variable is set:##thelocalsetkj\n\t\t\t- publish to Netlify, e.g. giving it the same name as you app, e.g.: `et01-react-register-frontend`\n\t\t\t\t- at Netlify the variable is undefined:##thelocalsetkjonline\n\t\t\t- **PROBLEM:** while testing, when we reload the page with a React Router page, it gets a 404 error##tehreactrou3404\n\t\t\t\t- **FIX:** create **public/_redirects** file (without extension)\n\t\t\t\t\t-----------------------------------------\n\t\t\t\t\t/* /index.html 200\n\t\t\t\t\t-----------------------------------------\n\t\t\t- at Netlify, set environment variable **VITE_BACKEND_URL** to `https://et01-react-register-backend.herokuapp.com`\n\t\t\t\t- [Deploy settings]##tehdeplsosettin\n\t\t\t\t- Build & Deploy > Environment##builddeployenvenv\n\t\t\t\t- [Edit Variables]\n\t\t\t\t- enter key and value:##borthavarvar\n\t\t\t\t- after changing an environment variable, you have to redeploy\n\t\t\t\t\t- [Deploys]\n\t\t\t\t\t- [Trigger deploy]\n\t\t\t\t\t- [Deploy site]##repldploythesite\t\n\t\t\t\t- even though the site does not yet work, we see the our environment variable is set and our Netlify frontend is accessing our Heroku backend##netfliyworksnowbackend\n\t\t\t\t- the cors problem we will have to solve on the backend now\n\t\t\t\t- **be sure** to delete the config.log command and republish to Netlify so that you are not unnecessarily exposing environment variables online\n\t\t- **prepare backend for Heroku**\n\t\t\t- the environment variable NODE_ENV \n\t\t\t\t- locally it is \"development\"\n\t\t\t\t- at Heroku it is \"production\"\n\t\t\t\t- prove this by making this change in **server.ts**\n\t\t\t\t\t---------------------------------------------------\n\t\t\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\t\t\tres.send(`***${process.env.NODE_ENV}***`);\n\t\t\t\t\t});\n\t\t\t\t\t---------------------------------------------------\n\t\t\t\t\t- you'll see:##thetwonodeenv\n\t\t\t- **server.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\tapp.set('trust proxy', 1);\n\n\t\t\t\torigin: process.env.FRONTEND_BASE_URL,\n\n\t\t\t\tsameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\",\n\t\t\t\tsecure: process.env.NODE_ENV === \"production\"\n\t\t\t\t-----------------------------------------\n\t\t\t- .env\n\t\t\t\t----------------------------------\n\t\t\t\tFRONTEND_BASE_URL = http://localhost:5173\n\t\t\t\tSESSION_SECRET = owi623742sfsdf9837wreruer\t\t\t\t\n\t\t\t\t----------------------------------\n\t\t\t- .gitignore\n\t\t\t\t------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.env\n\t\t\t\t------------------------------\n\t\t\t- at Heroku, add these two environment variables (SESSION_SECRET should be a random string)\n\t\t\t\t- `FRONTEND_BASE_URL`\n\t\t\t\t\t- https://et01-react-register-frontend.netlify.app\n\t\t\t\t- `SESSION_SECRET`\n\t\t\t\t\t- ksdjf876sdf7sjsdhsf76df##addtherstwjo\n\t\t\t- your site at Netlify should now successfully access your backend Heroku site and work like this:#gif#theonleisitgworks\n- **6. Move data into Mongo database**\n\t- background for this step\n\t\t- until this point we had a mock, read-only database for test purposes\n\t\t- the problem is that for the register process, we will need to be able to add and change users\n\t\t- therefore we need to move our mock, read-only database into a realistic Mongo Atlas database\n\t\t- for simplicity purposes, we will connect to the online Mongo Atlas database both from our local app and our online Heroku app\n\t- create Mongo database at Atlas with hashed passwords\n\t\t- create JSON file to import into MongoDB Atlas\n\t\t\t- in **src/models.ts**, copy the users object and [convert to JSON](https://www.convertsimple.com/convert-javascript-to-json)\n\t\t\t- create **dev/_users.json** and copy in the JSON\n\t\t\t- add **hash** property\n\t\t\t- `npm i bcrypt`\n\t\t\t- create **generateUserHashes.js**\n\t\t\t\t-----------------------------------------\n\t\t\t\timport bcrypt from 'bcrypt';\n\n\t\t\t\tconst createHash = async (password) => {\n\t\t\t\t\tconst salt = await bcrypt.genSalt();\n\t\t\t\t\tconst hash = await bcrypt.hash(password, salt);\n\t\t\t\t\treturn hash;\n\t\t\t\t};\n\n\t\t\t\tconst passwords = ['anonymousUser123', 'hd123', 'an123'];\n\n\t\t\t\tpasswords.forEach((password) => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst hash = await createHash(password);\n\t\t\t\t\t\tconsole.log(`${password} --> ${hash}`);\n\n\t\t\t\t\t\tconst passwordIsCorrect = await bcrypt.compare(\n\t\t\t\t\t\t\tpassword,\n\t\t\t\t\t\t\tString(hash)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconsole.log(passwordIsCorrect);\n\t\t\t\t\t})();\n\t\t\t\t});\n\t\t\t\t-----------------------------------------\n\t\t\t- in **package.json** add this script\n\t\t\t\t--------------------------------------------\n\t\t\t\t\"genhash\": \"node dev/generateUserHashes.js\"\n\t\t\t\t--------------------------------------------\n\t\t\t- `npm run genhash`\n\t\t\t- copy in hashes into the **hash** property of each user in **_users.json**##copyinappriasj\n\t\t- create Mongo Atlas database and import **dev/_users.json**\n\t\t\t- create database called e.g. `et01reactregister` (without hyphens)\n\t\t\t\t- go to [MongoDB Atlas](https://cloud.mongodb.com) and sign in\n\t\t\t\t- [Browse Collections]\n\t\t\t\t- [Create Database]\n\t\t\t\t- Database name: `et01reactregister` (make sure database name has no hyphens)\n\t\t\t\t- Collection name: `users`\n\t\t\t\t- [Create]\n\t\t\t- open Compass\n\t\t\t\t- click on the database you created\n\t\t\t\t- click on the collection **users**\n\t\t\t\t- [Import Data]##andthedoimpor\n\t\t\t\t- [Select a file...]\n\t\t\t\t- [JSON]\n\t\t\t\t- [IMPORT]\n\t\t\t\t- [DONE]\n\t\t\t\t- your data is imported##theimportdata\n\t\t\t\t- for testing purposes, change first names to \"Hendrick-db\" and \"Andrea-db\" so we know when we have imported from the database\n\t\t\t- create dedicated user for this database\n\t\t\t\t- go to [MongoDB Atlas](https://cloud.mongodb.com)\n\t\t\t\t- [Database Access]\n\t\t\t\t- [Custom Roles]\n\t\t\t\t\t- assign only the rights you need:##onlytherighsdkjf\n\t\t\t\t- [Database Users]\n\t\t\t\t- [+ADD NEW DATABASE USER]\n\t\t\t\t\t- username: `et01-react-register-user`\n\t\t\t\t\t- password: (something easy to remember for test purposes)\n\t\t\t\t\t- custom roles, select role you creates\n\t\t\t- `npm i mongoose`\n\t\t\t- **models/User.ts**\n\t\t\t\t------------------------------------\n\t\t\t\timport mongoose from 'mongoose';\n\n\t\t\t\tconst userSchema = new mongoose.Schema({\n\t\t\t\t\tusername: String,\n\t\t\t\t\thash: String,\n\t\t\t\t\tfirstName: String,\n\t\t\t\t\tlastName: String,\n\t\t\t\t\taccessGroups: [String]\n\t\t\t\t});\n\n\t\t\t\texport const User = mongoose.model('user', userSchema);\n\t\t\t\t------------------------------------\n\t\t\t- in **server.ts**, read data from MongoDB via Mongoose Schema\n\t\t\t\t---------------------------------\n\t\t\t\timport mongoose from 'mongoose';\n\t\t\t\timport { User } from './models/User.js';\n\n\t\t\t\tdotenv.config();\n\t\t\t\tmongoose.connect(process.env.MONGODB_URI);\n\n\t\t\t\tconst logAnonymousUserIn = async (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst user = await User.findOne({ username: 'anonymousUser' });\n\n\t\t\t\tconst logUserIn = async (username: string, req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst user = await User.findOne({ username });\t\t\t\t\t\n\t\t\t\t---------------------------------\n\t\t\t- get the connection string\n\t\t\t\t- MongoDB Atlas\n\t\t\t\t- [Database]\n\t\t\t\t- [Connect]\n\t\t\t\t- [Connection with your application]\n\t\t\t\t- copy connection string \n\t\t\t- .env\n\t\t\t\t- copy in connection string and add user and password, e.g.##theensiwhpas\n\t\t\t- test locally\n\t\t- connect MongoDB to Heroku \n\t\t\t- go to Heroku\n\t\t\t\t- add environment variable \"MONGODB_URI\" with the same value as is in the local .env file\n\t\t\t\t- push code to GitHub\n\t\t\t- test at Netlify\n\t\t\t\t- app should work online just as it did \n- **7. Check passwords in addition to username**\n\t- implement password checking local\n\t\t- add passwords to **test.rest**\n\t\t\t-----------------------------------------\n\t\t\t\"password\": \"hd123\"\n\n\t\t\t\"password\": \"an123\"\n\t\t\t-----------------------------------------\n\t\t- `npm i bcrypt`\n\t\t- add passwords to **server.ts**\n\t\t\t-------------------------------------------\n\t\t\timport bcrypt from 'bcrypt';\n\n\t\t\tconst logUserIn = async (username: string, password: string, req: express.Request, res: express.Response) => {\n\t\t\t\tconst user = await User.findOne({ username });\n\t\t\t\tif (user) {\n\t\t\t\t\tconst passwordIsCorrect = await bcrypt.compare(\n\t\t\t\t\t\tpassword,\n\t\t\t\t\t\tuser.hash\n\t\t\t\t\t);\n\t\t\t\t\tif (passwordIsCorrect) {\n\t\t\t\t\t\treq.session.user = user;\n\t\t\t\t\t\treq.session.cookie.expires = new Date(Date.now() + loginSecondsMax * 1000);\n\t\t\t\t\t\treq.session.save();\n\t\t\t\t\t\tres.send({\n\t\t\t\t\t\t\t\"currentUser\": user\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogAnonymousUserIn(req, res);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogAnonymousUserIn(req, res);\n\t\t\t\t}\n\t\t\t}\t\t\t\t\n\t\t\t-------------------------------------------\n\t\t- test with test.rest\n\t\t\t- **PROBLEM:** if you log out before 10 seconds and check user, the logged in user is still logged in\n\t\t\t\t- **FIX:** **DOING...**\n\t\t- on frontend in **PageLoging.tsx**, send password as well\n\t\t\t-------------------------------------\n\t\t\t{ username, password },\n\t\t\t-------------------------------------\n\t\t- test locally and online\n- **8. Implement register process with e-mail confirmation**\n\t- backend\n\t\t- `npm i nodemailer`\n\t\t- `npm i -D @types/nodemailer`\n\t\t- .env\n\t\t\t-----------------------------\n\t\t\tMAILER_PASSWORD = theIsThePasswordOfTheGmailAccountThatSendsEmails\n\t\t\t-----------------------------\n\t\t- **server.ts**\n\t\t\t----------------------------------------\n\t\t\timport { createTransport } from 'nodemailer';\n\n\t\t\tvar transporter = createTransport({\n\t\t\t\tservice: 'gmail',\n\t\t\t\tauth: {\n\t\t\t\t\tuser: 'gmailAccountName',\n\t\t\t\t\tpass: process.env.PASSWORD,\n\t\t\t\t},\n\t\t\t});\n\t\t\t----------------------------------------\n\t- frontend\n\t\t- **PageRegister.tsx**\n\t\t\t-------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\t\t\timport './App.scss';\n\t\t\timport { NavLink, Route, Routes, Navigate } from 'react-router-dom';\n\t\t\timport { IUser } from './interfaces';\n\t\t\timport { PageWelcome } from './pages/PageWelcome';\n\t\t\timport { PageMembers } from './pages/PageMembers';\n\t\t\timport { PageRegister } from './pages/PageRegister';\n\t\t\timport { PageLogin } from './pages/PageLogin';\n\t\t\timport { PageLogout } from './pages/PageLogout';\n\t\t\timport { PageConfirmLink } from './pages/PageConfirmLink';\n\t\t\timport { Page404 } from './pages/Page404';\n\n\t\t\tconst baseUrl = import.meta.env.VITE_BACKEND_URL;\n\n\t\t\tfunction App() {\n\t\t\t\tconst [currentUser, setCurrentUser] = useState<IUser>({\n\t\t\t\t\tusername: '',\n\t\t\t\t\tfirstName: '',\n\t\t\t\t\tlastName: '',\n\t\t\t\t\taccessGroups: [],\n\t\t\t\t});\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst data = (\n\t\t\t\t\t\t\tawait axios.get(`${baseUrl}/current-user`, {\n\t\t\t\t\t\t\t\twithCredentials: true,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).data;\n\t\t\t\t\t\tconst _currentUser = data.currentUser;\n\t\t\t\t\t\tsetCurrentUser(_currentUser);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Language Tandem Group</h1>\n\t\t\t\t\t\t{currentUser.username !== 'anonymousUser' && (\n\t\t\t\t\t\t\t<div className=\"userFullName\">\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t{currentUser.firstName} {currentUser.lastName}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\t\t\t\t\t\t\t{currentUser.accessGroups.includes('members') && (\n\t\t\t\t\t\t\t\t<NavLink to=\"/members\">Members</NavLink>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{currentUser.accessGroups.includes('loggedOutUsers') && (\n\t\t\t\t\t\t\t\t<NavLink to=\"/register\">Register</NavLink>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{currentUser.accessGroups.includes('loggedOutUsers') && (\n\t\t\t\t\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{currentUser.accessGroups.includes('loggedInUsers') && (\n\t\t\t\t\t\t\t\t<NavLink to=\"/logout\">Logout</NavLink>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</nav>\n\n\t\t\t\t\t\t<Routes>\n\t\t\t\t\t\t\t<Route path=\"*\" element={<Page404 />} />\n\t\t\t\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t\t\t\t{currentUser.accessGroups.includes('members') && (\n\t\t\t\t\t\t\t\t<Route path=\"/members\" element={<PageMembers />} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/register\"\n\t\t\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t\t\t<PageRegister\n\t\t\t\t\t\t\t\t\t\tbaseUrl={baseUrl}\n\t\t\t\t\t\t\t\t\t\tsetCurrentUser={setCurrentUser}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/login\"\n\t\t\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t\t\t<PageLogin\n\t\t\t\t\t\t\t\t\t\tbaseUrl={baseUrl}\n\t\t\t\t\t\t\t\t\t\tsetCurrentUser={setCurrentUser}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{currentUser.accessGroups.includes('loggedInUsers') && (\n\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\tpath=\"/logout\"\n\t\t\t\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t\t\t\t<PageLogout\n\t\t\t\t\t\t\t\t\t\t\tbaseUrl={baseUrl}\n\t\t\t\t\t\t\t\t\t\t\tsetCurrentUser={setCurrentUser}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Route path=\"/confirm-link\" element={<PageConfirmLink />} />\n\t\t\t\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />} />\n\t\t\t\t\t\t</Routes>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t------------------------------------------\n- **9. Finish the registration process and many other fine tunings to the site**\t\n\t- from this point there are many changes to this site to get the regsitration process to work correctly\n\t- please see these repositories of frontend and backend to build your site to the point where the site and registration process works smoothly\n\t\t- frontend: https://github.com/edwardtanguay/et01-react-register-frontend\n\t\t- backend: https://github.com/edwardtanguay/et01-react-register-backend","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-20 20:48:50","systemWhoCreated":"systemUnknown"},{"id":599,"category":"Node Hosting","title":"Free Node/Express backend alternatives to Heroku","body":"- it seems that as of November 2022, Heroku will no longer be offering free services##thenofreemore\n- here are some possible alternatives:\n\t- **[cyclic.sh](https://www.cyclic.sh)**##cyclickredner\n\t- **[render.com](https://render.com)**##hostingrender\n\t- **[railway.app](https://railway.app)**##hostingrailway\n\t- **[fly.io](https://fly.io)**##hostingfly\n\t- **[qoddi.com](https://qoddi.com)**##hostingqoddi\n\t- **[deta.sh](https://www.deta.sh)**##hostingdeta\n\t- **[Back4app](https://www.back4app.com/docs/js-framework/node-web-server)**##tehback\n\t- **[AWS Beanstalk](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs.html)**##deploybeansatlk\n\t- **[Google App Engine](https://cloud.google.com/appengine/docs/standard/nodejs/create-app)**##appenginedpleoynode\n\t- **[Dokku](https://dokku.com/docs~v0.4.0/application-deployment)**##dokkunode\t\t\n\t- **[Firebase](https://towardsdev.com/host-a-nodejs-app-with-firebase-87c771489bea)**##firebasendodes\n\t- **[Vercel](https://github.com/losrobbos/vercel-deploy-guide#backend)**##vercelhostingnode\n\t\t- Note there is apparently an issue with **a Mongoose connection to MongoDB Atlas:**\n\t\t\t- *\"Ein anderes, gängiges Problem auf Vercel ist, dass die erstmalige Verbindungs-Anfrage zu Mongoose auf ATLAS meist den Timeout überschreitet. Leider queued Vercel die erste Mongoose Verbindung erheblich. Man wird beim ersten Run einer Route, die Daten aus der DB fetcht, wohl somit auch leider einen Server Error bekommen. Bei einem anschließenden Browser Refresh nach etwa 30 Sekunden sollte es allerdings dann hoffentlich klappen, die Verbindung aufgebaut sein und die Route die Daten liefern.\"*\n\t- **[supabase](https://supabase.com/pricing)** -- [Full Stack Development with Next.js and Supabase – The Complete Guide](https://www.freecodecamp.org/news/the-complete-guide-to-full-stack-development-with-supabas/)##freeteiresup","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-26 03:41:40","systemWhoCreated":"systemUnknown"},{"id":600,"category":"React Router","title":"React Router site to demonstrate nested routes with Outlet and useOutletContext","body":"- this is a classic React Router site \n- it demonstrates two ways of using Outlet\n\t- for displaying specific information on the page that has a dedicated URL (see employee page)\n\t- for displaying e.g. an array of items (see tech books page)\n\t- the employees are displayed with a non-Outlet solution\n- full code for this site is here: https://github.com/edwardtanguay/et01-react-router-site\n- site looks like this:#gif#outletsiteexample\n- **App.jsx**\n\t---------------------------------------------------\n\timport { useEffect, useState } from 'react';\n\timport './App.scss';\n\timport { PageWelcome } from './pages/PageWelcome';\n\timport { PageEmployees } from './pages/PageEmployees';\n\timport { PageTechBooks } from './pages/PageTechBooks';\n\timport { Routes, Route } from 'react-router-dom';\n\timport Nav from './components/Nav';\n\timport axios from 'axios';\n\timport { Employee } from './components/Employee';\n\timport { TechBook } from './components/TechBook';\n\timport { TechBookInfo } from './components/TechBookInfo';\n\timport { EmployeeInfo } from './components/EmployeeInfo';\n\timport { EmployeeIntro } from './components/EmployeeIntro';\n\n\tconst employeesUrl = 'https://edwardtanguay.netlify.app/share/employees.json';\n\tconst techBooksUrl = 'https://edwardtanguay.netlify.app/share/techBooks.json';\n\n\tfunction App() {\n\t\tconst [employees, setEmployees] = useState([]);\n\t\tconst [techBooks, setTechBooks] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tsetEmployees((await axios.get(employeesUrl)).data);\n\t\t\t})();\n\t\t}, []);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tsetTechBooks((await axios.get(techBooksUrl)).data);\n\t\t\t})();\n\t\t}, []);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>React Router Site</h1>\n\t\t\t\t<Nav />\n\n\t\t\t\t<div className=\"pageArea\">\n\t\t\t\t\t<Routes>\n\t\t\t\t\t\t<Route path=\"/\" element={<PageWelcome />} />\n\t\t\t\t\t\t{employees.length > 0 && (\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/employees\"\n\t\t\t\t\t\t\t\telement={<PageEmployees employees={employees} />}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Route path=\":id\" element={<Employee />} />\n\t\t\t\t\t\t\t\t<Route path=\"info\" element={<EmployeeInfo />} />\n\t\t\t\t\t\t\t\t<Route path=\"intro\" element={<EmployeeIntro />} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{techBooks.length > 0 && (\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath=\"/techbooks\"\n\t\t\t\t\t\t\t\telement={<PageTechBooks techBooks={techBooks} />}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Route path=\":id\" element={<TechBook />} />\n\t\t\t\t\t\t\t\t<Route index element={<TechBookInfo />} />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Routes>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t---------------------------------------------------\n- **PageEmployees.jsx**\n\t---------------------------------------------\n\timport { useParams, Outlet, NavLink } from 'react-router-dom';\n\timport { Employee } from '../components/Employee';\n\n\texport const PageEmployees = ({ employees }) => {\n\t\tconst { id } = useParams();\n\t\tconst emp = employees.find((m) => String(m.employeeID) === String(id));\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>\n\t\t\t\t\tYou can get <NavLink to=\"/employees/info\">info</NavLink> or an{' '}\n\t\t\t\t\t<NavLink to=\"/employees/intro\">introduction</NavLink> about the\n\t\t\t\t\temployees.\n\t\t\t\t</p>\n\t\t\t\t<p>There are the {employees.length} employees:</p>\n\t\t\t\t{id ? (\n\t\t\t\t\t<Employee emp={emp} fullInfo={true} />\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Outlet />\n\t\t\t\t\t\t<div className=\"employees\">\n\t\t\t\t\t\t\t{employees.map((emp, i) => {\n\t\t\t\t\t\t\t\treturn <Employee key={i} emp={emp} fullInfo={false} />;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t};\n\t---------------------------------------------\n- **PageTechBooks.jsx**\n\t-----------------------------------------\n\timport { Outlet, useParams, NavLink } from 'react-router-dom';\n\n\texport const PageTechBooks = ({ techBooks }) => {\n\t\tconst { id } = useParams();\n\t\tconst techBook = techBooks.find((m) => String(m.id) === String(id));\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>\n\t\t\t\t\tThere are {techBooks.length} tech books:&nbsp;\n\t\t\t\t\t<span className=\"techBookNav\">\n\t\t\t\t\t\t{techBooks.map((book, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<span key={i}>\n\t\t\t\t\t\t\t\t\t<span className=\"title\">\n\t\t\t\t\t\t\t\t\t\t<NavLink to={`/techBooks/${book.id}`}>\n\t\t\t\t\t\t\t\t\t\t\t{book.title}\n\t\t\t\t\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{i < techBooks.length - 1 && (\n\t\t\t\t\t\t\t\t\t\t<span>,&nbsp;</span>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</span>\n\t\t\t\t</p>\n\t\t\t\t<Outlet context={techBook} />\n\t\t\t</>\n\t\t);\n\t};\t\n\t-----------------------------------------\n- **TechBook.jsx**\n\t---------------------------------------------\n\timport { NavLink, useOutletContext } from 'react-router-dom';\n\n\texport const TechBook = () => {\n\t\tconst techBook = useOutletContext();\n\t\treturn (\n\t\t\t<div className=\"techBook\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={`/images/techBooks/${techBook.idCode}.jpg`}\n\t\t\t\t\talt=\"\"\n\t\t\t\t/>\n\t\t\t\t<div className=\"details\">\n\t\t\t\t\t<div className=\"title\">{techBook.title}</div>\n\t\t\t\t\t<div className=\"description\">{techBook.description}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-26 14:10:36","systemWhoCreated":"systemUnknown"},{"id":601,"category":"React State","title":"Create React site that uses Zustand as a state manager","body":"- **What we will build**\n\t- Zustand is a new state manager that is simpler than the Redux and useContext/useReducer solutions to state management\n\t\t- Redux and useReducer, the reducer function is a pure function which cannot have side-effects\n\t\t\t- this makes it easier to test state, particularly in large, complex applications\n\t\t\t- this makes performing API calls together with state changes more complex\n\t\t- Zustand does not have the concept of reducer as pure function\n\t\t\t- therefore you can create an endless list of **actions** on one object **store** that is available everywhere in your application\n\t\t\t\t- these actions can perform both API calls and state changes\n\t\t\t- for all but the most complex applications, Zustand is a very practical solution to state management\n\t\t\t- even for complex applications, testing could be accomplished in other ways, e.g. \n\t\t\t\t- using TypeScript to guarantee type safety\n\t\t\t\t- unit testing (Jest, Vitest)\n\t\t\t\t- component testing (Enzyme, React Testing Library)\n\t\t\t\t- end-to-end testing (Cypress)\n\t\t- therefore, my advice is to use Zustand for state management in most React sites\n- **What we will use**\n\t- React \n\t- Vite \n\t- TypeScript\n\t- Zustand\n- **final site**\n\t- code for this site is here:\n\t\t- https://github.com/edwardtanguay/et005-zustand-demo-site (2022-11-17)\n\t\t- https://github.com/edwardtanguay/et006-zustand-demo-site\n\t\t- https://github.com/edwardtanguay/zustand-first-demo\n\t\t- https://github.com/edwardtanguay/et01-zustand-state-demo\n\t\t- https://github.com/edwardtanguay/et02-zustand-state-demo\n\t- the site will work like this:#gif#zustandfinished50\n- **==> STEP 1. Create React site with Vite and minimize <==**\n\t- we will be using **TypeScript** for this project\n\t- setup \n\t\t- go to your projects folder\n\t\t- `npm create vite`\n\t\t\t- give project name, e.g. `et01-zustand-state-demo`\n\t\t\t- select **react**\n\t\t\t- select **react-ts**\n\t\t- `code et01-zustand-state-demo`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- to view site click on link shown\n\t- set up local Git\n\t\t- `git init -b main`\t\n\t- minimize and add SASS\n\t\t- delete `src/assets` directory\n\t\t- delete `src/index.css` \n\t\t- `main.tsx` \n\t\t\t- delete the reference to index.css\n\t\t\t- delete React.StrictMode lines\n\t\t- empty `src/App.css`\n\t\t- convert to Sass\n\t\t\t- `npm i sass`\n\t\t\t- change all `App.css` to `App.scss`\t\t\n\t\t- reduce App.tsx\n\t\t\t--------------------------------\n\t\t\timport './App.scss';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Zustand Demo</h1>\n\t\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t--------------------------------\n\t\t- styling for `App.scss`\n\t\t\t---------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tfont-size: 1.7rem;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\n\t\t\t\tanimation: fadein .2s ease-in;\n\t\t\t}\n\n\t\t\t@keyframes fadein {\n\t\t\t\tfrom {\n\t\t\t\t\topacity: 0;\n\t\t\t\t}\n\n\t\t\t\tto {\n\t\t\t\t\topacity: 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------\n\t\t- `index.html`\n\t\t\t----------------------------------------------\n\t\t\t<title>Zustand Demo</title>\n\t\t\t<style>\n\t\t\t  body {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ccc;\n\t\t\t  }\n\t\t\t</style>\t\t\t\n\t\t\t----------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et005-zustand-demo-site/tree/10-base-site\n\t\t- site should look like this:##thenow10\n- **==> STEP 2. Create two components that share state to show the problem state management solves <==**\n\t- create state variable in parent component\n\t\t- App.tsx\n\t\t\t-------------------------------------\n\t\t\timport { useState } from 'react';\n\n\t\t\tconst [message, setMessage] = useState('');\n\n\t\t\t<main>\n\t\t\t\t<section className=\"controlArea\">\n\t\t\t\t\t<div className=\"data\">\n\t\t\t\t\t\t<label>Message:</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={message}\n\t\t\t\t\t\t\tonChange={(e) => setMessage(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tTEST: {message}\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\t\n\t\t\t-------------------------------------\n\t\t- let's just copy in the final styles now so we can concentrate on the Zustand state management code\n\t\t- App.scss\n\t\t\t-------------------------------------\n\t\t\t$dataColor: yellow;\n\n\t\t\tbody {\n\t\t\t\tcolor: #ccc;\n\t\t\t\tbackground-color: #333;\n\t\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\t\t\t\tfont-size: 1.5rem;\n\n\t\t\t\th2 {\n\t\t\t\t\tcolor: rgb(94, 116, 217);\n\t\t\t\t}\t\t\t\n\n\t\t\t\t.App {\n\n\t\t\t\t\tmain {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tgap: 1rem;\n\n\t\t\t\t\t\tsection.controlArea {\n\t\t\t\t\t\t\twidth: 30rem;\n\n\t\t\t\t\t\t\th1 {\n\t\t\t\t\t\t\t\tmargin: 0 0 1rem 0;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdiv.data {\n\t\t\t\t\t\t\t\tbackground-color: #434343;\n\t\t\t\t\t\t\t\tmargin: 0 0 1rem 0;\n\t\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\t\tborder-radius: .5rem;\n\n\t\t\t\t\t\t\t\tlabel {\n\t\t\t\t\t\t\t\t\tmargin: 0 0 .5rem 0;\n\t\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tinput {\n\t\t\t\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\tmargin: 0 .2rem .2rem 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsection.dataArea {\n\t\t\t\t\t\t\th2 {\n\t\t\t\t\t\t\t\tmargin: 0 0 1rem 0;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.infoBox {\n\t\t\t\t\t\t\t\tbackground-color: #777;\n\t\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\t\twidth: 28rem;\n\t\t\t\t\t\t\t\tborder-radius: 1rem;\n\t\t\t\t\t\t\t\tcolor: #222;\n\n\t\t\t\t\t\t\t\tlabel {\n\t\t\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t.theValue {\n\t\t\t\t\t\t\t\t\tcolor: $dataColor;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdiv.row {\n\t\t\t\t\t\t\t\t\tmargin: 0 0 .5rem 0;\n\n\t\t\t\t\t\t\t\t\tul {\n\t\t\t\t\t\t\t\t\t\tmargin: .5rem 0 0 -.5rem;\n\n\t\t\t\t\t\t\t\t\t\tli {\n\t\t\t\t\t\t\t\t\t\t\tcolor: $dataColor;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t.spinner {\n\t\t\t\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t\t\t\t\tcolor: #444;\n\t\t\t\t\t\t\t\t\t\tanimation: spin infinite 2s linear;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@keyframes spin {\n\t\t\t\t\t\t\t\t\t\tfrom {\n\t\t\t\t\t\t\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tto {\n\t\t\t\t\t\t\t\t\t\t\ttransform: rotate(360deg);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------\n\t\t- you see that state is easily reflected on the page in its own component##thestateinfocomp\n\t- but if we have another component that needs to show or manage this same state, we are forced to pass the state to these components via props\n\t\t- App.tsx\n\t\t\t-------------------------------------\n\t\t\timport { InfoBox } from './components/InfoBox';\n\n\t\t\t<section className=\"dataArea\">\n\t\t\t\t<InfoBox message={message} />\n\t\t\t</section>\n\t\t\t-------------------------------------\n\t\t- InfoBox.tsx\n\t\t\t-----------------------------------\n\t\t\tinterface IInfoBoxProps {\n\t\t\t\tmessage: string;\n\t\t\t}\n\t\t\texport const InfoBox = (props: IInfoBoxProps) => {\n\t\t\t\tconst { message } = props;\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"infoBox\">\n\t\t\t\t\t\t<h2>Another component:</h2>\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Message:</label>{' '}\n\t\t\t\t\t\t\t<span className=\"theValue\">{message}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------\n\t- but as our application grows, sharing state via props is going to produce unnecessary complexity\n\t- therefore we need a state management solution such as Redux or useContext/useReducer, but Zustand solves this problem for most sized applications in a much simpler way\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et005-zustand-demo-site/tree/20-show-reason-for-zustand\n\t\t- site should look like this:##dotheshareok\n- **==> STEP 3. Replace prop-sharing with Zustand <==**\n\t- `npm i zustand`\n\t- create the central Zustand store where all application state will reside:\n\t\t- **src/store.tsx**\n\t\t\t------------------------------------\n\t\t\timport create from 'zustand';\n\n\t\t\tinterface IStore {\n\t\t\t\tmessage: string;\n\t\t\t\tsetMessage: (message: string) => void;\n\t\t\t}\n\n\t\t\texport const useStore = create<IStore>(\n\t\t\t\t(set): IStore => ({\n\t\t\t\t\tmessage: 'test',\n\t\t\t\t\tsetMessage: (message: string) =>\n\t\t\t\t\t\tset((state) => ({ ...state, message })),\n\t\t\t\t})\n\t\t\t);\t\t\n\t\t\t------------------------------------\n\t- in **App.tsx**, replace useState with Zustand\n\t\t-------------------------------\n\t\timport { useStore } from './store';\n\n\t\tconst store = useStore((state) => state);\n\n\t\t<input\n\t\t\tautoFocus\n\t\t\ttype=\"text\"\n\t\t\tvalue={store.message}\n\t\t\tonChange={(e) => store.setMessage(e.target.value)}\n\t\t/>\n\n\t\t<InfoBox/>\n\t\t-------------------------------\n\t- in **InfoBox.tsx**, replace props with Zustand\n\t\t---------------------------------------\n\t\timport { useStore } from '../store';\n\n\t\tconst store = useStore((state) => state);\n\n\t\t<span className=\"theValue\">{store.message}</span>\n\t\t---------------------------------------\n\t- our app works the same way as before but without having to pass props\n\t- note that Zustand is simply a hook so **we don't need to implement a provider** in main.tsx as we have to do with **useContext** and **Redux**\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et005-zustand-demo-site/tree/30-prop-sharing-with-zustand\n\t\t- site should look like this:##the30noskj\n- **==> STEP 4. implement other kinds of state variables <==**\n\t- we now have an example of a string state variable\n\t- let's make some examples of other type of state variables\n\t- **array of strings**\n\t\t- **store.tsx**\n\t\t\t-----------------------------------------\n\t\t\tcolors: string[];\n\t\t\tsetColors: (colors: string[]) => void;\n\t\t\taddColor: (color: string) => void;\n\t\t\tdeleteColor: () => void;\n\n\t\t\tcolors: ['blue', 'white', 'red'],\n\t\t\tsetColors: (colors: string[]) => set((state) => ({ ...state, colors })),\n\t\t\taddColor: (color: string) =>\n\t\t\t\tset((state) => ({ ...state, colors: [...state.colors, color] })),\n\t\t\tdeleteColor: () =>\n\t\t\t\tset((state) => ({ ...state, colors: state.colors.slice(0, -1) })),\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\n\t\t\t<div className=\"data\">\n\t\t\t\t<label>Colors:</label>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={() => store.addColor('blue')}>\n\t\t\t\t\t\tblue\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => store.addColor('red')}>\n\t\t\t\t\t\tred\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={() => store.addColor('yellow')}>\n\t\t\t\t\t\tyellow\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<button onClick={() => store.deleteColor()}>\n\t\t\t\t\tdelete color\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => store.setColors([])}>\n\t\t\t\t\tdelete all colors\n\t\t\t\t</button>\n\t\t\t</div>\t\t\t\n\t\t\t----------------------------------------\n\t\t- **InfoBox.tsx**\n\t\t\t--------------------------------------\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>Colors:</label>{' '}\n\t\t\t\t<span className=\"theValue\">\n\t\t\t\t\t{store.colors.map((m) => m).join(', ')}\n\t\t\t\t</span>\n\t\t\t</div>\t\t\t\n\t\t\t--------------------------------------\n\t- **change multiple state values with one action**\n\t\t- **store.tsx**\n\t\t\t-----------------------------------------\n\t\t\tdeleteVowelsAndColorRed: () => void;\n\n\t\t\tdeleteVowelsAndColorRed: () =>\n\t\t\t\tset((state) => {\n\t\t\t\t\tconst _state = { ...state };\n\t\t\t\t\t_state.message = _state.message.replace(/[aeiou]/gi, '');\n\t\t\t\t\t_state.colors = _state.colors.filter((m) => m !== 'red');\n\t\t\t\t\treturn _state;\n\t\t\t\t}),\n\t\t\t-----------------------------------------\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\n\t\t\t<div className=\"data\">\n\t\t\t\t<label>Change multiple values:</label>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => store.deleteVowelsAndColorRed()}\n\t\t\t\t\t>\n\t\t\t\t\t\tdelete vowels from message and color red from\n\t\t\t\t\t\tcolors\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t----------------------------------------\n\t- **objects**\n\t\t- **store.tsx**\n\t\t\t-----------------------------------------\n\t\t\tcurrentUserStatus: {\n\t\t\t\tisOnline: boolean;\n\t\t\t\temailIsConfirmed: boolean;\n\t\t\t};\t\t\t\n\t\t\ttoggleCurrentUserStatusOnline: () => void;\n\t\t\ttoggleCurrentUserStatusEmail: () => void;\n\n\t\t\tcurrentUserStatus: {\n\t\t\t\tisOnline: false,\n\t\t\t\temailIsConfirmed: true,\n\t\t\t},\n\t\t\ttoggleCurrentUserStatusOnline: () =>\n\t\t\t\tset((state) => {\n\t\t\t\t\tconst _state = { ...state };\n\t\t\t\t\t_state.currentUserStatus.isOnline =\n\t\t\t\t\t\t!_state.currentUserStatus.isOnline;\n\t\t\t\t\treturn _state;\n\t\t\t\t}),\n\t\t\ttoggleCurrentUserStatusEmail: () =>\n\t\t\t\tset((state) => {\n\t\t\t\t\tconst _state = { ...state };\n\t\t\t\t\t_state.currentUserStatus.emailIsConfirmed =\n\t\t\t\t\t\t!_state.currentUserStatus.emailIsConfirmed;\n\t\t\t\t\treturn _state;\n\t\t\t\t}),\t\n\t\t\t-----------------------------------------\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\n\t\t\t<div className=\"data\">\n\t\t\t\t<label>Object:</label>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tstore.toggleCurrentUserStatusOnline()\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\ttoggle online status\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tstore.toggleCurrentUserStatusEmail()\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\ttoggle email status\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t----------------------------------------\n\t\t- **InfoBox.tsx**\n\t\t\t--------------------------------------\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>User is online:</label>{' '}\n\t\t\t\t<span className=\"theValue\">\n\t\t\t\t\t{store.currentUserStatus.isOnline ? 'yes' : 'no'}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>User's email is valid:</label>{' '}\n\t\t\t\t<span className=\"theValue\">\n\t\t\t\t\t{store.currentUserStatus.emailIsConfirmed ? 'yes' : 'no'}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t--------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et005-zustand-demo-site/tree/40-implement-more-variables\n\t\t- site should look like this:##the40withallvars\n- **==> STEP 5. implement an API call in the Zustand store <==**\n\t- one advantage of Zustand is that you can implement API calls in your store which e.g. change state accordingly based on the async response from the API call\n\t\t- `npm i axios`\n\t\t- `npm i react-icons`\n\t\t- **store.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\texport interface ITechBook {\n\t\t\t\tidCode: string;\n\t\t\t\ttitle: string;\n\t\t\t\tdescription: string;\n\t\t\t\tlanguage: string;\n\t\t\t}\n\n\t\t\ttechBooks: ITechBook[];\n\t\t\tloadTechBooks: () => void;\n\t\t\ttechBooksAreLoading: boolean;\n\t\t\ttechBookSearch: string;\n\t\t\tsetTechBookSearch: (message: string) => void;\n\n\t\t\ttechBooks: [],\n\t\t\tloadTechBooks: () => {\n\t\t\t\tset((state) => {\n\t\t\t\t\tconst _state = { ...state };\n\t\t\t\t\t_state.techBooksAreLoading = true;\n\t\t\t\t\treturn _state;\n\t\t\t\t});\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tconst rawTechBooks = (\n\t\t\t\t\t\tawait axios.get(\n\t\t\t\t\t\t\t'https://edwardtanguay.vercel.app/share/techBooks.json'\n\t\t\t\t\t\t)\n\t\t\t\t\t).data;\n\t\t\t\t\tconst _techBooks: ITechBook[] = [];\n\t\t\t\t\trawTechBooks.forEach((rawTechBook: any) => {\n\t\t\t\t\t\tconst techBook: ITechBook = {\n\t\t\t\t\t\t\tidCode: rawTechBook.idCode,\n\t\t\t\t\t\t\ttitle: rawTechBook.title,\n\t\t\t\t\t\t\tdescription: rawTechBook.description,\n\t\t\t\t\t\t\tlanguage: rawTechBook.language,\n\t\t\t\t\t\t};\n\t\t\t\t\t\t_techBooks.push(techBook);\n\t\t\t\t\t});\n\t\t\t\t\tset((state) => {\n\t\t\t\t\t\tconst _state = { ...state };\n\t\t\t\t\t\t_state.techBooks = _techBooks;\n\t\t\t\t\t\t_state.techBooksAreLoading = false;\n\t\t\t\t\t\treturn _state;\n\t\t\t\t\t});\n\t\t\t\t}, 2000); // emulate long loading time\n\t\t\t},\n\t\t\ttechBooksAreLoading: false,\n\t\t\ttechBookSearch: '',\n\t\t\tsetTechBookSearch: (techBookSearch: string) =>\n\t\t\t\tset((state) => ({ ...state, techBookSearch: techBookSearch })),\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\t\n\t\t\timport { useRef, useEffect } from 'react';\n\n\t\t\tconst techBookSearchRef = useRef<HTMLInputElement>(null);\n\n\t\t\tuseEffect(() => {\n\t\t\t\tif (techBookSearchRef.current !== null) {\n\t\t\t\t\ttechBookSearchRef.current.focus();\n\t\t\t\t}\n\t\t\t}, [store.techBooks]);\t\t\t\n\n\t\t\t{store.techBooks.length === 0 && (\n\t\t\t\t<div className=\"data\">\n\t\t\t\t\t<label>Load data</label>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tdisabled={store.techBooksAreLoading}\n\t\t\t\t\t\t\tonClick={() => store.loadTechBooks()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tload tech books\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{store.techBooks.length > 0 && (\n\t\t\t\t<div className=\"data\">\n\t\t\t\t\t<label>Search tech books:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tref={techBookSearchRef}\n\t\t\t\t\t\tvalue={store.techBookSearch}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\tstore.setTechBookSearch(e.target.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t----------------------------------------\n\t\t- **InfoBox.tsx**\n\t\t\t--------------------------------------\n\t\t\timport { FaSpinner } from 'react-icons/fa';\n\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>TechBooks:</label>\n\t\t\t\t{store.techBooksAreLoading && (\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<FaSpinner className=\"spinner\" />\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t\t<ul>\n\t\t\t\t\t{store.techBooks.map((techBook, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={i}>\n\t\t\t\t\t\t\t\t{techBook.title.toLowerCase().includes(\n\t\t\t\t\t\t\t\t\tstore.techBookSearch.toLowerCase()\n\t\t\t\t\t\t\t\t) && <li key={i}>{techBook.title}</li>}\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t--------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et005-zustand-demo-site/tree/50-with-api-call\n\t\t- site should look like this:#gif#zustandfinished50","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-30 06:40:22","systemWhoCreated":"systemUnknown"},{"id":602,"category":"GraphQL","title":"Build TypeScript backend REST API and GraphQL server and frontend TypeScript React site to fetch and display data from backend","body":"- **What we will make**\n\t- backend Node/Express server that serves an array of employee objects via both GraphQL and REST API\n\t- we will show how REST can require you to get all objects even if you want to display a few fields from the objects\n\t- GraphQL enables much more fine-grained fetching from the frontend\n- **How we will make it**\n\t- first build backend and test with GraphiQL\n\t\t- backend will also serve REST API as well\n\t\t- the data we will serve will be this array of employee objects:\n\t\t\t- https://edwardtanguay.netlify.app/share/employees.json\n\t- then build Vite frontend to consume this site\n- **What we will use**\n\t- backend\n\t\t- Node/Express\n\t\t- GraphQL\n\t\t- REST\n\t\t- TypeScript\n\t\t- express-graphql, graphql\n\t\t- cors\n\t- frontend\n\t\t- Vite\n\t\t- TypeScript\n\t\t- axios\n\t\t- @apollo/client, graphql\n- **Useful code for this project is here:**\n\t- proof-of-concept projects are here:\n\t\t- backend: https://github.com/edwardtanguay/et01-graphql-api-backend/blob/works-with-timeout/server.js\n\t\t- frontend: https://github.com/edwardtanguay/et01-graphql-api-frontend/blob/with-slow-employees-timeout-works/src/App.tsx\n\t- finished code here:\n\t\t- backend: https://github.com/edwardtanguay/et03-graphql-api-backend\n\t\t- frontend: https://github.com/edwardtanguay/et03-graphql-api-frontend\n- when finished the site will look this this: ##graphqlhowtofinished\n- **1. set up backend**\n\t- in project folder terminal\n\t- e.g. `mkdir et03-graphql-api-backend`\n\t- `code et03-graphql-api-backend`\n\t- `npm init -y`\n\t- `npm i nodemon -D`\n\t- **1.1. set up and test TypeScript**\n\t\t- `npm i typescript ts-node`\n\t\t- in **package.json** indicate that we want to use ES6 modules\n\t\t\t-----------------------------\n\t\t\t\"type\": \"module\",\t\n\t\t\t-----------------------------\n\t\t- in **package.json** create npm run dev script\n\t\t\t--------------------------------\t\t\t\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon\"\n\t\t\t},\n\t\t\t--------------------------------\n\t\t- create **nodemon.json** file which tells nodemon to watch all directories for changes in TypeScript files (`.ts`) and transpile them to JavaScript using the ECMAScript Module version (esm) of ts-node (ts-node-esm)\n\t\t\t------------------------------------------\n\t\t\t{\n\t\t\t\t\"watch\": [\"\"],\n\t\t\t\t\"ext\": \"ts\",\n\t\t\t\t\"exec\": \"./node_modules/.bin/ts-node-esm src/server.ts\"\n\t\t\t}\n\t\t\t------------------------------------------\n\t\t- create **server.ts** with TypeScript test \n\t\t\t-----------------------------------\n\t\t\tinterface ITest {\n\t\t\t\tmessage: string;\n\t\t\t}\n\n\t\t\tconst test: ITest = {\n\t\t\t\tmessage: \"this is a test\"\n\t\t\t}\n\n\t\t\tconsole.log(test);\n\t\t\t-----------------------------------\n\t\t- create **tsconfig.json**\n\t\t\t-------------------------------------\n\t\t\t{\n\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\"target\": \"es6\",\n\t\t\t\t\t\"allowSyntheticDefaultImports\": true,\n\t\t\t\t\t\"moduleResolution\": \"node\",\n\t\t\t\t\t\"module\": \"esnext\"\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------\n\t\t- `npm run dev`\n\t\t\t- note that if you break the interface etc., TypeScript will show you an error in VSCode and when nodemon compiles\n\t- **1.2. set up classic REST API with endpoint `/` \n\t\t- `npm i express`\n\t\t- `npm i @types/express`\n\t\t- **server.js**\n\t\t\t---------------------------------------------\n\t\t\tconst exports = {};\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst PORT = 5424;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('REST API and GraphQL Demo Backend');\n\t\t\t})\n\n\t\t\tapp.listen(PORT, () => {\n\t\t\t\tconsole.log(`REST API listening on http://localhost:${PORT}`);\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------------\n\t- **1.3. set up REST API endpoint `/employees`**\n\t\t- `npm i axios`\n\t\t- **server.ts**\n\t\t\t--------------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\tconst employeesUrl = 'https://edwardtanguay.netlify.app/share/employees.json';\n\n\t\t\tapp.get('/employees', async (req, res) => {\n\t\t\t\tconst employees = ((await axios.get(employeesUrl)).data);\n\t\t\t\tres.send(employees);\n\t\t\t});\n\n\t\t\tconsole.log(`REST API employees endpoint: http://localhost:${PORT}/employees`);\n\t\t\t--------------------------------------\n\t- **1.4. set up GraphQL to serve data at GraphiQL interface**\n\t\t- `npm i graphql express-graphql cors`\n\t\t- create **src/schema.js** (not `.ts` because it will be exported at run time)\n\t\t\t------------------------------\n\t\t\timport { buildSchema } from 'graphql';\n\n\t\t\texport const schema = buildSchema(`\n\t\t\t\ttype Query {\n\t\t\t\t\tmessage: String\n\t\t\t\t}\n\t\t\t`);\t\t\t\n\t\t\t------------------------------\n\t\t- **server.ts** \n\t\t\t-----------------------------------------------------\n\t\t\timport { graphqlHTTP } from 'express-graphql';\n\t\t\timport cors from 'cors';\n\t\t\timport { schema } from './schema.js';\t\t\t\n\n\t\t\tapp.use(cors());\n\n\t\t\tconst root = {\n\t\t\t\tmessage: () => {\n\t\t\t\t\treturn 'this is the message';\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tapp.use(\n\t\t\t\t'/graphql',\n\t\t\t\tgraphqlHTTP({\n\t\t\t\t\tschema,\n\t\t\t\t\trootValue: root,\n\t\t\t\t\tgraphiql: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\t-----------------------------------------------------\n\t\t- add to GraphQL \"departments\" as array of strings\n\t\t\t- **schema.ts**\n\t\t\t\t------------------------------------\n\t\t\t\ttype Query {\n\t\t\t\t\tmessage: String\n\t\t\t\t\tdepartments: [String]\n\t\t\t\t}\n\t\t\t\t------------------------------------\n\t\t\t- in **server.ts** \n\t\t\t\t-----------------------------------\n\t\t\t\tconst root = {\n\t\t\t\t\tmessage: () => {\n\t\t\t\t\t\treturn 'This is a test message.';\n\t\t\t\t\t},\n\t\t\t\t\tdepartments: () => {\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\"Sales\",\n\t\t\t\t\t\t\t\"Marketing\",\n\t\t\t\t\t\t\t\"Development\",\n\t\t\t\t\t\t\t\"Executive\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t-----------------------------------\n\t\t\t- check GraphiQL:##showgraphiaqlnnn\n\t\t- add to GraphQL \"employees\" with schema and mock data\n\t\t\t- **schema.ts**\n\t\t\t\t------------------------------------\n\t\t\t\ttype Query {\n\t\t\t\t\tmessage: String\n\t\t\t\t\tdepartments: [String]\n\t\t\t\t\temployees: [Employee]\n\t\t\t\t}\n\n\t\t\t\ttype Employee {\n\t\t\t\t\tfirstName: String\n\t\t\t\t\tlastName: String\n\t\t\t\t\tterritoryIDs: [Int]\n\t\t\t\t}\n\t\t\t\t------------------------------------\n\t\t\t- in **server.ts**, add a mock employee\n\t\t\t\t-----------------------------------\n\t\t\t\temployees: () => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstName: 'fff',\n\t\t\t\t\t\t\tlastName: 'lll',\n\t\t\t\t\t\t\tterritoryIDs: [234,523,523]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t-----------------------------------\n\t\t\t- check GraphiQL:##graphiqlemployeechecknn\n\t\t- change mock data to array of employees from API\n\t\t\t- **server.ts**\n\t\t\t\t-------------------------------------------------\n\t\t\t\temployees: async () => {\n\t\t\t\t\tconst employees = ((await axios.get(employeesUrl)).data);\n\t\t\t\t\treturn employees;\n\t\t\t\t}\n\t\t\t\t-------------------------------------------------\n\t\t\t- check GraphiQL:##graphiqlemployeewithapi\n- **2. set up frontend React site with TypeScript using Vite**\n\t- **1.2. Set up minimal TypeScript React site with Vite\n\t\t- setup \n\t\t\t- go to your projects folder\n\t\t\t- `npm create vite`\n\t\t\t\t- give project name, e.g. `et03-graphql-api-frontend`\n\t\t\t\t- select **react**\n\t\t\t\t- select **react-ts**\n\t\t\t- `code et03-graphql-api-frontend`\n\t\t\t- `npm i`\n\t\t\t- `npm run dev`\n\t\t\t- to view site click on link shown, e.g. `http://localhost:5173`\n\t\t- set up local Git\n\t\t\t- `git init -b main`\t\n\t\t\t- commit as \"initial commit\"\n\t\t- minimize and add SASS\n\t\t\t- delete `src/assets` directory\n\t\t\t- delete `src/index.css` \n\t\t\t- `main.tsx` \n\t\t\t\t- delete the reference to index.css\n\t\t\t\t- delete React.StrictMode lines\n\t\t\t- empty `src/App.css`\n\t\t\t- convert to Sass\n\t\t\t\t- `npm i sass`\n\t\t\t\t- change all `App.css` to `App.scss`\t\t\n\t\t\t- reduce App.tsx\n\t\t\t\t--------------------------------\n\t\t\t\timport './App.scss';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>GraphQL Demo</h1>\n\t\t\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\texport default App;\n\t\t\t\t--------------------------------\n\t\t\t- styling for `App.scss`\n\t\t\t\t---------------------------\n\t\t\t\tbody {\n\t\t\t\t\tbackground-color: #444;\n\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t\tpadding: 1rem;\n\n\t\t\t\t\th1 {\n\t\t\t\t\t\tfont-size: 1.7rem;\n\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tanimation: fadein .2s ease-in;\n\t\t\t\t}\n\n\t\t\t\t@keyframes fadein {\n\t\t\t\t\tfrom {\n\t\t\t\t\t\topacity: 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tto {\n\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t---------------------------\n\t\t\t- `index.html`\n\t\t\t\t----------------------------------------------\n\t\t\t\t<title>GraphQL Demo</title>\n\t\t\t\t<style>\n\t\t\t\t  body {\n\t\t\t\t\tbackground-color: #444;\n\t\t\t\t\tcolor: #ccc;\n\t\t\t\t  }\n\t\t\t\t</style>\t\t\t\n\t\t\t\t----------------------------------------------\n\t\t- your base site should look something like this:##basesiteqgqpah\t\n\t- **2.2. Fetch REST API data with axios and display**\n\t\t- `npm i axios`\n\t\t- **App.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\tconst backendEmployeesUrl = 'http://localhost:5424/employees';\n\n\t\t\tinterface IEmployee {\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\tterritoryIDs: number[];\n\t\t\t}\n\n\t\t\tconst [employees, setEmployees] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetEmployees((await axios.get(backendEmployeesUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\t<h2>Data from REST API</h2>\n\t\t\t<h3>There are {employees.length} employees</h3>\n\t\t\t<ul>\n\t\t\t\t{employees.map((emp: IEmployee, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={i}>\n\t\t\t\t\t\t\t{emp.firstName} {emp.lastName}\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t<li className=\"data\">\n\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\tterritories: {emp.territoryIDs.join(', ')}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ul>\t\t\t\n\t\t\t----------------------------------------------\n\t\t- site should look like this:##sitelookapirestssj\n\t- **2.3. Fetch GraphQL data with graphql and display message**\n\t\t- `npm i @apollo/client graphql`\n\t\t- **main.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\n\n\t\t\tconst client = new ApolloClient({\n\t\t\t\turi: 'http://localhost:5424/graphql',\n\t\t\t\tcache: new InMemoryCache(),\n\t\t\t});\n\n\t\t\t<ApolloProvider client={client}>\n\t\t\t\t<App />\n\t\t\t</ApolloProvider>\n\t\t\t----------------------------------------------\n\t\t- **App.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { useQuery, gql } from '@apollo/client';\n\n\t\t\tconst QUERY = gql`\n\t\t\t\t{\n\t\t\t\t\tmessage\n\t\t\t\t}\n\t\t\t`;\n\n\t\t\tconst { loading, data } = useQuery(QUERY);\n\n\t\t\t<h1>GraphQL and REST Demo</h1>\n\t\t\t<h2>Data from GraphQL API</h2>\n\t\t\t{!loading && <p>{data.message}</p>}\n\t\t\t-----------------------------------------\n\t\t- site should look like this:##messageqgrapulaskdj\n\t- **2.4. Fetch GraphQL data \"departments\"**\n\t\t- **server.ts**\n\t\t\t---------------------------------\n\t\t\tconst QUERY = gql`\n\t\t\t\t{\n\t\t\t\t\tmessage\n\t\t\t\t\tdepartments\n\t\t\t\t}\n\t\t\t`;\t\t\n\n\t\t\t{!loading && (\n\t\t\t\t<div>\n\t\t\t\t\t<div>Message: <span className=\"data\">{data.message}</span></div>\n\t\t\t\t\t<div>Departments: <span className=\"data\">{data.departments.join(', ')}</span></div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t---------------------------------\n\t- **2.5 Fetch GraphQL data \"employees\"**\n\t\t- backend: **server.ts**, make it so REST and GraphQL return different data\n\t\t\t------------------------------------------\n\t\t\tapp.get('/employees', async (req, res) => {\n\t\t\t\tconst employees = ((await axios.get(employeesUrl)).data);\n\t\t\t\tres.send(employees.filter((m:any) => m.employeeID <= 5));\n\t\t\t});\t\t\t\n\n\t\t\temployees: async () => {\n\t\t\t\tconst employees = ((await axios.get(employeesUrl)).data);\n\t\t\t\treturn employees.filter((m:any) => m.employeeID > 5);\n\t\t\t}\n\t\t\t------------------------------------------\n\t\t- frontend: **App.tsx**\n\t\t\t------------------------------------------------\n\t\t\tconst QUERY = gql`\n\t\t\t\t{\n\t\t\t\t\tmessage\n\t\t\t\t\tdepartments\n\t\t\t\t\temployees {\n\t\t\t\t\t\tfirstName\n\t\t\t\t\t\tlastName\n\t\t\t\t\t\tterritoryIDs\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`;\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t{!loading && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<h1>GraphQL and REST Demo</h1>\n\t\t\t\t\t\t\t<h2>Data from GraphQL API</h2>\n\t\t\t\t\t\t\t<div className=\"employees\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\tMessage:{' '}\n\t\t\t\t\t\t\t\t\t<span className=\"data\">{data.message}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\tDepartments:{' '}\n\t\t\t\t\t\t\t\t\t<span className=\"data\">\n\t\t\t\t\t\t\t\t\t\t{data.departments.join(', ')}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<h3>There are {data.employees.length} employees</h3>\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t{data.employees.map((emp: IEmployee, i: number) => {\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<li key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t{emp.firstName} {emp.lastName}\n\t\t\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"data\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tterritories:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{emp.territoryIDs.join(', ')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h2>Data from REST API</h2>\n\t\t\t\t\t\t\t<h3>There are {employees.length} employees</h3>\n\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t{employees.map((emp: IEmployee, i) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<li key={i}>\n\t\t\t\t\t\t\t\t\t\t\t{emp.firstName} {emp.lastName}\n\t\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"data\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\tterritories:{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{emp.territoryIDs.join(', ')}\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t\t------------------------------------------------\n\t\t- frontend: **App.scss**\n\t\t\t-----------------------------------------\n\t\t\t.employees {\n\t\t\t\tdiv {\n\t\t\t\t\theight: 1.5rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t-----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-08-31 06:50:35","systemWhoCreated":"systemUnknown"},{"id":603,"category":"Hetzner","title":"Set up a Debian machine at Hetzner","body":"- **What we will do**\n\t- we will set up a Debian machine at Hetzner e.g. in order to run frontends and backends at a domain name\n\t- the machine will cost **3.92€ per month**\n\t- you pay by the hour, so **you can set one up for practice**, delete it and pay only e.g. 12 cents for 2 hours\n- **set up machine**\n\t- log into your Hetzner account: https://accounts.hetzner.com/login\n\t- click on the [New Project] button##thenewprojsadclick\n\t- you may have to verify your account, e.g.##youmaypass\t\n\t- call your project e.g. **main**##goveaname\n\t- click on button##theserversdod\n\t- choose Nürnberg, Debian, Standard, and CX11\n\t\t- this is the least expensive machine, you can upgrade later at any time\n\t- leave all other settings as default, e.g. we can set up a firewall later\n\t- however, do **set up an SSH-Key** which is secure practice and in Hetzner's case, setting up a SSH-key will ensure that you do not receive a root password via e-mail\n\t\t- make directory for local login, e.g. in `c:/hetzner`\n\t\t\t- in that directory, type the command e.g. `ssh-keygen -f windowskey001 -t ecdsa` (`windowskey001` should identify your local machine)\n\t\t\t- for passphrase, type a simple, easy-to-remember pin such as `1988`\n\t\t\t\t- the SSH will allow you to automatically log in from your local computer\n\t\t\t\t- your account is still protected by password\n\t\t\t\t- the pin is just for the unlikely case someone gets access to your local computer, they still wouldn't know the pin\n\t\t\t\t- the root login to your Hetzner machine is by default not allowed to be accessed via remote login, only from the Hetzner website console\n\t\t\t\t- so this is a quite secure setup for your cloud machine\n\t\t\t- this will create two files on your machine##thewtwofiles\n\t\t\t- open `windowskey001.pub` and copy contents\n\t\t\t- back at the Hetzner website, click the area to creaet a SSH-key##clickthssssheehj\n\t\t\t- paste the contents of into the box, change the name to windowskey001, and click as standard (for when you create other machines), and click the button##thesshkeyinto\n\t- rename the machine to e.g. **debian-001**\n\t- click \"Kostenpflichtig erstellen\"\n- **log in as root**\n\t- because we set up an SSH-key during creation of our machine, Hetzner didn't send us a root password via e-mail, which one should avoid\n\t- to get the root password now so we can log in as root to create our first user, we need to reset the password in order to see what it is\n\t- click on machine\n\t- [RESCUE]\n\t- click the [ROOT-PASSWORT ZURÜCKSETZEN] buton##doclickthereset\n\t- copy and save the root password in e.g. your keepass\n\t- note that from your local terminal, you can try to log in as root, but **as a security measure**, it won't let you:##permssspleasetry\n\t- you can only log in as host via the Hetzner console##theckonsole\n\t- with the generated password that you saved earlier, you can log in as root##andnowloggggg\n- **create main user**\n\t- you normally don't want or need to login as root user on Linux\n\t\t- we need to do it now in order to create our first user which will have sudo rights\n\t\t- having sudo rights means the user can temporarily have root rights\n\t- so we will now create a main user which you will use to regularly access and manage your machine\n\t- as root, create a main user (e.g. your name) like this:\n\t\t- `useradd -m edward` \n\t\t\t- (`-m` creates a home directory)\n\t\t- `passwd edward`\n\t\t- `usermod -aG sudo edward` \n\t\t\t- (`-aG sudo` adds user to the group which can execute sudo commands)\n\t- exit as root with `exit`\n\t- test to see in the console if you can log in and out as your main user\n\t\t- remember, to log out, type `exit`\n- **on local machine log in via SSH **\n\t- now from terminal on your local machine, log in via SSH as the user you just created\n\t- note you can already log in via password, e.g. `ssh edward@195.201.25.54`\n\t\t- (get the IP address of your machine from the Hetzner page that lists your machines)##notetologinok22\n\t- but we want to make it easier to log in via ssh\n\t- so set up SSH for that user: `ssh-copy-id -i windowskey001 edward@195.201.25.54`\t\n\t- you can now log in with command: `ssh -i windowskey001 edward@195.201.25.54`:\n\t- make file called e.g. `d1` (short for debian-001) with one line: `ssh -i windowskey001 edward@195.201.25.54`\n\t- now to log in with SSH:\n\t\t- go to `hetzner` directory in terminal \n\t\t- `./d1`\n\t\t- enter passphrase\n\t- note if your local machine is Linux, then\n\t\t- in your home directory, create `.bash_aliases` with this line:\n\t\t\t-----------------------------------------\n\t\t\talias d1='ssh -i ubuntukey001 edward@195.201.25.54'\n\t\t\t-----------------------------------------\n\t\t- then: `source ~/.bash_aliases`\n\t\t- now to log into your Hetzner machine, simply type: `d1`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-07 12:22:14","systemWhoCreated":"systemUnknown"},{"id":604,"category":"Hetzner","title":"Set up an Arch Linux machine at Hetzner","body":"- **What we will do**\n\t- the end goal of this howto is to set up a machine on Hetzner that runs **Arch Linux**\n\t- the machine will cost **3.92€ per month** with minimum features\n\t\t- you can scale up at any time, e.g. add CPUs or GigiBytes to your SSD or RAM\n\t- you pay by the hour, so **you can set this machines up to practice**, then shut it back off and pay e.g. 12 cents for the 2 hours of having it on\n\t- note that Arch Linux isn't an official choice at Heztner \n\t\t- but there is a way you can install it by choosing e.g. Ubuntu first, then going through a rescue process and reinstalling the machine as Arch Linux\n\t\t- the only disadvantage I have seen from this is that for some reason the \"rescued machine\" does not have a \"guest agent\" installed and therefore cannot reset the root password if you need to\n\t\t- just be sure to save the root password that is provided to you when you start the rescue process\n\t\t\t- and of course create a sudo user so you don't have to log in as root anymore\n- **How we will do it**\n\t- so we will first set up an **Ubuntu machine**\n\t- then \"rescue\" it and in so doing reinstall it as an Arch Linux machine\n- **set up Ubuntu machine**\n\t- log into your Hetzner account: https://accounts.hetzner.com/login\n\t- click [New Project]##donewpro\n\t- if your account is new, you may have to verify it, e.g.##youmaypass\t\n\t- call your project e.g. **main**##goveaname\n\t- NOTE: if you already have machines, go to your projects page and click on a project where you want your machine: https://console.hetzner.cloud/projects\n\t- click on [Add Server] button##theserversdod\n\t- choose e.g. **Nürnberg, Ubuntu, Standard, and CX11**\n\t- leave all other settings (Volume, Networking, etc.) as default, we can set up a firewall later\n\t- also leave the SSH-key empty for now\n\t\t- we can set that up after the machine is running if we like\n\t- rename the machine to e.g. **archlinux-007**\n\t- click \"Kostenpflichtig erstellen\"\n- **convert Ubuntu machine to Arch Linux**\n\t- click on the Ubuntu machine you just created\n\t- [RESCUE]\n\t- [RESCUE AKTIVIEREN & RESET]##therescuses\n\t- choose **linux64**, select your SSH key, and click [RESCUE AKTIVIEREN & RESET] button##thenossh64\n\t- **IMPORTANT:** copy and save root password that is provided to you, e.g. into your keepass\n\t\t- you will not be able to retrieve or change this root password again##thepasswordsaveiii\n\t- enter Hetzner's web console:##clickthecononon\n\t\t- log in as root and the root password that you just saved\n\t- type `installimage`##therootress\n\t- choose Arch Linux:##thechoosesarch222\n\t- choose default image##choosethedddefa\n\t- click **[OK]** again##okagainss\n\t- in the blue editor, change hostname to e.g. **archlinux-007**##thehostokok222\n\t- remove **UEFI##** on this line:##thrremoveuuu\n\t- press F2 and Enter to save, then F10 to exit\n\t- confirm with **Yes**##andtheconfiirm222\n\t- wait while the machine is built:##andthbussymahc\n\t- after approximately 5 minutes it will finish:##andnowfinsihs\n\t- type `reboot`\n- **connect to Arch Linux machine**\n\t- after the machine reboots, it will show a login, type `root`\n\t- and for the password, paste in the password you saved above in e.g. KeePass\n\t- you will be logged in as root on your new Arch machine:##loggedinonarchok\n- **create a main user**\n\t- you usually don't want to log in as root user on Linux\n\t\t- you only need to log in as root in order to create the first main user, as we are doing now\n\t- so we will now create a main user which you will use to manage your machine\n\t- as root, you first after to update the system package manager and set up rights for the sudo group (wheel)\n\t\t- `pacman -Syu` (updates system)\n\t\t- `pacman -S nano sudo` (installed the nano editor and sudo functionality)\n\t\t- `EDITOR=nano visudo`\n\t\t\t- scroll to bottom of file\n\t\t\t- remove this `#` symbol and the space after it##theremovethepoind\n\t\t\t- file should look like this##andthefileschand\n\t\t\t- save and exit like this: **CTRL-O**, **[ENTER]**, **CTRL-X**\n\t- create user\n\t\t- `useradd -m -G wheel edward` (`-m` creates a home directory, `-G wheel` adds user to sudo group)\n\t\t- `passwd edward`\n\t- exit as root with `exit`\n- **log into your Arch Linux machine from your local machine**\n\t- it is more convenient to log into your account from a termin on your machine\n\t\t- your local keyboard layout will work, and you can copy and paste more easily\n\t- open a local terminal\n\t- `ssh edward@YOUR-MACHINES-IP-ADDRESS`##withipeinlog","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-07 15:54:40","systemWhoCreated":"systemUnknown"},{"id":605,"category":"Hetzner","title":"How to set up a HTML/CSS website with a HTTPS domain on a Debian machine at Hetzner with nginx and certbot","body":"- **What we will set up**\n\t- at the end of this howto, you will have \n\t\t- a Debian machine in the cloud at Hetzner that \n\t\t- hosts a HTML/CSS website at e.g. https://yourdomainname.info\n\t\t- the code for this site you will develop and push from your local machine\n\t\t- and pull from the Debian server in order to deploy it live\n- **How progress will look**\n\t- 1. we will start out with no website deployed on our Hetzner Debian machine\n\t- 2. using **nginx** we will deploy a test HTML website to our IP-address URL\n\t- 3. we will purchase a domain name of choice at Hetzner for circa 12€/year conveniently included in our monthly Hetzner payments\n\t- 4. we will develop a site locally, push it to GitHub, pull it from Hetzner, and use certbot to deploy it with HTTPS, then set up a firewall to allow incoming HTTPS traffic##namenowksok\n- **Prerequisites**\n\t- we will start with a newly created Debian server at Hetzner\n\t- if you don't have a Debian machine running at Hetzner, complete this howto first:\n\t\t- [Set up a Debian machine at Hetzner](https://edwardtanguay.netlify.app/howtos?id=603)\n- **How we will set it up**\n\t- we will first install the [nginx](https://www.nginx.com) web server to get a simple HTML site running at http://the-ip-address-of-your-machine\n\t\t- note that there are other web servers to install such as Apache and Caddy\n\t\t\t- nginx is the most performant\n\t\t\t- Apache has more features\n\t\t\t- Caddy is the easiest to install\t\t\n\t- we will then buy a domain name at Hetzner (e.g. yourdomainname.info) which will be circa 12€ for a year \n\t- will will configure nginx to serve your HTML site at this domain (e.g. http://yourdomainname.de) instead of at your IP address\n\t- in order to secure your connection, we will use the free service [certbot](https://certbot.eff.org) (which uses \"Let's Encrypt\") to convert your http connection to **https**\n\t- we will then set up a simple development flow for you to develop locally and deploy on your Debian machine\n\t\t- you will create a simple HTML/CSS site on your local machine, then push it to a private respository at GitHub\n\t\t- we will create an SSH key on your Hetzner machine and save it in your GitHub account\n\t\t- this will allow you to pull the contents of your GitHub repository to the directory that is being served at your domain address\n\t\t- as soon as you pull the code, it will be live\n\t- finally we will implement a firewall to allow incoming HTTPS traffic\n- **Set up Debian server at Hetzner**\n\t- follow [this howto](https://edwardtanguay.netlify.app/howtos?id=603) to get a Debian server running at Hetzner\n- **Get a simple HTML page running without a domain**\n\t- we will now get a site running at http://your-ip-address-of-your-machine\n\t- go to the ip address of your machine in your browser to show that it is now serving an HTML page##thenoipii\n\t- this is why we need to **install a web server**, i.e. in order to serve websites at your IP number via http\n\t\t- `sudo apt install nginx`\n\t\t- reload your browser on your IP URL and you will have a website running:##nowhavexng\n\t- now let's get our own simple HTML file running at this IP URL\n\t\t- create this file in your home directory `~/projects/mainsite/index.html`\n\t\t\t------------------------------------\n\t\t\tThis is a <b>test</b> website.\n\t\t\t------------------------------------\n\t\t- let's first understand where the current site is coming\n\t\t\t- `sudo vim /etc/nginx/sites-available/default`\n\t\t\t- here you will get some clues where the HTML file is that we are seeing:\n\t\t\t\t- nginx is listening on the default port 80\n\t\t\t\t- the file it is serving is in `/var/www/html`\n\t\t\t\t- and it has to be a file called `index.html`, `index.htm`, or `index.nginx-debian.html` etc.\n\t\t\t\t##threearrirr\n\t\t\t- so let's go find the file\n\t\t\t\t- `cd /var/www/html` and we find##wefoundiiij\n\t\t\t- let's look in it: `sudo vim /index.nginx-debian.html`\n\t\t\t\t- we see that this is the file that is being served:##welcome2222j\n\t\t\t\t- change some text, save, and reload the browser:##thereloadandshow\n\t\t- now let's point our nginx server to our website at `~/projects/mainsite`\n\t\t\t- go to the nginx folder: `cd /etc/nginx`\n\t\t\t- first we are going to delete `sites-available` and `sites-enabled` because this approach is [apparently deprecated](https://www.reddit.com/r/nginx/comments/re8ksm/why_is_sitesenabled_and_sitesavailable_deprecated/)\n\t\t\t\t- `sudo rm -rf sites-available`\n\t\t\t\t- `sudo rm -rf sites-enabled`\n\t\t\t\t- your site will still work since these files had already been interpreted when nginx started\n\t\t\t\t- restart nginx `sudo systemctl restart nginx` and you will see that your site no longer works\n\t\t- we will now create a new config file to point to our mainsite test website that we made earlier\n\t\t\t- create file: `/etc/nginx/conf.d/mainsite.conf`\n\t\t\t\t---------------------------------------\n\t\t\t\tserver {\n\t\t\t\t\t\tlisten 80 default_server;\n\t\t\t\t\t\tlisten [;]:80 default_server;\n\n\t\t\t\t\t\troot /home/edward/projects/mainsite;\n\n\t\t\t\t\t\tindex index.html;\n\n\t\t\t\t\t\tserver_name _;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- restart the nginx server and you should see your site\n\t\t\t\t- `sudo systemctl restart nginx`##seesitengng\n- **Buy a domain name to host this site**\n\t- you can buy and manage domains with other providers (for example [domainssaubillig.de](https://www.domainssaubillig.de) where you will find slightly cheaper prices)\n\t\t- but ordering domains at Hetzner will enable you to pay for your hosting and domains with one monthly payment\n\t- in your Hetzner Cloud Console, click on **konsoleH**##onkonsolh\n\t- click **Neue Bestellung**\n\t- scroll down to the bottom to **Domainregistrierung** and click on **Bestellen**##canwebestlll\n\t- type in the domain and choose the extension you want, then click **Weiter**##thenameandordjd\n\t- click on **Weiter**##thebpapay\n\t- click **Zahlungspflichtig bestellen**##zahlungplf\n\t- it says everything worked:##gettheeeemal\n\t- the email:##theehtzemail1\n\t- if you go to your domain, you will see that it has been reserved:##theserfversdomain\n\t- point your domain name to your server\n\t\t- go to konsoleH, Einstellungen, DNS-Verwaltung and type in the IP address of your machine under A-Records for @ and www:##thgreenaksdown\n\t\t- it will take up to 24 hours to be updated with your \n\t\t- refresh the browser page regularly until you see that same site that you see at your IP-address URL\n\t\t- in my case it took about **two hours** until my domain pointed to my machine's IP address:##thetsetwiwwi\n- **Set up workflow to develop locally and publish on Hetzner machine**\t\t\n\t- on your local machine, we will create an HTML/CSS website that we will publish at our domain hosted on our Hetzner machine\n\t- open a terminal window in your projects directory\n\t- `mkdir tkserv` (where `tkserv` is the name of your domain)\n\t- open VSCode in that directory: `code tkserv`\n\t- create these files\n\t\t- index.html\n\t\t\t--------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<title>tkserv</title>\n\t\t\t<link rel=\"stylesheet\" href=\"main.css\">\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<h1>tkserv</h1>\n\t\t\t\t<p>This is a domain to use for various tech projects hosted at Hetzner.</p>\n\t\t\t</body>\n\t\t\t</html>\n\t\t\t--------------------------------------\n\t\t- main.css \n\t\t\t--------------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #333;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: .5rem 2rem;\n\t\t\t}\n\n\t\t\tp {\n\t\t\t\tfont-size: 1.2rem;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n\t- set up Git workflow and push to online private Git repository and publish at Hetzner\n\t\t- in the directory of your website, create a local Git repository and commit your files to it\n\t\t\t- `git init -b main`\n\t\t\t- `git add .`\n\t\t\t- `git commit -m \"initial commit\"`\n\t\t- on GitHub, create an empty repository called e.g. `tkserv`\n\t\t- commit local files to private respository at GitHub\n\t\t\t- `git remote add origin git@github.com:edwardtanguay/tkserv.git`\n\t\t\t- `git push -u origin main`\n\t\t- at GitHub, refresh the page, select **SSH** and then click on the **clone icon**##tehgitshshs\n\t\t- on your Hetzner machine, go to your **projects** directory and delete the **mainsite** directory\n\t\t\t- `cd ~/projects`\n\t\t\t- `rm -rf mainsite`\n\t\t\t- note that your website is no longer there##nolongjtei\n\t\t- now (try to) clone the directory into your projects file (you will see that it's not possible since we haven't set up SSH yet)\n\t\t\t- type `git clone`, paste what you copied from the GitHub site, and add `mainsite` to it\n\t\t\t\t- `git clone git@github.com:edwardtanguay/tkserv.git mainsite`\n\t\t\t\t- if you don't have Git:##thenogit\n\t\t\t\t\t- install it with `sudo apt install git`\n\t\t\t\t- try to clone again: `git clone git@github.com:edwardtanguay/tkserv.git mainsite`\n\t\t\t- you see you get an error because you don't have rights to the private GitHub directory:##gotnorights\n\t\t- set up SSH\n\t\t\t- `ssh-keygen -t ed25519`\n\t\t\t- press ENTER for all questions##justhitener\n\t\t\t- we now need to copy the public key that was just generated and save it at GitHub\n\t\t\t\t- `cd ~/.ssh`\n\t\t\t\t- `cat id_ed25519.pub`\n\t\t\t- copy the outputted text (here in green)##copyonlythattextss\n\t\t\t- go to GitHub, click on your Icon, then **Settings** and **SSH and GPG keys**\n\t\t\t- click on **New SSH key**\n\t\t\t- give your key a name (e.g. the name of the machine where it is used) and paste the public key into the box##theaddthekey\n\t\t- at GitHub again, select **SSH** and then click on the **clone icon**##tehgitshshs\t\n\t\t\t- type `git clone`, paste what you copied from the GitHub site, and add `mainsite` to it\n\t\t\t\t- `git clone git@github.com:edwardtanguay/tkserv.git mainsite`\n\t\t\t- this time it can access your GitHub repository and clones your files into **mainsite**\n\t\t- refresh your browser and you will see that your locally developed site has been deployed live at your domain:##thedeployon\n\t\t- now to develop and deploy your site\n\t\t\t- make local changes\n\t\t\t- push to GitHub\n\t\t\t- log in on your Hetzner machine\n\t\t\t- go to `~/projects/mainsite`\n\t\t\t- type `git pull`\n\t\t\t- and your changes will be live\n- **Secure your website so that users access it via HTTPS instead of HTTP**\n\t- we will use [certbot](https://certbot.eff.org) which uses [Let's Encrypt](https://letsencrypt.org) to secure your website with HTTPS for free\n\t- update apt\n\t\t- `sudo apt update`\n\t- install snap\n\t\t- `sudo apt install snapd`\n\t\t- `sudo snap install core`\n\t- install certbot\n\t\t- `sudo snap install --classic certbot`\n\t- prepare the certbot command\n\t\t- `sudo ln -s /snap/bin/certbot /usr/bin/certbot`\n\t\t- `sudo snap set certbot trust-plugin-with-root=ok`\n\t- install and configure https in nginx\n\t\t- `sudo certbot --nginx`\n\t\t- enter your email to be notifed about security updates or expiration dates, etc.\n\t\t- type in name of your domain, e.g. `tkserv.eu`##deploycertifif\n\t\t- note the text that certbot added to your nginx config file \n\t\t\t- `cat /etc/nginx/conf.d/mainsite.conf`:##lookatcerttext\n\t- refresh your browser and see that your http site transfers automatically to https:##httpstkserver\n- **Set up firewall and allow HTTPS traffic**\n\t- your Hetzner machine should have a firewall so it doesn't allow all incoming traffic on all ports\n\t\t- let's set up a firewall and see that it blocks access to our https site\n\t\t- then we will allow traffic on the https port 443\n\t- click **Firewalls** and **Firewall erstellen**##firewallanderstl\n\t- leave the suggested **22** port and click the **Firewall erstellen** button\n\t- refresh your page and notice that https is blocked##nowwithfirewallon\n\t- now go back in your firewall\n\t\t- change the name of the firewall to match the name of your machine\n\t\t\t- normally you'll have a separate firewall corresponding to each machine\n\t\t- add TCP 443 which means that incoming HTTPS traffic will be allowed\n\t\t- click the button to save the changes:##thetcp443\n\t- refresh your browser to see that while your firewall blocks unwanted traffic, it allows https traffic to display your site:##httpstkserver","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-08 21:12:42","systemWhoCreated":"systemUnknown"},{"id":606,"category":"Hetzner","title":"How to get a Node/Express API and a React Site running as subdomains on a Debian machine at Hetzner with pm2 and nginx","body":"- **What we will set up:**\n\t- we will start with a Debian machine at Hetzner which has an HTML/CSS site being served at an https domain: https://tkserv.eu\n\t- we will add a Node/Express API and use pm2 to serve it at https://testapi.tkserv.eu\n\t- we will add a React Site created with Vite and use pm2 to serve it at https://testreact.tkserv.eu\n\t- **the frontend React site will read data from the backend Node/Express site, both hosted at Hetzner at HTTPS subdomains:**##hetznerbackendfrontendapps\n- **Prerequisites:**\n\t- these instructions will be most straight-forward if you have a **Debian machine running at Hetzner**\n\t\t- if you have an **Ubuntu** machine at Hetzner, instructions should work as well\n\t\t- if you have an **Arch** machine or **Fedora/CentoOS/Rocky** machine\n\t\t\t- some of the commands will differ, particularly package management commands\n\t- you need to have a **domain name**, **https** set up, and a simple HTML site being served via **nginx**\n\t\t- if not then first do this howto: [How to set up a HTML/CSS website with a HTTPS domain on a Debian machine at Hetzner with nginx and certbot](https://edwardtanguay.netlify.app/howtos?id=605)\n- **Create a Node/Express API on your local machine**\n\t- open terminal on your local machine in your projects directory\n\t- make a directory for your API\n\t\t- `mkdir hetzner-debian002-testapi`\n\t- enter the directory in VSCode\n\t\t- `code hetzner-debian002-testapi`\n\t- open a terminal in VSCode and create a Node project\n\t\t- `npm init -y`\n\t- set project up for ES6 modules\n\t\t- **package.json**\n\t\t\t---------------------------------\n\t\t\t\"type\": \"module\",\n\t\t\t---------------------------------\n\t- import packages you need\n\t\t- `npm i express`\n\t\t- `npm i -D nodemon` (`-D` = dev dependency)\n\t- create a basic Node API that serves a test string on the base route\n\t\t- **server.js**\t\n\t\t\t------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst api = express();\n\t\t\tconst PORT = 4447;\n\n\t\t\tapi.get('/', function (req, res) {\n\t\t\t\tres.send('Test API works');\n\t\t\t});\n\n\t\t\tapi.listen(PORT, () => {\n\t\t\t\tconsole.log(`listening on http://localhost:${PORT}`);\n\t\t\t});\n\t\t\t------------------------------------\n\t- test with: \n\t\t- `node server.js`##thetsetworksijok\n\t- set up scripts for dev and deployment\n\t\t- **package.json**\n\t\t\t--------------------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon server.js\",\n\t\t\t\t\"start\": \"node server.js\"\n\t\t\t},\n\t\t\t--------------------------------------------------\n\t- test both:\n\t\t- for local developing so app refreshes when files change\n\t\t\t- `npm run dev`\n\t\t- for online deployment\n\t\t\t- `npm start` \n- **Deploy the Node/Express site to Hetzner via GitHub**\n\t- deploying a site to Hetzner basically means \n\t\t- pushing it from a local repository to a GitHub repository\n\t\t- pulling it from the GitHub repository to the repository on your Hetzner machine\n\t\t- setting up a subdomain for it to run on\n\t\t- setting up pm2 and nginx for it to be accessible at that subdomain\n\t- create local GitHub repository\n\t\t- `git init -b main` (`-b main` creates a branch called `main` instead of `master`)\n\t\t- there are now 428 files to check in since node_modules is being included as files to check into GitHub##now444\n\t\t- in order to exclude these, make a .gitignore file\n\t\t\t- **.gitignore**\n\t\t\t\t-------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t-------------------------------\n\t\t- now there are only 4 files to check in, which is correct:##nowonly4\n\t\t- use VSCode to create a private repository at GitHub and push your code to it:#gif#recordpushingtogit\t\t\n\t- log into your Hetzner machine and go to your `~/projects` directory\n\t- clone the repository you just pushed to\n\t\t- note that you need to have set up an SSH key in order to access private respositories on your GitHub account\n\t\t- if you haven't set up an SSH key for your repository yet, [see this howto] (search for `keygen`)(https://edwardtanguay.netlify.app/howtos?id=605)##gettherepo2\n\t- deploy your API at its port 4447\n\t\t- if you don't have **node and npm** yet, then install them\n\t\t\t- `sudo apt update`\n\t\t\t- `sudo apt install nodejs npm`\n\t\t\t- on 2022-09-12, this gave me Node version 12 which is sufficient for our test application##gaveme12\n\t\t- install the node modules with \n\t\t\t- `npm i`\n\t\t- start the app and view in browser\n\t\t\t- `npm start`\n\t\t\t- it says it is running on port 4447\n\t\t\t- if you have a firewall attached to your Hetzner machine, open it now and create a rule to allow incoming traffic on port 4447##setfirewall4\n\t\t\t- then in your browser, type e.g. `http://YOUR-DOMAIN-NAME:4447` (not https, but **http**), and you will see that it works:##the477works\n\t\t- **PROBLEM:**\n\t\t\t- 1. the current solution only works with http but not https\n\t\t\t- 2. you generally don't want to host applications on the Internet under port numbers but rather **subdomains**\n\t\t\t\t- with a subdomain, you can later change port numbers if you need to and remap it to the subdomain which stays the same for the users\n\t\t\t\t- a website with a port number looks less professional and is more difficult for users to type\n\t- **SOLUTION:** create a subdomain called \"testapi\" at your domain provider\n\t\t- if your domain provider is domainssaubillig.de, it looks like this\n\t\t\t- domain name [bearbeiten]\n\t\t\t- Subdomains\n\t\t\t- [Neue Subdomain anlegen]\n\t\t\t- enter name, e.g. `testapi`\n\t\t\t- testapi [bearbeiten]\n\t\t\t- then enter the IP address of your host for the subdomain:##testapiinin\n\t\t\t- it will then be listed as a subdomain:##saudomainin\n\t\t- if your domain provider is **Hetzner**, then \n\t\t\t- click on **konsoleH**:##onthekon\n\t\t\t- click on your Domain name\n\t\t\t- Einstellungen\n\t\t\t- DNS-Verwaltung\n\t\t\t- there is no section for subdomains, so enter the subdomain as an A-Record:##entertestapi\n\t\t\t- note that when you now go to **http://testapi.tkserv.eu**, it shows the content to the page **http://tkserv.eu** since this is the IP we gave for it##thetestapitk\n\t\t- in the nginx file, redirect the subdomain **testapi** to **port 4447**:\n\t\t\t- `cd /etc/nginx/conf.d`\n\t\t\t- create file e.g. **testapi.tkserv.eu**\n\t\t\t\t----------------------------------------------------------\n\t\t\t\tserver {\n\t\t\t\t\tserver_name testapi.tkserv.eu;\n\n\t\t\t\t\tlocation / {\n\t\t\t\t\t\tproxy_pass http://tkserv.eu:4447;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t----------------------------------------------------------\n\t\t\t- restart the nginx server\n\t\t\t\t- `sudo systemctl restart nginx`\n\t\t\t- start the Node/Express app again:\n\t\t\t\t- `cd ~/projects/testapi`\n\t\t\t\t- `npm start`\n\t\t\t- your app will now be available at **http://subdomain**:##availatsubthe\n\t\t\t- but note it is not yet available at **https://subdomain**:##notathpppt\n\t\t- secure your subdomain with HTTPS\n\t\t\t- if you don't have **certbot** installed, see [this howto](https://edwardtanguay.netlify.app/howtos?id=605)\n\t\t\t- `sudo certbot --nginx`\n\t\t\t- certbot will look through all files in your **/etc/nginx/conf.d** folder and list out the subdomains that are being used, choose the one you want to secure with https:##certbottkai\n\t\t\t- notes what certbot added to your nginx file:##notewhatadded\n\t\t\t- restart the nginx server\n\t\t\t\t- `sudo systemctl restart nginx`\n\t\t\t- start the Node/Express app again:\n\t\t\t\t- `cd ~/projects/testapi`\n\t\t\t\t- `npm start`\n\t\t\t- your Node app will now be running at your subdomain with a secure connection##thesecuapip\n\t\t\t- **PROBLEM:** if you stop your **npm start** command, or if your Node app encounters an error, then your site will no longer be available:##ifyoustoptheser\n\t\t- **SOLUTION:** use **pm2** to robustly serve your API app 24/7:\n\t\t\t- pm2 is a process manager which will keep your Node and React apps alive and running at their subdomains\n\t\t\t- install pm2\n\t\t\t\t- `sudo npm install pm2 -g`\n\t\t\t- tell pm2 to serve your Node/Express app\n\t\t\t\t- navigate to your in your app folder \n\t\t\t\t\t- `~/projects/testapi`\n\t\t\t\t- app your app to pm2\n\t\t\t\t\t- `pm2 start --name \"testapi\" npm -- start`\n\t\t\t- now note that your API is running without having to have the **npm start** command running\n\t\t\t\t- pm2 is managing the process in the background##pm2takingcareofit\n- **Make a local change in the Node/Express app and redeploy to Hetzner**\n\t- let's now make a change to our local Node/Express app and redeploy to Hetzner\n\t\t- we'll add a `/books` route which serves some books to display\n\t\t- later when we create and host our React app at Hetzner, we'll consume this API and display the books\n\t\t- we'll also put the port in an environment variable to show how environment variables work\n\t- make local changes and push code to GitHub\n\t\t- **server.js**\n\t\t\t------------------------------------------\n\t\t\tconst books = [\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"buildingMicroservices\",\t\t\t\t\n\t\t\t\t\t\"title\": \"Building Microservices\",\n\t\t\t\t\t\"description\": \"Seems to be a high-level abstract book how to not only implement microservices but how to get your head around the paradigm shifts involved, e.g. from request-response to event-driven patterns.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"gatsbyEcommerce\",\t\t\t\t\n\t\t\t\t\t\"title\": \"Gatsby E-Commerce\",\n\t\t\t\t\t\"description\": \"An interesting aspect of Gatsby: using it for e-commerce site which focuses on practical tips around this focus.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"rustWeb\",\t\t\t\t\n\t\t\t\t\t\"title\": \"Rust Web Programming\",\n\t\t\t\t\t\"description\": \"Looking forward to creating sites in Rust on my Debian box at Hetzner. This looks like a practical way to learn Rust in order to actually build something useful.\"\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tapi.get('/books', function (req, res) {\n\t\t\t\tres.send(books);\n\t\t\t});\n\t\t\t------------------------------------------\n\t\t- in your browser, **/books** should now output the JSON array with three book objects##bookshouls\n\t\t- now let's set up an environment variable for our port and change the port to 4778 to make sure it works\n\t\t\t- `npm i dotenv`\n\t\t\t- **.env**\n\t\t\t\t---------------------------------\n\t\t\t\tPORT = 4448\n\t\t\t\t---------------------------------\n\t\t\t- **server.js**\n\t\t\t\t----------------------------------\n\t\t\t\timport dotenv from 'dotenv';\n\n\t\t\t\tdotenv.config();\n\n\t\t\t\tconst api = express();\n\t\t\t\tconst PORT = process.env.PORT;\t\t\t\n\t\t\t\t----------------------------------\n\t\t\t- the site now runs on port 4448 which comes from the .env file:##the4448\n\t\t\t- the plan is at Hetzner to set up an .env file that has a different port, namely 4447, since we have that port open in the firewall\n\t\t- don't forget to add the .env to your **.gitignore** file, so that the .env file is not checked into GitHub:\n\t\t\t-----------------------------------\n\t\t\tnode_modules\n\t\t\t.env\n\t\t\t-----------------------------------\n\t\t- push the changes to GitHub\n\t- deploy to Hetzner\n\t\t- on your Hetzner machine, go to `~/projects/testapi`\n\t\t- pull code from GitHub\n\t\t\t- `git pull`\n\t\t- restart the app with pm2\n\t\t\t- `pm2 restart testapi`##twobutnowork\n\t\t- **PROBLEM:** notice in your browser, that the site does not work yet:##noticenopage\n\t\t- **SOLUTION:** look at the pm2 logs for this app: `pm2 logs testapi`:\n\t\t\t- we forgot to import the new node module that was added (dotenv)##cannotfinddotenv\n\t\t\t- `npm i`\n\t\t\t- `pm2 restart testapi`\n\t\t- **PROBLEM:** notice in your browser, that the site still does not work yet:##noticenopage\n\t\t- **SOLUTION:** look at the pm2 logs for this app: `pm2 logs testapi`:\n\t\t\t- we forgot to add a **.env file** here on the server:##nowtheundefined\n\t\t\t- create **.env** file with port **4447** since this is the port that we had opened for incoming traffic in the firewall\n\t\t\t\t---------------------------------------\n\t\t\t\tPORT = 4447\n\t\t\t\t---------------------------------------\n\t\t\t- `pm2 restart testapi`\n\t\t\t- and now the book route works as well:##booksnowsiteworksh\n- **Create a React site on your local machine**\n\t- on your local machine, go to your projects directory\n\t- create the site\n\t\t- `npm create vite`\n\t\t\t- `hetzner-debian002-testreact`\n\t\t\t- **react**\n\t\t\t- **react-ts** (in general it's a good idea to program with TypeScript when you can)\n\t- open in VSCode\n\t\t- `code hetzner-debian002-testreact`\n\t- view site in browser\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- you will see the starter site:##vitereactj\n\t- minimize site\n\t\t- create local Git repository before you start\n\t\t\t- `git init -b main`\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\n\t\t\timport './App.css'\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Books</h1>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\texport default App\t\t\t\n\t\t\t----------------------------------------\n\t\t- blank out the **index.css** file\n\t\t- **App.css**\n\t\t\t---------------------------------------\n\t\t\tbody {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tbackground-color: #333;\n\t\t\t\tpadding: 1rem 2rem;\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- **main.tsx** - remove StrictMode which makes your useEffect render twice in development, which can cause hard-to-find bugs\n\t\t\t---------------------------------------------\n\t\t\timport ReactDOM from 'react-dom/client';\n\t\t\timport App from './App';\n\t\t\timport './index.css';\n\n\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t<App />\n\t\t\t);\n\t\t\t---------------------------------------------\n\t\t- **PROBLEM:** when you reload the site, it blinks a white flash\n\t\t- **SOLUTION:** change the immediately loaded background-color the same to the later-rendered background color\n\t\t\t- **index.html** - change title and implement fix so screen doesn't flash white on reload\n\t\t\t\t----------------------------------------\n\t\t\t\t<title>Books</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t}\n\t\t\t\t</style>\t\t\t\n\t\t\t\t----------------------------------------\n\t\t- minimized site should look like this:##theminiiimis\n\t- load the book data from our local backend API (running on port 4448) and display\n\t\t- be sure that your local backend site is running on port 4448 (`npm run dev`)\n\t\t- `npm i axios`\n\t\t- get books and display how many there are as a test:\n\t\t\t- **App.tsx**\n\t\t\t\t-----------------------------------\n\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\timport './App.css';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\tconst url = 'http://localhost:4448/books';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\tconst [books, setBooks] = useState([]);\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tsetBooks((await axios.get(url)).data);\n\t\t\t\t\t\t})();\n\t\t\t\t\t}, []);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>Books</h1>\n\t\t\t\t\t\t\t<p>There are {books.length} books.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\texport default App;\n\t\t\t\t-----------------------------------\t\t\n\t\t- **PROBLEM:** you get a CORS error##thecorserrrrror222\n\t\t- **SOLUTION:** implement CORS on the backend API project\n\t\t\t- go back into VSCode of your backend API\n\t\t\t- `npm i cors`\n\t\t\t- **server.js**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport cors from 'cors';\n\n\t\t\t\tcors();\n\n\t\t\t\tapi.use(cors());\n\t\t\t\t---------------------------------------------\n\t\t\t- you will no longer have a CORS error##nomoreerrorsjcores\n\t\t\t- redeploy the backend to Hetzner as we did above\n\t\t\t\t- push to GitHub\n\t\t\t\t- on Hetzner in the **testapi** directory\n\t\t\t\t\t- `git pull`\n\t\t\t\t\t- `npm i`\n\t\t\t\t\t- `pm2 restart testapi`\n\t\t- in your local frontend app, put the backend url in an environment variable and then test to see that it can also access the online API at Hetzner \n\t\t\t- create **.env** file in root directory\n\t\t\t\t- remember environment variables in React sites created with Vite must begin with `VITE_`\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\tVITE_BACKEND_URL = http://localhost:4448/books\n\t\t\t\t\t-------------------------------------\n\t\t\t- in **App.tsx** replace the `url` definition:\n\t\t\t\t---------------------------------\n\t\t\t\tconst url = import.meta.env.VITE_BACKEND_URL;\n\t\t\t\t---------------------------------\n\t\t\t- the site will work again##nomoreerrorsjcores\n\t\t\t- in the **.env** file, change the URL to the online API URL:\n\t\t\t\t-----------------------------------------------\n\t\t\t\tVITE_BACKEND_URL = https://testapi.tkserv.eu/books\n\t\t\t\t-----------------------------------------------\n\t\t\t- the site will work again##nomoreerrorsjcores\n\t\t\t- be sure to add .env to the **.gitignore** file since unfortunately Vite does not have it listed by default\n\t\t\t\t- in fact, replace the whole file with these two entries, it's all you need at the moment:\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\tnode_modules\n\t\t\t\t\t.env\t\t\t\t\t\n\t\t\t\t\t------------------------------------------------\n\t\t- display the books on the React site\n\t\t\t- add to **App.tsx**:\n\t\t\t\t-------------------------------------------\n\t\t\t\t<div className=\"books\">\n\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"book\">{book.title}</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t-------------------------------------------\n\t\t\t- **PROBLEM:** notice that TypeScript is indicating a problem:\n\t\t\t\t- what this is saying is that we have not defined what properties **book** should have\n\t\t\t\t- so TypeScript is indiciating that according to our own code, it can't guarantee that **title** is a property of the **book** object:##thetypescrippro\n\t\t\t- **SOLUTION:** we need to define an interface in order to be explicit about what kind of object we intend and expect **book** to be\n\t\t\t\t- add to **App.tsx**\n\t\t\t\t\t-----------------------------------------\n\t\t\t\t\tinterface IBook {\n\t\t\t\t\t\tidCode: string;\n\t\t\t\t\t\ttitle: string,\n\t\t\t\t\t\tdescription: string\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t-----------------------------------------\n\t\t\t\t- and add a generic type to the useState hook which tells indicates that we intend the array **books** to be an array of type **IBook**:\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t- not only does TypeScript no longer give us an error, it presents to us a dropdown of every property that **book** has since we have indicated that we expect **book** to always have these properties and none others:##notonlystype\n\t\t\t\t- **NOTE:** Regarding TypeScript, bear in mind, however, that TypeScript will not protect our code at runtime from e.g. API data that is invalid based on our interfaces, e.g. from book API data that does not have a **title** or **idCode**, since *TypeScript no longer exists when our code runs*. It only exists at development time in order to protect us from ourselves, i.e. from using invalid properties based on what we defined ourselves. \n\t\t\t- in **App.tsx**, replace the books code with this:\n\t\t\t\t-----------------------------------------------\n\t\t\t\t<div className=\"books\">\n\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"book\">\n\t\t\t\t\t\t\t\t<img src={`https://edwardtanguay.netlify.app/share/images/techBooks/${book.idCode}.jpg`}/>\n\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t{book.description}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t-----------------------------------------------\n\t\t\t- you will see that all the data is there, we just need to style it now:##juststyleoki\n\t\t\t- install Sass quick:\n\t\t\t\t- `npm i sass`\n\t\t\t\t- rename **App.css** to **App.scss**\n\t\t\t\t- **App.tsx**:\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\timport './App.scss';\n\t\t\t\t\t-------------------------------------\n\t\t\t\t- **App.scss**\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\tbody {\n\t\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t\tpadding: 1rem 2rem;\n\n\t\t\t\t\t\t.books {\n\t\t\t\t\t\t\t.book {\n\t\t\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\t\tgap: 1rem;\n\t\t\t\t\t\t\t\twidth: 35rem;\n\t\t\t\t\t\t\t\talign-items: flex-start;\n\t\t\t\t\t\t\t\tborder-radius: .5rem;\n\n\t\t\t\t\t\t\t\timg {\n\t\t\t\t\t\t\t\t\twidth: 8rem;\n\t\t\t\t\t\t\t\t\tobject-fit: contain;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t.info {\n\t\t\t\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\t\t\t\tcolor:rgb(219, 198, 160);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\t\t\t\tfont-size: 1.1rem;\n\t\t\t\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t-----------------------------------------------\n\t\t\t- the page should now look like this:##bookslookingok\n- **Deploy the React site to Hetzner via GitHub**\n\t- before deploying for the first time, add a port number for the React site to run on\n\t\t- **package.json**\n\t\t\t-----------------------------------\n\t\t\t\"preview\": \"vite preview --host --port 5555\"\n\t\t\t-----------------------------------\n\t- commit your code for the frontend and push it to a GitHub repository, e.g. `hetzner-debian002-testreact`\n\t- on your Hetzner machine, set up the React site\n\t\t- copy the GitHub URL by clicking the clone button on your respository\n\t\t- go to `~/projects`\n\t\t- clone your project with e.g. \n\t\t\t- `git clone git@github.com:edwardtanguay/hetzner-debian002-testreact.git testreact`\n\t\t- enter the created directory\n\t\t\t- `cd testreact`\n\t\t- install node modules\n\t\t\t- `npm i`\n\t\t- test the site without pm2\n\t\t\t- `npm run preview`\n\t\t\t- **PROBLEM:** there is an error with the **await** command\n\t\t\t\t- this is because **top-level await** is available only as of **Node 14.8**\n\t\t\t\t- and we currently have **Node 12.22.12** installed:##tehproblemnodevm\n\t\t\t- **SOLUTION:** upgrade the Node version\n\t\t\t\t- `curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash`\n\t\t\t\t- `source ~/.bashrc`\n\t\t\t\t- find out what the latest LTS version of Node is\n\t\t\t\t\t- go to: https://nodejs.org/en/download\n\t\t\t\t\t- look for the latest LTS version:##thelatestletsso\n\t\t\t\t- this should correspond to the output of the `nvm ls-remote` command:##shouldcorrress\n\t\t\t\t- install the latest LTS version\n\t\t\t\t\t- `nvm install 16.17.0`##dotheversionright\t\n\t\t\t- run again: `npm run preview`##showthatworknpmskjrprevw\n\t\t\t- in your browser, go to: `http:tkserv.eu:5555`##the0books\n\t\t\t- **PROBLEM:** books are not being loaded\n\t\t\t- **SOLUTION:** we need to add the `.env` file here on the Hetzner server\n\t\t\t\t- **.env**\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\tVITE_BACKEND_URL = https://testapi.tkserv.eu/books\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t- rebuild the /dist folder\n\t\t\t\t\t- `npm run build`\n\t\t\t\t- test again\n\t\t\t\t\t- `npm run preview`\n\t\t\t\t- you will be able to see the site:##books3showing\n- **Create a subdomain and host the React site with pm2 and nginx**\n\t- in your Hetzner console, click **KonsoleH**##thekonssss\n\t- add a new subdomain:##reactplussubd\n\t- add file **/etc/nginx/conf.d/testreact.conf**\n\t\t- don't forget ou need sudo rights\n\t\t- e.g. `sudo vim /etc/nginx/conf.d/testreact.conf`:\n\t\t\t-------------------------------------------\n\t\t\tserver {\n\t\t\t\t\tserver_name testreact.tkserv.eu;\n\n\t\t\t\t\tlocation / {\n\t\t\t\t\t\t\tproxy_pass http://tkserv.eu:5555;\n\t\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t- restart nginx server\n\t\t- `sudo systemctl restart nginx`\n\t\t- now the site runs at the subdomain##nowrunsonsdtk\n\t- let's know add HTTPS with **certbot**\n\t\t- `sudo certbot --nginx`\n\t\t- choose the site you want to add HTTP to:##thepick3\n\t\t- it will add HTTPS to that domain:##congradkjsitondsub\n\t- your frontend site alos now runs at HTTPS:##willgethtnowhttps","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-12 10:31:00","systemWhoCreated":"systemUnknown"},{"id":607,"category":"Hetzner","title":"How to get a Node/Express API and a React Site running as subdomains on an Arch Linux machine at Hetzner with pm2 and Caddy","body":"- **What we will set up:**\n\t- we will start with a Arch Linux machine at Hetzner \n\t\t- if you don't yet have one set up, you can follow [this howto](https://edwardtanguay.netlify.app/howtos?id=604)\n\t- we will buy a domain name for 12€/year from Hetzner called tkserv.eu\n\t- we will add an HTML/CSS site that is being served via the [Caddy web server](https://caddyserver.com) at the https domain: https://tkserv.eu\n\t- we will add a Node/Express API and use pm2 to serve it at https://testapi.tkserv.eu\n\t- we will add a React Site created with Vite and use Caddy to serve it at https://testreact.tkserv.eu\n\t- **the frontend React site will read data from the backend Node/Express site, both hosted at Hetzner at HTTPS subdomains:**##hetznerbackendfrontendapps\n- **Set up Caddy web server and HTML/CSS page at http://your-machines-ip-address**\n\t- install Caddy\n\t\t- `sudo pacman -Syu caddy`\n\t- create test website\n\t\t- **Note:** unlike nginx, by default you can't serve a website from a **/home** directory\n\t\t- therefore we will serve a site from **/var/www**\n\t\t\t- create **/var/www** and give your use owner rights so you don't have to always type `sudo` in order to change the files in it\n\t\t\t\t- `cd /var`\n\t\t\t\t- `mkdir www`\n\t\t\t\t- `sudo chown edward www`\n\t\t- create file **/var/www/mainsite/index.html**\n\t\t\t---------------------------------------------\n\t\t\tThis is a <b>test</b> website.\n\t\t\t---------------------------------------------\n\t\t- set up the Caddyfile to point to your website\n\t\t\t- **/etc/caddy/Caddyfile**\n\t\t\t\t-----------------------------------------\n\t\t\t\t{\n\t\t\t\t\tadmin \"unix//run/caddy/admin.socket\"\n\t\t\t\t}\n\n\t\t\t\thttp:// {\n\t\t\t\t\troot * /var/www\n\t\t\t\t\tfile_server\n\t\t\t\t}\n\t\t\t\timport /etc/caddy/conf.d/*\n\t\t\t\t-----------------------------------------\n\t\t\t- you need to enable and start caddy before using it\n\t\t\t\t- `sudo systemctl enable caddy`\n\t\t\t\t- `sudo systemctl start caddy`\n\t\t- test it in the browser by going to the IP-URL:##thisisttestwebsite\n- **Purchase a domain name from Hetzner and and set up website as e.g. http://tkserv.eu**\n\t- you can buy and manage domains with other providers (for example [domainssaubillig.de](https://www.domainssaubillig.de) where you will find slightly cheaper prices)\n\t\t- but ordering domains at Hetzner will enable you to pay for your hosting and domains with one monthly payment\n\t- in your Hetzner Cloud Console, click on **konsoleH**##onkonsolh\n\t- click **Neue Bestellung**\n\t- scroll down to the bottom to **Domainregistrierung** and click on **Bestellen**##canwebestlll\n\t- type in the domain and choose the extension you want, then click **Weiter**##thenameandordjd\n\t- click on **Weiter**##thebpapay\n\t- click **Zahlungspflichtig bestellen**##zahlungplf\n\t- it says everything worked:##gettheeeemal\n\t- the email:##theehtzemail1\n\t- if you go to your domain, you will see that it has been reserved:##theserfversdomain\n\t- point your domain name to your server\n\t\t- go to konsoleH, Einstellungen, DNS-Verwaltung and type in the IP address of your machine under A-Records for @ and www:##thgreenaksdown\n\t\t- it will take up to 24 hours to be updated with your \n\t\t- refresh the browser page regularly until you see that same site that you see at your IP-address URL\n\t\t- in my case it took about **two hours** until my site appeared at my domain address:##andtkserver\n- **Add HTTPS to your domain name**\n\t- Caddy makes it particularly easy to add HTTPS to a domain name\n\t\t- with nginx you have to use certbot\n\t\t- with Caddy, you simply have to make sure you use your domain name in the Caddy config file\n\t\t\t- in **/etc/caddy/Caddyfile** change `http://` to `tkserv.du`\n\t\t\t\t------------------------------------------\n\t\t\t\ttkserv.eu {\n\t\t\t\t\troot * /var/www/mainsite\n\t\t\t\t\tfile_server\n\t\t\t\t}\n\t\t\t\t------------------------------------------\n- **Create a Node/Express API on your local machine**\n\t- open terminal on your local machine in your projects directory\n\t- make a directory for your API\n\t\t- `mkdir hetzner-003-testapi`\n\t- enter the directory in VSCode\n\t\t- `code hetzner-003-testapi`\n\t- open a terminal in VSCode and create a Node project\n\t\t- `npm init -y`\n\t- set project up for ES6 modules\n\t\t- **package.json**\n\t\t\t---------------------------------\n\t\t\t\"type\": \"module\",\n\t\t\t---------------------------------\n\t- import packages you need\n\t\t- `npm i express`\n\t\t- `npm i -D nodemon` (`-D` = dev dependency)\n\t- create a basic Node API that serves a test string on the base route\n\t\t- **server.js**\t\n\t\t\t------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst api = express();\n\t\t\tconst PORT = 4447;\n\n\t\t\tapi.get('/', function (req, res) {\n\t\t\t\tres.send('Test API works');\n\t\t\t});\n\n\t\t\tapi.listen(PORT, () => {\n\t\t\t\tconsole.log(`listening on http://localhost:${PORT}`);\n\t\t\t});\n\t\t\t------------------------------------\n\t- test with: \n\t\t- `node server.js`##thetsetworksijok\n\t- set up scripts for dev and deployment\n\t\t- **package.json**\n\t\t\t--------------------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon server.js\",\n\t\t\t\t\"start\": \"node server.js\"\n\t\t\t},\n\t\t\t--------------------------------------------------\n\t- test both:\n\t\t- for local developing so app refreshes when files change\n\t\t\t- `npm run dev`\n\t\t- for online deployment\n\t\t\t- `npm start` \n- **Deploy the Node/Express site to Hetzner via GitHub**\n\t- first-time deploy to to a Hetzner machine basically means \n\t\t- pushing it from a local repository to a GitHub repository\n\t\t- pulling it from the GitHub repository to the repository on your Hetzner machine\n\t\t- setting up a subdomain for it to run on\n\t\t- setting up pm2 and nginx for it to be accessible at that subdomain\n\t- create local GitHub repository\n\t\t- `git init -b main` (note: `-b main` creates a branch called `main` instead of `master`)\n\t\t- there are now hundreds of files to check in since node_modules is being included as files to check into GitHub##now444\n\t\t- in order to exclude these, make a .gitignore file\n\t\t\t- **.gitignore**\n\t\t\t\t-------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t-------------------------------\n\t\t- now there are only 4 files to check in, which is correct:##nowonly4\n\t\t- use VSCode to create a private repository at GitHub and push your code to it\n\t\t\t- note: after typing `initial commit`, press CTRL-Enter:#gif#recordpushingtogit\t\t\n\t- log into your Hetzner machine and go to the `/var/www` directory\n\t- clone the repository you just pushed to\n\t\t- note that you need to have set up an SSH key in order to access private respositories on your GitHub account\n\t\t\t- `git clone <copy-from-your-respository> testapi`\n\t\t\t- if you don't yet have Git\n\t\t\t\t- `sudo pacman -S git`\n\t\t- if you haven't set up an SSH key for your repository yet, [see this howto](https://edwardtanguay.netlify.app/howtos?id=605) (search for `keygen`)##gettherepo2\n\t\t\t- then clone the repository again and it will work:\n\t\t\t\t- `git clone <copy-from-your-respository> testapi`##nowthcloneworks\n\t- deploy your API at its port 4447\n\t\t- check if you have **node and npm**##nodenpmnohave\n\t\t- if you don't have **node and npm** yet, then install them\n\t\t\t- `sudo pacman -Syu nodejs npm`##thenode18\n\t\t- go into the directory of the Node application\n\t\t\t- `cd testapi`\n\t\t- install the node modules with \n\t\t\t- `npm i`\n\t\t- start the app and view in browser\n\t\t\t- `npm start`\n\t\t\t- it says it is running on port 4447\n\t\t\t- if you have a firewall attached to your Hetzner machine, open it now and create a rule to allow incoming traffic on port 4447##setfirewall4\n\t\t\t- then in your browser, type e.g. `http://YOUR-DOMAIN-NAME:4447` (not https, but **http**), and you will see that it works:##the477works\n\t\t- **PROBLEM:**\n\t\t\t- 1. the current solution only works with http but not https\n\t\t\t- 2. you generally don't want to host applications on the Internet under port numbers but rather **subdomains**\n\t\t\t\t- with a subdomain, you can later change port numbers if you need to and remap it to the subdomain which stays the same for the users\n\t\t\t\t- a website with a port number looks less professional and is more difficult for users to type\n\t- **SOLUTION:** create a subdomain called \"testapi\" at your domain provider\n\t\t- if your domain provider is domainssaubillig.de, it looks like this\n\t\t\t- domain name [bearbeiten]\n\t\t\t- Subdomains\n\t\t\t- [Neue Subdomain anlegen]\n\t\t\t- enter name, e.g. `testapi`\n\t\t\t- testapi [bearbeiten]\n\t\t\t- then enter the IP address of your host for the subdomain:##testapiinin\n\t\t\t- it will then be listed as a subdomain:##saudomainin\n\t\t- if your domain provider is **Hetzner**, then \n\t\t\t- click on **konsoleH**:##onthekon\n\t\t\t- click on your Domain name\n\t\t\t- Einstellungen\n\t\t\t- DNS-Verwaltung\n\t\t\t- there is no section for subdomains, so enter the subdomain as an A-Record:##entertestapi\n\t\t\t- note that when you now go to **http://testapi.tkserv.eu**, it shows the content for the page **http://tkserv.eu** since this is the IP we gave for it##thetestapitk\n\t\t- in the `/etc/caddy/Caddyfile` add this entry:\n\t\t\t----------------------------------------------------------\n\t\t\ttestapi.tkserv.eu {\n\t\t\t\treverse_proxy localhost:4447\n\t\t\t}\n\t\t\t----------------------------------------------------------\n\t\t\t- restart the Caddy server\n\t\t\t\t- `sudo systemctl restart caddy`\n\t\t\t- start the Node/Express app again:\n\t\t\t\t- `cd /var/www/testapi`\n\t\t\t\t- `npm start`\n\t\t\t- your app will now be available:##theattthttpattestapi\n\t\t- **PROBLEM:** if you stop your **npm start** command, or if your Node app encounters an error and crashes, then your site will no longer be available:##ifyoustoptheser\n\t\t- **SOLUTION:** use **pm2** to robustly serve keep your API running 24/7:\n\t\t\t- pm2 is a process manager which will keep your Node and React apps alive and running at their subdomains\n\t\t\t- install pm2\n\t\t\t\t- `sudo pacman -S pm2`\n\t\t\t- tell pm2 to serve your Node/Express app\n\t\t\t\t- navigate to your in your app folder \n\t\t\t\t\t- `/var/www/testapi`\n\t\t\t\t- app your app to pm2\n\t\t\t\t\t- `pm2 start --name \"testapi\" npm -- start`\n\t\t\t- now note that your API is running without having to have the **npm start** command running\n\t\t\t\t- pm2 is managing the process in the background##pm2takingcareofit\n\t\t\t- you can start and stop the pm2 process like this:##dothestartstopok\n- **Make a local change in the Node/Express app and redeploy to Hetzner**\n\t- let's now make a change to our local Node/Express app and redeploy to Hetzner\n\t\t- we'll add a `/books` route which serves some books to display\n\t\t- later when we create and host our React app at Hetzner, we'll consume this API and display the books\n\t\t- we'll also put the port in an environment variable to show how environment variables work\n\t- make local changes and push code to GitHub\n\t\t- **server.js**\n\t\t\t------------------------------------------\n\t\t\tconst books = [\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"buildingMicroservices\",\t\t\t\t\n\t\t\t\t\t\"title\": \"Building Microservices\",\n\t\t\t\t\t\"description\": \"Seems to be a high-level abstract book how to not only implement microservices but how to get your head around the paradigm shifts involved, e.g. from request-response to event-driven patterns.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"gatsbyEcommerce\",\t\t\t\t\n\t\t\t\t\t\"title\": \"Gatsby E-Commerce\",\n\t\t\t\t\t\"description\": \"An interesting aspect of Gatsby: using it for e-commerce site which focuses on practical tips around this focus.\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"rustWeb\",\t\t\t\t\n\t\t\t\t\t\"title\": \"Rust Web Programming\",\n\t\t\t\t\t\"description\": \"Looking forward to creating sites in Rust on my Debian box at Hetzner. This looks like a practical way to learn Rust in order to actually build something useful.\"\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tapi.get('/books', function (req, res) {\n\t\t\t\tres.send(books);\n\t\t\t});\n\t\t\t------------------------------------------\n\t\t- in your browser, **/books** should now output the JSON array with three book objects##bookshouls\n\t\t- now let's set up an environment variable for our port and change the port to 4778 to make sure it works\n\t\t\t- `npm i dotenv`\n\t\t\t- **.env**\n\t\t\t\t---------------------------------\n\t\t\t\tPORT = 4448\n\t\t\t\t---------------------------------\n\t\t\t- **server.js**\n\t\t\t\t----------------------------------\n\t\t\t\timport dotenv from 'dotenv';\n\n\t\t\t\tdotenv.config();\n\n\t\t\t\tconst api = express();\n\t\t\t\tconst PORT = process.env.PORT;\t\t\t\n\t\t\t\t----------------------------------\n\t\t\t- the site now runs on port 4448 which comes from the .env file:##the4448\n\t\t\t- the plan is at Hetzner to set up an .env file that has a different port, namely 4447\n\t\t- don't forget to add the .env to your **.gitignore** file, so that the .env file is not checked into GitHub:\n\t\t\t-----------------------------------\n\t\t\tnode_modules\n\t\t\t.env\n\t\t\t-----------------------------------\n\t\t- push the changes to GitHub\n\t- deploy to Hetzner\n\t\t- on your Hetzner machine, go to `/var/www/testapi`\n\t\t- pull code from GitHub\n\t\t\t- `git pull`\n\t\t- restart the app with pm2\n\t\t\t- `pm2 restart testapi`##twobutnowork\n\t\t- **PROBLEM:** notice in your browser, that the site does not work yet:##theaotherbadgate\n\t\t- **SOLUTION:** look at the pm2 logs for this app: `pm2 logs testapi`:\n\t\t\t- we forgt to import the new node module that was added (dotenv)##cannotfinddotenv\n\t\t\t- `npm i`\n\t\t\t- `pm2 restart testapi`\n\t\t- **PROBLEM:** notice in your browser, that the site still does not work yet:##theaotherbadgate\n\t\t- **SOLUTION:** look at the pm2 logs for this app: `pm2 logs testapi`:\n\t\t\t- we forgot to add a **.env file** here on the server:##nowtheundefined\n\t\t\t- create **.env** file with port **4447** since this is the port that we had opened for incoming traffic in the firewall\n\t\t\t\t---------------------------------------\n\t\t\t\tPORT = 4447\n\t\t\t\t---------------------------------------\n\t\t\t- `pm2 restart testapi`\n\t\t\t- and now the book route works as well:##booksnowsiteworksh\n- **Create a React site on your local machine**\n\t- on your local machine, go to your projects directory\n\t- create the site\n\t\t- `npm create vite`\n\t\t\t- `hetzner-003-testreact`\n\t\t\t- **react**\n\t\t\t- **react-ts** (in general it's a good idea to program with TypeScript when you can)\n\t- open in VSCode\n\t\t- `code hetzner-003-testreact`\n\t- view site in browser\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- you will see the starter site:##vitereactj\n\t- minimize site\n\t\t- create local Git repository before you start\n\t\t\t- `git init -b main`\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\n\t\t\timport './App.css'\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Books</h1>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\texport default App\t\t\t\n\t\t\t----------------------------------------\n\t\t- blank out the **index.css** file\n\t\t- **App.css**\n\t\t\t---------------------------------------\n\t\t\tbody {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tbackground-color: #333;\n\t\t\t\tpadding: 1rem 2rem;\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- **main.tsx** - remove StrictMode which makes your useEffect render twice in development, which can cause hard-to-find bugs\n\t\t\t---------------------------------------------\n\t\t\timport ReactDOM from 'react-dom/client';\n\t\t\timport App from './App';\n\t\t\timport './index.css';\n\n\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t<App />\n\t\t\t);\n\t\t\t---------------------------------------------\n\t\t- **PROBLEM:** when you reload the site, it blinks a white flash\n\t\t- **SOLUTION:** change the immediately loaded background-color the same to the later-rendered background color\n\t\t\t- **index.html** - change title and implement fix so screen doesn't flash white on reload\n\t\t\t\t----------------------------------------\n\t\t\t\t<title>Books</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t}\n\t\t\t\t</style>\t\t\t\n\t\t\t\t----------------------------------------\n\t\t- minimized site should look like this:##theminiiimis\n\t- load the book data from our local backend API (running on port 4448) and display\n\t\t- be sure that your local backend site is running on port 4448 (`npm run dev`)\n\t\t- `npm i axios`\n\t\t- get books and display how many there are as a test:\n\t\t\t- **App.tsx**\n\t\t\t\t-----------------------------------\n\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\timport './App.css';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\tconst url = 'http://localhost:4448/books';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\tconst [books, setBooks] = useState([]);\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tsetBooks((await axios.get(url)).data);\n\t\t\t\t\t\t})();\n\t\t\t\t\t}, []);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>Books</h1>\n\t\t\t\t\t\t\t<p>There are {books.length} books.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\texport default App;\n\t\t\t\t-----------------------------------\t\t\n\t\t- **PROBLEM:** you get a CORS error##thecorserrrrror222\n\t\t- **SOLUTION:** implement CORS on the backend API project\n\t\t\t- go back into VSCode of your backend API\n\t\t\t- `npm i cors`\n\t\t\t- **server.js**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport cors from 'cors';\n\n\t\t\t\tcors();\n\n\t\t\t\tapi.use(cors());\n\t\t\t\t---------------------------------------------\n\t\t\t- you will no longer have a CORS error##nomoreerrorsjcores\n\t\t\t- redeploy the backend to Hetzner as we did above\n\t\t\t\t- push to GitHub\n\t\t\t\t- on Hetzner in the **testapi** directory\n\t\t\t\t\t- `git pull`\n\t\t\t\t\t- `npm i`\n\t\t\t\t\t- `pm2 restart testapi`\n\t\t- in your local frontend app, put the backend url in an environment variable and then test to see that it can also access the online API at Hetzner \n\t\t\t- create **.env** file in root directory\n\t\t\t\t- remember environment variables in React sites created with Vite must begin with `VITE_`\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\tVITE_BACKEND_URL = http://localhost:4448/books\n\t\t\t\t\t-------------------------------------\n\t\t\t- in **App.tsx** replace the `url` definition:\n\t\t\t\t---------------------------------\n\t\t\t\tconst url = import.meta.env.VITE_BACKEND_URL;\n\t\t\t\t---------------------------------\n\t\t\t- the site will work again##nomoreerrorsjcores\n\t\t\t- in the **.env** file, change the URL to the online API URL:\n\t\t\t\t-----------------------------------------------\n\t\t\t\tVITE_BACKEND_URL = https://testapi.tkserv.eu/books\n\t\t\t\t-----------------------------------------------\n\t\t\t- the site will work again##nomoreerrorsjcores\n\t\t\t- be sure to add .env to the **.gitignore** file since unfortunately Vite does not have it listed by default\n\t\t\t\t- in fact, replace the whole file with these two entries, it's all you need at the moment:\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\tnode_modules\n\t\t\t\t\t.env\t\t\t\t\t\n\t\t\t\t\t------------------------------------------------\n\t\t- display the books on the React site\n\t\t\t- add to **App.tsx**:\n\t\t\t\t-------------------------------------------\n\t\t\t\t<div className=\"books\">\n\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"book\">{book.title}</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t-------------------------------------------\n\t\t\t- **PROBLEM:** notice that TypeScript is indicating a problem:\n\t\t\t\t- what this is saying is that we have not defined what properties **book** should have\n\t\t\t\t- so TypeScript is indiciating that according to our own code, it can't guarantee that **title** is a property of the **book** object:##thetypescrippro\n\t\t\t- **SOLUTION:** we need to define an interface in order to be explicit about what kind of object we intend and expect **book** to be\n\t\t\t\t- add to **App.tsx**\n\t\t\t\t\t-----------------------------------------\n\t\t\t\t\tinterface IBook {\n\t\t\t\t\t\tidCode: string;\n\t\t\t\t\t\ttitle: string,\n\t\t\t\t\t\tdescription: string\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t-----------------------------------------\n\t\t\t\t- and add a generic type to the useState hook which tells indicates that we intend the array **books** to be an array of type **IBook**:\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t- not only does TypeScript no longer give us an error, it presents to us a dropdown of every property that **book** has since we have indicated that we expect **book** to always have these properties and none others:##notonlystype\n\t\t\t\t- **NOTE:** Regarding TypeScript, bear in mind, however, that TypeScript will not protect our code at runtime from e.g. API data that is invalid based on our interfaces, e.g. from book API data that does not have a **title** or **idCode**, since *TypeScript no longer exists when our code runs*. It only exists at development time in order to protect us from ourselves, i.e. from using invalid properties based on what we defined ourselves. \n\t\t\t- in **App.tsx**, replace the books code with this:\n\t\t\t\t-----------------------------------------------\n\t\t\t\t<div className=\"books\">\n\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"book\">\n\t\t\t\t\t\t\t\t<img src={`https://edwardtanguay.netlify.app/share/images/techBooks/${book.idCode}.jpg`}/>\n\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t{book.description}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t-----------------------------------------------\n\t\t\t- you will see that all the data is there, we just need to style it now:##juststyleoki\n\t\t\t- install Sass quick:\n\t\t\t\t- `npm i sass`\n\t\t\t\t- rename **App.css** to **App.scss**\n\t\t\t\t- **App.tsx**:\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\timport './App.scss';\n\t\t\t\t\t-------------------------------------\n\t\t\t\t- **App.scss**\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\tbody {\n\t\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t\tpadding: 1rem 2rem;\n\n\t\t\t\t\t\t.books {\n\t\t\t\t\t\t\t.book {\n\t\t\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\t\tgap: 1rem;\n\t\t\t\t\t\t\t\twidth: 35rem;\n\t\t\t\t\t\t\t\talign-items: flex-start;\n\t\t\t\t\t\t\t\tborder-radius: .5rem;\n\n\t\t\t\t\t\t\t\timg {\n\t\t\t\t\t\t\t\t\twidth: 8rem;\n\t\t\t\t\t\t\t\t\tobject-fit: contain;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t.info {\n\t\t\t\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\t\t\t\tcolor:rgb(219, 198, 160);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\t\t\t\tfont-size: 1.1rem;\n\t\t\t\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t-----------------------------------------------\n\t\t\t- the page should now look like this:##bookslookingok\n- **Deploy the React site to Hetzner via GitHub**\n\t- commit your code for the frontend and push it to a private GitHub repository, e.g. `hetzner-003-testreact`\n\t- on your Hetzner machine, set up the React site\n\t\t- copy the GitHub URL by clicking the clone button on your respository\n\t\t- go to `/var/www/`\n\t\t- clone your project with e.g. \n\t\t\t- `git clone git@github.com:edwardtanguay/hetzner-003-testreact.git testreact`\n\t\t- enter the created directory\n\t\t\t- `cd testreact`\n\t\t- install node modules\n\t\t\t- `npm i`\n\t- since this is a React site and not a server-side site, we will not need to host it with pm2\n\t- we simply need to build it to the **dist** directory, then serve this static directory from Caddy\n\t\t- build site\n\t\t\t- `npm run build`\n\t\t\t- note there is now a **dist** directory\n\t\t- create an entry to host this site in the caddy config file\n\t\t\t- add to **/etc/caddy/Caddyfile**\n\t\t\t\t-------------------------------------------\n\t\t\t\ttestreact.tkserv.eu {\n\t\t\t\t\t\troot * /var/www/testreact/dist\n\t\t\t\t\t\tfile_server\n\t\t\t\t}\n\t\t\t\t-------------------------------------------\n\t\t\t- restart the caddy server\n\t\t\t\t- `sudo systemctl restart caddy`\n\t\t\t- make sure you have a subdomain called **testreact** pointing to your machine's IP address##theipfortestreact\n\t\t\t- in your browser, go to https://testreact.tkserv.eu\n\t\t\t- **PROBLEM: ** the site renders but there are 0 books and an error which is cryptic (\"s\" is undefined) since the build code has been minimized\n\t\t\t\t- the variable **s** is the minimized version of the **url** variable which is not defined since we **forget to create the .env file**\n\t\t- **SOLUTION:** we need to add the `.env` file here on the Hetzner server\n\t\t\t- **.env**\n\t\t\t\t-------------------------------------------------\n\t\t\t\tVITE_BACKEND_URL = https://testapi.tkserv.eu/books\n\t\t\t\t-------------------------------------------------\n\t\t\t- rebuild the /dist folder\n\t\t\t\t- `npm run build`\n\t\t\t- you will be able to see the site:##bookhttpsok","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-13 21:56:17","systemWhoCreated":"systemUnknown"},{"id":608,"category":".NET Core","title":"Install .NET Core on Debian and create console app","body":"- setup\n\t- `wget https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb -O packages-microsoft-prod.deb`\n\t- `sudo dpkg -i packages-microsoft-prod.deb`\n\t- `rm packages-microsoft-prod.deb`\n- install .NET Core SDK\n\t- `sudo apt-get update`\n\t- `sudo apt-get install -y dotnet-sdk-6.0`\n- create console app and execute\n\t- make directory for project, e.g. `mkdir testdotnet`\n\t- `dotnet new console -lang C#`\n\t- `dotnet build`\n\t- `dotnet run`##andthdotnetrun\n- basic C#:\n\t- **Program.cs**\n\t\t-----------------------------------------\n\t\tvar countries = new List<string>() {\"Germany\", \"France\", \"Sweden\", \"Netherlands\"};\n\n\t\tConsole.WriteLine(\"ALL COUNTRIES:\");\n\n\t\tforeach(var country in countries) {\n\t\t\t\tConsole.WriteLine(\"- \" + country);\n\t\t}\n\t\t-----------------------------------------\n\t- `dotnet build`\n\t- `dotnet run`##therunohyeah\n- use LINQ:\t\n\t- add to **Program.cs**\n\t\t-----------------------------------------\n\t\tvar longCountries = countries.Where(m -> m.Length > 6);\n\t\tConsole.WriteLine(\"LONG COUNTRIES:\");\n\t\tforeach(var country in longCountries) {\n\t\t\t\tConsole.WriteLine(\"- \" + country);\n\t\t}\t\t\n\t\t-----------------------------------------\n\t- `dotnet build`\n\t- `dotnet run`##expect222","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-14 01:07:46","systemWhoCreated":"systemUnknown"},{"id":609,"category":"React","title":"Simple example of allowing the user to edit items of an item property array","body":"- React gives you an easy way to allow the user to edit any part of an object as state variable  no matter how large and complex\n\t- in the event handler:\n\t\t- 1. create a copy of the object\n\t\t- 2. change the copied object based on user input\n\t\t- 3. save that changed, copied object back into the state variable\n- Full code for this example is here: https://github.com/edwardtanguay/test-react-array-edit\n- this example works like this:#gif#editingarrayofobject\n- **App.jsx**\n\t------------------------------------------\n\timport { useState } from 'react';\n\timport './App.scss';\n\n\tconst _intitialItem = {\n\t\ttitle: 'Warehouse 002',\n\t\tmaterials: ['pipes', 'plastic', 'metal', 'sand']\n\t};\n\n\tfunction App() {\n\t\tconst [item, setItem] = useState(_intitialItem);\n\n\t\tconst handleMaterialChange = (currentItem, e, i) => {\n\t\t\tconst newValue = e.target.value;\n\t\t\tconst _item = { ...currentItem };\n\t\t\t_item.materials[i] = newValue;\n\t\t\tsetItem(_item);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>{item.title}</h1>\n\n\t\t\t\t{item.materials.map((material, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tvalue={material}\n\t\t\t\t\t\t\t\tonChange={(e) => handleMaterialChange(item, e, i)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\n\t\t\t\t<pre className=\"showObject\">{JSON.stringify(item, null, 2)}</pre>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\t\n\t------------------------------------------\n- **App.scss**\n\t------------------------------------------------\n\t#root {\n\t  max-width: 1280px;\n\t  margin: 0 auto;\n\t  padding: 2rem;\n\t  text-align: center;\n\n\t  input {\n\t\tfont-size: 2rem;\n\t\tmargin-bottom: 1rem;\n\t  }\n\n\t  .material {\n\t\tfont-size: 2rem;\n\t  }\n\n\t  .showObject {\n\t\tbackground-color: #111;\n\t\ttext-align: left;\n\t\tpadding: 1rem;\n\t  }\n\t}\n\t------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-16 14:52:36","systemWhoCreated":"systemUnknown"},{"id":610,"category":"Node","title":"How to use validatorjs to validate form data on a POST route in Node/Express","body":"- the npm package [validatorjs](https://www.npmjs.com/package/validatorjs) allows you to easily give a list of rules with a simple object like this:\n\t-------------------------------\n\tconst rules = {\n\t\tfirstName: 'required|between:3,30|alpha',\n\t\tlastName: 'required|between:3,30|alpha',\n\t\tage: 'required|integer|between:18,99',\n\t\temail: 'required|email',\n\t\tuserName: 'required|alpha_dash|between:3,15'\n\t};\n\t-------------------------------\n- the package works with ES6 modules \n- error messages sent to the frontend are in full sentences and multi-lingual\n- full code is here:\n\t- https://github.com/edwardtanguay/et-001-validatorjs-example\n- you can use the REST Client to test your validation rules like this:#gif#validateuserdatademo\n- **src/controller/users.controller.js**\n\t-----------------------------------------------------------\n\timport Validator from 'validatorjs';\n\n\texport const getUsers = (req, res) => {\n\t\tres.json({\n\t\t\tdata: [\n\t\t\t\t{\n\t\t\t\t\tfirstName: 'Henri',\n\t\t\t\t\tlastName: 'Schmidt',\n\t\t\t\t\tage: 26,\n\t\t\t\t\temail: 'hs@example.com',\n\t\t\t\t\tuserName: 'hschmidt'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfirstName: 'Alesi',\n\t\t\t\t\tlastName: 'Morgenstern',\n\t\t\t\t\tage: 27,\n\t\t\t\t\temail: 'am@example.com',\n\t\t\t\t\tuserName: 'amorgenstern'\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t};\n\n\tconst rules = {\n\t\tfirstName: 'required|between:3,30|alpha',\n\t\tlastName: 'required|between:3,30|alpha',\n\t\tage: 'required|integer|between:18,99',\n\t\temail: 'required|email',\n\t\tuserName: 'required|alpha_dash|between:3,15'\n\t};\n\n\texport const addUser = (req, res) => {\n\t\tconst data = req.body;\n\n\t\tconst validation = new Validator(data, rules);\n\t\tconst success = validation.passes();\n\n\t\tif (success) {\n\t\t\tres.json({\n\t\t\t\tstatus: 'ok'\n\t\t\t});\n\t\t} else {\n\t\t\tres.status(406).json({\n\t\t\t\tstatus: 'error',\n\t\t\t\terrors: [validation.errors]\n\t\t\t});\n\t\t}\n\t};\t\n\t-----------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-20 16:00:54","systemWhoCreated":"systemUnknown"},{"id":612,"category":"JS/DOM","title":"How to create an HTML/CSS/JS website app that tests you on flashcards which you publish to Netlify and use on your smartphone","body":"- **What we will make:**\n\t- the end goal of this howto is to create an website that functions like an app on your smartphone\n\t- the purpose is to \n\t\t- get you up to speed with creating a website with JS/DOM that is published online so that you can access it with your phone\n\t\t- use this a way to apply what you learn in JS/DOM to an real, live app that you and others can actually use\n\t\t- apps like this are good to link to from your CV to show your ability to create useful apps that people use\n- **How we will make it:**\n\t- we will first create all the necessary parts of a JS/DOM app and test locally\n\t\t- HTML file\n\t\t- CSS file\n\t\t- JavaScript file\n\t- we will add interactivity to it, i.e. click a button to change something on the page\n\t- we will then transform this test-app into a useful flashcard app which e.g. asks a question to which you have to click the button to see the answer\n\t- we will then publish this at Netlify via GitHub\n\t- we will then test our app on our smartphones\n- **Full code can be found here:**\n\t- has same code as below:\n\t\t- https://github.com/edwardtanguay/et001-jsdom-basic\n\t- includes toggle for flashcard:\n\t\t- https://github.com/edwardtanguay/et002-jsdom\n\t- has toggle for flashcard and reads external API with fetch\n\t\t- https://github.com/edwardtanguay/et003-jsdom\n- **app looks like this when finished:**##flashcardappsmartj\n- **index.html**\n\t--------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\"\n\t\t\t  href=\"main.css\">\n\t\t<title>et001-jsdom-basic</title>\n\t\t<script src=\"main.js\"\n\t\t\t\tdefer></script>\n\t</head>\n\n\t<body>\n\t\t<h1>Flashcard App</h1>\n\t\t<div class=\"flashcardArea\">\n\t\t\t<div class=\"flashcard\">\n\t\t\t\t<p class=\"front\">How to do you create an event in JavaScript?</p>\n\t\t\t\t<p class=\"back\"></p>\n\t\t\t\t<button class=\"showAnswerButton\">show answer</button>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n\n\t</html>\t\n\t--------------------------\n- **main.css**\n\t-------------------------------\n\tbody {\n\t\tbackground-color: #333;\n\t\tcolor: #ccc;\n\t\tfont-family: sans-serif;\n\t\tpadding: 0 1rem;\n\t}\n\n\th1 {\n\t\tfont-size: 1.6rem;\n\t}\n\n\t.back {\n\t\tcolor: yellow;\n\t}\n\t-------------------------------\n- **main.js**\n\t----------------------------------\n\tconst frontElem = document.querySelector('.front');\n\tconst backElem = document.querySelector('.back');\n\tconst showAnswerButtonElem = document.querySelector('.showAnswerButton');\n\n\tshowAnswerButtonElem.addEventListener('click', () => {\n\t\tshowAnswerButtonElem.style.display = 'none';\t\n\t\tbackElem.innerHTML = \"addEventListener('click', () => {...})\";\n\t});\n\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-23 08:17:18","systemWhoCreated":"systemUnknown"},{"id":613,"category":"Hetzner","title":"Set up TypeScript/registration site on a Arch Linux Hetzner machine with pm2/Caddy","body":"- **What we will do**\n\t- we will take [this MERN/TypeScript app](https://edwardtanguay.netlify.app/howtos?id=598) that demonstrates a registration site using NodeMailer and get it running on an Arch machine at Hetzner using pm2 and the Caddy web server\n\t- the reason I am making this Howto is that \n\t\t- I installed this site on a Debian machine at Hetzner with nginx/pm2 and it worked fine (except for NodeMailer being blocked, but that's [another issue](https://onespace.netlify.app/forays?id=230))\n\t\t- others had installed this same app on an Arch machine at Hetzner using mp2/Caddy and could Anot resolve the CORS errors that occurred\n\t\t- therefore I'm setting this same app up on that same Arch-mp2-Caddy environment to get one it to work so we can use it as a reference of how to fix problems that others are having\n\t- we will use these repositories:\n\t\t- Backend: https://github.com/edwardtanguay/et003test\n\t\t- Frontend: https://github.com/edwardtanguay/et003testfront\n- **setup backend at Hetzner**\n\t- get backend running on port\n\t\t- go to projects folder on Arch machine\n\t\t- `git clone git@github.com:edwardtanguay/et003test.git`\n\t\t- `cd et003test`\n\t\t- `npm i`\n\t\t- copy content of .env file from Debian machine\n\t\t- find out scripts\n\t\t\t- `less package.json`\n\t\t- `npm run build`\n\t\t- `npm start`\n\t\t- works in browser: http://tkserv.eu:3045##the3045ok\n\t- get pm2 to run the app in the background\n\t\t- `pm2 start --name et003test npm -- start##okandpm2et003`\n\t- setup subdomain at Hetzner and register with Caddy\n\t\t- konsoleH##thekonsolh\n\t\t- add A-Record##addarecordj\n\t\t- `sudo vim /etc/caddy/Caddyfile`\n\t\t\t- add:\n\t\t\t\t---------------------------------------------------\n\t\t\t\tet003test.tkserv.eu {\n\t\t\t\t\t\treverse_proxy localhost:3045\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t---------------------------------------------------\n\t\t- `sudo systemctl restart caddy`\n\t\t- works in browser at domain: https://et003test.tkserv.eu/##andtkservewokwj\n\t- test in local test.rest##thetestrestrowksk\n\t- test backend from local frontend\n\t\t- `git clone https://github.com/edwardtanguay/et003testfront`\n\t\t- add **.env**\n\t\t\t-----------------------------\n\t\t\tVITE_BACKEND_URL = https://et003test.tkserv.eu\n\t\t\tVITE_SAFE_ORIGIN_CODE = 1234567\t\t\t\n\t\t\t-----------------------------\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- in browser go to: http://localhost:5173, it doesn't work##changetofront\n\t\t- change FRONTEND entry in online backend **.env** temporarily to test with the local frontend:\n\t\t\t-----------------------------\n\t\t\tFRONTEND_BASE_URL = http://localhost:5173\t\t\n\t\t\t-----------------------------\t\t\n\t\t- `npm run build`\n\t\t- `pm2 list`\n\t\t- `pm2 restart 1` (or whatever number your app is)\n\t\t- note it works without CORS errors:##itworkswithoutcorssss\t\t\n- **setup frontend at Hetzner**\n\t- clone and build frontend on server\n\t\t- go to projects folder on Arch machine\n\t\t- `git clone git@github.com:edwardtanguay/et003testfront.git`\n\t\t- `cd et003testfront`\n\t\t- `npm i`\n\t\t- `sudo vim .env` and define backend as our backend already running on our machine\n\t\t\t-----------------------------\n\t\t\tVITE_BACKEND_URL = https://et003test.tkserv.eu\n\t\t\tVITE_SAFE_ORIGIN_CODE = 1234567\t\t\t\n\t\t\t-----------------------------\t\n\t\t- `npm run build` - to make optimized site exist in /dist\n\t- setup subdomain at Hetzner and register with Caddy\n\t\t- konsoleH##thekonsolh\n\t\t- create another subdomain:##anotehristjsiin\n\t\t- `sudo vim /etc/caddy/Caddyfile`\n\t\t\t- add:\n\t\t\t\t---------------------------------------------------\n\t\t\t\tet003test.tkserv.eu {\n\t\t\t\t\t\treverse_proxy localhost:3045\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t---------------------------------------------------\n\t\t- `sudo systemctl restart caddy`\t\n\t\t- open site in browser: https://et003testfront.tkserv.eu, there is an error since we still have the entry for our local site in our .env file:##notyetwithfoccores\n\t\t- in backend **.env** file, chnage FRONTEND_BASE_URL back so it points to our frontend site at Hetzner:\n\t\t\t-----------------------------\n\t\t\tFRONTEND_BASE_URL = https://et003testfront.tkserv.eu\t\t\n\t\t\t-----------------------------\n\t\t- `npm run build`\n\t\t- `pm2 list`\n\t\t- `pm2 restart 1` (or whatever number your app is)\n\t\t- it works without cors problems:##itworksforcorsno\n\t- fix reload page problem in React Router\n\t\t- when you are on e.g. https://et003testfront.tkserv.eu/register and click RELOAD, you get a blank page\n\t\t- interesting that this is not a problem when hosting on Debian with nginx:\n\t\t\t- https://et003testfront.tanguay.eu/register\n\t\t- you have to add **try_files {path} /index.html** entry to your CaddyFile\n\t\t\t- `sudo vim /etc/caddy/Caddyfile`\n\t\t\t\t---------------------------------------\n\t\t\t\tet003testfront.tkserv.eu {\n\t\t\t\t\t\troot * /var/www/et003testfront/dist\n\t\t\t\t\t\ttry_files {path} /index.html\n\t\t\t\t\t\tfile_server\n\t\t\t\t}\n\t\t\t\t---------------------------------------\n\t\t- `sudo systemctrl restart caddy`\n\t\t- the page reloads fine now when you press F5","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-29 07:26:13","systemWhoCreated":"systemUnknown"},{"id":614,"category":"JS/DOM","title":"Create JS/DOM site that loads data from static and async/fetch modules","body":"- **What we will build:**\n\t- this is a plain vanilla site: HTML, CSS and JavaScript files\n\t- we have a main.js file that uses ES6 modules to load data in order to display\n\t- there are two data modules which are loaded\n\t\t- **books.js** which simply returns a JavaScript array of books\n\t\t- **techBooks.js** which uses `fetch` to load books via an external API\n\t\t\t- this module of course has to use a Promise since it is loading asynchronous data\n- **Why build this site?**\n\t- this shows you how you can organize a JS/DOM application with modern ES6 modules which load async data via the Internet\n\t- it uses no **framework** (React, Angular, Vue) or **bundler** (Webpack, Parcel) or **task runner** (Gulp) or **build tool** (Vite, create-react-app)\n\t- in this way, it shows you the simple skills to create quite robust applications with only HTML, CSS and JavaScript\n- full code is here:\n\t- https://github.com/edwardtanguay/et004-jsdom-plain\n- it will look like this:##jsdomjlookks\n- **index.html**\n\t----------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta http-equiv=\"X-UA-Compatible\"\n\t\t\t  content=\"IE=edge\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\"\n\t\t\t  href=\"css/main.css\">\n\t\t<script src=\"js/main.js\" defer type=\"module\"></script>\n\t\t<title>Book Site</title>\n\t</head>\n\n\t<body>\n\t\t<h1>Book Site</h1>\n\t\t<div class=\"content\"></div>\n\t</body>\n\n\t</html>\n\t----------------------------------------\n- **css/main.css**\n\t----------------------------------------\n\tbody {\n\t\tbackground: #333;\n\t\tcolor: #ccc;\n\t\tfont-family: sans-serif;\n\t\tpadding: 0 1rem;\n\t}\n\n\t.book {\n\t\tbackground: #222;\n\t\tmargin-bottom: 1rem;\n\t\tpadding: 1rem;\n\t\twidth: 23rem;\n\t}\n\n\t.book .title {\n\t\tcolor: rgb(215, 215, 147);\n\t\tfont-size: 1.4rem;\n\t}\n\n\t.techBook {\n\t\tbackground: #111;\n\t\tborder-radius: 5px;\n\t\tborder: 1px solid #777;\n\t\tmargin-bottom: 1rem;\n\t\tpadding: 1rem;\n\t\twidth: 23rem;\n\t}\n\n\t.techBook .title {\n\t\tcolor: rgb(207, 156, 68);\n\t\tfont-size: 1.4rem;\n\t}\n\t----------------------------------------\n- **js/main.js**\n\t----------------------------------------\n\timport { books } from './books.js';\n\timport { getTechBooks } from './techBookModel.js';\n\n\t(async () => {\n\t\tconst techBooks = await getTechBooks();\n\n\t\tconst contentElem = document.querySelector('.content');\n\n\t\tcontentElem.innerHTML += `\n\t<p>There are ${books.length} books loaded locally:</p>\n\t\t${books\n\t\t\t.map((book) => {\n\t\t\t\treturn `\n\t\t\t<div class=\"book\">\n\t\t\t\t<div class=\"title\">${book.title}</div>\n\t\t\t\t<div class=\"author\">by ${book.author}</div>\n\t\t\t</div>\n\t\t\t`;\n\t\t\t})\n\t\t\t.join('')}\n\t`;\n\n\t\tcontentElem.innerHTML += `\n\t<p>There are ${techBooks.length} books loaded via asynx module that fetchs data via an external API:</p>\n\t\t${techBooks\n\t\t\t.map((techBook) => {\n\t\t\t\treturn `\n\t\t\t<div class=\"techBook\">\n\t\t\t\t<div class=\"title\">${techBook.title}</div>\n\t\t\t\t<div class=\"description\">${techBook.description}</div>\n\t\t\t</div>\n\t\t\t`;\n\t\t\t})\n\t\t\t.join('')}\n\t`;\n\t})();\n\t----------------------------------------\n- **js/books.js**\n\t----------------------------------------\n\texport const books = [\n\t\t{\n\t\t\ttitle: \"Sapiens\",\n\t\t\tauthor: \"Yuval Harari\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"Seven Habits of Highly Effective People\",\n\t\t\tauthor: \"Stephen Covey\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"Wovon ich rede, wenn ich vom Laufen rede\",\n\t\t\tauthor: \"Haruki Murakami\"\n\t\t}\n\t];\n\t----------------------------------------\n- **js/techBookModel.js**\n\t----------------------------------------\n\tconst url = 'https://edwardtanguay.netlify.app/share/techBooks.json';\n\n\texport const getTechBooks = () => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(url);\n\t\t\t\tconst employees = await response.json();\n\t\t\t\tresolve(employees);\n\t\t\t})();\n\t\t});\n\t};\t\n\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-09-30 08:49:31","systemWhoCreated":"systemUnknown"},{"id":615,"category":"Online Hosting","title":"How to avoid and minimize costs when using Netlify's Starter Plan","body":"- **Netlify**\n\t- **Just because you have a Starter plan at Netlify doesn't mean you won't be charged.**\n\t- I have had a **Starter** plan with Netlify since April 2020, which Netlify advertises as free:##netlifypricing2\n\t- In September 2022, I received a notification from Netlify that **my sites had incurred a $55 fee**:##bandwithnetlifiy\n\t- This e-mail and the information I could find on the site was not clear about what the charges were exactly for, e.g. **1 Extra Bandwidth From 2022-08-29 to 2022-08-29**. I wrote to Netlify and received the following answer:##thenetexplan\n\t- The way I understand this is that a **Starter Plan** is **allowed to send 100 GB of data from its Netlify sites to browsers** which accumulates month after month (does not get reset each month). This is actually quite a lot of data, so unless you have large ISO files, videos or MP3s available for download on your site, you probably will never have to worry about exceeding this 100 GB limit. In my case, I have two sites (https://onespace.netlify.app) and (https://edwardtanguay.netlify.app) which list a large amount of text on each page load as well as screenshot images. In the 16 months since I have had my starter plan, these two sites indeed exceeded the 100 GB limit. \n\t- The only way to track your data use over time seems to be to **Team Overview** and notice the number under **Bandwidth used** and then record this for yourself:##thenetlamount\n\t- Currently my sites seem to be sending about 500 MB per month, which means that I am **due to get another $55 charge in 199 months, or 16 years**.\n\t\t- **How my sites purportedly incurred 100 GB in only 16 months is still unexplained.**\n\t\t- I asked Netlify about this, they couldn't give me any information on data transfer per time period, and said that there is no way for customers to track this history either, other than to view the above page regularly.\n\t- for a full list of **what you can be charged for on your Starer Plan**, scroll down on [Netlify's pricing page](https://www.netlify.com/pricing). Note that here the **100GB /month** is very misleading, since as they explained in the e-mail, this does not reset every month, so if you use 50 GB in one month and 50 GB in the next, you will be charged the $55 fee. It should read **every 100 GB**:##netfullfeature","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-03 22:47:48","systemWhoCreated":"systemUnknown"},{"id":616,"category":"Online Providers","title":"Responsible cost management when using Hetzner to host Linux machines","body":"- while at Hetzner you can theoretically **host a Linux machine in the cloud for as low as 3.92 € per month** (for 1 CPU, 2GB RAM, 20GB SSD), there are other costs such as:\n\t- IP addresses (50 cents per month)\n\t- domain names (10 € per year)\n\t- added features on your machines, e.g. **3 CPUs, 4GB RAM, 80GB SSD = 8,39 € per month**\n- Hetzner doesn't remind you anywhere when you log in that a monthly invoice is due##hetznoremind\n\t- so pay attention to your e-mails or set a month reminder in your calendar to pay your Hetzner bill\n\t- to find your invoice on your site in order to pay it, click on your profile icon and **Rechnungen**##ttherech\n\t- Hetzner is very good about providing a clear overview of costs so that you can better manage them. For instance, I knew that my October payment would be more than my past payments since I had set up a numerous new machines for various amounts of days, and had registered a domain name with Hetzner. To see an item-by-item breakdown of everything you are paying for, click ##therechtopay\n\t- Notice that in September 2022, while my Rechnung is full of three pages of items, the **main costs were three machines** I had running for most of the month, and **the 10€/year domain name registration**. The rest of the small charges were either IP addresses (maximal 50 cents per month) or machines that I created for a day or two in order to test something out.##thehetznerfull\n- I pay with PayPal which is very convenient and fast. You can also pay with credit card.","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-04 00:45:56","systemWhoCreated":"systemUnknown"},{"id":617,"category":"React","title":"How to upload a file from React to a Node/Express backend using multer and lowdb","body":"- **What we will create:**\n\t- This howto shows you how to make a React frontend that uploads files and meta information about the files to a Node/Express backend that saves this information in a database (lowdb) and the uploaded files in a directory.\n- **How it will work:**\n\t- The frontend will use multer to send the user-selected image to the backend along with the meta information from the frontend form.\n\t- The backend will use lowdb to save the meta information in a JSON file and save the uploaded file in a directory that can be accessed from the front end to display and/or download the file\n\t- The app will work like this:#gif#showUploadNodeFrontBack\n- **for the best implementation of uploading: TypeScript, ES6 Modules, AppContext, React Router**, see this code:\n\t- https://github.com/edwardtanguay/upload004-backend\n\t- https://github.com/edwardtanguay/upload004-frontend\n- otherwise the code for this current howto is here:\n\t- frontend: https://github.com/edwardtanguay/et004-upload-frontend\n\t- backend: https://github.com/edwardtanguay/et004-upload-backend\n- **THIS VERSION ALLOWS YOU TO SEND AN OPTIONAL NAME FOR A FILE AND REORGANIZES THE UPLOADED FILES IN BACKEND**\n\t- frontend: https://github.com/edwardtanguay/et005-upload-backend\n\t- backend: https://github.com/edwardtanguay/et005-upload-frontend\n- build frontend\n\t- `npm create vite et004-upload-frontend`\n\t- `code et004-upload-frontend`\n\t- `npm i`\n\t- `npm run dev`\n\t- **App.jsx**\n\t\t-----------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport './App.scss';\n\t\timport axios from 'axios';\n\n\t\tconst backendUrl = 'http://localhost:5889';\n\t\tconst _initialFormFields = {\n\t\t\ttitle: '',\n\t\t\tdescription: '',\n\t\t\tnotes: ''\n\t\t};\n\t\tconst _initialUploadFile = {\n\t\t\tpreview: '',\n\t\t\tdata: '',\n\t\t\tname: ''\n\t\t};\n\n\t\tfunction App() {\n\t\t\tconst [uploadFile, setUploadFile] = useState({ ..._initialUploadFile });\n\t\t\tconst [formFields, setFormFields] = useState({ ..._initialFormFields });\n\t\t\tconst [status, setStatus] = useState('');\n\t\t\tconst [fileItems, setFileItems] = useState([]);\n\n\t\t\tconst fetchFileItems = () => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetFileItems((await axios.get(`${backendUrl}/fileitems`)).data);\n\t\t\t\t})();\n\t\t\t};\n\n\t\t\tuseEffect(() => {\n\t\t\t\tfetchFileItems();\n\t\t\t}, []);\n\n\t\t\tconst handleSubmit = async (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tif (uploadFile.data && formFields.title.trim() !== '') {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tlet formData = new FormData();\n\t\t\t\t\tformData.append('file', uploadFile.data);\n\t\t\t\t\tformData.append('title', formFields.title);\n\t\t\t\t\tformData.append('description', formFields.description);\n\t\t\t\t\tformData.append('notes', formFields.notes);\n\t\t\t\t\tformData.append('fileName', uploadFile.data.name);\n\t\t\t\t\tconst response = await fetch(`${backendUrl}/uploadfile`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t});\n\t\t\t\t\tif (response) setStatus(response.statusText);\n\t\t\t\t\tdocument.getElementById('mainForm').reset();\n\t\t\t\t\tsetFormFields({ ..._initialFormFields });\n\t\t\t\t\tsetUploadFile({ ..._initialUploadFile });\n\t\t\t\t\tfetchFileItems();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst handleFileChange = (e) => {\n\t\t\t\tconst file = e.target.files[0];\n\t\t\t\tsetStatus('');\n\t\t\t\tconst _uploadFile = {\n\t\t\t\t\tname: file.name,\n\t\t\t\t\tpreview: URL.createObjectURL(file),\n\t\t\t\t\tdata: e.target.files[0]\n\t\t\t\t};\n\t\t\t\tsetUploadFile(_uploadFile);\n\t\t\t};\n\n\t\t\tconst handleFormFieldChange = (e, fieldName) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tformFields[fieldName] = value;\n\t\t\t\tsetFormFields({ ...formFields });\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>File Uploader</h1>\n\t\t\t\t\t<main>\n\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t<form id=\"mainForm\" onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t\t\t<legend>Enter file info and choose file:</legend>\n\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"title\">Title</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"title\"\n\t\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.title}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, 'title')\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"description\">Description</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"description\"\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.description}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, 'description')\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"notes\">Notes</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.notes}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, 'notes')\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<label>File to upload</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\t\tonChange={handleFileChange}\n\t\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"preview\">\n\t\t\t\t\t\t\t\t\t\t\t{!uploadFile.name.endsWith('.jpg') && (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"previewFileName\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{uploadFile.name}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t{uploadFile.name.endsWith('.jpg') && (\n\t\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={uploadFile.preview}\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"100\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"buttonWrapper\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section className=\"fileItemsArea\">\n\t\t\t\t\t\t\t{fileItems.length < 2 && <h2>File Items</h2>}\n\t\t\t\t\t\t\t{fileItems.length >= 2 && (\n\t\t\t\t\t\t\t\t<h2>{fileItems.length} File Items</h2>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{fileItems.length === 0 && (\n\t\t\t\t\t\t\t\t<p>There are {fileItems.length} file items</p>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{fileItems.map((fileItem, i) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"fileItem\" key={i}>\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={`${backendUrl}/${fileItem.iconPathAndFileName}`}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t\t\t\t\t{fileItem.title}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t\t\t{fileItem.description}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"notes\">\n\t\t\t\t\t\t\t\t\t\t\t\t{fileItem.notes}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"fileName\">\n\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\thref={`${backendUrl}/uploadedFiles/${fileItem.fileName}`}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{fileItem.fileName}\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</main>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t-----------------------------------------------\n- build backend\n\t- `mkdir et004-upload-backend`\n\t- `code et004-upload-backend`\n\t- `npm init -y`\n\t- `mkdir images`\n\t- `npm i express cors multer`\n\t- **server.js**\n\t\t-------------------------------------\n\t\timport express from 'express';\n\t\timport cors from 'cors';\n\t\timport multer from 'multer';\n\t\timport { join, dirname } from 'path';\n\t\timport path from 'path';\n\t\timport { fileURLToPath } from 'url';\n\t\timport { Low, JSONFile } from 'lowdb';\n\n\t\tconst __dirname = dirname(fileURLToPath(import.meta.url));\n\t\tconst dbFile = join(__dirname, '/data/db.json');\n\t\tconst adapter = new JSONFile(dbFile);\n\t\tconst db = new Low(adapter);\n\n\t\tconst app = express();\n\t\tconst port = 5889;\n\n\t\tconst staticDirectory = path.join(__dirname, './public');\n\t\tapp.use(express.static(staticDirectory));\n\n\t\tconst storage = multer.diskStorage({\n\t\t\tdestination: (req, file, cb) => {\n\t\t\t\tcb(null, 'public/uploadedFiles/');\n\t\t\t},\n\t\t\tfilename: (req, file, cb) => {\n\t\t\t\tcb(null, file.originalname);\n\t\t\t}\n\t\t});\n\n\t\tconst upload = multer({ storage: storage });\n\n\t\tapp.use(cors());\n\n\t\tapp.get('/fileitems', async (req, res) => {\n\t\t\tawait db.read();\n\t\t\tres.send(db.data.fileItems);\n\t\t});\n\n\t\tapp.post('/uploadfile', upload.single('file'), async (req, res) => {\n\t\t\tawait db.read();\n\t\t\tconst fileName = req.body.fileName;\n\t\t\tlet iconPathAndFileName = '';\n\t\t\tif (fileName.endsWith('.xlsx')) {\n\t\t\t\ticonPathAndFileName = 'uploadedFiles/general/iconExcel.png';\n\t\t\t} else if (fileName.endsWith('.json')) {\n\t\t\t\ticonPathAndFileName = 'uploadedFiles/general/iconJson.png';\n\t\t\t} else if (fileName.endsWith('.txt')) {\n\t\t\t\ticonPathAndFileName = 'uploadedFiles/general/iconText.png';\n\t\t\t} else {\n\t\t\t\ticonPathAndFileName = `uploadedFiles/${fileName}`\n\t\t\t}\n\n\t\t\tdb.data.fileItems.push({\n\t\t\t\ttitle: req.body.title,\n\t\t\t\tdescription: req.body.description,\n\t\t\t\tnotes: req.body.notes,\n\t\t\t\tfileName: req.body.fileName,\n\t\t\t\ticonPathAndFileName\n\t\t\t});\n\t\t\tawait db.write();\n\t\t\tres.json({});\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t});\n\t\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-04 11:40:51","systemWhoCreated":"systemUnknown"},{"id":618,"category":"React","title":"Create a minimal site with Vite","body":"- full code here: [https://github.com/edwardtanguay/live-coding-vite-demo](edwardtanguay/live-coding-vite-demo)\n- set up project\n\t- `npm create vite`\n\t- name: `live-coding-vite-demo`\n\t- choose: react, react\n- analyze site/code\n\t- `cd live-coding-vite-demo`\n\t- `code.`\n\t- `npm i`\n\t- `npm run dev`\n\t- `git init`\n\t- click auf http://localhost:3000\n- clean up into minimum site\t\n\t- background\n\t\t- `index.html`\n\t\t- `main.jsx`\n\t- clean up\n\t\t- `src/App.jsx`\n\t\t- `src/App.css`\n- add SASS\n\t- `npm i sass`\n\t- rename App.css to App.scss\n\t- App.jsx\n\t\t- from: `import './App.css';`\n\t\t- to: `import './App.scss';`\n- add images\n\t- create public/images/code.png\n\t- App.jsx: `<img src=\"./images/code.png\" alt=\"\" />`\n- add JSON file\n\t- create JSON file: src/data/data.json\n\t\t---------------------------------\n\t\t{\n\t\t\t\"employees\": [\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"John\",\n\t\t\t\t\t\"lastName\": \"Smith\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Hans\",\n\t\t\t\t\t\"lastName\": \"Ankers\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\t\t\t\n\t\t---------------------------------\n\t- `import data from './data/data.json';`\n- display text from JSON file\n\t-------------------------------------\n\t<div>\n\t\tFirst employee: {data.employees[0].firstName}{' '}\n\t\t{data.employees[0].lastName}\n\t</div>\n\t<div>\n\t\tSecond employee: {data.employees[1].firstName}{' '}\n\t\t{data.employees[1].lastName}\n\t</div>\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-27 08:43:12","systemWhoCreated":"systemUnknown"},{"id":619,"category":"React","title":"Create a minimal site with create-react-app","body":"- see full code here: [https://github.com/edwardtanguay/live-coding-cra-demo](edwardtanguay/live-coding-cra-demo)\n- set up project\n\t- `npx create-react-app first-react-project`\n\t- `cd first-react-project`\n\t- `code .`\n\t- `npm start`\n\t- you see a spinning atom symbol\n- analyze code\n\t- background files:\n\t\t- `public/index.html`\n\t\t- `src/index.js`\n\t\t- `src/index.css`\n\t- change these to develop app\n\t\t- `src/App.js`\n\t\t- `src/App.css`\n- clean up into minimum site\n\t- delete logo files etc.\n- add SASS\n\t- `npm i sass`\n\t- rename `App.css` to `App.scss`\n\t- App.js\n\t\t- from: `import './App.css';`\n\t\t- to: `import './App.scss';`\n\t- `npm start`\n- add images\n\t- create directory: `public/images`\n\t- put all images in there\n\t- App.js\n\t\t- `<img src=\"./images/code.png\" />`\n- add JSON file\n\t- create JSON file: src/data/data.json\n\t\t---------------------------------\n\t\t{\n\t\t\t\"employees\": [\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"John\",\n\t\t\t\t\t\"lastName\": \"Smith\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Hans\",\n\t\t\t\t\t\"lastName\": \"Ankers\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\t\t\t\n\t\t---------------------------------\n\t- `import data from './data/data.json';`\n- display text from JSON file\n\t-------------------------------------\n\t<div>\n\t\tFirst employee: {data.employees[0].firstName}{' '}\n\t\t{data.employees[0].lastName}\n\t</div>\n\t<div>\n\t\tSecond employee: {data.employees[1].firstName}{' '}\n\t\t{data.employees[1].lastName}\n\t</div>\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-27 08:43:18","systemWhoCreated":"systemUnknown"},{"id":620,"category":"React","title":"Intro to React and JavaScript Frameworks","body":"- before JavaScript SPA frameworks\n\t- 1995+ MPA - Multiple-Page Applications\n\t\t- PHP, ASP, Ruby\n\t- 2000: AJAX\n\t- 2006: JQuery\n\t- 2008: JavaScript the Good Parts\n\t- 2009: Node\n\t- MVC in SPA V is for View\n\t\t- [MVC](https://onespace.pages.dev/techItems?id=39)\n\t- MPA --> SPA was a drive to turn website creation into application development\n\t\t- routing had to be reinvented (e.g. React Router)\n\t\t- form handling to be reinvented (e.g. Formik, React-Hook-Forms)\n\t\t- DOM had to be reinvented (e.g. React's virtual DOM)\n- JavaScript SPA frameworks\n\t- early frameworks\n\t\t- 2010: **Backbone** (React is essential a replacement for Backbone.view)\n\t\t- 2010: **Knockout** (MVVM pattern, automatic updating, **react**ing to state variables)\n\t\t- 2011: **Ember** (MVVM, steep learning curve, little flexibility)\n\t\t- 2013: **Polymer** (Material design)\n\t\t- others: Meteor, Aurelia, Mithril\n\t- the big three\n\t\t- **2009** [Angular](https://onespace.pages.dev/techItems?id=36)\n\t\t\t- 2015 **Angular** is a different framework than AngularJS (the original Angular)\n\t\t\t- made by Google\n\t\t\t- all-in-one application development: from frontend to backend\n\t\t- **2013** [React](https://onespace.pages.dev/techItems?id=2)\n\t\t\t- made by Facebook\n\t\t\t- React Native\n\t\t\t- view the \"V\" in MVC\n\t\t- **2014** [Vue.js](https://onespace.pages.dev/techItems?id=37)\n\t\t\t- made by Evan You (author of Vite)\n\t\t\t- very light footprint, easy to add to any other website\n\t- maturing frameworks\n\t\t- **2016** [Next.js](https://onespace.pages.dev/techItems?id=219)\n\t\t\t- server-side rendering\n\t\t- **2017** [Gatsby](https://onespace.pages.dev/techItems?id=384)\n\t\t- **2016** [Svelte](http://localhost:29900/techItems?id=210)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-27 08:53:48","systemWhoCreated":"systemUnknown"},{"id":621,"category":"React","title":"Basic JSX in React Components","body":"- display variables\n- conditional rendering: if-statement\n- conditional rendering: if-else-statement\n- understand conditional rendering and data security\n- dynamic inline styles\n- dynamic classes\n- display an array of objects\n- fragment\n- state variables and JSX","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-28 08:19:22","systemWhoCreated":"systemUnknown"},{"id":622,"category":"React","title":"React Nested Components und Props","body":"- import JSON file with array of objects\n- display in JSX\n- refactor into components and pass props","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-10-28 08:19:27","systemWhoCreated":"systemUnknown"},{"id":623,"category":"React","title":"EXPLANATION: React websites are a collection of nested components that communicate with each other","body":"- **nested components**\n\t- a React website is simply a component which contains other components, which contain other components, etc.\n\t- the React site-generation tools **create-react-app** and **Vite** both call the first component **App**\n\t\t- create-react-app calls the file **App.js**:##craappok\n\t\t- Vite calls the file **App.jsx**:##viteappone\n\t\t- if you create a React site with Vite that uses TypeScript, then it calls the file **App.tsx**:##vitetsx\n\t- when you want to analyze a React website, you can get an overview of the site structure by clicking down into the collection of nested components in components until you get to the last one, then come back out, and click down through another line of components:#gif#reactcomponentsclickthrough\n\t- when you design a website with React, you imagine the site as a collection of nested components that you are going to build inside each other:##amazoncompoent\n- **props**\n\t- value props:\n\t\t- nested components communicate via props##thenewbookcompon\n\t- function props:\n\t\t- in React, props can be sent from parent to child, but not child to parent\n\t\t- however, there is a workaround for this limitation: \n\t\t\t- the parent can send a **function with a parameter** as a prop to the child\n\t\t\t- the child can call this function and send a parameter\n\t\t\t- the function is executed on the parent so that the parameter can change e.g. a state variable in the parent","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-01 07:07:21","systemWhoCreated":"systemUnknown"},{"id":624,"category":"React","title":"Create React site that lists books to demonstrate nested components, props, useState and event handling","body":"- **what we will build**\n\t- a React site that shows a list of book\n\t- the user can click on a star next to each book to indicate that they like it\n\t- the total number of stars will be listed on the page \n\t- finished site will work like this: #gif#compsitefinished\n- **concepts used in this site**\n\t- *import JSON data*\n\t\t- we convert the data source (books) from a JavaScript object to a JSON file and import it\n\t\t- this decouples our data from our code\n\t- *nested components*\n\t\t- an App component which contains Books component which contains a Book component\n\t- *props*\n\t\t- the App component will load data and pass it down to the components, which pass it down further to other components\n\t- *useState*\n\t\t- will be used so that the user can toggle images and click a like star on each book\n\t- *event handling*\n\t\t- when the user clicks the **Toggle Images** button or the like button, it fires an event which changes the site appropriately\n\t- *child-to-parent communication*\n\t\t- normally React has uni-directional communication from parent-to-child, e.g. sending props from parent to child\n\t\t- we show how we can have a child change state in the parent by sending a function from the parent to the child which the child executes, which in turn changes state in the parent\n- **project repository**\n\t- code for this site is here: https://github.com/edwardtanguay/et-001-nestcomps\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-001-nestcomps/branches/all) to go to the code at various stages of this project's development#gif#howtowithstepbranches\n- **==> STEP 1. Create React starter site with Vite <==**\n\t- open your terminal and go to your projects folder\n\t- tell Vite to create a React site: `npm create vite`\n\t- type in name of project, e.g. `et-001-nestcomps`\n\t- tell Vite to create a React site by choosing **react**\n\t- tell Vite to create a React site with TypeScript by choosing **ts-react**#gif#createviteproj\n\t- open project with VSCode: e.g. `code et-001-nestcomps`\n\t- in VSCode, open new terminal: **Terminal > New Terminal**\n\t- install node_modules: `npm i`\n\t- start the application: `npm run dev` \n\t- open site in browser by clicking on link, e.g.##clickthelinkthaton\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n\t- **step is finished:**\n\t\t- current code: [10-react-starter-site-created-with-vite](https://github.com/edwardtanguay/et-001-nestcomps/tree/10-react-starter-site-created-with-vite)\n\t\t- site should look like this:#gif#thevitesitdone\n- **==> STEP 2. Minimize the React site <==**\n\t- we only want one CSS file (App.css) so:\n\t\t- in **main.tsx** remove the line\n\t\t\t----------------------------------------\n\t\t\timport './index.css';\n\t\t\t----------------------------------------\n\t\t- delete file file `src/index.css`\n\t- we don't want **React.StrictMode** since it is [generally not useful](https://reactjs.org/docs/strict-mode.html) in all but the largest sites and it [makes useEffect render twice)[https://github.com/facebook/react/issues/24502] which makes debugging confusing and difficult\n\t\t- in **main.tsx** delete the two **React.StrictMode** lines\n\t- in **App.tsx** reduce the code down to the minimum to display simple text:\n\t\t--------------------------------------\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Book Site</h1>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t--------------------------------------\n\t- reduce **App.css** down to the minimum\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\t\t\n\t\t----------------------------------\n\t- site should now look like this:##darkokjs\n\t- install Sass\n\t\t- open a new terminal and type: `npm i sass`\n\t\t- rename `App.css` to `App.scss`\n\t\t- in **App.tsx** change `App.css` to `App.scss`\n\t\t- add Sass syntax in the style sheet to see that it works:\n\t\t\t-------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #333;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(209, 165, 85);\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------\n\t- **step is finished:**\n\t\t- current code: [20-minimized-react-site](https://github.com/edwardtanguay/et-001-nestcomps/tree/20-minimized-react-site)\n\t\t- site should look like this:##withenwsass\n- **==> STEP 3. Display array of book objects on the site <==**\n\t- in **App.tsx** copy books array above component function:\n\t\t-------------------------------------\n\t\tconst books = [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\ttitle: 'Building Microservices',\n\t\t\t\tauthor: 'Sam Newman',\n\t\t\t\tbookUrl: 'https://edwardtanguay.vercel.app/techBooks?id=1',\n\t\t\t\timageUrl:\n\t\t\t\t\t'https://edwardtanguay.vercel.app/customImages/techBooks/buildingMicroservices.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\ttitle: 'Gatsby E-Commerce',\n\t\t\t\tauthor: 'Alex Libby',\n\t\t\t\tbookUrl: 'https://edwardtanguay.vercel.app/techBooks?id=2',\n\t\t\t\timageUrl:\n\t\t\t\t\t'https://edwardtanguay.vercel.app/customImages/techBooks/gatsbyEcommerce.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\ttitle: 'Rust Web Programming',\n\t\t\t\tauthor: 'Maxwell Flitton',\n\t\t\t\tbookUrl: 'https://edwardtanguay.vercel.app/techBooks?id=3',\n\t\t\t\timageUrl:\n\t\t\t\t\t'https://edwardtanguay.vercel.app/customImages/techBooks/rustWeb.jpg'\n\t\t\t}\n\t\t];\t\t\n\t\t-------------------------------------\n\t- display number of books\n\t\t-----------------------------------\n\t\t<h2>There are {books.length} books:</h2>\n\t\t-----------------------------------\n\t\t- you should see this:##thet3sok\n\t- use .map() to display all the books in JSX:\n\t\t- below the **h2** display the books:\n\t\t\t-----------------------------------------\n\t\t\t<div className=\"books\">\n\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"book\" key={i}>\n\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t\t<img className=\"cover\" src={book.imageUrl} />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t\t{book.title}\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"author\">{book.author}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t-----------------------------------------\n\t\t- you should see this:##booksnostyle\n\t- add styling:\n\t\t- in **App.scss** add this:\n\t\t\t-------------------------------------------\n\t\t\t.book {\n\t\t\t\tdisplay: flex;\n\t\t\t\tpadding: 20px;\n\n\t\t\t\timg {\n\t\t\t\t\tborder: 1px solid #444;\n\t\t\t\t\tbox-shadow: 3px 2px 7px -4px #000;\n\t\t\t\t}\n\n\t\t\t\t.cover {\n\t\t\t\t\tmin-width: 100px;\n\t\t\t\t\tmax-width: 100px;\n\t\t\t\t}\n\n\t\t\t\t.info {\n\t\t\t\t\tmargin: 0 0 0 10px;\n\n\t\t\t\t\t.title {\n\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t\tfont-weight: bold;\n\n\t\t\t\t\t\ta {\n\t\t\t\t\t\t\tcolor: #fff;\n\t\t\t\t\t\t\ttext-decoration: none;\n\n\t\t\t\t\t\t\t&:hover {\n\t\t\t\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t.author {\n\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t\tcolor: rgb(231, 231, 147);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------------\n\t- **step is finished:**\n\t\t- current code: [30-display-book-objects-on-site](https://github.com/edwardtanguay/et-001-nestcomps/tree/30-display-book-objects-on-site)\n\t\t- site should look like this:##thesway3\n- **==> STEP 4. Move book array of objects to JSON file and import <==**\t\n\t- to increase flexibility, robustness and scalibility of an application, the applications data should be separated from the code\n\t- the data for our books is currently in our code\n\t- we want to move the data to a JSON file and then import it \n\t\t- this will be more similar to e.g. fetching the data from an online API or retrieving it from an SQL or MongoDB database\n\t- convert the JavaScript object to JSON\n\t\t- note that there are three main differences between JavaScript objects and JSON\n\t\t\t- JSON must use only double quotes as delimiters of data\n\t\t\t- properties must be enclosed in double quotes\n\t\t\t- JSON does not allow a trailing comma\n\t- copy the JavaScript array (everything in between the `[]`) and go to: [https://www.convertsimple.com/convert-javascript-to-json](https://www.convertsimple.com/convert-javascript-to-json)\n\t\t- click on **unescape**\n\t\t- paste JavaScript object array into left textarea box\n\t\t- you will see that it is converted to JSON:##converttojsss\n\t- copy the JSON out, create a file called `src/data/books.json` and paste the JSON content into it\n\t- in **App.tsx**, delete the variable **books**\n\t- the site will now get an error because there is no variable **books**\n\t- at the top of the file, add this line to import your JSON data into the variable **books**\n\t\t----------------------------------------------\n\t\timport books from './data/books.json';\n\t\t----------------------------------------------\n\t- your site will look the same as before, but your data is now separate from your code, which has the following advantages:\n\t\t- your data could be easily changed by another process, e.g. a batch import script\n\t\t- your data can be shared with others much more easily\n\t\t- if you want to move your data to a MongoDB database, you merely copy-and-paste your JSON into a MongoDB collection, since MongoDB stores data natively in JSON format\n\t- **step is finished:**\n\t\t- current code: [40-move-js-array-to-json-file](https://github.com/edwardtanguay/et-001-nestcomps/tree/40-move-js-array-to-json-file)\n\t\t- site should look like this:##thesway3\t\t\n- **==> STEP 5. Refactor App into multiple components <==**\t\n\t- why components?\n\t\t- our app works fine but if we keep adding code to the App.tsx file, it will become increasingly complicated and unmanagable\n\t\t- that is why React apps are in general composed of numerous components nested in other components\n\t\t\t- each component has it's own space for which it is responsible\n\t\t\t- components can be resused and made dynamic with props\n\t\t\t- components can be much more easily shared between applications\n\t\t- therefore it is advisable to begin breaking one's application into components as early as possible\n\t- refactor the whole \"books\" section of our code into a component\n\t\t- create a file called **src/components/Books.tsx** (note \"Books\" is capitalized)\n\t\t\t- fill it with basic function component code:\n\t\t\t\t-----------------------------------\n\t\t\t\texport const Books = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>test</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t-----------------------------------\n\t\t- test this by importing and using this test \n\t\t\t- in **App.tsx** add:\n\t\t\t\t------------------------------------\n\t\t\t\timport {Books} from './components/Books';\n\t\t\t\t------------------------------------\n\t\t\t- in **App.tsx** add after the **h2** line:\n\t\t\t\t--------------------------------\n\t\t\t\t<Books/>\n\t\t\t\t--------------------------------\n\t\t\t- if you see this, you know the component works:##theh2now\n\t\t- cut the entire `<div className=\"books\">...</div>` section from **App.tsx** file and paste it over the `<div>test</div>` code in the Books component\n\t\t- you notice that your component does not have access to the **books** variable\n\t\t\t- therefore you need to send it the **books** variable as a prop\n\t\t\t- in **App.tsx** add the attribute **books**:\n\t\t\t\t-------------------------------------------\n\t\t\t\t<Books books={books} />\n\t\t\t\t-------------------------------------------\n\t\t\t- since we are using TypeScript, we have to define what type our **books** prop is\n\t\t\t\t- for now, just define it as **any** which means no type for now\n\t\t\t\t\t- in **Books.tsx** change to:\t\t\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t\texport const Books = (props: any) => {\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t- now pull the **books** variable out of the props variable\n\t\t\t\t\t------------------------------\n\t\t\t\t\tconst { books } = props;\n\t\t\t\t\t------------------------------\n\t\t\t\t- TypeScript is complaining again that we have not explicitly defined a type for **book**:##booktypescri\n\t\t\t\t- assign it an **any** type for now as well (and remove the `i` index variable, we don't need it here anymore since we are inside the component)\n\t\t\t\t\t---------------------------------------------------\n\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t{books.map((book:any) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"book\">\t\t\t\t\t\n\t\t\t\t\t---------------------------------------------------\n\t\t- your refactored site with Books component will work again:##thebookwokr\n\t\t- now let's define our types so **our code conforms to TypeScripts strict rules** and we have no sloppy `any` types\n\t\t\t- using **any** types is equivalent to using plain JavaScript where any variable can change its type at any time, thus causing potential bugs and errors\n\t\t\t- TypeScript forces us to define exactly how each of our variables should be structured\n\t\t\t- in **Books.tsx** at the top of the file, create an **IBook* interface to define what we mean a book to be in our app\n\t\t\t\t--------------------------------------------------\n\t\t\t\tinterface IBook {\n\t\t\t\t\ttitle: string,\n\t\t\t\t\tauthor: string,\n\t\t\t\t\timageUrl: string,\n\t\t\t\t\tbookUrl: string\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------------------------\n\t\t\t- next define an **IProps** interface to inform give our parent and child component a clear contact on what kind of data they are exchanging as props, i.e. **an array of books**\n\t\t\t\t-----------------------------------------------------------\n\t\t\t\tinterface IProps {\n\t\t\t\t\tbooks: IBook[]\n\t\t\t\t}\n\t\t\t\t-----------------------------------------------------------\n\t\t\t- now define **props** as a variable of type **IProps**\n\t\t\t\t-------------------------------------------\n\t\t\t\texport const Books = (props: Iprops) => {\n\t\t\t\t-------------------------------------------\n\t\t\t- the advantage we now have is that our component is **sure** that the book variable will have these four properties and only these four properties\n\t\t\t\t- to test this, go to your JSON file and delete the property \"author\" from one of the books\n\t\t\t\t- TypeScript will immediately notify you that you have data which does not conform to how your component expects the data to be:##noundbooks\n\t\t\t\t\t- JavaScript would never inform you of this\n\t\t\t\t\t- in fact, the site still works (only JavaScript executes at runtime), but there is no author for that one book##noauthojs\n\t\t\t\t\t- in this way, when we use TypeScript, we are informed of inconsistencies in our data and code before they lead to errors, bugs, problems and crashes in our application\n\t\t\t- and now since **Books** is defined as an array of objects of type **IBook**, TypeScript knows what type our **book** variable is, so we can remove the **any**:\n\t\t\t\t---------------------------------------------\n\t\t\t\t{books.map((book) => {\n\t\t\t\t---------------------------------------------\n\t\t\t- another advantage we have with TypeScript is since it knows exactly what properties our **book** variable has and what their types are, it works together with VSCode to provide us an intellisense dropdown of this information on every variable:##andagainjtheauth\n\t- now let's refactor our app further by creating a **Book** component that is called from **Books.tsx**\n\t\t- because **Books.tsx** and **Book.tsx** will use the interface **IBook**, we need to put it in one place and have each of the components import it from there\n\t\t\t- **src/interfaces.ts**\n\t\t\t\t--------------------------------\n\t\t\t\texport interface IBook {\n\t\t\t\t\ttitle: string,\n\t\t\t\t\tauthor: string,\n\t\t\t\t\timageUrl: string,\n\t\t\t\t\tbookUrl: string\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------\n\t\t- **Book.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { IBook } from '../interfaces';\n\n\t\t\tinterface IProps {\n\t\t\t\tbook: IBook;\n\t\t\t}\n\n\t\t\texport const Book = (props: IProps) => {\n\t\t\t\tconst { book } = props;\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"book\">\n\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t<img className=\"cover\" src={book.imageUrl} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t{book.title}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"author\">{book.author}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------------\n\t\t- **Books.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { Book } from './Book';\n\t\t\timport { IBook } from '../interfaces';\n\n\t\t\tinterface IProps {\n\t\t\t\tbooks: IBook[]\n\t\t\t}\n\n\t\t\texport const Books = (props: IProps) => {\n\t\t\t\tconst { books } = props;\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t{books.map((book) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Book book={book}/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------\n\t- **step is finished:**\n\t\t- current code: [50-refactor-into-components](https://github.com/edwardtanguay/et-001-nestcomps/tree/50-refactor-into-components)\n\t\t- site should still look like this:##thesway3\t\t\n- **==> STEP 6. Make a button to toggle whether images are shown or not with useState <==**\t\n\t- we will now demonstrate why we need useState for interactivity in a React site\n\t\t- we will first make a button in **App.tsx** called **Toggle Images** which simple toggles a text in the **App.tsx** component between \"images are showing\" and \"IMAGES ARE NOT SHOWING\"\n\t\t- in **App.tsx** after the imports, add:\n\t\t\t---------------------------------------\n\t\t\tlet imagesAreShowing = true;\n\t\t\t---------------------------------------\n\t\t- in **App.tsx** in the JSX add ternary conditional rendering to display the appropriate text:\n\t\t\t--------------------------------------------\n\t\t\t{imagesAreShowing ? (\n\t\t\t\t<div>images are showing</div>\n\t\t\t) : (\n\t\t\t\t<div>IMAGES ARE NOT SHOWING</div>\n\t\t\t)}\t\t\t\n\t\t\t--------------------------------------------\n\t\t\t- it works:##imagesareshowing\n\t\t- now switch it to false and you see that it works appropriately:##imgnotsho\n\t- so when we change the variable, the appropriate text is shown\n\t- now let's allow the user to click a button to change this value\n\t\t- in the JSX add a button with an onClick function call:\n\t\t\t-----------------------------------------\n\t\t\t<button onClick={() => handleImageToggle()}>Toggle Images</button>\n\t\t\t-----------------------------------------\n\t\t- add the handling function *inside the function component*\n\t\t\t----------------------------------------------\n\t\t\tconst handleImageToggle = () => {\n\t\t\t\timagesAreShowing = !imagesAreShowing;\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------------\n\t\t- the problem is that when you click the button, it doesn't change the text\n\t\t- debug this with a console.log() statement\n\t\t\t----------------------------------------------\n\t\t\tconst handleImageToggle = () => {\n\t\t\t\timagesAreShowing = !imagesAreShowing;\n\t\t\t\tconsole.log(imagesAreShowing);\n\t\t\t}\n\t\t\t----------------------------------------------\n\t\t- **PROBLEM:** even though our variable is changing, this is not affecting the JSX conditional rendering#gif#showtheclickclick\n\t\t- **SOLUTION**: the reason is that **JSX only respons to changes in state variables, not regular variables**\n\t\t- let's change `imagesAreShowing` from a regular variable to a state variable\n\t\t\t- in **App.tsx** make the following changes to convert the regular variable to a state variable:\n\t\t\t\t--------------------------------------------------\n\t\t\t\timport { useState } from 'react';\n\t\t\t\timport './App.scss';\n\t\t\t\timport books from './data/books.json';\n\t\t\t\timport { Books } from './components/Books';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\tconst [imagesAreShowing, setImagesAreShowing] = useState(false);\n\n\t\t\t\t\tconst handleImageToggle = () => {\n\t\t\t\t\t\tsetImagesAreShowing(!imagesAreShowing);\n\t\t\t\t\t};\n\t\t\t\t--------------------------------------------------\n\t\t- you now will see that since it is a state variable, JSX's conditional rendering responds to changes in the variable:#gif#responchangg\n\t- now that our state variable is changing and JSX is responsding it, we need to pass this state variable down into the components so that they can respond to its changes as well\n\t\t- **App.tsx**\n\t\t\t--------------------------------------------------\n\t\t\t<Books books={books} imagesAreShowing={imagesAreShowing} />\n\t\t\t--------------------------------------------------\n\t\t- **Books.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { Book } from './Book';\n\t\t\timport { IBook } from '../interfaces';\n\n\t\t\tinterface IProps {\n\t\t\t\tbooks: IBook[];\n\t\t\t\timagesAreShowing: boolean;\n\t\t\t}\n\n\t\t\texport const Books = (props: IProps) => {\n\t\t\t\tconst { books, imagesAreShowing } = props;\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\t\treturn <Book book={book} imagesAreShowing={imagesAreShowing} key={i} />;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------------\n\t\t- **Book.tsx**\n\t\t\t--------------------------------------------\n\t\t\timport { IBook } from '../interfaces';\n\n\t\t\tinterface IProps {\n\t\t\t\tbook: IBook;\n\t\t\t\timagesAreShowing: boolean;\n\t\t\t}\n\n\t\t\texport const Book = (props: IProps) => {\n\t\t\t\tconst { book, imagesAreShowing } = props;\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"book\">\n\t\t\t\t\t\t{imagesAreShowing && (\n\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t\t<img className=\"cover\" src={book.imageUrl} />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t{book.title}\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"author\">{book.author}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------\n\t- **step is finished:**\n\t\t- current code: [60-toggle-images-with-usestate](https://github.com/edwardtanguay/et-001-nestcomps/tree/60-toggle-images-with-usestate)\n\t\t- site should still look like this:#gif#toggletogworks\n- **==> STEP 7. Enable user to click a like button on book by passing a function as a prop <==**\n\t- this step shows another example of sending a function to lower components\n\t\t- what's different is that insted of changing only one state variable, you change one property on one object in an array of objects (**books**) and then save the whole books object back into state, which updates all state everywhere in all components\n\t- **App.tsx**\n\t\t-----------------------------------------\n\t\timport { useState } from 'react';\n\t\timport './App.scss';\n\t\timport { Books } from './components/Books';\n\t\timport rawBooks from './data/books.json';\n\t\timport { IBook } from './interfaces';\n\n\t\tconst _books: IBook[] = [];\n\t\trawBooks.forEach((rawBook) => {\n\t\t\tconst book: IBook = {\n\t\t\t\t...rawBook,\n\t\t\t\tliked: false,\n\t\t\t};\n\t\t\t_books.push(book);\n\t\t});\n\n\t\tfunction App() {\n\t\t\tconst [imagesAreShowing, setImagesAreShowing] = useState(true);\n\t\t\tconst [books, setBooks] = useState(_books);\n\n\t\t\tconst handleImageToggle = () => {\n\t\t\t\tsetImagesAreShowing(!imagesAreShowing);\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Book Site</h1>\n\t\t\t\t\t<button onClick={() => handleImageToggle()}>Toggle Images</button>\n\t\t\t\t\t<h2>There are {books.length} books:</h2>\n\t\t\t\t\t<div className=\"totalLikes\">Total likes: {books.reduce((total, book) => total + (book.liked ? 1 : 0), 0)}</div>\n\t\t\t\t\t<Books books={books} setBooks={setBooks} imagesAreShowing={imagesAreShowing} />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t-----------------------------------------\n\t- **Books.tsx**\n\t\t-----------------------------------------------------\n\t\timport { Book } from './Book';\n\t\timport { IBook } from '../interfaces';\n\n\t\tinterface IProps {\n\t\t\tbooks: IBook[];\n\t\t\tsetBooks: any;\n\t\t\timagesAreShowing: boolean;\n\t\t}\n\n\t\texport const Books = (props: IProps) => {\n\t\t\tconst { books, setBooks, imagesAreShowing, } = props;\n\t\t\treturn (\n\t\t\t\t<div className=\"books\">\n\t\t\t\t\t{books.map((book, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Book\n\t\t\t\t\t\t\t\tbooks={books}\n\t\t\t\t\t\t\t\tsetBooks={setBooks}\n\t\t\t\t\t\t\t\tbook={book}\n\t\t\t\t\t\t\t\timagesAreShowing={imagesAreShowing}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\t\t\n\t\t-----------------------------------------------------\n\t- **Book.tsx**\n\t\t-------------------------------------------\n\t\timport { IBook } from '../interfaces';\n\t\timport { AiOutlineStar } from 'react-icons/ai';\n\t\timport { AiFillStar } from 'react-icons/ai';\n\n\t\tinterface IProps {\n\t\t\tbooks: IBook[];\n\t\t\tsetBooks: any;\n\t\t\tbook: IBook;\n\t\t\timagesAreShowing: boolean;\n\t\t}\n\n\t\texport const Book = (props: IProps) => {\n\t\t\tconst { books, setBooks, book, imagesAreShowing, } = props;\n\n\t\t\tconst handleStarClick = (book: IBook) => {\n\t\t\t\tbook.liked = !book.liked;\n\t\t\t\tsetBooks([...books]);\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div className=\"book\">\n\t\t\t\t\t{imagesAreShowing && (\n\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t<img className=\"cover\" src={book.imageUrl} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t<a href={book.bookUrl} target=\"_blank\">\n\t\t\t\t\t\t\t\t{book.title}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"author\">{book.author}</div>\n\t\t\t\t\t\t{book.liked ? (\n\t\t\t\t\t\t\t<AiFillStar\n\t\t\t\t\t\t\t\tonClick={() => handleStarClick(book)}\n\t\t\t\t\t\t\t\tclassName=\"star likedStar\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<AiOutlineStar\n\t\t\t\t\t\t\t\tonClick={() => handleStarClick(book)}\n\t\t\t\t\t\t\t\tclassName=\"star notLikedStar\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\t\t\n\t\t-------------------------------------------\n\t- **App.scss**\n\t\t--------------------------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\n\t\t\th1 {\n\t\t\t\tcolor: rgb(209, 165, 85);\n\t\t\t}\n\n\t\t\t.totalLikes {\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tfont-size: 1.5rem;\n\t\t\t}\n\n\t\t\t.book {\n\t\t\t\tdisplay: flex;\n\t\t\t\tpadding: 20px;\n\n\t\t\t\timg {\n\t\t\t\t\tborder: 1px solid #444;\n\t\t\t\t\tbox-shadow: 3px 2px 7px -4px #000;\n\t\t\t\t}\n\n\t\t\t\t.cover {\n\t\t\t\t\tmin-width: 100px;\n\t\t\t\t\tmax-width: 100px;\n\t\t\t\t}\n\n\t\t\t\t.info {\n\t\t\t\t\tmargin: 0 0 0 10px;\n\n\t\t\t\t\t.star {\n\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t}\n\n\t\t\t\t\t.likedStar {\n\t\t\t\t\t\tcolor: yellow;\n\t\t\t\t\t}\n\n\t\t\t\t\t.notLikedStar {\n\t\t\t\t\t\tcolor: #555;\n\t\t\t\t\t}\n\n\t\t\t\t\t.title {\n\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t\tfont-weight: bold;\n\n\t\t\t\t\t\ta {\n\t\t\t\t\t\t\tcolor: #fff;\n\t\t\t\t\t\t\ttext-decoration: none;\n\n\t\t\t\t\t\t\t&:hover {\n\t\t\t\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t.author {\n\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t\tcolor: rgb(231, 231, 147);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t--------------------------------------------------------\n\t- **step is finished:**\n\t\t- current code: [70-create-like-button-by-passing-function-as-prop](https://github.com/edwardtanguay/et-001-nestcomps/tree/70-create-like-button-by-passing-function-as-prop)\n\t\t- site should still look like this:#gif#step70works","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-01 09:41:50","systemWhoCreated":"systemUnknown"},{"id":625,"category":"React","title":"EXPLANATION: Overview and examples of React useState and event handlers","body":"- in React you have **normal variables** and **state variables**\n\t- create a Vite site and show example of each:\n\t\t----------------------------------------\n\t\timport { useState } from 'react';\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\tconst [count, setCount] = useState(0);\n\n\t\t  let score = 0;\n\t\t  const handleIncreaseScoreButton = () => {\n\t\t\tscore++;  \n\t\t\tconsole.log(score);\n\t\t  }\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<button onClick={() => setCount((count) => count + 1)}>\n\t\t\t\t\t\t\tcount is {count}\n\t\t\t\t\t\t</button>\n\t\t\t\t<hr/>\n\t\t\t\t<button onClick={() => handleIncreaseScoreButton()}>increase score: {score}</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t----------------------------------------\n\t- note that **count** changes when you click the button but **score** doesn't\n\t\t- because count is a **state variable**\n\t\t- but score is a **normal variable**\n\t- change score to a state variable and see that the button click can change it:\n\t\t--------------------------------------\n\t\timport { useState } from 'react';\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\tconst [count, setCount] = useState(0);\n\t\t\tconst [score, setScore] = useState(0);\n\n\t\t\tconst handleIncreaseScoreButton = () => {\n\t\t\tconst _score = score + 1;\n\t\t\t\tsetScore(_score);\n\t\t\t\tif (_score >= 10) {\n\t\t\t\t\tsetCount(0);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<button onClick={() => setCount((count) => count + 1)}>\n\t\t\t\t\t\t\tcount is {count}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<button onClick={() => handleIncreaseScoreButton()}>\n\t\t\t\t\t\t\tincrease score: {score}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t--------------------------------------\n\t- **QUESTION:** Why do we have an extra variable **_score**?\n\t\t- **ANSWER:** Because the **setScore()** function does not set the value of the state variable immediately and so in the next line, the value has not changed yet, so we have to use a normal variable which changes its value immediately, and then use this value in the two cases.\n- state variables are very useful because JSX will automatically **react** to changes in state variables, which is why the framework is called **React**\n\t- note you can have as much logic based on state variables as you want\n\t\t- CHALLENGE: when both count and score are not zero, display a message \"both are not zero\"\n\t\t- CHALLENGE: when score is greater or equal to 10, make the App element background red\n- one important aspect you have to remember about state variables is that they are **immutable**\n\t- this means that they cannot change value\n\t\t- QUESTION: but if they cannot change value, how do you change their value so that JSX can react to them?\n\t\t- ANSWER: you always have to **replace them with a new value**\n\t\t\t- this is automatic with **string, number and boolean** value since the maximum size they take up is known and hence they are stored on the **stack** in memory \n\t\t\t\t- so `setScore(0)` and `setCount(0)` both the value of the number that was there before\n\t\t\t- but this is not automatic with **arrays** and **objects** which are just pointers on the state to their values which lie on the **heap**\n\t\t\t- note that if you don't **send a copy** of an array of object (typically done with the spread operator) into the set function of a state variable, it will not update the variable\n\t- CHALLENGE: create an object as a state variable and change it\t\t\n\t\t- SOLUTION:\n\t\t\t----------------------------------------\n\t\t\timport { useState } from 'react';\n\t\t\timport './App.css';\n\n\t\t\tconst _config = {\n\t\t\t  title: 'Server Zeus',\n\t\t\t  cpus: 8,\n\t\t\t  location: 'development'\n\t\t\t};\n\n\t\t\tfunction App() {\n\t\t\t  const [config, setConfig] = useState(_config);\n\n\t\t\t\tconst handleLocationChange = () => {\n\t\t\t\tconfig.location = 'production';\n\t\t\t\t// setConfig(config); // doesn't update\n\t\t\t\tsetConfig({...config }); // IT UPDATES!\n\t\t\t\tconsole.log(config);\n\t\t\t\t};\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>testing</h1>\n\t\t\t\t\t\tServer location is: {config.location}\n\t\t\t\t  <hr/>\n\t\t\t\t\t\t<button onClick={() => handleLocationChange()}>change location</button>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-02 00:43:46","systemWhoCreated":"systemUnknown"},{"id":626,"category":"React","title":"EXPLANATION: useEffect and API calls","body":"- **useState** and **useEffect** are the most important and most used hooks in React\n\t- useEffect is almost always used in conjuction with state variables since it is an asynchronous hook: \n\t\t-------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\t-------------------------------------\n- use of **useEffect**\n\t- 90%: load API data on page load\t\t\n\t\t- two ways to get data from external websites are **fetch** and **axios**\n\t\t- both have advantages and disadvantages, **learn them both**\n\t\t\t- fetch\n\t\t\t\t- advantage: \n\t\t\t\t\t- built into all browsers\n\t\t\t\t- disadvantage:\n\t\t\t\t\t- two await statements to get data\n\t\t\t\t\t- syntax is not as compact\n\t\t\t\t\t- when used in Node, you have to install and import it just like axios\n\t\t\t- axios\n\t\t\t\t- advantage:\n\t\t\t\t\t- concise syntax\n\t\t\t\t\t- get data with one await\n\t\t\t\t- disadvantage\n\t\t\t\t\t- unlike fetch, browsers don't natively implement it, so on frontend you have to install and import it\n\t\t- load employees with **fetch** and display\n\t\t\t----------------------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport './App.scss';\n\n\t\t\tconst employeesUrl = 'https://edwardtanguay.vercel.app/share/employees.json';\n\n\t\t\tfunction App() {\n\t\t\t\tconst [employees, setEmployees] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await fetch(employeesUrl);\n\t\t\t\t\t\tconst _employees = await response.json();\n\t\t\t\t\t\tsetEmployees(_employees);\n\t\t\t\t\t})();\n\t\t\t\t});\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>useEffect</h1>\n\t\t\t\t\t\t<h2>There are {employees.length} employees.</h2>\n\t\t\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\t\t\treturn <div className=\"employee\">{employee.firstName} {employee.lastName}</div>;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t----------------------------------------------------------\n\t\t- load customers with axios\n\t\t\t- `npm i axios`\n\t\t\t- use two useEffects, one for each set of data you need to load\n\t\t\t\t--------------------------------------------------\n\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\timport './App.scss';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\tconst employeesUrl = 'https://edwardtanguay.vercel.app/share/employees.json';\n\t\t\t\tconst customersUrl = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/customers.json';\n\n\t\t\t\tfunction App() {\n\t\t\t\t\tconst [employees, setEmployees] = useState([]);\n\t\t\t\t\tconst [customers, setCustomers] = useState([]);\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tconst response = await fetch(employeesUrl);\n\t\t\t\t\t\t\tconst _employees = await response.json();\n\t\t\t\t\t\t\tsetEmployees(_employees);\n\t\t\t\t\t\t})();\n\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tsetCustomers((await axios.get(customersUrl)).data);\n\t\t\t\t\t\t})();\n\t\t\t\t\t},[]);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>useEffect</h1>\n\t\t\t\t\t\t\t<h2>There are {employees.length} employees.</h2>\n\t\t\t\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\t\t\t\treturn <div key={employee.employeeID} className=\"employee\">{employee.firstName} {employee.lastName}</div>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t<h2>There are {customers.length} customers.</h2>\n\t\t\t\t\t\t\t{customers.map((customer) => {\n\t\t\t\t\t\t\t\treturn <div key={customer.customerID} className=\"customer\">{customer.contactName}</div>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\texport default App;\t\t\t\t\n\t\t\t\t--------------------------------------------------\n\t- 10%: observe a specific variable and execute code when it changes\n- you can have as many useEffects as you want\n\t--------------------------------------------------\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconst response = await fetch(employeesUrl);\n\t\t\tconst _employees = await response.json();\n\t\t\tsetEmployees(_employees);\n\t\t})();\n\n\t}, []);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tsetCustomers((await axios.get(customersUrl)).data);\n\t\t})();\n\t}, []);\n\t--------------------------------------------------\n- observe variables with useEffect\n\t- for instance, when a variable changes, you could send data to an API to collect statistics of user behavior on the site, etc.\n\t\t--------------------------------------\n\t\tconst [showEmployees, setShowEmployees] = useState(true);\n\n\t\tuseEffect(() => {\n\t\t\tconsole.log(`send use behavior info on API: showEmployees = ${showEmployees.toString()} `);\n\t\t}, [showEmployees])\t\t\n\n\t\t<button onClick={() => setShowEmployees(!showEmployees)}>Toggle Employees</button>\n\t\t{showEmployees && (\n\t\t\t<>\n\t\t\t\t<h2>There are {employees.length} employees.</h2>\n\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={employee.employeeID} className=\"employee\">\n\t\t\t\t\t\t\t{employee.firstName} {employee.lastName}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</>\n\t\t)}\n\t\t--------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-02 23:20:26","systemWhoCreated":"systemUnknown"},{"id":628,"category":"React","title":"Learn useEffect, API calls and localStorage by creating a die-der-das React flashcard site to test German nouns","body":"- **what we will build**\n\t- a quiz game that tests the user on the der/die/das article of German verbs\n\t- the final site will work like this:#gif#showthatlocstorworks\n- **concepts used in this site**\n\t- *useEffect*\n\t\t- this will be used when the page loads to fetch the German verb data from an external site\n\t- *axios*\n\t\t- we will use axios to fetch the data from the external site\n\t- *localStorage*\n\t\t- we will use localStorage to track the user's progress in the game so that the game state can be restored if they close and reopen the browser\n- **project repository**\n\t- code for this site is here: https://github.com/edwardtanguay/et-001-german-noun-game\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-001-german-noun-game/branches/all) to go to the code at various stages of this project's development\n- **==> STEP 1. Create React starter site with Vite <==**\n\t- open your terminal and go to your projects folder\n\t- tell Vite to create a React site: `npm create vite`\n\t- type in name of project, e.g. `et-001-nestcomps`\n\t- tell Vite to create a React site by choosing **react**\n\t- tell Vite to create a React site with TypeScript by choosing **ts-react**#gif#createviteproj\n\t- open project with VSCode: e.g. `code et-001-nestcomps`\n\t- in VSCode, open new terminal: **Terminal > New Terminal**\n\t- install node_modules: `npm i`\n\t- start the application: `npm run dev` \n\t- open site in browser by clicking on link, e.g.##clickthelinkthaton\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n- **==> STEP 2. Minimize the React site <==**\n\t- we only want one CSS file (App.css) so:\n\t\t- in **main.tsx** remove the line\n\t\t\t----------------------------------------\n\t\t\timport './index.css';\n\t\t\t----------------------------------------\n\t\t- delete file file `src/index.css`\n\t- we don't want **React.StrictMode** since it is [generally not useful](https://reactjs.org/docs/strict-mode.html) in all but the largest sites and it [makes useEffect render twice)[https://github.com/facebook/react/issues/24502] which makes debugging confusing and difficult\n\t\t- in **main.tsx** delete the two **React.StrictMode** lines\n\t- in **App.tsx** reduce the code down to the minimum to display simple text:\n\t\t--------------------------------------\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Book Site</h1>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t--------------------------------------\n\t- reduce **App.css** down to the minimum\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\t\t\n\t\t----------------------------------\n\t- install Sass\n\t\t- open a new terminal and type: `npm i sass`\n\t\t- rename `App.css` to `App.scss`\n\t\t- in **App.tsx** change `App.css` to `App.scss`\n\t\t- add Sass syntax in the style sheet to see that it works:\n\t\t\t-------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: rgb(8, 6, 42);\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(209, 168, 85);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\t-------------------------------------\n\t- Vite has an unfortunate issue with reloading the site when you have a dark color: there is a slight flash of white\n\t\t- and we want to change the title of the site to the name of our game\n\t\t- in **index.html** add the same backround color of the React site to the original HTML page so there is no blink, and change the title tag\n\t\t\t----------------------------------------\n\t\t\t<head>\n\t\t\t  <meta charset=\"UTF-8\" />\n\t\t\t  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n\t\t\t  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t  <title>German Noun Game</title>\n\t\t\t  <style>\n\t\t\t\tbody {\n\t\t\t\t  background-color: rgb(8, 6, 42);\n\t\t\t\t}\n\t\t\t  </style>\n\t\t\t</head>\n\t\t\t----------------------------------------\n\t- **step is finished:**\n\t\t- current code: [20-site-minimized](https://github.com/edwardtanguay/et-001-german-noun-game/tree/20-site-minimized)\n\t\t- site should look like this:##tehgergerm\n- **==> STEP 3. Fetch German nouns from external site and display on page <==**\n\t- we want to fetch the German nouns from this URL and display as list of single verbs on the page\n\t\t- https://edwardtanguay.vercel.app/share/germanNouns.json\n\t- create state variable for nouns, **App.tsx**\n\t\t------------------------------------------------\n\t\timport { useState } from 'react';\n\t\timport './App.scss';\n\n\t\tconst url = 'https://edwardtanguay.vercel.app/share/germanNouns.json';\n\n\t\tfunction App() {\n\t\t\tconst [nouns, setNouns] = useState([]);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>German Noun Game</h1>\n\t\t\t\t\t<h2>There are {nouns.length} nouns:</h2>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t------------------------------------------------\n\t- now use useEffect and axios to fetch from the URL\n\t\t- `npm i axios`\n\t\t- **App.tsx**, fetch and show the number of nouns\n\t\t\t-----------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport './App.scss';\n\t\t\timport axios from 'axios';\n\n\t\t\tconst url = 'https://edwardtanguay.vercel.app/share/germanNouns.json';\n\n\t\t\tfunction App() {\n\t\t\t\tconst [nouns, setNouns] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetNouns((await axios.get(url)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>German Noun Game</h1>\n\t\t\t\t\t\t<h2>There are {nouns.length} nouns:</h2>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t-----------------------------------------\n\t- now display them all in a list\n\t\t------------------------------------------\n\t\t<div className=\"nouns\">\n\t\t\t{nouns.map((noun) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"noun\" key={noun.singular}>\n\t\t\t\t\t\t<div className=\"singular\">\n\t\t\t\t\t\t\t{noun.article} {noun.singular}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t\t------------------------------------------\n\t- note that JavaScript has no problem with the code, but **TypeScript** is informing us that it can't guarantee that a noun object has these specific properties:##jsoktsnot\n\t- define interface so TypeScript can confirm that these and only these properties belong to these noun objects\n\t\t--------------------------------\n\t\tinterface INoun {\n\t\t\tarticle: string;\n\t\t\tsingular: string;\n\t\t\tplural: string;\n\t\t}\n\n\t\tfunction App() {\n\t\t\tconst [nouns, setNouns] = useState<INoun[]>([]);\t\t\n\t\t--------------------------------\n\t- but remember: TypeScript only exists for us in development\n\t\t- [TypeScript will not exist when the code is in production](https://edwardtanguay.vercel.app/howtos?id=595) so there is no guarantee that the data from this API will actually have objects that contain these properties\n\t\t- TypeScript only confirms that our own code is internally consistent\n\t\t- if you want to guarantee that this array has objects with specific properties, then you have to perform data cleansing on import, i.e. call the original array e.g. `rawNouns`, iterate through it and for each object create a new object that is added to the array `nouns` and make sure that it has these specific properties with e.g. default values\n\t- **step is finished:**\n\t\t- current code: [30-fetch-nouns-and-display](https://github.com/edwardtanguay/et-001-german-noun-game/tree/30-fetch-nouns-and-display)\n\t\t- site should look like this:##theggglist\n- **==> STEP 4. Randomize German nouns <==**\n\t- we want to know randomize the list after it loads\n\t\t- this way the user will always have a different order to take the quiz\n\t- we need to create a `randomizeArray` function to use\n\t\t- typically, functions like this will be put in a **tools** module which can be imported and reused anywhere in the app\n\t- create file **src/tools.ts**\n\t\t-------------------------------------------------\n\t\t/**\n\t\t * Randomize any array.\n\t\t *\n\t\t * const _books = tools.randomize(_books);\n\t\t *\n\t\t * Returns the same array with the same objects in a randomized order.\n\t\t */\t\t\n\t\texport const randomize = (array: any) => {\n\t\t\tlet currentIndex = array.length;\n\t\t\tlet temporaryValue = null;\n\t\t\tlet randomIndex = null;\n\n\t\t\twhile (currentIndex !== 0) {\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t\t-------------------------------------------------\n\t- note that in this case, we really do mean that the array that gets sent to be randomized is of type **any** since any array should be able to be randomized regardes of what kinds of objects or variables it contains\n\t- now in **App.tsx** we need to:\n\t\t- get the array as a variable\n\t\t- randomize it\n\t\t- save it to the state variable with the setter function\n\t- note that VSCode shows you the documentation comment on top of the helper function in a pop-up, very helpful when createing tools libraries:##helpfulpopupok\n\t- **step is finished:**\n\t\t- current code: [40-randomize-noun-array](https://github.com/edwardtanguay/et-001-german-noun-game/tree/40-randomize-noun-array)\n\t\t- site should look like this:#gif#therandrand\n- **==> STEP 5. Display nouns as flashcards each with button to indicate one has learned it <==**\n\t- we now want to display the front of the cards for the user \n\t\t- when they click on the front, the back is shown\n\t\t- they click on the front again, and the back is hidden\n\t- first add all fields, **App.tsx**\n\t\t----------------------------------------------\n\t\t<div className=\"noun\" key={noun.singular}>\n\t\t\t<div className=\"front\">\n\t\t\t\t{noun.singular}\n\t\t\t</div>\n\t\t\t<div className=\"back\">\n\t\t\t\t<div className=\"singular\">{noun.article} {noun.singular}</div>\n\t\t\t\t<div className=\"plural\">{noun.plural}</div>\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t----------------------------------------------\n\t- then add styles, **App.scss**\n\t\t------------------------------------------------------\n\t\t.nouns {\n\t\t\t.noun {\n\t\t\t\tbackground-color: rgb(11, 77, 11);\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tpadding: .6rem;\n\t\t\t\twidth: 17rem;\n\n\t\t\t\t.front {\n\t\t\t\t\tcolor: rgb(230, 213, 213);\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\t.back {\n\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\tbackground-color: rgb(16, 61, 16);\n\t\t\t\t\tpadding: .3rem;\n\n\t\t\t\t\t.singular {\n\t\t\t\t\t\tcolor: yellow;\n\t\t\t\t\t}\n\t\t\t\t\t.plural {\n\t\t\t\t\t\tcolor: rgb(112, 112, 26);\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t------------------------------------------------------\n\t- add a field to the noun objects which determines if they are open or not\n\t\t------------------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tlet rawNouns = (await axios.get(url)).data;\n\t\t\t\trawNouns = tools.randomize(rawNouns);\n\t\t\t\tconst _nouns: INoun[] = [];\n\t\t\t\trawNouns.forEach((rawNoun: any) => {\n\t\t\t\t\tconst _noun: INoun = {\n\t\t\t\t\t\t...rawNoun,\n\t\t\t\t\t\tisOpen: false,\n\t\t\t\t\t};\n\t\t\t\t\t_nouns.push(_noun);\n\t\t\t\t});\n\t\t\t\tconsole.log(_nouns);\n\t\t\t\tsetNouns(_nouns);\n\t\t\t})();\n\t\t}, []);\t\t\n\t\t------------------------------------------\n\t- don't show if isOpen is false\n\t\t------------------------------------------\n\t\t{noun.isOpen && (\n\t\t\t<div className=\"back\">\n\t\t\t\t<div className=\"singular\">\n\t\t\t\t\t{noun.article} {noun.singular}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"plural\">{noun.plural}</div>\n\t\t\t</div>\n\t\t)}\n\t\t------------------------------------------\n\t- make front clickable to open and close back\n\t\t-------------------------------------\n\t\tconst handleFlashcardClick = (noun: INoun) => {\n\t\t\tnoun.isOpen = !noun.isOpen;\n\t\t\tsetNouns([...nouns]);\n\t\t}\n\n\t\t<div className=\"front\" onClick={() => handleFlashcardClick(noun)}>{noun.singular}</div>\n\t\t-------------------------------------\n\t- **step is finished:**\n\t\t- current code: [50-display-as-flashcards](https://github.com/edwardtanguay/et-001-german-noun-game/tree/50-display-as-flashcards)\n\t\t- site should look like this:#gif#theflashworking\t\t\n- **==> STEP 6. Allow user to mark if flashcard has been learned or not <==**\n\t- add property **isLearned** to nouns\n\t\t------------------------------\n\t\tisLearned: boolean;\n\n\t\tconst _noun: INoun = {\n\t\t\t...rawNoun,\n\t\t\tisOpen: false,\n\t\t\tisLearned: false\n\t\t};\n\t\t------------------------------\n\t- display button **Mark as learned** to back\n\t\t--------------------------------------------------\n\t\tconst handleMarkAsLearned = (noun: INoun) => {\n\t\t\tnoun.isLearned = !noun.isLearned;\n\t\t\tsetNouns([...nouns]);\n\t\t};\n\n\t\t<button onClick={() => handleMarkAsLearned(noun)}>\n\t\t\tMark as learned\n\t\t</button>\t\t\n\t\t--------------------------------------------------\n\t- show number of learned at top\n\t\t----------------------------------------------\n\t\t<h2>You have learned {nouns.reduce((total,noun) => total + (noun.isLearned ? 1 : 0), 0)} of {nouns.length} nouns:</h2>\n\t\t----------------------------------------------\n\t- **step is finished:**\n\t\t- current code: [60-mark-as-learned](https://github.com/edwardtanguay/et-001-german-noun-game/tree/60-mark-as-learned)\n\t\t- site should look like this:#gif#flashopenclosecount\t\t\t\t\n- **==> STEP 7. When all correct, show game over with final score: number of tries <==**\n\t- we want to now continually save the save to localStorage\n\t\t- so that when the user closes the tab or browser and comes back, they don't lose their progress\n\t- save the noun array to localStorage any time it changes\n\t\t---------------------------------------------\n\t\tconst saveNouns = () => {\n\t\t\tsetNouns([...nouns]);\n\t\t\tlocalStorage.setItem('german-noun-game-state', JSON.stringify(nouns));\n\t\t}\n\n\t\tconst handleFlashcardClick = (noun: INoun) => {\n\t\t\tnoun.isOpen = !noun.isOpen;\n\t\t\tsaveNouns();\n\t\t};\n\n\t\tconst handleMarkAsLearned = (noun: INoun) => {\n\t\t\tnoun.isLearned = !noun.isLearned;\n\t\t\tsaveNouns();\n\t\t};\t\t\n\t\t---------------------------------------------\n\t- on page load, if localStorage has noun array, then load it\n\t\t-------------------------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tlet _nouns: INoun[] = [];\n\t\t\t\tconst localStorageString = localStorage.getItem(\n\t\t\t\t\t'german-noun-game-state'\n\t\t\t\t);\n\t\t\t\tif (localStorageString !== null) {\n\t\t\t\t\t_nouns = JSON.parse(localStorageString);\n\t\t\t\t} else {\n\t\t\t\t\tlet rawNouns = [];\n\t\t\t\t\trawNouns = (await axios.get(url)).data;\n\t\t\t\t\trawNouns = tools.randomize(rawNouns);\n\t\t\t\t\trawNouns.forEach((rawNoun: any) => {\n\t\t\t\t\t\tconst _noun: INoun = {\n\t\t\t\t\t\t\t...rawNoun,\n\t\t\t\t\t\t\tisOpen: false,\n\t\t\t\t\t\t\tisLearned: false,\n\t\t\t\t\t\t};\n\t\t\t\t\t\t_nouns.push(_noun);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tsetNouns(_nouns);\n\t\t\t})();\n\t\t}, []);\n\t\t-------------------------------------------------\n\t- make a **Reset game** button so the user can start over\n\t\t----------------------------------------------------\n\t\tconst handleResetGameButton = () => {\n\t\t\tlocalStorage.removeItem('german-noun-game-state');\n\t\t\twindow.location.reload();\n\t\t};\n\n\t\t<button onClick={handleResetGameButton}>Reset game</button>\n\t\t----------------------------------------------------\n\t- **step is finished:**\n\t\t- current code: [70-save-to-localstorage](https://github.com/edwardtanguay/et-001-german-noun-game/tree/70-save-to-localstorage)\n\t\t- site should look like this:#gif#showthatlocstorworks","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-02 23:20:49","systemWhoCreated":"systemUnknown"},{"id":629,"category":"React","title":"Build a React form that saves data to a JSON file via a local json-server API","body":"- **what we will build**\n\t- a one-page React site that contains a form with various kinds of fields\n\t- a debug button enables the user to see the data being added to a JavaScript object as they fill out the form\n\t\t- in a real application, this button would be e.g. only available for someone logged in as developer\n\t- after filling out data in the form, the user can click a **Save** button which saves the data to a JSON file via json-server\n\t- the final site will work like this:#gif#howtojobsiteforms\n- **project repository**\n\t- code for this site is here: https://github.com/edwardtanguay/et-001-react-form\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-001-react-form/branches/all) to go to the code at various stages of this project's development\n- **==> STEP 1. Create React starter site with Vite <==**\n\t- open your terminal and go to your projects folder\n\t- tell Vite to create a React site: `npm create vite`\n\t- type in name of project, e.g. `et-001-nestcomps`\n\t- tell Vite to create a React site by choosing **react**\n\t- tell Vite to create a React site with TypeScript by choosing **ts-react**#gif#createviteproj\n\t- open project with VSCode: e.g. `code et-001-nestcomps`\n\t- in VSCode, open new terminal: **Terminal > New Terminal**\n\t- install node_modules: `npm i`\n\t- start the application: `npm run dev` \n\t- open site in browser by clicking on link, e.g.##clickthelinkthaton\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n- **==> STEP 2. Minimize the React site <==**\n\t- we only want one CSS file (App.css) so:\n\t\t- in **main.tsx** remove the line\n\t\t\t----------------------------------------\n\t\t\timport './index.css';\n\t\t\t----------------------------------------\n\t\t- delete file file `src/index.css`\n\t- we don't want **React.StrictMode** since it is [generally not useful](https://reactjs.org/docs/strict-mode.html) in all but the largest sites and it [makes useEffect render twice](https://github.com/facebook/react/issues/24502) which makes debugging confusing and difficult\n\t\t- in **main.tsx** delete the two **React.StrictMode** lines\n\t- in **App.tsx** reduce the code down to the minimum to display simple text:\n\t\t--------------------------------------\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Job Site</h1>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t--------------------------------------\n\t- reduce **App.css** down to the minimum\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\t\t\n\t\t----------------------------------\n\t- install Sass\n\t\t- open a new terminal and type: `npm i sass`\n\t\t- rename `App.css` to `App.scss`\n\t\t- in **App.tsx** change `App.css` to `App.scss`\n\t\t- add Sass syntax in the style sheet to see that it works:\n\t\t\t-------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: rgb(39, 27, 10);\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(209, 168, 85);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\t-------------------------------------\n\t- Vite has an unfortunate issue with reloading the site when you have a dark color: there is a slight flash of white\n\t\t- and we want to change the title of the site to the name of our game\n\t\t- in **index.html** add the same backround color of the React site to the original HTML page so there is no blink, and change the title tag\n\t\t\t----------------------------------------\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t\t<title>Job Site</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: rgb(39, 27, 10);\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t</head>\n\t\t\t----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-react-form/tree/20-minimized-site\n\t\t- site should look like this:##thejobsiteti\n- **==> STEP 3. Create form with two fields and debug box that shows content as user types <==**\n\t- **App.tsx** add:\n\t\t--------------------------------\n\t\t<form>\n\t\t\t<fieldset>\n\t\t\t\t<legend>New Job</legend>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<label>Job Title</label>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<textarea />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\t\t\n\t\t--------------------------------\n\t- **App.scss\n\t\t-----------------------------------------\n\t\tform {\n\t\t\tfieldset {\n\t\t\t\tmargin: 2em 2em 2em 0;\n\t\t\t\tpadding: 1.5em 2em 2em 2em;\n\t\t\t\tborder: solid 1px #ccc;\n\t\t\t\tborder-radius: 6px;\n\t\t\t\twidth: 20rem;\n\t\t\t\tmin-width: 200px;\n\t\t\t\tbackground-color: #2a2a2a;\n\n\t\t\t\tlegend {\n\t\t\t\t\tpadding: 0 .25em;\n\t\t\t\t\tcolor: rgb(200, 169, 110) !important;\n\t\t\t\t}\n\n\t\t\t\tlabel {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tmargin-bottom: .3rem;\n\n\t\t\t\t\t&;after {\n\t\t\t\t\t\tcontent: ':';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tinput {\n\t\t\t\t\tpadding: .5em;\n\t\t\t\t\tborder: 1px solid #999;\n\t\t\t\t\twidth: 96%;\n\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t}\n\n\t\t\t\ttextarea {\n\t\t\t\t\twidth: 98%;\n\t\t\t\t\theight: 6rem;\n\t\t\t\t}\n\n\t\t\t\t.buttonArea {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\tpadding: .3rem;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t}\n\n\t\t\t\t\t.preview {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\talign-items: center;\n\n\t\t\t\t\t\t.previewFileName {\n\t\t\t\t\t\t\tmargin-top: .8rem;\n\t\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\t\n\t\t-----------------------------------------\n\t- site should look like this:##thejobsitebox\n\t- create form data state variable and attach to form\n\t\t- **App.tsx**\n\t\t\t------------------------------------------------------\n\t\t\timport { useState } from 'react';\n\n\t\t\timport './App.scss';\n\n\t\t\tinterface IFormData {\n\t\t\t\tjobTitle: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\n\t\t\tconst _formData:IFormData = {\n\t\t\t\tjobTitle: 'jjj',\n\t\t\t\tdescription: 'ddd'\n\t\t\t}\n\n\t\t\tfunction App() {\n\t\t\t\tconst [formData, setFormData] = useState<IFormData>(_formData);\n\n\t\t\t\tconst handleChangeFormField = (e: any, fieldName: string) => {\n\t\t\t\t\tconst value = e.target.value;\n\t\t\t\t\tformData[fieldName as keyof IFormData] = value;\n\t\t\t\t\tsetFormData({ ...formData });\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Job Site</h1>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t\t<legend>New Job</legend>\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<label>Job Title</label>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<input value={formData.jobTitle} type=\"text\" onChange={(e) => handleChangeFormField(e, 'jobTitle')} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<textarea  value={formData.description} onChange={(e) => handleChangeFormField(e, 'description')} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t------------------------------------------------------\n\t- display live data of form to the right for debugging\n\t\t- in **App.tsx** add:\n\t\t\t-------------------------------------\n\t\t\tconst isDebugging = true;\n\n\t\t\t<section>\n\n\t\t\t{isDebugging && (\n\t\t\t<div className=\"debuggingArea\">\n\t\t\t\t<pre>\n\t\t\t\t\t{JSON.stringify(formData, null, 2)}\n\t\t\t\t</pre>\n\t\t\t</div>\n\t\t\t)}\n\n\t\t\t</section>\n\t\t\t-------------------------------------\n\t\t- in **App.scss** add:\n\t\t\t-------------------------------------------------------\n\t\t\tsection {\n\t\t\t\tdisplay: flex;\t\t\t\n\n\t\t\t\tdiv.debuggingArea {\n\t\t\t\t\tmargin-top: 2.5rem;\n\t\t\t\t\tbackground-color: black;\n\t\t\t\t\tborder: 1px solid #444;\n\t\t\t\t\tborder-radius: .5rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\twidth: 40rem;\n\n\t\t\t\t\tpre {\n\t\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\t\twhite-space: pre-wrap;   \n\t\t\t\t\t\tcolor: #999;\n\t\t\t\t\t\tfont-size: .9rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t-------------------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-react-form/tree/30-minimal-form-with-debug-area\n\t\t- site should look like this:#gif#thejobsitewithdebug\t\t\n- **==> STEP 4. Add other kinds of fields to the form <==**\n\t- add dropdown\n\t\t---------------------------------\n\t\t<div className=\"row\">\n\t\t\t<label>Location</label>\n\t\t\t<div>\n\t\t\t\t<select value={formData.location} onChange={(e) => handleChangeFormField(e, 'location')}>\n\t\t\t\t\t<option value=\"berlin\">Berlin</option>\n\t\t\t\t\t<option value=\"hamburg\">Hamburg</option>\n\t\t\t\t\t<option value=\"leipzig\">Leipzig</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\t\t\t\n\t\t---------------------------------\n\t- add checkboxes\n\t\t-----------------------------------\n\t\t<div className=\"row\">\n\t\t\t<label>Details</label>\n\t\t\t<div className=\"checkboxes\">\n\t\t\t\t<div className=\"checkboxItem\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tchecked={formData.remote}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\thandleChangeFormField(e, 'remote')\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\tremote\n\t\t\t\t</div>\n\t\t\t\t<div className=\"checkboxItem\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tchecked={formData.fullTime}\n\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\thandleChangeFormField(e, 'fullTime')\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\tfull-time\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t-----------------------------------\n\t- add field with number (no decimals)\n\t\t-------------------------------------\n\t\t<div className=\"row\">\n\t\t\t<label>Monthly Salary in Euros</label>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tvalue={formData.salary === 0 ? '' : formData.salary.toString()}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\thandleChangeFormField(e, 'salary')\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t\t-------------------------------------\n\t- update form handler function\n\t\t----------------------------------------\n\t\tconst handleChangeFormField = (e: any, fieldName: string) => {\n\t\t\tconst value = e.target.value;\n\t\t\tconst checked = e.target.checked;\n\t\t\tswitch (fieldName) {\n\t\t\t\tcase 'jobTitle':\n\t\t\t\t\tformData.jobTitle = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'description':\n\t\t\t\t\tformData.description = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'location':\n\t\t\t\t\tformData.location = value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remote':\n\t\t\t\t\tformData.remote = checked;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'fullTime':\n\t\t\t\t\tformData.fullTime = checked;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'salary':\n\t\t\t\t\tconst salaryAsNumber = Number(value);\n\t\t\t\t\tconsole.log(salaryAsNumber);\n\t\t\t\t\tif (!isNaN(salaryAsNumber)){\n\t\t\t\t\t\tformData.salary = salaryAsNumber; \n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsetFormData({ ...formData });\n\t\t};\n\t\t----------------------------------------\n\t- add macro `/rb` which changes three fields at once\n\t\t-----------------------------------------\n\t\tcase 'jobTitle':\n\t\t\tif (value === '/rb') {\n\t\t\t\tformData.jobTitle = 'React Developer Job';\n\t\t\t\tformData.location = 'berlin';\n\t\t\t\tformData.remote = true;\n\t\t\t} else {\n\t\t\t\tformData.jobTitle = value;\n\t\t\t}\n\t\t\tbreak;\n\t\t-----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-react-form/tree/40-various-fields\n\t\t- site should look like this:#gif#showwiththemacro\t\t\t\n- **==> STEP 5. Add backend API with json-server to save form to a JSON file <==**\n\t- create JSON file to hold jobs\n\t\t- **src/jobs.json**\n\t\t\t-------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"jobTitle\": \"React Frontend Developer\",\n\t\t\t\t\t\"description\": \"Another React Job in Berlin, and remote.\",\n\t\t\t\t\t\"location\": \"berlin\",\n\t\t\t\t\t\"remote\": true,\n\t\t\t\t\t\"fullTime\": false,\n\t\t\t\t\t\"salary\": 4100\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"jobTitle\": \"Angular Fullstack Developer\",\n\t\t\t\t\t\"description\": \"Angular Job in Hamburg, not remote.\",\n\t\t\t\t\t\"location\": \"hamburg\",\n\t\t\t\t\t\"remote\": false,\n\t\t\t\t\t\"fullTime\": true,\n\t\t\t\t\t\"salary\": 4500\n\t\t\t\t}\n\t\t\t]\t\t\n\t\t\t-------------------------------\n\t- display on page\n\t\t--------------------------------\n\t\t<div className=\"jobs\">\n\t\t\t<h3>Jobs</h3>\n\t\t\t<ul>\n\t\t\t{jobs.map((job:IJob) => {\n\t\t\t\treturn <li>{job.jobTitle}</li>;\n\t\t\t})}\n\t\t\t</ul>\n\t\t</div>\t\t\n\t\t--------------------------------\n\t- serve as API with json-server\n\t\t- install it\n\t\t\t- `npm i json-server`\n\t\t- set up start script for it in **package.json**\n\t\t\t---------------------------\n\t\t\t\"api\": \"json-server --watch ./src/data/jobs.json --port 5555\"\n\t\t\t---------------------------\n\t\t- `npm run api`\n\t\t- **Error:** Data must be an object##mustbeobjsk\n\t\t- **Reason:**\n\t\t\t- json-server expects a *database of collections* similar to MongoDB\n\t\t- **Solution:**\n\t\t\t- put the jobs array in a property in an array, so **jobs** is just one collection in the database, and add ids, json-server will automatically add them to new items\n\t\t\t\t-----------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"jobs\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\t\t\"jobTitle\": \"React Frontend Developer\",\n\t\t\t\t\t\t\t\"description\": \"Another React Job in Berlin, and remote.\",\n\t\t\t\t\t\t\t\"location\": \"berlin\",\n\t\t\t\t\t\t\t\"remote\": true,\n\t\t\t\t\t\t\t\"fullTime\": false,\n\t\t\t\t\t\t\t\"salary\": 4100\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\t\t\"jobTitle\": \"Angular Fullstack Developer\",\n\t\t\t\t\t\t\t\"description\": \"Angular Job in Hamburg, not remote.\",\n\t\t\t\t\t\t\t\"location\": \"hamburg\",\n\t\t\t\t\t\t\t\"remote\": false,\n\t\t\t\t\t\t\t\"fullTime\": true,\n\t\t\t\t\t\t\t\"salary\": 4500\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t-----------------------------------\n\t\t- `npm run api`\n\t\t\t- if you get an error **EADDRINUSE**, then just change the port, e.g. from 5555 to **5556** for now\n\t\t- `npm run api` and click on the **jobs** link##clickonjthejobs\t\n\t\t- you will see that it is serving your JSON file's **jobs** array:##serverthejobsarray\n\t- now let's change the name of the file from jobs.json to **db.json** (database) since the file can now contain many other collections other than jobs\n\t\t- rename jobs.json to **db.json**\n\t\t- change the api start script\n\t\t\t----------------------------------------------------\n\t\t\t\"api\": \"json-server --watch ./src/data/db.json --port 5556\"\n\t\t\t----------------------------------------------------\n\t- now instead of importing our json into our site, we want to fetch it asynchronously\n\t\t- this way it will no longer be a static file\n\t\t- we can refetch it while our website runs, e.g. after the file changes, just as we would any other API on any other external server\n\t\t\t- it is just that our \"external server\" is inside our local application running on another port\n\t\t- in **App.tsx**, remove the command `import jobs from './data/jobs.json';`\n\t\t- `npm i axios`\n\t\t- **App.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\t\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetJobs((await axios.get(`${apiUrl}/jobs`)).data);\n\t\t\t\t})();\n\t\t\t}, []);\t\t\n\t\t\t-----------------------------------------\n\t- add button to form and onclick which adds the data object to the database in the jobs collection\n\t\t-----------------------------------------\n\t\tconst loadJobs = async () => {\n\t\t\tconst response = await axios.get(`${apiUrl}/jobs`);\n\t\t\tconst _jobs = response.data;\n\t\t\tsetJobs(_jobs);\n\t\t};\n\n\t\tuseEffect(() => {\n\t\t\tloadJobs();\n\t\t}, []);\n\n\t\tconst handleFormSave = (e: any) => {\n\t\t\te.preventDefault();\n\t\t\tif (formData.jobTitle.trim() !== '') {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.post(`${apiUrl}/jobs`, formData);\n\t\t\t\t\t_formData.jobTitle = '';\n\t\t\t\t\tsetFormData(_formData);\n\t\t\t\t\tloadJobs();\n\t\t\t\t})();\n\t\t\t}\n\t\t};\n\t\t-----------------------------------------\n\t- **App.scss**\n\t\t--------------------------\n\t\t.buttonRow {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: flex-end;\n\n\t\t\tbutton {\n\t\t\t\tmargin-top: 1rem;\n\t\t\t\tfont-size: 1rem;\n\t\t\t\tpadding: .3rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t}\n\t\t}\t\t\n\t\t--------------------------\n\t- make a start script to start both api and website at once\n\t\t- `npm -D i npm-run-all`\n\t\t- **package.json**\n\t\t\t-----------------------------------------------\n\t\t\t\"start\": \"run-p backend frontend\",\n\t\t\t\"frontend\": \"vite\",\n\t\t\t\"backend\": \"json-server --watch ./src/data/db.json --port 5556\"\t\t\t\n\t\t\t-----------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-react-form/tree/50-add-backend-api-with-json-server\n\t\t- site should look like this:#gif#howtojobsiteforms","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-03 21:36:39","systemWhoCreated":"systemUnknown"},{"id":630,"category":"React","title":"EXPLANATION: Advanced Sass with React","body":"- create React site with Vite\n\t- minimize\n\t\t- reduce to one CSS file: App.css\n\t- install Sass\n\t\t- `npm i sass`\n\t\t- rename App.css to App.scss\n- **variables**\n\t- can define variables inside styles\n\t\t-------------------------------------\n\t\th1 {\n\t\t\t$headerColor: rgb(223, 223, 147);\n\t\t\tcolor: $headerColor;\n\t\t}\n\n\t\th2 {\n\t\t\t$headerColor: orange;\n\t\t\tcolor: $headerColor;\n\t\t}\t\t\n\t\t-------------------------------------\n\t- you can override styles\n\t\t---------------------------------------\n\t\t$headerColor: orange;\n\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\n\t\t\th1 {\n\t\t\t\t$headerColor: rgb(223, 223, 147);\n\t\t\t\tcolor: $headerColor;\n\t\t\t}\n\n\t\t\th2 {\n\t\t\t\tcolor: $headerColor;\n\t\t\t}\n\t\t}\t\t\n\t\t---------------------------------------\n\t- note hyphen and dash are the same\n\t\t----------------------------\n\t\t$main-color: pink;\n\n\t\tbody {\n\n\t\t\tp {\n\t\t\t\tcolor: $main_color;\n\t\t\t}\t\t\n\t\t----------------------------\n- **nesting**\n\t-------------------------------------\n\tbody {\n\t\tbackground-color: #333;\n\n\t\th1 {\n\t\t\t$headerColor: rgb(223, 223, 147) !global;\n\t\t\tcolor: $headerColor;\n\t\t}\n\t}\n\t-------------------------------------\n- **partials**\n\t- use underscore\n\t- `@use \"variables\" as var;`\n- **mixins**\n\t-------------------------------\n\t<button className=\"dashboard-normal\">Regular</button>\n\t<button className=\"dashboard-highlight\">Highlighted</button>\t\n\n\t@mixin dashboardButton($backgroundColor: #aaa, $color: #666) {\n\t\tborder: 5px solid $color;\n\t\tborder-radius: 1rem;\n\t\tfont-size: 2rem;\n\t\tcolor: $color;\n\t\tpadding: .5rem;\n\t\tbackground-color: $backgroundColor;\n\t}\n\n\t.dashboard-normal {\n\t\t@include dashboardButton;\n\t}\n\n\t.dashboard-highlight {\n\t\t@include dashboardButton(#333, yellow);\n\t}\n\t-------------------------------\n- **extend**\n\t- is like mixin but compiles differently\n- **parent selectors**\n\t--------------------------------\n\tbutton.large {\n\t\twidth: 15rem;\n\t\tfont-size: 1.5rem;\n\t\tborder: 1px solid #555;\n\t\tborder-radius: .5rem;\n\t\topacity: .6;\n\t\tcursor: pointer;\n\t\t&-primary {\n\t\t\tbackground-color: lightgreen;\n\t\t}\n\t\t&:hover {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\t--------------------------------\n- **lists and @each**\n\t--------------------------------\n\t@mixin btn($suffix, $bgcolor, $color) {\n\t\t.btn#{$suffix} {\n\t\t\tbackground-color: $bgcolor;\n\t\t\tcolor: $color;\n\t\t\tfont-size: 2rem;\n\t\t\tpadding: .2rem .5rem .5rem .5rem;\n\t\t\tborder: 1px solid #555;\n\t\t\tborder-radius: 1rem;\n\t\t}\n\t}\n\n\t$buttons: -primary navy green, -warning orange yellow, -error red tomato;\n\n\t@each $suffix, $bgcolor, $color in $buttons {\n\t\t@include btn($suffix, $bgcolor, $color);\n\t}\t\t\n\t--------------------------------\n- **lists and @for**\n\t-------------------------------------\n\t$hsizes: 3rem, 2.5rem, 2rem;\n\t$hcolors: navy, blue, lightblue;\n\n\t@for $i from 1 through length($hsizes) {\n\t\th#{$i}.new {\n\t\t\tfont-size: nth($hsizes, $i);\n\t\t\tcolor: nth($hcolors, $i);\n\t\t\tfont-style: normal;\n\t\t\tmargin: 0;\n\t\t}\n\t}\n\t-------------------------------------\n- **maps**\n\t---------------------------------------\n\t$boxSizes: ('small': 50px,'medium': 100px,  'large': 150px);\n\n\t@each $name, $size in main.$boxSizes {\n\t\t.box-#{$name} {\n\t\t\theight: $size;\n\t\t\twidth: $size;\n\t\t\tbackground-color: orange;\n\t\t\tcolor: black;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tmargin: 1rem;\n\t\t}\n\t}\n\n\t.boxes {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t}\n\n\t<div className=\"boxes\">\n\t\t<div className=\"box-small\">small</div>\n\t\t<div className=\"box-medium\">medium</div>\n\t\t<div className=\"box-large\">large</div>\n\t</div>\n\t---------------------------------------\n- **if/else**\n\t----------------------------------------------\n\t@mixin personLabel($className) {\n\t\t.label-#{$className} {\n\t\t\tdisplay: inline-block;\n\t\t\tmargin-right: 1rem;\n\t\t\tpadding: .5rem;\n\t\t\t@if $className =='customer' {\n\t\t\t\tbackground-color: navy;\n\t\t\t\tcolor: yellow;\n\t\t\t}\n\n\t\t\t@else {\n\t\t\t\tbackground-color: darkgreen;\n\t\t\t\tcolor: orange;\n\t\t\t}\n\t\t}\n\t}\n\n\t@include personLabel('employee');\n\t@include personLabel('customer');\t\t\n\t----------------------------------------------\n- **color functions**\n\t- darken()\n\t\t------------------------------------\n\t\t@mixin baseLabel() {\n\t\t\twidth: 14rem;\n\t\t\tpadding: .2rem;\n\t\t\tmargin-bottom: .2rem;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\t@mixin mainLabel($level, $bgcolor) {\n\t\t\t.#{$level}-selected {\n\t\t\t\t@include baseLabel();\n\t\t\t\tbackground-color: $bgcolor;\n\t\t\t}\n\t\t\t.#{$level}-unselected {\n\t\t\t\t@include baseLabel();\n\t\t\t\tbackground-color: darken($bgcolor, 10%);\n\t\t\t}\n\t\t\t.#{$level}-disabled {\n\t\t\t\t@include baseLabel();\n\t\t\t\tbackground-color: darken($bgcolor, 15%);\n\t\t\t}\n\t\t}\n\n\t\t@include mainLabel('expert', purple);\n\t\t@include mainLabel('novice', green);\t\t\n\t\t------------------------------------\n\t- others:  [https://www.w3schools.com/sass/sass_functions_color.php](https://www.w3schools.com/sass/sass_functions_color.php)\n- **your final solution should look something like this:**##sassadvancedalldone\n- **App.tsx**\n\t-----------------------------------------------\n\timport './styles/App.scss';\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>This is h1</h1>\n\t\t\t\t<h2>This is h2</h2>\n\t\t\t\t<h3>This is h3</h3>\n\t\t\t\t<hr />\n\t\t\t\t<p>This is the main color for the tag p.</p>\n\t\t\t\t<hr />\n\t\t\t\t<p>\n\t\t\t\t\tThis is code in a p tag: <code>ls -al</code>\n\t\t\t\t</p>\n\t\t\t\t<pre>\n\t\t\t\t\tThis is code in a p tag: <code>ls -al</code>\n\t\t\t\t</pre>\n\t\t\t\t<hr />\n\t\t\t\t<button className=\"dashboard-normal\">Regular</button>\n\t\t\t\t<button className=\"dashboard-highlight\">Highlighted</button>\n\t\t\t\t<hr />\n\t\t\t\t<button className=\"large\">This is a large button</button>\n\t\t\t\t<hr />\n\t\t\t\t<button className=\"btn-primary\">Primary</button>\n\t\t\t\t<button className=\"btn-warning\">Warning</button>\n\t\t\t\t<button className=\"btn-error\">Error</button>\n\t\t\t\t<hr />\n\t\t\t\t<h4>This is h4</h4>\n\t\t\t\t<h5>This is h5</h5>\n\t\t\t\t<h6>This is h6</h6>\n\t\t\t\t<hr />\n\t\t\t\t<div className=\"boxes\">\n\t\t\t\t\t<div className=\"box-small\">small</div>\n\t\t\t\t\t<div className=\"box-medium\">medium</div>\n\t\t\t\t\t<div className=\"box-large\">large</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div className=\"buttonGroup\">\n\t\t\t\t\t<button className=\"expert-selected\">expert-selected</button>\n\t\t\t\t\t<button className=\"expert-unselected\">expert-unselected</button>\n\t\t\t\t\t<button className=\"expert-disabled\">expert-disabled</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"buttonGroup\">\n\t\t\t\t\t<button className=\"novice-selected\">novice-selected</button>\n\t\t\t\t\t<button className=\"novice-unselected\">novice-unselected</button>\n\t\t\t\t\t<button className=\"novice-disabled\">novice-disabled</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"buttonGroup\">\n\t\t\t\t\t<button className=\"guest-selected\">guest-selected</button>\n\t\t\t\t\t<button className=\"guest-unselected\">guest-unselected</button>\n\t\t\t\t\t<button className=\"guest-disabled\">guest-disabled</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t-----------------------------------------------\n- **styles/App.scss**\n\t------------------------------------------------\n\t@use \"main_variables\" as main;\n\n\tbody {\n\t\tbackground-color: #333;\n\t\tcolor: #ccc;\n\t\tfont-family: sans-serif;\n\t\tpadding: 0 1rem;\n\n\t\th1 {\n\t\t\tcolor: main.$header-color;\n\t\t}\n\n\t\th2 {\n\t\t\tcolor: main.$header-color;\n\t\t}\n\n\t\th3 {\n\t\t\tcolor: main.$header-color;\n\t\t}\n\n\t\tp {\n\t\t\tcolor: main.$paragraph_color;\n\n\t\t\tcode {\n\t\t\t\tcolor: red;\n\t\t\t}\n\t\t}\n\n\t\tpre {\n\t\t\tcode {\n\t\t\t\tcolor: orange;\n\t\t\t}\n\t\t}\n\n\t\t.dashboard-normal {\n\t\t\t@include main.dashboardButton;\n\t\t}\n\n\t\t.dashboard-highlight {\n\t\t\t@include main.dashboardButton(#333, yellow);\n\t\t}\n\n\t\tbutton.large {\n\t\t\tfont-size: 1.5rem;\n\t\t\tborder: 1px solid #555;\n\t\t\tborder-radius: .5rem;\n\t\t\tcursor: pointer;\n\t\t\tbackground-color: navy;\n\t\t\tpadding: .5rem;\n\t\t\tcolor: #aaa;\n\n\t\t\t&:hover {\n\t\t\t\tcolor: yellow;\n\t\t\t}\n\t\t}\n\n\t\t@each $suffix,\n\t\t$bgcolor,\n\t\t$color in main.$buttons {\n\t\t\t@include main.btn($suffix, $bgcolor, $color);\n\t\t}\n\n\t\t@for $i from 4 through 6 {\n\t\t\th#{$i} {\n\t\t\t\tfont-size: nth(main.$hsizes, $i - 3);\n\t\t\t\tcolor: nth(main.$hcolors, $i - 3);\n\t\t\t\tfont-style: normal;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t}\n\n\t\t@each $name,\n\t\t$size in main.$boxSizes {\n\t\t\t.box-#{$name} {\n\t\t\t\theight: $size;\n\t\t\t\twidth: $size;\n\t\t\t\tbackground-color: orange;\n\t\t\t\tcolor: black;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\tmargin: 1rem;\n\t\t\t}\n\t\t}\n\n\t\t.boxes {\n\t\t\tdisplay: flex;\n\t\t\tgap: 1rem;\n\t\t}\n\n\t\t@include main.activeButton('expert', purple);\n\t\t@include main.activeButton('novice', green);\n\t\t@include main.activeButton('guest', blue);\n\n\t\t.buttonGroup {\n\t\t\tdisplay: flex;\n\t\t\tgap: .5rem;\n\t\t\tmargin: 1rem;\n\t\t}\n\n\t}\n\t------------------------------------------------\n- **styles/_main_variables.scss**\n\t-----------------------------------------------\n\t$header-color: orange;\n\t$paragraph-color: lightblue;\n\n\t@mixin dashboardButton($backgroundColor: #aaa, $color: #666) {\n\t\tborder: 5px solid $color;\n\t\tborder-radius: 1rem;\n\t\tfont-size: 2rem;\n\t\tpadding: .5rem;\n\t\tmargin: .5rem;\n\t\tbackground-color: $backgroundColor;\n\t\tcolor: $color;\n\t}\n\n\t@mixin btn($suffix, $bgcolor, $color) {\n\t\t.btn#{$suffix} {\n\t\t\tbackground-color: $bgcolor;\n\t\t\tcolor: $color;\n\t\t\tfont-size: 2rem;\n\t\t\tpadding: .5rem 1rem .8rem 1rem;\n\t\t\tborder: 1px solid #555;\n\t\t\tborder-radius: 1rem;\n\t\t\tmargin: .5rem;\n\t\t}\n\t}\n\n\t// lists\n\t$buttons: -primary navy green, -warning orange yellow, -error red tomato;\n\t$hsizes: 3rem, 2.5rem, 2rem;\n\t$hcolors: navy, blue, lightblue;\n\n\t// maps\n\t$icons: (\"eye\": \"\\f112\", \"start\": \"\\f12e\", \"stop\": \"\\f12f\");\n\t$boxSizes: ('small': 50px,'medium': 100px,  'large': 150px);\n\n\t@mixin baseLabel() {\n\t\twidth: 14rem;\n\t\tpadding: .2rem;\n\t\tmargin-bottom: .2rem;\n\t\ttext-align: center;\n\t}\n\n\t@mixin activeButton($level, $bgcolor) {\n\t\t.#{$level}-selected {\n\t\t\t@include baseLabel();\n\t\t\tbackground-color: $bgcolor;\n\t\t\tcolor: white;\n\t\t}\n\t\t.#{$level}-unselected {\n\t\t\t@include baseLabel();\n\t\t\tbackground-color: darken($bgcolor, 10%);\n\t\t\tcolor: white;\n\t\t}\n\t\t.#{$level}-disabled {\n\t\t\t@include baseLabel();\n\t\t\tbackground-color: darken($bgcolor, 15%);\n\t\t\tcolor: #777;\n\t\t\tborder: 0;\n\t\t}\n\t}\n\t-----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-07 00:21:53","systemWhoCreated":"systemUnknown"},{"id":631,"category":"React","title":"Dynamic inline styles and classes","body":"- this howto shows how to use dynamic styles in React to base styling on state variables#gif#changingState\n- finished code for this howto can be found here:\n\t- https://github.com/edwardtanguay/et-001-dynamic-styles\n- create minimized React site\n\t- https://github.com/edwardtanguay/blank-vite-dark\n- create site with state\n\t- **App.tsx**\n\t\t-----------------------------------------\n\t\timport { useState } from 'react';\n\t\timport './App.scss';\n\n\t\tconst _state = {\n\t\t\tisOnline: false,\n\t\t\tuserName: \"Harald Lingren\",\n\t\t\tdaysTillReportIsDue: 1\n\t\t};\n\n\t\tfunction App() {\n\t\t\tconst [state, setState] = useState(_state);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t\t<p className=\"userName\">{state.userName}</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\n\t\t-----------------------------------------\n- dynamic styles\t\n\t- if logged in, then show as green, otherwise grey\n\t\t------------------------------------\n\t\t<p>\n\t\t\t<span\n\t\t\t\tclassName=\"userName\"\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: state.isOnline ? 'green' : '#444',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{state.userName}\n\t\t\t</span>\n\t\t</p>\t\t\n\t\t------------------------------------\n\t- note you can combine with base styles in Sass\n\t\t---------------------------------------------\n\t\t.userName {\n\t\t\tpadding: .5rem;\n\t\t}\n\t\t---------------------------------------------\n\t- make dynamic\n\t\t--------------------------------------------\n\t\tconst handleToggleLogin = () => {\n\t\t\tsetState({\n\t\t\t\t...state,\n\t\t\t\tisOnline: !state.isOnline\n\t\t\t});\n\t\t};\n\n\t\t<button onClick={() => handleToggleLogin()}>toggle logged in</button>\n\t\t--------------------------------------------\n\t- change state based on number\n\t\t-----------------------------------------\n\t\tconst handleChangeDaysDue = () => {\n\t\t\tsetState({\n\t\t\t\t...state,\n\t\t\t\tdaysTillReportIsDue: state.daysTillReportIsDue + 1\n\t\t\t});\n\t\t}\n\n\t\t<p className=\"message\" style={{fontSize: `${1 + (state.daysTillReportIsDue/10)}rem`, color: state.daysTillReportIsDue < 5 ? \"orange\" : \"red\"}}>Report is due in {state.daysTillReportIsDue} days.</p>\n\n\t\t<button onClick={() => handleChangeDaysDue()}>change days due</button>\n\t\t-----------------------------------------\n\t- when dynamic-style logic becomes too complex, put into a function\n\t\t----------------------------------------------\n\t\tconst getMessageStyle = () => {\n\t\t\treturn {\n\t\t\t\tfontSize: `${1 + state.daysTillReportIsDue / 10}rem`,\n\t\t\t\tcolor: state.daysTillReportIsDue < 5 ? 'orange' : 'red',\n\t\t\t\tbackgroundColor: state.daysTillReportIsDue < 8 ? '' : 'tomato', \n\t\t\t};\n\t\t};\t\t\n\n\t\t<p className=\"message\" style={getMessageStyle()}>\n\t\t\tReport is due in {state.daysTillReportIsDue} days.\n\t\t</p>\t\t\n\t\t----------------------------------------------\n- dynamic classes\n\t- change the logged in style solution to classes\n\t\t- **App.tsx**\n\t\t\t-------------------------------------------\n\t\t\t<p>\n\t\t\t\t<span\n\t\t\t\t\tclassName={`userName ${state.isOnline ? 'loggedIn' : 'loggedOut'}`}\n\t\t\t\t>\n\t\t\t\t\t{state.userName}\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t\t-------------------------------------------\n\t\t- **App.scss**\n\t\t\t----------------------------------------------\n\t\t\t.loggedIn {\n\t\t\t\tbackground-color: lightgreen;\n\t\t\t\tcolor: darkgreen;\n\t\t\t}\n\t\t\t.loggedOut {\n\t\t\t\tbackground-color: #555;\n\t\t\t\tcolor: tomato;\n\t\t\t}\n\t\t\t----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-07 00:40:59","systemWhoCreated":"systemUnknown"},{"id":632,"category":"Excel","title":"Read from and write to an Excel file from Node to import data for a React site","body":"- **what we will build**\n\t- this howto uses **exceljs** to read and write Excel files\n\t- an import script reads the content of an Excel file (.xlsx) and saves that content in a .json file\n\t- this JSON file is then imported from a React site and the contents shown in the browser\n\t- two other scripts also demonstrate how to use exceljs to write to an existing Excel file and how to create a new Excel file\n\t- note that **.mjs** files are used in order to use ESM modules (**import** instead of require)\n\t\t- and note to run them, npm scripts are used which execute esm, itself an installed package (`-r` = require)\n\t\t\t-----------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"vite\",\n\t\t\t\t\"build\": \"tsc && vite build\",\n\t\t\t\t\"preview\": \"vite preview\",\n\t\t\t\t\"import\": \"node -r esm backend/import.mjs\",\n\t\t\t\t\"addTranslation\": \"node -r esm backend/addTranslation.mjs\",\n\t\t\t\t\"createExcelFile\": \"node -r esm backend/createExcelFile.mjs\"\n\t\t\t},\n\t\t\t-----------------------------------------\n- **repository**\n\t- the complete code for this site is here: https://github.com/edwardtanguay/et-001-excel-read-write\n\t- see the README.md for instructions on how to set up and run\n- after importing the data from the Excel file, the site will look like this:##thesexcelejsite\n- **backend/import.mjs** (read Excel file)\n\t--------------------------------------\n\timport * as tools from './tools.mjs';\n\timport fs from 'fs';\n\n\tconsole.log('importing translations...');\n\n\t(async () => {\n\t\tconst translations = await tools.getTranslations();\n\n\t\tfs.writeFile('./src/data/translations.json', JSON.stringify(translations), () => {\n\t\t\tconsole.log('finished')\n\t\t});\n\t})();\n\t--------------------------------------\n- **backend/addTranslations.mjs** (edit existing Excel file)\n\t---------------------------------------------\n\timport Excel from 'exceljs';\n\timport * as tools from './tools.mjs';\n\n\t(async () => {\n\t\tconst wb = new Excel.Workbook();\n\t\tawait wb.xlsx.readFile(tools.translationFilePathAndFileName);\n\t\tconst ws = wb.getWorksheet(1);\n\n\t\t// ws.getCell('A1').value = 'test';\n\t\tconst r3 = ws.getRow(3119); // TODO: find the end of the file dynamically\n\t\tr3.values = ['English', 'German', 'house', 'das House'];\n\n\t\twb.xlsx\n\t\t\t.writeFile(tools.translationFilePathAndFileName)\n\t\t\t.then(() => {\n\t\t\t\tconsole.log('file changed');\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err.message);\n\t\t\t});\n\t})();\t\n\t---------------------------------------------\n- **backend/createExcelFile.mjs** (create new Excel file)\n\t------------------------------------------\n\timport Excel from 'exceljs';\n\n\tconst fileName = './backend/output/test.xlsx';\n\n\tconst wb = new Excel.Workbook();\n\tconst ws = wb.addWorksheet('Translations');\n\n\tws.getCell('A1').value = 'test';\n\tws.getCell('B1').value = 'test2';\n\n\tconst r3 = ws.getRow(3);\n\tr3.values = [1, 2, 3, 4, 5, 6];\n\n\twb.xlsx\n\t  .writeFile(fileName)\n\t  .then(() => {\n\t\tconsole.log('file created');\n\t  })\n\t  .catch(err => {\n\t\tconsole.log(err.message);\n\t  });\n\n\tconsole.log('saved.');\t\n\t------------------------------------------\n- **src/App.tsx**\n\t--------------------------------------------\n\timport './App.scss';\n\timport translations from './data/translations.json';\n\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Excel Read/Write Example</h1>\n\t\t\t\t<p>Welcome to this site.</p>\n\n\t\t\t\t<h2>There are {translations.length} translations:</h2>\n\n\t\t\t\t<table className=\"blueTable\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{translations.map((translation, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr className=\"translation\" key={i}>\n\t\t\t\t\t\t\t\t<td className=\"fromLanguage\">\n\t\t\t\t\t\t\t\t\t{translation.fromLanguage}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td className=\"toLanguage\">\n\t\t\t\t\t\t\t\t\t{translation.toLanguage}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td className=\"fromPhrase\">\n\t\t\t\t\t\t\t\t\t{translation.fromPhrase}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td className=\"toPhrase\">\n\t\t\t\t\t\t\t\t\t{translation.toPhrase}\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\n\t--------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-07 15:13:29","systemWhoCreated":"systemUnknown"},{"id":633,"category":"React","title":"Build a React site that demonstrates how to make custom hooks","body":"- **what we will build**\n\t- a multi-page React site in which we create custom hooks which are reused\n\t- we will use React Router to create a minimalistic menu of pages\n\t- on each page we will demonstrate who we use the custom hooks we make\n- **what are custom hooks?**\n\t- hooks are functions that let you hook into React state so that when something changes you do something specific and useful\n\t- custom hooks enable you to identify repetitive code and condense it into a function that can be called from mulitple places in code\n\t\t- the function generally returns an object or array of numerous values, some of which are functions\n- **code for this project**\n\t- the full code can be found here: https://github.com/edwardtanguay/et-003-custom-hooks\n\t\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-003-custom-hooks/branches/all) to go to the code at various stages of this project's development\n\t- this is another version with slightly different features, e.g. starter page: https://github.com/edwardtanguay/et-004-customhooks\n- **how the project will look**\n\t- the final site will work like this: #gif#showfinalcustomhooks\n- **==> STEP 1. Create React starter site with Vite <==**\n\t- open your terminal and go to your projects folder\n\t- tell Vite to create a React site: `npm create vite`\n\t- type in name of project, e.g. `et-001-nestcomps`\n\t- tell Vite to create a React site by choosing **react**\n\t- tell Vite to create a React site with TypeScript by choosing **ts-react**#gif#createviteproj\n\t- open project with VSCode: e.g. `code et-001-nestcomps`\n\t- in VSCode, open new terminal: **Terminal > New Terminal**\n\t- install node_modules: `npm i`\n\t- start the application: `npm run dev` \n\t- open site in browser by clicking on link, e.g.##clickthelinkthaton\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n- **==> STEP 2. Minimize the React site <==**\n\t- we only want one CSS file (App.css) so:\n\t\t- in **main.tsx** remove the line\n\t\t\t----------------------------------------\n\t\t\timport './index.css';\n\t\t\t----------------------------------------\n\t\t- delete file file `src/index.css`\n\t- we don't want **React.StrictMode** since it is [generally not useful](https://reactjs.org/docs/strict-mode.html) in all but the largest sites and it [makes useEffect render twice](https://github.com/facebook/react/issues/24502) which makes debugging confusing and difficult\n\t\t- in **main.tsx** delete the two **React.StrictMode** lines\n\t- in **App.tsx** reduce the code down to the minimum to display simple text:\n\t\t--------------------------------------\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Custom Hooks Site</h1>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t--------------------------------------\n\t- reduce **App.css** down to the minimum\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\t\t\n\t\t----------------------------------\n\t- install Sass\n\t\t- open a new terminal and type: `npm i sass`\n\t\t- rename `App.css` to `App.scss`\n\t\t- in **App.tsx** change `App.css` to `App.scss`\n\t\t- add Sass syntax in the style sheet to see that it works:\n\t\t\t-------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: rgb(39, 27, 10);\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(209, 168, 85);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\t-------------------------------------\n\t- Vite has an unfortunate issue with reloading the site when you have a dark color: there is a slight flash of white\n\t\t- and we want to change the title of the site to the name of our game\n\t\t- in **index.html** add the same backround color of the React site to the original HTML page so there is no blink, and change the title tag\n\t\t\t----------------------------------------\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t\t<title>Job Site</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: rgb(39, 27, 10);\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t</head>\n\t\t\t----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-003-custom-hooks/tree/20-minimized-site\n\t\t- site should look like this:##tehcust02\n- **==> STEP 3. Build menu with three pages <==**\n\t- we want to build a menu with three pages\n\t- we will use React Router v6 which makes it simple to create a simple, flat menu with pages that have permalink URLs\n\t- `npm i react-router-dom`\n\t- make the components for each of the three pages\n\t\t- **src/components/PageWelcome.tsx**\n\t\t\t--------------------------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t\t- **src/components/PageUseToggle.tsx**\n\t\t\t--------------------------------------------\n\t\t\texport const PageUseToggle = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>The useToggle page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t\t- **src/components/PageUseFetch.tsx**\n\t\t\t--------------------------------------------\n\t\t\texport const PageUseFetch = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>The useFetch page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t- implement the React Router menu\n\t\t- **main.tsx** \n\t\t\t--------------------------------------------\n\t\t\timport { BrowserRouter } from 'react-router-dom';\n\n\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t);\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **App.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { NavLink, Routes, Route, Navigate } from 'react-router-dom';\n\n\t\t\t<nav>\n\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink> \n\t\t\t\t<NavLink to=\"/useToggle\">useToggle</NavLink>\n\t\t\t\t<NavLink to=\"/useFetch\">useFetch</NavLink>\n\t\t\t</nav>\n\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t<Route path=\"/useToggle\" element={<PageUseToggle />} />\n\t\t\t\t<Route path=\"/useFetch\" element={<PageUseFetch />} />\n\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />}/>\n\t\t\t</Routes>\t\t\n\t\t\t-----------------------------------------\n\t- add styling\n\t\t- **App.scss**\n\t\t\t-----------------------------------------\n\t\t\tnav {\n\t\t\t\tbackground-color: #222;\n\t\t\t\tpadding: .5rem;\n\t\t\t\ta {\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tmargin-right: 1rem;\n\t\t\t\t}\n\n\t\t\t\ta.active {\n\t\t\t\t\tcolor: rgb(211, 211, 110);\n\t\t\t\t}\n\t\t\t}\n\t\t\t-----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-003-custom-hooks/tree/30-create-react-router-menu\n\t\t- site should look like this:#gif#reactroutermenuok\n- **==> STEP 4. Implement the useToggle custom hook <==**\t\n\t- implement two toggles without a hook to show code redundancy\n\t\t- imagine we have a user profile page\n\t\t- we want to give the user the abilility to indicate if they want to see advertisements or not\n\t\t\t- **PageUseToggle.tsx**\n\t\t\t\t------------------------------------\n\t\t\t\timport { useState } from 'react';\n\n\t\t\t\tconst [showAdvertisements, setShowAdvertisements] = useState(false);\n\n\t\t\t\t<h2>User Settings</h2>\n\t\t\t\t<p><button onClick={() => setShowAdvertisements(!showAdvertisements)}>Advertisements</button> <span style={{ color: showAdvertisements ? 'green' : 'red' }}> {showAdvertisements ? 'yes, show advertisements' : 'no, do not show advertisements'}</span></p>\t\t\n\t\t\t\t------------------------------------\n\t\t- also if they want to receive e-mail notifications\n\t\t\t- **PageUseToggle.tsx**\n\t\t\t\t------------------------------------\n\t\t\t\tconst [sendMails, setSendMails] = useState(false);\n\n\t\t\t\t<p><button onClick={() => setSendMails(!sendMails)}>Mails</button> <span style={{ color: sendMails ? 'green' : 'red' }}> {sendMails ? 'yes, send me mails' : 'no, do not send me mails'}</span></p>\n\t\t\t\t------------------------------------\n\t\t- add more controls, **PageUseToggle.tsx**\n\t\t\t-----------------------------------------\n\t\t\t<hr />\n\t\t\t<button onClick={() => setShowAdvertisements(false)}>Turn off advertisements</button>\n\t\t\t<button onClick={() => setSendMails(false)}>Turn off mails</button>\n\t\t\t-----------------------------------------\n\t- now create hook\n\t\t- notice that you have code redundancy which could be simplified\n\t\t- write code as you want it first\n\t\t\t-----------------------------------\n\t\t\tconst [ads, toggleAds, adsOff] = useToggle(false);\n\t\t\t-----------------------------------\n\t\t- change rest appropriately\n\t\t\t---------------------------------------------------\n\t\t\timport { useState } from 'react';\n\t\t\timport { useToggle } from '../hooks/useToggle';\n\n\t\t\texport const PageUseToggle = () => {\n\t\t\t\tconst [ads, toggleAds, adsOff] = useToggle(false);\n\t\t\t\tconst [sendMails, setSendMails] = useState(false);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>The useToggle page.</p>\n\n\t\t\t\t\t\t<h2>User Settings</h2>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<button onClick={() => toggleAds()}>Advertisements</button>{' '}\n\t\t\t\t\t\t\t<span style={{ color: ads ? 'green' : 'red' }}>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t{ads\n\t\t\t\t\t\t\t\t\t? 'yes, show advertisements'\n\t\t\t\t\t\t\t\t\t: 'no, do not show advertisements'}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<button onClick={() => setSendMails(!sendMails)}>Mails</button>{' '}\n\t\t\t\t\t\t\t<span style={{ color: sendMails ? 'green' : 'red' }}>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t{sendMails\n\t\t\t\t\t\t\t\t\t? 'yes, send me mails'\n\t\t\t\t\t\t\t\t\t: 'no, do not send me mails'}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t<button onClick={() => adsOff()}>Turn off advertisements</button>\n\t\t\t\t\t\t<button onClick={() => setSendMails(false)}>Turn off mails</button>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------------------------------\n\t\t- now create hook, **src/hooks/useToggle.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport { useState } from 'react';\n\n\t\t\texport const useToggle = (defaultValue) => {\n\t\t\t\tconst [value, setValue] = useState(defaultValue);\n\n\t\t\t\tconst toggleValue = (_value = null) => {\n\t\t\t\t\tconsole.log(value);\n\t\t\t\t\tif (_value === null) {\n\t\t\t\t\t\t_value = !value;\n\t\t\t\t\t\tsetValue(_value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue(_value);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treturn [value, toggleValue];\n\t\t\t};\n\t\t\t----------------------------------------------\n\t\t- now apply useToggle to the mail option\n\t\t- put colors into useToggle as well, **useToggle.tsx**\n\t\t\t-----------------------------------------\n\t\t\tconst color = value ? 'green' : 'red';\n\n\t\t\treturn [value, toggleValue, turnOffValue, color];\t\t\t\n\t\t\t-----------------------------------------\n\t\t- also get color for mail\n\t\t- create simple light/dark toggle\n\t\t\t-----------------------------------------------\n\t\t\tconst [layoutDark, toggleLayout, layoutOff, layoutColor] = useToggle(true, '#444', 'yellow');\n\n\t\t\t<p><button style={{backgroundColor: layoutColor}} onClick={() => toggleLayout()}>Layout: {layoutDark ? 'dark' : 'light'}</button></p>\n\t\t\t-----------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-003-custom-hooks/tree/40-create-useToggle\n\t\t- site should look like this:#gif#customhooks40\t\t\t\n- **==> STEP 5. Implement the useFetch custom hook <==**\t\n\t- fetch two arrays **orders** and **products** from different URLs, e.g. from the [Northwind JSON files database](https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json)\n\t- `npm i axios`\n\n\t- **useFetch** \n\t\t-----------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport axios from 'axios';\n\n\t\tconst ordersUrl = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/orders.json';\n\t\tconst productsUrl = 'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/products.json';\n\n\t\texport const PageUseFetch = () => {\n\t\t\tconst [orders, setOrders] = useState([]);\n\t\t\tconst [products, setProducts] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetOrders((await axios.get(ordersUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetProducts((await axios.get(productsUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>The useFetch page.</p>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<p>There are {orders.length} orders.</p>\n\t\t\t\t\t<p>There are {products.length} products.</p>\n\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t-----------------------------------------------\n\t- add timeouts to emulate various loading times\n\t\t- to this (more efficient)\n\t\t\t------------------------------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetOrders((await axios.get(ordersUrl)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, Math.floor(Math.random() * 2000) + 1000);\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetProducts((await axios.get(productsUrl)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, Math.floor(Math.random() * 2000) + 1000);\n\t\t\t}, []);\t\t\t\n\t\t\t------------------------------------------------\n\t- put in loading texts\n\t\t-----------------------------------------\n\t\t{orders.length > 0 ? (\n\t\t\t<p>There are {orders.length} orders.</p>\n\t\t) : (\n\t\t\t<p>Loading orders...</p>\n\t\t)}\n\t\t{products.length > 0 ? (\n\t\t\t<p>There are {products.length} products.</p>\n\t\t) : (\n\t\t\t<p>Loading products...</p>\n\t\t)}\t\t\n\t\t-----------------------------------------\n\t- pep up styling for loading indications\n\t\t- `npm i react-icons`\n\t\t- **App.tsx**\n\t\t\t--------------------------------------\n\t\t\timport { FaSpinner } from 'react-icons/fa';\n\n\t\t\t<p className=\"loading\">\n\t\t\t\t<FaSpinner className=\"spinner\" /> Loading orders...\n\t\t\t</p>\n\n\t\t\t<p className=\"loading\">\n\t\t\t\t<FaSpinner className=\"spinner\" /> Loading products...\n\t\t\t</p>\t\t\n\t\t\t--------------------------------------\n\t\t- **App.scss**\n\t\t\t-----------------------------------------\n\t\t\t.pageUseFetch {\n\n\t\t\t\tp.loading {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tcolor: $loadingColor;\n\n\t\t\t\t\t.spinner {\n\t\t\t\t\t\tanimation: spin infinite 2s linear;\n\t\t\t\t\t}\n\n\t\t\t\t\t@keyframes spin {\n\t\t\t\t\t\tfrom {\n\t\t\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tto {\n\t\t\t\t\t\t\ttransform: rotate(360deg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------\n\t- implement useFetch\n\t\t- first write the code you want, then implement **useFetch**\n\t\t- **PageFetch.tsx**\n\t\t\t---------------------------------------------\n\t\t\timport { FaSpinner } from 'react-icons/fa';\n\t\t\timport { useFetch } from '../hooks/useFetch';\n\n\t\t\tconst ordersUrl =\n\t\t\t\t'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/orders.json';\n\t\t\tconst productsUrl =\n\t\t\t\t'https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/products.json';\n\n\t\t\texport const PageUseFetch = () => {\n\t\t\t\tconst {\n\t\t\t\t\titems: orders,\n\t\t\t\t\ttotalItems: totalOrders,\n\t\t\t\t\tisLoading: ordersLoading,\n\t\t\t\t} = useFetch(ordersUrl);\n\t\t\t\tconst {\n\t\t\t\t\titems: products,\n\t\t\t\t\ttotalItems: totalProducts,\n\t\t\t\t\tisLoading: productsLoading,\n\t\t\t\t} = useFetch(productsUrl);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"pageUseFetch\">\n\t\t\t\t\t\t<p>The useFetch page.</p>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t{!productsLoading ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>There are {totalProducts} products.</p>\n\t\t\t\t\t\t\t\t{products.map((product: any, i) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<span key={product.productID}>\n\t\t\t\t\t\t\t\t\t\t\t{product.productID}\n\t\t\t\t\t\t\t\t\t\t\t{i !== totalProducts - 1 && <>,</>}{' '}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p className=\"loading\">\n\t\t\t\t\t\t\t\t<FaSpinner className=\"spinner\" /> Loading products...\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\t\t\t\t\t\t\n\t\t\t\t\t\t{!ordersLoading ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>There are {totalOrders} orders.</p>\n\t\t\t\t\t\t\t\t{orders.map((order: any, i) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<span key={order.orderID}>\n\t\t\t\t\t\t\t\t\t\t\t{order.orderID}\n\t\t\t\t\t\t\t\t\t\t\t{i !== totalOrders - 1 && <>,</>}{' '}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p className=\"loading\">\n\t\t\t\t\t\t\t\t<FaSpinner className=\"spinner\" /> Loading orders...\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------------------------\n\t\t- **useFetch.tsx**\n\t\t\t----------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\n\t\t\texport const useFetch = (url: string) => {\n\n\t\t\t\tconst [items, setItems] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tsetItems((await axios.get(url)).data);\n\t\t\t\t\t\t})();\n\t\t\t\t\t}, Math.floor(Math.random() * 2000) + 1000);\n\t\t\t\t}, []);\n\n\t\t\t\treturn {items, totalItems: items.length, isLoading: items.length === 0}\n\t\t\t}\n\t\t\t----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-003-custom-hooks/tree/50-create-useFetch\n\t\t- site should look like this:#gif#showfetchof50\t\n- explore other custom hooks and consider how you could use custom hooks in your projects\n\t- [usehooks-ts](https://usehooks-ts.com) - a React hooks library, ready to use, written in typescript","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-07 21:48:30","systemWhoCreated":"systemUnknown"},{"id":634,"category":"React","title":"Use React Router to build navbar, nested navbars and use advanced features","body":"- **what we will build**\n\t- we will build a React site with Vite with a simple navbar using React Router\n\t- we will then build nested navbars four levels deep \n\t- we see that React Router has no problem \n\t\t- maintaining URL paths in the browser for these nested site\n\t\t- enabling backward and forward browser buttons and browser history\n\t\t- when a long URL with many paths is pasted into the browser, React Router will navigate the user directly to that spot in the tree\n\t- we will show some further features of React Router including\n\t\t- highlighting a link in the menu (with `NavLink` instead of `Link`)\n\t\t- transfering user one page with another (`Navigate`)\n\t\t- inner-site links (`NavLink`)\n\t\t- 404 pages (`useLocation`)\n\t\t- use `Outlet`\n\t\t- URL parameters to identify lookup items on the page, e.g. `store/books/234` (`useParams` and `Outlet`)\n\t\t- how to solve the React Router redirect problem on Netlify, Vercel, CloudFlare and self-hosting providers (e.g. `_redirects` file)\n- **project repository**\n\t- the full code can be found here: https://github.com/edwardtanguay/et-005-react-router-site\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-005-react-router-site/branches/all) to go to the code at various stages of this project's development\n\t- another version: https://github.com/edwardtanguay/et-006-react-router-site\n- **how the project will look**\n\t- the final site will work like this: #gif#travelsitesinifhs\n- **==> STEP 1. Create React starter site with Vite <==**\n\t- open your terminal and go to your projects folder\n\t- tell Vite to create a React site: `npm create vite`\n\t- type in name of project, e.g. `et-001-nestcomps`\n\t- tell Vite to create a React site by choosing **react**\n\t- tell Vite to create a React site with TypeScript by choosing **ts-react**#gif#createviteproj\n\t- open project with VSCode: e.g. `code et-001-nestcomps`\n\t- in VSCode, open new terminal: **Terminal > New Terminal**\n\t- install node_modules: `npm i`\n\t- start the application: `npm run dev` \n\t- open site in browser by clicking on link, e.g.##clickthelinkthaton\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n- **==> STEP 2. Minimize the React site <==**\n\t- we only want one CSS file (App.css) so:\n\t\t- in **main.tsx** remove the line\n\t\t\t----------------------------------------\n\t\t\timport './index.css';\n\t\t\t----------------------------------------\n\t\t- delete file file `src/index.css`\n\t- we don't want **React.StrictMode** since it is [generally not useful](https://reactjs.org/docs/strict-mode.html) in all but the largest sites and it [makes useEffect render twice](https://github.com/facebook/react/issues/24502) which makes debugging confusing and difficult\n\t\t- in **main.tsx** delete the two **React.StrictMode** lines\n\t- in **App.tsx** reduce the code down to the minimum to display simple text:\n\t\t--------------------------------------\n\t\timport './App.css';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>React-Router Site</h1>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t--------------------------------------\n\t- reduce **App.css** down to the minimum\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\t\t\n\t\t----------------------------------\n\t- install Sass\n\t\t- open a new terminal and type: `npm i sass`\n\t\t- rename `App.css` to `App.scss`\n\t\t- in **App.tsx** change `App.css` to `App.scss`\n\t\t- add Sass syntax in the style sheet to see that it works:\n\t\t\t-------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: rgb(39, 27, 10);\n\t\t\t\tcolor: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(209, 168, 85);\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\t-------------------------------------\n\t- Vite has an unfortunate issue with reloading the site when you have a dark color: there is a slight flash of white\n\t\t- and we want to change the title of the site to the name of our game\n\t\t- in **index.html** add the same backround color of the React site to the original HTML page so there is no blink, and change the title tag\n\t\t\t----------------------------------------\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t\t<title>React-Router Site</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: rgb(39, 27, 10);\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t</head>\n\t\t\t----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-005-react-router-site/tree/20-minized-site\n\t\t- site should look like this:##thererereactrouter\n- **==> STEP 3. Build React Router menu with three pages <==**\n\t- we want to build a menu with three pages\n\t- we will use React Router v6 which makes it simple to create a simple, flat menu with pages that have permalink URLs\n\t- `npm i react-router-dom`\n\t- make the components for each of the three pages\n\t\t- **src/components/PageGermany.tsx**\n\t\t\t--------------------------------------------\n\t\t\texport const PageGermany = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to Germany page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t\t- **src/components/PageFrance.tsx**\n\t\t\t--------------------------------------------\n\t\t\texport const PageFrance = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to France page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t\t- **src/components/PageSpain.tsx**\n\t\t\t--------------------------------------------\n\t\t\texport const PageSpain = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to Spain page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t- implement the React Router menu\n\t\t- **main.tsx** \n\t\t\t--------------------------------------------\n\t\t\timport { BrowserRouter } from 'react-router-dom';\n\n\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t);\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **App.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { NavLink, Routes, Route, Navigate } from 'react-router-dom';\n\n\t\t\t<nav>\n\t\t\t\t<NavLink to=\"/germany\">Germany</NavLink> \n\t\t\t\t<NavLink to=\"/france\">France</NavLink>\n\t\t\t\t<NavLink to=\"/spain\">Spain</NavLink>\n\t\t\t</nav>\n\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/germany\" element={<PageGermany />} />\n\t\t\t\t<Route path=\"/france\" element={<PageFrance />} />\n\t\t\t\t<Route path=\"/spain\" element={<PageSpain />} />\n\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/germany\" replace />}/>\n\t\t\t</Routes>\t\t\n\t\t\t-----------------------------------------\n\t- add styling\n\t\t- **App.scss**\n\t\t\t-----------------------------------------\n\t\t\tnav {\n\t\t\t\tbackground-color: #222;\n\t\t\t\tpadding: .5rem;\n\t\t\t\ta {\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tmargin-right: 1rem;\n\t\t\t\t}\n\n\t\t\t\ta.active {\n\t\t\t\t\tcolor: rgb(211, 211, 110);\n\t\t\t\t}\n\t\t\t}\n\t\t\t-----------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-005-react-router-site/tree/30-create-simple-menu\n\t\t- site should look like this:#gif#makereactthree\n- **==> STEP 4. Build nested navbars <==**\n\t- create a CLI script that creates a page\n\t\t- **backend/cp.mjs**\n\t\t\t---------------------------------------------\n\t\t\timport fs from 'fs';\n\n\t\t\tconst name = process.argv[2];\n\n\t\t\tif (name === undefined) {\n\t\t\t\tconsole.log('SCRIPT: cp');\n\t\t\t\tconsole.log('NAME: create page');\n\t\t\t\tconsole.log('-------------------------');\n\t\t\t\tconsole.log('EXAMPLE: npm run cp Info');\n\t\t\t\tconsole.log('RESULT: creates page /scr/components/PageInfo.tsx');\n\t\t\t\tprocess.exit();\n\t\t\t} else {\n\t\t\t\tconst content = `\n\t\t\texport const Page${name} = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to the ${name} page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t\t`;\n\t\t\t\t(async () => {\n\t\t\t\t\tfs.writeFile(`./src/components/Page${name}.tsx`, content.trim(), () => {});\n\t\t\t\t})();\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t\t- **package.json**\n\t\t\t---------------------------------\n\t\t\t\"cp\": \"node backend/cp.mjs\"\n\t\t\t---------------------------------\n\t- **PageGermany.tsx**\n\t\t----------------------------------------\n\t\t<nav>\n\t\t\t<NavLink to=\"hamburg\">Hamburg</NavLink>\n\t\t\t<NavLink to=\"hannover\">Hannover</NavLink>\n\t\t\t<NavLink to=\"berlin\">Berlin</NavLink>\n\t\t</nav>\n\t\t<Routes>\n\t\t\t<Route path=\"hamburg\" element={<PageHamburg />} />\n\t\t\t<Route path=\"hannover\" element={<PageHannover />} />\n\t\t\t<Route path=\"berlin/*\" element={<PageBerlin />} />\n\t\t\t<Route path=\"/\" element={<Navigate to=\"hamburg\" replace />} />\n\t\t</Routes>\t\t\n\t\t----------------------------------------\n\t- **PageBerlin.tsx**\n\t\t----------------------------------\n\t\t<nav>\n\t\t\t<NavLink to=\"tiergarten\">Tiergarten</NavLink>\n\t\t\t<NavLink to=\"steglitz\">Steglitz</NavLink>\n\t\t\t<NavLink to=\"mitte\">Mitte</NavLink>\n\t\t</nav>\n\t\t<Routes>\n\t\t\t<Route path=\"tiergarten\" element={<PageTiergarten />} />\n\t\t\t<Route path=\"steglitz\" element={<PageSteglitz />} />\n\t\t\t<Route path=\"mitte/*\" element={<PageMitte />} />\n\t\t\t<Route\n\t\t\t\tpath=\"/\"\n\t\t\t\telement={<Navigate to=\"tiergarten\" replace />}\n\t\t\t/>\n\t\t</Routes>\t\t\n\t\t----------------------------------\n\t- **PageMitte.tsx**\n\t\t-------------------------------------------\n\t\t<nav>\n\t\t\t<NavLink to=\"checkpointCharlie\">Checkpoint Charlie</NavLink>\n\t\t\t<NavLink to=\"brandenburgGate\">Brandenburg Gate</NavLink>\n\t\t\t<NavLink to=\"unterDenLinden\">Unter den Linden</NavLink>\n\t\t</nav>\n\t\t<Routes>\n\t\t\t<Route\n\t\t\t\tpath=\"checkpointCharlie\"\n\t\t\t\telement={<PageCheckpointCharlie />}\n\t\t\t/>\n\t\t\t<Route\n\t\t\t\tpath=\"brandenburgGate\"\n\t\t\t\telement={<PageBrandenburgGate />}\n\t\t\t/>\n\t\t\t<Route path=\"unterDenLinden\" element={<PageUnterDenLinden />} />\n\t\t\t<Route\n\t\t\t\tpath=\"/\"\n\t\t\t\telement={<Navigate to=\"checkpointCharlie\" replace />}\n\t\t\t/>\n\t\t</Routes>\t\t\n\t\t-------------------------------------------\n\t- title of site\n\t\t- change: Travel Info Site\n\t\t- when click show info page\n\t\t- **App.tsx**\n\t\t\t-----------------------------------\n\t\t\t<h1>\n\t\t\t\t<NavLink to=\"info\">React Router Site</NavLink>\n\t\t\t</h1>\t\t\t\n\t\t\t-----------------------------------\n\t\t- **App.scss**\n\t\t\t-------------------------------------\n\t\t\th1 {\n\t\t\t\ta {\n\t\t\t\t\tcolor: rgb(209, 168, 85);\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-005-react-router-site/tree/40-build-nested-navbars\n\t\t- site should look like this:#gif#showrouter40\t\t\n- **==> STEP 5. Additional features <==**\n\t- A. add image to start page (not particularly to React Router but an issue in React sites in general)\n\t\t- import \n\t\t\t- put image somewhere under `src`\n\t\t\t- **PageInfo.tsx**\n\t\t\t\t----------------------------------------\n\t\t\t\timport map from '../assets/map.png';\t\t\t\n\n\t\t\t\t<img src={map}/>\n\t\t\t\t----------------------------------------\n\t\t\t- `npm run build`\n\t\t\t- look in dist to see where the image is: in `assets` and the name has a random code in it\n\t\t\t- when to use\n\t\t\t\t- if you want to obfuscate the image name\n\t\t\t\t- optimizatione possible\n\t\t- public \n\t\t\t- put in `public/images`\n\t\t\t- reference normally as in HTML: <img src=\"/images/map.png\"/>\n\t\t\t- when to use\n\t\t\t\t- if it is meant that users download the images\n\t\t\t\t\t- images retain their actual names, e.g. for downloading\n\t\t\t\t- necessary if you programmatically display the images\n\t\t\t\t- easier (reference them as with a JS/DOM website, no need to import each image)\n\t- B. note highlighting active links with **NavLink** instead of **Link**\n\t- C. note how we transfer a page with **Navigate**, e.g. in App.tsx:\n\t\t---------------------------------------\n\t\t<Route path=\"/\" element={<Navigate to=\"info\" replace />} />\n\t\t---------------------------------------\n\t- D. note that you can do inner-site links with **NavLink**\n\t\t- **PageGermany.tsx**\n\t\t\t---------------------------------------\n\t\t\tBe sure to visit cities like <NavLink to=\"/germany/hamburg\">Hamburg</NavLink> or tourist sites such as the <NavLink to=\"/germany/berlin/mitte/brandenburgGate\">Brandenburg Gate</NavLink>.\n\t\t\t---------------------------------------\n\t\t- **PageBrandenburgGate.tsx**\n\t\t\t---------------------------------\n\t\t\t<p>Welcome to the Brandenburg Gate page which is located in <NavLink to=\"/germany/berlin\">Berlin</NavLink>.</p>\n\t\t\t---------------------------------\n\t\t- **PageFrance.tsx**\n\t\t\t-----------------------------------\n\t\t\timport { useNavigate } from 'react-router-dom';\n\n\t\t\texport const PageFrance = () => {\n\t\t\t\tconst navigate = useNavigate();\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tFrance is a unitary semi-presidential republic with its capital\n\t\t\t\t\t\t\tin Paris, the country's largest city and main cultural and\n\t\t\t\t\t\t\tcommercial centre; other major urban.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<button onClick={() => navigate('/germany/hannover')}>\n\t\t\t\t\t\t\tAD: Visit Hannover\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------\n\t- E. add 404 page\n\t\t- on all menus\n\t\t\t----------------------------------------\n\t\t\t<Route path=\"/\" element={<PageBlank />} />\n\t\t\t<Route path=\"*\" element={<Page404 />} />\t\t\t\n\t\t\t----------------------------------------\n\t\t- **PageBlank.tsx**\n\t\t\t-------------------------------------\n\t\t\texport const PageBlank = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<div></div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-------------------------------------\n\t\t- **Page404.tsx**\n\t\t\t-----------------------------------\n\t\t\timport { useLocation } from 'react-router-dom';\n\n\t\t\texport const Page404 = () => {\n\t\t\t\tconst location = useLocation();\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"page404\">\n\t\t\t\t\t\t<h2>404 Page</h2>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThe page <code>{location.pathname}</code> does not exist.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------\n\t- F. alternative format with Outlet\n\t\t- instead of Route elements always in their own groups\n\t\t\t- nested Route elements \n\t\t\t- where they should be embedded in the parent page, put an <Outlet/>\n\t\t- **PageBerlin.tsx**\n\t\t\t-------------------------------------------\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"tiergarten\" element={<PageTiergarten />} />\n\t\t\t\t<Route path=\"steglitz\" element={<PageSteglitz />} />\n\t\t\t\t<Route path=\"/mitte/\" element={<PageMitte />}>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/mitte/checkpointCharlie\"\n\t\t\t\t\t\telement={<PageCheckpointCharlie />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/mitte/brandenburgGate\"\n\t\t\t\t\t\telement={<PageBrandenburgGate />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath=\"/mitte/unterDenLinden\"\n\t\t\t\t\t\telement={<PageUnterDenLinden />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route path=\"*\" element={<Page404 />} />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/\" element={<PageBlank />} />\n\t\t\t\t<Route path=\"*\" element={<Page404 />} />\n\t\t\t</Routes>\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **PageMitte.tsx**\n\t\t\t--------------------------------------\n\t\t\texport const PageMitte = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Welcome to Mitte page.</p>\n\n\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t<NavLink to=\"checkpointCharlie\">Checkpoint Charlie</NavLink>\n\t\t\t\t\t\t\t<NavLink to=\"brandenburgGate\">Brandenburg Gate</NavLink>\n\t\t\t\t\t\t\t<NavLink to=\"unterDenLinden\">Unter den Linden</NavLink>\n\t\t\t\t\t\t</nav>\n\n\t\t\t\t\t\t<div className=\"showArea\">\n\t\t\t\t\t\t\t<Outlet />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------\n\t\t- **App.scss**\n\t\t\t------------------------------------------\n\t\t\t.showArea {\n\t\t\t\tp {\n\t\t\t\t\tbackground-color: rgb(25, 48, 26);\n\t\t\t\t\tpadding: 2rem;\n\t\t\t\t\tborder-radius: 2rem;\n\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t------------------------------------------\n\t- G. show item from an array based on id in URL route\n\t\t- **App.tsx**\n\t\t\t--------------------------------------\n\t\t\t<Route path=\"spain\" element={<PageSpain cities={cities} />}>\n\t\t\t\t<Route path=\":idCode\" element={<City />} />\n\t\t\t\t<Route index element={<CityChooseMessage />} />\n\t\t\t</Route>\t\t\t\n\t\t\t--------------------------------------\n\t\t- **PageSpain.tsx**\n\t\t\t----------------------------------\n\t\t\timport { NavLink, Outlet, useParams } from 'react-router-dom';\n\t\t\timport { ICity } from '../interfaces';\n\n\t\t\tinterface IProps {\n\t\t\t\tcities: ICity[];\n\t\t\t}\n\n\t\t\texport const PageSpain = (props: IProps) => {\n\t\t\t\tconst { cities } = props;\n\n\t\t\t\tconst { idCode } = useParams();\n\t\t\t\tconst city = cities.find(m => m.idCode === idCode);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tSpain or the Kingdom of Spain (Reino de España), is a country\n\t\t\t\t\t\t\tprimarily located in southwestern Europe with parts of territory\n\t\t\t\t\t\t\tin the Atlantic Ocean.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className=\"cityChoices\">\n\t\t\t\t\t\t\tThere are {cities.length} cities to visit:{' '}\n\t\t\t\t\t\t\t{cities.map((city, i) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<span className=\"city\" key={city.idCode}>\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<NavLink to={`${city.idCode}`}>{city.name}</NavLink>\n\t\t\t\t\t\t\t\t\t\t\t{cities.length - 1 > i && <span>, </span>}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<Outlet context={city} />\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t----------------------------------\n\t\t- **City.tsx**\n\t\t\t-------------------------------------------\n\t\t\timport { useOutletContext } from 'react-router-dom';\n\t\t\timport { ICity } from '../interfaces';\n\n\t\t\texport const City = () => {\n\t\t\t\tconst city: ICity = useOutletContext();\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"city\">\n\t\t\t\t\t\t<img src={`/images/cities/${city.idCode}.jpg`}/>\n\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t<div className=\"name\">{city.name}</div>\n\t\t\t\t\t\t\t<div className=\"description\">{city.description}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **spanishCities.json** \n\t\t\t-------------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"name\": \"Madrid\",\n\t\t\t\t\t\"idCode\": \"madrid\",\n\t\t\t\t\t\"description\": \"Madrid is the capital and most populous city of Spain.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"name\": \"Barcelona\",\n\t\t\t\t\t\"idCode\": \"barcelona\",\n\t\t\t\t\t\"description\": \"Barcelona is a city on the coast of northeastern Spain.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\"name\": \"Seville\",\n\t\t\t\t\t\"idCode\": \"seville\",\n\t\t\t\t\t\"description\": \"Seville is the capital and largest city of the Spanish autonomous community of Andalusia and the province of Seville.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 4,\n\t\t\t\t\t\"name\": \"Málaga\",\n\t\t\t\t\t\"idCode\": \"malaga\",\n\t\t\t\t\t\"description\": \"Málaga is a municipality of Spain, capital of the Province of Málaga, in the autonomous community of Andalusia.\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 5,\n\t\t\t\t\t\"name\": \"Valencia\",\n\t\t\t\t\t\"idCode\": \"valencia\",\n\t\t\t\t\t\"description\": \"Valencia is the capital of the autonomous community of Valencia and the third-most populated municipality in Spain.\"\n\t\t\t\t}\n\t\t\t]\n\t\t\t-------------------------------------\n\t- H. Fix React Router 404 error when site is hosted at online providers\n\t\t- publish site at **Netlify**\n\t\t- **PROBLEM:**\n\t\t\t- your React Router will work, however if you are not on the route URL and you reload or click on a link which takes you to this page, you will get a 404 error#gif#willgetthisproblem\n\t\t- **SOLUTION:**\n\t\t\t- create a file named `_redirects` (without extension) in the **public** directory of your site, with this one line as content:\n\t\t\t\t---------------------------\n\t\t\t\t/* /index.html 200\n\t\t\t\t---------------------------\n\t\t\t- after this file is published to Netlify, you will be able to reload and click on deep links on your site:#gif#andnowfixedsdf\n\t\t- solution for **Vercel**\n\t\t\t- add **vercel.json** in root directory with this content:\n\t\t\t\t--------------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/\" }]\n\t\t\t\t}\n\t\t\t\t--------------------------------------\t\n\t\t- solution for **Cloudflare**\n\t\t\t- React Router should work as is on a Cloudflare site\n\t\t- managed hosting with Apache\n\t\t\t- in root directory, create a `.htaccess` file with the following content (or if it already exists, simply add the following content to it)\n\t\t\t\t------------------------------\n\t\t\t\tOptions -MultiViews\n\t\t\t\tRewriteEngine On\n\t\t\t\tRewriteCond %{REQUEST_FILENAME} !-f\n\t\t\t\tRewriteRule ^ index.html [QSA,L]\t\t\t\t\n\t\t\t\t------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-005-react-router-site/tree/50-additional-features\n\t\t- site should look like this:#gif#travelsitesinifhs","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-08 22:57:22","systemWhoCreated":"systemUnknown"},{"id":635,"category":"Git","title":"How to solve \"unknown switch -b\" error when initializing a Git respository with \"git init -b main\"","body":"- if you type `git init -b main` to create a local Git repository with a default branch name **main** and get this error:##dothearrowandshow\n- then check your Git version with `git --version`:##theseefigit\n- if your version is **less than 2.28** then you need to upgrade your Git with the following commands:\n\t-------------------------------------\n\tsudo apt remove git\n\tsudo add-apt-repository ppa:git-core/ppa -y\n\tsudo apt-get update\n\tsudo apt-get install git -y\n\tsudo apt-get install git\n\tgit --version\n\t-------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-09 23:44:34","systemWhoCreated":"systemUnknown"},{"id":636,"category":"React","title":"Implement useContext in an app with multiple pages and data sources","body":"- **what we will learn**\n\t- we will learn what useContext is: a single-source store solution for React sites\n\t- useContext solves the problem of having to pass too many props from components \n\t- it solves this problem by storing all state in one place (AppContext.tsx) which each component can directly access\n- **what we will build**\n\t- we will build a website that gets data from two sources\n\t\t- online URL via axios\n\t\t- local json-server\n\t- instead of passing this data and hence the state of our application through our components via props, we will implement an AppContext with useContext to have a single place for state which every component can access:##explanationusecontext\n- **project repository**\n\t- the full code can be found here: https://github.com/edwardtanguay/et-003-usecontext\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-003-usecontext/branches/all) to go to the code at various stages of this project's development\n\t- similar projects:\n\t\t- TypeScript is fully integrated with useContext: https://github.com/edwardtanguay/et-002-usecontext\n\t\t- TypeScript partially integreated with useContext (unfinished): https://github.com/edwardtanguay/et-001-usecontext\n- **how the project will look**\n\t- the final site will work like this:#gif#thefinalusecontexthowto\n- **==> STEP 1. Create simple React site with menu <==**\n\t- if you want to do this step manually\n\t\t- see the first two steps of [HOWTO: Use React Router to build navbar, nested navbars and use advanced features](https://edwardtanguay.vercel.app/howtos?id=634)\n\t- otherwise to expedite this step \n\t\t- let's download and install a ready-to-go React site with TypeScript, Sass and React Router menu\n\t\t- go to https://github.com/edwardtanguay/blank-vite-dark-menu\n\t\t- click the Code button, download the code and copy it into a directory\n\t\t- start VSCode in that directory, e.g. with `code .`\n\t\t- in VSCode, install the packages with `npm i`\n\t\t- start the site with `npm run dev`\n\t\t- and click on the link to see the view the site in the browser\n\t- change the names of the pages and their corresponding files\n\t\t- leave **Welcome** as it is\n\t\t- change **Info** to **Books**\n\t\t- change **About** to **Flashcards**\n\t- change the title of the site to \"Study Group Site\" in\n\t\t- index.html\n\t\t- App.tsx\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- so if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usecontext/tree/10-minimized-site-with-menu\n\t\t- site should look like this:##secondsittanem\n- **==> STEP 2. Implement an AppContext store with useContext <==**\n\t- in this step we will implement a useContext store in order to store all the state for our page in one place\n\t\t- after setting up the useContext store, we will load data into it \n\t\t- we will then access and use this data from both the App and PageBooks components to show how you can change data in one place and it changes in multiple components\n\t- to understand how our AppContext works, let's construct it in logical steps\n\t\t- in **main.tsx** just as we provided the React Router to our entire `App` element and its children, we need to also provide `App` with our AppContext so that our entire application has access to our centralized state\n\t\t\t------------------------------------------\n\t\t\timport { AppProvider } from './AppContext';\n\n\t\t\t<AppProvider>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t</AppProvider>\n\t\t\t------------------------------------------\n\t- now we need to create **src/AppContext.tsx** and inside it export `AppProvider` which we just imported\n\t\t----------------------------------------\n\t\timport { createContext } from 'react';\n\n\t\texport const AppContext = createContext();\n\n\t\texport const AppProvider = ({ children }) => {\n\t\t\tconst appTitle = \"The Study Group\";\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider value={{\n\t\t\t\t\tappTitle\n\t\t\t\t}}>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\n\t\t};\t\t\n\t\t----------------------------------------\n\t- note that TypeScript is indicating that the types in our code are not entirely known##notethattypeeejs\n\t\t- also note that if you change the extension of this file to `.jsx`, JavaScript will have no problems\n\t- but let's keep the extension `.tsx` and resolve these type issues in order that our code is strongly-typed and thus more robust\n\t\t- **AppContext.tsx**\n\t\t\t---------------------------------------\n\t\t\tinterface IAppContext {\n\t\t\t\tappTitle: string;\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\t\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\t\t\t\n\t\t\t---------------------------------------\n\t- **App.tsx**\n\t\t-----------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from './AppContext';\n\n\t\tconst { appTitle } = useContext(AppContext);\n\n\t\t<h1>{appTitle}</h1>\n\t\t-----------------------------------\n\t- **PageBooks.tsx**\n\t\t-----------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\tconst { appTitle } = useContext(AppContext);\n\n\t\t<p>This is the {appTitle} books page.</p>\n\t\t-----------------------------------\n\t- now you can see if you change the variable in AppContext, it changes in two components **App.tsx** and **PageBooks.tsx**:##badtitlearea\n\t- note however that it didn't change in the browser page title, since that it defined in `index.html` which is outside the scope of our AppContext\n\t\t- to change that, we can use **Helmet** package to override the title inside the App.tsx file\n\t\t\t- `npm i react-helmet @types/react-helmet` (note this is both the **react-helmet package** and its **TypeScript types**)\n\t\t\t- **App.tsx**\n\t\t\t\t-----------------------------------\n\t\t\t\timport { Helmet } from 'react-helmet';\n\n\t\t\t\t<Helmet>\n\t\t\t\t\t<title>{appTitle}</title>\n\t\t\t\t</Helmet>\n\t\t\t\t-----------------------------------\n\t\t\t- you see that now all three change:##threeberlinsdj\n\t\t\t- some notes about **Helmet**: \n\t\t\t\t- you can change the title of every page in this way, so that each page can have it's own title tag\n\t\t\t\t- but you need to test this with e.g. social media links since it may be that the bot which grabs the title tag of your site is too fast and doesn't wait for Helmet to overwrite the original index.html title text\n\t\t\t\t- note that a better SEO solution to the problem is to instead of simply using React, use [Next.js](https://nextjs.org), \"The React Framework for Production\"\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usecontext/tree/20-implement-usecontext\n\t\t- site should look like this:##endofthre20\t\t\n- **==> STEP 3. Load data from external site into context and access from two components <==**\n\t- we will now load books in AppContext and will show:\n\t\t- all books on the books page\n\t\t- the number of books on the welcome page\n\t- `npm i axios`\n\t- **AppContext.tsx*\n\t\t------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport axios from 'axios';\n\t\timport { IBook } from './interfaces';\n\t\timport * as tools from './tools';\n\n\t\tconst booksUrl = 'https://edwardtanguay.vercel.app/share/techBooks.json';\n\t\tconst mockApiWaitSeconds = 3;\n\n\t\tinterface IAppContext {\n\t\t\tappTitle: string;\n\t\t\tbooks: IBook[]\n\t\t}\n\n\t\tconst [books, setBooks] = useState([]);\n\n\t\tuseEffect(() => {\n\t\t\tsetTimeout(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst rawBooks = (await axios.get(booksUrl)).data;\n\t\t\t\t\tconst _books:IBook[] = [];\n\t\t\t\t\trawBooks.forEach((rawBook:IBook) => {\n\t\t\t\t\t\tconst _book: IBook = {\n\t\t\t\t\t\t\tid: rawBook.id,\n\t\t\t\t\t\t\tidCode: rawBook.idCode,\n\t\t\t\t\t\t\ttitle: rawBook.title,\n\t\t\t\t\t\t\tdescription: rawBook.description,\n\t\t\t\t\t\t\tlanguage: rawBook.language === '' ? 'English' : tools.capitalizeFirstLetter(rawBook.language)\n\t\t\t\t\t\t};\n\t\t\t\t\t\t_books.push(_book);\n\t\t\t\t\t})\n\t\t\t\t\tsetBooks(_books);\n\t\t\t\t})();\n\t\t\t}, mockApiWaitSeconds * 1000);\n\t\t}, []);\t\n\n\t\tvalue={{\n\t\t\tappTitle,\n\t\t\tbooks\n\t\t}}\t\n\t\t------------------------------------------\n\t- **interfaces.ts**\n\t\t----------------------------------------\n\t\texport interface IBook {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t\tlanguage: string;\n\t\t}\n\t\t----------------------------------------\n\t- **tools.ts**\n\t\t----------------------------------------\n\t\t/**\n\t\t * Capitalizes the first letter of a string.\n\t\t * \n\t\t * const title = qstr.capitalizeFirstLetter( 'the study group');\n\t\t * \n\t\t * The study group\n\t\t */\n\t\texport function capitalizeFirstLetter(line: string) {\n\t\t\treturn line.charAt(0).toUpperCase() + line.slice(1);\n\t\t}\n\t\t----------------------------------------\n\t- **PageWelcome.tsx**\n\t\t-------------------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\texport const PageWelcome = () => {\n\t\t\tconst { books } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t{books.length === 0 ? (\n\t\t\t\t\t\t<p>Loading....</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p>In our club we are reading {books.length} books.</p>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t-------------------------------------------------\n\t- **PageBooks.tsx**\n\t\t--------------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\t\timport { IBook } from '../interfaces';\n\n\t\texport const PageBooks = () => {\n\t\t\tconst { books } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"pageBooks\">\n\t\t\t\t\t{books.length === 0 ? (\n\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t\t{books.map((book: IBook) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"book\" key={book.id}>\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={`https://edwardtanguay.vercel.app/share/images/techBooks/${book.idCode}.jpg`}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t\t\t{book.description}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t--------------------------------------------\n\t- **App.scss**\n\t\t--------------------------------------------\n\t\t.pageBooks {\n\t\t\t.books {\n\t\t\t\t.book {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 1rem;\n\t\t\t\t\twidth: 35rem;\n\t\t\t\t\talign-items: flex-start;\n\t\t\t\t\tborder-radius: .5rem;\n\n\t\t\t\t\timg {\n\t\t\t\t\t\twidth: 8rem;\n\t\t\t\t\t\tobject-fit: contain;\n\t\t\t\t\t}\n\n\t\t\t\t\t.info {\n\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\tcolor: rgb(219, 198, 160);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\tfont-size: 1.1rem;\n\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t--------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usecontext/tree/30-load-data-from-external-url\n\t\t- site should look like this:#gif#again3stelpgook\t\t\t\n- **==> STEP 4: Set up and load data from local json-server which serves flashcards <==**\n\t- create file that json-server will server: **data/db.json**\n\t\t---------------------------------------------------\n\t\t{\n\t\t\t\"flashcards\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"category\": \"git\",\n\t\t\t\t\t\"front\": \"show simplified log \\\"hash - title - author\\\"\",\n\t\t\t\t\t\"back\": \"git log --pretty=format:\\\"%h - %s - %an\\\"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"category\": \"linux\",\n\t\t\t\t\t\"front\": \"find all files in systemItems which have the text \\\"ver\\\" in them\",\n\t\t\t\t\t\"back\": \"find systemItems -iname \\\"*ver*\\\"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\"category\": \"emmet\",\n\t\t\t\t\t\"front\": \"how to produce filler text in a paragraph element\",\n\t\t\t\t\t\"back\": \"p>lorem\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 4,\n\t\t\t\t\t\"category\": \"git\",\n\t\t\t\t\t\"front\": \"discard changes in working directory (before add)\",\n\t\t\t\t\t\"back\": \"git checkout -- [file]\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 5,\n\t\t\t\t\t\"category\": \"git\",\n\t\t\t\t\t\"front\": \"remove file from working directory and add deletion to staging area\",\n\t\t\t\t\t\"back\": \"git rm [file]\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 6,\n\t\t\t\t\t\"category\": \"git\",\n\t\t\t\t\t\"front\": \"how to find out the url to your GitHub repository\",\n\t\t\t\t\t\"back\": \"git remote show origin\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 7,\n\t\t\t\t\t\"category\": \"linux\",\n\t\t\t\t\t\"front\": \"find all JavaScript files that have the word \\\"array\\\" in them\",\n\t\t\t\t\t\"back\": \" find . -iname \\\"*array*\\\"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\t\t\n\t\t---------------------------------------------------\n\t- set up json-server\n\t\t- `npm i json-server`\n\t\t- `npm i npm-run-all -D`\n\t\t\t- `npm-run-all` is used in order to use `run-p` (run in parallel) which enables you to start the frontend and backend simultaneously with `npm start`\n\t\t\t- `-D` means that this is a dev dependency which is only used in development\n\t\t- **package.json**\n\t\t\t----------------------------------------\n\t\t\t\"frontend\": \"vite\",\n\t\t\t\"backend\": \"json-server --watch ./src/data/db.json --port 5556\",\n\t\t\t\"start\": \"run-p backend frontend\"\n\t\t\t----------------------------------------\n\t- `npm start`\n\t- click here to test the backend:##clickforflashsj\n\t- you should see this:##thebackendworksjflah\n\t- load the flashcards in your AppContext\n\t\t- **AppContext.jsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { IBook, IFlashcard } from './interfaces';\n\n\t\t\tinterface IAppContext {\n\t\t\t\tappTitle: string;\n\t\t\t\tbooks: IBook[];\n\t\t\t\tflashcards: IFlashcard[],\n\t\t\t\thandleToggleFlashcard: (arg0: IFlashcard) => void\n\t\t\t}\n\n\t\t\tconst flashcardsUrl = 'http://localhost:5556/flashcards';\n\n\t\t\tconst [flashcards, setFlashcards] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst rawFlashcards = (await axios.get(flashcardsUrl)).data;\n\t\t\t\t\tconst _flashcards: IFlashcard[] = [];\n\t\t\t\t\trawFlashcards.forEach((rawFlashcard: any) => {\n\t\t\t\t\t\tconst _flashcard: IFlashcard = {\n\t\t\t\t\t\t\tid: rawFlashcard.id,\n\t\t\t\t\t\t\tcategory: rawFlashcard.category,\n\t\t\t\t\t\t\tfront: rawFlashcard.front,\n\t\t\t\t\t\t\tback: rawFlashcard.back,\n\t\t\t\t\t\t\tisOpen: false\n\t\t\t\t\t\t};\n\t\t\t\t\t\t_flashcards.push(_flashcard);\n\t\t\t\t\t});\n\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tconst handleToggleFlashcard = (flashcard: IFlashcard) => {\n\t\t\t\tflashcard.isOpen = !flashcard.isOpen;\n\t\t\t\tsetFlashcards([...flashcards]);\n\t\t\t}\t\t\t\n\n\t\t\tvalue={{\n\t\t\t\tappTitle,\n\t\t\t\tbooks,\n\t\t\t\tflashcards,\n\t\t\t\thandleToggleFlashcard\n\t\t\t}}\n\t\t\t-----------------------------------------------\n\t- **PageWelcome.jsx**\n\t\t--------------------------------------\n\t\timport { NavLink } from 'react-router-dom';\n\n\t\tconst { books, flashcards } = useContext(AppContext);\n\n\t\t<p>In our club we are reading <NavLink to=\"/books\">{books.length} books</NavLink> learning <NavLink to=\"/flashcards\">{flashcards.length} flashcards</NavLink>.</p>\n\t\t--------------------------------------\n\t- **App.scss** (to set the color for the NavLinks above)\n\t\t---------------------------------------\n\t\ta {\n\t\t\tcolor: rgb(209, 166, 85);\n\t\t}\t\t\n\t\t---------------------------------------\n\t- **PageFlashcards.jsx**\n\t\t---------------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\texport const PageFlashcards = () => {\n\t\t\tconst { flashcards, handleToggleFlashcard } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"pageFlashcards\">\n\t\t\t\t\t<p>We are currently learning these {flashcards.length} flashcards:</p>\n\n\t\t\t\t\t<div className=\"flashcards\">\n\t\t\t\t\t\t{flashcards.map((flashcard) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"flashcard\" key={flashcard.id}>\n\t\t\t\t\t\t\t\t\t<div className=\"front\" onClick={() => handleToggleFlashcard(flashcard)}>{flashcard.front}</div>\n\t\t\t\t\t\t\t\t\t{flashcard.isOpen && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"back\">{flashcard.back}</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\t\t\n\t\t---------------------------------------------\n\t- **App.scss**\n\t\t-----------------------------------------------\n\t\t.pageFlashcards {\n\t\t\t.flashcards {\n\t\t\t\t.flashcard {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\twidth: 39rem;\n\t\t\t\t\tborder-radius: .5rem;\n\n\t\t\t\t\t.front {\n\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\tcolor: rgb(219, 198, 160);\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t}\n\n\t\t\t\t\t.back {\n\t\t\t\t\t\tcolor: brown;\n\t\t\t\t\t\tfont-size: 1.1rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usecontext/tree/40-set-up-json-server-flashcards\n\t\t- site should look like this:#gif#the40andsecondjsok","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-10 00:26:07","systemWhoCreated":"systemUnknown"},{"id":637,"category":"React","title":"Implement useReducer into a useContext solution","body":"- **what is useReducer**\n\t- useReducer is usually implemented into a useContext solution in order to simplify access to state from the front end\n\t- the reducer is located inside the useContext and is called from the frontend with one function: `dispatch()`\n\t- the dispatch function has two parameters: `action` and `payload` (option)\n\t- so the **reducer** reduces access to state down to one function \n\t- then from the frontend views\n\t\t- you access state with a variable named **state** which has all app state as properties\n\t\t- to change state, you use the **dispatch()** function to indicate **what** you want done (action) with **which data** (payload)\n- **what we will do**\n\t- we will start with the final version of [HOWTO: Implement useContext in an app with multiple pages and data sources](https://edwardtanguay.vercel.app/howtos?id=636)\n\t- then we will implement a reducer in the AppContext\n\t- refactor the AppContext so that all state is managed by the reducer\n\t- refactor the frontend views (pages) so that they access state via the reducer using the **dispatch()** function\n- **==> STEP 1. Set up the final version of the useContext site <==**\n\t- go to [the final step of the useContext howto](https://github.com/edwardtanguay/et-003-usecontext/tree/40-set-up-json-server-flashcards)\n\t- download the code\n\t- copy the downloaded code into a directory with your desired project name\n\t- `npm i`\n\t- `npm start`\n\t- this starts a backend (json-server) and frontend (vite React site)\n\t- nnn\n- **==> STEP 2. Refactor appContext so that it reducer maintains the state and refactor pages so that they use the reducer <==**\n\t- nnn\n- **==> STEP 3. Enable user to delete a flashcard <==**\n\t- reducer with reducerCore to make API calls\n\t\t- https://github.com/edwardtanguay/ej8-reducer-context/blob/master/src/AppContext.jsx\n- **==> STEP 4. Enable user to edit a flashcard <==**\n\t- nnn\n- **==> STEP 5. Enable user to add a flashcard <==**\n\t- nnn","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-14 02:11:16","systemWhoCreated":"systemUnknown"},{"id":638,"category":"React","title":"Simple example of useReducer without useContext","body":"- **what is useReducer**\n\t- useReducer is usually implemented into a useContext solution in order to simplify access to state from the front end\n\t- the reducer is located inside the useContext and is called from the frontend with one function: `dispatch()`\n\t- the dispatch function has two parameters: `action` and `payload` (option)\n\t- so the **reducer** *reduces access to application state* down to one function \n\t- then from the frontend views\n\t\t- you access state with a variable named **state** which has all app state as properties\n\t\t- to change state, you use the **dispatch()** function to indicate **what** you want done (action) with **which data** (payload)\n- **what we will do**\n\t- in this howto, however, we will create the simplest version of a reducer possible in order to show how it is structured\n\t- it will not be built into useContext, but will simply manage state in one component, **App.tsx**\n\t- if you want to afterwards see how useReducer is implemented into a useContext solution, see this howto: [Implement useReducer into a useContext solution](https://edwardtanguay.vercel.app/howtos?id=637)\n\t- code for this project can be found here:\n\t\t- https://github.com/edwardtanguay/et-001-usereducer-basic\n\t- another version is here, slightly different code:\n\t\t- https://github.com/edwardtanguay/et-002-usereducer-basic\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-001-usereducer-basic/branches/all) to go to the code at various stages of this project's development\t\t\n\t- when finished, this project will work like this:#gif#finishedbasicsreducuers\n- **==> STEP 1. Set up minimal React site <==**\n\t- to expedite this step, let's download and install a ready-to-go React site with TypeScript and Sass\n\t- go to https://github.com/edwardtanguay/blank-vite-dark\n\t- click the Code button, download the code and copy it into a directory\n\t- start VSCode in that directory, e.g. with `code .`\n\t- in VSCode, install the packages with `npm i`\n\t- start the site with `npm run dev`\n\t- and click on the URL link in the terminal to see the view the site in the browser\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usereducer-basic/tree/10-minimized-react-site\n\t\t- site should look like this:##usersimplesite\n- **==> STEP 2. Set up reducer to enable plus and minus buttons to change a number <==**\t\t\n\t- **App.tsx**\n\t\t---------------------------------\n\t\timport { useReducer } from 'react';\n\t\timport './App.scss';\n\n\t\tconst initialState = {\n\t\t\tcount: 0\n\t\t}\n\n\t\tconst reducer = (state, action) => {\n\t\t\tlet _state = {};\n\t\t\tswitch (action.type) {\n\t\t\t\tcase 'increment':\n\t\t\t\t\t_state.count++;\n\t\t\t}\n\t\t\treturn _state;\n\t\t}\n\n\t\tfunction App() {\n\t\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t\t<p>Count: {state.count}</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t---------------------------------\n\t- note that while there are numerous TypeScript errors in this code, it works in the browser\n\t\t- change the intialState and you see that it changes on the screen\n\t\t- note you can also rename the file to `.jsx` and JavaScript will see no problem the code\n\t- but let's keep the file a `.tsx` TypeScript file and **fix the type inconsistencies so we have more secure code**\n\t\t- **App.tsx**\n\t\t\t---------------------------------------------\n\t\t\timport { useReducer } from 'react';\n\t\t\timport './App.scss';\n\n\t\t\tinterface IState {\n\t\t\t\tcount: number;\n\t\t\t}\n\n\t\t\tenum IActionType {\n\t\t\t\tINCREMENT = 'INCREMENT',\n\t\t\t\tDECREMENT = 'DECREMENT',\n\t\t\t}\n\n\t\t\tinterface IAction {\n\t\t\t\ttype: IActionType,\n\t\t\t\tpayload: number\n\t\t\t}\n\n\n\t\t\tconst initialState: IState = {\n\t\t\t\tcount: 0,\n\t\t\t};\n\n\t\t\tconst reducer = (state: IState, action: IAction): IState => {\n\t\t\t\tswitch (action.type) {\n\t\t\t\t\tcase IActionType.INCREMENT:\n\t\t\t\t\t\tstate.count++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IActionType.DECREMENT:\n\t\t\t\t\t\tstate.count--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn { ...state };\n\t\t\t};\n\n\t\t\tfunction App() {\n\t\t\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t\t\t<p>Count: {state.count}</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t---------------------------------------------\n\t\t- change the intialState and you see that it changes on the screen\n\t- now in JSX, let's create buttons to change the count by calling the reducer with actions using **dispatch()**\n\t- **App.tsx**\n\t\t-----------------------------------------------------------\n\t\t<p>Count: {state.count}</p>\n\t\t<div className=\"buttonArea\">\n\t\t\t<button onClick={() => dispatch({type: IActionType.DECREMENT, payload: 0})}>-</button>\n\t\t\t<button onClick={() => dispatch({type: IActionType.INCREMENT, payload: 0})}>+</button>\n\t\t</div>\t\t\n\t\t-----------------------------------------------------------\n\t- **App.scss**\n\t\t---------------------------------------\n\t\tp {\n\t\t\tfont-size: 1.5rem;\n\t\t}\n\n\t\t.buttonArea {\n\t\t\tdisplay: flex;\n\t\t\tgap: .5rem;\n\n\t\t\tbutton {\n\t\t\t\tfont-size: 2rem;\n\t\t\t\twidth: 3rem;\n\t\t\t}\n\t\t}\t\t\n\t\t---------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usereducer-basic/tree/20-plus-and-minus-buttons\n\t\t- site should look like this:#gif#dothecountdemo\t\t\n- **==> STEP 2. Add more state variables and change them in JSX <==**\t\t\n\t- add Reset button\n\t\t- **App.tsx**\t\n\t\t\t---------------------------------------\n\t\t\tRESET = 'RESET',\n\n\t\t\tcase IActionType.RESET:\n\t\t\t\tstate.count = 0;\n\t\t\t\tbreak;\t\t\t\n\n\t\t\t<div className=\"buttonArea2\">\n\t\t\t\t<button onClick={() => dispatch({ type: IActionType.RESET, payload: 0 })}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t---------------------------------------\n\t\t- **App.scss**\n\t\t\t---------------------------------------\n\t\t\t.buttonAreaExtra {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: .5rem;\n\t\t\t\tmargin-top: 1rem;\n\n\t\t\t\tbutton {\n\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t---------------------------------------\n\t- add ability to set count to a specific number\n\t\t- **App.tsx**\t\n\t\t\t---------------------------------------\n\t\t\timport { useReducer } from 'react';\n\t\t\timport './App.scss';\n\n\t\t\tinterface IState {\n\t\t\t\tcount: number;\n\t\t\t\tnewCount: string;\n\t\t\t\tmessage: string;\n\t\t\t}\n\n\t\t\tenum IActionType {\n\t\t\t\tINCREMENT = 'INCREMENT',\n\t\t\t\tDECREMENT = 'DECREMENT',\n\t\t\t\tRESET = 'RESET',\n\t\t\t\tUPDATENEWCOUNT = 'UPDATENEWCOUNT',\n\t\t\t\tSETCOUNT = 'SETCOUNT',\n\t\t\t}\n\n\t\t\tinterface IAction {\n\t\t\t\ttype: IActionType;\n\t\t\t\tpayload: any;\n\t\t\t}\n\n\t\t\tconst initialState: IState = {\n\t\t\t\tcount: 0,\n\t\t\t\tnewCount: '',\n\t\t\t\tmessage: '',\n\t\t\t};\n\n\t\t\tconst reducer = (state: IState, action: IAction): IState => {\n\t\t\t\tswitch (action.type) {\n\t\t\t\t\tcase IActionType.INCREMENT:\n\t\t\t\t\t\tstate.count++;\n\t\t\t\t\t\tstate.newCount = '';\n\t\t\t\t\t\tstate.message = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IActionType.DECREMENT:\n\t\t\t\t\t\tstate.count--;\n\t\t\t\t\t\tstate.newCount = '';\n\t\t\t\t\t\tstate.message = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IActionType.RESET:\n\t\t\t\t\t\tstate.count = 0;\n\t\t\t\t\t\tstate.newCount = '';\n\t\t\t\t\t\tstate.message = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IActionType.UPDATENEWCOUNT:\n\t\t\t\t\t\tstate.newCount = action.payload;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase IActionType.SETCOUNT:\n\t\t\t\t\t\tconst strNum = action.payload;\n\t\t\t\t\t\tconst num = Number(strNum);\n\t\t\t\t\t\tif (!isNaN(num)) {\n\t\t\t\t\t\t\tstate.count = num;\n\t\t\t\t\t\t\tstate.newCount = '';\n\t\t\t\t\t\t\tstate.message = '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.message = `\"${strNum}\" is not a number`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn { ...state };\n\t\t\t};\n\n\t\t\tfunction App() {\n\t\t\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t\t\t<p className=\"theCount\">Count: {state.count}</p>\n\t\t\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tdispatch({ type: IActionType.DECREMENT, payload: 0 })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tdispatch({ type: IActionType.INCREMENT, payload: 0 })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"buttonAreaExtra\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tdispatch({ type: IActionType.RESET, payload: 0 })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"buttonAreaExtra\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tvalue={state.newCount}\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\ttype: IActionType.UPDATENEWCOUNT,\n\t\t\t\t\t\t\t\t\t\tpayload: e.target.value,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\ttype: IActionType.SETCOUNT,\n\t\t\t\t\t\t\t\t\t\tpayload: state.newCount,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>{state.message}</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\n\t\t\t---------------------------------------\n\t\t- **App.scss**\n\t\t\t--------------------------------------\n\t\t\t.theCount {\n\t\t\t\tcolor: rgb(216, 216, 97);\n\t\t\t}\n\n\t\t\t.buttonAreaExtra {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: .5rem;\n\t\t\t\tmargin-top: 1rem;\n\n\t\t\t\tbutton {\n\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t}\n\n\t\t\t\tinput {\n\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\twidth: 5rem;\n\t\t\t\t\ttext-align: right;\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-usereducer-basic/tree/30-more-state-variables\n\t\t- site should look like this:#gif#finishedbasicsreducuers","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-14 06:40:38","systemWhoCreated":"systemUnknown"},{"id":640,"category":"React","title":"Create React shopping site example with Redux using TypeScript","body":"- **what is Redux**\n\t- created 2015 as a **predictable state container for JavaScript apps**\n\t- similar to and inspired by Facebook's **Flux** architecture\n\t\t- Flux is a **pattern** \n\t\t\t- Redux is a **library** used with website that use e.g. React or Angular\n\t\t- in Flux, **an action is a simple JavaScript object**, and that's the default case in Redux too\n\t\t\t- although in Redux, actions can also be **functions and promises**\n\t\t- in Flux, **reducers are flat**\n\t\t\t- but in Redux, **reducers can be nested just like React components can be nested**\n\t\t- Flux has **a single dispatcher** and all actions have to pass through that dispatcher\n\t\t\t- Redux has no dispatcher entity as such, rather it **exposes a hook called useDispatch()**\n\t\t- in Flux, the **logic** of what to do on the data based on the received action is **written in the store itself**\n\t\t\t- in Redux, the **logic** of what to do on the data based on the received actions is **in the reducer function** that gets called for every action that gets dispatched\n\t\t- in Flux, you can **mutate state as you wish**\n\t\t\t- in Redux, the state's immutability is achieved easily by making the **reducers pure functions (with no side effects)**\n- **what we will do**\n\t- in this howto, we will create a simple example of using Redux to manage state in a React application\n\t\t- this will allow us to see some of the main concepts of Redux as they are implemented in code\n\t- we will use **React ToolKit** which is a standardization of Redux in order to reduce the complexity of choice that Redux is known for\n\t- code for this project can be found here:\n\t\t- https://github.com/edwardtanguay/et-001-redux-toolkit-typescript\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-001-redux-toolkit-typescript/branches/all) to go to the code at various stages of this project's development\t\t\n\t- when finished, this project will work like this:#gif#addthecartpagekj\n- **==> STEP 1. Create simple React site with menu <==**\n\t- if you want to do this step manually\n\t\t- see the first two steps of [HOWTO: Use React Router to build navbar, nested navbars and use advanced features](https://edwardtanguay.vercel.app/howtos?id=634)\n\t- otherwise to expedite this step \n\t\t- let's download and install a ready-to-go React site with TypeScript, Sass and React Router menu\n\t\t- go to https://github.com/edwardtanguay/blank-vite-dark-menu\n\t\t- click the Code button, download the code and copy it into a directory\n\t\t- start VSCode in that directory, e.g. with `code .`\n\t\t- in VSCode, install the packages with `npm i`\n\t\t- start the site with `npm run dev`\n\t\t- and click on the link to see the view the site in the browser\n\t- change the names of the pages and their corresponding files\n\t\t- leave **Welcome** as it is\n\t\t- change **Info** to **Books**\n\t\t- change **About** to **Cart**\n\t- change the title of the site to \"Redux Shop\" in\n\t\t- index.html\n\t\t- App.tsx\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- so if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-redux-toolkit-typescript/tree/10-minimized-site-with-menu\n\t\t- site should look like this:##themainsiteoknn2\n- **==> STEP 2. First set up Redux boiler plate code as simple number counter: <==**\n\t- created recommended folder structure for Redux sites: https://redux.js.org/faq/code-structure\n\t\t- **/src/app**\n\t\t\t- (all core application files)\n\t\t\t- move **App.tsx** and **App.scss** here\n\t\t\t\t- fix all paths\n\t\t\t- (will also contain Redux store)\n\t\t- **/src/common**\n\t\t\t- (all non-Redux \"common\" files of the app such as components and pages)\n\t\t\t- create a directory called `pages` here and move all three page components here\n\t\t\t\t- fix all paths\n\t\t- **/features**\n\t\t\t- (will contain the Redux state slices)\n\t\t\t\t- *a \"slice\" is a collection of Redux reducer logic and actions for a single feature in your app, typically defined together in a single file*\n\t- install Redux npm packages\n\t\t- `npm i @reduxjs/toolkit react-redux`\n\t- create Redux boiler plate\n\t\t- add Redux store\n\t\t\t- **/src/app/store.ts**\n\t\t\t\t-----------------------------------\n\t\t\t\timport { configureStore } from '@reduxjs/toolkit';\n\t\t\t\t// TODO: import slice\n\n\t\t\t\texport const store = configureStore({\n\t\t\t\t\t// TODO: add slice\n\t\t\t\t});\t\t\t\n\n\t\t\t\texport type RootState = ReturnType<typeof store.getState>\n\t\t\t\texport type AppDispatch = typeof store.dispatch\t\t\t\t\n\t\t\t\t-----------------------------------\n\t\t- wrap app in Redux provider\n\t\t\t- **/src/main.jsx**\n\t\t\t\t---------------------------------------\n\t\t\t\timport { store } from './app/store';\n\t\t\t\timport { Provider } from 'react-redux';\t\t\t\n\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<BrowserRouter>\n\t\t\t\t\t\t<App />\n\t\t\t\t\t</BrowserRouter>\n\t\t\t\t</Provider>\t\n\t\t\t\t---------------------------------------\n\t\t- add slice of state called \"cart\"\n\t\t\t- **/src/features/cart/cartSlice.ts**\n\t\t\t\t----------------------------------\n\t\t\t\timport { createSlice } from '@reduxjs/toolkit';\n\n\t\t\t\tconst initialState = {\n\t\t\t\t\tcount: 0\n\t\t\t\t};\n\n\t\t\t\texport const cartSlice = createSlice({\n\t\t\t\t\tname: 'cart',\n\t\t\t\t\tinitialState,\n\t\t\t\t\treducers: {\n\t\t\t\t\t\tsubtract: (state) => {\n\t\t\t\t\t\t\tstate.count--;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tadd: (state) => {\n\t\t\t\t\t\t\tstate.count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\texport const { add, subtract } = cartSlice.actions;\n\t\t\t\texport default cartSlice.reducer;\n\t\t\t\t----------------------------------\n\t\t- now that we have our slice built, add it to the store\n\t\t\t- **/src/app/store.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport cartReducer from '../features/cart/cartSlice';\n\n\t\t\t\treducer: {\n\t\t\t\t\tcart: cartReducer\n\t\t\t\t}\n\t\t\t\t---------------------------------------------\n\t- use Redux state on welcome page\n\t\t- **/src/pages/PageWelcome.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { useDispatch } from 'react-redux';\n\t\t\timport { add, subtract} from '../../features/cart/cartSlice';\n\n\t\t\texport const PageBooks = () => {\n\t\t\t\tconst dispatch = useDispatch();\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"page_books\">\n\t\t\t\t\t\t<h2>Books</h2>\n\t\t\t\t\t\t<button onClick={() => dispatch(add())}>Add book</button>\n\t\t\t\t\t\t<button onClick={() => dispatch(subtract())}>Subtract book</button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\t\t\t\t\n\t\t\t-----------------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-redux-toolkit-typescript/tree/20-create-redux-counter-example\n\t\t- site should look like this:#gif#thecreatereduxcoutner\n- **==> STEP 3. Set up books pages so you can add items to the cart <==**\n\t- change from changing a counter to adding books and showing on cart page\n\t- **cartSlice.ts**\n\t\t---------------------------------------\n\t\timport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n\t\tconst books = [\n\t\t\t{\n\t\t\t\t\"id\": 1,\n\t\t\t\t\"idCode\": \"buildingMicroservices\",\n\t\t\t\t\"title\": \"Building Microservices\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 2,\n\t\t\t\t\"idCode\": \"gatsbyEcommerce\",\n\t\t\t\t\"title\": \"Gatsby E-Commerce\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 3,\n\t\t\t\t\"idCode\": \"rustWeb\",\n\t\t\t\t\"title\": \"Rust Web Programming\",\n\t\t\t}\n\t\t];\n\n\t\tinterface IBook {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t}\n\n\t\tinterface ICartItem {\n\t\t\tbook: IBook;\n\t\t}\n\n\t\tinterface IState {\n\t\t\tbooks: IBook[];\n\t\t\tcartItems: ICartItem[]\n\t\t}\n\n\t\tconst initialState: IState = {\n\t\t\tcartItems: [],\n\t\t\tbooks\n\t\t};\n\n\t\texport const cartSlice = createSlice({\n\t\t\tname: 'cart',\n\t\t\tinitialState,\n\t\t\treducers: {\n\t\t\t\taddCartItem: (state, action: PayloadAction<ICartItem>) => {\n\t\t\t\t\tstate.cartItems.push(action.payload);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\texport const { addCartItem } = cartSlice.actions;\n\t\texport default cartSlice.reducer;\n\t\t---------------------------------------\n\t- **PageBooks.tsx**\n\t\t--------------------------------------\n\t\timport { useDispatch, useSelector } from 'react-redux';\n\t\timport { RootState } from '../../app/store';\n\t\timport { NavLink } from 'react-router-dom';\n\n\t\texport const PageBooks = () => {\n\t\t\tconst dispatch = useDispatch();\n\t\t\tconst selectCart = (state: RootState) => state.cart;\n\t\t\tconst { books, cartItems } = useSelector(selectCart);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"pageBooks\">\n\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t{books.map((book) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"book\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\t\ttype: 'cart/addCartItem',\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\t\t\tbook\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<img src={`images/${book.idCode}.jpg`} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<p className=\"message\">You have {cartItems.length} items in your <NavLink to=\"/cart\">cart</NavLink>.</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\t\t\n\t\t--------------------------------------\n\t- **App.scss**\n\t\t---------------------------------------\n\t\ta {\n\t\t\tcolor: rgb(193, 193, 89);\n\t\t}\n\n\t\t.pageBooks {\n\t\t\t.books {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\t\t\t\tmargin-top: 2rem;\n\t\t\t\tmargin-bottom: 1rem;\n\n\t\t\t\t.book {\n\t\t\t\t\tcursor: pointer;\n\n\t\t\t\t\timg {\n\t\t\t\t\t\twidth: 10rem;\n\t\t\t\t\t\tbox-shadow: 1px 1px 10px #666;\n\t\t\t\t\t\theight: 14rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t.message {\n\t\t\t\tfont-size: 2rem;\n\t\t\t}\n\t\t}\t\t\n\t\t---------------------------------------\n\t- add images to **public/images**\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-redux-toolkit-typescript/tree/30-create-redux-shop\n\t\t- site should look like this:#gif#thebookspgesodne\n- **==> STEP 4. Create the cart page <==**\n\t- show the books that are in the cart\n\t- **PageCart.tsx**\n\t\t-------------------------------------------------\n\t\timport { useSelector } from 'react-redux';\n\t\timport { RootState } from '../../app/store';\n\n\t\texport const PageCart = () => {\n\t\t\tconst selectCart = (state: RootState) => state.cart;\n\t\t\tconst { cartItems } = useSelector(selectCart);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"pageCart\">\n\t\t\t\t\t<div className=\"cartItems\">\n\t\t\t\t\t\t{cartItems.map((cartItem) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"cartItem\">\n\t\t\t\t\t\t\t\t\t<img src={`images/${cartItem.book.idCode}.jpg`} />\n\t\t\t\t\t\t\t\t\t<div className=\"title\">{cartItem.book.title}</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- **App.scss**\n\t\t--------------------------------\n\t\t.pageCart {\n\t\t\t.cartItems {\n\t\t\t\tmargin-top: 1rem;\n\t\t\t\t.cartItem {\n\t\t\t\t\tbackground-color: #191919;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\twidth: 26rem;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 1rem;\n\t\t\t\t\timg {\n\t\t\t\t\t\twidth: 3rem;\n\t\t\t\t\t\theight: 4rem;\n\t\t\t\t\t}\n\t\t\t\t\tdiv.title {\n\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\tcolor: #777;\n\t\t\t\t\t\tmargin-top: .9rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t--------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-redux-toolkit-typescript/tree/40-add-cart-page\n\t\t- site should look like this:#gif#addthecartpagekj","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-14 21:28:35","systemWhoCreated":"systemUnknown"},{"id":641,"category":"React","title":"Create Job Application React CRUD website that uses Zustand/json-server","body":"- **what we will build**\n\t- a job application website which will run locally as a website with a simple json-server backend that manages a local json file\n\t- the original purpose of this how is to teach how to use Zustand, but this project is useful as an application for those looking for developer jobs\n\t\t- in that sense, it is a good [dogfooding project](https://en.wikipedia.org/wiki/Eating_your_own_dog_food) in that you can build in new functionality as you need it\n- **technologies used**\n\t- Vite\n\t- React\n\t- React Router\n\t- TypeScript\n\t- Zustand\n\t- json-server\n\t- [MUI](https://mui.com)\n- the final project\n\t- code for this project you can find here:\n\t\t- https://github.com/edwardtanguay/et-001-zustand-job-site\n\t- note that you can switch to [various branches](https://github.com/edwardtanguay/et-001-zustand-job-site/branches/all) to go to the code at various stages of this project's development\t\t\n\t- the final website will work like this: #gif#nnnnnnnnnnnnnnnnnnnnnnn\n- **==> STEP 1. Create simple React site with menu <==**\n\t- if you want to do this step manually\n\t\t- see the first two steps of [HOWTO: Use React Router to build navbar, nested navbars and use advanced features](https://edwardtanguay.vercel.app/howtos?id=634)\n\t- otherwise to expedite this step \n\t\t- let's download and install a ready-to-go React site with TypeScript, Sass and React Router menu\n\t\t- go to https://github.com/edwardtanguay/blank-vite-dark-menu\n\t\t- click the Code button, download the code and copy it into a directory\n\t\t- start VSCode in that directory, e.g. with `code .`\n\t\t- in VSCode, install the packages with `npm i`\n\t\t- start the site with `npm run dev`\n\t\t- and click on the link to see the view the site in the browser\n\t- change the names of the pages and their corresponding files\n\t\t- change **Welcome** to **Dashboard**\n\t\t- change **Info** to **Jobs**\n\t\t- change **About** to **Skills**\n\t\t- also change the default page to dashboard\n\t\t\t------------------------------------\n\t\t\t<Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n\t\t\t------------------------------------\n\t- change the title of the site to \"Get a Job\" in\n\t\t- index.html\n\t\t- App.tsx\n\t- TIP: it's always a good idea to develop within a Git repository even if you are only developing locally and not on GitHub, e.g. to roll back changes, etc.\n\t\t- so if you haven't, create a local repository now with a main branch called \"main\": `git init -b main`\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-zustand-job-site/tree/10-minimized-site-with-menu\n\t\t- site should look like this:##10minimizsite\n- **==> STEP 2. Set up backend API with json-server that serves jobs displayed on jobs page <==**\n\t- create JSON file to hold jobs\n\t\t- **src/data/db.json**\n\t\t\t-------------------------------\n\t\t\t{\n\t\t\t\t\"jobs\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\t\"title\": \"Frontend Developer\",\n\t\t\t\t\t\t\"company\": \"PwC Deutschland\",\n\t\t\t\t\t\t\"url\": \"https://www.get-in-it.de/jobsuche/p172318?filter[thematic_priority]=5&filter[city][radius]=25&filter[city][city][0][lon]=13.41053&filter[city][city][0][lat]=52.52437&start=0&limit=39&ref=Jobsuche\",\n\t\t\t\t\t\t\"description\": \"Frontend-Entwicklung - Unser Produkt ist zentraler Bestandteil der Digitalisierungsstrategie von PwC Deutschland. Unsere Lösungen sollen komplexe Probleme einfach machen, dafür brauchen wir intuitive und moderne Frontends - und die baust du! Du bist zentrale:r Ansprechpartner:in für die Frontend Entwicklung eines wichtigen internationalen Prüfungstools in einem agilen Team der Digital Factory. Du konzipierst Responsive Web-Apps mit JavaScript /TypeScript und Angular und entwickelst diese weiter. Du kannst schnell UI-Prototypen aufsetzen, aber auch robuste, skalierbare Frontends im Angular Framework für unser Tool implementieren.\\n\\nFachliche Expertise - Du hast bereits Erfahrung in der Entwicklung von Web Applikationen mit HTML, CSS und JavaScript/TypeScript. Moderne UI Frameworks (Angular) hast du bereits erfolgreich eingesetzt, idealerweise hast du auch schon Erfahrung mit WebSocket.\\n\\nAgile Mindset - Du lebst und liebst Frontend-Technologien und entwickelst so kontinuierlich Produkt, Prozesse und Zusammenarbeit weiter.\\n\\nTeamwork - Unsere Teams sind cross-funktional. Du arbeitest Hand in Hand mit anderen Entwickler:innen, Automation Engineers und UX Kolleg:innen an der gemeinsamen Produktvision.\\n\\nArbeite wie es zu deinem Leben passt: mit FlexWork. Keine fixen Home-Office-Tage, sondern deine Chance Arbeitszeit und -ort variabel zu gestalten.\\nDein Profil\\n\\nDu verfügst über ein abgeschlossenes Studium im Bereich Informatik oder eine vergleichbare Ausbildung und bringst Berufserfahrung im IT Umfeld, insbesondere im Frontend-Bereich, mit.\\n\\nDu hast ein grundlegendes Verständnis von Build-Prozessen, CI/ CD, Testing. Die Testautomatisierung im Frontend-Bereich ist für dich kein Neuland.\\n\\nDu hast idealerweise auch Erfahrungen im User Tracking mit Hotjar oder Piwik.\\n\\nDu suchst ein agiles Umfeld, in dem du deine Stärken ausspielen kannst.\\n\\nSehr gute Deutsch- und Englischkenntnisse helfen dir dabei, deine Ideen auch im internationalen Kontext oder mit internationalen Teamkolleg:innen zu teilen.\",\n\t\t\t\t\t\t\"skills\": \"angular, cicd, testing, hotjar, piwik\",\n\t\t\t\t\t\t\"publicationDate\": \"2022-11-17\",\n\t\t\t\t\t\t\"status\": \"sendApplication\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\t\"title\": \"Frontend-Entwickler\",\n\t\t\t\t\t\t\"company\": \"networker, solutions\",\n\t\t\t\t\t\t\"url\": \"https://www.get-in-it.de/jobsuche/p197373?filter[thematic_priority]=5&filter[city][radius]=25&filter[city][city][0][lon]=13.41053&filter[city][city][0][lat]=52.52437&start=0&limit=39&ref=Jobsuche\",\n\t\t\t\t\t\t\"description\": \"Deine Aufgaben bei uns\\n\\n    Entwicklung von Frontend und UI-Komponenten\\n    Betreuung und Weiterentwicklung bestehender Systeme\\n    Zusammenarbeit mit anderen Dienstleistern an gemeinsamen Kundenprojekten\\n    Umsetzung eigener Webentwicklung gemeinsam mit den Teams\\n\\nDeine Kompetenzen\\n\\n    JavaScript, Type Script\\n    HTML + CSS\\n    React\\n    Jest Testing\\n    RESTful APIs + Swagger\\n    Git, Gitlab\\n    Webstorm\\n    NestJs\\n    UX-Design\",\n\t\t\t\t\t\t\"skills\": \"typescript, react, jest, rest, swagger, git, gitlab, webstorm, nestjs, ux\",\n\t\t\t\t\t\t\"publicationDate\": \"2022-11-17\",\n\t\t\t\t\t\t\"status\": \"sendApplication\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\t\"title\": \"Web Frontend Entwickler\",\n\t\t\t\t\t\t\"company\": \"EPI development\",\n\t\t\t\t\t\t\"url\": \"https://www.get-in-it.de/jobsuche/p132078?filter[thematic_priority]=5&filter[city][radius]=25&filter[city][city][0][lon]=13.41053&filter[city][city][0][lat]=52.52437&start=0&limit=39&ref=Jobsuche\",\n\t\t\t\t\t\t\"description\": \"Die Herausforderung\\n\\n    Erstellung einer Bedarfsanalyse für neue Funktionen mit einer selbsterklärenden UI Gestaltung\\n    Entwickeln von Funktionen und Algorithmen die nachhaltig lesbar sind\\n    Der Fokus liegt in der Vereinfachung komplexer Vorgänge\\n\\nDeine Aufgaben\\n\\n    Weiterentwicklung von epirent aufgrund von aktuellen Anforderungen\\n    Im Team Lösungen für neue Funktionen erarbeiten\\n    Erstellen von gut bedienbaren und ausgeklügelten UI, denke wie ein Anwender\\n    Kommunikation im Team, einbringen eigener Ideen\\n    Offener Umgang mit neuen Technologien\\n    Kreativität ist gefragt\\n\\nDeine Fähigkeiten\\n\\n    Weitreichende Erfahrungen in der Anwendungsprogrammierung\\n    Klare und selbsterklärende UI Designs erstellen\\n    Komplizierte technische Zusammenhänge auf einfache Funktionen herunterbrechen\\n    Kommunikativ im Team, zielorientiert und selbständig in der Arbeitsorganisation\\n    Deine Sprachkenntnisse (optimal): JavaScript, CSS, HTML, Bootstrap, AngularJS, API Entwicklung (REST), Responsive Design / Progressive Apps\\n    Kein Hochschulabschluss notwendig, Können zählt!\",\n\t\t\t\t\t\t\"skills\": \"angular, bootstrap, rest, responsive, pwa\",\n\t\t\t\t\t\t\"publicationDate\": \"2022-11-17\",\n\t\t\t\t\t\t\"status\": \"sendApplication\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t-------------------------------\n\t- serve as API with json-server\n\t\t- install it\n\t\t\t- `npm i json-server`\n\t\t- set up start script for it in **package.json**\n\t\t\t---------------------------\n\t\t\t\"api\": \"json-server --watch ./src/data/db.json --port 5555\"\n\t\t\t---------------------------\n\t\t- `npm run api`\n\t\t\t- if you get an error **EADDRINUSE**, then just change the port, e.g. from 5555 to **5556** for now\n\t\t- `npm run api` and click on the **jobs** link##onthejobsjcli\t\n\t\t- you will see that it is serving your JSON file's **jobs** array:##showingjthsijob\n\t- fetch the data on the jobs page\n\t\t- `npm i axios`\n\t\t- **PageJobs.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\n\t\t\tconst apiUrl = 'http://localhost:5556';\n\n\t\t\tinterface IJob {\n\t\t\t\tid: number,\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\turl: string;\n\t\t\t\tskills: string;\n\t\t\t\tpublicationDate: string;\n\t\t\t\tstatus: string;\n\t\t\t}\n\n\t\t\texport const PageJobs = () => {\n\t\t\t\tconst [jobs, setJobs] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetJobs((await axios.get(`${apiUrl}/jobs`)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"pageJobs\">\n\t\t\t\t\t\t<div className=\"jobs\">\n\t\t\t\t\t\t\t<h2>There are {jobs.length} jobs:</h2>\n\t\t\t\t\t\t\t{jobs.map((job: IJob) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"job\">\n\t\t\t\t\t\t\t\t\t\t<div>{job.title}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------\n\t\t- you will now see:##showingthesimplejobs2\n\t- make one command `npm start` to start both frontend and api\n\t\t- close all terminals and open a new one\n\t\t- `npm -D i npm-run-all`\n\t\t- **package.json**\n\t\t\t-----------------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"frontend\": \"vite\",\n\t\t\t\t\"api\": \"json-server --watch ./src/data/db.json --port 5556\",\n\t\t\t\t\"start\": \"run-p api frontend\",\n\t\t\t\t\"build\": \"tsc && vite build\",\n\t\t\t\t\"preview\": \"vite preview\",\n\t\t\t\t\"cp\": \"node backend/cp.mjs\"\n\t\t\t},\t\n\t\t\t-----------------------------------------------\n\t- display full job info on page\n\t\t- **PageJobs.tsx**\n\t\t\t------------------------------------\n\t\t\t<div className=\"job\">\n\t\t\t\t<div className=\"title\"><a href={job.url} target=\"_blank\">{job.title}</a></div>\n\t\t\t\t<div className=\"company\">{job.company}</div>\n\t\t\t\t<div className=\"description\">{job.description}</div>\n\t\t\t\t<div className=\"skills\">{job.skills}</div>\n\t\t\t\t<div className=\"statusLine\">{job.publicationDate}: {job.status}</div>\n\t\t\t</div>\n\t\t\t------------------------------------\n\t\t- **App.scss**\n\t\t\t--------------------------------------\n\t\t\t.pageJobs {\n\t\t\t\t.jobs {\n\t\t\t\t\t.job {\n\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\tmargin-bottom: 1rem;\n\n\t\t\t\t\t\tdiv {\n\t\t\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\ta {\n\t\t\t\t\t\t\t\tcolor: rgb(176, 146, 91);\n\t\t\t\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.company {\n\t\t\t\t\t\t\tcolor: rgb(208, 208, 114);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\tcolor: #999;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.skills {\n\t\t\t\t\t\t\tcolor: green;\n\t\t\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.statusLine {\n\t\t\t\t\t\t\tcolor: rgb(232, 133, 116);\n\t\t\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et-001-zustand-job-site/tree/20-display-jobs-with-json-server\n\t\t- site should look like this:##the20nowshosing","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-16 00:05:46","systemWhoCreated":"systemUnknown"},{"id":642,"category":"Deployment","title":"Deploy a React frontend, read-only website to Netlify/Vercel/Cloudflare and understand frontend and frontend/backend hosting","body":"- **What we will do**\n\t- build a React Website with\n\t\t- React Router\n\t\t- JSON Datei as read-only database\n\t- deploy at Netlify\n\t\t- resolve React Router 404 problem \n\t- deploy at Vercel\n\t\t- resolve React Router 404 problem \n\t- try to deploy at Cloudflare\n\t\t- see that you get a compilation error regarding TypeScript\n\t- show to ways to display images (static and public-folder)\n\t- fetch API data from your online site \n\t- share JSON files as API-data in public \n\t\t- publish at Netlify and resolve the access issue\n\t\t- publish at Vercel and resolve the access issue\n- **final code for this project** is here:\n\t- https://github.com/edwardtanguay/et003-frontend-deployment-jobsite\n- **final site**\n\t- the finished site will look like this: nnn\n- **==> STEP 1. Create simple React site with menu <==**\n\t- let's download and install a ready-to-go React site with TypeScript, Sass, React Router menu and the Material UI tools\n\t\t- go to https://github.com/edwardtanguay/blank-vite-dark-menu\n\t\t- click the Code button, download the code and copy it into a directory\n\t\t- start VSCode in that directory, e.g. with `code .`\n\t\t- in VSCode, install the packages with `npm i`\n\t\t- start the site with `npm run dev`\n\t\t- and click on the http link in the terminal to see the view the site in the browser\n\t- change the names of the pages and their corresponding files\n\t\t- first delete the three pages, then recreate with the page generation script\n\t\t\t- `npm run cp Dashboard`\n\t\t\t- `npm run cp Jobs`\n\t\t\t- `npm run cp Skills`\n\t\t- **App.tsx**\n\t\t\t- change **Welcome** to **Dashboard**\n\t\t\t- change **Info** to **Jobs**\n\t\t\t- change **About** to **Skills**\n\t\t\t- also change the default page to dashboard\n\t\t\t\t------------------------------------\n\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/dashboard\" replace />} />\n\t\t\t\t------------------------------------\n\t- change the title of the site to \"Get a Job\" in\n\t\t- index.html\n\t\t- App.tsx\n\t- **step is finished:**\n\t\t- current code: https://github.com/edwardtanguay/et003-frontend-deployment-jobsite/tree/10-minimized-site-with-menu\n\t\t- site should look like this:##the10with003now\n- **==> STEP 2. Publish to Netlify and resolve React Router 404 error <==**\n\t- set up local Git repository\n\t\t- `git init -b main`\n\t- publish this repository to GitHub either manually or using the Visual Studio Git integration:\n\t\t- best practice to keep your projects organized is to have the same name for all of these:\n\t\t\t- local directory name: `et003-frontend-deployment-jobsite`\n\t\t\t- GitHub repository name: `et003-frontend-deployment-jobsite`\n\t\t\t- Netlify URL name: `et003-frontend-deployment-jobsite.netlify.app`\n\t\t\t- Vercel URL name: `et003-frontend-deployment-jobsite.vercel.app`\n\t\t\t- Cloudflare URL name: `et003-frontend-deployment-jobsite.pages.dev`\n\t\t\t- **and of course don't name your project with exactly this name `et003-frontend-deployment-jobsite` since I have already used it for the Netlify/Vercel/Cloudflare URLs**\n\t\t- create repository manually\n\t\t\t- create repository at GitHub\n\t\t\t- copy and paste the commands to push an existing directory to that repository\n\t\t- create repository automatically with VSCode Git integration\n\t\t\t- commit code locally to repository\n\t\t\t- click the button##publishbranchbuttonon\n\t- go to Netlify and deploy site\n\t\t- https://www.netlify.com\n\t\t- log in with GitHub if you haven't\n\t\t- authorize Netlify to be able to access your GitHub respository\n\t\t- import an existing project##thetwonetlifon\n\t\t- search for a unique word in your repository and click on the link to it##searchdeployment\n\t\t- **build command** and **publish directory** will be correct since Netlify will recognize that we built our React site with Vite and provide the correct defaults here\n\t\t- but be sure **if you have more than one branch**, that you **publish the branch you want to publish**\n\t\t- while it builds, change the name of the site to your directory name\n\t\t\t- click **Site Settings**\n\t\t\t- change site name\n\t\t\t- enter your directory name, e.g. `et003-frontend-deployment-jobsite`\n\t\t- click on **Deploys**\n\t\t\t- it should be finished by this time:##siteisreadsysy\n\t\t- click on the URL\n\t\t- your site should work just as it did locally **except for one issue with React Router**\n\t\t\t- you can click around the React Router menu and go to each page fine\n\t\t\t- but if\n\t\t\t\t- 1. while on one of the page routes, you click reload\n\t\t\t\t- 2. or if you copy this URL, send it to someone, and they click on it\n\t\t\t- then you will see a 404 page:#gif#seethenet404\n\t- fix the 404 error for Netlify\n\t\t- create a file named `_redirects` in the **public** directory of your site, with this one line as content:\n\t\t\t---------------------------\n\t\t\t/* /index.html 200\n\t\t\t---------------------------\n\t\t- make sure it is in the **public** directory and not the root:##thefixnetlifyerrorreact\n\t\t- push your change to GitHub which will update your Netlify site\n\t- wait about a minute for Netlify to notice your push to your repository and republish the site \n\t\t- (you can check the progress at Netlify)\n\t\t- retry your site refreshing the page on a page route to see that the error is fixed\n\t\t\t- https://et003-frontend-deployment-jobsite.netlify.app\n- **==> STEP 3. Publish to Vercel and resolve React Router 404 error <==**\n\t- go to Vercel and deploy site\n\t\t- https://www.vercel.com\n\t\t- log in with GitHub if you haven't\n\t\t- authorize Vercel to be able to access your GitHub respository\n\t\t- import an existing project##thetwoksjadprvec\n\t\t- on Vercel, the project that you just pushed should be listed first, click **Import**:##theprojvercpush\n\t\t- you'll see that it recognized that your site was built with Vite and will provide all the correct default settings, so click **Deploy**##dothedployvite\n\t\t- when deployment is finished, you will get a preview of your site:##thepreverercel\n\t\t- just click the preview to go to your published site\n\t- note that Vercel automatically names your URL the same as your repository name instead of creating a ridiculous-sounding name for your URL that you always have to change:##notenoreidis\n\t- note that you have the same 404 error at Vercel as you did at Netlify:#gif#theverscel404\n\t- however, you solve this error differently for Vercel\n\t\t- in the root directory, create a file called **vercel.json** with the following content:\n\t\t\t-------------------------------------------\n\t\t\t{\n\t\t\t\t\"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/\" }]\n\t\t\t}\n\t\t\t-------------------------------------------\n\t\t- push your change to GitHub which will update your Vercel site\n\t\t\t- note that Vercel makes this update in literally seconds, faster than Netlify\n\t\t- retry your site refreshing the page on a page route to see that the error is fixed\n\t\t\t- https://et003-frontend-deployment-jobsite.vercel.app\n- **==> STEP 4. Publish to Cloudflare (fails while building TypeScript) <==**\t\n\t- go to Cloudflare and deploy site\n\t\t- https://www.cloudflare.com\n\t\t- sign up via e-mail if you haven't\n\t\t- note at Cloudflare **websites** and **pages** are two different things\n\t\t\t- we want to publish our **website** so we have to go to **pages**\n\t\t- click on **Create a project** and **Connect to Git**##pagesgit\n\t\t- just as with Vercel, Cloudflare will list the last repository you published first, so just click it and then click the button below **Begin setup**:##justaswithsver\n\t\t- note Cloudflare doesn't recognize Vite nor does it give you any default entries, so type them in yourself:\n\t\t\t- **Build command:** `npm run build`\n\t\t\t- **Build output directory:** `dist`\n\t\t- click the **Build and Deploy** button\n\t- note that Cloudflare seems to have a problem with Vite's TypeScript compiler and aborts the build process with a failed site:##cloudflarenots\n\t- for this reason, **Cloudflare is not recommended for TypeScript sites**\n- **==> STEP 5. Two ways to successfully display images on a React site hosted online <==**\n\t- **imported images**\n\t\t- use imported images for static images which are static images whose dimensions are known, etc.\n\t\t\t- e.g. welcome page images or company logos, etc.\n\t\t- an imported image needs to be saved under `/src` e.g. in `/src/assets`\n\t\t- note that the name of an imported image will be changed when published, e.g. will not be called `employment.jpg` but e.g. `employment.abe1ddd9.jpg`\n\t\t- download the image [here](https://raw.githubusercontent.com/edwardtanguay/et003-frontend-deployment-jobsite/10-minimized-site-with-menu/src/assets/employment.jpg)\n\t\t- **PageDashboard.tsx**\n\t\t\t-----------------------------\n\t\t\timport  employment from '../assets/employment.jpg';\n\n\t\t\t<img className=\"employment\" src={employment}/>\n\t\t\t-----------------------------\n\t\t- **App.scss**\n\t\t\t-------------------------------------\n\t\t\t.pageDashboard {\n\t\t\t\timg.employment {\n\t\t\t\t\twidth: 30rem;\n\t\t\t\t\tbox-shadow: 10px 10px 33px #777;\n\t\t\t\t\tborder-radius: 1rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------\n\t\t- push your changes to your repository\n\t\t- check both the Netlify and Vercel site to see that the image is displayed on both\n\t\t\t- https://et003-frontend-deployment-jobsite.netlify.app/dashboard\n\t\t\t- https://et003-frontend-deployment-jobsite.vercel.app/dashboard\n\t\t\t- right click on both the images to download them and see that the names are not the original names##bothimagesonvernet\n\t- **public-folder images**\n\t\t- put images in the public folder that will be dynamically displayed, e.g. if you have an array of 100 employees, then the pictures of the employees should be in e.g. `/public/images`\n\t\t- public-folder images can referenced with an **img** tag in JSX just as they are in HTML\n\t\t\t- the path starts within public, e.g. `<img src=\"images/employee_alice_marshall.jpg\"/>\n\t\t- when downloading public-folder images, the actual names of the images are maintained\n\t\t- create a file called **jobSources.json**\n\t\t\t----------------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"idCode\": \"getinit\",\n\t\t\t\t\t\"title\": \"get-in-it\",\n\t\t\t\t\t\"url\": \"https://www.get-in-it.de\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"idCode\": \"honeypot\",\n\t\t\t\t\t\"title\": \"Honeypot\",\n\t\t\t\t\t\"url\": \"https://www.honeypot.io\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\"idCode\": \"moberries\",\n\t\t\t\t\t\"title\": \"Moberries\",\n\t\t\t\t\t\"url\": \"https://www.moberries.com/jobs\"\n\t\t\t\t}\n\t\t\t]\n\t\t\t----------------------------------------\n\t\t- download these files into `public/images/jobSources`\n\t\t\t- [getinit.png](https://raw.githubusercontent.com/edwardtanguay/et003-frontend-deployment-jobsite/10-minimized-site-with-menu/public/images/jobSources/getinit.png)\n\t\t\t- [honeypot.png](https://raw.githubusercontent.com/edwardtanguay/et003-frontend-deployment-jobsite/10-minimized-site-with-menu/public/images/jobSources/honeypot.png)\n\t\t\t- [moberries.png](https://raw.githubusercontent.com/edwardtanguay/et003-frontend-deployment-jobsite/10-minimized-site-with-menu/public/images/jobSources/moberries.png)\n\t\t- **PageJobs.tsx**\n\t\t\t------------------------------------------------------\n\t\t\timport jobSources from '../data/jobSources.json';\n\n\t\t\texport const PageJobs = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"page pageJobs\">\n\t\t\t\t\t\t<h2>Job Sources</h2>\n\t\t\t\t\t\t<div className=\"jobSources\">\n\t\t\t\t\t\t\t{jobSources.map((jobSource) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"jobSource\" key={jobSource.id}>\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={`images/jobSources/${jobSource.idCode}.png`}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"title\">{jobSource.title}</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"url\"><a target=\"_blank\" href={jobSource.url}>{jobSource.url}</a></div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------------------------------\n\t\t- **App.scss**\n\t\t\t---------------------------------\n\t\t\t.pageJobs {\n\t\t\t\t.jobSources {\n\t\t\t\t\t.jobSource {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tgap: .7rem;\n\t\t\t\t\t\tmargin-bottom: 1.5rem;\n\n\t\t\t\t\t\timg {\n\t\t\t\t\t\t\twidth: 6rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.info {\n\t\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\t\tcolor: black;\n\t\t\t\t\t\t\t\ttext-shadow: 1px 1px 10px #ccc;\n\t\t\t\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.url {\n\t\t\t\t\t\t\t\ta {\n\t\t\t\t\t\t\t\t\tcolor: rgb(217, 217, 103);\n\t\t\t\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t---------------------------------\n\t\t- push your changes to your repository\n\t\t- check both the Netlify and Vercel site to see that the image is displayed on both:\n\t\t\t- https://et003-frontend-deployment-jobsite.netlify.app/jobs\n\t\t\t- https://et003-frontend-deployment-jobsite.vercel.app/jobs\n\t\t\t- right click on both the images to download them and see that these public-folder images have their original names##images2okok\n- **==> STEP 6. Always test your API calls from your online site to see that they aren't being blocked by e.g. cors errors <==**\n\t- nnn\n- **==> STEP 7. Make JSON data available from your online site in your public folder <==**\n\t- nnn\n- **==> STEP 8. Create environment variables which are different locally than they are online <==**\n\t- nnn\n- **==> STEP 9. Consider these issues when planning your frontend hosting <==**\n\t- if you have numerous branches in your repository, make sure you **pay attention to which branch you are publishing** at your hosting provider\n\t\t- and not that this can be very useful, e.g.\n\t\t\t- you could have a URL named **oursite-test.netlify.app** which publishes your **test** branch\n\t\t\t- and you could have a URL named **oursite.netlify.app** which publishes your **production** branch\n\t- before you start designing a site with third-party npm packages, **test any new technology at your desired hosting provider first**\n\t\t- e.g. I was able to get a site styled with [Material UI](https://mui.com/) working locally, but when I tried to publish it to Netlify it got build errors\n\t\t\t- see: https://onespace.pages.dev/forays?id=234\n\t\t- local and Netlify:##checkthehostinprovfirst\n\t- note that **you cannot host backends** at frontend hosting providers such as **Netlify** or **Vercel**\n\t\t- this means even if you have a local json-server built into your repository, it will work locally but not at these frontend providers\n\t\t- to publish such a backend/frontend site e.g. with a json-server or some custom Node/Express backend, you need to either\n\t\t\t- host the backend at e.g. [cyclic.sh](https://www.cyclic.sh) and the frontend at **Netlify** or **Vercel**\n\t\t\t- or host both at a machine-in-the-cloud provider such as [Hetzner](https://www.hetzner.com) or [DigitalOcean](https://www.digitalocean.com)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-18 03:54:38","systemWhoCreated":"systemUnknown"},{"id":643,"category":"Gatsby","title":"How to set up a Gatsby 5 site with TypeScript","body":"- **what we will do**\n\t- get a Gatsby website up and running, including:\n\t- add data to the `gatsby-config.js` file and retrieve it with GraphQL\n\t- install and use SASS\n\t- responsive images\n\t- MDX Markdown\n\t- add multiple pages with nav menu\n\t- use `<Layout>` to create header and footer that shows on each page \n\t- use `<Seo>` to display page title in tab header\n\t- use performance-optimized `<StaticImage>`\n\t- deploy site at Vercel\n\t- use this site in the future as a Gatsby starter site\n- **final project**\n\t- code can be found here:\n\t\t- nnnnnnnnnnnnnnnnnnnnn\n\t- other past Gatsby sites made \n\t\t- 2022-01-04\n\t\t\t- code: [edwardtanguay/gatsby-edward-starter-site](https://github.com/edwardtanguay/gatsby-edward-starter-site)\n\t\t\t- site: [gatsby-edward-starter-site.netlify.app](https://gatsby-edward-starter-site.netlify.app)\n\t\t\t- site looks like this:#gif#gatsbyshowstarteredwww\n\t\t- 2022-05-31\n\t\t\t- code: [edwardtanguay/gatsby-simple-site2](https://github.com/edwardtanguay/gatsby-simple-site2)\n\t\t\t- site: [gatsby-simple-site2.netlify.app](https://gatsby-simple-site2.netlify.app)\n\t\t\t- site looks like this:#gif#gatsby222ok\n\t- final site will look this this: nnnnnnnnnnnnn\n- **==> STEP 1. Create simple Gatsby Site <==**\n\t- **TODO**\n- create a default Gatsby site\n\t- go to webs directory\n\t- `gatsby new gatsby-simple-site` (this will create a directory one level below called `gatsby-simple-site`)\n\t\t- takes around 2 minutes\n- open in VSCode\n\t- `cd gatsby-simple-site`\n\t- `code .`\n\t- look around, looks create-react-app-like\n- start website\n\t- `npm start`\n\t- if you get this error in Firefox:##thefirstfoxgats\n\t- fix it like this:##fixed8000gatsby\n\t- notice there are now 4 other pages to click on (2022-05-31) including TypeScript, a server-side-rendered page, and a deferred-static-generation page, worth exploring##notice5pages\n- explore code\n\t- note that it is hot-loading like create-react-app or Live Server\n\t- `index.js` \n\t\t- change text\n\t\t- notice **StaticImage** is from Gatsby\n\t\t\t- change `width` and `quality`\n\t\t\t- add a new jpg image to `src/images`\n\t\t\t- add `transformOptions={{grayscale: true, rotate: 90}}` and edit values\n\t\t\t- StaticImage is a way to optimize speed and performance of the website\n\t\t- notice **Link** is also from Gatsby\n\t- `page-2.js`\n\t\t- notice how `<Layout>` works\n\t\t\t- add `<hr/>` before and after children\n\t\t\t- change text in footer: \"This site was built\"\n\t\t\t- notice how GraphQL is used in Gatsby:\n\t\t\t\t- add subtitle to `gatsby-config.js`, add to GraphQL query, then use in header (restart is required)##thewaygraphql\n\t\t- notice how `<Seo>` works\n\t\t\t- add subtitle:##addsubtitletoseo\n\t\t- explore server-side-rendering page\n\t\t- explore deferred-static-generation page\n- customize site content\n\t- **index.js**\n\t\t- Seo \"Home\" to \"Welcome\"\n\t\t- delete links and moreLinks\n\t\t- leave samplePageLinks\n\t\t- links to layout and add `<nav>`\n\t- **layout.js**\n\t\t- remove header\n\t\t\t- replace with `<h1>`\n\t\t- remove footer\n\t- **page-2.js**\n\t\t- rename to `about.js`\n\t\t- simply this and index.js to one sentence\n\t- site should look like this:##gatsbywithsomestyleing\n- customize site styling\n\t- install SASS\n\t\t- `npm i sass gatsby-plugin-sass` (over a minute)\n\t\t- in `gatsby-config.js`, add to plugins: `gatsby-plugin-sass`\n\t- create **styles/reset.scss**\n\t\t----------------------------------\n\t\thtml, body, div, span, applet, object, iframe,\n\t\th1, h2, h3, h4, h5, h6, p, blockquote, pre,\n\t\ta, abbr, acronym, address, big, cite, code,\n\t\tdel, dfn, em, img, ins, kbd, q, s, samp,\n\t\tsmall, strike, strong, sub, sup, tt, var,\n\t\tb, u, i, center,\n\t\tdl, dt, dd, ol, ul, li,\n\t\tfieldset, form, label, legend,\n\t\ttable, caption, tbody, tfoot, thead, tr, th, td,\n\t\tarticle, aside, canvas, details, embed, \n\t\tfigure, figcaption, footer, header, hgroup, \n\t\tmenu, nav, output, ruby, section, summary,\n\t\ttime, mark, audio, video {\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tborder: 0;\n\t\t\tfont-size: 100%;\n\t\t\tfont: inherit;\n\t\t\tvertical-align: baseline;\n\t\t}\n\t\tarticle, aside, details, figcaption, figure, \n\t\tfooter, header, hgroup, menu, nav, section {\n\t\t\tdisplay: block;\n\t\t}\n\t\tbody {\n\t\t\tline-height: 1;\n\t\t}\n\t\tol, ul {\n\t\t\tlist-style: none;\n\t\t}\n\t\tblockquote, q {\n\t\t\tquotes: none;\n\t\t}\n\t\tblockquote:before, blockquote:after,\n\t\tq:before, q:after {\n\t\t\tcontent: '';\n\t\t\tcontent: none;\n\t\t}\n\t\ttable {\n\t\t\tborder-collapse: collapse;\n\t\t\tborder-spacing: 0;\n\t\t}\n\t\t----------------------------------\n\t- styles should be completely reset now:##gatsresetted\n\t- add **main.scss**\n\t\t--------------------------------------\n\t\tbody {\n\t\t\tfont-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\n\t\t\th1 {\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tbackground-color: #eee;\n\t\t\t\tpadding: 10px 10px 10px 25px;\n\t\t\t}\n\t\t\tnav {\n\t\t\t\tdisplay: flex;\n\t\t\t\tbackground-color: #777;\n\t\t\t\tpadding: 3px 0 5px 20px;\n\t\t\t\tfont-size: 1.3rem;\n\t\t\t\ta {\n\t\t\t\t\tmargin-left: 10px;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\t\t\t\t[aria-current]:not([aria-current=\"false\"]) {\n\t\t\t\t\tcolor: Yellow;\n\t\t\t\t\ttext-shadow: 1px 1px 1px #000;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmain {\n\t\t\t\tpadding: 20px 20px 20px 30px;\n\t\t\t}\n\t\t\tp {\n\t\t\t\tfont-size: 1.2rem;\n\t\t\t}\n\t\t}\n\t\t--------------------------------------\n- index.js\n\t---------------------------------\n\timport '../styles/reset.scss';\n\timport '../styles/main.scss';\t\n\t---------------------------------\n- add image\n\t- save image to `src/images/project.png`\n\t- add `import { StaticImage } from \"gatsby-plugin-image\"`\n\t- add the static image:\n\t\t----------------------------------------\n\t\t<StaticImage src=\"../images/project.png\" alt=\"project\" aspectRatio={3 / 2}\n\t\t\twidth={200}\n\t\t\ttransformOptions={{ grayscale: false, rotate: 0 }}\n\t\t/>\n\t\t----------------------------------------\n\t- site should now look like this:##gatsnowwithgraphic\n- delete everything you don't need\n\t- `/images`\n\t\t- the astronaut image\n\t\t- (don't delete the gatsby icon)\n\t- two lock files\n\t- `README.md`\n- if site is broken, try:\n\t- `rm -rf node_modules`\n\t- `npm i`\n\t- run `gatsby clean`\n- publish to Netlify\n\t- push to GitHub repository\n\t- set up at Netlify\n\t\t- use all default settings\n\t\t- takes 2 minutes##andthenetlifgat\n- learn more\n\t- see the starters: [gatsbyjs.com/starters](https://www.gatsbyjs.com/starters)\n\t- see the plugins: [gatsbyjs.com/plugins](https://www.gatsbyjs.com/plugins)\n\t- see the documentation: [gatsbyjs.com/docs/how-to/](https://www.gatsbyjs.com/docs/how-to)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-19 15:57:18","systemWhoCreated":"systemUnknown"},{"id":644,"category":"Contentful","title":"Create React site that fetches image and data from Contentful via REST and GraphQL","body":"- **what we will do**\n\t- sign up for an account at Contentful, add data and images, and display these on a React website\n- **what is a headless CMS?**\n\t- Contentful is a **headless content management system**, or **headless CMS**\n\t\t- headless means that it provides only data for a content management system, but not the frontend (head) to display it\n\t\t- so it could be considered an online data from which you fetch data (including images) via REST and GraphQL\n\t\t- MongoDB Atlas is also an online database, but you would never have a e.g. non-developer employee log into MongoDB Atlas to update the data\n\t\t\t- yet this is possible with Contentful, e.g. **a non-technical person could by taught how to log into Contentful, add new events, upload images, and these would appear instantly on the website**\n\t\t- WordPress is an example of a CMS, but it is not headless\n\t\t\t- WordPress comes with the backend and frontend (head) which can't be separated\n\t\t\t- Contentful, on the other hand, provides data which could be fetched from various frontends, e.g. websites, smartphone apps, etc.\n- **final project**\n\t- the code for this project you can find here:\n\t\t- https://github.com/edwardtanguay/et007-contentful-react\n\t\t- another similar site: https://github.com/edwardtanguay/et008-contentful-react\n\t- the site is live here:\n\t\t- https://et007-contentful-react.vercel.app\n\t- the final site will look like this: #gif#democontentful\n- **==> STEP 1. Sign up for a free Contentful account and create a Content Model called \"Book\" <==**\n\t- go to: https://www.contentful.com\n\t- click the button **Sign up for free**\n\t- fill out form\n\t\t- confirm your e-mail\n\t- Create a Content Model called \"Book\"\n\t\t- click on **Content Model**\n\t\t- click **Add content type**\n\t\t\t- Book\n\t\t\t- add fields by clicking **Add field**\n\t\t\t\t- Title (Text)\n\t\t\t\t- Description (Text)\n\t\t\t\t- Book Image (Media)\n\t\t- it will look like this:##thetitlebook\n\t- create three books with the following data and images:\n\t\t- item #1\n\t\t\t- Building Microservices\n\t\t\t- Seems to be a high-level abstract book how to not only implement microservices but how to get your head around the paradigm shifts involved, e.g. from request-response to event-driven patterns.\n\t\t\t- GET IMAGE HERE: https://edwardtanguay.vercel.app/share/images/techBooks/buildingMicroservices.jpg\n\t\t- item #1\n\t\t\t- Gatsby E-Commerce\n\t\t\t- An interesting aspect of Gatsby: using it for e-commerce site which focuses on practical tips around this focus.\n\t\t\t- GET IMAGE HERE: https://edwardtanguay.vercel.app/share/images/techBooks/gatsbyEcommerce.jpg\n\t\t- item #1\n\t\t\t- Rust Web Programming\n\t\t\t- Looking forward to creating sites in Rust on my Debian box at Hetzner. This looks like a practical way to learn Rust in order to actually build something useful.\n\t\t\t- GET IMAGE HERE: https://edwardtanguay.vercel.app/share/images/techBooks/rustWeb.jpg\n\t- click on **Content** and you should see this:##thebooksarein\n- **==> STEP 2. Create React site with menu <==**\n\t- we will now build a React site to read the data from Contentful and display it on the site\n\t- let's download and install a ready-to-go React site with TypeScript, Sass, React Router menu and the Material UI tools\n\t\t- go to https://github.com/edwardtanguay/blank-vite-dark-menu\n\t\t- click the Code button, download the code and copy it into a directory\n\t\t- start VSCode in that directory, e.g. with `code .`\n\t\t- in VSCode, install the packages with `npm i`\n\t\t- start the site with `npm run dev`\n\t\t- and click on the http link in the terminal to see the view the site in the browser\n\t- change the names of the pages and their corresponding files\n\t\t- **Info** to **Books with REST**\n\t\t- **About** to **Books with GraphQL**\n\t- change the title of the site to \"Contentful Demo\" in\n\t\t- index.html\n\t\t- App.tsx\n\t- **step is finished:**\n\t\t- site should look like this:##10finisdkf\n- **==> STEP 3. Fetch the Contentful book data via REST and display it on the page <==**\n\t- import the contentful npm package\n\t\t-------------------------------------\n\t\tnpm i contentful\n\t\t-------------------------------------\n\t- to access your Contentful data, you need your **space id** and a **access token**\n\t\t- to get your **space id** and **access token**\n\t\t\t- click on **Settings** and **API keys**##acesstoken\t\n\t\t- create an **.env** file in the root directory and copy in your **space id** and **access token**\n\t\t\t---------------------------------------\n\t\t\tVITE_SPACE_ID = ksa3691er4ua\n\t\t\tVITE_ACCESS_TOKEN = HybRmB8-wshplsjKMC_-UWyHW9xR82we8UiFL6jg518\n\t\t\t---------------------------------------\n\t\t- be sure to click **Save** to save your access key\n\t- create a **src/client.ts** file which accesses your environment variables\n\t\t-------------------------------------\n\t\timport * as contentful from 'contentful';\n\n\t\texport const client = contentful.createClient({\n\t\t\tspace: import.meta.env.VITE_SPACE_ID,\n\t\t\taccessToken: import.meta.env.VITE_ACCESS_TOKEN\n\t\t});\n\t\t-------------------------------------\n\t- change your **.gitignore** file to only the essentials including your .env file so that this sensitive data in .env doesn't get pushed in your repository\n\t\t----------------------------------------------\n\t\tnode_modules\n\t\tdist\n\t\t.vscode/*\n\t\t.env\t\t\n\t\t----------------------------------------------\n\t- **PageBooksWithRest.tsx**\n\t\t-------------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport { client } from '../client';\n\n\t\tinterface IBook {\n\t\t\tid: string;\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t\timageUrl: string;\n\t\t}\n\n\t\texport const PageBooksWithRest = () => {\n\t\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await client.getEntries({\n\t\t\t\t\t\tcontent_type: 'book',\n\t\t\t\t\t});\n\t\t\t\t\tconst rawBooks = response.items;\n\t\t\t\t\tconst _books: IBook[] = rawBooks.map((rawBook: any) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tid: rawBook.sys.id,\n\t\t\t\t\t\t\ttitle: rawBook.fields.title,\n\t\t\t\t\t\t\tdescription: rawBook.fields.description,\n\t\t\t\t\t\t\timageUrl: rawBook.fields.bookImage.fields.file.url,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\tsetBooks(_books);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"page pageBooks\">\n\t\t\t\t\t<p>There are {books.length} books:</p>\n\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t{books.map((book) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"book\" key={book.id}>\n\t\t\t\t\t\t\t\t\t<img src={book.imageUrl} />\n\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t\t{book.description}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- **App.scss**\n\t\t----------------------------------------\n\t\t.page {\n\t\t\t.books {\n\t\t\t\t.book {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tmargin-bottom: 2rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\twidth: 30rem;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 1rem;\n\n\t\t\t\t\timg {\n\t\t\t\t\t\twidth: 6rem;\n\t\t\t\t\t\theight: 8rem;\n\t\t\t\t\t}\n\n\t\t\t\t\t.info {\n\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\tcolor: brown;\n\t\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t----------------------------------------\n\t- **Note:** change e.g. the title of one of these books on Contentful, and see that the change is immediately reflected on your website\n\t- **step is finished:**\n\t\t- site should look like this:##30andshowbooks\t\n- **==> STEP 4. Fetch the Contentful book data via GraphQL and display it on the page <==**\n\t- fetching data from Contentful via **GraphQL** instead of **REST** is more straight-forward because:\n\t\t- you don't need to import the contentful npm package\n\t\t- GraphQL allows you to fetch only the fields you need so there is no need to clean your data\n\t\t- you can use axios which has a simpler syntax\n\t- **PageBooksWithGraphql.tsx**\n\t\t-------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport axios from 'axios';\n\n\t\tinterface IBook {\n\t\t\tsys: {\n\t\t\t\tid: string;\n\t\t\t};\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t\tbookImage: {\n\t\t\t\turl: string;\n\t\t\t};\n\t\t}\n\n\t\tconst space = import.meta.env.VITE_SPACE_ID;\n\t\tconst accessToken = import.meta.env.VITE_ACCESS_TOKEN;\n\t\tconst url = `https://graphql.contentful.com/content/v1/spaces/${space}?access_token=${accessToken}`;\n\t\tconst query = `\n\t\t\t\t{\n\t\t\t\t\tbookCollection {\n\t\t\t\t\t\titems {\n\t\t\t\t\t\t\tsys {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttitle\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tbookImage {\n\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t`;\n\n\t\texport const PageBooksWithGraphql = () => {\n\t\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios({\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tmethod: 'post',\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst _books = response.data.data.bookCollection.items;\n\n\t\t\t\t\tsetBooks(_books);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"page pageBooksWithGraphql\">\n\t\t\t\t\t<p>There are {books.length} books:</p>\n\t\t\t\t\t<div className=\"books\">\n\t\t\t\t\t\t{books.map((book) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"book\" key={book.sys.id}>\n\t\t\t\t\t\t\t\t\t<img src={book.bookImage.url} />\n\t\t\t\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\">{book.title}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t\t{book.description}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------\n\t- **Note:** if you publish this site online, make sure that you set the **.env** environment variables at your hosting provider \n\t- **step is finished:**\n\t\t- site should look like this:#gif#democontentful","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-19 22:49:38","systemWhoCreated":"systemUnknown"},{"id":645,"category":"Vue.js","title":"Build interactive Vue.js into HTML site with API data call","body":"- **background**\n\t- Vue.js has two implementations\n\t\t- 1. a robust JavaScript framework like Angular with a rich ecosystem capable of building enterprise web applications\n\t\t- 2. a light-footprint tool to add interactivity to any HTML-based site, e.g. HTML/DOM/JS sites and server-rendered sites such as PHP, ASP.NET, Django, Ruby-on-Rails, etc.\n- **what we will build**\n\t- we will look at instances of using Vue.js for the second implementation: enhancing HTML-based websites with light-weight data-fetching and interactivity\n\t- code is here: https://github.com/edwardtanguay/et001-html-vuejs\n- **==> STEP 1. Create a professional-looking HTML/CSS website from a template <==**\n\t- goto \n\t\t- https://www.free-css.com\n\t- download this site:\n\t\t- https://www.free-css.com/free-css-templates/page280/justice\n\t\t- click into the zip file\n\t\t- copy all the files to a folder \n\t- open code in VSCode\n\t- on index.html, open site with Live Server\n\t- change it into an information site\n\t\t- change everywhere \"justice\" to \"info site\"\n\t\t- change the first two main phrases to info phrases\n\t- site will look like this:##theinfinfosite\n- **==> STEP 2. Change the \"25 Years Experience\" area to a searchable employee area <==**\n\t- **replace the \"Learn about us\" text with text from Vue.js \"Meet our team of experts\"**\n\t\t- see [Vue.js 3 boilerplate text here](https://github.com/edwardtanguay/howto-html-and-vuejs-cdn/blob/master/index.html)\n\t\t- copy in HEAD\n\t\t\t-----------------------------\n\t\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t\t-----------------------------\n\t\t- wrap the HTML that Vue.js should have access to on the page in:\n\t\t\t-------------------------------------------\n\t\t\t<div id=\"vueapp\">\n\t\t\t\t...\n\t\t\t</div>\n\t\t\t-------------------------------------------\n\t\t- add right before end </body> tag:\n\t\t\t----------------------------\n\t\t\t<script>\n\t\t\t\tVue.createApp({\n\t\t\t\t\tdata() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\temployeeIntro: 'Meet our team of experts:'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).mount('#vueapp').initialize();\n\t\t\t</script>\t\n\t\t\t----------------------------\n\t\t- replace \"Learn about us\" with:\n\t\t\t-----------------------------------\n\t\t\t{{employeeIntro}}\n\t\t\t-----------------------------------\n\t\t- text from Vue.js will show on HTML page:##fromvujue\t\n\t- **list three mock employees that come from Vue.js data**\n\t\t- replace Vue.js section with this code:\n\t\t\t--------------------------------\n\t\t\t<script>\n\t\t\t\tVue.createApp({\n\t\t\t\t\tdata() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\temployeeIntro: '',\n\t\t\t\t\t\t\temployees: []\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmethods: {\n\t\t\t\t\t\tinitialize() {\n\t\t\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\t\t\tlastName: \"Wagner\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\t\t\tlastName: \"Scheppert\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\t\t\tlastName: \"Joskins\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthis.employeeIntro = `Meet our team of ${this.employees.length} experts`;\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}).mount('#vueapp').initialize();\n\t\t\t</script>\t\n\t\t\t--------------------------------\n\t\t- the number of employees will now display:##nowthe333\n\t- **fetch employee data from an API**\n\t\t- replace mock employees with employees from API\n\t\t\t----------------------------------------\n\t\t\tinitialize() {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch('https://edwardtanguay.vercel.app/share/employees.json');\n\t\t\t\t\tthis.employees = await response.json();\n\t\t\t\t\tthis.employeeIntro = `Meet our team of ${this.employees.length} experts`;\n\t\t\t\t})();\n\t\t\t},\t\t\t\n\t\t\t----------------------------------------\n\t\t- you will now see more employees:##nowiwth9\n\t- **now list out the employees in the employees section**\n\t\t- replace the text and button with:\n\t\t\t-----------------------------------\n\t\t\t<link rel=\"stylesheet\" href=\"vuejs/main.css\">\n\n\t\t\t<div class=\"employees\">\n\t\t\t\t<div class=\"employee\"\n\t\t\t\t\t v-for=\"employee in employees\">\n\t\t\t\t\t<img :src=\"`https://edwardtanguay.vercel.app/share/images/employees/employee_${employee.employeeID}.jpg`\"/>\n\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t{{employee.firstName}} {{employee.lastName}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\n\t\t\t-----------------------------------\n\t\t- now add styles in \n\t\t\t- **vuejs\\main.css**\n\t\t\t\t----------------------------\n\t\t\t\t.employee {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 1rem;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t}\n\n\t\t\t\t.employee .name {\n\t\t\t\t\tcolor:#000; \n\t\t\t\t\tfont-size: 2rem;\n\t\t\t\t}\n\n\t\t\t\t.employee img {\n\t\t\t\t\theight: 5rem;\n\t\t\t\t}\n\t\t\t\t----------------------------\n\t\t- should look like this:##thetiesjlook\n\t- **now make employee items clickable to toggle their name and title**\n\t\t- decorate the employees with a status field `showName`\n\t\t\t-------------------------------\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch('https://edwardtanguay.vercel.app/share/employees.json');\n\t\t\t\tconst rawEmployees = await response.json();\n\t\t\t\trawEmployees.forEach(employee => {\n\t\t\t\t\temployee.showName = true;\n\t\t\t\t\tthis.employees.push(employee);\n\t\t\t\t})\n\t\t\t\tthis.employeeIntro = `Meet our team of ${this.employees.length} experts`;\n\t\t\t})();\t\t\t\n\t\t\t-------------------------------\n\t\t- make employee images clickable to toggle information\n\t\t\t--------------------------------\n\t\t\t<div class=\"employee\"\n\t\t\t\t v-for=\"employee in employees\">\n\t\t\t\t<img @click=\"employee.showName = !employee.showName\"\n\t\t\t\t\t :src=\"`https://edwardtanguay.vercel.app/share/images/employees/employee_${employee.employeeID}.jpg`\" />\n\t\t\t\t<div class=\"name\">\n\t\t\t\t\t<div v-if=\"employee.showName\">\n\t\t\t\t\t\t{{employee.firstName}} {{employee.lastName}}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if=\"!employee.showName\">\n\t\t\t\t\t\t<span class=\"title\">{{employee.title}}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\t\n\t\t\t--------------------------------\n\t\t- add some styling\n\t\t\t---------------------------------\n\t\t\t.employee img {\n\t\t\t\theight: 5rem;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\n\t\t\t.employee .name .title {\n\t\t\t\tcolor: #999;\n\t\t\t\tfont-style: italic;\n\t\t\t}\n\t\t\t---------------------------------\n\t\t- you can now click the employees to toggle their information:#gif#employeesclickable\t\n- **==> STEP 3. Publish the site at Vercel to see it works online <==**\n\t- works fine: https://et001-html-vuejs.vercel.app","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-23 01:51:20","systemWhoCreated":"systemUnknown"},{"id":646,"category":"Angular","title":"How to make an Angular site","body":"- do this\n\t- do the second thing\n- go here: [Google](http://google.com)\n- the site will look like this:##nnnangular\n- here is the code to type in\n\t-------------------------------------------------------\n\t{\n\t\t\"date\": \"2022-11-22\",\n\t\t\"title\": \"Next.js with TypeScript and Tailwind\",\n\t\t\"videos\": [\n\t\t\t{\n\t\t\t\t\"description\": \"2022-11-22-workshop-nextjs-tailwind\",\n\t\t\t\t\"url\": \"https://drive.google.com/file/d/1l04IVkmaZqhDUmixFkth35CngE8uGCc7\"\n\t\t\t}\n\t\t],\n\t\t\"showContent\": true,\n\t\t\"activities\": [\n\t\t\t{\n\t\t\t\t\"kind\": \"liveCoding\",\n\t\t\t\t\"title\": \"FORAY: Create a Next.js 13 site with TypeScript and Tailwind using new apps directory\",\n\t\t\t\t\"outline\": \"- [FORAY: Create a Next.js 13 site with TypeScript and Tailwind using new apps directory](https://onespace.pages.dev/forays?id=238)\"\n\t\t\t}\n\t\t]\n\t},\n\t-------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-23 15:01:04","systemWhoCreated":"systemUnknown"},{"id":648,"category":"CSS","title":"Create HTML/CSS/JavaScript site that fetchs random items to test dynamic, responsive CSS","body":"- **what we will build**\n\t- one often has to style data which is dynamic\n\t\t- there are always a varying number of items\n\t\t- text lengths of the items vary, etc.\n\t- this will be a little test site which enables you to test your CSS layouts with dynamic, changing data\n\t- basically this is just boilerplate JavaScript so you don't have to be a JavaScript programmer to use it\n\t\t- you can change three variables at the beginning of the JavaScript file:\n\t\t\t-----------------------------------\n\t\t\tconst randomize_book_order = true;\n\t\t\tconst randomize_number_of_books = true;\n\t\t\tlet maximum_number_of_books = 999;\n\t\t\t-----------------------------------\n\t\t- however, the more JavaScript you know, the more you can adapt this code to your own needs\n\t\t\t- fetch other data from other APIs\n\t\t\t\t- see [my realistic API site](https://edwardtanguay.vercel.app/share) for various API data sources you can use\n\t- we will publish this to Vercel so that you can test your CSS layouts on real smartphones, tablets, etc.\n- **final project**\n\t- repository is here: https://github.com/edwardtanguay/et001-api-grid\n\t- the site is live here: https://et001-api-grid.vercel.app\n\t- when finished, site works like this:#gif#dynamicapi\n- **==> STEP 1. Create HTML page <==**\n\t- this is a simply HTML page that loads a CSS file and a SCSS file\n\t- notes that all the content will be injected into the `<section class=\"content\"></section>` element via JavaScript\n\t- if you want to see the data structure, inspect the code in the browser Developer Tools\n\t- **index.html**\n\t\t--------------------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Fetch Data</title>\n\t\t\t<link rel=\"stylesheet\" href=\"main.css\">\n\t\t\t<script src=\"main.js\" defer></script>\n\t\t\t<style>\n\t\t\t\tbody {\n\t\t\t\t\tbackground: #333;\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Books Page</h1>\n\t\t\t<section class=\"content\"></section>\t\n\t\t</body>\n\n\t\t</html>\t\t\n\t\t--------------------------------------------------------\n- **==> STEP 2. Create JavaScript page <==**\n\t- the most important lines of this code are the three variables that you can change to alter how books are displayed\n\t\t---------------------------------------\n\t\tconst randomize_book_order = true;\n\t\tconst randomize_number_of_books = true;\n\t\tlet maximum_number_of_books = 999;\t\t\n\t\t---------------------------------------\n\t- to the extent that you know JavaScript, you can alter this code to fetch data from other APIs and create differently structured HTML items for you to style with CSS\n\t- **main.js**\n\t\t----------------------------------------------\n\t\tconst contentElem = document.querySelector('.content');\n\n\t\tconst randomize_book_order = true;\n\t\tconst randomize_number_of_books = true;\n\t\tlet maximum_number_of_books = 999;\n\n\t\t(async () => {\n\t\t\tconst response = await fetch(\n\t\t\t\t'https://edwardtanguay.vercel.app/share/techBooks.json'\n\t\t\t);\n\t\t\tconst rawBooks = await response.json();\n\t\t\tlet books = [];\n\t\t\tif (randomize_book_order) {\n\t\t\t\tbooks = randomizeArray(rawBooks);\n\t\t\t} else {\n\t\t\t\tbooks = [...rawBooks];\n\t\t\t}\n\n\t\t\tmaximum_number_of_books = books.length < maximum_number_of_books ? books.length : maximum_number_of_books;\n\t\t\tlet number_of_books = maximum_number_of_books;\n\t\t\tif (randomize_number_of_books) {\n\t\t\t\tnumber_of_books =\n\t\t\t\t\tMath.floor(Math.random() * maximum_number_of_books) + 1;\n\t\t\t}\n\n\t\t\tbooks = books.filter((m, i) => i < number_of_books);\n\n\t\t\tcontentElem.innerHTML = `\n\t\t\t<div class=\"books\">\n\t\t\t\t${books\n\t\t\t\t\t.map((book) => {\n\t\t\t\t\t\treturn `\n\t\t\t\t<div class=\"book\">\n\t\t\t\t\t<img src=\"https://edwardtanguay.vercel.app/share/images/techBooks/${book.idCode}.jpg\" />\n\t\t\t\t\t<div class=\"info\">\n\t\t\t\t\t\t<div class=\"title\">${book.title}</div>\n\t\t\t\t\t\t<div class=\"description\">${book.description}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('')}\n\t\t\t</div>\n\t\t\t`;\n\t\t})();\n\n\t\tfunction randomizeArray(arr) {\n\t\t\tlet currentIndex = arr.length,\n\t\t\t\trandomIndex;\n\t\t\twhile (currentIndex != 0) {\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex--;\n\t\t\t\t[arr[currentIndex], arr[randomIndex]] = [\n\t\t\t\t\tarr[randomIndex],\n\t\t\t\t\tarr[currentIndex]\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn arr;\n\t\t}\n\t\t----------------------------------------------\n- **==> STEP 3. Create style sheet <==**\n\t- note that we use Sass instead of plain CSS\n\t\t- this gives us the ability to nest our styles, which even in this simple example would become too confusing without the nested feature of Sass\n\t\t- in order to use this, install the VSCode exension:##thelivesomcom\n\t\t- then after creating your `main.scss` file\n\t\t\t- expand VSCode to the width of the screen\n\t\t\t- look at the bottom bar in the middle\n\t\t\t- click on **Watch Sass**##thewatchwatch\n\t\t\t- your .scss files will all be converted to similarly-named .css files\n\t\t\t- any time you change a .scss file, this extension will automatically update its corresponding .css file##createthemscss\n\t- **main.scss**\n\t\t---------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\n\n\t\t@media screen and (max-width: 767px) {\n\t\t\t.books {\n\t\t\t\tgrid-template-columns: repeat(1, 1fr);\n\t\t\t}\n\t\t}\n\n\t\t@media screen and (min-width: 768px) {\n\t\t\t.books {\n\t\t\t\tgrid-template-columns: repeat(2, 1fr);\n\t\t\t}\n\t\t}\n\n\t\t@media screen and (min-width: 1324px) {\n\t\t\t.books {\n\t\t\t\tgrid-template-columns: repeat(4, 1fr);\n\t\t\t}\n\t\t}\n\n\t\t.books {\n\t\t\tdisplay: grid;\n\t\t\tgrid-gap: 2rem;\n\n\t\t\t.book {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\n\t\t\t\timg {\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: fit-content;\n\t\t\t\t\tbox-shadow: 1px 1px 10px #999;\n\t\t\t\t}\n\n\t\t\t\t.info {\n\t\t\t\t\t.title {\n\t\t\t\t\t\tcolor: rgb(207, 207, 125);\n\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t}\n\n\t\t\t\t\t.description {\n\t\t\t\t\t\tcolor: #999;\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t---------------------------------------\n- **==> STEP 4. Publish at Vercel to test your layout on smartphones and tablets <==**\n\t- publish your site to a Repository on your GitHub account\n\t- go to: https://vercel.com\n\t- if you don't yet have an account, simply sign up with your GitHub account\n\t- Add Project##newprojjjj\n\t- click \"Continue with GitHub\"\n\t- next to the GitHub repository that you just created, click on the **Import** button##clickrepobu\n\t- click on **Deploy**\n\t- after a few seconds, it will show a screenshot of your deployed site##itwilldpl\n\t- click on the screenshot to visit your site\n\t- you can now go to the vercel URL in your smartphone's browser to test the responsive view of your site:##andthesmartphon","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-25 03:14:42","systemWhoCreated":"systemUnknown"},{"id":649,"category":"React","title":"What to enter for the key value when using map() in JSX","body":"- when using map() to iterate over an array of objects in JSX, if you forget the key attribute, you get a warning in your browser console:##andforgot\n- a quick fix that one often does to get rid of this warning so that it is easier to debug in the browser console is to retrieve the **index as parameter from the map() function** and simply use that since **it is unique, i.e. 0, 1, 2, 3, ...**##indexisunique\n\t- the **problem with this quick index solution** is described well in this article ([Warning: Each Child in a List Should Have a Unique 'key' Prop](https://sentry.io/answers/unique-key-prop))\n\t\t--------------------------------\n\t\tReact uses the key prop create a relationship between the component and the DOM element. The library uses this relationship to determine whether or not the component should be re-rendered.\n\n\t\tIt is not recommended to use the index of the array as the key prop if you know the array will not be static. If the key is an index, reordering an item in the array changes it. Then React will get confused and re-render the incorrect element.\t\t\n\t\t--------------------------------\n\t- this means that this solution **will work as long as you don't reorder the items**\n\t- if you do reorder the items, each item will have a new key and so React will not be able to guarantee that it refreshes the correct items when it is changed, since it is identified with this key\n- the best way to resolve this is to make sure you have an e.g. **id field** in your objects which uniquely identifies each object, and use this field for the key##withidok\n- however, e.g. in the above case of my [germanNouns](https://edwardtanguay.vercel.app/share/germanNouns.json) data, I actually don't have a dedicated id field, but I do have a field **singular** which in this case is indeed unique, since there are no double entries for the same word, hence I can use it and (1) receive no browser console warning, and (2) React will be able to uniquely identify the object even when resorted##butdohavesingular\n- one might have the idea to just **use the whole object as the identifier** like this, but it won't work, TypeScript gives us some indication of why, i.e. that key is of type **React.Key** which is a string, and React converts our object simply into a string `[object Object]` which for every item is the same##badobjetob\n- what one could do, however, if one doesn't have an id property or any property that is always unique is to define the key as `JSON.stringify(obj)` which would be in some keys a relatively large string, and this would only work, of course, if there are no records which have the exact same data in the exact same fields##thestringifyok\n- using solutions that have randomly generated strings such as using [Math.random()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) or [uuid](https://www.npmjs.com/package/uuid) would bring about the same internal confusion for React as with **index** if you reordered your objects, since the keys would all be randomly generated again","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-26 14:48:46","systemWhoCreated":"systemUnknown"},{"id":650,"category":"JS/DOM","title":"How to use Vite to create a TypeScript/DOM site which loads data from an API","body":"- **what we will make**\n\t- we will use Vite to create a TypeScript/DOM site with which we can load npm modules, e.g. axios\n\t- we will create two components (book and books) which resemble React components\n\t- we will create TypeScript interfaces so that we have secures types for the fetched API data (IBook)\n\t- all types will be in a interfaces.ts module\n\t- we will have a tools.ts module which contains general functions\n- **final code**\n\t- repository is here: https://github.com/edwardtanguay/et01-js-dom-site\n\t- final site will look like this: nnn\n- **==> STEP 1. use Vite to create a base JS/DOM site with TypeScript <==**\n\t- go to your projects folder\n\t- `npm create vite`\n\t- ##fourarrosj\n\t- `cd` into your folder\n\t- `code .` to open VSCode\n\t- in VSCode, go into terminal\n\t\t- `npm i` to install node_modules\n\t\t- `npm run dev` to start the application\n\t\t- click on the link provided in the terminal##thelinklink\n\t- site should look like this:##thetsvite\n- **==> STEP 2. install Sass <==**\n\t- `npm i sass`\n\t- change `src/style.css` to `src/style.scss`\n\t- **main.ts**\n\t\t---------------------------\n\t\timport './style.scss';\n\t\t---------------------------\n- **==> STEP 3. create all files <==**\n\t- **main.ts**\n\t\t----------------------------------------\n\t\timport { getBooks, showBooks } from './components/books';\n\t\timport './style.scss';\n\t\timport { IBook } from './interfaces';\n\n\t\t(async () => {\n\t\t\tlet html = '';\n\t\t\ttry {\n\t\t\t\tconst books: IBook[] = await getBooks();\n\t\t\t\thtml = `\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Tech Books</h2>\n\t\t\t\t\t\t${showBooks(books)}\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t}\n\t\t\tcatch (e: any) {\n\t\t\t\thtml = `Error fetching books (\"${e.message}\")`;\n\t\t\t}\n\t\t\tdocument.querySelector('#app')!.innerHTML = html;\n\t\t})();\t\t\n\t\t----------------------------------------\n\t- **src/components/books.ts**\n\t\t--------------------------------------------\n\t\timport { showBook } from './book';\n\t\timport { IBook } from '../interfaces';\n\t\timport * as tools from '../tools';\n\n\t\texport const showBooks = (books: IBook[]) => {\n\t\t\treturn `\n\t\t\t<div class=\"books\">\n\t\t\t\t${books\n\t\t\t\t\t.map((book: IBook) => {\n\t\t\t\t\t\treturn showBook(book);\n\t\t\t\t\t})\n\t\t\t\t\t.join('')}\n\t\t\t</div>\n\t\t`;\n\t\t}\n\n\t\texport const getBooks = async () => {\n\t\t\treturn new Promise<IBook[]>((resolve, reject) => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch(\n\t\t\t\t\t\t'https://edwardtanguay.vercel.app/share/techBooks.json'\n\t\t\t\t\t);\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tconst rawBooks = await response.json();\n\t\t\t\t\t\tconst books: IBook[] = [];\n\t\t\t\t\t\trawBooks.forEach((rawBook: any) => {\n\t\t\t\t\t\t\tconst book: IBook = {\n\t\t\t\t\t\t\t\tidCode: rawBook.idCode,\n\t\t\t\t\t\t\t\ttitle: rawBook.title,\n\t\t\t\t\t\t\t\tdescription: rawBook.description,\n\t\t\t\t\t\t\t\tlanguage: rawBook.language ? tools.capitalizeFirstLetter(rawBook.language) : 'English'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbooks.push(book);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(books)\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject({message: 'server returned error ' + response.status})\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t})\n\t\t}\t\t\n\t\t--------------------------------------------\n\t- **src/components/book.ts**\n\t\t--------------------------------------------\t\t\n\t\timport { IBook } from '../interfaces';\n\n\t\texport const showBook =(book:IBook) => {\n\t\t\treturn `\n\t\t\t<div class=\"book\">\n\t\t\t\t<img src=\"https://edwardtanguay.vercel.app/share/images/techBooks/${book.idCode}.jpg\"/>\n\t\t\t\t<div class=\"info\">\n\t\t\t\t\t<div class=\"title\">${book.title}</div>\n\t\t\t\t\t<div class=\"language\">${book.language}</div>\n\t\t\t\t\t<div class=\"description\">${book.description}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\t\t}\n\t\t--------------------------------------------\t\t\n\t- **main.ts**\n\t\t---------------------------------------\n\t\texport interface IBook {\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t\tlanguage: string;\n\t\t}\n\t\t---------------------------------------\n\t- **tools.ts**\n\t\t----------------------------------\n\t\t/**\n\t\t * Capitalize the first letter of a string.\n\t\t *\n\t\t * tools.capitalizeFirstLetter(\"this is a sentence.\");\n\t\t *\n\t\t * \"This is a sentence.\"\n\t\t */\n\t\texport const capitalizeFirstLetter = (line: string) => {\n\t\t\treturn line.charAt(0).toUpperCase() + line.slice(1);\n\t\t}\t\t\n\t\t----------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-26 21:45:35","systemWhoCreated":"systemUnknown"},{"id":651,"category":"Jest","title":"Implement Jest into a React website and use it as a CI/CD workflow with GitHub and Vercel","body":"- **Background**\n\t- Jest allows you to test functions, this is called unit testing\n\t- unit testing is just one level of testing in React applications, the three levels are:\n\t\t- unit testing (scripts that make sure functions act as expected)\n\t\t- component testing (scripts that make sure your components act as expected)\n\t\t- end-to-end testing (scripts that use your application as a user would and makes sure everything works as expected)\n\t- there are many advantages for implementing testing in general\n\t\t- it makes your application more secure \n\t\t\t- when tests are connected in your CI/CD workflow, your website will not build and go to production until tests pass\n\t\t- unit tests in particular are useful because\n\t\t\t- unit tests encourage Test Driven Development (TDD) which forces you to first determine what your exact programming task is\n\t\t\t\t- you create a test suite which defines everything a function should do\n\t\t\t\t- you run the test suite and see that every test fails\n\t\t\t\t- you develop the function so that the first test passes, then move onto the next test\n\t\t\t\t- when every tests passes, you are finished\n\t\t\t- Jest tests can be set to watch for code changes\n\t\t\t\t- as soon as you change something that breaks a test, you will know it\n\t\t\t- after you implement unit tests\n\t\t\t\t- you tend to move business logic from e.g. component code into functions so they can be individually tested\n\t\t- when you have testing in place\n\t\t\t- new developers can more quickly understand what your application does by reading the tests\n\t- function tests are a natural extension of TypeScript\n\t\t- TypeScript can ensure that e.g. a function returns a string\n\t\t- a unit test can ensure that e.g. a function returns a string that contains only lowercase letters and hyphens\n\t- Jest tests integrate well into CI/CD workflows with popular development tools and services such as\n\t\t- Visual Studio Code\n\t\t- GitHub\n\t\t- Vercel\n- **what we will do**\n\t- first we will look at a website that has Jest testing implemented in order to\n\t\t- see how it is implemented\n\t\t- how Jest testing works with VSCode\n\t\t- how Jest testing integrates with the `npm run build`\n\t\t- how Vercel integrates with the Jest testing and won't publish code that fails tests \n\t\t- how GitHub integrates with Jest testing and Vercel to indicate if your tests have passed or not\n\t- then we will build a Vite React site implementing Jest testing from the beginning step by step\n\t\t- this includes getting Jest to work with TypeScript\n- **final code**\n\t- the first project we work on based on the Datapod framework is here:\n\t\t- https://github.com/edwardtanguay/et02-jest-site\n\t- the second project we build from the beginning step by step is here:\n\t\t- https://github.com/edwardtanguay/et03-jest-test\n- **==> STEP 1. Clone a site that has Jest testing implemented <==** \n\t- clone this mini-framework repository to a directory under your projects folder:\n\t\t- https://github.com/edwardtanguay/datapod-react-2023\n\t\t- e.g. `git clone git@github.com:edwardtanguay/datapod-react-2023.git et02-jest-site` \n\t\t- `code et02-jest-site`\n\t- in VSCode\n\t\t- go into terminal\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- set up Git repository\n\t\t- `rm -rf .git` - delete current repository\n\t\t- `git init -b main` - create new repository\n\t\t- do a \"initial commit\"\n\t- you'll see this site:##willseethis\n- **==> STEP 2. Analyze the code <==** \n\t- this site is a framework I'm working on\n\t\t- there is more here than Jest, see the README.md file\n\t- the src/qtools (quick tools) folder contains files that have general functions which can be used anywhere in the website\n\t- look at **src/qtools/qstr.ts**\n\t\t- it has three functions, each which performs a specific task\n\t- these functions are used on e.g. **PageWelcome.tsx**\n\t- generally for each code module containing helper functions, there is a corresponding test file\n\t\t- e.g. **src/qtools/qstr.test.ts**\n\t- to run these tests, look in the **package.json** file for the \"test\" script\n\t\t-------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js --watch\"\n\t\t},\n\t\t-------------------------------------\n\t- in the terminal, type `npm test`\n\t- this starts the Jest test watch which observes your files for testing\n\t- press `a` to run all tests now\n\t- change the functions to make the tests fail\n\t- improve the testing by creating more tests\n\t- note that there are many other testing functions other than **toBe**\n\t\t- see many of them here: https://onespace.pages.dev/techItems?id=19\n\t- make the tests fail and then do a `npm run build` \n\t\t- note that the application will not build when the tests do not pass\n\t- note the code `npm run build` executes in the **package.json** file: \n\t\t----------------------------------\n\t\t\"scripts\": {\n\t\t\t\"build\": \"npm run testforbuild && tsc && vite build\"\n\t\t\t\"testforbuild\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\",\n\t\t},\t\t\n\t\t----------------------------------\n\t- fix the tests and do a `npm run build`\n\t\t- the application will build\n\t- publish to a GitHub repository\n\t- deploy at Vercel, it will deploy fine:##thefinedeploy\n\t- now change the code so the tests fail\n\t\t- let's say we don't have our Jest test watching turned on and we push this change to our repository\n\t- note the **red x** here:##notetheredskj\n\t- click the **red x** and you will see that Vercel failed to push your code to its production server since the tests failed\n\t- click on **Details**\n\t- you can see in Vercel's logs exactly what the problem is, where the tests failed##thevercelshowstests\n\t- fix the problem locally, and push the change to your GitHub repository\n\t- where the **red x** was you will now see a **green checkmark**, if you click it, you will see that Vercel published your site##allcheckbapapss\n- **==> STEP 3. Create a React site with Vite and add Jest testing step by step <==** \n\t- you are of course welcome to use my Datapod framework as a base for your sites\n\t\t- this will enable you to start with a site that has TypeScript running on the backend and frontend with Jest tests implemented\n\t\t- you would then simply have to create new tests for the functions you add\n\t- but let's implement Jest step-by-step into a new site to learn all of the steps, including getting it to work with:\n\t\t- TypeScript\n\t\t- ES6 modules\n\t- **STEP 3.1: create a minimal React site with Vite that uses TypeScript**\n\t\t- go to your project folder\n\t\t- `npm create vite`\n\t\t- project name, e.g. `et03-jest-test`\n\t\t- React\n\t\t- TypeScript\n\t\t- `code et03-jest-test`\n\t\t- in VSCode open terminal\n\t\t- `git init -b main`\n\t\t- do initial commit\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- **App.tsx**\n\t\t\t--------------------------------\n\t\t\timport './App.css';\n\n\t\t\tconst message = 'this is a sentence';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<p>Message: {message}</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t--------------------------------\n\t\t- you should see this:##thesimplksdj\n\t- **STEP 3.2: install and setup Jest**\n\t\t- `npm i -D jest`\n\t\t- `npm i -D @types/jest`\n\t\t- add test script in **package.json**\n\t\t\t----------------------------------\n\t\t\t\"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js --watch\"\n\t\t\t----------------------------------\n\t\t- enable Jest to support TypeScript by installing Babel\n\t\t\t- `npm install --save-dev @babel/preset-typescript`\n\t\t\t- `npm i -D @babel/preset-env`\n\t\t- create **babel.config.json** in root directory\n\t\t\t------------------------------------\n\t\t\t{\n\t\t\t  \"presets\": [\n\t\t\t\t[\n\t\t\t\t  \"@babel/preset-env\",\n\t\t\t\t  {\n\t\t\t\t\t\"targets\": {\n\t\t\t\t\t  \"node\": \"current\"\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t\t],\n\t\t\t\t\"@babel/preset-typescript\"\n\t\t\t  ]\n\t\t\t}\t\t\t\n\t\t\t------------------------------------\n\t\t- change build script in **package.json**\n\t\t\t-------------------------------------\n\t\t\t\"build\": \"npm run testforbuild && tsc && vite build\",\n\t\t\t\"testforbuild\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\",\n\t\t\t-------------------------------------\t\t\t\n\t- **STEP 3.3: create tools module with a function called surround which returns a string surrounded by letters, e.g. \"()\"**\n\t\t- we will practice TDD (Test-Driven Development) by \n\t\t\t- writing tests first\n\t\t\t- then programming the function \n\t\t- **tools.test.ts**\n\t\t\t-------------------------------------------\n\t\t\timport { expect } from '@jest/globals';\n\t\t\timport { surround } from './tools';\n\n\t\t\ttest('test that surround() is correctly implemented', () => {\n\t\t\t\texpect(surround('test', '[]')).toBe('[test]');\n\t\t\t\texpect(surround('test', '()')).toBe('(test)');\n\t\t\t\texpect(surround('test', '**')).toBe('*test*');\n\t\t\t\texpect(surround('test', '***')).toBe('test'); // fail gracefully\n\t\t\t\texpect(surround('test', '')).toBe('test');\n\t\t\t\texpect(surround('', '[]')).toBe('[]');\n\t\t\t\texpect(surround('', '')).toBe('');\n\t\t\t});\n\t\t\t-------------------------------------------\n\t\t- create **tools.ts** with a stub function for surround that returns some string\n\t\t\t------------------------------\n\t\t\t/**\n\t\t\t * Surrounds a string with two letters\n\t\t\t *\n\t\t\t * tools.surrounds('primary', '[]');\n\t\t\t *\n\t\t\t * '[primary]'\n\t\t\t */\n\t\t\texport const surround = (text: string, twoLetters: string) => {\n\t\t\t\treturn 'nnn';\t\n\t\t\t}\n\t\t\t------------------------------\n\t\t- now run the tests with: `npm test`##thefirstwhow\n\t\t- press **a** to run all tests\n\t\t- it fails the first test:##stopsatfirst\n\t\t- program it enough to pass the first test, i.e. that when you send **('test', '[]')**, it returns **[test]**\n\t\t\t------------------------------------------------\n\t\t\texport const surround = (text: string, twoLetters: string) => {\n\t\t\t\tconst first = twoLetters[0];\n\t\t\t\tconst second = twoLetters[1];\n\t\t\t\treturn first + text + second;\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------------\n\t\t- run the tests again, note it passes the first **three** tests but fails on the **fourth**##thefourthskdj\n\t\t- program in functionality that passes that test as well:\n\t\t\t------------------------------\n\t\t\texport const surround = (text: string, twoLetters: string) => {\n\t\t\t\tif (twoLetters.length != 2) {\n\t\t\t\t\treturn text;\n\t\t\t\t} else {\n\t\t\t\t\tconst first = twoLetters[0];\n\t\t\t\t\tconst second = twoLetters[1];\n\t\t\t\t\treturn first + text + second;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t------------------------------\n\t\t- to rerun the tests at any time, press **a**\n\t- **STEP 3.4: now use the function in the site\n\t\t- **App.tsx**\n\t\t\t---------------------------------------\n\t\t\t<div className=\"App\">\n\t\t\t\t<p>Message: {tools.surround(message, '[]')}</p>\n\t\t\t\t<p>Message: {tools.surround(message, '()')}</p>\n\t\t\t\t<p>Message: {tools.surround(message, '{}')}</p>\n\t\t\t\t<p>Message: {tools.surround(message, '__')}</p>\n\t\t\t\t<p>Message: {tools.surround(message, '><')}</p>\n\t\t\t\t<p>Message: {tools.surround(message, 'ksjdfskdfj')}</p>\n\t\t\t</div>\t\t\t\n\t\t\t---------------------------------------\n\t\t- you will see this:##theresultsoftest\n- **==> STEP 4. Push your repository to GitHub and publish to Vercel <==** \n\t- to push your repository to GitHub, either \n\t\t- use the built-in Git features in VSCode\n\t\t- go to GitHub, create an empty repository, then push your code to it\n\t- to publish your repository to Vercel\n\t\t- go to https://vercel.com\n\t\t- Add\n\t\t- New Project\n\t\t- Continue with GitHub\n\t\t- Import\n\t\t- Deploy\n\t\t- your site will be published and look like this:##shouldlooksd\n- **==> STEP 5. Test CI/CD workflow <==** \n\t- now make a change to your surround function that makes the tests fail\n\t\t- **tools.ts**\n\t\t\t------------------------------------------\n\t\t\tif (twoLetters.length != 3) {\n\t\t\t------------------------------------------\n\t- push to GitHub\n\t- note on GitHub now you have a message that Vercel did not publish your changes because they failed your Jest tests##notthered\n\t- undo the change and push to GitHub again\n\t- you will see that it is processing##seeitproc\n\t- then it will publish because all tests have passed##thenpulisjs","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-28 00:09:31","systemWhoCreated":"systemUnknown"},{"id":652,"category":"Vitest","title":"Implement Vitest and React Testing Library in a TypeScript React site to unit test and component test","body":"- **background**\n\t- Vitest is very Jest-like\n\t- but it supports ES6 modules and TypeScript out of the box\n- **what we will make**\n\t- we will build a TypeScript React site with Vite\n\t- then we will add Vitest to it, write functions, tests for them\n\t- then we will push this to GitHub and Vercel to see how Vitest works with the Vitest tests\n- **final project**\n\t- repository is here: https://github.com/edwardtanguay/et07-vitest-site\n- **==> STEP 1. Create a minimal React site with Vite that uses TypeScript <==** \n\t- go to your project folder\n\t- `npm create vite`\n\t- project name, e.g. `et03-jest-test`\n\t- React\n\t- TypeScript\n\t- `code et03-jest-test`\n\t- in VSCode open terminal\n\t- `git init -b main`\n\t- do initial commit\n\t- `npm i`\n\t- `npm run dev`\n\t- **App.tsx**\n\t\t--------------------------------\n\t\timport './App.css';\n\n\t\tconst message = 'this is a sentence';\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<p>Message: {message}</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\t\n\t\t--------------------------------\n\t- you should see this:##thesimplksdj\n- **==> STEP 2. Install/setup Vitest and write tests and function <==**\n\t- we will practice TDD (Test-Driven Development) by\n\t\t- writing tests first\n\t\t- then programming the function\n\t- first install and setup vitest\n\t\t- `npm i -D vitest`\n\t\t- **package.json**\n\t\t\t-----------------------------------\n\t\t\t\"test\": \"vitest\"\n\t\t\t-----------------------------------\n\t- create the tools.ts file and the empty skelton of the surrounds() function\n\t\t- **src/tools.ts**\n\t\t\t----------------------------------\n\t\t\t/**\n\t\t\t* Surrounds a string with two letters\n\t\t\t*\n\t\t\t* tools.surrounds('primary', '[]');\n\t\t\t*\n\t\t\t* '[primary]'\n\t\t\t*/\n\t\t\texport const surround = (text: string, twoLetters: string) => {\n\t\t\t\treturn 'nnn';\n\t\t\t}\t\t\n\t\t\t----------------------------------\n\t- now before you write the logical content of the function, write the tests for it\n\t\t- **src/tools.test.ts**\n\t\t\t-----------------------------------\n\t\t\tdescribe('test that surround() is correctly implemented', () => {\n\t\t\t\tit(\"returns various brackets correctly\", () => {\n\t\t\t\t\texpect(surround('test', '[]')).toBe('[test]');\n\t\t\t\t\texpect(surround('test', '()')).toBe('(test)');\n\t\t\t\t\texpect(surround('test', '{}')).toBe('{test}');\n\t\t\t\t});\n\t\t\t\tit(\"returns similar characters correctly\", () => {\n\t\t\t\t\texpect(surround('test', '**')).toBe('*test*');\n\t\t\t\t\texpect(surround('test', '||')).toBe('|test|');\n\t\t\t\t});\n\t\t\t\tit(\"fails gracefully on wrong number of letters\", () => {\n\t\t\t\t\texpect(surround('test', '***')).toBe('test');\n\t\t\t\t\texpect(surround('test', '||sjkdfjskdfj')).toBe('test');\n\t\t\t\t\texpect(surround('test', 'x')).toBe('test');\n\t\t\t\t});\n\t\t\t\tit(\"fails gracefully on empty values\", () => {\n\t\t\t\t\texpect(surround('test', '')).toBe('test');\n\t\t\t\t\texpect(surround('', '')).toBe('');\n\t\t\t\t\texpect(surround('', '[]')).toBe('[]');\n\t\t\t\t});\n\t\t\t});\n\t\t\t-----------------------------------\n\t- run the tests\n\t\t- `npm test`\n\t\t- you see that it fails##thefail111\n\t- begin to program the function\n\t\t---------------------------------\n\t\tconst first = twoLetters[0];\n\t\tconst second = twoLetters[1];\n\t\treturn first + text + second;\t\t\n\t\t---------------------------------\n\t- see that some tests pass and some faile\n\t- finish programming the function\n\t\t-----------------------------------------\n\t\tif (twoLetters.length != 2) {\n\t\t\treturn text;\n\t\t} else {\n\t\t\tconst first = twoLetters[0];\n\t\t\tconst second = twoLetters[1];\n\t\t\treturn first + text + second;\n\t\t}\n\t\t-----------------------------------------\n\t- all tests will pass:##alltestsokpass\n- **==> STEP 3. Add vitest to build command <==**\n\t- put an error back in the code so that some tests fail\n\t- note that when you type `npm run build` it still builds successfully\n\t\t- we want to make the build command run the tests first so it does not run if the tests are no successful\n\t- in **package.json** change the build command\n\t\t------------------------------\n\t\t\"build\": \"vitest --run && tsc && vite build\",\t\t\n\t\t------------------------------\n\t- run it again, note that build does not work\n\t- fix the code\n\t- build works\n- **==> STEP 4: Now use the function in the site <==**\n\t- **App.tsx**\n\t\t---------------------------------------\n\t\timport * as tools from './tools';\n\n\t\t<div className=\"App\">\n\t\t\t<p>Message: {tools.surround(message, '[]')}</p>\n\t\t\t<p>Message: {tools.surround(message, '()')}</p>\n\t\t\t<p>Message: {tools.surround(message, '{}')}</p>\n\t\t\t<p>Message: {tools.surround(message, '__')}</p>\n\t\t\t<p>Message: {tools.surround(message, '><')}</p>\n\t\t\t<p>Message: {tools.surround(message, 'ksjdfskdfj')}</p>\n\t\t</div>\t\t\t\n\t\t---------------------------------------\n\t- you will see this:##theresultsoftest\t\n- **==> STEP 5. Publish at Vercel and test CI/CD workflow <==**\n\t- push changes to repository\n\t- publish at Vercel\n\t\t- it will publish fine##andtheallchecks\n\t- change code again so tests break\n\t- push changes to repository\n\t\t- it will fail##andnowbrokok\n\t- fix code, push, and it will pass again\n- **==> STEP 6. Get a report on test percent of code coverage <==**\n\t- add coverage report\n\t\t- **package.json**\n\t\t\t----------------------------\n\t\t\t\"test\": \"vitest --coverage\"\n\t\t\t----------------------------\n\t- press **y** to add a dependency for the coverage report##sayyestocov\n\t- run `npm test` and see that you have 100% test coverage at the moment##the100ok\n\t- add another function that is not tested and note how it tells you that exactly these lines are not tested##addanossidther\n\t- create HTML report for test coverage\n\t\t- **vite.config.ts**\n\t\t\t--------------------------------------\n\t\t\timport { defineConfig } from 'vitest/config'\n\t\t\timport react from '@vitejs/plugin-react'\n\n\t\t\t// https://vitejs.dev/config/\n\t\t\texport default defineConfig({\n\t\t\t\tplugins: [react()],\n\t\t\t\ttest: {\n\t\t\t\t\tcoverage: {\n\t\t\t\t\t\treporter: [\"html\"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t--------------------------------------\n\t- when you rerun `npm test`, and open **coverage/index.html** with **Live Server**, you will see this report:##thepoercover\n\t- be sure to update **.gitignore** so coverage doesn't get checked into your repository\n\t\t----------------------------------\n\t\tnode_modules\n\t\tdist\n\t\t.vscode\n\t\tcoverage\t\t\n\t\t----------------------------------\n- **==> STEP 7. Test components <==**\n\t- install everything you need for the React Testing Library\n\t\t- `npm i -D jsdom @testing-library/react @testing-library/jest-dom`\n\t- update **vite.config.ts**\n\t\t---------------------------------\n\t\timport { defineConfig } from 'vitest/config'\n\t\timport react from '@vitejs/plugin-react'\n\n\t\t// https://vitejs.dev/config/\n\t\texport default defineConfig({\n\t\t\tplugins: [react()],\n\t\t\ttest: {\n\t\t\t\tcoverage: {\n\t\t\t\t\treporter: [\"html\"]\n\t\t\t\t},\n\t\t\t\tglobals: true,\n\t\t\t\tenvironment: 'jsdom',\n\t\t\t\tsetupFiles: './tests/setup.js'\n\t\t\t}\n\t\t})\t\t\n\t\t---------------------------------\n\t- **tests/setup.js**\n\t\t--------------------------------------\n\t\timport { expect, afterEach } from 'vitest';\n\t\timport { cleanup } from '@testing-library/react';\n\t\timport matchers from '@testing-library/jest-dom/matchers';\n\n\t\t// extends Vitest's expect method with methods from react-testing-library\n\t\texpect.extend(matchers);\n\n\t\t// runs a cleanup after each test case (e.g. clearing jsdom)\n\t\tafterEach(() => {\n\t\t  cleanup();\n\t\t});\t\t\n\t\t--------------------------------------\n\t- add to **App.ts**\n\t\t-----------------------------------\n\t\t<h1>Welcome</h1>\t\t\n\t\t-----------------------------------\n\t- **App.test.ts**\n\t\t---------------------------------\n\t\timport * as React from 'react';\n\t\timport { render, screen } from '@testing-library/react';\n\t\timport { describe, expect, it } from 'vitest';\n\n\t\timport App from './App';\n\n\t\tdescribe('App', () => {\n\t\t\tit('renders App component', () => {\n\t\t\t\trender(<App />);\n\t\t\t\texpect(screen.getByText('Welcome')).toBeInTheDocument();\n\t\t\t})\n\t\t})\t\t\n\t\t---------------------------------\n\t- run the tests and see that it can determine if the text **Welcome** is contained in an element on the page\n\t- see how to do more useful tests, e.g. mock an API for a component and then determine if the items were fetched and displayed\n\t\t- https://www.robinwieruch.de/react-testing-library","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-28 21:52:47","systemWhoCreated":"systemUnknown"},{"id":653,"category":"Node","title":"Get a Node backend running with TypeScript and ES6 modules which serves a simple website with API data","body":"- **Background of Node**\n\t- before the invention of Node (**2009** by [Ryan Dahl](https://en.wikipedia.org/wiki/Ryan_Dahl)) one could only create JavaScript programs what ran in browsers\n\t- since Node, we could start using JavaScript to develop applications on the server as well\n\t- Node uses the **V8 engine** to interpret JavaScript which is the same engine that is used by the **Chrome browser**\n\t- this means that anything you can do with JavaScript in a standard browser such as Chrome or Firefox, you can do in Node\n\t\t- Firefox uses the Quantum engine which for all practical purposes interprets JavaScript code in the same way V8 does\n\t- note however in Node **JavaScript does not run in a browser environment** \n\t\t- this means that while you have access to the same JavaScript **native objects** e.g. `String`, `Math`, `RegExp`, `Object`, `Function`, you have access to a different set of **host objects** e.g. not `window` (the browser window) but `fs` (the file system)\n\t\t- **native objects** \n\t\t\t- objects in an ECMAScript implementation whose semantics are fully defined by this specification rather than by the host environment\n\t\t\t- EXAMPLES: `String`, `Math`, `RegExp`, `Object`, `Function`\n\t\t- **host objects**\n\t\t\t- objects provided by the browser environment which are distinct from native objects because not all environments will have the same host objects\n\t\t\t- EXAMPLES IN BROWSER: `window`, `XmlHttpRequest`, `History`\n\t\t\t- EXAMPLES IN NODE: , `fs`, `os`, `http`, `https`, `url`\n- **Finished site**\n\t- full code is here: https://github.com/edwardtanguay/et002-ssr-web-ts-es6\n\t- final site will look like this:##thenounscrrrr\n- **==> STEP 1. Install Node <==**\n\t- to use Node you first you have to [install Node](https://nodejs.org/en/download) which is an **easy 3-minute process** on any operating system\n\t\t- be sure to download the **newest LTS version** (Long Term Support), which is currently **18.12.1** (on 2022-11-30)\n\t\t- for some tools and frameworks, you may need to be running a slightly different version of Node, e.g. for Angular##theangulok\n\t\t- if that is the case, install [nvm](https://heynode.com/tutorial/install-nodejs-locally-nvm) (Node Version Manager) which allows you to download numerous versions of node (`nvm install 16.18.0`) and then switch back and forth between different versions (`nvm use 16.18.0` and `nvm use 18.12.1`)##listavail\n- **==> STEP 2. Create the simplest Node script <==**\n\t- create a directory for our website project e.g. `et002-ssr-web-ts-es6`\n\t- go into the directory `cd et002-ssr-web-ts-es6`\n\t- create the file **test.js**\n\t\t------------------------------------\n\t\tconsole.log('this is a test');\n\t\t------------------------------------\n\t- execute the file with Node\n\t\t---------------------------\n\t\tnode test.js\n\t\t---------------------------\n\t- output:##thenodetest\n\t- delete the `test.js` file we created above since we won't be needing it\n\t\t- `rm test.js`\t\n- **==> STEP 3. Create an npm project <==**\n\t- while you can write lone scripts as in the above example, most Node applications are **npm projects**, since this allows you to \n\t\t- more easily organize files into a larger project\n\t\t- import and manage dependences, e.g. **axios**, **lodash**, **express**\n\t\t- import and manage custom modules\n\t\t- React, Next.js, Gatsby, Angular, Vue sites are also none other than Node applications which use various dependencies\n\t- **npm** (node package manager) is automatically installed when you install Node\n\t- it enables you to organize your project and dependencies\n\t- now turn the directory into an npm proect\n\t\t- `code .` enter VSCode in your directory\n\t\t- enter your VSCode terminal\n\t\t- `npm init -y` \n\t\t\t- `y` means \"answer yes to all the questions\n\t\t\t- you can later change these values in the **package.json** file anyway\n\t\t- notice you have a **package.json** file which was created by your **init** command\t\n\t- after creating an npm project is always a good time to set up a local git repository\n\t\t- `git init -b main`\n- **==> STEP 4. Create the simplest web server that serves an HTML page <==**\n\t- **server.js**\n\t\t---------------------------------------------------\n\t\tconst http = require('http');\n\t\tconst port = 3005;\n\n\t\thttp.createServer((req, res) => {\n\t\t\tres.writeHead(200, { 'Content-Type': 'text-plain' });\n\t\t\tres.write('info site');\n\t\t\tres.end();\n\t\t}).listen(port);\n\n\t\tconsole.log(`listening on http://localhost:${port}`);\n\t\t---------------------------------------------------\n\t- notice that we are using CommonJS modules (`require`) instead of ES6 modules (`import`)\n\t\t- CommonJS is the older technology which you should avoid if possible\n\t\t- when working in projects, you more or less have to choose between one or the other\n\t\t\t- it is difficult to use both of them in one project\n\t\t- both CommonJS and ES6 modules \n\t\t\t- enable you to keep your code more organized and maintainable\n\t\t- ES6 modules \n\t\t\t- are newer so some newer libraries only support ES6 modules\n\t\t\t\t- browsers already fully support ES6 modules now\n\t\t\t- you have to choose between one or the other so its better to go with the newer version\n\t\t\t\t- perhaps in 2018 one wouldn't have argued this, but in 2022 it is valid\n\t\t\t- in my experience, Jest was the last major piece of software that supporter CommonJS\t\n\t\t\t\t- but I got it running with ES6 modules with --experimental flags\n\t\t\t\t- and I now use Vitest which is based on Jest but fully supports ES6 modules and TypeScript\n\t\t- while Node still supports CommonJS by default, even VSCode encourages you with the suggestive three-dot-underling that you should convert your CommonJS statements to ES6 modules##notethatrequire\n\t- therefore we will now **switch from CommonJS to ES6 modules**\n\t\t- change the first line to\n\t\t\t-------------------------------------------\n\t\t\timport { createServer } from 'http';\n\t\t\t-------------------------------------------\n\t\t- in the terminal, stop the server with **CTRL-C** and restart it with `node server.js`\n\t\t- when you restart the server, you will get the error message:##didntloadok\n\t\t- to correct this error, in the **package.json** file add the `\"type\": \"module\",` entry:##thepackagjosjson\n\t\t\t- this is analogous to in HTML when we add this entry in the script tag: `<script type=\"module\">`\n\t\t- the site works again:##siteworksokok\n- **==> STEP 5. Create and use a custom module <==**\n\t- now that we have ES6 modules working in our project, we will create a custom module and use it from our server.js\n\t- **content.js**\n\t\t---------------------------------------------\n\t\texport const mainContent = `\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<title>Info Site</title>\n\t\t\t<style>\n\t\t\t\tbody {\n\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t\tpadding: 0 1rem;\n\t\t\t\t}\n\t\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Info Site</h1>\t\n\t\t\t<p>Welcome to this site.</p>\n\t\t</body>\n\t\t</html>\n\t\t`;\n\t\t---------------------------------------------\n\t- **server.js**\n\t\t-------------------------------------------\n\t\timport { mainContent } from './content.js';\n\n\t\tres.write(mainContent);\n\t\t-------------------------------------------\n\t- restart the server, site should look like this:##infositewhiteok\n- **==> STEP 7. Set up automatic reloading of Node when any file changes <==**\n\t- note that the website does not reflect our changes until we stop and start the node script\n\t- therefore we will now install **nodemon** which will watch our files, and when it sees changes, it will restart node\n\t- `npm i -D nodemon`\n\t- note that nodemon got installed in **devDependencies** which means that it will not be used in production, only while developing\n\t\t---------------------------------------\n\t\t\"devDependencies\": {\n\t\t\t\"nodemon\": \"^2.0.20\"\n\t\t}\t\t\n\t\t---------------------------------------\n\t- now start the server with `nodemon server.js`\n\t- in **content.js** make some change, e.g. change the phrase to:\n\t\t---------------------------------------------\n\t\tWelcome to this info site.\n\t\t---------------------------------------------\n\t- as soon as you make the change, you will see nodemon restart Node:##withokjs\n\t- note that you have to still refresh the browser manually (unlike Live Server) but at least the server restarts now after every change\n\t- make it easier to start our server with an npm script\n\t\t- **package.json**\n\t\t\t-------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"start\": \"nodemon server.js\"\n\t\t\t},\t\t\n\t\t\t-------------------------\n\t- you can now start your server with `npm start`##nowwithstart\n- **==> STEP 8. Import and use an npm package <==**\n\t- we will now import an npm package and use it\n\t- the package we'll import and use is **lodash-es**, a library that makes it easier to work with arrays, numbers, objects, strings\n\t\t- it was largely supplanted by the ES6 features that JavaScript received in 2015 but is still useful for many unique and useful functions\n\t\t- since we are using ES6 modules, note that we have to import the **lodash-es** (ES6-import) library and not the **lodash** (CommonJS-require) library\n\t- in the terminal, type `npm i lodash-es`\n\t- import and use it in **content.js**\n\t\t-------------------------------------\n\t\timport {camelCase} from 'lodash-es';\n\n\t\tconst message = 'Welcome to this info site.';\n\t\tconst messageIdCode = camelCase(message);\t\t\n\n\t\t<body>\n\t\t\t<h1>Info Site</h1>\t\n\t\t\t<p>${message}</p>\n\t\t\t<p>idCode: ${messageIdCode}</p>\n\t\t</body>\t\t\n\t\t-------------------------------------\n\t- note that after installing our first npm package, we have over 1000 files to check in##thegitignore\n\t\t- this is because a npm package installs thousands of files in node_modules\n\t\t- therefore we need to create a **.gitignore** file so these files won't be checked into our repository\n\t\t\t------------------------------------\n\t\t\tnode_modules\n\t\t\t------------------------------------\n- **==> STEP 8. Convert your backend project form JavaScript to TypeScript <==**\n\t- working with ES6 and TypeScript are good skills to have as a modern JavaScript developer\n\t\t- installing ES6 and TypeScript on frontend and backend is possible and relatively easy now in 2022 once you have all the correct config files, etc. \n\t- install TypeScript\n\t\t- `npm i -D typescript`\n\t- also install all type declarations (if you don't install these, VSCode will suggest them to you later)\n\t\t- `npm i -D @types/node`\n\t\t- `npm i -D @types/lodash-es`\n\t- **package.json**\n\t\t------------------------------------------\n\t\t\"build\": \"tsc\"\n\t\t------------------------------------------\n\t- let's create a more traditionally structured app with a `src` directory\n\t\t- create `src` \n\t\t- move `server.js` into it and rename it `server.ts`\n\t\t- move `content.js` into it and rename it `content.ts`\n\t\t- note that in **server.ts** you still import a `.js` file, since the file that is called will be in dist and called `.js`\n\t\t\t--------------------------------------------------\n\t\t\timport { mainContent } from './content.js';\n\t\t\t--------------------------------------------------\n\t- **tsconfig.json**\n\t\t----------------------------------------------\n\t\t{\n\t\t\t\"compilerOptions\": {\n\t\t\t\t\"module\": \"NodeNext\",\n\t\t\t\t\"moduleResolution\": \"NodeNext\",\n\t\t\t\t\"target\": \"ES2020\",\n\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\"outDir\": \"dist\",\n\t\t\t},\n\t\t\t\"include\": [\"src/**/*\"]\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- this **nodemon.json** file will allow nodemon to not only start Node but first to compile your site\n\t\t----------------------------------------\n\t\t{\n\t\t  \"watch\": [\"\"],\n\t\t  \"ext\": \"ts\",\n\t\t  \"exec\": \"npm run build && node dist/server.js\" \n\t\t}\t\t\n\t\t----------------------------------------\n\t- **package.json**\n\t\t---------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"start\": \"npm run build && nodemon\",\n\t\t\t\"build\": \"tsc\"\n\t\t},\t\n\t\t---------------------------------------\t\n\t- load from API with TypeScript \n\t\t- `npm i axios`\n\t\t- **content.ts**\n\t\t\t--------------------------------------------\n\t\t\timport axios from 'axios';\t\t\t\n\n\t\t\ttype Noun = {\n\t\t\t\tarticle: string,\n\t\t\t\tsingular: string,\n\t\t\t\tplural: string\n\t\t\t}\n\n\t\t\tconst url = 'https://edwardtanguay.vercel.app/share/germanNouns.json';\n\t\t\tconst options = {\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: url,\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept-Encoding': 'application/json'\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst nouns = (await axios.request(options)).data;\t\t\t\n\n\t\t\t<h2>Nouns</h2>\n\t\t\t${nouns.map((noun) => {\n\t\t\treturn `<div class=\"noun\">\n\t\t\t\t\t<div class=\"singular\">${noun.article} ${noun.singular}</div>\t\n\t\t\t\t</div>`\n\t\t\t}).join('')}\t\t\t\n\t\t\t--------------------------------------------\n\t\t- note that axios has bug which requires you to send the headers here in the backend for some reason\n\t- your site should look like this:##thenounscrrrr","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-30 11:49:36","systemWhoCreated":"systemUnknown"},{"id":654,"category":"React Router","title":"How to make a hidden page that reads in id with useParams","body":"- **background**\n\t- this shows you how to make a simple page that is not in the navbar but which accepts an idea after its URL name e.g. (`product/23` or `product/234`) and has this `id` variable available on the page\n\t- it doesn't load another component in Outlet, it just makes the `id` available on the page to use\n\t- note particularly that you have to send a `null` as element from the `:id` Route:\n\t\t----------------------------------------------\n\t\t<Route path=\"/product\" element={<PageProduct products={products} />}>\n\t\t\t<Route path=\":id\" element={null} />\n\t\t</Route>\n\t\t---------------------------------------------\n- **final version**\n\t- the full code is here: https://github.com/edwardtanguay/et008-router\n- the site functions like this:#gif#reactrouteridsolution\n- **App.tsx**\n\t----------------------------------\n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t<nav>\n\t\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\t\t\t\t\t<NavLink to=\"/info\">Info</NavLink>\n\t\t\t\t\t<NavLink to=\"/about\">About</NavLink>\n\t\t\t\t</nav>\n\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t\t<Route path=\"/info\" element={<PageInfo />} />\n\t\t\t\t\t<Route path=\"/product\" element={<PageProduct products={products} />}>\n\t\t\t\t\t\t<Route path=\":id\" element={null} />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/about\" element={<PageAbout />} />\n\t\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />} />\n\t\t\t\t</Routes>\n\t\t\t</div>\n\t\t);\n\t}\t\n\t----------------------------------\n- **PageInfo.tsx**\n\t------------------------------------\n\timport { NavLink } from 'react-router-dom';\n\n\texport const PageInfo = () => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p>This is the info page.</p>\n\t\t\t\t<p>Go to <NavLink to=\"/product/1\">Product 1</NavLink></p>\n\t\t\t\t<p>Go to <NavLink to=\"/product/2\">Product 2</NavLink></p>\n\t\t\t</>\n\t\t);\n\t};\t\n\t------------------------------------\n- **PageProduct.tsx**\n\t-------------------------------------------------\n\timport { useParams } from 'react-router-dom';\n\n\texport const PageProduct = (props: any) => {\n\t\tconst { products } = props;\n\t\tconst { id } = useParams();\n\t\tconst product = products.find((m: any) => String(m.id) === String(id));\n\t\tconsole.log(products);\n\t\tconsole.log(product);\n\n\t\treturn (\n\t\t\t<div className=\"page pageProduct\">\n\t\t\t\t{product ? <p>Showing product \"{product.title}\"</p> : <p>You need to send a product id.</p>}\n\t\t\t</div>\n\t\t);\n\t};\n\t-------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-30 15:12:07","systemWhoCreated":"systemUnknown"},{"id":655,"category":"React","title":"How to use useId() to get application-wide unique element ids","body":"- in order to guarantee that element ids are unique regardless what component they are in, use the `useId()` hook:##theuseidhook","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-11-30 16:59:42","systemWhoCreated":"systemUnknown"},{"id":656,"category":"JS/DOM","title":"Create JS/DOM Vite site with TypeScript, ES6 modules and onclick function handlers which call API and update the DOM","body":"- **background**\n\t- when you create a JS/DOM site with Vite, your HTML is no longer in HTML files but rather **output as template strings**\n\t- this makes it impossible to simply include an onclick attribute in HTML elements and then handle these events in a function in your JavaScript modules\n\t- there is a hack workaround for this ([see the code here](https://github.com/edwardtanguay/et005-vite-jsdom-jsonserver/tree/onclick-works-with-handler-function-in-indexhtml)) where you can put your event-handling functions in the **index.html** file but the problem with this is:\n\t\t- 1. you no longer have your event handlers connected to the code in which they the events are fired\n\t\t- 2. if you use TypeScript, then you no longer have TypeScript protectiong in **index.html** file which is merely a shell to start your actual application where your event handlers logically should reside\n\t- while this code is a good start for e.g. developing a TS/DOM framework, it also shows the limitations of JS/DOM and can be used to demonstrate what React/JSX solves regarding the ease of creating event-handling functions inside components\n\t\t- note that the directory structure is based on that of React sites\n\t- the backend for this site is **json-server**\n- **code**\n\t- finished code it here: \n\t\t- https://github.com/edwardtanguay/et005-vite-jsdom-jsonserver\n\t- finished site works like this:#gif#jsdomviteonclick\n- **src/main.ts**\n\t----------------------------------------\n\timport './style.scss';\n\timport axios from 'axios';\n\timport { setupDeleteButtons } from './components/deleteButton.js';\n\timport { Flashcard } from './types.js';\n\n\tconst url = 'http://localhost:5577/flashcards';\n\n\tconst response = await axios.get(url);\n\tconst flashcards = response.data;\n\n\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t<h1>Flashcards</h1>\n\t<div class=\"siteMessage\"></div>\n\t<div class=\"flashcards\">\n\n\t${flashcards.map((flashcard: Flashcard) => {\n\t\treturn `\n\t\t<div class=\"flashcard\" data-id=\"${flashcard.id}\">\n\t\t\t<div class=\"category\">${flashcard.category}</div>\t\n\t\t\t<div class=\"front\">${flashcard.front}</div>\t\n\t\t\t<div class=\"back\">${flashcard.back}</div>\t\n\t\t\t<div class=\"buttonRow\">\n\t\t\t\t<div><button type=\"button\" class=\"deleteButton\" data-id=\"${flashcard.id}\">Delete</button></div>\n\t\t\t</div>\n\t\t</div>`;\n\t}).join('')}\n\n\t</div>\n\t`;\n\n\tsetupDeleteButtons(Array.from(document.querySelectorAll('.deleteButton')), document.querySelector('.siteMessage'), Array.from(document.querySelectorAll('.flashcard')), url);\t\n\t----------------------------------------\n- **src/types.ts**\n\t---------------------------------------\n\texport type Flashcard = {\n\t\tid: number,\n\t\tcategory: string,\n\t\tfront: string,\n\t\tback: string;\n\t}\t\n\t---------------------------------------\n- **src/components/deleteButton.ts**\n\t---------------------------------------------\n\timport axios from 'axios';\n\n\texport const setupDeleteButtons = (buttonElems: HTMLButtonElement[], siteMessageElem: HTMLDivElement | null, flashcardElems: HTMLDivElement[], url: string) => {\n\t\tbuttonElems.forEach(buttonElem => {\n\t\t\tbuttonElem.addEventListener('click', () => {\n\t\t\t\tconst id = Number(buttonElem.dataset.id);\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst res = await axios.delete(url + '/' + String(id));\n\t\t\t\t\t\tif (res.status = 200) {\n\t\t\t\t\t\t\t// flashcard has been deleted in backend, therefore delete it on the frontend\n\t\t\t\t\t\t\tflashcardElems.forEach(flashcardElem => {\n\t\t\t\t\t\t\t\tconst flashcardId = Number(flashcardElem.dataset.id);\n\t\t\t\t\t\t\t\tif (flashcardId === id) {\n\t\t\t\t\t\t\t\t\tflashcardElem.style.display = 'none';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (siteMessageElem !== null) {\n\t\t\t\t\t\t\t\tsiteMessageElem.innerText = res.statusText;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e: any) {\n\t\t\t\t\t\tconsole.log(siteMessageElem)\n\t\t\t\t\t\tif (siteMessageElem !== null) {\n\t\t\t\t\t\t\tsiteMessageElem.innerText = e.message;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})();\n\n\t\t\t});\n\t\t});\n\t} \n\t---------------------------------------------\n- **package.json scripts** which start backend and frontend with `npm start`\n\t---------------------------------\n\t\"scripts\": {\n\t\t\"frontend\": \"vite\",\n\t\t\"api\": \"json-server --watch ./src/data/db.json --port 5577\",\n\t\t\"start\": \"run-p frontend api\",\n\t\t\"build\": \"tsc && vite build\",\n\t\t\"preview\": \"vite preview\"\n\t},\t\n\t---------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-04 01:56:50","systemWhoCreated":"systemUnknown"},{"id":657,"category":"Node/Express","title":"Create a Vite-TypeScript-frontend / Node-Express-backend website to track job application process","body":"- **what we will build**\n\t- a frontend/backend website that will allow you to record jobs you are interested and track your process applying for them\n\t- there will be a **frontend** and a **backend** to the website\n\t- **frontend** will have three pages\n\t\t- **dashboard** page will list the todos\n\t\t\t- todos are properties of jobs and are in this format: \n\t\t- **jobs** page that lists jobs with these properties\n\t\t\t- id\n\t\t\t- title\n\t\t\t- company\n\t\t\t- url\n\t\t\t- description\n\t\t\t- skills, e.g. `angular, typescript, tailwind`\n\t\t\t- todo, e.g. `2022-12-05 10:00 interview`\n\t\t- **skills**\n\t\t\t- show extended information on skill\n\t- **backend** will server JSON data as an REST API\n\t\t- in this version we will simply read files from a JSON file with `fs`\n\t\t- in the next Howto based on this one, we will then read and write data via lowdb\n\t- finished site\n\t\t- the final code it here: \n\t\t\t- https://github.com/edwardtanguay/getajob001-backend\n\t\t\t- https://github.com/edwardtanguay/getajob001-frontend\n\t\t- another slightly different version is here: \n\t\t\t- https://github.com/edwardtanguay/getajob002-backend\n\t\t\t- https://github.com/edwardtanguay/getajob002-frontend\n\t\t- the site will look like this:##frontendbackenddata\n- **==> STEP 1. Create directory structure for frontend/backend site <==**\n\t- since we will have a frontend and backend to this site, let's set them up as two directories in a parent directory\n\t- our project will be called **getajob001**\n\t\t- you can call yours whatever you want, preferably a name without hyphens\n\t- under you projects folder, create the following structure\n\t\t- `getajob001`\n\t\t\t- `getajob001-backend`\n\t\t\t- `getajob001-frontend`\n\t\t- later when such a frontend/backend site is online on a backend and frontend server, their URLs will be e.g.\n\t\t\t- https://getajob001-backend.cyclic.app\n\t\t\t- https://getajob001.vercel.app\n- **==> STEP 2. Create basic React site with menu <==**\n\t- we will first build a frontend React site that shows our three pages in a React Router menu\n\t- let's download and install a React template site with TypeScript, Sass, React Router menu installed\n\t\t- go to https://github.com/edwardtanguay/blank-vite-dark-menu\n\t\t- click the Code button, download the code and copy it into a directory, e.g. `getajob001/getajob001-frontend`\n\t\t- go into that directory and start VSCode with `code .`\n\t\t- in VSCode, install the packages with `npm i`\n\t\t- start the site with `npm run dev`\n\t\t- and click on the http link in the terminal to see the view the site in the browser\n\t- create local Git directory\n\t\t- `git init -b main`\n\t\t- commit as \"initial commit\"\n\t- change the names of the pages and their corresponding files\n\t\t- Welcome --> **Dashboard**\n\t\t- Info --> **Jobs**\n\t\t- About --> **Skills**\n\t\t- note you can use the CLI command \n\t\t\t- `npm run cp Dashboard`\n\t\t\t- `npm run cp Jobs`\n\t\t\t- `npm run cp Skills`\n\t- change the title of the site to \"Get a Job\" in\n\t\t- index.html\n\t\t- App.tsx\n\t- **step is finished:**\n\t\t- site should look like this:##thegetajobs\n- **==> STEP 2. Create the Jobs page by reading a JSON file <==**\n\t- we will first read the jobs data from a JSON file from the frontend as one does when one only has a frontend \n\t- we will then display it on the page\n\t- after that we will create a backend API\n\t\t- transfer this JSON file to the backend \n\t\t- and make it available via a route and port to the frontend to e.g. fetch via axios\n\t- first create the JSON file\n\t\t- **src/data/jobs.json**\n\t\t\t-------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"title\": \"Frontend Developer\",\n\t\t\t\t\t\"company\": \"PwC Deutschland\",\n\t\t\t\t\t\"url\": \"https://www.get-in-it.de/jobsuche/p172318?filter[thematic_priority]=5&filter[city][radius]=25&filter[city][city][0][lon]=13.41053&filter[city][city][0][lat]=52.52437&start=0&limit=39&ref=Jobsuche\",\n\t\t\t\t\t\"description\": \"Frontend-Entwicklung - Unser Produkt ist zentraler Bestandteil der Digitalisierungsstrategie von PwC Deutschland. Unsere Lösungen sollen komplexe Probleme einfach machen, dafür brauchen wir intuitive und moderne Frontends - und die baust du! Du bist zentrale:r Ansprechpartner:in für die Frontend Entwicklung eines wichtigen internationalen Prüfungstools in einem agilen Team der Digital Factory. Du konzipierst Responsive Web-Apps mit JavaScript /TypeScript und Angular und entwickelst diese weiter. Du kannst schnell UI-Prototypen aufsetzen, aber auch robuste, skalierbare Frontends im Angular Framework für unser Tool implementieren.\\n\\nFachliche Expertise - Du hast bereits Erfahrung in der Entwicklung von Web Applikationen mit HTML, CSS und JavaScript/TypeScript. Moderne UI Frameworks (Angular) hast du bereits erfolgreich eingesetzt, idealerweise hast du auch schon Erfahrung mit WebSocket.\\n\\nAgile Mindset - Du lebst und liebst Frontend-Technologien und entwickelst so kontinuierlich Produkt, Prozesse und Zusammenarbeit weiter.\\n\\nTeamwork - Unsere Teams sind cross-funktional. Du arbeitest Hand in Hand mit anderen Entwickler:innen, Automation Engineers und UX Kolleg:innen an der gemeinsamen Produktvision.\\n\\nArbeite wie es zu deinem Leben passt: mit FlexWork. Keine fixen Home-Office-Tage, sondern deine Chance Arbeitszeit und -ort variabel zu gestalten.\\nDein Profil\\n\\nDu verfügst über ein abgeschlossenes Studium im Bereich Informatik oder eine vergleichbare Ausbildung und bringst Berufserfahrung im IT Umfeld, insbesondere im Frontend-Bereich, mit.\\n\\nDu hast ein grundlegendes Verständnis von Build-Prozessen, CI/ CD, Testing. Die Testautomatisierung im Frontend-Bereich ist für dich kein Neuland.\\n\\nDu hast idealerweise auch Erfahrungen im User Tracking mit Hotjar oder Piwik.\\n\\nDu suchst ein agiles Umfeld, in dem du deine Stärken ausspielen kannst.\\n\\nSehr gute Deutsch- und Englischkenntnisse helfen dir dabei, deine Ideen auch im internationalen Kontext oder mit internationalen Teamkolleg:innen zu teilen.\",\n\t\t\t\t\t\"skills\": \"angular, cicd, testing, hotjar, piwik\",\n\t\t\t\t\t\"todo\": \"2022-12-07 send application\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"title\": \"Frontend-Entwickler\",\n\t\t\t\t\t\"company\": \"networker, solutions\",\n\t\t\t\t\t\"url\": \"https://www.get-in-it.de/jobsuche/p197373?filter[thematic_priority]=5&filter[city][radius]=25&filter[city][city][0][lon]=13.41053&filter[city][city][0][lat]=52.52437&start=0&limit=39&ref=Jobsuche\",\n\t\t\t\t\t\"description\": \"Deine Aufgaben bei uns\\n\\n    Entwicklung von Frontend und UI-Komponenten\\n    Betreuung und Weiterentwicklung bestehender Systeme\\n    Zusammenarbeit mit anderen Dienstleistern an gemeinsamen Kundenprojekten\\n    Umsetzung eigener Webentwicklung gemeinsam mit den Teams\\n\\nDeine Kompetenzen\\n\\n    JavaScript, Type Script\\n    HTML + CSS\\n    React\\n    Jest Testing\\n    RESTful APIs + Swagger\\n    Git, Gitlab\\n    Webstorm\\n    NestJs\\n    UX-Design\",\n\t\t\t\t\t\"skills\": \"typescript, react, jest, rest, swagger, git, gitlab, webstorm, nestjs, ux\",\n\t\t\t\t\t\"todo\": \"2022-12-08 send application\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\"title\": \"Web Frontend Entwickler\",\n\t\t\t\t\t\"company\": \"EPI development\",\n\t\t\t\t\t\"url\": \"https://www.get-in-it.de/jobsuche/p132078?filter[thematic_priority]=5&filter[city][radius]=25&filter[city][city][0][lon]=13.41053&filter[city][city][0][lat]=52.52437&start=0&limit=39&ref=Jobsuche\",\n\t\t\t\t\t\"description\": \"Die Herausforderung\\n\\n    Erstellung einer Bedarfsanalyse für neue Funktionen mit einer selbsterklärenden UI Gestaltung\\n    Entwickeln von Funktionen und Algorithmen die nachhaltig lesbar sind\\n    Der Fokus liegt in der Vereinfachung komplexer Vorgänge\\n\\nDeine Aufgaben\\n\\n    Weiterentwicklung von epirent aufgrund von aktuellen Anforderungen\\n    Im Team Lösungen für neue Funktionen erarbeiten\\n    Erstellen von gut bedienbaren und ausgeklügelten UI, denke wie ein Anwender\\n    Kommunikation im Team, einbringen eigener Ideen\\n    Offener Umgang mit neuen Technologien\\n    Kreativität ist gefragt\\n\\nDeine Fähigkeiten\\n\\n    Weitreichende Erfahrungen in der Anwendungsprogrammierung\\n    Klare und selbsterklärende UI Designs erstellen\\n    Komplizierte technische Zusammenhänge auf einfache Funktionen herunterbrechen\\n    Kommunikativ im Team, zielorientiert und selbständig in der Arbeitsorganisation\\n    Deine Sprachkenntnisse (optimal): JavaScript, CSS, HTML, Bootstrap, AngularJS, API Entwicklung (REST), Responsive Design / Progressive Apps\\n    Kein Hochschulabschluss notwendig, Können zählt!\",\n\t\t\t\t\t\"skills\": \"angular, bootstrap, rest, responsive, pwa\",\n\t\t\t\t\t\"todo\": \"2022-12-09 send application\"\n\t\t\t\t}\n\t\t\t]\t\t\n\t\t\t-------------------------------\n\t\t- **PageJobs.tsx**\n\t\t\t------------------------------------------------\n\t\t\timport _jobs from '../data/jobs.json';\n\n\t\t\ttype Job = {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\tdescription: string;\n\t\t\t\turl: string;\n\t\t\t\tskills: string;\n\t\t\t\ttodo: string;\n\t\t\t};\n\n\t\t\tconst jobs: Job[] = _jobs as any[];\n\n\t\t\texport const PageJobs = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"pageJobs\">\n\t\t\t\t\t\t<div className=\"jobs\">\n\t\t\t\t\t\t\t<h2>There are {jobs.length} jobs:</h2>\n\t\t\t\t\t\t\t{jobs.map((job: Job) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"job\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t\t\t\t<a href={job.url} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t\t\t\t{job.title}\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"company\">{job.company}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"description\">{job.description}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"skills\">{job.skills}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"todo\">{job.todo}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------------------------\n\t\t- **App.scss**\n\t\t\t--------------------------------------\n\t\t\t.pageJobs {\n\t\t\t\t.jobs {\n\t\t\t\t\t.job {\n\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\tmargin-bottom: 1rem;\n\n\t\t\t\t\t\tdiv {\n\t\t\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\ta {\n\t\t\t\t\t\t\t\tcolor: rgb(176, 146, 91);\n\t\t\t\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.company {\n\t\t\t\t\t\t\tcolor: rgb(208, 208, 114);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.description {\n\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\tcolor: #999;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.skills {\n\t\t\t\t\t\t\tcolor: green;\n\t\t\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.todo {\n\t\t\t\t\t\t\tcolor: rgb(232, 133, 116);\n\t\t\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t- you will now see the jobs being displayed on the page:##thejobsoknapage\t\n- **==> STEP 3. Create a backend and send the job data via API to fetch from front end <==**\n\t- we now want to serve our data from the backend instead for the following advantages\n\t\t- 1. our data can be managed on a different server to increase speed and specialization\n\t\t- 2. we have access to the operating system to fetch and prepare other kinds of data\n\t\t- 3. by distributing our application in this way\n\t\t\t- our backend's data can be used by other frontends, e.g. a mobile app\n\t\t\t- our frontend can use other backends, e.g. other data sources\n\t\t- 4. we can more easily prepare, sanitize and validate our data in one place \n\t\t\t- similar to the benefit we get from useContext\n\t- let's use the mini-backend-framework we created which has TypeScript, ES6 all set up for us\n\t\t- go to https://github.com/edwardtanguay/et002-ssr-web-ts-es6\n\t\t- download the code\n\t\t- copy to **getajob001/getajob001-backend**\n\t\t- `code .`\n\t\t- `npm i`\n\t\t- `npm start`\n\t- frontend and backend will be running at the same time now on different ports##frontbackrun\n\t- now that you are developing in two VSCode editors, one frontend and one backend, I recommend that you use the Peacock Extension to give each one a different color so that you can easily distinguish backend from frontend while developing, e.g.\n\t\t- **b**ackend is **b**lue\n\t\t- **f**rontend is **f**uchsia##thefrandbackfruch\n\t- in the next step we will install the much-used **Express** library (the \"E\" in MERN) since it will give us more features\n\t- but let's try to continue to use our simple Node-internal **createServer** as long as we can\n\t- **serve the data from the backend**\n\t\t- copy the json file from the front end to the backend `src/data/jobs.json`\n\t\t- frontend will no longer work in the moment since it has no data\n\t\t- **server.ts**\n\t\t\t--------------------------------------\n\t\t\tconst jobs = fs.readFileSync('./src/data/jobs.json', 'utf8');\n\n\t\t\tres.write(jobs);\n\t\t\t--------------------------------------\n\t\t- now instead of a website, we get JSON data:##thessjsonsda\n\t- read the data from the frontend\n\t\t- `npm i axios`\n\t\t- **PageJobs.tsx**\n\t\t\t-------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\n\t\t\tconst url = 'http://localhost:3009';\n\n\t\t\tconst [jobs, setJobs] = useState<Job[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetJobs((await axios.get(url)).data);\n\t\t\t\t})();\n\t\t\t}, []);\n\t\t\t-------------------------------------------\n\t\t- check site in browser, we already get our first error:##yougetthefirssfeh\n\t\t\t- this is a **classic CORS error**, and it won't be our last \n\t\t\t- the backend has to allow frontends to access the data\n\t\t\t\t- it does this with CORS policy\n\t\t\t\t- but this only applies to browsers which implement the CORS policy (all current browsers)\n\t\t\t\t- this helps keep browsers safe from cross-site scripting attacks\n\t\t\t- but note that we have access to the backend no problem with non-browser tools:\t\t\t\n\t\t\t\t- check to see if it works in **Postman**, yes:##thepostworksj\n\t\t\t\t- check to see if it works in **VSCode REST Client**\n\t\t\t\t\t----------------------------------\n\t\t\t\t\t@url = http://localhost:3009\n\n\t\t\t\t\t### base route\n\t\t\t\t\t{{url}}\n\t\t\t\t\t----------------------------------\n\t\t\t\t\t- the backend also works in REST Client:##theresttestworks\n\t\t- we could probably solve this cors error with Node's simple **createServer** somehow, but:\n\t\t\t- **Express** has a middleware feature that solves this problem very easily\n\t\t\t- **Express** also has many other features for building APIs, one we will use in this project: multiple routes\n\t\t\t\t- note that with createServer we can only serve jobs from the main URL\n\t\t\t\t- **Express** will enable us to serve data from as many routes as we want\n\t\t\t- therefore we will now switch our backend from the simple createServer to the very useful and popular **Express** library\n\t\t\t- note that with **Express** we now have three letters in the MERN stack\n\t\t\t\t- MongoDB\n\t\t\t\t- **E**xpress\n\t\t\t\t- **R**eact\n\t\t\t\t- **N**ode\n- **==> STEP 4. Convert backend from createServer to Express <==**\n\t- in backend set up Express\n\t- `npm i express`\n\t- **server.ts**\n\t\t--------------------------------------------\n\t\timport express from 'express';\n\t\timport fs from 'fs';\n\n\t\tconst app = express();\n\t\tconst PORT = 3009;\n\n\t\tconst jobs = JSON.parse(fs.readFileSync('./src/data/jobs.json', 'utf8'));\n\n\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\tres.send('job site api');\n\t\t});\n\n\t\tapp.get('/jobs', (req: express.Request, res: express.Response) => {\n\t\t\tres.json(jobs);\n\t\t});\n\n\t\tapp.listen(PORT, () => {\n\t\t\tconsole.log(`listening on port http://localhost:${PORT}`);\n\t\t});\n\t\t--------------------------------------------\n\t- test in Postman:\n\t\t- http://localhost:3009\n\t\t- http://localhost:3009/jobs\n\t- test in REST Client:\n\t\t- http://localhost:3009\n\t\t- http://localhost:3009/jobs\n\t- on the frontend, **PageJobs.tsx**\n\t\t--------------------------------------\n\t\tconst url = 'http://localhost:3009/jobs';\n\t\t--------------------------------------\n\t- we get the same CORS error\n\t\t- now install CORS as middleware in Express\n\t\t- on backend\n\t\t- `npm i cors`\n\t\t- **server.ts**\n\t\t\t-----------------------------------\n\t\t\timport express from 'express';\n\t\t\timport fs from 'fs';\n\t\t\timport cors from 'cors';\n\n\t\t\tconst app = express();\n\t\t\tapp.use(cors());\n\t\t\tconst PORT = 3009;\t\t\t\n\t\t\t-----------------------------------\n\t- this solves the CORS error and we data on the frontend from the backend##frontendbackenddata","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-06 01:06:58","systemWhoCreated":"systemUnknown"},{"id":658,"category":"Node/Express","title":"Create a job-application React site frontend that uses a Node/Express backend with an MVC pattern","body":"- **what we will build**\n\t- the goal of this howto is to get a frontend job-application site running with useContext that consumes a backend that has an MVC pattern delivering data on three routes\n\t- final project\n\t\t- final code is here:\n\t\t\t- https://github.com/edwardtanguay/getajob003-frontend\n\t\t\t- https://github.com/edwardtanguay/getajob003-backend\n\t\t- final site works like this: #gif#full003demo\n- **==> STEP 1. set up site from site from previous project <==**\n\t- we will start with the code at the end of with this project: \n\t\t[Create JS/DOM Vite site with TypeScript, ES6 modules and onclick function handlers which call API and update the DOM](https://edwardtanguay.vercel.app/howtos?id=656)\n\t- if you want, you can complete that project and skip to STEP 2, otherwise follow the following steps\n\t- under your projects directory, create the following directories (choose your own name for \"getajob003\" if you like)\n\t\t- getajob003\n\t\t\t- getajob003-backend\n\t\t\t- getajob003-frontend\n\t- download and copy the following code into the backend directory:\n\t\t- https://github.com/edwardtanguay/getajob002-backend\n\t- download and copy the following code into the frontend directory:\n\t\t- https://github.com/edwardtanguay/getajob002-frontend\n\t- open VSCode in backend directory, then install, start backend and setup Git\n\t- open VSCode in frontend directory, then install, start frontend and setup Git\n\t- in VSCode, your backend and frontend will look like this:##the2appsvs\n\t- in the browser, your backend and frontend will look like this:##thebackfronon\n- **==> STEP 2. Create two new backend routes /todos and /totaledSkills, fetch and display from frontend <==**\n\t- the dashboard page should display todos\n\t- the skills page should display skills\n\t- first we will create two new backend routes which provide this information\n\t- build /todos into **server.ts**\n\t\t-----------------------------------------------\n\t\ttype Job = {\n\t\t\tid: number;\n\t\t\ttitle: string;\n\t\t\tcompany: string;\n\t\t\turl: string;\n\t\t\tdescription: string;\n\t\t\tskillList: string;\n\t\t\ttodo: string;\n\t\t}\n\n\t\tapp.get('/todos', (req: express.Request, res: express.Response) => {\n\t\t\tres.json(jobs.map((job: Job) => {\n\t\t\t\treturn {\n\t\t\t\t\ttodo: job.todo,\n\t\t\t\t\tcompany: job.company,\n\t\t\t\t\ttitle: job.title\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\t\t-----------------------------------------------\n\t\t- route /todos will now show this:##theroutetodoso\n\t- refactor code into an **MVC pattern**\n\t\t- most APIs have an [MVC pattern](https://onespace.pages.dev/techItems?id=39) \n\t\t\t- in our case, the **server.ts** file would be the **controller** \n\t\t\t- it receives the requests and gets the needed data from the **model**\n\t\t\t- and sends this data back to the **view** which is the frontend\n\t\t- **server.ts**\n\t\t\t--------------------------------------\n\t\t\timport express from 'express';\n\t\t\timport cors from 'cors';\n\t\t\timport * as model from './model.js';\n\n\t\t\tconst app = express();\n\t\t\tapp.use(cors());\n\t\t\tconst port = 3011;\n\n\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.send(model.getApiInstructionsHtml());\n\t\t\t});\n\n\t\t\tapp.get('/jobs', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getJobs());\n\t\t\t});\n\n\t\t\tapp.get('/todos', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getTodos());\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`listening on http://localhost:${port}`);\n\t\t\t});\n\t\t\t--------------------------------------\n\t\t- **jobModel.ts**\n\t\t\t---------------------------------------\n\t\t\timport fs from 'fs';\n\n\t\t\ttype Job = {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t\tskillList: string;\n\t\t\t\ttodo: string;\n\t\t\t}\n\n\t\t\tconst jobs: Job[] = JSON.parse(fs.readFileSync('./src/data/jobs.json', 'utf8'));\n\n\t\t\texport const getApiInstructionsHtml = () => {\n\t\t\t\treturn `\n\t\t\t<style>\n\t\t\ta, h1 {\n\t\t\t\tbackground-color: #ddd;\n\t\t\t\tfont-family: courier;\n\t\t\t}\n\t\t\t</style>\n\t\t\t<h1>GETAJOB API</h1>\t\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"jobs\">/jobs</a> - array of job listings will all fields</li>\n\t\t\t\t<li><a href=\"todos\">/todos</a> - array of todos with todo/company/title fields</li>\n\t\t\t</ul>\n\t\t\t\t`;\n\t\t\t}\n\n\t\t\texport const getJobs = () => {\n\t\t\t\treturn jobs;\n\t\t\t}\n\n\t\t\texport const getTodos = () => {\n\t\t\t\treturn jobs.map((job: Job) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttodo: job.todo,\n\t\t\t\t\t\tcompany: job.company,\n\t\t\t\t\t\ttitle: job.title\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- your API should now look like this:##thegetajoboapi\n\t- add /totaledSkills route\n\t\t- **skillInfos.json**\n\t\t\t--------------------------------------------\n\t\t\t{\n\t\t\t\t\"angular\": {\n\t\t\t\t\t\"name\": \"Angular\",\n\t\t\t\t\t\"url\": \"https://onespace.pages.dev/techItems?id=36\",\n\t\t\t\t\t\"description\": \"together with React and Vue.js one of the three most popular JavaScript frameworks\"\n\t\t\t\t},\n\t\t\t\t\"cicd\": {\n\t\t\t\t\t\"name\": \"CI/CD\",\n\t\t\t\t\t\"url\": \"https://about.gitlab.com/topics/ci-cd\",\n\t\t\t\t\t\"description\": \"the combined practices of continuous integration (CI) and continuous deployment (CD)\"\n\t\t\t\t},\n\t\t\t\t\"react\": {\n\t\t\t\t\t\"name\": \"React\",\n\t\t\t\t\t\"url\": \"https://onespace.pages.dev/techItems?id=2\",\n\t\t\t\t\t\"description\": \"currently the most popular front-end JavaScript framework along with Vue and Angular\"\t\t\t\n\t\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **server.ts**\n\t\t\t--------------------------------------------\n\t\t\timport express from 'express';\n\t\t\timport cors from 'cors';\n\t\t\timport * as model from './model.js';\n\n\t\t\tconst app = express();\n\t\t\tapp.use(cors());\n\t\t\tconst port = 3011;\n\n\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.send(model.getApiInstructionsHtml());\n\t\t\t});\n\n\t\t\tapp.get('/jobs', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getJobs());\n\t\t\t});\n\n\t\t\tapp.get('/todos', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getTodos());\n\t\t\t});\n\n\t\t\tapp.get('/totaledSkills', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getTotaledSkills());\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`listening on http://localhost:${port}`);\n\t\t\t});\n\t\t\t--------------------------------------------\n\t\t- **model.ts**\n\t\t\t--------------------------------------------\n\t\t\timport fs from 'fs';\n\t\t\timport * as model from './model.js';\n\t\t\timport { Job, Skill, nullObjectSkill, TotaledSkill, Todo } from './types.js';\n\n\t\t\tconst _jobs: Job[] = JSON.parse(fs.readFileSync('./src/data/jobs.json', 'utf8'));\n\t\t\tconst skillInfos: any = JSON.parse(fs.readFileSync('./src/data/skillInfos.json', 'utf8'));\n\n\t\t\texport const getApiInstructionsHtml = () => {\n\t\t\t\treturn `\n\t\t\t<style>\n\t\t\ta, h1 {\n\t\t\t\tbackground-color: #ddd;\n\t\t\t\tfont-family: courier;\n\t\t\t}\n\t\t\t</style>\n\t\t\t<h1>GETAJOB API</h1>\t\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"jobs\">/jobs</a> - array of job listings will all fields</li>\n\t\t\t\t<li><a href=\"todos\">/todos</a> - array of todos with todo/company/title fields</li>\n\t\t\t\t<li><a href=\"totaledSkills\">/totaledSkills</a> - array of skills with totals how often they occur in job listings</li>\n\t\t\t</ul>\n\t\t\t\t`;\n\t\t\t}\n\n\t\t\texport const getJobs = (): Job[] => {\n\t\t\t\tconst jobs: Job[] = [];\n\t\t\t\t_jobs.forEach(_job => {\n\t\t\t\t\tconst job = {\n\t\t\t\t\t\t..._job,\n\t\t\t\t\t\tskills: model.getSkillsWithList(_job.skillList)\n\t\t\t\t\t}\n\t\t\t\t\tjobs.push(job);\n\t\t\t\t})\n\t\t\t\treturn jobs;\n\t\t\t}\n\n\t\t\texport const getTodos = (): Todo[] => {\n\t\t\t\treturn _jobs.map((job: Job) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttodoText: job.todo,\n\t\t\t\t\t\tcompany: job.company,\n\t\t\t\t\t\ttitle: job.title\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\texport const getTotaledSkills = () => {\n\t\t\t\tconst totaledSkills: TotaledSkill[] = [];\n\t\t\t\tmodel.getJobs().forEach(job => {\n\t\t\t\t\tjob.skills.forEach(skill => {\n\t\t\t\t\t\tconst existingTotaledSkill = totaledSkills.find(totaledSkill => totaledSkill.skill.idCode === skill.idCode);\n\t\t\t\t\t\tif (!existingTotaledSkill) {\n\t\t\t\t\t\t\ttotaledSkills.push({\n\t\t\t\t\t\t\t\tskill,\n\t\t\t\t\t\t\t\ttotal: 1\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\texistingTotaledSkill.total++;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\treturn totaledSkills;\n\t\t\t}\n\n\t\t\texport const getSkillsWithList = (skillList: string) => {\n\t\t\t\tconst skills: Skill[] = [];\n\t\t\t\tconst skillIdCodes = skillList.split(',').map(m => m.trim());\n\t\t\t\tskillIdCodes.forEach(skillIdCode => {\n\t\t\t\t\tconst skill: Skill = model.lookupSkill(skillIdCode);\n\t\t\t\t\tskills.push(skill);\n\t\t\t\t});\n\t\t\t\treturn skills;\n\t\t\t}\n\n\t\t\texport const lookupSkill = (idCode: string): Skill => {\n\t\t\t\tconst _skill = skillInfos[idCode];\n\t\t\t\tif (_skill === undefined) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...nullObjectSkill,\n\t\t\t\t\t\tidCode\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t..._skill,\n\t\t\t\t\t\tidCode,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \t\t\t\n\t\t\t--------------------------------------------\n\t\t- **types.ts**\n\t\t\t----------------------------------------\n\t\t\texport type Job = {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t\tskillList: string;\n\t\t\t\tskills: Skill[];\n\t\t\t\ttodo: string;\n\t\t\t}\n\n\t\t\texport type Skill = {\n\t\t\t\tidCode: string;\n\t\t\t\tname: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\n\t\t\texport type Todo = {\n\t\t\t\ttodoText: string;\n\t\t\t\tcompany: string;\n\t\t\t\ttitle: string;\n\t\t\t}\n\n\t\t\texport type TotaledSkill = {\n\t\t\t\tskill: Skill;\n\t\t\t\ttotal: number;\n\t\t\t}\n\n\t\t\texport const nullObjectSkill: Skill = {\n\t\t\t\tidCode: '',\n\t\t\t\tname: '',\n\t\t\t\turl: '',\n\t\t\t\tdescription: ''\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- your backend will now look like this: #gif#thebackendwithtree\n- **==> STEP 3. Consume the new /jobs route on the Jobs page <==**\n\t- decide to use useContext\n\t\t- since we have three pages which will fetching data from the backend, it will already be worth our time to set up a **useContext** so that each page can fetch from one centralized point\n\t\t\t- this will also make it much more flexible to fetch multiple routes from one page\n\t- set up useContext for the /jobs route first, and update the jobs page to use it\n\t\t- for a basic step-by-step guide to set up useContext with TypeScript, see:\n\t\t\t- [Implement useContext in an app with multiple pages and data sources](https://edwardtanguay.vercel.app/howtos?id=636)\n\t\t- **main.tsx**\n\t\t\t---------------------------------------\n\t\t\timport { AppProvider } from './appContext';\n\n\t\t\t<AppProvider>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t</AppProvider>\n\t\t\t---------------------------------------\n\t\t- **appContext.tsx**\n\t\t\t-------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport { createContext } from 'react';\n\t\t\timport axios from 'axios';\n\t\t\timport { Job } from './types';\n\n\t\t\tinterface IAppContext {\n\t\t\t\tjobs: Job[]\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\tconst backendUrl = 'http://localhost:3011'; \n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\tconst [jobs, setJobs] = useState<Job[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetJobs((await axios.get(`${backendUrl}/jobs`)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tjobs\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------\n\t\t- **PageJobs.tsx**\n\t\t\t---------------------------------------\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from '../appContext';\n\t\t\timport { Job } from '../types';\t\t\t\n\n\t\t\tconst { jobs } = useContext(AppContext);\n\t\t\t---------------------------------------\n\t\t- **types.ts**\n\t\t\t-----------------------------------------\n\t\t\texport type Job = {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\tdescription: string;\n\t\t\t\turl: string;\n\t\t\t\tskillList: string;\n\t\t\t\ttodo: string;\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------\n\t\t- the site should work just as it did before\n\t- now that in our **jobs** array we not only have **skillList** (comma-separated list) but now **skills** (an array of Skill objects), let's display these\n\t\t- **types.ts**\n\t\t\t---------------------------------\n\t\t\texport type Job = {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t\tskillList: string;\n\t\t\t\tskills: Skill[];\n\t\t\t\ttodo: string;\n\t\t\t}\n\n\t\t\texport type Skill = {\n\t\t\t\tidCode: string;\n\t\t\t\tname: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\t\t\t---------------------------------\n\t\t- **PageJobs.tsx**\n\t\t\t---------------------------------\n\t\t\timport { Job, Skill } from '../types';\n\n\t\t\treturn (\n\t\t\t\t<div className=\"page pageJobs\">\n\t\t\t\t\t<div className=\"jobs\">\n\t\t\t\t\t\t<h2>There are {jobs.length} jobs:</h2>\n\t\t\t\t\t\t{jobs.map((job: Job) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"job\" key={job.id}>\n\t\t\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t\t\t<a href={job.url} target=\"_blank\">\n\t\t\t\t\t\t\t\t\t\t\t{job.title}\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"company\">{job.company}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"todo\">NEXT TASK: {job.todo}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"description\">{job.description}</div>\n\t\t\t\t\t\t\t\t\t<div className=\"skills\">\n\t\t\t\t\t\t\t\t\t\t{job.skills.map((skill: Skill) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{skill.name ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"skill found\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"name\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={skill.url} target=\"_blank\">{skill.name}</a> - {skill.description}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"skill missing\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"name\">\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a href={`https://www.google.com/search?q=${skill.idCode}+web+development`} target=\"_blank\">{skill.idCode}</a> - ADD TO BACKEND: \\src\\data\\skillInfos.json\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\t---------------------------------\n\t\t- **App.scss**\n\t\t\t------------------------------\n\t\t\t.skills {\n\t\t\t\t.skill {\n\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t}\n\t\t\t\t.found {\n\t\t\t\t\tcolor: green;\n\t\t\t\t\ta {\n\t\t\t\t\t\tcolor: rgb(114, 208, 114);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.missing {\n\t\t\t\t\tcolor: red;\n\t\t\t\t\ta {\n\t\t\t\t\t\tcolor: rgb(210, 77, 77);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.todo {\n\t\t\t\tcolor: yellow;\n\t\t\t\tbackground-color: #111;\n\t\t\t\tpadding: .4rem;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tborder-radius: .4rem;\t\n\t\t\t}\t\t\t\n\t\t\t------------------------------\n- **==> STEP 4. Display data from the new /jobs route on the Dashboard page <==**\n\t- **appContext.tsx**\n\t\t------------------------------------\n\t\timport { Job, Todo } from './types';\n\n\t\tinterface IAppContext {\n\t\t\tjobs: Job[],\n\t\t\ttodos: Todo[]\n\t\t}\n\n\t\tconst [todos, setTodos] = useState<Todo[]>([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst _todos = (await axios.get(`${backendUrl}/todos`)).data;\n\t\t\t\t_todos.sort((a: Todo, b: Todo) => a.todoText > b.todoText);\n\t\t\t\tsetTodos(_todos);\n\t\t\t})();\n\t\t}, []);\n\n\t\tvalue={{\n\t\t\tjobs,\n\t\t\ttodos\n\t\t}}\t\t\n\t\t------------------------------------\n\t- **PageDashboard.tsx**\n\t\t-----------------------------------------\n\t\texport const PageDashboard = () => {\n\t\t\tconst { todos } = useContext(AppContext);\n\t\t\treturn (\n\t\t\t\t<div className=\"page pageDashboard\">\n\t\t\t\t\t<h2>Todos</h2>\n\t\t\t\t\t<div className=\"todos\">\n\t\t\t\t\t\t{todos.map((todo, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ul className=\"todo\" key={i}>\n\t\t\t\t\t\t\t\t\t<li>{todo.todoText}: <a target=\"_blank\" href={todo.url}>{todo.title} at {todo.company}</a></li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\t\t\n\t\t-----------------------------------------\n- **==> STEP 5. Display data from the new /totaledSkills route on the Skills page <==**\n\t- **types.ts**\n\t\t------------------------------\n\t\texport type TotaledSkill = {\n\t\t\tskill: Skill;\n\t\t\ttotal: number;\n\t\t\tisOpen: boolean;\n\t\t\tlookupInfoLink: string;\n\t\t}\t\t\n\t\t------------------------------\n\t- **appContext.tsx**\n\t\t-----------------------------------\n\t\timport { Job, Todo, TotaledSkill } from './types';\n\n\t\tinterface IAppContext {\n\t\t\tjobs: Job[];\n\t\t\ttodos: Todo[];\n\t\t\ttotaledSkills: TotaledSkill[];\n\t\t\thandleToggleTotaledSkill: (totaledSkill: TotaledSkill) => void;\n\t\t}\n\n\t\tconst [totaledSkills, setTotaledSkills] = useState<TotaledSkill[]>([]);\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst _totaledSkills: TotaledSkill[] = (\n\t\t\t\t\tawait axios.get(`${backendUrl}/totaledSkills`)\n\t\t\t\t).data;\n\t\t\t\t_totaledSkills.sort(\n\t\t\t\t\t(a: TotaledSkill, b: TotaledSkill) =>\n\t\t\t\t\t\tNumber(b.total) - Number(a.total)\n\t\t\t\t);\n\t\t\t\t_totaledSkills.forEach((_totaledSkill) => {\n\t\t\t\t\t_totaledSkill.isOpen = false;\n\t\t\t\t\tif (_totaledSkill.skill.name) {\n\t\t\t\t\t\t_totaledSkill.lookupInfoLink = `https://www.google.com/search?client=firefox-b-d&q=web+development+${_totaledSkill.skill.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_totaledSkill.lookupInfoLink = `https://www.google.com/search?client=firefox-b-d&q=web+development+${_totaledSkill.skill.idCode}`;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsetTotaledSkills(_totaledSkills);\n\t\t\t})();\n\t\t}, []);\n\n\t\tconst handleToggleTotaledSkill = (totaledSkill: TotaledSkill) => {\n\t\t\ttotaledSkill.isOpen = !totaledSkill.isOpen;\n\t\t\tsetTotaledSkills([...totaledSkills]);\n\t\t};\n\n\t\tvalue={{\n\t\t\tjobs,\n\t\t\ttodos,\n\t\t\ttotaledSkills,\n\t\t\thandleToggleTotaledSkill,\n\t\t}}\t\n\t\t-----------------------------------\n\t- **PageSkills.tsx**\n\t\t-------------------------------------------\n\t\texport const PageSkills = () => {\n\t\t\tconst { totaledSkills, handleToggleTotaledSkill } = useContext(AppContext);\n\t\t\treturn (\n\t\t\t\t<div className=\"page pageSkills\">\n\t\t\t\t\t<h2>Skills</h2>\n\t\t\t\t\t<div className=\"totaledSkills\">\n\t\t\t\t\t\t{totaledSkills.map((totaledSkill, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={i}\n\t\t\t\t\t\t\t\t\tclassName={`totaledSkill ${\n\t\t\t\t\t\t\t\t\t\ttotaledSkill.skill.name ? 'found' : 'missing'\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"mainArea\" onClick={() => handleToggleTotaledSkill(totaledSkill)}>\n\t\t\t\t\t\t\t\t\t\t<span className=\"total\">\n\t\t\t\t\t\t\t\t\t\t\t{totaledSkill.total}x\n\t\t\t\t\t\t\t\t\t\t</span>{' '}\n\t\t\t\t\t\t\t\t\t\t{totaledSkill.skill.name ? (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"name\">\n\t\t\t\t\t\t\t\t\t\t\t\t{totaledSkill.skill.name}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"name\">\n\t\t\t\t\t\t\t\t\t\t\t\t{totaledSkill.skill.idCode}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{totaledSkill.isOpen && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"openArea\">\n\t\t\t\t\t\t\t\t\t\t\t{totaledSkill.skill.name ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{totaledSkill.skill.description}{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotaledSkill.skill.url\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinfo\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thref={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotaledSkill.lookupInfoLink\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlookup\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"description\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tcreate new entry in backend:\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\\src\\data\\skillInfos.json\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thref={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttotaledSkill.lookupInfoLink\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlookup\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------\n\t- **App.scss**\n\t\t-------------------------------------------\n\t\t.pageSkills {\n\t\t\t.totaledSkill {\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\twidth: 25rem;\n\n\t\t\t\t.mainArea {\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\n\t\t\t\t.openArea {\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\t.description {\n\t\t\t\t\t\ta {\n\t\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\t\t&:hover {\n\t\t\t\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.found {\n\t\t\t\tbackground-color: rgb(30, 67, 30);\n\n\t\t\t\t.mainArea {\n\t\t\t\t\t.total {\n\t\t\t\t\t\tcolor: rgb(206, 206, 115);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.openArea {\n\t\t\t\t\tbackground-color: rgb(21, 49, 21);\n\t\t\t\t\tcolor: #888;\n\n\t\t\t\t\t.description {\n\t\t\t\t\t\ta {\n\t\t\t\t\t\t\tcolor: rgb(78, 111, 62);\n\t\t\t\t\t\t\tfont-family: courier;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t.missing {\n\t\t\t\tbackground-color: rgb(86, 5, 5);\n\t\t\t\tcolor: #777;\n\t\t\t\tfont-family: courier;\n\n\t\t\t\t.mainArea {\n\t\t\t\t\t.total {\n\t\t\t\t\t\tcolor: #777;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.openArea {\n\t\t\t\t\tbackground-color: rgb(56, 17, 17);\n\t\t\t\t\tcolor: #666;\n\n\t\t\t\t\t.description {\n\t\t\t\t\t\ta {\n\t\t\t\t\t\t\tcolor: rgb(121, 42, 38);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t-------------------------------------------\n\t- the final site will work like this:#gif#full003demo","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-06 18:38:10","systemWhoCreated":"systemUnknown"},{"id":659,"category":"Node/Express","title":"Create TypeScript frontend/backend job-application-management site with full CRUD functionality","body":"- **what we will make**\n\t- the goal of this howto is to get a frontend/backend running which does full **CRUD** operations\n\t\t- it shows job ads with an add button (**R**ead, **C**reate)\n\t\t- next to each job is an edit and delete button (**U**pdate, **D**elete)\n\t- we will start with the end result of this howto:\n\t\t- [Create a job-application React site frontend that uses a Node/Express backend with an MVC pattern](https://edwardtanguay.vercel.app/howtos?id=658)\n\t- we will first have to refactor the backend datasource implementation:\n\t\t- instead of muliple JSON files as it is now which are read in with `fs.readFileSync`:\n\t\t\t- `jobs.json`\n\t\t\t- `skillsInfo.json`\n\t\t- we will have on file with multiple propertions which have the data that were in the files\n\t\t\t- `db.json`\n\t\t\t\t-------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"jobs\": [\n\t\t\t\t\t\t...\n\t\t\t\t\t],\n\t\t\t\t\t\"skillsInfo\": {\n\t\t\t\t\t\t...\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t-------------------------------\n\t\t\t- then we will import and implement [lowdb](https://www.npmjs.com/package/lowdb) so that we can read and write to the JSON files on-the-fly as with a database\n\t- we will then create all the necessary backend routes to add, edit and delete jobs\n\t\t- we will test these routes with both **Postman** and **VSCode's REST Client**\n- **final project**\n\t- final code is here:\n\t\t- https://github.com/edwardtanguay/getajob005-frontend\n\t\t- https://github.com/edwardtanguay/getajob005-backend\n\t- final site works like this: #gif#thedleteandwork\n- **==> STEP 1. set up site from site from previous project <==**\n\t- we will start with the code at the end of with this project: \n\t\t[Create a job-application React site frontend that uses a Node/Express backend with an MVC pattern](https://edwardtanguay.vercel.app/howtos?id=658)\n\t- if you want, you can complete that project and skip to STEP 2, otherwise follow the following steps\n\t- under your projects directory, create the following directories (choose your own name for \"getajob005\" if you like)\n\t\t- getajob005\n\t\t\t- getajob005-backend\n\t\t\t- getajob005-frontend\n\t- download and copy the following code into the backend directory:\n\t\t- https://github.com/edwardtanguay/getajob003-backend\n\t- download and copy the following code into the frontend directory:\n\t\t- https://github.com/edwardtanguay/getajob003-frontend\n\t- open VSCode in backend directory, then install, start backend and setup Git\n\t- open VSCode in frontend directory, then install, start frontend and setup Git\n\t- your backend and frontend should look and work like this:#gif#full003demo\n- **==> STEP 2. Refactor the backend so instead of reading directory from files, it reads the data in a lowdb database <==**\n\t- first create new route **/test** and call a method **getTest** on the model\n\t\t- **server.ts**\n\t\t\t------------------------------\n\t\t\tapp.get('/test', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getTest());\n\t\t\t});\n\t\t\t------------------------------\n\t\t- **model.ts**\n\t\t\t---------------------------------------\n\t\t\texport const getTest = () => {\n\t\t\t\treturn 'test';\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- it works:##thetestworkjksks\n\t- now install lowdb, set up a database and read a test string from the database for the **/test** route\n\t\t- `npm i lowdb`\n\t\t- `npm i -D @types/lowdb`\n\t\t- **src/data/db.json**\n\t\t\t---------------------------------\n\t\t\t{\n\t\t\t  \"test\": \"this is a value from lowdb\" \n\t\t\t}\t\t\t\n\t\t\t---------------------------------\n\t\t- **module.ts**\n\t\t\t---------------------------------------\n\t\t\timport { join, dirname } from 'node:path';\n\t\t\timport { fileURLToPath } from 'node:url'\n\t\t\timport { Low } from 'lowdb';\n\t\t\timport { JSONFile } from 'lowdb/node';\n\n\t\t\tconst __dirname = dirname(fileURLToPath(import.meta.url));\n\t\t\tconst dbFile = join(__dirname, `../src/data/db.json`);\n\t\t\tconst adapter = new JSONFile(dbFile);\n\t\t\tconst db:any = new Low(adapter);\n\t\t\tawait db.read();\n\n\t\t\texport const getTest = () => {\n\t\t\t\treturn db.data.test;\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t\t- also make the function in **server.ts** aysnc\n\t\t\t---------------------------\n\t\t\tapp.get('/test', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getTest());\n\t\t\t});\t\t\t\n\t\t\t---------------------------\n\t\t- in **nodemon.json**, we no longer want to watch .json files since we don't want the server starting everytime lowdb changes the database\n\t\t\t--------------------------------\n\t\t\t\"ext\": \"ts\",\n\t\t\t--------------------------------\n\t\t- this has been successfully tested on **Windows** and **Linux**, i.e. apparently the following line maps its slashes correctly:\n\t\t\t----------------------------------------\n\t\t\tconst dbFile = join(__dirname, `../src/data/db.json`);\n\t\t\t----------------------------------------\n\t\t- delete the test route and its module function\n\t- refactor to read all data for the site from **lowdb**\n\t\t- move the content of the two files into **db.json**##nowinlowdbdb\n\t\t\t- delete the two former .json files\n\t\t- in **model.ts** delete the references to the json files you just deleted\n\t\t\t-----------------------------------------\n\t\t\tconst _jobs: Job[] = JSON.parse(fs.readFileSync('./src/data/jobs.json', 'utf8'));\n\t\t\tconst skillInfos: any = JSON.parse(fs.readFileSync('./src/data/skillInfos.json', 'utf8'));\t\t\t\n\t\t\t-----------------------------------------\n\t\t- in **model.ts** now load the data you need inside the methods where you need them, so they are always up-to-date when the methods are run\n\t\t\t-----------------------------------------------\n\t\t\texport const getJobs = (): Job[] => {\n\t\t\t\tconst _jobs: Job[] = db.data.jobs;\t\t\t\n\n\t\t\texport const getTodos = (): Todo[] => {\n\t\t\t\tconst _jobs: Job[] = db.data.jobs;\n\n\t\t\texport const lookupSkill = (idCode: string): Skill => {\n\t\t\t\tconst skillInfos: any = db.data.skillInfos;\n\t\t\t-----------------------------------------------\n- **==> STEP 3. Create backend route to delete a job and test in Postman and VSCode REST Client <==**\n\t- create a delete route which accepts an id, e.g. `DELETE http://localhost:3011/job/2` would delete job with id=2\n\t\t- **server.ts**\n\t\t\t------------------------------------------------\n\t\t\tapp.delete('/job/:id', (req: express.Request, res: express.Response) => {\n\t\t\t\tconst id = req.params.id;\n\t\t\t\tres.send(`will delete job ${id}`);\n\t\t\t});\t\t\t\n\t\t\t------------------------------------------------\n\t\t- test in Postman:##threedelete\n\t\t- test in frontend REST Client:##thetestinrestij\n\t- now create a function in the model and call it from the server so as to actually delete the record\n\t\t- **model.ts**\n\t\t\t-------------------------------------\n\t\t\texport const deleteJob = async (id: number) => {\n\t\t\t\tconst deletedObject = db.data.jobs.find((m: Job) => m.id === id);\n\t\t\t\tdb.data.jobs = db.data.jobs.filter((m: Job) => m.id !== id);\n\t\t\t\tawait db.write();\n\t\t\t\treturn deletedObject;\n\t\t\t}\n\t\t\t-------------------------------------\n\t\t- **server.ts**\n\t\t\t---------------------------------------\n\t\t\tapp.delete('/job/:id', async (req: express.Request, res: express.Response) => {\n\t\t\t\tconst id = Number(req.params.id);\n\t\t\t\tconst deletedObject = await model.deleteJob(id);\n\t\t\t\tif (deletedObject === undefined) {\n\t\t\t\t\tres.status(409).send({\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t\tmessage: `job with id ${id} does not exist, deletion failed`\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tres.status(200).json(deletedObject);\n\t\t\t\t}\n\t\t\t});\n\t\t\t---------------------------------------\n\t\t- test in REST Client and you will see that the API returns enough information for the frontend to:\n\t\t\t- 1. display information about the deleted job\n\t\t\t- 2. if the job could not be deleted, it has a message explaining why which it can e.g. show the user or save in a log, etc.#gif#thedeleteworksok\n- **==> STEP 4. Enable user on frontend to delete jobs <==**\n\t- add button, handling function, and console log the id as a test\n\t\t- **PageJobs.tsx**\n\t\t\t----------------------------------------\n\t\t\tconst { jobs, handleDeleteJob } = useContext(AppContext);\n\n\t\t\t<div className=\"managePanel\">\n\t\t\t\t<button onClick={() => handleDeleteJob(job)}>Delete</button>\n\t\t\t</div>\t\t\t\n\t\t\t----------------------------------------\n\t\t- **appContext.tsx**\n\t\t\t--------------------------------------------\n\t\t\thandleDeleteJob: (job: Job) => void;\n\n\t\t\tconst handleDeleteJob = (job: Job) => {\n\t\t\t\tconsole.log('deleting id ' + job.id)\n\t\t\t}\t\n\n\t\t\thandleDeleteJob\n\t\t\t--------------------------------------------\n\t\t- **App.scss**\n\t\t\t---------------------------------------\n\t\t\t.managePanel {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: flex-end;\n\t\t\t\tbutton {\n\t\t\t\t\tbackground-color: #555;\n\t\t\t\t\tborder: 0;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\tborder-radius: .3rem;\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tbackground-color:rgb(152, 64, 46);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t- now actually delete and respond to any errors\n\t\t- **appContext.tsx**\n\t\t\t----------------------------------------------\n\t\t\tconst handleDeleteJob = async (job: Job) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios.delete(`${backendUrl}/job/${job.id}`);\n\t\t\t\t\tif (res.status = 200) {\n\t\t\t\t\t\tconst _jobs = jobs.filter((m: Job) => m.id !== job.id);\n\t\t\t\t\t\tsetJobs([..._jobs]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(res)\n\t\t\t\t\t}\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconsole.error(`ERROR: ${e.message}`);\n\t\t\t\t\tconst message = e.response.data.message;\n\t\t\t\t\tif (message) {\n\t\t\t\t\t\tconsole.error(`ERROR: ${message}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t\t----------------------------------------------\n\t\t- test if same ID sent\n\t\t- test if backend not running\n\t- fix issue that Dashboard and Skills pages should update as well\n\t\t- **appContext.tsx**\n\t\t\t---------------------------------------------\n\t\t\tconst loadJobs = async () => {\n\t\t\t\tsetJobs((await axios.get(`${backendUrl}/jobs`)).data);\n\t\t\t};\n\n\t\t\tconst loadTodos = async () => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst _todos = (await axios.get(`${backendUrl}/todos`)).data;\n\t\t\t\t\t_todos.sort((a: Todo, b: Todo) => a.todoText > b.todoText);\n\t\t\t\t\tsetTodos(_todos);\n\t\t\t\t})();\n\t\t\t};\n\n\t\t\tconst loadTotaledSkills = async () => {\n\t\t\t\tconst _totaledSkills: TotaledSkill[] = (\n\t\t\t\t\tawait axios.get(`${backendUrl}/totaledSkills`)\n\t\t\t\t).data;\n\t\t\t\t_totaledSkills.sort(\n\t\t\t\t\t(a: TotaledSkill, b: TotaledSkill) =>\n\t\t\t\t\t\tNumber(b.total) - Number(a.total)\n\t\t\t\t);\n\t\t\t\t_totaledSkills.forEach((_totaledSkill) => {\n\t\t\t\t\t_totaledSkill.isOpen = false;\n\t\t\t\t\tif (_totaledSkill.skill.name) {\n\t\t\t\t\t\t_totaledSkill.lookupInfoLink = `https://www.google.com/search?client=firefox-b-d&q=web+development+${_totaledSkill.skill.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_totaledSkill.lookupInfoLink = `https://www.google.com/search?client=firefox-b-d&q=web+development+${_totaledSkill.skill.idCode}`;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsetTotaledSkills(_totaledSkills);\n\t\t\t};\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tawait loadJobs();\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tawait loadTodos();\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tawait loadTotaledSkills();\n\t\t\t\t})();\n\t\t\t}, []);\t\t\n\n\t\t\tawait loadJobs();\n\t\t\tawait loadTodos();\n\t\t\tawait loadTotaledSkills();\t\t\t\n\t\t\t---------------------------------------------\n\t- deleting should now work like this:#gif#thedleteandwork","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-07 20:32:36","systemWhoCreated":"systemUnknown"},{"id":660,"category":"React","title":"Create the same Random Name Selector in JS/DOM and React/TypeScript","body":"- **what we will build**\n\t- this howto shows the two very different approaches that JS/DOM and React take to solving interactive websites\n\t- we will build a random-name-selector tool in both JS/DOM and React\n\t- we will analyze the two different approaches and consider why one would not want to write large, complicated apps in JS/DOM, but rather in a state-based JavaScript framework such as React (or Vue.js, Angular, Svelte, etc.)\n- **final project**\n\t- the final code is here: \n\t\t- JS/DOM app version: https://github.com/edwardtanguay/et001-random-number-generator-jsdom\n\t\t- React/TypeScript version: https://github.com/edwardtanguay/et001-random-number-generator-react\n\t- the final apps work exactly the same:#gif#jsdomreactts\n- **JS/DOM Version**\n\t- **main.js**\n\t\t--------------------------------------------\n\t\timport * as tools from './tools.js';\n\n\t\tconst buttonSelectElem = document.querySelector('.buttonSelect');\n\t\tconst availableAreaElem = document.querySelector('.availableArea');\n\t\tconst selectedNamesElem = document.querySelector('.selectedNames');\n\t\tconst currentNameElem = document.querySelector('.currentName');\n\n\t\tconst originalNames = ['Marco', 'Luka', 'Jonas', 'Lena', 'Emma', 'Leah'];\n\t\tlet availableNames = [...originalNames];\n\n\t\tconst refillAvailableNames = () => {\n\t\t\tavailableAreaElem.innerHTML = '';\n\t\t\tavailableNames.forEach((name) => {\n\t\t\t\tconst availableItemElem = document.createElement('div');\n\t\t\t\tavailableItemElem.innerText = name;\n\t\t\t\tavailableItemElem.classList.add('availableName');\n\t\t\t\tavailableAreaElem.appendChild(availableItemElem);\n\t\t\t});\n\t\t};\n\n\t\tconst resetAppState = () => {\n\t\t\tavailableNames = [...originalNames];\n\t\t\trefillAvailableNames();\n\t\t\tselectedNamesElem.innerHTML = '';\n\t\t};\n\n\t\tbuttonSelectElem.onclick = () => {\n\t\t\tconst currentName = tools.removeRandomItemFromArray(availableNames);\n\n\t\t\trefillAvailableNames();\n\n\t\t\t// add name to selected names\n\t\t\tconst formerCurrentName = currentNameElem.innerText;\n\t\t\tif (formerCurrentName !== '') {\n\t\t\t\tconst selectedItemElem = document.createElement('div');\n\t\t\t\tselectedItemElem.innerText = formerCurrentName;\n\t\t\t\tselectedItemElem.classList.add('selectedName');\n\t\t\t\tselectedNamesElem.appendChild(selectedItemElem);\n\t\t\t}\n\n\t\t\t// handle non-select buttons\n\t\t\tif (availableNames.length === 0 && buttonSelectElem.innerText == 'Select') {\n\t\t\t\tbuttonSelectElem.innerText = 'Finish';\n\t\t\t\tbuttonSelectElem.style.backgroundColor = '#777';\n\t\t\t\tbuttonSelectElem.style.borderRadius = '3px';\n\t\t\t}\n\t\t\tif (currentName === null) {\n\t\t\t\tif (buttonSelectElem.innerText === 'Finish') {\n\t\t\t\t\tcurrentNameElem.innerText = '';\n\t\t\t\t\tcurrentNameElem.style.display = 'none';\n\t\t\t\t\tbuttonSelectElem.innerText = 'RESET';\n\t\t\t\t} else if (buttonSelectElem.innerText === 'RESET') {\n\t\t\t\t\tbuttonSelectElem.innerText = 'Select';\n\t\t\t\t\tavailableNames = [...originalNames];\n\t\t\t\t\tresetAppState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentNameElem.innerText = currentName;\n\t\t\t\tcurrentNameElem.style.display = 'block';\n\t\t\t}\n\t\t};\n\n\t\tresetAppState();\t\t\n\t\t--------------------------------------------\n\t- **tools.js**\n\t\t------------------------------------------\n\t\t/**\n\t\t * removes a random item from an array and returns that item\n\t\t * \n\t\t * const colors = ['red', 'blue', 'green'];\n\t\t * const color = tools.removeRandomItemFromArray(colors)\n\t\t * \n\t\t * color is 'red'\n\t\t * colors is ['blue', 'green']\n\t\t */\n\t\texport const removeRandomItemFromArray = (arr) => {\n\t\t\tif (arr.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst index = Math.trunc(Math.random() * arr.length);\n\t\t\tconst selectedItem = arr[index];\n\t\t\tarr.splice(index, 1);\n\t\t\treturn selectedItem;\n\t\t};\t\t\n\t\t------------------------------------------\n- **React/TypeScript Version**\n\t- **App.tsx**\n\t\t--------------------------------------------------\n\t\timport { useState, useEffect } from 'react';\n\t\timport * as tools from './tools';\n\t\timport './App.scss';\n\t\timport { Phase } from './types';\n\t\timport phaseLookup from './data/phaseLookup.json';\n\n\t\tconst _originalNames = ['Marco', 'Luka', 'Jonas', 'Lena', 'Emma', 'Leah'];\n\n\t\tfunction App() {\n\t\t\tconst [availableNames, setAvailableNames] = useState([..._originalNames]);\n\t\t\tconst [currentName, setCurrentName] = useState('');\n\t\t\tconst [selectedNames, setSelectedNames] = useState<string[]>([]);\n\t\t\tconst [currentPhase, setCurrentPhase] = useState(Phase.nobodySelectedYet);\n\n\t\t\tconst getPhaseObject = () => {\n\t\t\t\treturn phaseLookup[Phase[Phase[currentPhase]]];\n\t\t\t};\n\n\t\t\tconst moveCurrentNameToSelectedNames = () => {\n\t\t\t\tif (currentName !== '') {\n\t\t\t\t\tselectedNames.push(currentName);\n\t\t\t\t}\n\t\t\t\tlet _currentName = moveRandomAvailableNameToCurrentName();\n\t\t\t\t_currentName = _currentName === null ? '' : _currentName;\n\t\t\t\tsetCurrentName(_currentName);\n\t\t\t};\n\n\t\t\tconst moveRandomAvailableNameToCurrentName = () => {\n\t\t\t\treturn tools.removeRandomItemFromArray(availableNames);\n\t\t\t};\n\n\t\t\tconst handleMainButton = () => {\n\t\t\t\tif (\n\t\t\t\t\tcurrentPhase === Phase.nobodySelectedYet ||\n\t\t\t\t\tcurrentPhase === Phase.selectingNames\n\t\t\t\t) {\n\t\t\t\t\tmoveCurrentNameToSelectedNames();\n\t\t\t\t\tsetAvailableNames([...availableNames]);\n\t\t\t\t\tsetSelectedNames([...selectedNames]);\n\n\t\t\t\t\tif (availableNames.length > 0) {\n\t\t\t\t\t\tsetCurrentPhase(Phase.selectingNames);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetCurrentPhase(Phase.onlyOnePersonLeft);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (currentPhase === Phase.onlyOnePersonLeft) {\n\t\t\t\t\tmoveCurrentNameToSelectedNames();\n\t\t\t\t\tsetCurrentPhase(Phase.finished);\n\t\t\t\t}\n\n\t\t\t\tif (currentPhase === Phase.finished) {\n\t\t\t\t\tsetAvailableNames([..._originalNames]);\n\t\t\t\t\tsetSelectedNames([]);\n\t\t\t\t\tsetCurrentName('');\n\t\t\t\t\tsetCurrentPhase(Phase.nobodySelectedYet);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<h1>Random Name Selector (React/TypeScript)</h1>\n\t\t\t\t\t<div className=\"availableArea\">\n\t\t\t\t\t\t{availableNames.map((availableName, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"availableName\" key={index}>\n\t\t\t\t\t\t\t\t\t{availableName}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"currentArea\">\n\t\t\t\t\t\t<button className=\"buttonSelect\" onClick={handleMainButton}>\n\t\t\t\t\t\t\t{getPhaseObject().buttonName}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{currentName && (\n\t\t\t\t\t\t\t<div className=\"currentName\">{currentName}</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"selectedArea\">\n\t\t\t\t\t\t{selectedNames.map((selectedName, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"selectedName\" key={index}>\n\t\t\t\t\t\t\t\t\t{selectedName}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t--------------------------------------------------\n\t- **phaseLookup.json**\n\t\t--------------------------------------------\n\t\t{\n\t\t  \"nobodySelectedYet\": {\n\t\t\t\"buttonName\": \"Select\"\n\t\t  },\n\t\t  \"selectingNames\": {\n\t\t\t\"buttonName\": \"Select\"\n\t\t  },\n\t\t  \"onlyOnePersonLeft\": {\n\t\t\t\"buttonName\": \"Finish\"\n\t\t  },\n\t\t  \"finished\": {\n\t\t\t\"buttonName\": \"RESET\"\n\t\t  }\n\t\t}\t\t\n\t\t--------------------------------------------\n\t- **types.ts**\n\t\t----------------------------------\n\t\texport enum Phase {\n\t\t\tnobodySelectedYet = 'nobodySelectedYet',\n\t\t\tselectingNames = 'selectingNames',\n\t\t\tonlyOnePersonLeft = 'onlyOnePersonLeft',\n\t\t\tfinished = 'finished'\n\t\t}\t\t\n\t\t----------------------------------\n\t- **tools.ts**\n\t\t---------------------------------------\n\t\t/**\n\t\t * removes a random item from an array and returns that item\n\t\t * \n\t\t * const colors = ['red', 'blue', 'green'];\n\t\t * const color = tools.removeRandomItemFromArray(colors)\n\t\t * \n\t\t * color is 'red'\n\t\t * colors is ['blue', 'green']\n\t\t */\n\t\texport const removeRandomItemFromArray = <T>(arr: T[]): T | null => {\n\t\t\tif (arr.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst index = Math.trunc(Math.random() * arr.length);\n\t\t\tconst selectedItem = arr[index];\n\t\t\tarr.splice(index, 1);\n\t\t\treturn selectedItem;\n\t\t};\t\t\n\t\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-11 15:47:54","systemWhoCreated":"systemUnknown"},{"id":661,"category":"EJS","title":"Create and deploy server-side EJS site with menu and plural and singular item pages","body":"- **what we will make**\n\t- in this howto we will make an EJS page with Node and Express\n\t- up to now we have used Node/Express to make APIs which merely deliver JSON data on routes\n\t- EJS sites deliver HTML on routes which is not consumed via fetch/axios, but is viewed in the browser\n\t- EJS pages are server-side instead of client-side like React\n\t- this means that all data is sent from the server on every page request, much like with PHP, Ruby on Rails, or ASP.NET pages\n\t- server-side pages are optimal for better SEO and social media links since all the data that is on the page is sent on the initial page load\n\t- this enables the search bot or social media bot to get all information it needs to a detail page so that it can record or display accurately what is on that particular page\n\t- this makes server-side pages such as EJS optimal for e.g. conference pages, catalog pages, or any information-based page where the data doesn't change often, there is little interactivity, and where one does not have to log in\n\t- note however that server-side pages (EJS, PHP, ASP.NET, Ruby on Rails, etc.) can be combined with CDN-loaded **Vue.js** to give a server-side site interactivity after the HTML/JS/CSS has been downloaded, see this howto:\n\t\t- HOWTO: [Build interactive Vue.js into HTML site with API data call](https://edwardtanguay.vercel.app/howtos?id=645)\n\t- note that even if you add frontend interactivity with Vue.js, you still only will install an **EJS page on one server**, not two as with site where a Node-Express API is on a backend server while the React site is on a frontend server\n- **final project**\n\t- the final code is here: https://github.com/edwardtanguay/et001-ejs-basic\n\t- the final site will work like this: #gif#withallbooks\n\t- the social media links should look like this:##thesocialmedia\t\n- **==> STEP 1. set up simple Node/TypeScript ap that displays a test message <==**\n\t- what we will set up now is the same as the Node/Express APIs we have been setting up except that we will send HTML instead of JSON\n\t- in your projects folder, create a folder for this site, e.g. `et001-ejs-basic`\n\t- in the directory, open VSCode with `code .`\n\t- in the VSCode terminal, create an npm project: `npm init -y`\n\t- set up Git repository\n\t\t- `git init -b main`\n\t\t- **.gitignore**\n\t\t\t-----------------------------\n\t\t\tnode_modules\n\t\t\t.vscode\n\t\t\t-----------------------------\n\t- **src/server.ts**\n\t\t-----------------------------------\n\t\tconst message:string = 'TypeScript works';\n\t\tconsole.log(message);\n\t\t-----------------------------------\n\t- in order to develop we need nodemon to restart Node everytime we change a file that requires new compilation\n\t\t- `npm i -D nodemon`\n\t- of course install TypeScript\n\t\t- `npm i -D typescript`\n\t\t- **tsconfig.json**\n\t\t\t----------------------------------------\n\t\t\t{\n\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\"module\": \"NodeNext\",\n\t\t\t\t\t\"moduleResolution\": \"NodeNext\",\n\t\t\t\t\t\"target\": \"ES2020\",\n\t\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\t\"outDir\": \"dist\",\n\t\t\t\t},\n\t\t\t\t\"include\": [\"src/**/*\"]\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- also install TypeScript types for Node\n\t\t\t- `npm i -D @types/node` \n\t\t\t- this avoids errors such as this one:##errrornodsojs\n\t- in **package.json** set up modules, scripts and nodemon config\n\t\t---------------------------------------\n\t\t\"type\": \"module\",\n\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"nodemon\",\n\t\t\t\"start\": \"npm run build && node dist/server.js\",\n\t\t\t\"build\": \"tsc\"\n\t\t},\t\n\n\t\t\"nodemonConfig\": {\n\t\t\t\"watch\": [\n\t\t\t\t\"src\"\n\t\t\t],\n\t\t\t\"ext\": \"ts,json\",\n\t\t\t\"exec\": \"npm run build && node dist/server.js\"\n\t\t},\n\t\t---------------------------------------\n\t- test the Node/TypeScript site: `npm run dev`\n\t\t- note that a **dist/server.js** was created:##notethatconfji\n\t\t- and that the site works:##andthattyp\n\t- make a change in the server.js and see that nodemon restarts Node:##thebasicsetupfortyp\n\t- this is the basic setup for getting TypeScript to run with Node\n- **==> STEP 2. Create a simple single-page webserver with Express <==**\n\t- install Express\n\t\t- `npm i express`\n\t\t- `npm i -D @types/express` (TypeScript types for intellisense with Express)##thexrpesstypes\n\t- **server.ts**\n\t\t------------------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst port = 3890;\n\n\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\tres.send(`\n\t\t\t\t<p>this is <b>HTML</b></p>\n\t\t\t`);\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening on http://localhost:${port}`);\n\t\t});\n\t\t------------------------------------\n\t- you will have a simple website with HTML:##thesimplehtml\n- **==> STEP 3. Understand why we would want a framework like EJS <==**\n\t- note that we can only send HTML from the server via routes, so if we wanted to have two pages that linked to each other, we would have to do something like this:\n\t\t- **server.ts**\n\t\t\t-----------------------------------------\n\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\treq.\n\t\t\t\tres.send(`\n\t\t\t\t\t<h1>Home</h1>\n\t\t\t\t\t<p>go to the <a href=\"/info\">info page</a></p>\n\t\t\t\t`);\n\t\t\t});\n\n\t\t\tapp.get('/info', (req: express.Request, res: express.Response) => {\n\t\t\t\treq.\n\t\t\t\tres.send(`\n\t\t\t\t\t<h1>Info</h1>\n\t\t\t\t\t<p>go back <a href=\"/\">home</a></p>\n\t\t\t\t`);\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------------\n\t- your site will work like this:#gif#thehomeinfo\n\t- so we would have to create a website in string literals, including e.g. the CSS files etc.\n\t\t- this would be cumbersome\n\t- so we want a solution where we can serve static HTML, CSS and JavaScript files\n- **==> STEP 4. Set up site to serve static HTML/CSS/JavaScript files <==**\n\t- we will now create simple web server which serves static HTML, CSS and JavaScript files\n\t- replace the content of **server.ts** with this:\n\t\t------------------------------------------\n\t\timport express from 'express';\n\t\timport path from 'path';\n\n\t\tconst app = express();\n\t\tconst __dirname = path.resolve(path.dirname(''));\n\t\tconst port = 3890;\n\n\t\tapp.use(express.static(__dirname + '/public'));\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening on http://localhost:${port}`);\n\t\t});\t\t\n\t\t------------------------------------------\n\t- **public/index.html**\n\t\t----------------------------------------\n\t\t<!DOCTYPE html>\n\n\t\t<head>\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"css/main.css\">\n\t\t\t<title>Info Page</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Book Site</h1>\n\t\t\t<p>go to the <a href=\"info.html\">info page</a></p>\n\t\t</body>\n\n\t\t</html>\n\t\t----------------------------------------\n\t- **public/info.html**\n\t\t--------------------------------------------\n\t\t<!DOCTYPE html>\n\n\t\t<head>\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t\t<title>Info Page</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Info Page</h1>\n\t\t\t<p>\n\t\t\t\tgo back <a href=\"/\">home</a>\n\t\t\t</p>\n\t\t</body>\n\n\t\t</html>\n\t\t--------------------------------------------\n\t- **public/css/main.css**\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tpadding: 0 1rem;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\n\t\ta {\n\t\t\tcolor: rgb(225, 225, 157);\n\t\t}\t\t\n\t\t----------------------------------\n\t- the site now looks and works like this:#gif#theworkanddolo\n\t- note that JavaScript would also work since this is a web server like any other\n\t\t- the files get passed down to the browser one-to-one\n- **==> STEP 5. Change the HTML site to an EJS <==**\n\t- since we are in Node which runs on JavaScript i.e. TypeScript in our case, we can add a scripting framework which allows us to change the content programmatically before it gets sent to the browser\n\t\t- this will make our site similar to PHP, ASP.NET or Ruby on Rails, but instead of PHP, C# or Ruby, we will use TypeScript\n\t\t- what is similar to all of these server-side solutions is that the script runs on the **server** and not in the **browser**\n\t- install EJS\n\t\t- `npm i ejs`\n\t- add lines to process EJS pages which will be in the **public/views** directory\n\t\t-----------------------------------------\n\t\tapp.set('view engine', 'ejs');\n\t\tapp.set('views', path.join(__dirname, './public/views'));\n\t\t-----------------------------------------\n\t- move the two HTML pages in the views directory \n\t\t- rename them **.ejs**\n\t- make a route for both pages:\n\t\t--------------------------------------\n\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\tres.render('index');\n\t\t});\n\n\t\tapp.get('/info', (req: express.Request, res: express.Response) => {\n\t\t\tres.render('info');\n\t\t});\n\t\t--------------------------------------\n\t- in the **public/views/index.ejs** page, take the **.html** extension off the link\n\t\t--------------------------------\n\t\t<a href=\"info\">\n\t\t--------------------------------\n\t- the page works the same now except the links to the pages do not reference **.html** but instead simply the route provided by Express##nownolinksj\n- **==> STEP 6. Make the EJS site dynamic <==**\n\t- now that we have switched from HTML to EJS, we can serve dynamic content\n\t- send a variable to the index.ejs page and display it\n\t\t- **server.ts**\n\t\t\t-----------------------------------\n\t\t\tconst appTitle = 'The Book Site';\n\n\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.render('index', { appTitle });\n\t\t\t});\n\t\t\t-----------------------------------\n\t\t- **index.ejs**\n\t\t\t-------------------------------------\n\t\t\t<h1><%=appTitle%></h1>\n\t\t\t-------------------------------------\n\t- in the same way, send it to the info page\n\t\t- **server.ts**\n\t\t\t-----------------------------------\n\t\t\tapp.get('/info', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.render('info', { appTitle });\n\t\t\t});\n\t\t\t-----------------------------------\n\t\t- **info.ejs**\n\t\t\t-------------------------------------\n\t\t\t<h1><%=appTitle%></h1>\n\t\t\t<h2>Info Page</h2>\n\t\t\t-------------------------------------\n\t- now change the app title and it will change on both pages##thebothchanged\n- **==> STEP 7. Add menu to each page with EJS include <==**\n\t- EJS enables allows pages to include sections of their content from other files\n\t- **server.ts**\n\t\t--------------------------------------------------\n\t\tconst siteData = {\n\t\t\tappTitle: 'Tech Book Club',\n\t\t\tpages: [\n\t\t\t\t{\n\t\t\t\t\ttitle: 'Home',\n\t\t\t\t\tpath: '/'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'Info',\n\t\t\t\t\tpath: '/info'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\n\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\tres.render('index', {siteData, currentPath: '/'});\n\t\t});\n\n\t\tapp.get('/info', (req: express.Request, res: express.Response) => {\n\t\t\tres.render('info', {siteData, currentPath: '/info'});\n\t\t});\t\t\n\t\t--------------------------------------------------\n\t- **index.ejs**\n\t\t-----------------------------------------\n\t\t<%-include('_header.ejs')%>\n\t\t<p>Welcome to this site.</p>\n\t\t<%-include('_footer.ejs')%>\t\t\n\t\t-----------------------------------------\n\t- **info.ejs**\n\t\t------------------------------------------\n\t\t<%-include('_header.ejs')%>\n\t\t<p>Books will be listed here.</p>\n\t\t<%-include('_footer.ejs')%>\t\t\n\t\t------------------------------------------\n\t- **_header.ejs**\n\t\t--------------------------------------\n\t\t<!DOCTYPE html>\n\n\t\t<head>\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t  href=\"css/main.css\">\n\t\t\t<title>\n\t\t\t\t<%=siteData.appTitle%>\n\t\t\t</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>\n\t\t\t\t<%=siteData.appTitle%>\n\t\t\t</h1>\n\t\t\t<nav>\n\t\t\t\t<% siteData.pages.forEach(page=> {%>\n\t\t\t\t\t<%if(page.path===currentPath) {%>\n\t\t\t\t\t\t<a href=\"<%=page.path%>\" class=\"active\">\n\t\t\t\t\t\t\t<%=page.title%>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t<%} else {%>\n\t\t\t\t\t\t<a href=\"<%=page.path%>\">\n\t\t\t\t\t\t\t<%=page.title%>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t<%}%>\n\t\t\t\t<%})%>\n\t\t\t</nav>\t\t\n\t\t--------------------------------------\n\t- **_footer.ejs**\n\t\t------------------------------------------\n\t\t</body>\n\t\t</html>\t\t\n\t\t------------------------------------------\n\t- **main.scss** - add Sass with VSCode **Live Sass Compiler** extension\n\t\t---------------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tpadding: 0 1rem;\n\t\t\tfont-family: sans-serif;\n\n\t\t\ta {\n\t\t\t\tcolor: rgb(213, 179, 66);\n\t\t\t}\n\n\t\t\tnav {\n\t\t\t\tbackground-color: #222;\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\t\t\t\tpadding: .7rem;\n\t\t\t\tborder-radius: .4rem;\n\n\t\t\t\ta {\n\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\t\t\t\ta.active {\n\t\t\t\t\tcolor: rgb(228, 228, 109);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t---------------------------------------------\n\t- your site will now work like this:#gif#thesitewojnow\n- **==> STEP 8. Display data from another API <==**\n\t- install fetch\n\t\t- `npm i node-fetch`\n\t\t- if you want to use axios, see [this bug fix](https://github.com/edwardtanguay/et001-ejs-basic/blob/caee3c3f506f0a9fb8d325c65bc83cd357ab96f2/src/server.ts#L16)\n\t- **server.ts**\n\t\t------------------------------------------------\n\t\timport fetch from 'node-fetch';\n\n\t\tconst books = await (await fetch(url)).json();\n\n\t\tconst siteData = {\n\t\t\tappTitle: 'Tech Book Club',\n\t\t\tpages: [\n\t\t\t\t{\n\t\t\t\t\ttitle: 'Home',\n\t\t\t\t\tpath: '/'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'Info',\n\t\t\t\t\tpath: '/info'\n\t\t\t\t}\n\t\t\t],\n\t\t\tbooks\n\t\t}\n\t\t------------------------------------------------\n\t- **index.ejs**\n\t\t---------------------------------------\n\t\t<p>We currently have <%=siteData.books.length%> books.</p>\n\t\t---------------------------------------\n\t- **info.ejs**\n\t\t--------------------------------------------\n\t\t<p>These are our current books:</p>\n\t\t<div class=\"books\">\n\t\t\t<% siteData.books.forEach(book=> {%>\n\t\t\t\t<img src=\"https://edwardtanguay.vercel.app/share/images/techBooks/<%=book.idCode%>.jpg\"/>\n\t\t\t<%})%>\n\t\t</div>\n\t\t--------------------------------------------\n\t- **main.scss**\n\t\t--------------------------------------\n\t\t.books {\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n\t\t\tgap: 1rem;\n\n\t\t\timg {\n\t\t\t\twidth: 8rem;\n\t\t\t\theight: 11rem;\n\t\t\t\tbox-shadow: 2px 2px 5px #666;\n\t\t\t}\n\t\t}\t\t\n\t\t--------------------------------------\n- **==> STEP 9. Enable user to click on book to display its information <==**\n\t- **server.ts**\n\t\t--------------------------------------------\n\t\tapp.get('/info', (req: express.Request, res: express.Response) => {\n\t\t\tres.render('info', { siteData, currentPath: '/info', idCode: null });\n\t\t});\n\n\t\tapp.get('/info/:idCode', (req: express.Request, res: express.Response) => {\n\t\t\tconst idCode = req.params.idCode;\n\t\t\tres.render('info', { siteData, currentPath: '/info', idCode, book: books.find((m: any) => m.idCode === idCode) })\n\t\t});\t\t\n\t\t--------------------------------------------\n\t- **info.ejs**\n\t\t------------------------------------------\n\t\t<%if(idCode === null) {%>\n\t\t\t<p>These are our current books:</p>\n\t\t\t<div class=\"books\">\n\t\t\t\t<% siteData.books.forEach(book=> {%>\n\t\t\t\t\t<a href=\"/info/<%=book.idCode%>\"><img src=\"https://edwardtanguay.vercel.app/share/images/techBooks/<%=book.idCode%>.jpg\" /></a>\n\t\t\t\t<%})%>\n\t\t\t</div>\n\t\t<%} else {%>\n\t\t\t<div class=\"singleBook\">\n\t\t\t\t<img src=\"https://edwardtanguay.vercel.app/share/images/techBooks/<%=book.idCode%>.jpg\" />\n\t\t\t\t<div class=\"info\">\n\t\t\t\t\t<div class=\"title\"><%=book.title%></div>\n\t\t\t\t\t<div class=\"description\"><%=book.description%></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<%}%>\t\t\n\t\t------------------------------------------\n\t- **_header.ejs**\n\t\t--------------------------------\n\t\t<link rel=\"stylesheet\" href=\"/css/main.css\">\t\t\n\t\t--------------------------------\n\t- **main.scss**\n\t\t---------------------------------\n\t\t.singleBook {\n\t\t\tmargin-top: 1.5rem;\n\t\t\tdisplay: flex;\n\t\t\tgap: 1rem;\n\n\t\t\timg {\n\t\t\t\twidth: 11rem;\n\t\t\t\tbox-shadow: 2px 2px 5px #666;\n\t\t\t}\n\n\t\t\t.info {\n\t\t\t\t.title {\n\t\t\t\t\tfont-size: 1.8rem;\n\t\t\t\t\tcolor: rgb(228, 222, 203);\n\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t}\n\n\t\t\t\t.description {\n\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\tcolor: #888;\n\t\t\t\t\tfont-style: italic;\n\t\t\t\t\twidth: 30rem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t---------------------------------\n\t- changed Info to Books\n\t- your site should now work like this:#gif#withallbooks\n- **==> STEP 10. Publish at Cyclic.sh <==**\n\t- trying at Cyclic.sh\n\t\t- **package.json**\n\t\t\t------------------------------\n\t\t\t\"start\": \"npm i && npm run build && node dist/server.js\",\n\t\t\t------------------------------\n\t\t- https://app.cyclic.sh\n\t\t- [Deploy]\n\t\t- Link Your Own\n\t\t- Search you repositories...\n\t\t- select repository\n\t\t- connect\n\t\t- approve and install\n\t\t- Cyclic gives me an error:##theerroroncyclic\n\t- trying at Render.com\n\t\t- Dashboard\n\t\t- New\n\t\t- Connect\n\t\t- `npm install`\n\t\t- `node dist/server.js`\n\t\t- got 502 error\n\t\t- tried:\n\t\t\t- Build Command: `npm install && npm run build`\n\t\t\t- Start Command: `npm start`\n\t\t- **WORKED**\n\t\t\t- is live here: https://et001-ejs-basic.onrender.com\n\t\t\t- but it sleeps after 15 minutes with an initial start of up to 30 seconds\n\t\t\t- and after that, it gets an Internal Server Error##internalser\n\t- **deploying at Hetzner (Debian/nginx/certbot/pm2/domainssaubillig.de)**\n\t\t- login to Debian machine\n\t\t- `cd /home/edward/projects`\n\t\t- `git clone git@github.com:edwardtanguay/et001-ejs-basic.git`\n\t\t- setup pm2 service\n\t\t\t- `pm2 list`\n\t\t\t- `pm2 start --name \"et001-ejs-basic\" npm -- start`\n\t\t\t- `pm2 list`##thepm2list\n\t\t- setup nginx entry\n\t\t\t- `cd /etc/nginx/conf.d`\n\t\t\t- copy and change a similar .conf file\n\t\t\t\t- created **et001-ejs-basic.conf**##thenginxwingt23\n\t\t- created deploy script in **package.json**##madedeploysjd2\n\t\t- `npm run deploy`\n\t\t- currently runs at http://tanguay.eu:3891\n\t\t- at https://mein.domainssaubillig.de set up subdomain: et001-ejs-basic.tanguay.eu\n\t\t- creating https\n\t\t\t- `cd /etc/nginx/conf.d`\n\t\t\t- `sudo certbot --nginx` and choose number of iste##thecererij\n\t\t\t- it changes the file: et001-ejs-basic.conf\n\t\t- works: https://et001-ejs-basic.tanguay.eu\n- **==> STEP 11. Optimize SEO and social media links for each book <==**\n\t- see: https://css-tricks.com/essential-meta-tags-social-media\n\t- **_header.ejs**\n\t\t--------------------------------------------------\n\t\t<%if(idCode !== null) {%>\n\t\t<meta property=\"og:title\"\n\t\t\t  content=\"<%=book.title%>\">\n\t\t<meta property=\"og:type\"\n\t\t\t  content=\"book\" />\n\t\t<meta property=\"og:description\"\n\t\t\t  content=\"<%=book.description%>\">\n\t\t<meta property=\"og:image\"\n\t\t\t  content=\"https://edwardtanguay.vercel.app/share/images/techBooks/<%=book.idCode%>.jpg\">\n\t\t<meta property=\"og:url\"\n\t\t\t  content=\"https://et001-ejs-basic.onrender.com/<%=book.idCode%>\">\n\t\t<meta name=\"twitter:card\"\n\t\t\t  content=\"summary_large_image\">\n\t\t<%}%>\t\t\t\t\n\t\t--------------------------------------------------\n\t- the social media links should look like this:##thesocialmedia","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-12 21:09:14","systemWhoCreated":"systemUnknown"},{"id":662,"category":"Node/Express API","title":"Create fullstack API CRUD job site (login - delete/edit/add) and deploy to Hetzner","body":"- **what we will build**\n\t- this project enables developers to create a full-stack backend/frontend CRUD application and deploy it online, but **without yet knowledge of databases or authentication**\n\t- therefore we need a simplistic database and authentication solution\n\t\t- the database is a JSON file accessed by lowdb\n\t\t- authentication is simply a PIN stored as environment variable in the backend \n\t\t\t- the admin will have to identify themselves each time they want to log in, edit or add to the site\n\t- this howto creates a site\n\t\t- that is fullstack with a frontend and backend\n\t\t- **ES6 and TypeScript** are in frontend and backend\n\t\t- has forms which access a backend API \n\t\t- has CRUD features: add/edit/delete\n\t\t- the project is actually a useful site to help anyone search for jobs\n\t\t- frontend and backend are hosted on a Debian Linux box at Hetzner\n\t- we will start with an advanced stage of this project which already shows jobs on the frontend which have a **Delete** button\n\t- in this Howto we will\n\t\t- implement an **Edit** button\n\t\t- implement an **Add** button\n\t\t- implement simple authorization security with PIN\n\t\t- will publish to a Debian machine at Hetzner \n\t\t\t- frontend\n\t\t\t- backend\n- final project\n\t- the code to the project is here:\n\t\t- https://github.com/edwardtanguay/getajob007-backend\n\t\t- https://github.com/edwardtanguay/getajob007-frontend\n\t- the final project will look like this: #gif#getajobdemo\n- **==> STEP 1. Set up site from previous version <==**\n\t- go to your projects folder \n\t- in it create a project directory, e.g. **getajob007** and inside create two directories:\n\t\t- getajob007-backend\n\t\t- getajob007-frontend\n\t- then clone these two repositories into the two directories you created respectively\n\t\t- https://github.com/edwardtanguay/getajob006-backend\n\t\t- https://github.com/edwardtanguay/getajob006-frontend \n\t- for each\n\t\t- delete the local Git repository and create a new one\n\t\t\t- `rm -rf .git`\n\t\t\t- `git init -b main`\n\t\t- start in VSCode\n\t\t\t- `code .`\n\t\t- install node_modules\n\t\t\t- `npm i`\n\t\t- start project\n\t\t\t- `npm start`\n\t\t- do initial commit \n\t\t- set color of each editor \n\t\t\t- use [the Peacock extension](https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock)\n\t\t\t\t- **F1** > **Peacock: Enter a Color**##theentercolor\n\t\t\t- backend is **backend blue**\n\t\t\t\t- color: `navy`\n\t\t\t- frontend is **frontend fuchsia**\n\t\t\t\t- color: `purple`\n\t\t\t- your editors should look like this:##thetwocolorsosd\n\t- your site should look like this:##thegetjobstart\n- **==> STEP 2. EDIT BUTTON: implement userIsEditing and refactor into two components <==**\n\t- in **appContext.tsx** decorate jobs with **userIsEditing**\n\t\t-------------------------------------------------\n\t\tconst loadJobs = async () => {\n\t\t\tconst rawJobs = (await axios.get(`${backendUrl}/jobs`)).data;\n\t\t\tconst _jobs: IJob[] = [];\n\t\t\trawJobs.forEach((rawJob:any) => {\n\t\t\t\tconst _job: IJob = {\n\t\t\t\t\t...rawJob,\n\t\t\t\t\tuserIsEditing: true\n\t\t\t\t}\n\t\t\t\t_jobs.push(_job);\n\t\t\t})\n\t\t\tsetJobs(_jobs);\n\t\t};\n\t\t-------------------------------------------------\n\t- in **interfaces.ts** add property to IJob\n\t\t---------------------------------------\n\t\tuserIsEditing: boolean;\n\t\t---------------------------------------\n\t- create **components/DisplayJob.tsx** with current job-display code from PageJobs.tsx\n\t- create **components/EditJob.tsx**\n\t\t--------------------------------------------\n\t\timport { IJob } from '../interfaces';\n\n\t\tinterface IProps {\n\t\t\tjob: IJob\n\t\t}\n\n\t\texport const EditJob = ({ job }: IProps) => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>editing job: {job.title}</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t--------------------------------------------\n\t- **PageJobs.tsx** - show appropriate component based on whether user is editing\n\t\t------------------------------------\n\t\t<React.Fragment key={job.id}>\n\t\t\t{job.userIsEditing ? (\n\t\t\t\t<EditJob job={job} />\n\t\t\t) : (\n\t\t\t\t<DisplayJob job={job} />\n\t\t\t)}\n\t\t</React.Fragment>\t\t\n\t\t------------------------------------\n\t- set **userIsEditing: true** and page should look like this:##thetruekjokj\n- **==> STEP 3. EDIT BUTTON: create Edit button to display styled form, and enable Clear button to return<==**\n\t- we will now create the edit form in EditJob.tsx\n\t- we will allow the user to toggled it with buttons **Edit** and **Clear**\n\t- the **Save** button will be disabled in this step\n\t- create form in **EditJob.tsx**\n\t\t-----------------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../appContext';\n\t\timport { IJob } from '../interfaces';\n\n\t\tinterface IProps {\n\t\t\tjob: IJob;\n\t\t}\n\n\t\texport const EditJob = ({ job }: IProps) => {\n\t\t\tconst { jobs, handleChangeFormField, handleToggleEditStatus } =\n\t\t\t\tuseContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<form>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend>Editing Job</legend>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Title</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={job.editItem.title}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeFormField(\n\t\t\t\t\t\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\t\t\t\t\t\tjob,\n\t\t\t\t\t\t\t\t\t\t\t'title'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Company</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={job.editItem.company}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeFormField(\n\t\t\t\t\t\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\t\t\t\t\t\tjob,\n\t\t\t\t\t\t\t\t\t\t\t'company'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>URL</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={job.editItem.url}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeFormField(\n\t\t\t\t\t\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\t\t\t\t\t\tjob,\n\t\t\t\t\t\t\t\t\t\t\t'url'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Description</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\tvalue={job.editItem.description}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeFormField(\n\t\t\t\t\t\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\t\t\t\t\t\tjob,\n\t\t\t\t\t\t\t\t\t\t\t'description'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Skill List</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={job.editItem.skillList}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeFormField(\n\t\t\t\t\t\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\t\t\t\t\t\tjob,\n\t\t\t\t\t\t\t\t\t\t\t'skillList'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<label>Next Todo</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={job.editItem.todo}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeFormField(\n\t\t\t\t\t\t\t\t\t\t\te.target.value,\n\t\t\t\t\t\t\t\t\t\t\tjob,\n\t\t\t\t\t\t\t\t\t\t\t'todo'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t<button onClick={() => handleToggleEditStatus(job)}>\n\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button disabled>Save</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t);\n\t\t};\n\t\t-----------------------------------------------\n\t- **DisplayJob.tsx**\n\t\t---------------------------------------------\n\t\tconst { jobs, handleDeleteJob, handleToggleEditStatus } = useContext(AppContext);\n\n\t\t<button className=\"edit\" onClick={() => handleToggleEditStatus(job)}>Edit</button>\n\t\t<button className=\"delete\" onClick={() => handleDeleteJob(job)}>Delete</button>\t\t\n\t\t---------------------------------------------\n\t- **appContext.tsx**\n\t\t---------------------------------------------------\n\t\thandleChangeFormField: (\n\t\t\tvalue: string,\n\t\t\tjob: IJob,\n\t\t\tfieldIdCode: string\n\t\t) => void;\n\t\thandleToggleEditStatus: (job: IJob) => void;\t\t\n\n\t\teditItem: {\n\t\t\ttitle: rawJob.title,\n\t\t\tcompany: rawJob.company,\n\t\t\turl: rawJob.url,\n\t\t\tdescription: rawJob.description,\n\t\t\tskillList: rawJob.skillList,\n\t\t\ttodo: rawJob.todo,\n\t\t},\n\n\t\tconst handleChangeFormField = (\n\t\t\tvalue: string,\n\t\t\tjob: IJob,\n\t\t\tfieldIdCode: string\n\t\t) => {\n\t\t\tjob.editItem[fieldIdCode as keyof IJobEditItem] = value;\n\t\t\tsetJobs([...jobs]);\n\t\t};\n\n\n\t\tconst handleToggleEditStatus = (job: IJob) => {\n\t\t\tjob.userIsEditing = !job.userIsEditing;\n\t\t\tsetJobs([...jobs]);\n\t\t};\n\t\t---------------------------------------------------\n\t- **App.scss**\n\t\t-----------------------------------------------\n\t\tform {\n\t\t\tfieldset {\n\t\t\t\tmargin: 0 2em 2em 0;\n\t\t\t\tpadding: 1.5em 2em 2em 2em;\n\t\t\t\tborder: solid 1px #ccc;\n\t\t\t\tborder-radius: 6px;\n\t\t\t\twidth: 50rem;\n\t\t\t\tmin-width: 200px;\n\t\t\t\tbackground-color: rgb(45, 91, 45);\n\n\n\t\t\t\t.row:not(:first-of-type) {\n\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t}\n\n\t\t\t\tlegend {\n\t\t\t\t\tpadding: 0 .25em;\n\t\t\t\t\tcolor: rgb(200, 169, 110) !important;\n\t\t\t\t}\n\n\t\t\t\tlabel {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tmargin-bottom: .3rem;\n\n\t\t\t\t\t&;after {\n\t\t\t\t\t\tcontent: ':';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tinput[type=text] {\n\t\t\t\t\tpadding: .5em;\n\t\t\t\t\tborder: 1px solid #999;\n\t\t\t\t\twidth: 96%;\n\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\tfont-family: courier;\n\t\t\t\t}\n\n\t\t\t\ttextarea {\n\t\t\t\t\twidth: 97%;\n\t\t\t\t\theight: 8rem;\n\t\t\t\t\tfont-family: courier;\n\t\t\t\t\tfont-size: .8rem;\n\t\t\t\t}\n\n\t\t\t\t.buttonRow {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\tpadding-right: 1rem;\n\n\t\t\t\t\tbutton {\n\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\tpadding: .3rem;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- your job page should work like this:#gif#showtheeditclearform\n- **==> STEP 4. EDIT BUTTON: Program backend route to save the edited object and enable Save button <==**\n\t- in frontend\n\t\t- **test.rest**\n\t\t\t----------------------------------------\n\t\t\t### save an edited job\n\t\t\tPATCH {{url}}/job\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"id\": 1,\n\t\t\t\t\"title\": \"ttt\",\n\t\t\t\t\"company\": \"ccc\",\n\t\t\t\t\"url\": \"uuu\",\n\t\t\t\t\"description\": \"ddd\",\n\t\t\t\t\"skillList\": \"sss\",\n\t\t\t\t\"todo\": \"ttt\"\n\t\t\t}\n\t\t\t----------------------------------------\n\t- in backend\n\t\t- **server.ts**\n\t\t\t-----------------------------------------------\n\t\t\timport { IEditedJob, IJob } from './interfaces.js';\n\n\t\t\tapp.use(express.json());\n\n\t\t\tapp.patch('/job', async (req: express.Request, res: express.Response) => {\n\t\t\t\tconst editedJob: IEditedJob = req.body;\n\t\t\t\tconst job: IJob = await model.saveEditedJob(editedJob);\n\t\t\t\tif (job) {\n\t\t\t\t\tres.status(200).send('ok');\n\t\t\t\t} else {\n\t\t\t\t\tres.status(500).send('job did not save');\n\t\t\t\t}\n\t\t\t});\n\t\t\t-----------------------------------------------\n\t\t- **model.ts**\n\t\t\t-------------------------------------------\n\t\t\timport { IEditedJob} from './interfaces.js';\n\n\t\t\texport const saveEditedJob = async (editedJob: IEditedJob) => {\n\t\t\t\tconst job: IJob = db.data.jobs.find((m: IJob) => m.id === editedJob.id);\n\n\t\t\t\tjob.title = editedJob.title;\n\t\t\t\tjob.company = editedJob.company;\n\t\t\t\tjob.url = editedJob.url;\n\t\t\t\tjob.description = editedJob.description;\n\t\t\t\tjob.skillList = editedJob.skillList;\n\t\t\t\tjob.todo = editedJob.todo;\n\n\t\t\t\tawait db.write();\n\t\t\t\treturn job;\n\t\t\t}\n\t\t\t-------------------------------------------\n\t\t- **interfaces.ts**\n\t\t\t-----------------------------------------------\n\t\t\texport interface IEditedJob {\n\t\t\t\tid: number,\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t\tskillList: string;\n\t\t\t\ttodo: string;\n\t\t\t}\n\t\t\t-----------------------------------------------\n\t- in frontend\n\t\t- **EditJob.tsx**\n\t\t\t----------------------------------------------------\n\t\t\tconst { jobs, handleChangeFormField, handleToggleEditStatus, handleSaveEditedJob } = useContext(AppContext);\n\n\t\t\t<div className=\"buttonRow\">\n\t\t\t\t<button type=\"button\" onClick={() => handleToggleEditStatus(job)}>Clear</button>\n\t\t\t\t<button type=\"button\" onClick={() => handleSaveEditedJob(job)}>Save</button>\n\t\t\t</div>\n\t\t\t----------------------------------------------------\n\t\t- **interfaces.ts**\n\t\t\t-------------------------------------------\n\t\t\texport interface IJobEditItem {\n\t\t\t\tid: number|string;\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **appContext.tsx**\n\t\t\t--------------------------------------------\n\t\t\thandleSaveEditedJob: (job: IJob) => void;\t\t\t\n\n\t\t\teditItem: {\n\t\t\t\tid: rawJob.id,\n\n\t\t\tconst handleSaveEditedJob = async (job: IJob) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios.patch(`${backendUrl}/job`, job.editItem,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t);\n\n\t\t\t\t\tif ((res.status = 200)) {\n\t\t\t\t\t\tconsole.log('loading jobs')\n\t\t\t\t\t\tawait loadJobs();\n\t\t\t\t\t\tawait loadTodos();\n\t\t\t\t\t\tawait loadSkillTotals();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t}\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconsole.error(`ERROR: ${e.message}`);\n\t\t\t\t\tconst message = e.response.data.message;\n\t\t\t\t\tif (message) {\n\t\t\t\t\t\tconsole.error(`ERROR: ${message}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\n\t\t\thandleSaveEditedJob\t\t\t\n\t\t\t--------------------------------------------\n\t- your form will now save data like this:#gif#thechecktheform\n- **==> STEP 5. Add PIN security to Add and Edit buttons <==**\n\t- **ADD** functionality\n\t\t- **BACKEND**\n\t\t\t- **server.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tapp.post('/job', async (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst addedJob: IEditedJob = req.body.job;\n\t\t\t\t\tconst pin: string = req.body.pin;\n\t\t\t\t\tif (pin !== process.env.BACKEND_PIN) {\n\t\t\t\t\t\tres.status(401).send({\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tstatusIdCode: 'badPin',\n\t\t\t\t\t\t\tmessage: `Bad pin.`\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst success = await model.saveAddedJob(addedJob);\n\t\t\t\t\t\tif (success) {\n\t\t\t\t\t\t\tres.status(200).send('ok');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.status(500).send('job did not save');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\t\t\t\n\t\t\t\t--------------------------------------------\n\t\t\t- **model.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\texport const saveAddedJob = async (addedJob: IEditedJob) => {\n\t\t\t\t\tconst totalBefore = db.data.jobs.length;\n\t\t\t\t\taddedJob.id = tools.getNextId(db.data.jobs);\n\t\t\t\t\tdb.data.jobs.push(addedJob);\n\t\t\t\t\tawait db.write();\n\t\t\t\t\tconst totalAfter = db.data.jobs.length;\n\t\t\t\t\treturn totalAfter === totalBefore + 1;\n\t\t\t\t}\n\t\t\t\t---------------------------------------------\n\t\t- **FRONTEND**\n\t\t\t- **PageJobs.tsx**\n\t\t\t\t----------------------------------------\n\t\t\t\t{isAdmin && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{!anyJobIsBeingEdited() && !isAdding && (\n\t\t\t\t\t\t\t<button onClick={toggleAddingForm}>Add</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\t\t\t\t\n\t\t\t\t----------------------------------------\n\t\t\t- **appContext.tsx**\n\t\t\t\t-----------------------------------\n\t\t\t\tconst toggleAddingForm = () => {\n\t\t\t\t\tsetIsAdding(!isAdding);\n\t\t\t\t};\t\t\t\t\n\t\t\t\t-----------------------------------\n\t\t\t- **pageJobs.tsx**\n\t\t\t\t------------------------------\n\t\t\t\t{isAdding && (\n\t\t\t\t\t<JobForm job={addingJob} formAction={FormAction.Add} />\n\t\t\t\t)}\t\t\t\t\n\t\t\t\t------------------------------\n\t\t- **JobForm.tsx**\n\t\t\t----------------------------------------\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from '../appContext';\n\t\t\timport { IJob, FormAction } from '../interfaces';\n\t\t\timport { JobFormRowLine } from './JobFormRowLine';\n\t\t\timport { JobFormRowParagraph } from './JobFormRowParagraph';\n\n\t\t\tinterface IProps {\n\t\t\t\tjob: IJob;\n\t\t\t\tformAction: FormAction;\n\t\t\t}\n\n\t\t\texport const JobForm = ({ job, formAction }: IProps) => {\n\t\t\t\tconst {\n\t\t\t\t\thandleToggleEditStatus,\n\t\t\t\t\thandleSaveEditedJob,\n\t\t\t\t\thandleToggleAddStatus,\n\t\t\t\t\thandleSaveAddedJob,\n\t\t\t\t\thandleChangePin,\n\t\t\t\t\tpin,\n\t\t\t\t} = useContext(AppContext);\n\n\t\t\t\treturn (\n\t\t\t\t\t<form className={formAction.toString()}>\n\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t{formAction === FormAction.Edit && <legend>Editing Job</legend>}\n\t\t\t\t\t\t\t{formAction === FormAction.Add && <legend>Adding Job</legend>}\n\n\t\t\t\t\t\t\t<JobFormRowLine\n\t\t\t\t\t\t\t\tlabel=\"Title\"\n\t\t\t\t\t\t\t\tfieldIdCode=\"title\"\n\t\t\t\t\t\t\t\tvalue={job.editItem.title}\n\t\t\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<JobFormRowLine\n\t\t\t\t\t\t\t\tlabel=\"Company\"\n\t\t\t\t\t\t\t\tfieldIdCode=\"company\"\n\t\t\t\t\t\t\t\tvalue={job.editItem.company}\n\t\t\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<JobFormRowLine\n\t\t\t\t\t\t\t\tlabel=\"URL\"\n\t\t\t\t\t\t\t\tfieldIdCode=\"url\"\n\t\t\t\t\t\t\t\tvalue={job.editItem.url}\n\t\t\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<JobFormRowParagraph\n\t\t\t\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\t\t\t\tfieldIdCode=\"description\"\n\t\t\t\t\t\t\t\tvalue={job.editItem.description}\n\t\t\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<JobFormRowLine\n\t\t\t\t\t\t\t\tlabel=\"Skill List\"\n\t\t\t\t\t\t\t\tfieldIdCode=\"skillList\"\n\t\t\t\t\t\t\t\tvalue={job.editItem.skillList}\n\t\t\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<JobFormRowLine\n\t\t\t\t\t\t\t\tlabel=\"Next Todo\"\n\t\t\t\t\t\t\t\tfieldIdCode=\"todo\"\n\t\t\t\t\t\t\t\tvalue={job.editItem.todo}\n\t\t\t\t\t\t\t\tjob={job}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t\t{formAction === FormAction.Edit ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleToggleEditStatus(job)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<div className=\"saveButtonArea\">\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"PIN\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={pin}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChangePin(e.target.value)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={pin.trim() === ''}\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSaveEditedJob(job)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleToggleAddStatus()}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tClear\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<div className=\"saveButtonArea\">\n\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"PIN\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={pin}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleChangePin(e.target.value)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tdisabled={pin.trim() === ''}\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"save\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleSaveAddedJob()}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</form>\n\t\t\t\t);\n\t\t\t};\t\t\n\t\t\t----------------------------------------\n\t- **EDIT** and **DELETE** functionality \n\t\t- have parallel functionality as **ADD**\n\t- **LOGIN** functionality\n\t\t- **Login.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { useContext, useEffect } from 'react';\n\t\t\timport { AppContext } from '../appContext';\n\t\t\timport '../styles/pageLogin.scss';\n\n\t\t\texport const PageLogin = () => {\n\t\t\t\tconst { pin, handleChangePin, prePageLoad, isAdmin, handleIdentifyAsAdminButton, handleLogoutButton } =\n\t\t\t\t\tuseContext(AppContext);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\tprePageLoad();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"page pageLogin\">\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t\t<legend>Identify as Admin</legend>\n\n\t\t\t\t\t\t\t\t{!isAdmin ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t<label>Pin</label>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={pin}\n\t\t\t\t\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleChangePin(e.target.value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<button disabled={pin.trim() === ''} type=\"button\" onClick={() => handleIdentifyAsAdminButton()}>Identify</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"message\">\n\t\t\t\t\t\t\t\t\t\t\tOnce you identify as admin with your PIN, you\n\t\t\t\t\t\t\t\t\t\t\twill see edit/add/delete buttons next to which\n\t\t\t\t\t\t\t\t\t\t\tyou will have to enter your PIN each time you\n\t\t\t\t\t\t\t\t\t\t\tuse them.\n\t\t\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div className=\"messageLoggedIn\">\n\t\t\t\t\t\t\t\t\t\t\t<div>PIN is correct.<br/><br/>You are identified as admin.<br /><br />Each time you want to change data on this site, you will have to type in your PIN again in the input box next to the appropriate button.</div>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={handleLogoutButton}>Logout</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------------\n\t\t- **AppContext.tsx**\n\t\t\t------------------------------------------\n\t\t\tconst handleIdentifyAsAdminButton = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axios.post(\n\t\t\t\t\t\t`${backendUrl}/identify-as-admin`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpin,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tif (res.status === 200) {\n\t\t\t\t\t\tsetIsAdmin(true);\n\t\t\t\t\t\tawait loadJobs();\n\t\t\t\t\t\tawait loadTodos();\n\t\t\t\t\t\tawait loadSkillTotals();\n\t\t\t\t\t\tsetPin('');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotify(`There was an error.`);\n\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t}\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconst message = e.response.data.message;\n\t\t\t\t\tnotify(message);\n\t\t\t\t\tsetPin('');\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t\t------------------------------------------\n- **==> STEP 6. Publish backend to Hetzner Debian/nginx box under subdomain <==**\n\t- **6.1. Setup subdomain**\n\t\t- I have my tanguay.eu domain at Domainssaubillig\n\t\t\t- if you have your domain at Hetzner, the process is similar, start here, click on **konsoleH**:##ifkonsoleh\n\t\t\t\t- Einstellungen\n\t\t\t\t- DNS-Verwaltung##verwalkjd\n\t\t- login at: https://mein.domainssaubillig.de/interface.html\n\t\t- [bearbeiten]\n\t\t- Subdomains\n\t\t- [Neue Subdomain anlegen]##andthesubdo\n\t\t- type in name of subdomain, e.g. **getajob007-backend**\n\t\t- [Subdomain anlegen]\n\t\t- [bearbeiten]\n\t\t- DNS-Einträge\n\t\t- enter your IP as **IPv4**##theip4jsi\n\t\t- [speichern]\n\t\t- you are finished, close window\n\t- **6.2. Prepare local backend site for deployment**\n\t\t- choose a port to run your app on\n\t\t\t- if you have a number of applications running on various ports already via pm2, use this command to see which ports are being used\n\t\t\t\t- `ps aux | grep port`\n\t\t- **.env** needs to have these variables\n\t\t\t----------------------------\n\t\t\tPIN = 1234\n\t\t\tPORT = 3501\n\t\t\t----------------------------\n\t\t- because it takes longer (up to 60 seconds) to compile TypeScript on the server at Hetzner (Debian) for some reason, we want to compile locally and then push the `dist` directory to the server\n\t\t\t- in your **.gitignore**, make sure you do not have `dist` \n\t\t\t\t-----------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.vscode\n\t\t\t\t.env\t\t\t\n\t\t\t\t-----------------------------------\t\t\n\t\t- **package.json**\n\t\t\t--------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"npm run build && nodemon\",\n\t\t\t\t\"start\": \"node dist/server.js\",\n\t\t\t\t\"push\": \"npm run build && git add . && git commit -m \\\"predeploy\\\" && git push\",\n\t\t\t\t\"deploy\": \"git pull --no-rebase && npm i && pm2 restart getajob007-backend\",\n\t\t\t\t\"build\": \"tsc\"\n\t\t\t},\n\t\t\t--------------------------------------\n\t\t- push to GitHub with `npm run push`\n\t\t\t- this will commit everything and build the `dist` directory first\n\t- **6.3. Move files to Heztner server and test**\n\t\t- log in to Heztner machine\n\t\t- go to projects directory\n\t\t- pull directory from GitHub\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/getajob007-backend.git`\n\t\t- go into directory\n\t\t\t- `cd getajob007-backend`\n\t\t- create **.env** file on the server\n\t\t\t------------------------------------\n\t\t\tPIN = 1234\n\t\t\tPORT = 3501\n\t\t\t------------------------------------\n\t\t- test to see if your site works on the server\n\t\t\t- `npm i` - this will create **node_modules**\n\t\t\t- `npm start`\n\t\t\t- then go to url with port##theurlwithportijsd\n\t\t- your site should work at your **domain:port** via **http**\n\t- **6.4. Connect subdomain to site in Nginx**\n\t\t- stop your site (CTRL-C)\n\t\t- go to directory where Nginx saves all its website config files\n\t\t\t- `cd /etc/nginx/conf.d`\n\t\t- create conf file for your site: \n\t\t\t- `sudo vim getajob007-backend.tanguay.eu.conf` \n\t\t\t- **be sure to use the same port as you specified in your package.json**\n\t\t\t\t------------------------------------------------\n\t\t\t\tserver {\n\t\t\t\t\tserver_name getajob007-backend.tanguay.eu;\n\t\t\t\t\tlocation / {\n\t\t\t\t\t\tproxy_pass http://tanguay.eu:3501;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t------------------------------------------------\n\t\t- restart Nginx: `sudo systemctl restart nginx`\n\t\t- go back to your site directory and restart the site: `npm start`\n\t\t- confirm that your site can be accessed via your subdomain\n\t- **6.5. Register a https certificate for your subdomain with certbot**\n\t\t- stop your site (CTRL-C)\n\t\t- go back to the Nginx configuration directory\n\t\t\t- `cd /etc/nginx/conf.d`\n\t\t- run **certbot**\n\t\t\t- `sudo certbot --nginx`\n\t\t- choose the number listed next to the site for which you want to activate HTTPS\n\t\t- it will report that it has successfully activated the HTTPS certificate\n\t\t- go back to your site directory and restart the site: `npm start`\n\t\t\t- confirm that your site can be accessed via your subdomain with HTTPS\n\t- **6.6. Set up pm2 to run and manage your site in the background**\n\t\t- so that we don't need to keep manually starting our React app, let's register the app with pm2 and allow pm2 to start and run it as a service so that it runs in the background 24/7\n\t\t- stop your site (CTRL-C)\n\t\t- register your site with pm2\n\t\t\t- `pm2 start --name getajob007-backend npm -- start`\n\t\t\t- if it asks you to run `pm2 save` to synchronize, then do that as well\n\t\t- test that your site is running in the background\t\t\n- **==> STEP 7. Publish frontend on Hetzner Debian/nginx box under subdomain <==**\n\t- **7.1. Setup subdomain**\n\t\t- I have my tanguay.eu domain at Domainssaubillig\n\t\t\t- if you have your domain at Hetzner, the process is similar, start here, click on **konsoleH**:##ifkonsoleh\n\t\t\t\t- Einstellungen\n\t\t\t\t- DNS-Verwaltung##verwalkjd\n\t\t- login at: https://mein.domainssaubillig.de/interface.html\n\t\t- [bearbeiten]\n\t\t- Subdomains\n\t\t- [Neue Subdomain anlegen]##andthesubdo\n\t\t- type in name of subdomain, e.g. **getajob007**\n\t\t- [Subdomain anlegen]\n\t\t- [bearbeiten]\n\t\t- DNS-Einträge\n\t\t- enter your IP as **IPv4**##theip4jsi\n\t\t- [speichern]\n\t\t- you are finished, close window\n\t- **7.2. Prepare local frontend site for deployment**\n\t\t- choose a port to run your app on\n\t\t\t- if you have a number of applications running on various ports already via pm2, use this command to see which ports are being used\n\t\t\t\t- `ps aux | grep port`\n\t\t- **package.json**\n\t\t\t--------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"vite\",\n\t\t\t\t\"build\": \"tsc && vite build\",\n\t\t\t\t\"start\": \"vite preview --host --port 3502\",\n\t\t\t\t\"deploy\": \"git pull --no-rebase && npm i && npm run build && pm2 restart getajob007-tanguay-eu\",\n\t\t\t\t\"push\": \"git add . && git commit -m \\\"predeploy\\\" && git push\",\n\t\t\t\t\"cp\": \"node cli/cp.mjs\"\n\t\t\t},\n\t\t\t--------------------------------------\n\t\t- push to GitHub\n\t- **7.3. Move files to Hetzner server and test**\n\t\t- log in to Heztner machine\n\t\t- go to projects directory\n\t\t- pull directory from GitHub\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/getajob007-frontend.git`\n\t\t- create **.env** file, e.g.\n\t\t\t-------------------------------------\n\t\t\tVITE_BACKEND_URL = https://getajob007-backend.tanguay.eu\n\t\t\t-------------------------------------\n\t\t- test to see if your site works on the server\n\t\t\t- `cd getajob007-frontend`\n\t\t\t- `npm i`\n\t\t\t- `npm run build`\n\t\t\t- `npm start`\n\t\t- your site should work at your **domain:port** via **http**\n\t- **7.4. Connect subdomain to site in Nginx**\n\t\t- go to directory where Nginx saves all its website config files\n\t\t- `cd /etc/nginx/conf.d`\n\t\t- create conf file for your site: \n\t\t\t- `sudo vim getajob007.tanguay.eu.conf` \n\t\t\t- **be sure to use the same port as you specified in your package.json**\n\t\t\t\t------------------------------------------------\n\t\t\t\tserver {\n\t\t\t\t\tserver_name getajob007.tanguay.eu;\n\t\t\t\t\tlocation / {\n\t\t\t\t\t\tproxy_pass http://tanguay.eu:3502;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t------------------------------------------------\n\t\t- restart Nginx: `sudo systemctl restart nginx`\n\t\t- go back to your site directory and restart the site: `npm start`\n\t\t- confirm that your site can be accessed via your subdomain\n\t- **7.5. Register a https certificate for your subdomain with certbot**\n\t\t- stop your site (CTRL-C)\n\t\t- go back to the Nginx configuration directory\n\t\t\t- `cd /etc/nginx/conf.d`\n\t\t- run **certbot**\n\t\t\t- `sudo certbot --nginx`\n\t\t- choose the number listed next to the site for which you want to activate HTTPS\n\t\t- it will report that it has successfully activated the HTTPS certificate\n\t\t- go back to your site directory and restart the site: `npm start`\n\t\t- confirm that your site can be accessed via your subdomain with HTTPS\n\t- **7.6. Set up pm2 to run and manage your site in the background**\n\t\t- so that we don't need to keep manually starting our React app, let's register the app with pm2 and allow pm2 to start and run it as a service so that it runs in the background 24/7\n\t\t- stop your site (CTRL-C)\n\t\t- register your site with pm2\n\t\t\t- `pm2 start --name getajob007-frontend npm -- start`\n\t\t\t- if it asks you to run `pm2 save` to synchronize, then do that as well\n\t\t- your site will now be running in the background\n\t- **7.7 Make local changes in your code and redeploy**\n\t\t- to redploy changes means basically to push to GitHub and run an npm script on the server\n\t\t- make a change in your local code\n\t\t- push to GitHub\n\t\t- on your Hetzner server in your project directory run: `npm run deploy`\n\t\t- you will see your change online","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-15 00:01:00","systemWhoCreated":"systemUnknown"},{"id":663,"category":"Hetzner","title":"Deploy a frontend React site to a subdomain on a Hetzner Debian machine with Nginx/pm2/certbot","body":"- **what we will do**\n\t- we have a React site created with Vite that we want to publish to a subdomain: jobs.tanguay.eu\n\t- the site is frontend-only, reads JSON files via fetch/axios and displays them on a single page\n\t- the code for this site is here: https://github.com/edwardtanguay/jobs-tanguay-eu\n\t- this howto assumes you have the following: a Hetzner machine with Debian or Ubuntu Linux with Nginx, pm2 and certbot installed, if you need to install any of these, see these howtos:\n\t\t- Howto: [Set up a Debian machine at Hetzner](https://edwardtanguay.vercel.app/howtos?id=603)\n\t\t- Howto: [How to set up a HTML/CSS website with a HTTPS domain on a Debian machine at Hetzner with nginx and certbot](https://edwardtanguay.vercel.app/howtos?id=605)\n\t\t- Howto: [How to get a Node/Express API and a React Site running as subdomains on an Arch Linux machine at Hetzner with pm2 and Caddy](https://edwardtanguay.vercel.app/howtos?id=607) (for pm2)\n- **==> STEP 1. Create desired subdomain for your site <==**\n\t- I have my tanguay.eu domain at Domainssaubillig\n\t- login at: https://mein.domainssaubillig.de/interface.html\n\t- [bearbeiten]\n\t- Subdomains\n\t- [Neue Subdomain anlegen]##andthesubdo\n\t- type in name of subdomain\n\t- [Subdomain anlegen]\n\t- [bearbeiten]\n\t- DNS-Einträge\n\t- enter your IP as **IPv4**##theip4jsi\n\t- [speichern]\n\t- you are finished, close window\n- **==> STEP 2. Prepare local site for deployment <==**\n\t- **package.json**\n\t\t--------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"vite\",\n\t\t\t\"build\": \"tsc && vite build\",\n\t\t\t\"start\": \"vite preview --host --port 3500\",\n\t\t\t\"deploy\": \"git pull --no-rebase && npm i && npm run build && pm2 restart jobs-tanguay-eu\"\n\t\t},\n\t\t--------------------------------------\n\t- push to GitHub\n- **==> STEP 3. Move files to Heztner server and test <==**\n\t- log in to Heztner machine\n\t- go to projects directory\n\t- pull directory from GitHub\n\t\t- e.g. `git clone git@github.com:edwardtanguay/jobs-tanguay-eu.git`\n\t- test to see if your site works on the server\n\t\t- `npm i`\n\t\t- `npm run build`\n\t\t- `npm start`##thestartedok\n\t- your site should work at your **domain:port** via **http**##onlyontheisjid\n- **==> STEP 4. Connect subdomain to site in Nginx <==**\n\t- go to directory where Nginx saves all its website config files\n\t- `cd /etc/nginx/conf.d`\n\t- create conf file for your site: \n\t\t- `sudo vim jobs.tanguay.eu.conf` \n\t\t- **be sure to use the same port as you specified in your package.json**\n\t\t\t------------------------------------------------\n\t\t\tserver {\n\t\t\t\tserver_name jobs.tanguay.eu;\n\t\t\t\tlocation / {\n\t\t\t\t\tproxy_pass http://tanguay.eu:3500;\n\t\t\t\t}\n\t\t\t}\n\t\t\t------------------------------------------------\n\t- restart Nginx: `sudo systemctl restart nginx`\n\t- go back to your site directory and restart the site: `npm start`\n\t- confirm that your site can be accessed via your subdomain:##viathesubdomainon\n- **==> STEP 5. Register a https certificate for your subdomain with certbot<==**\n\t- stop your site (CTRL-C)\n\t- go back to the Nginx configuration directory\n\t\t- `cd /etc/nginx/conf.d`\n\t- run **certbot**\n\t\t- `sudo certbot --nginx`\n\t- choose the number listed next to the site for which you want to activate HTTPS:##chooosethessiite\n\t- it will report that it has successfully activated the HTTPS certificate:##havethecerttti\n\t- go back to your site directory and restart the site: `npm start`\n\t- confirm that your site can be accessed via your subdomain with HTTPS:##thehttpsjob\n- **==> STEP 6. Set up pm2 to run and manage your site in the background <==**\n\t- so that we don't need to keep manually starting our React app, let's register the app with pm2 and allow pm2 to start and run it as a service so that it runs in the background 24/7\n\t- stop your site (CTRL-C)\n\t- register your site with pm2\n\t\t- `pm2 start --name jobs-tanguay-eu npm -- start`\n\t\t- if it asks you to run `pm2 save` to synchronize, then do that as well##thepm2setup\n\t- your site will now be running in the background##thehttpsjob\n- **==> STEP 7. Make local changes in your code and redeploy <==**\n\t- to redploy changes means basically to push to GitHub and run an npm script on the server\n\t- make a change in your local code##thejob2\n\t- push to GitHub\n\t- on your Hetzner server in your project directory run: `npm run deploy`\n\t- you will see your change online:##job2online\n- **==> STEP 8. Add meta tags to create social media link previews of your site <==**\n\t- if you want to share your site via social media, enter the following meta tags in the HEAD area of the index.html file\n\t- these instruction apply to the whole site assuming you have only one page\n\t\t- if you have React router, then look into [React Helmet](https://www.npmjs.com/package/react-helmet)\n\t- put the image (in this case **screenshot.png**) in `public/images`\n\t- in **index.html** add these lines inside the HEAD area\n\t\t---------------------------------------\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<meta property=\"og:title\" content=\"Get a Job\">\n\t\t<meta property=\"og:type\" content=\"site\" />\n\t\t<meta property=\"og:description\" content=\"Daily developer Jobs in Germany listed with information on skills needed and links to learn these skills\">\n\t\t<meta property=\"og:image\" content=\"https://jobs.tanguay.eu/images/screenshot.png\">\n\t\t<meta property=\"og:url\" content=\"https://jobs.tanguay.eu\">\n\t\t<meta name=\"twitter:card\" content=\"summary_large_image\">\t\t\n\t\t---------------------------------------\n\t- your social media link will look like this (Slack):##thesocianditwokr\n\t- **note: ** social media platforms cache your information, so if you change the text or the image, then be sure to send a suffix to your URL as in the screenshot here, e.g. `?9923` (some random number) so that you get the up-to-date data from your server instead of from the social-media platform's cache","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-17 17:17:15","systemWhoCreated":"systemUnknown"},{"id":664,"category":"Hetzner","title":"Publish frontend/backend TypeScript/ES6-Module sites online on Hetzner/Arch/Caddy/pm2 box","body":"- **what we will do**\n\t- publish the frontend and backend repositories of an existing full-stack site to an HTTPS subdomain on a Hetzner Arch Linux machine with Caddy web server and pm2\n\t- I did this already with a Debian/nginx machine, the howto is here:\n\t\t- https://edwardtanguay.vercel.app/howtos?id=662 (step 6)\t\n- **==> STEP 1. Set up frontend and backend locally <==**\n\t- the repositories are here:\n\t\t- https://github.com/edwardtanguay/getajob007-backend\n\t\t- https://github.com/edwardtanguay/getajob007-frontend\n\t- for both\n\t\t- clone\n\t\t- `npm i`\n\t\t- `npm run dev`\n- **==> STEP 2. Publish backend to Hetzner Arch Linux box under subdomain <==**\n\t- **2.1. Setup subdomain**\n\t\t- log into your Hetzner machine:\n\t\t\t- https://accounts.hetzner.com/login\n\t\t- choose **konsoleH**:##ifkonsoleh\n\t\t\t- Einstellungen\n\t\t\t- DNS-Verwaltung##verwalkjd\n\t\t\t- [DNS Panel öffnen]\n\t\t- create record with your chosen subdomain name##tehcreaetrepore\n\t\t- [Add record]\n\t- **2.2. Prepare local backend site for deployment**\n\t\t- since the backend already exists in a repository, there is nothing to do in this step\n\t\t- however, if you have changed anything in the backend locally since you cloned it above\n\t\t\t- push the changes to the repository now\n\t- **2.3. Move files to Heztner server and test**\n\t\t- log into your Hetzner machine via ssh\n\t\t- go to projects directory\n\t\t\t- on my Arch machine, this is `/var/www` since there was an issue with exposing home directories to the web\n\t\t- pull directory from GitHub\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/getajob007-backend.git`\n\t\t- go into directory\n\t\t\t- `cd getajob007-backend`\n\t\t- create **.env** file on the server\n\t\t\t------------------------------------\n\t\t\tPIN = 1234\n\t\t\tPORT = 3501\n\t\t\t------------------------------------\n\t\t- note your npm scripts in **package.json**:\n\t\t\t--------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"npm run build && nodemon\",\n\t\t\t\t\"start\": \"node dist/server.js\",\n\t\t\t\t\"deploy\": \"git pull --no-rebase && npm i && npm run build && pm2 restart getajob007-backend\",       \n\t\t\t\t\"build\": \"tsc\"\n\t\t\t},\t\t\t\n\t\t\t--------------------------------\n\t\t- test to see if your site works on the server\n\t\t\t- `npm i` - this will create **node_modules**\n\t\t\t- `npm run build` - this will create **dist**\n\t\t\t- `npm start` - this will run `dist/server.js`\n\t\t\t- then go to url with port\n\t\t- your site should work at your **domain:port** via **http**##getajobonline\n\t- **2.4. Register HTTPS subdomain in Caddy web server**\n\t\t- stop your site (CTRL-C)\n\t\t- open the file that Caddy uses to save all its website config files\n\t\t\t- `sudo vim /etc/caddy/Caddyfile`\n\t\t\t- create an entry for this backend \n\t\t\t\t--------------------------------------------\n\t\t\t\tgetajob007-backend.tkserv.eu {\n\t\t\t\t\treverse_proxy localhost:3501\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t- restart Caddy\n\t\t\t- `sudo systemctl restart caddy`\n\t\t- start your site again with `npm start`\n\t\t- note that with Caddy, both subdomain and the https certificate are automatically registered with this one entry##notethatksjdf\n\t- **2.5. Set up pm2 to run and manage your site in the background**\n\t\t- so that we don't need to keep manually starting our React app, let's register the app with pm2 and allow pm2 to start and run it as a service so that it runs in the background 24/7\n\t\t- stop your site (CTRL-C)\n\t\t- register your site with pm2\n\t\t\t- `pm2 start --name getajob007-backend npm -- start`\n\t\t\t- if it asks you to run `pm2 save` to synchronize, then do that as well\n\t\t- test that your site is running in the background\t\t\n\t- **2.6. Make a change to the backend in your dev environment and deploy it to production**\n\t\t- make a change in the `getApiInstructionsHtml` function in the **model.ts** file:##the222\n\t\t- commit and push change to GitHub\n\t\t- on the server, go to the directory of the site\n\t\t\t- `npm run deploy`\n\t\t- reload the site and you will see the change:##theks222orks\n\t\t- change it back the same way\n- **==> STEP 3. Publish frontend to Hetzner Arch Linux box under subdomain <==**\n\t- **3.1. Setup subdomain**\n\t\t- log into your Hetzner machine:\n\t\t\t- https://accounts.hetzner.com/login\n\t\t- choose **konsoleH**:##ifkonsoleh\n\t\t\t- Einstellungen\n\t\t\t- DNS-Verwaltung##verwalkjd\n\t\t\t- [DNS Panel öffnen]\n\t\t- create record with your chosen subdomain name, e.g. `getajob007` (without the `-frontend`)\n\t\t- [Add record]\n\t- **3.2. Prepare local backend site for deployment**\n\t\t- since the backend already exists in a repository, there is nothing to do in this step\n\t\t- however, if you have changed anything in the backend locally since you cloned it above\n\t\t\t- push the changes to the repository now\t\t\n\t- **3.3. Move files to Heztner server and test**\n\t\t- log into your Hetzner machine via ssh\n\t\t- go to projects directory\n\t\t\t- on my Arch machine, this is `/var/www` since there was an issue with exposing home directories to the web\n\t\t- pull directory from GitHub\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/getajob007-front.git`\n\t\t- go into directory\n\t\t\t- `cd getajob007-frontend`\n\t\t- create **.env** file, e.g.\n\t\t\t-------------------------------------\n\t\t\tVITE_BACKEND_URL = https://getajob007-backend.tkserv.eu\n\t\t\t-------------------------------------\n\t\t- test to see if your site works on the server\n\t\t\t- `npm i`\n\t\t\t- `npm run build`\n\t\t\t- `npm start`\n\t\t- your site should work at your **domain:port** via **http**:##shouldworkwotksjdifhttps\n\t- **3.4. Register HTTPS subdomain in Caddy web server**\n\t\t- stop your site (CTRL-C)\n\t\t- open the file that Caddy uses to save all its website config files\n\t\t\t- `sudo vim /etc/caddy/Caddyfile`\n\t\t\t- create an entry for this frontend \n\t\t\t\t--------------------------------------------\n\t\t\t\tgetajob007.tkserv.eu {\n\t\t\t\t\troot * /var/www/getajob007-frontend/dist\n\t\t\t\t\ttry_files {path} /index.html\n\t\t\t\t\tfile_server\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t- restart Caddy\n\t\t\t- `sudo systemctl restart caddy`\n\t\t- note that we are not serving this site via a PORT \n\t\t\t- we are merely mapping the subdomain to the /dist directory\n\t\t\t- therefore the site will now run without an `npm start` or setting pm2 up to serve it\n\t\t- note also that with Caddy, both subdomain and the https certificate are automatically registered with this one entry\n\t\t- your site will now run at your secure subdomain address:##thesecurisjdfs\n\t- **3.5. Make a change to the frontend in your dev environment and deploy it to production**\n\t\t- in your local dev environment, make a change to **App.tsx**##changetoapptsx222\n\t\t- commit and push change to GitHub\n\t\t- on the server, go to the directory of the site\n\t\t\t- `git pull && git run build`\n\t\t- reload the site and you will see the change:##thenew222k22k\n\t\t- change it back the same way","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-22 17:13:42","systemWhoCreated":"systemUnknown"},{"id":665,"category":"Node","title":"How to get the absolute path to a file on Windows, Mac and Linux","body":"- **tools.ts**\n\t---------------------------------------\n\timport path from 'path';\n\timport os from 'os';\n\timport * as tools from './tools.js';\n\n\tconst __dirname = path.resolve(path.dirname(''));\n\n\texport const absolutifyPathAndFileName = (pathAndFileName: string) => {\n\t\tif (tools.operatingSystemIsWindows()) {\n\t\t\treturn __dirname + '\\\\' + pathAndFileName.replace(/\\//g, '\\\\');\n\t\t} else {\n\t\t\treturn __dirname + '/' + pathAndFileName;\n\t\t}\n\t};\n\n\texport const operatingSystemIsWindows = () => {\n\t\treturn os.platform() === 'win32';\n\t};\n\t---------------------------------------\n- **model.ts**\n\t-------------------------------------\n\tconst dbAbsolutePathAndFileName = tools.absolutifyPathAndFileName('src/data/db.sqlite');\n\t-------------------------------------\n- this is the output from the three operating systems\n\t- **Windows**\n\t\t----------------------------------------\t\t\t\n\t\tos.platform = [win32]\n\t\tabsolute path = [C:\\ggg\\tanguayeu\\starters\\src\\data\\db.sqlite]\n\t\t----------------------------------------\n\t- **Ubuntu**\n\t\t----------------------------------------\t\t\t\n\t\tos.platform = [linux]\n\t\tabsolute path = [/home/edward/projects/test003/src/data/db.sqlite]\t\n\t\t----------------------------------------\n\t- **Mac**\n\t\t----------------------------------------\t\t\t\n\t\tos.platform = [darwin]\n\t\tabsolute path = [/Users/user001/Desktop/test/src/data/db.sqlite]\t\n\t\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2022-12-29 15:39:26","systemWhoCreated":"systemUnknown"},{"id":666,"category":"SQLite","title":"Create a read-only API that uses SQLite as its database and a React site that uses the API","body":"- **what we will build**\n\t- this howto describes step-by-step how to build this [Fullstack React site that uses backend API with SQLite data source](https://starters.tanguay.eu/list/sqliteReadonly)\n\t- code to this project is here:\n\t\t- Backend: https://github.com/edwardtanguay/et001-sqlite-api-site-backend\n\t\t- Frontend: https://github.com/edwardtanguay/et001-sqlite-api-site-frontend\n\t- you can find all the information about the finished site there including screenshots, animations of how it works and links to the frontend and backend repositories#gif#sqliteReadonly\n- **==> STEP 1. Setup fullstack frontend/backend <==**\n\t- create directory with site name, e.g. `et001-sqlite-api-site`\n\t- inside that, create\n\t\t- `et001-sqlite-api-site-backend`\n\t\t- `et001-sqlite-api-site-frontend`\n\t- set up backend\n\t\t- go into backend directory\n\t\t\t- `cd et001-sqlite-api-site-backend`\n\t\t- clone the repository of this starter: \n\t\t\t- https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi\n\t\t\t- `git clone git@github.com:edwardtanguay/backend-simple-readonly-json-api.git .` (note `.` at end since you are in the directory)\n\t\t- start VSCode\n\t\t\t- `code .`\n\t\t- go into VSCode terminal\n\t\t- reset Git repository\n\t\t\t- `rm -rf .git`\n\t\t\t- `git init -b main`\n\t\t\t- make initial commit\n\t\t- set up node_modules\n\t\t\t- `npm i`\n\t\t- start API\n\t\t\t- `npm run dev`\n\t\t\t- when you click on the URL, you should see this:##tehbooksiteaback\n- **==> STEP 2. Minimize and analyze backend <==**\n\t- `data/rawBooks.json`\n\t\t- delete\n\t- `logs`\n\t\t- analyze how custom logging middleware works, then delete all parts of it\n\t\t\t- basically all files and lines that contain **log** or **logger**\n\t- `config.ts`\n\t\t- we need only the PORT now\n\t\t- delete the second logger line\n\t- `interfaces.ts`\n\t\t- delete for now, will recreate later\n\t- `model.ts`\n\t\t- delete everything except the `getApiInstructions` function and customize accordingly\n\t\t\t------------------------------\n\t\t\texport const getApiInstructions = () => {\n\t\t\t\treturn `\n\t\t\t<style>\n\t\t\t\tbody {\n\t\t\t\t\tbackground-color: #444;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\tcolor: #fff;\n\t\t\t\t\tfont-family: courier;\n\t\t\t\t}\n\t\t\t\tcode {\n\t\t\t\t\tbackground-color: #333;\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<h1>SQLite Site API</h1>\n\t\t\t\t`;\n\t\t\t}\t\t\t\n\t\t\t------------------------------\n\t- `server.ts`\n\t\t- delete all routes except `app.get('/'...`\n\t- execute the app\n\t\t- `npm run dev`\n\t\t- you will see the minimized site:##theasliqitapi\n\t- note that this API uses TypeScript and ES6 modules which is made possible by:\n\t\t- **tsconfig.json**\n\t\t- in **package.json**\n\t\t\t-----------------------------\n\t\t\t\"type\": \"module\",\n\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon\",\n\t\t\t\t\"build\": \"tsc\"\n\t\t\t},\n\t\t\t\"nodemonConfig\": {\n\t\t\t\t\"watch\": [\n\t\t\t\t\t\"src\"\n\t\t\t\t],\n\t\t\t\t\"ext\": \"ts\",\n\t\t\t\t\"exec\": \"npm run build && node dist/server.js\"\n\t\t\t},\t\t\n\n\t\t\t\"devDependencies\": {\n\t\t\t\t\"@types/cors\": \"^2.8.13\",\n\t\t\t\t\"@types/express\": \"^4.17.14\",\n\t\t\t\t\"@types/lodash-es\": \"^4.17.6\",\n\t\t\t\t\"@types/node\": \"^18.11.10\",\n\t\t\t\t\"nodemon\": \"^2.0.20\",\n\t\t\t\t\"typescript\": \"^4.9.3\"\n\t\t\t},\t\n\t\t\t-----------------------------\n\t- note cors is already implemented and allows access from all sites\n\t- in **test.rest** delete everyting except the `/` route and test to see it returns the HTML:##inthetestrest\n- **==> STEP 3. Set up frontend <==**\n\t- go into frontend directory\n\t\t- `cd et001-sqlite-api-site-frontend`\n\t\t- go to this Vite-React-Menu-useContext starter:\n\t\t\t- https://starters.tanguay.eu/list/blankViteDarkMenuUsecontext\n\t\t- `git clone git@github.com:edwardtanguay/blank-vite-dark-menu-usecontext.git .` (note the period at the end)\n\t\t- open VSCode\n\t\t\t- `code .`\n\t\t- open VSCode terminal\n\t\t- reset Git repository\n\t\t\t- `rm -rf .git`\n\t\t\t- `git init -b main`\n\t\t\t- make initial commit\n\t\t- set up node_modules\n\t\t\t- `npm i`\n\t\t- start API\n\t\t\t- `npm run dev`\n\t\t\t- you should see this site which fetches data from an exterior API:##theexterfetch\n- **==> STEP 4. Minimize and analyze frontend <==**\n\t- `assets`\n\t\t- delete, this is residue from the Vite installation\n\t- **pages**\n\t\t- analyze each page\n\t\t- note how Helmet works to change the titles (although these won't show in social media links)\n\t\t- **pageInfo.tsx**\n\t\t\t--------------------------------\n\t\t\texport const PageInfo = () => {\n\t\t\t\tconst { appTitle } = useContext(AppContext);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"pageInfo\">\n\t\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t\t<title>{appTitle} - Info</title>\n\t\t\t\t\t\t</Helmet>\n\t\t\t\t\t\t<p>this is a test</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------\n\t\t- **pageWelcome.tsx**\n\t\t\t-------------------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst { appTitle} = useContext(AppContext);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"pageWelcome\">\n\t\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t\t<title>{appTitle} - Welcome</title>\n\t\t\t\t\t\t</Helmet>\n\t\t\t\t\t\t<p>this is a test</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------\n\t- **App.scss**\n\t\t- delete styles for pageWelcome and pageInfo\n\t- **AppContext.tsx**\n\t\t- remove jobs and skills so that you only are serving appTitle to your application\n\t\t\t---------------------------------------\n\t\t\timport { createContext } from 'react';\n\n\t\t\tinterface IAppContext {\n\t\t\t\tappTitle: string;\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\tconst appTitle = 'Info Site';\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tappTitle,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------------------\n\t- **interfaces.ts**\n\t\t- delete for now\n\t- note fixes for React Router at Netlify and Vercel\n\t\t- **public/redirects**\n\t\t- **vercel.json**\n\t- site now looks like this:##thetestwoelcd\n\t- tip: to keep from confusing your backend and frontend VSCode instances\n\t\t- install the [VSCode Peacock extension](https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock)\n\t\t- backend\n\t\t\t- F1\n\t\t\t- Peacock: Enter a color\n\t\t\t- `navy` (blue for backend)\n\t\t- frontend\n\t\t\t- F1\n\t\t\t- Peacock: Enter a color\n\t\t\t- `purple` (fuschia for frontend)\n\t\t- your VSCodes should look like this:##boththtecoloro\t\n- **==> STEP 5. Connect frontend to backend by creating a mock route and fetching it <==**\n\t- backend\n\t\t- **server.ts**\n\t\t\t--------------------------------------------\n\t\t\tapp.get('/test', (req: express.Request, res: express.Response) => {\n\t\t\t\tconst datetime = new Date();\n\t\t\t\tres.json({\n\t\t\t\t\tmessage: `API test accessed at ${datetime.toISOString()}`\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **test.rest**##theresttestjijij\n\t- frontend\n\t\t- in **AppContext.tsx** fetch the data from the backend route `/test` and add the message property to a state variable\n\t\t\t--------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport { createContext } from 'react';\n\t\t\timport axios from 'axios';\n\n\t\t\tinterface IAppContext {\n\t\t\t\tappTitle: string;\n\t\t\t\ttestMessage: string;\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\tconst backendUrl = 'http://localhost:3610'; \n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\tconst appTitle = 'Info Site';\n\t\t\t\tconst [testMessage, setTestMessage] = useState('');\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst data = (await axios.get(`${backendUrl}/test`)).data;\n\t\t\t\t\t\tsetTestMessage(data.message);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tappTitle,\n\t\t\t\t\t\t\ttestMessage\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------\n\t\t- on **PageWelcome.tsx** import the message from AppContext and display it\n\t\t\t------------------------------------------\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from '../AppContext';\n\t\t\timport { Helmet } from 'react-helmet';\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst { appTitle, testMessage} = useContext(AppContext);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"pageWelcome\">\n\t\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t\t<title>{appTitle} - Welcome</title>\n\t\t\t\t\t\t</Helmet>\n\t\t\t\t\t\t<p>{testMessage}</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------------------\n- **==> STEP 6. Install SQLite manager application and download flashcard database for this site <==**\n\t- install **DB Browser for SQLite** on your machine so that you can manage SQLite databases\n\t\t- [HOWTO: How to install DB Browser for SQLite on Windows and Ubuntu and retrieve/change data in an SQLite database](https://edwardtanguay.vercel.app/howtos?id=574)\n\t- download the flashcard/categories database\n\t\t- go to [https://tanguay.eu/share](https://tanguay.eu/share)\n\t\t- scroll to bottom\n\t\t- right-click **db-flashcards-categories.zip** and download\n\t\t- unpack\n\t\t- copy the **db.sqlite** file into your `data` directory\n\t- open the SQLite file in your DB Browser\n\t\t- you should see this:##thedbsquliite\n- **==> STEP 7. Create /flashcards route that returns array of all flashcards<==**\n\t- make /flashcard route in **server.ts** and test\n\t\t----------------------------------------\n\t\tapp.get('/flashcards', (req: express.Request, res: express.Response) => {\n\t\t\tres.json(['from server.ts]);\n\t\t});\n\t\t----------------------------------------\n\t- test in **test.rest**##firstfromserverts\n\t- to remain more MVC conform, make a model function in **model.ts** and call it from **server.ts**\n\t\t- **model.ts**\n\t\t\t--------------------------------------------\n\t\t\texport const getFlashcards = () => {\n\t\t\t\treturn ['from model.ts'];\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- **server.ts**\n\t\t\t--------------------------------------------\n\t\t\tapp.get('/flashcards', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getFlashcards());\n\t\t\t});\n\t\t\t--------------------------------------------\n\t\t- test in **test.rest**##nowwithmodel\n\t- now we want to load the flashcard items from the SQLite database and return them from the model function\n\t\t- `npm i better-sqlite3`\n\t\t- **model.ts**\n\t\t\t----------------------------------------------------\n\t\t\timport Database from 'better-sqlite3';\n\t\t\timport { IFlashcard } from './interfaces.js';\n\t\t\timport * as tools from './tools.js';\n\n\t\t\tconst dbAbsolutePathAndFileName = tools.absolutifyPathAndFileName('src/data/db.sqlite');\n\t\t\tconst db = new Database(dbAbsolutePathAndFileName);\n\t\t\tdb.pragma(`journal_mode = WAL`);\n\n\t\t\texport const getFlashcards = () => {\n\t\t\t\tconst stmt = db.prepare(`SELECT * FROM flashcards`);\n\t\t\t\tconst flashcards: IFlashcard[] = [];\n\t\t\t\tfor (let row of stmt.iterate()) {\n\t\t\t\t\tflashcards.push(row);\n\t\t\t\t}\n\t\t\t\treturn flashcards;\t\n\t\t\t}\n\t\t\t----------------------------------------------------\n\t\t- **tools.ts** - for function that enables access to absolute path on Windows, Mac and Linux\n\t\t\t-----------------------------------------------\n\t\t\timport path from 'path';\n\t\t\timport os from 'os';\n\t\t\timport * as tools from './tools.js';\n\n\t\t\tconst __dirname = path.resolve(path.dirname(''));\n\n\t\t\texport const absolutifyPathAndFileName = (pathAndFileName: string) => {\n\t\t\t\tif (tools.operatingSystemIsWindows()) {\n\t\t\t\t\treturn __dirname + '\\\\' + pathAndFileName.replace(/\\//g, '\\\\');\n\t\t\t\t} else {\n\t\t\t\t\treturn __dirname + '/' + pathAndFileName;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\texport const operatingSystemIsWindows = () => {\n\t\t\t\treturn os.platform() === 'win32';\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- **interfaces.ts**\n\t\t\t--------------------------------------------\n\t\t\texport interface IFlashcard {\n\t\t\t\tid: number;\n\t\t\t\tcategory: string;\n\t\t\t\tfront: string;\n\t\t\t\tback: string;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n\t\t- regarding interfaces, note that TypeScript cannot and does not guarantee that the data coming from the SQLite database is properly formed\n\t\t\t- TypeScript simply allows you to define how you expect the data to be\n\t\t\t\t- all TypeScript does is protect you from yourself, so e.g. in **server.ts** if you try to access a property that you yourself stated you don't expect, then it will be marked as an error##tehisflashcard\n\t\t\t- **if you want to guarantee that imported data (from databases and APIs) is properly formed and valid at runtime, you need to implement this data-cleansing yourself**\n\t\t- in **test.rest**, you will now see that the data is loaded from the SQLite database##andthetestrestagain\n- **==> STEP 7. Complete the backend routes <==**\n\t- to build the rest of the routes, see the starter for this project:\n\t\t- [https://starters.tanguay.eu/list/sqliteReadonly](Fullstack React site that uses backend API with SQLite data)\n\t- you will have to build all these routes:\n\t\t- https://sqlite-readonly-backend.tkserv.eu\n\t- note that there is a change in the `/flashcards` route to include the name of the category which you will have to accomplish with a JOIN in the SQL statement##withajoinksjdf\n\t- the backend repository code is here:\n\t\t- https://github.com/edwardtanguay/sqlite-readonly-backend\n- **==> STEP 8. Finish the frontend so that it fetches and uses the backend data so the users can test themselves on the flashcards<==**\n\t- see the starter:\n\t\t- [https://starters.tanguay.eu/list/sqliteReadonly](Fullstack React site that uses backend API with SQLite data)\n\t- the frontend repository code is here:\n\t\t- https://github.com/edwardtanguay/sqlite-readonly-frontend","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-02 00:07:18","systemWhoCreated":"systemUnknown"},{"id":667,"category":"REST","title":"How to name REST API routes","body":"- there is a good discussion here: \n\t- [Hyphen, underscore, or camelCase as word delimiter in URIs?](https://stackoverflow.com/questions/10302179/hyphen-underscore-or-camelcase-as-word-delimiter-in-uris)\n- and here is a clear set of rules for REST API naming conventions\n\t- [API Guidlines: Naming Conventions](https://adidas.gitbook.io/api-guidelines/rest-api-guidelines/evolution/naming-conventions)\n- in general, REST API URIs:\n\t- should use **American English** (e.g. `color` instead of `colour`)\n\t- should use **hyphens** instead of camelCase to delimit combined words (`system-orders` and `get-current-user`)\n\t- should be **lowercase only**\n\t- should avoid acronyms (spell out route names even if they are long)\n\t- should not end with a trailing slash","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-06 00:10:36","systemWhoCreated":"systemUnknown"},{"id":668,"category":"MongoDB","title":"Install MongoDB development environment on Ubuntu/Windows (MongoDB 6.0 Server, Compass, mongoimport, mongosh, NoSQLBooster)","body":"- what we will install\n\t- 1. **MongoDB 6.0 Server** - local database\n\t- 2. **MongoDB Compass** - standard GUI administation tool\n\t- MongoDB Database Tools\n\t\t- 3. **mongoimport** - command-line tool to import data into the MongoDB server\n\t\t- 4. **mongosh** - the improved shell for MongoDB server (use `mongosh` instead of `mongo` for CLI commands)\n\t- 5. **NoSQLBooster** - alternative GUI administration tool\n\t\t- free tool that has extra features which expire after a month\n\t\t- but even the free basic features have advantages over Compass, particularly for learning MongoDB query syntax\n- **Ubuntu 22.04**\n\t- uninstall old MongoDB software first\n\t\t- **uninstall MongoDB 5.0**\n\t\t\t- check to see if you have MongoDB installed and if so, what version\n\t\t\t\t- `mongod --version`\n\t\t\t\t- if the command is not found then you don't have MongoDB installed##thenotinstall\n\t\t\t\t- if it shows a version that is not 6.0, then we need to uninstall it##themongddddddv\n\t\t\t- uninstall previous version of MongoDB\n\t\t\t\t- `sudo service mongod stop` (oder: `sudo systemctl stop mongodb`)\n\t\t\t\t- `sudo apt-get purge mongodb-org*`##deleteitall\n\t\t\t\t- `sudo rm -r /var/log/mongodb`\n\t\t\t\t- `sudo rm -r /var/lib/mongodb`\n\t\t\t\t- MongoDB will be uninstalled####thenotinstall\n\t\t- **uninstall Compass**\n\t\t\t- click on **Show Applications** and type in **compass**##theifcompa\n\t\t\t- if you have it installed\n\t\t\t\t- type `sudo dpkg --remove mongodb-compass`\n\t\t\t\t- it will be uninstalled\n\t\t- **uninstall NoSQLBooster**\n\t\t\t- NoSQLBooster is an AppImage so you don't have to uninstall it\n\t\t\t- search for it in \"Show Applications\"\n\t\t\t- if you find copies of it in e.g. \"Downloads\" then simply delete the files##thenosqllll\n\t\t- **uninstall mongoimport** and other mongo command tools\n\t\t\t- find out where the command `mongoimport` is located\n\t\t\t\t- `whereis mongoimport`##theimposdfusd\n\t\t\t- go to `cd /usr/bin`\n\t\t\t- `ls -al mon*`##theallthemon\n\t\t\t- delete all mongo commands with `sudo rm mongo*`\n\t- install **MongoDB 6.0 server**\n\t\t- **note that the below instructions are explicitly for Ubuntu 22.04**\n\t\t\t- if you have another version, please see detailed instructions at: \n\t\t\t\t- https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu\n\t\t\t- these instructions might also be helpful\n\t\t\t\t- https://techviewleo.com/install-mongodb-on-ubuntu-linux\n\t\t- prepare installation\n\t\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -`\n\t\t\t\t- shows warning but says: \"OK\"##wgetnotwokrdep\n\t\t\t- `sudo apt-get install gnupg`\n\t\t\t- `sudo apt-get update`\t\n\t\t\t- `echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list`\n\t\t\t- `wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.16_amd64.deb`\n\t\t\t- `sudo dpkg -i ./libssl1.1_1.1.1f-1ubuntu2.16_amd64.deb`\n\t\t\t- `sudo apt update`\n\t\t- install MongoDB\n\t\t\t- `sudo apt install mongodb-org`##isntalling6\n\t\t\t- start and enable\n\t\t\t\t- `sudo systemctl enable --now mongod`\n\t\t\t- `systemctl status mongod`##statusmongodoj\n\t\t\t- `mongod --version`##ver65666install\n\t- install **mongosh**\n\t\t- (for detailed instructions, see https://www.mongodb.com/docs/mongodb-shell/install)\n\t\t- `wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -`\n\t\t- `sudo apt-get update`\n\t\t- `sudo apt-get install -y mongodb-mongosh`\n\t\t- `mongosh` will open the shell\n\t\t- test **mongosh** shell\n\t\t\t- commands\n\t\t\t\t-------------------------------------------------\n\t\t\t\tshow dbs\n\t\t\t\tuse local\n\t\t\t\tshow collections\n\t\t\t\tdb.startup_log.find()\n\t\t\t\t-------------------------------------------------\n\t\t\t- should show something like this:##theshowmongoshok\t\t\n\t- install **mongoimport** (and all other commands in **MongoDB Database Tools**)\n\t\t- MongoDB Database Tools are a set of command line tools including `mongoimport`\n\t\t- click here to download them:\n\t\t\t- https://www.mongodb.com/try/download/database-tools\n\t\t- choose **22.04**##choose333\n\t\t- in the file explorer, right-click and choose \"extract here\"\n\t\t- then navigate into the extracted folder\n\t\t- then into **bin**\n\t\t- and move the files from there to wherever `mongosh` is, probably **/usr/bin**`##copymongoimport\n\t- install **Mongo Compass**\n\t\t- https://www.mongodb.com/try/download/compass\n\t\t- note it shows the download for Mac (dmg)\n\t\t- switch to Ubuntu (deb)##thedebsoubunt2222\n\t\t- click on [Download] to save as file\n\t\t- `cd ~/Downloads`\n\t\t- `sudo apt install ./mongodb-compass_1.32.2_amd64.deb`\n\t\t- look in **Show Applications** and search for \"compass\"##thesearchforcompp\n\t\t- start Compass, click [Connect] and look around:##thelookaroundcomp222\n\t- install **NoSQLBooster** \n\t\t- go to the download site: https://nosqlbooster.com/downloads\n\t\t\t- download the .AppImage file\n\t\t\t- copy the file from Downloads into a folder when you want to keep it to execute it, e.g. [~/Applications](https://docs.appimage.org/user-guide/faq.html#question-where-do-i-store-my-appimages)\n\t\t\t- make the AppImage file executable:\n\t\t\t\t- `chmod a+x nosqlbooster4mongo*.AppImage`\n\t\t\t- start it for the first time:\n\t\t\t\t- `./nosqlbooster4mongo-7.0.4.AppImage`\n\t\t\t\t- it will ask you to add it to your application menu, click **Yes**##applciationmenu\n\t\t\t- then search for it in your Applications, right click and add it to your favorites on your left navigation bar##thenaddtomenu\n- **Windows**\n\t- uninstall old **MongoDB 5.0** software first\n\t\t- in the **Uninstall Software** area, uninstall all software from MongoDB##anythingmongoasdasd\n\t\t- also delete **NoSQLBooster**##alsonoboo\n\t\t- delete the **C:\\Mongo\\Program Files\\Mongo** directory##deletetehmongodsf\n\t\t- delete any environment variables which refer to Mongo##thebothenvi\n\t- install new **MongoDB 6.0** and all tools\n\t\t- install **MongoDB 6.0 Server** and **MongoDB Compass**\n\t\t\t- go to download site: https://www.mongodb.com/try/download/community\n\t\t\t- download MongoDB Community Server\n\t\t\t- takes about one minute\n\t\t\t\t- 2021-01-15: mongodb-windows-x86_64-4.4.3-signed.msi\n\t\t\t\t- 2021-10-31: mongodb-windows-x86_64-5.0.3-signed.msi\n\t\t\t\t- 2022-06-25: mongodb-windows-x86_64-5.0.9-signed.msi\n\t\t\t\t- 2023-01-08: mongodb-windows-x86_64-6.0.3-signed.msi\n\t\t\t- double-click MSI file\n\t\t\t\t- next, accept, next, complete, next, next, install (2-3 minutes), finish\n\t\t\t\t- MongoDB Compass opens\n\t- install **mongosh**\n\t\t- download here: www.mongodb.com/try/download/shell\n\t\t\t- 2021-10-31: Version 1.1.1\n\t\t\t- 2022-06-25: Version 1.5.0\n\t\t\t- 2023-01-08: Version 1.6.1\n\t\t- unpack the zip file\n\t\t- copy the two files in the **bin** directory into **C:\\Program Files\\MongoDB\\Server\\6.0\\bin**##twofilsdjisd\n\t\t- add the **Environment System Path**, add `C:\\Program Files\\MongoDB\\Server\\6.0\\bin`##theaenviejspath\n\t\t- then in any directory, go into a terminal and type `mongosh`##tehmongshswork\n\t- install **mongoimport** (and all other commands in **MongoDB Database Tools**)\n\t\t- go to the download page: https://www.mongodb.com/try/download/database-tools\n\t\t- download the zip file\n\t\t\t- 2023-01-08: **mongodb-database-tools-windows-x86_64-100.6.1.zip**\n\t\t- unpack it\n\t\t- copy all files in the extracted directory's **bin** folder to **C:\\Program Files\\MongoDB\\Server\\6.0\\bin**##allofwijijdijtoex\n\t\t- then in any directory, go into a terminal and type `mongoinstall` and it should find the command##shouldfindjsdf\n\t- install **NoSQLBooster** \n\t\t- go to the download site: https://nosqlbooster.com/downloads\n\t\t- download the .exe\n\t\t\t- 2023-01-08: **nosqlbooster4mongo-7.1.17.exe**\n\t\t- double-click on the .exe file","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-07 19:57:53","systemWhoCreated":"systemUnknown"},{"id":669,"category":"MongoDB","title":"Make a CRUD API in Node/Express using TypeScript/ES6-modules that connects to MongoDB with MongoClient","body":"- what we will build\n\t- a Node/Express API that accesses a MongoDB database on local MongoDB server\n\t- we will use the mongodb library to connect to the database\n\t\t- this is a lower-level method of connecting to a MongoDB database than Mongoose\n\t\t- one can use mongodb when one has simple connections which do not need the overhead of Mongoose's schemas and other features\n- final code is here:\n\t- https://github.com/edwardtanguay/node-api-mongoclient\n- final API should work like this:#gif#demomongodbsite\n- **set up base**\n\t- download and install starter\n\t\t- https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi\t\n\t- take out logger\n\t- convert books to mock static /employees route\n\t\t- **server.ts**\n\t\t\t----------------------------------\n\t\t\tapp.get('/employees', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getEmployees());\n\t\t\t});\t\t\n\t\t\t----------------------------------\n\t\t- **model.ts.**\n\t\t\t----------------------------------\n\t\t\texport const getEmployees = (): IEmployee[] => {\n\t\t\t\tconst employees: IEmployee[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tfirstName: \"fff\"\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t\treturn employees;\n\t\t\t}\n\t\t\t----------------------------------\n- **get data from MongoDB**\n\t- `npm i mongodb`\n\t- **model.ts**\n\t\t----------------------------------------------\n\t\timport { MongoClient } from 'mongodb';\n\n\t\tconst conn = 'mongodb://localhost:27017';\n\t\tconst client = new MongoClient(conn);\n\n\t\tconst getData = async (done: (db: any) => void) => {\n\t\t\tawait client.connect();\n\t\t\tconst db = client.db('northwind');\n\t\t\tdone(db);\n\t\t};\n\n\t\texport const getEmployees = () => {\n\t\t\tgetData(async (db) => {\n\t\t\t\tconst employees = await db\n\t\t\t\t\t.collection('employees')\n\t\t\t\t\t.find({})\n\t\t\t\t\t.project({ firstName: 1, lastName: 1 })\n\t\t\t\t\t.toArray();\n\t\t\t\tconsole.log(employees);\n\t\t\t})\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- **PROBLEM:**\n\t\t- we are getting the data\n\t\t- but we cannot sent it back in the getEmployees function since the data is fetched asynchronously\n\t\t- **SOLUTION: ** convert the getEmployees function to return a Promise \n- **implement promise in getEmployees**\n\t- **model.ts**\n\t\t-------------------------------------------\n\t\texport const getEmployees = () => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tgetData(async (db) => {\n\t\t\t\t\t\tconst employees = await db\n\t\t\t\t\t\t\t.collection('employees')\n\t\t\t\t\t\t\t.find({})\n\t\t\t\t\t\t\t.project({ firstName: 1, lastName: 1, title: 1, notes: 1 })\n\t\t\t\t\t\t\t.toArray();\n\t\t\t\t\t\tif (employees.length === 0) {\n\t\t\t\t\t\t\t// interpet no records as error\n\t\t\t\t\t\t\treject('no data')\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(employees);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treject(e.message)\n\t\t\t\t}\n\t\t\t})\n\t\t}\t\t\n\t\t-------------------------------------------\n\t- **interfaces.ts**\n\t\t--------------------------------\n\t\texport interface IEmployee {\n\t\t\t_id: string;\n\t\t\tfirstName: string;\n\t\t\tlastName: string;\n\t\t\ttitle: string;\n\t\t\tnotes: string;\n\t\t}\t\t\n\t\t--------------------------------\n- **implement /add route**\n\t- implement mock adding\n\t\t- **server.ts**\n\t\t\t-----------------------------------------------\n\t\t\tapp.post('/employee', (req: express.Request, res: express.Response) => {\n\t\t\t\tconst employee: IEmployee = req.body;\n\t\t\t\tconst result = model.addEmployee(employee);\n\t\t\t\tres.send(result);\n\t\t\t})\n\t\t\t-----------------------------------------------\n\t\t- **model.ts**\n\t\t\t----------------------------------------\n\t\t\texport const addEmployee = (employee: IEmployee) => {\n\t\t\t\tconsole.log('adding', employee);\n\t\t\t\treturn 'ok';\t\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **test.rest**\n\t\t\t----------------------------------\n\t\t\t### ADD EMPLOYEE\n\t\t\tPOST {{url}}/employee\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"lastName\": \"Addington\",\n\t\t\t\t\"firstName\": \"Author\",\n\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\"notes\": \"Author is a test employee that we are adding.\"\n\t\t\t}\n\t\t\t----------------------------------\n\t- implement real adding\n\t\t- **server.ts**\n\t\t\t-----------------------------------------\n\t\t\tapp.post('/employee', async (req: express.Request, res: express.Response) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst employee: IEmployee = req.body;\n\t\t\t\t\tconst result = await model.addEmployee(employee);\n\t\t\t\t\tres.status(200).send(result);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tres.status(500).send(e.message);\n\t\t\t\t}\n\t\t\t})\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **model.ts**\n\t\t\t-----------------------------------------\n\t\t\tapp.post('/employee', async (req: express.Request, res: express.Response) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst employee: IEmployee = req.body;\n\t\t\t\t\tconst result = await model.addEmployee(employee);\n\t\t\t\t\tres.status(200).send(result);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tres.status(500).send(e.message);\n\t\t\t\t}\n\t\t\t})\t\t\t\n\t\t\t-----------------------------------------\n- **implement /delete route**\n\t- **server.ts**\n\t\t----------------------------------------\n\t\tapp.delete('/employee', async (req: express.Request, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\tconst { _id } = req.body;\n\t\t\t\tconst result = await model.deleteEmployee(_id);\n\t\t\t\tres.status(200).send(result);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tres.status(500).send(e);\n\t\t\t}\n\t\t})\t\t\n\t\t----------------------------------------\n\t- **model.ts**\n\t\t----------------------------------------\n\t\texport const deleteEmployee = async (_id: string) => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\taccessDatabase(async (db) => {\n\t\t\t\t\t\tconst employeesCollection = db.collection(\"employees\");\n\t\t\t\t\t\tconst result = await employeesCollection.deleteOne({ _id: new ObjectID(_id) });\n\t\t\t\t\t\tif (result.deletedCount === 1) {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\t\t\t\tmessage: `item with id \"${_id}\" was deleted`\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\tmessage: `item with id \"${_id}\" was not deleted`\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t----------------------------------------\n- **implement /edit route**\t\n\t- **server.ts**\n\t\t-------------------------------------------------\n\t\tapp.put('/employee/:id', async (req: express.Request, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\tconst _id = req.params.id;\n\t\t\t\tconst employee: IEmployee = req.body;\n\t\t\t\tconst result = await model.editEmployee(_id, employee);\n\t\t\t\tres.status(200).send(result);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tres.status(500).send(e);\n\t\t\t}\n\t\t})\t\t\n\t\t-------------------------------------------------\n\t- **model.ts**\n\t\t-------------------------------------------------\n\t\texport const editEmployee = async (_id: string, employee: IEmployee) => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\taccessDatabase(async (db) => {\n\t\t\t\t\t\tconst employeesCollection = db.collection(\"employees\");\n\t\t\t\t\t\tconst result = await employeesCollection.updateOne({ _id: new ObjectID(_id) }, { $set: {...employee} });\n\t\t\t\t\t\tif (result.modifiedCount === 1) {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\t\t\t\tmessage: `item with id \"${_id}\" was edited`\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\tmessage: `item with id \"${_id}\" was not edited`\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t-------------------------------------------------\n- **notes on using `mongodb` with TypeScript/ES6-modules**\n\t- apparently no types to install for mongodb\n\t\t- https://www.npmjs.com/package/@types/mongodb\n\t- ObjectID works as is but appears to be deprecated, however I couldn't use the suggested version `new MongoClient.ObjectID(_id)` since it gives the error: **ObjectID is not a constructor**##objecjseoerrror","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-11 03:12:53","systemWhoCreated":"systemUnknown"},{"id":670,"category":"JavaScript","title":"How to use default values in destructured objects and arrays","body":"- use an equals sign to set defaults while destructuring objects\n\t- if value is not in the object, the default will be assigned\n\t\t-------------------------------------\n\t\tconst config = () => {\n\t\t\treturn { STATUS: 'online' };\n\t\t};\n\t\tconst { PORT = 3000 } = config();\n\n\t\tconsole.log(PORT); // 3000\t\n\t\t-------------------------------------\n\t- but if the value is in the object, it will be assigned\n\t\t------------------------------------\n\t\tconst config = () => {\n\t\t\treturn { STATUS: 'online',  PORT: 1234 };\n\t\t};\n\t\tconst { PORT = 3000 } = config();\n\n\t\tconsole.log(PORT); // 1234\t\t\n\t\t------------------------------------\n- arrays are similar but each item in the array is required to hold the assigned places\n\t- missing values in arrays must be defined `undefined`\n\t\t----------------------------\n\t\tconst playerData = () => {\n\t\t\treturn ['playing', undefined, 'Hulk'];\n\t\t}\n\t\tconst [mode = 'notPlaying', score = 0, playerName = '(unknown)'] = playerData();\n\n\t\tconsole.log(mode, score, playerName); // playing 0 Hulk\n\t\t----------------------------\n\t- example of all all values missing\n\t\t----------------------------------------------\n\t\tconst playerData = () => {\n\t\t\treturn [undefined, undefined, undefined];\n\t\t}\n\t\tconst [mode = 'notPlaying', score = 0, playerName = '(unknown)'] = playerData();\n\n\t\tconsole.log(mode, score, playerName); // notPlaying 0 (unknown)\n\t\t----------------------------------------------\n- more details and nuances about this issue can be found here:\n\t- [JavaScript Destructuring Default Values](https://wesbos.com/destructuring-default-values)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-11 18:38:02","systemWhoCreated":"systemUnknown"},{"id":671,"category":"Mongoose","title":"Build a CRUD API with Node/Express that accesses MongoDB via Mongoose","body":"- **what we will build**\n\t- we will build an CRUD API that uses **Mongoose** to connect to a MongoDB employees collection\n\t\t- just like we built an CRUD API that uses **MongoClient** (mongodb) to connect to a MongoDB employees collection\n\t- the API will be in TypeScript and will use ES6 modules\n- final code is here:\n\t- https://github.com/edwardtanguay/node-api-crud-basic-mongoose\n- final API should look somethin like this:##mongoosedemosite\n- **set up base**\n\t- download and install starter\n\t\t- https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi\t\n\t- reduce site to \"/\" route and instructions \n\t\t- move through every file and remove what we don't need\n\t- convert books to mock static /employees route\n\t\t- **server.ts**\n\t\t\t----------------------------------\n\t\t\tapp.get('/employees', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.json(model.getEmployees());\n\t\t\t});\t\t\n\t\t\t----------------------------------\n\t\t- **model.ts.**\n\t\t\t----------------------------------\n\t\t\texport const getEmployees = (): IEmployee[] => {\n\t\t\t\tconst employees: IEmployee[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tfirstName: \"fff\"\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t\treturn employees;\n\t\t\t}\n\t\t\t----------------------------------\n\t\t- **test.rest**\n\t\t\t------------------------------\n\t\t\t@url = http://localhost:3610\n\n\t\t\t### BASE\n\t\t\t{{url}}\n\n\t\t\t### ALL EMPLOYEES\n\t\t\t{{url}}/employees\t\t\t\n\t\t\t------------------------------\n- **implement GET /employees route with Mongoose**\n\t- `npm i mongoose`\n\t- **server.ts**\n\t\t- you only need the connection string in server.ts once\n\t\t- you need the **strictQuery** in order to get around a deprecated issue, remove it to see the message\n\t\t\t----------------------------------------\n\t\t\tmongoose.set(\"strictQuery\", false);\n\t\t\tmongoose.connect('mongodb://localhost/northwind');\n\n\t\t\tapp.get('/employees', async (req: express.Request, res: express.Response) => {\n\t\t\t\tconst employees = (await model.getEmployees() as IEmployee[]);\n\t\t\t\tres.json(employees);\n\t\t\t});\n\t\t\t------------------------------------------\t\t\t\n\t- **model.ts**\n\t\t----------------------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\texport const getEmployees = () => {\n\t\t\tconst employees = await Employee.find().select('firstName lastName title notes');\n\t\t\tconsole.log(employees);\n\t\t\treturn employees;\n\t\t}\n\t\t----------------------------------------------\n\t- **PROBLEM:**\n\t\t- we are successfully fetching and displaying the data in the model\n\t\t- but we cannot sent it back in the getEmployees function since the data is fetched asynchronously\n\t\t- **SOLUTION: ** convert the getEmployees function to return a Promise \n\t- **implement promise in getEmployees**\n\t\t- **server.ts**\n\t\t\t------------------------------------------\n\t\t\tapp.get('/employees', async (req: express.Request, res: express.Response) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst employees = (await model.getEmployees() as IEmployee[]);\n\t\t\t\t\tres.json(employees);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tres.status(500).send(e);\n\t\t\t\t}\n\t\t\t});\n\t\t\t------------------------------------------\n\t\t- **models/Employee.ts**\n\t\t\t------------------------------------------\n\t\t\timport mongoose from 'mongoose';\n\t\t\timport { IEmployee } from '../interfaces.js';\n\n\t\t\tconst employeeSchema = new mongoose.Schema<IEmployee>({\n\t\t\t\tfirstName: String,\n\t\t\t\tlastName: String,\n\t\t\t\ttitle: String,\n\t\t\t\tnotes: String\n\t\t\t}, {versionKey: false});\n\n\t\t\texport const Employee = mongoose.model('employee', employeeSchema);\n\t\t\t------------------------------------------\n\t\t\t- via ChatGPT:##viachatgpt\n\t\t- **model.ts**\n\t\t\t------------------------------------\n\t\t\texport const getEmployees = async () => {\n\t\t\t\treturn new Promise<IEmployee[] | {}>(async (resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst employees: IEmployee[] = await Employee.find().select('firstName lastName title notes');\n\t\t\t\t\t\tif (employees.length > 0) {\n\t\t\t\t\t\t\tresolve(employees);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\t\tmessage: \"collection not found\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\t------------------------------------\n\t\t- **interfaces.ts**\n\t\t\t--------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\t_id: string;\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\ttitle: string;\n\t\t\t\tnotes: string;\n\t\t\t}\t\t\n\t\t\t--------------------------------\t\n- **implement POST /employee route**\n\t- **server.ts**\n\t\t-------------------------------------------\n\t\tapp.post('/employee', async (req: express.Request, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\tconst employee: IEmployee = req.body;\n\t\t\t\tconst result = await model.addEmployee(employee);\n\t\t\t\tres.status(200).send(result);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tres.status(500).send(e.message);\n\t\t\t}\n\t\t});\n\t\t-------------------------------------------\n\t- **model.ts**\n\t\t-------------------------------------------\n\t\texport const addEmployee = async (employeeData: IEmployee) => {\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst employee = new Employee(employeeData);\n\t\t\t\t\tconst addedEmployee = await employee.save();\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\t\tnewId: addedEmployee._id\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t-------------------------------------------\n\t- **test.rest**\n\t\t------------------------------------------\n\t\t### ADD EMPLOYEE\n\t\tPOST {{url}}/employee\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"lastName\": \"Addington\",\n\t\t\t\"firstName\": \"Arthur\",\n\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\"notes\": \"Author is a test employee that we are adding.\"\n\t\t}\n\t\t------------------------------------------\n- **implement DELETE /employee route**\n\t- **server.ts**\n\t\t-------------------------------------------\n\t\tapp.delete('/employee/:id', async (req: express.Request, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\tconst id = req.params.id;\n\t\t\t\tconst result = await model.deleteEmployee(id);\n\t\t\t\tres.status(200).send(result);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tres.status(500).send(e);\n\t\t\t}\n\t\t})\n\t\t-------------------------------------------\t\n\t- **model.ts**\n\t\t-------------------------------------------\n\t\texport const deleteEmployee = async (id: string) => {\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst employee = await Employee.find({ id });\n\t\t\t\t\tconst result = await Employee.deleteOne({ _id: id });\n\t\t\t\t\tif (result.deletedCount === 1) {\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tstatus: \"success\",\n\t\t\t\t\t\t\tmessage: `item with id \"${id}\" was deleted`\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject({\n\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\tmessage: `item with id \"${id}\" was not deleted`\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t-------------------------------------------\t\n\t- **test.rest**\n\t\t------------------------------------------\n\t\t### DELETE EMPLOYEE\n\t\tDELETE {{url}}/employee/63bf5b755a88a52a71dfc65f\n\t\t------------------------------------------\n- **implement PUT /employee route**\n\t- **server.ts**\n\t\t-------------------------------------------\n\t\tapp.put('/employee/:id', async (req: express.Request, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\tconst id = req.params.id;\n\t\t\t\tconst employee: IEmployee = req.body;\n\t\t\t\tconst result = await model.editEmployee(id, employee);\n\t\t\t\tres.status(200).send(result);\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tres.status(500).send(e);\n\t\t\t}\n\t\t});\n\t\t-------------------------------------------\t\n\t- **model.ts**\n\t\t-------------------------------------------\n\t\texport const editEmployee = async (id: string, employee: IEmployee) => {\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst oldEmployee = await Employee.find({ _id: id });\n\t\t\t\t\tawait Employee.updateOne({ _id: id }, { $set: { ...employee } });\n\t\t\t\t\tconst newEmployee = await Employee.find({ _id: id });\n\t\t\t\t\tif (Array.isArray(oldEmployee) && oldEmployee.length === 0) {\n\t\t\t\t\t\treject({\n\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\tmessage: `employee with id \"${id}\" not found`\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\t\toldEmployee,\n\t\t\t\t\t\t\tnewEmployee\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tif (e.name === 'CastError') {\n\t\t\t\t\t\treject({\n\t\t\t\t\t\t\tstatus: \"error\",\n\t\t\t\t\t\t\tmessage: e.message\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t-------------------------------------------\t\n\t- **test.rest**\n\t\t------------------------------------------\n\t\t### EDIT EMPLOYEE\n\t\tPUT {{url}}/employee/63bf5ba38f1be6ad93d494e5\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"lastName\": \"CHANGED-LAST-NAME\",\n\t\t\t\"firstName\": \"CHANGED-FIRST-NAME\",\n\t\t\t\"title\": \"Sales Representative333\",\n\t\t\t\"notes\": \"The name of this employee has changed.\"\n\t\t}\n\n\t\t### EDIT NON-EXISTENT EMPLOYEE\n\t\tPUT {{url}}/employee/93bf5ba38f1be6ad93d494e5\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"lastName\": \"CHANGED-LAST-NAME\",\n\t\t\t\"firstName\": \"CHANGED-FIRST-NAME\",\n\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\"notes\": \"The name of this employee has changed.\"\n\t\t}\n\n\t\t### EDIT MALFORMED ID\n\t\tPUT {{url}}/employee/nnn\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"lastName\": \"CHANGED-LAST-NAME\",\n\t\t\t\"firstName\": \"CHANGED-FIRST-NAME\",\n\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\"notes\": \"The name of this employee has changed.\"\n\t\t}\n\t\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-12 02:05:22","systemWhoCreated":"systemUnknown"},{"id":672,"category":"MongoDB","title":"Get account at MongoDB Atlas and connect via mongosh, mongoimport, Compass, NoSQLBooster, apps","body":"- **background**\n\t- the goal of this howto is to \n\t\t- get a free MongoDB Atlas account\n\t\t- understand the basic terminology and online interface\n\t\t- connect to online MongoDB database via mongosh, mongoimport, Compass and NoSQLBooster so that you can manager your online databases and collections locally\n\t\t- copy collections from your offline to online databases and visa versa\n\t\t- connect your offline apps to online databases\n\t- a MongoDB Atlas account enables you to\n\t\t- create and use MongoDB databases that exist online\n\t\t- you can access them from local apps\n\t\t- you can access them from online apps, e.g. from cloud machines at Hetzner, Digital Ocean, or services such as Cyclic and Render\n\t- MongoDB Atlas has general free tier\n\t\t- no need to give credit card information (as you have to with e.g. at AWS or Azure)\n\t\t- you have enough features to use it as a online database solution for online apps\n\t\t\t- 512 MB data storage\n\t\t\t\t- enough for demo sites to practice online MERN-stack skills \n\t\t\t\t- enough to host data for numerous apps for e.g. portfolio sites\n\t\t\t- 24/7 available \n\t\t\t- no spin-up time\n- **sign up for an account**\n\t- go to: https://www.mongodb.com\n\t- register e.g. with **Google** or **GitHub**\n\t- when you are registered and signed in, you should see something like this:##atlastthefirst\n- **understand the basic terminology*##thesixtermskdj\n\t- 1. account > 2. project > 3. cluster > **4. databases** > **5. collections** > **6. databases**\n\t- 1. account\n\t\t- you have one account at MongoDB Atlas\n\t- 2. project\n\t\t- for now you need only **one project** e.g. \"mernprojects\"\n\t- 3. cluster\n\t\t- for now you need only **one cluster** e.g. \"Cluster0\"\n\t\t- cluster vs. database\n\t\t\t- a MontoDB Atlas cluster is like your local MongoDB server, or like your local MySQL server\n\t\t\t\t- each cluster has databases (like SQL databases)\n\t\t\t\t- each database has collections (like SQL tables)\n\t\t\t\t- each collection has documents (like SQL records)\t\t\n\t- **4. databases**\n\t\t- your cluster (server) has databases\n\t\t- but to get to your databases, you have to click on [Browse Collections]##tothecollll\n\t- **5. collections** and **6. documents**\n\t\t- after you click on [Browser Collections] you come to the most useful dashboard of MongoDB Atlas\n\t\t- here you have your main Cluster (server) where you can create databases, which have ##mostussatlas\n- **create databases and collections**\n\t- click [Create Database]\n\t- give name and collection name\n\t- typically you will want to name your database the name of your **app**, e.g. `app-bookstore-001`##savethbookkk\n\t- the MongoDB Atlas interface is useful enough to manage your collections and documents directory online\n\t- click [INSERT DOCUMENT]##andinserstisj\n\t- type in a document as JSON\n- **use MongoDB Atlas from database management applications**\n\t- MongoDB Atlas can be used from your database management apps such as\n\t\t- **mongosh**\n\t\t- **Compass**\n\t\t- **NoSQLBooster**\n\t\t- **Node/Express APIs**\n\t- to do this you will need to set up **Network Access** and **Database Access**:##dataneenet\n\t- **configure network access**\n\t\t- click **Network Access** on the left side\n\t\t- Add IP Address\n\t\t- Allow access from anywhere\n\t\t\t- `0.0.0.0/0` (click [ALLOW ACCESS FROM ANYWHERE)\n\t\t\t- this is secure since a login/password is also needed to connect to your cluster\n\t\t\t- and it is convenient if you are connecting to your MongoDB Atlas databases from your local machine and your IP-address that you get from you Internet Service Provider regularly changes\n\t\t- click [Confirm]\n\t\t\t- notice the **Pending** message\n\t\t\t- changes to your MongoDB Atlas cluster can take 1-3 minutes to take effect##noticethestatus\n\t\t- eventually the address will be registered and the status will change to **Active**\n\t\t\t- ##networkaccessokok\n\t- **configure Database Access**\n\t\t- click **Database Access** on the left side\n\t\t- click [ADD NEW DATABASE USER]\n\t\t- type in user name\n\t\t\t- this is not a person's account \n\t\t\t\t- rather, your app (e.g. Compass or your Node/Express API) will connect to your database using this account\n\t\t\t- therefore create a meaningful name for this user is e.g.\n\t\t\t\t- for your a chap-app API: **et-chatapp-main**\n\t\t\t\t- for Compass, mongosh, NoSQLServer: **mainadmin**\n\t\t\t- security tip: avoid using user names such as **admin** or **root** since these are common names often used in brute force attacks\n\t\t\t- if this is your first time setting up a user, create a user that your Compass, mongosh and NoSQLServer can use to read/write to any database, e.g. **mainadmin**\n\t\t- create password\n\t\t\t- best for test apps is to have an easy-to-remember-but-secure password since you find yourself often typing it into e.g. mongosh, etc.\n\t\t\t\t- e.g. `sh-0101`\n\t\t\t- save it in a password app such as [KeePass](https://keepass.info)\n\t\t\t- note you won't be able to find out your password again, you can only reset it\n\t\t\t- later when you security-harden your app before its first production\n\t\t\t\t- e.g. you may have a rule that you need to replace all passwords with an password\n\t\t- set priveleges\n\t\t\t- click [Add Built In Role]\n\t\t\t- choose **Read and write to any database**\n\t\t\t- however, if you have an app that really only needs to read data, then choose **Only read any database**\n\t\t\t- if this is your first time setting up a user, create a user named e.g. **mainuser** that has read/write access to any database\n\t\t- click [Add User]\n\t\t\t- note message: \"We are deploying your changes (current action: configuring MongoDB)\"\n\t\t\t\t- can take 2-5 minutes to take effect\n\t- access with **mongosh**\n\t\t- **get connection string** for your management app to use\n\t\t- click **Database > Connect**##thedatabaseconnn\n\t\t- [Connect with the MongoDB Shell]##themongoshelll\n\t\t- copy connection string by clicking on the copy icon\n\t\t- click [Close]\n\t\t- in your terminal, paste in the connection string changing information appropriately\n\t\t\t- remove the database name\n\t\t\t- replace the username with the username you just created\n\t\t\t- the comman to connect will look something like this:##theconnstringok\n\t\t- you can now use your MongoDB Atlas as if it were on your local machine\n\t\t- insert a record in the database you had created earlier in MongoDB Atlas\n\t\t\t- `show dbs`\n\t\t\t- `use et-001-testapp`\n\t\t\t- `show collections`\n\t\t\t- `db.users.find()`\n\t\t\t- `db.extraarticles.insertOne({title: \"The New Article\"})`##addedtheoisin\n\t\t- no go back to MongoDB Atlas online and check to see that what you just added exists there, click [REFRESH]##theresferhsisnthere\n\t\t- make changes in MongoDB Atlas and see that they are also reflected in your shell\n\t\t- create an alias or command called `md`\n\t\t\t- Windows\n\t\t\t\t- simply copy the command you used into a file called e.g. `ma` (for MongoDB Atlas) and then execute it with `./ma`\n\t\t\t- Linux\n\t\t\t\t- `cd /usr/local/bin` - go to directory that is accessible anywhere\n\t\t\t\t- `vim md` create the md file and enter your connection string as the content (don't use mine)\n\t\t\t\t\t--------------------------------------\n\t\t\t\t\tmongosh \"mongodb+srv://cluster0.ogshn.mongodb.net\" --apiVersion 1 --username et-main\n\t\t\t\t\t--------------------------------------\n\t\t\t\t- `chmod +x md` - add executable rights to the file\n\t\t\t\t- `cd` - go back to your home directory\n\t\t\t\t- `md` - execute your script anywhere\n\t\t\t\t- Tipp: if you ever forget to enter vim as sudo, you can still save as sudo:##thevimtee\t\t\t\n\t- upload data with **mongoimport**\n\t\t- create file to import called `newusers.json`\n\t\t\t----------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Peter\",\n\t\t\t\t\t\"lastName\": \"Smadi\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Martin\",\n\t\t\t\t\t\"lastName\": \"Scheucht\"\n\t\t\t\t}\n\t\t\t]\n\t\t\t----------------------------------\n\t\t- database > cluster0 > primary##theclusterok\n\t\t\t- then copy the cluster name##gotheconnecinin\n\t\t- create mongoimport command, use your own appropriate data:\n\t\t\t- mongoimport --host **cluster0-shard-00-01.ogshn.mongodb.net:27017** --db **et-001-testapp** --collection **users** --type json --file **newusers.json** --jsonArray --authenticationDatabase admin --ssl --username **et-main**\n\t\t\t- `mongoimport --host cluster0-shard-00-01.ogshn.mongodb.net:27017 --db et-001-testapp --collection users --type json --file newusers.json --jsonArray --authenticationDatabase admin --ssl --username et-main`##twoimportated\n\t\t\t- see that they were added to the online database, click **REFRESH**:##wasimportedokok222\n- access with **MongoDB Compass**\n\t- click: Database > Connect\n\t- Connect Using MongoDB Compass\n\t- click the copy icon to copy the connection string\n\t- start Compass\n\t- paste and modify connection string, e.g.\n\t\t- from: `mongodb+srv://<username>:<password>@cluster0.ogshn.mongodb.net/test`\n\t\t- to:\n\t\t\t- replace `<username>` with the username you created, e.g. `et-main`\n\t\t\t- **leave `<password>` just as it is so you don't have to show your password\n\t\t\t- remove the database `/test` at the end\n\t\t\t- e.g. `mongodb+srv://et-main:<password>@cluster0.ogshn.mongodb.net`\n\t- click: **Authentication** > **Username/Password**:\n\t\t- password: (type in your password here)\n\t- you should have access to your online databases and collections##gotthearticlees222\n- access with **NoSQLBooster**\n\t- click: Database > Connect\n\t- Connect Using MongoDB Compass\n\t- click the copy icon to copy the connection string\n\t- start NoSQLBooster\n\t\t- Connect > Create:##goandconnectj\n\t\t- click **[From URI]** button:##clickfromuriok\n\t- paste and modify connection string, e.g.\n\t\t- from: `mongodb+srv://<username>:<password>@cluster0.ogshn.mongodb.net/test`\n\t\t- to:\n\t\t\t- replace `<username>` with the username you created, e.g. `et-main`\n\t\t\t- **leave `<password>` just as it is so you don't have to show your password**\n\t\t\t- remove the database `/test` at the end\n\t\t\t- e.g. `mongodb+srv://et-main:<password>@cluster0.ogshn.mongodb.net`\n\t\t- click [OK]\n\t\t- click on **Authentication**, type password, and click on **Save & Connect**##andtheauuuth\n\t\t- you may now use your online database and collections as if they were local##andshowthetwo2222\n- **copy collections** from local to online databases, or visa versa\n\t- export the collection you want to transfer\n\t\t- use Compass\n\t\t- go to e.g. local collection\n\t\t- click on [Export Collection]##cliskexpo\n\t\t- [x] Export Full Collection\n\t\t- [SELECT FIELDS]\n\t\t- [SELECT OUTPUT]\n\t\t- [JSON]\n\t\t- [BROWSE]\n\t\t- [EXPORT]##transferbooksdkj\n\t- import the exported collection you want to transfer\n\t\t- use Compass\n\t\t- go to e.g. online database in which you want to transfer the collection\n\t\t- create new collection, give it e.g. the same name as the original collection\n\t\t- in the menu, click **Collection > Import Data**\n\t\t- Select File > JSON > [IMPORT]\n- **use online database collections from local apps**\n\t- e.g. an API running locally\n\t- make an environment variable for the connection string:\n\t\t----------------------------\n\t\tmongoose.connect('mongodb://localhost/bookapi');\n\t\t----------------------------\n\t- put the MongoDB Atlas connection string (with clear-text password) into your .env file as e.g.\n\t\t------------------------------\n\t\tMONGO_CONNECTION = mongodb+srv://app001user:thisisthepassword@cluster0.ogshn.mongodb.net/bookapi\n\t\t------------------------------\n\t- make sure you have `.env` listed in your `.gitignore` file so that your MongoDB password does not get checked into your online repository\n\t- note: in application development, you normally have your localhost connection locally:\n\t\t------------------------------\n\t\tMONGO_CONNECTION = mongodb://localhost/bookapi\n\t\t------------------------------\n\t\t- so that your MongoDB connection is not saved in clear-text anywhere\n\t\t- then on your Heroku app, you create an environment variabled called `MONGO_CONNECTION` and paste in your mongo connection string there where it is protected","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-15 21:41:43","systemWhoCreated":"systemUnknown"},{"id":673,"category":"Node","title":"How to get path to node_modules for global npm packages","body":"- full code is here: https://github.com/edwardtanguay/nodecommand\n- **index.js**\n\t-----------------------------------\n\timport * as tools from './tools.js';\n\n\tconst npmRoot = await tools.getNpmRoot();\n\tconsole.log(`The npm root is: [${npmRoot}]`);\n\t-----------------------------------\n- **tools.js**\n\t-------------------------------------\n\timport { exec } from 'child_process';\n\n\t/**\n\t * getNpmRoot\n\t * \n\t * returns the directory of where node_modules is stored on Linux, Mac and Windows\n\t * \n\t * const npmRoot = await tools.getNpmRoot();\n\t */\n\texport const getNpmRoot = () => {\n\t\treturn new Promise((resolve) => {\n\t\t\texec('npm root -g', (error, stdout, stderr) => {\n\t\t\t\tstdout = stdout.trim('\\n');\n\t\t\t\tconst lines = stdout.split('\\n');\n\t\t\t\tif (lines.length > 1) {\n\t\t\t\t\tstdout = lines[lines.length - 1];\n\t\t\t\t}\n\t\t\t\tresolve(stdout);\n\t\t\t});\n\t\t});\n\t};\n\t-------------------------------------\n- **package.json**\n\t-------------------------------\n\t\"type\": \"module\",\n\t-------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-18 14:59:05","systemWhoCreated":"systemUnknown"},{"id":674,"category":"Cheerio","title":"How to use cheerio to screen-scrape a jobs website and save job ad info into a JSON file","body":"- **what this is**\n\t- when you run this script, it fetches the HTML from the site www.get-in-it.de and uses **cheerio** to parse through it saving **job title** and **url** in a JSON array\n\t- it then saves that array as a JSON file\n- **what this could be used for**\n\t- this is a good example to understand how cheerio works to screen-scrap websites\n\t- this JSON file could be served in an API for frontend job sites\n- **how this could be extended**\n\t- in the same way, screen-scrape links to job offers from many sites and storing them in a database for e.g. your job application process\n- **full code is here**\n\t- https://github.com/edwardtanguay/jobscraper\n- **how it looks**##jobs2demo\n- **index.js**\n\t-----------------------------------\n\timport * as tools from './tools.js';\n\n\tconst html = await tools.getHtmlFromUrl(`https://www.get-in-it.de/jobsuche?thematicPriority=5`);\n\n\tconst jobs = tools.getJobsFromHtml(html);\n\ttools.createFile('jobs.json', JSON.stringify(jobs, null, 2));\n\t-----------------------------------\n- **tools.js**\n\t---------------------------------------\n\timport * as cheerio from 'cheerio';\n\timport fs from 'fs';\n\timport axios from 'axios';\n\n\texport const getHtmlFromUrl = (url) => {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst response = await axios.get(url);\n\t\t\tconst html = response.data;\n\t\t\tresolve(html);\n\t\t});\n\t};\n\n\texport const createFile = (fileName, content) => {\n\t\tfs.writeFileSync('output/' + fileName, content);\n\t};\n\n\texport const getJobsFromHtml = (html) => {\n\t\tconst data = [];\n\t\tconst $ = cheerio.load(html);\n\t\t$('a').each((i, elem) => {\n\t\t\tconst href = String($(elem).attr('href')); // e.g. /jobsuche/p211338?start=0&limit=39&ref=Jobsuche\n\t\t\tif (href && href.startsWith('/jobsuche/')) {\n\n\t\t\t\t// jobTitle\n\t\t\t\tconst elemWithTitle = $(elem).find('.d-block');\n\t\t\t\tconst jobTitle = $(elemWithTitle).text();\n\n\t\t\t\t// url\n\t\t\t\tconst parts = href.split('?');\n\t\t\t\tconst urlSuffix = parts[0];\n\t\t\t\tconst url = 'https://www.get-in-it.de' + urlSuffix;\n\n\t\t\t\tdata.push({\n\t\t\t\t\tjobTitle,\n\t\t\t\t\turl\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t};\n\t---------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-18 16:52:08","systemWhoCreated":"systemUnknown"},{"id":675,"category":"Mongoose","title":"Data Cleansing and Validation: Advanced Mongoose Features","body":"- full code is here:\n\t- https://github.com/edwardtanguay/merncrud003-backend\n\t- https://github.com/edwardtanguay/merncrud003-frontend\n- set up fullstack MERN CRUD application\n\t- https://starters.tanguay.eu/list/mernMongooseBookCrudFullstack\n\t- test it that frontend/backend work, that you can log in, refresh the page and stay logged in, etc\n\t- but for this howto, we will only use the backend and test our changes with test.rest\n- Mongoose SchemaTypes and validation\n\t- https://mongoosejs.com/docs/schematypes.html\n\t- 1. in our model, we already have the type **String** (e.g. title)\n\t\t- what happens when we enter a number\n\t\t- it is converted to a string\n\t- 2. in our model, we already have the type **Number** (e.g. numberOfPages)\n\t\t- what happens when we enter a string\n\t\t- it crashes your application\n\t\t- add try/catch in **model.ts**\n\t\t\t------------------------------------\n\t\t\texport const addBook = async (book: INewBook) => {\n\t\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst docBook = new Book(book);\n\t\t\t\t\t\tconst addedDocBook = await docBook.save();\n\t\t\t\t\t\tresolve(addedDocBook.toObject({ versionKey: false }));\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e: any) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t------------------------------------\n\t\t- it still crashes the app\n\t\t- add try/catch to server.ts\n\t\t\t------------------------------------------\n\t\t\tapp.post('/book', authorizeUser, async (req, res) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst book: INewBook = req.body;\n\t\t\t\t\tconst result = await model.addBook(book);\n\t\t\t\t\tres.status(200).send(result);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t\tres.status(400).send(e.message);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t\t------------------------------------------\n\t- 3. add **Date** time\n\t\t- add `whenPurchased: Date`\n\t\t- add book\n\t\t\t- it adds the book since whenPurchased is not required\n\t\t- now add a book that has `\"whenPurchased\": \"2023-01-23\"`\n\t\t\t- it adds: `\"whenPurchased\": \"2023-01-23T00:00:00.000Z\"`\n\t\t- now add a book that is not the right type: `\"whenPurchased\": 123`\n\t\t\t- it added a field that 123 milliseconds after midnight of January 1, 1970\n\t\t- now add a book that has `\"whenPurchased\": \"The Book Title\"`\n\t\t\t- because of the try/catches, it returns an error object that has a message which could be parsed in some useful way for the frontend, or just written in a log file have have a general error sent to the frontend\n\t- 4. add **[String]** type (array of strings)\n\t\t- add `notes: [String]`\n\t\t- save `\"notes\": [\"one\", \"two\", \"three\", \"four\"]`\n\t- 5. add **custom object**\n\t\t- add: \n\t\t\t----------------------------------\n\t\t\tauthor: {\n\t\t\t\tfirstName: String,\n\t\t\t\tlastName: String,\n\t\t\t\tage: Number\n\t\t\t}\t\n\t\t\t----------------------------------\n\t\t- add a user with these fields\n\t\t- add another user with `age: \"Unknown\"`\n\t\t\t- it will throw a descriptive error that is caught\n\t- 6. required field\n\t\t- convert from String to object:\n\t\t\t---------------------------------\n\t\t\ttitle: {\n\t\t\t\ttype: String,\n\t\t\t\trequired: true\n\t\t\t},\t\t\t\n\t\t\t---------------------------------\n\t\t- test without sending title, it throws a descriptive error\n\t- 7. force lowercase\n\t\t- add email and force it to lowercase\n\t\t\t------------------------------\n\t\t\temail: {\n\t\t\t\ttype: String,\n\t\t\t\tlowercase: true\n\t\t\t}\t\t\t\n\t\t\t------------------------------\n\t- 8. default values\n\t\t- make the whenCreated a default value of current date/time\n\t\t\t----------------------------------------\n\t\t\twhenCreated : {\n\t\t\t\ttype: Date,\n\t\t\t\tdefault: () => Date.now()\n\t\t\t},\n\t\t\t----------------------------------------\n\t\t- note that the data is saved in GMT time\n\t\t\t- this is useful for e.g. customers in multiple time zones\n\t- 9. min/max values\n\t\t- force number of pages to between 10 and 2000\n\t\t\t--------------------------------------\n\t\t\tnumberOfPages: {\n\t\t\t\ttype: Number,\n\t\t\t\tmin: 10,\n\t\t\t\tmax: 2000,\n\t\t\t\trequired: true\n\t\t\t},\n\t\t\t--------------------------------------\n\t\t- try e.g. 6666, 666, 200, 2, -2, and leaving the field out\n\t- 10. minLength/maxLength\n\t\t- force title to be a certain size\n\t\t\t------------------------------------------------\n\t\t\ttitle: {\n\t\t\t\ttype: String,\n\t\t\t\trequired: true,\n\t\t\t\tminLength: 5,\n\t\t\t\tmaxLength: 255\n\t\t\t},\n\t\t\t------------------------------------------------\n\t- custom validations\n\t\t- require email to be valid\n\t\t\t---------------------------------\n\t\t\temail: {\n\t\t\t\ttype: String,\n\t\t\t\tlowercase: true,\n\t\t\t\tvalidate: {\n\t\t\t\t\tvalidator: function (v) {\n\t\t\t\t\t\treturn /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(v);\n\t\t\t\t\t},\n\t\t\t\t\tmessage: \"Please enter a valid email, e.g. name@company.com\"\n\t\t\t\t},\n\t\t\t},\t\t\n\t\t\t---------------------------------\n\t- note\n\t\t- only runs on `save()` method, not on e.g. `Book.findOneAndUpdate()`\n\t\t\t- therefore don't use `findOneAndUpdate()`\n\t\t- e.g. `const addedDocBook = await docBook.save();`\n- Mongoose Querying\n\t- create new route which gets books of a certain language\n\t\t- basic route find() syntax first\n\t\t\t-----------------------------------------\n\t\t\tapp.get('/books-by-language/:language', async (req, res) => {\n\t\t\t\tconst language = req.params.language;\n\t\t\t\tconst books = await Book.find({language}).sort({ title: 1 });\n\t\t\t\tres.status(200).json({\n\t\t\t\t\tmessage: `fetched all books written in ${language}`,\n\t\t\t\t\tbooks,\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------------\n\t\t- change to Mongoose query syntax\n\t\t\t---------------------------------------\n\t\t    const books = await Book.where('language').equals(language).sort('title');\n\t\t\t---------------------------------------\n\t- see [more features of Mongoose querying](https://mongoosejs.com/docs/queries.html)\n- Mongoose Populate\n\t- set related book of \"21 lessons\" to \"Homo Deus\" (62c3fca5997884b0fdda415a)\n\t\t- add id to relatedBook field in 21 lessons\n\t- expand the schema for relatedBook\n\t\t------------------------------------------\n\t\trelatedBook: {\n\t\t\ttype: mongoose.SchemaTypes.ObjectId,\n\t\t\tref: 'book',\n\t\t},\t\t\n\t\t------------------------------------------\n\t- add populate\n\t\t--------------------------------------\n\t    const books = await Book.where('language').equals(language).sort('title').populate('relatedBook');\n\t\t--------------------------------------\n\t- now notice the object returned as relatedBook populated with all fields\n- Mongoose Methods \n\t- add method to schema called enhanceTitle which gives more information\n\t\t-----------------------------------\n\t\tbookSchema.methods.enhanceTitle = function () {\n\t\t\tif (this.numberOfPages >= 200) {\n\t\t\t\tthis.title = this.title + ' (long book)';\n\t\t\t}\n\t\t}\n\t\t-----------------------------------\n\t- call it in the route to dynamically change the title\n\t\t---------------------------------\n\t\tbooks.forEach(book => console.log(book.enhanceTitle()));\t\t\n\t\t---------------------------------\n\t- note that you need to take this into account if you allow the user to change the title\n\t\t- this is more suitable for read-only sites\n- Mongoose Static Methods\n\t- create a function on the schema that finds all short English books and use it in a new route\n\t- Book.js\n\t\t---------------------------------------\n\t\tbookSchema.statics.findShortEnglishBooks = function () {\n\t\t\treturn this.where('language').equals('english').where('numberOfPages').lte(200);\n\t\t}\t\t\n\t\t---------------------------------------\n\t- server.js\n\t\t---------------------------------------\n\t\tapp.get('/short-english-books', async (req, res) => {\n\t\t\tconst books = await Book.findShortEnglishBooks();\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: `fetched all short books in English`,\n\t\t\t\tbooks,\n\t\t\t});\n\t\t});\n\t\t---------------------------------------\n\t- or even more flexible, Book.js\n\t\t----------------------------------------------\n\t\tbookSchema.statics.findShortBooksByLanguage = function (language) {\n\t\t\treturn this.where('language').equals(language).where('numberOfPages').lte(200);\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- server.js\n\t\t-----------------------------------\n\t\tapp.get('/short-books-by-language/:language', async (req, res) => {\n\t\t\tconst language = req.params.language;\n\t\t\tconst books = await Book.findShortBooksByLanguage(language);\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: `fetched all short books in ${language}`,\n\t\t\t\tbooks,\n\t\t\t});\n\t\t});\n\t\t-----------------------------------\n\t- note that we have to call a static method **on the model itself**\n- Mongoose Custom Queries\n\t- make previous example of short-books-by-language more flexible\n\t- Book.js\n\t\t---------------------------------\n\t\tbookSchema.query.byLanguage = function (language) {\n\t\t\treturn this.where('language').equals(language);\n\t\t}\n\t\t---------------------------------\n\t- server.js\n\t\t--------------------------------\n\t\tapp.get('/long-books-by-language/:language', async (req, res) => {\n\t\t\tconst language = req.params.language;\n\t\t\tconst books = await Book.where().byLanguage(language).where('numberOfPages').gt(200);\n\t\t\tres.status(200).json({\n\t\t\t\tmessage: `fetched all long books in ${language}`,\n\t\t\t\tbooks,\n\t\t\t});\n\t\t});\t\t\n\t\t--------------------------------\n\t- note that we have to call a query method on a **where()** or **find()** method\n- Mongoose Virtuals\n\t- create a new field that exists to be sent to the front end, but will not be saved in the database\n\t- e.g. a field that shows all the info of a book on one line\n\t- Book.js\n\t\t--------------------------\n\t\tbookSchema.virtual('bookInfoText').get(function () {\n\t\t\treturn `${this.title}, ${this.numberOfPages} pages: ${this.description}`;\n\t\t});\n\n\t\tbookSchema.set('toJSON', { virtuals: true });\t\t\n\t\t--------------------------\n\t- now in all routes, this field is automatically in the exported JSON\n\t\t- note that for this to be the case, you need the `toJSON` command\n\t\t- otherwise the fields will only be available on the object\n- Mongoose Middleware\n\t- background\n\t\t- middleware gives you **pre** and **post** hooks on specific commands\n\t\t- the most useful commands that have these hooks are **save()**, **validate()**, **remove()**\n\t- **pre** hook\n\t\t- make a whenUpdated field that is written right before object is saved\n\t\t- Book.js\n\t\t\t----------------------------------------\n\t\t\tbookSchema.pre('save', function (next) {\n\t\t\t\tthis.whenUpdated = Date.now();\n\t\t\t\tnext();\n\t\t\t});\n\t\t\t----------------------------------------\n\t\t- note you have to change the PUT/PATCH routes to use .save() and not updateOne() in order for these hooks to run\n\t\t\t-------------------------------------------\n\t\t\tapp.patch('/book/:id', async (req, res) => {\n\t\t\t\tconst id = req.params.id;\n\t\t\t\tconst oldBook = await Book.findOne({ _id: id });\n\t\t\t\tconst book = await Book.findOne({ _id: id });\n\t\t\t\tObject.entries(req.body).forEach(kv => {\n\t\t\t\t\tbook[kv[0]] = kv[1];\n\t\t\t\t}) \n\t\t\t\tbook.save(); \n\t\t\t\tconst newBook = await Book.findOne({ _id: id });\n\t\t\t\tres.status(200).json({\n\t\t\t\t\tmessage: 'patched book with id=' + id,\n\t\t\t\t\toldBook,\n\t\t\t\t\tnewBook,\n\t\t\t\t});\n\t\t\t});\t\t\n\t\t\t-------------------------------------------\n\t- **post** hook\n\t\t- after book is saved, log info in the console\n\t\t- Book.js\n\t\t\t-----------------------------------\n\t\t\tbookSchema.post('save', function (doc,next) {\n\t\t\t\tconst dt = new Date();\n\t\t\t\tconst timestamp = dt.toISOString();\n\t\t\t\tconsole.log(`${timestamp}: updated book \"${doc.title}`);\n\t\t\t\tnext();\n\t\t\t});\n\t\t\t-----------------------------------\n\t\t- test in save, wherever .save() is used, it will log to the console","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-23 07:41:06","systemWhoCreated":"systemUnknown"},{"id":677,"category":"bcrypt","title":"Secure admin password and database connection string with bcrypt","body":"- **what we will do**\n\t- in this howto, we will install a fullstack, MERN CRUD app which has one admin user \n\t- in this app, the password to admin is saved in an .env file in plain text\n\t- we will use bcrypt so that instead of plain text, we can save the file as a bcrypt hash\n- **code**\n\t- code for this howto is here: https://github.com/edwardtanguay/merncrud022-backend\n- **set up MERN CRUD backend and frontend**\n\t- choose a name for your app, in this howto the name will be **merncrud014**\n\t\t- from now on in this howto, everytime I use the name **merncrud014**, use the name of your app instead\n\t- open your terminal and navigate to your projects directory\n\t- globally install the app creation tool sweetstack\n\t\t- `npm i -g sweetstack`\n\t- create a directory with backend and frontend for our MERN CRUD app with the following command and choices:\n\t\t- `npx sweetstack`##sweet14\n\t- enter the created directory\n\t\t- `cd merncrud014`\n\t- change the names of the directories to be prefixed with `merncrud014-`\n\t\t- `mv backend merncrud014-backend`\n\t\t- `mv frontend merncrud014-frontend`\n\t\t- we do this so that these are the default names for our GitHub repositories when we create them\n\t- **set up backend**\n\t\t- open the backend project in VSCode\n\t\t\t- `code merncrud014-backend`\n\t\t- in VSCODE open the README.md file and follow the instructions making all necessary changes, e.g. call the database **merncrud014**, etc.\n\t\t\t- e.g. I choose to use a local database so here is my completed .env file:\n\t\t\t\t--------------------------------------------------\n\t\t\t\tAPP_NAME = Book Site API\n\t\t\t\tSECONDS_TILL_SESSION_TIMEOUT = 3600 \n\t\t\t\tPORT = 5011\n\t\t\t\tMONGODB_CONNECTION = mongodb://localhost:27017/merncrud014\n\t\t\t\tSESSION_SECRET = skjfksdjfskdjf\n\t\t\t\tADMIN_PASSWORD = 123\n\t\t\t\tFRONTEND_URL = http://localhost:5012\n\t\t\t\tNODE_ENVIRONMENT = development\t\t\t\t\n\t\t\t\t--------------------------------------------------\n\t\t- install node modules\n\t\t\t- `npm i`\n\t\t- start the app\n\t\t\t- `npm run dev`\n\t\t- you should see:##back14see\n\t- **set up frontend**\n\t\t- open the backend project in VSCode\n\t\t\t- `code merncrud014-frontend`\n\t\t- basically you just need to set up an .env file, make sure the port is the same as the FRONTEND_URL port above, e.g. 5012\n\t\t\t------------------------------------------\n\t\t\tVITE_BACKEND_URL = http://localhost:5001\n\t\t\t------------------------------------------\n\t\t- also make sure in **vite.config.ts**, the port also matches\n\t\t\t----------------------------------\n\t\t\texport default defineConfig({\n\t\t\t  plugins: [react()],\n\t\t\t  server: {\n\t\t\t\tport: 5012,\n\t\t\t  },\n\t\t\t})\t\t\t\n\t\t\t----------------------------------\n\t\t- install node modules\n\t\t\t- `npm i`\n\t\t- start the app\n\t\t\t- `npm run dev`\n\t\t- click the URL, the app should work","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-24 07:54:11","systemWhoCreated":"systemUnknown"},{"id":678,"category":"bcrypt","title":"Add multi-user authentication to a fullstack MERN CRUD app with bcrypt","body":"- **what we will do**\n\t- in this howto, we will install a fullstack, MERN CRUD app which has one admin user \n\t- we will extend it so that instead of only one user (admin) which logs in per password only\n\t\t- numerous users can log in with their own login and password\n\t\t- some of them will have admin rights and others won't\n- **code**\n\t- final code for this howto is here: https://github.com/edwardtanguay/merncrud031-backend\n- **set up MERN CRUD backend**\n\t- for this howto, we will only develop the backend\n\t- I will call my project **merncrud030**\n\t\t- everytime this name is used in this howto, replace it with the name of your project\n\t- for the base starting point of this project, we will use the backend of this starter\n\t\t- https://starters.tanguay.eu/list/mernMongooseBookCrudFullstack\n\t- to expedite the process, we will use the npm install tool **sweetstack** to install this backend code\n\t- in your terminal, navigate to your projects directory\n\t- install sweetstack globally\n\t\t- `npm i -g sweetstack`\n\t- generate project directory and frontend and backend code\n\t\t- enter `sweetstack` and make the following selections:##thecgos\n\t- enter project directory\n\t\t- `cd merncrud030`\n\t- open backend directory in VSCode\n\t\t- `code merncrud030-backend`\n\t- if it doesn't exist, create a **.gitignore** file:\n\t\t--------------------------------\n\t\tnode_modules\n\t\t.vscode\n\t\tdist\n\t\t.env\n\t\t--------------------------------\n\t- recreate Git repository\n\t\t- `rm -rf .git`\n\t\t- `git init -b main`\n\t\t- make initial commit\n\t- create database\n\t\t- in your local MongoDB server (or in your online MongoDB Atlast cluster), create a database named **merncrud030**\n\t\t- create a collection in it called **books**\n\t\t- with MongoDB Compass, import the file `dev/books.json` into the collection `books`\n\t- create an **.env** file in the root directory and make all necessary changes\n\t\t--------------------------------------------------\n\t\tAPP_NAME = Book Site API\n\t\tSECONDS_TILL_SESSION_TIMEOUT = 3600 \n\t\tPORT = 3041\n\t\tMONGODB_CONNECTION = mongodb://localhost:27017/merncrud030\n\t\tSESSION_SECRET = kskdj3423sdk234\n\t\tADMIN_PASSWORD = 123\n\t\tFRONTEND_URL = http://localhost:3042\n\t\tNODE_ENVIRONMENT = development\t\t\t\t\n\t\t--------------------------------------------------\n\t- install node modules\n\t\t- `npm i`\n\t- start the app\n\t\t- `npm run dev`\n\t- you should see:##shouldksee\n- **create user collection**\n\t- fields\n\t\t- username\n\t\t- hash\n\t\t- firstName\n\t\t- lastName\n\t\t- accessGroups (array)\n\t- users\n\t\t- anonymousUser\n\t\t\t- loggedOutUsers\n\t\t- edward\n\t\t\t- loggedInUsers, members, admins\n\t\t- marina\n\t\t\t- loggedInUsers, members\n\t\t- victor\n\t\t\t- loggedInUsers, members\n\t\t- miki\n\t\t\t- loggedInUsers, unapprovedMembers\n\t- create bcrypt hashs for all users\n- **refactor /login**\n\t- compare bcrypt hashes\n\t- save whole user object on session","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-25 02:01:11","systemWhoCreated":"systemUnknown"},{"id":679,"category":"MERN","title":"Implement multiuser authentication/authorization with React Router in a fullstack MERN CRUD website","body":"- **what we will do**\n\t- we are going to build a fullstack MERN CRUD website that allows multiple users to log in (**authentication**) with various levels of access and rights (**authorization**)\n\t- we will start with a backend that is already set up with multiple users and a `/login` route that will authenticate them with bcrypt\n\t- we will then clone a frontend that is programmed to log in an admin user based on password\n\t\t- we will extend this frontend to enable any user to log in with username and password\n- **final project**\n\t- full code is here\n\t\t- https://github.com/edwardtanguay/merncrud050-backend\n\t- finished site will work like this: nnn\n- **set up backend**\n\t- in this howto, I will call this project **merncrud050**\n\t\t- everytime you see **merncrud050**, substitute it with the name of your project\n\t- in your project folder, create a directory called **merncrud050**\n\t- navigate into your project directory\n\t\t- `cd merncrud050`\n\t- clone the backend project\n\t\t- `git clone git@github.com:edwardtanguay/merncrud031-backend.git merncrud050-backend`\n\t- open VSCode in your backend directory\n\t\t- `code merncrud050-backend`\n\t- open terminal in VSCode\n\t- create a new Git repository for this project\n\t\t- `rm -rf .git`\n\t\t- `git init -b main`\n\t\t- make initial commit\n\t- create password-hashes in `dev/user.json` file with `npm run bcrypt`\n\t- in MongoDB Compass, create MongoDB database e.g. `merncrud050` with two collections\n\t  - `books` - import from `dev/books.json`\n\t  - `users` - import from `dev/users.json`\n\t- create a **.env** file and make any necessary changes\n\t\t-----------------------------------------------\n\t\tAPP_NAME = Book Site API\n\t\tSECONDS_TILL_SESSION_TIMEOUT = 3600\n\t\tPORT = 3100\n\t\tMONGODB_CONNECTION = mongodb://localhost:27017/merncrud050\n\t\tSESSION_SECRET = ksjfkdj2384sdfj\n\t\tFRONTEND_URL = http://localhost:3101\n\t\tNODE_ENVIRONMENT = development\n\t\t-----------------------------------------------\n\t- install the node modules\n\t\t- `npm i`\n\t- start site\n\t\t- `npm run dev`\t\n\t- when setup is finished, your backend should be able to log users in with **test.rest** like this##afterinastback\n- **set up frontend**\n\t- we will now install the frontend which will communicate with our backend, i.e. \n\t\t- retrieve the books and display them\n\t\t- allow each of the users to log in via their username and password\n\t\t- depending on the access groups they belong to, they will \n\t\t\t- see information on the site\n\t\t\t- see and be able to access different pages in the menu\n\t\t\t- pages where they have no rights will deny them access\n\t- we will first install a site that allows the user to type in a password to gain admin access\n\t\t- we will restructure this so that the login page asks for username and password and logs the appropriate use in with appropriate rights\n\t- in your terminal, go the **merncrud050** directory\n\t\t- in this directory there should currently only be the directory **merncrud050-backend**\n\t- clone the frontend repository into a directory called **merncrud050-frontend**\n\t\t- `git clone git@github.com:edwardtanguay/et-mern-crud-site-frontend.git merncrud050-frontend`\n\t- open VSCode in your backend directory\n\t\t- `code merncrud050-frontend`\n\t- open terminal in VSCode\n\t- create a new Git repository for this project\n\t\t- `rm -rf .git`\n\t\t- `git init -b main`\n\t\t- make initial commit\n\t- install the node modules\n\t\t- `npm i`\t\n\t- create a **.env** file\n\t\t-----------------------------------------------\n\t\tVITE_BACKEND_URL = http://localhost:3101\n\t\t-----------------------------------------------\n\t- be sure that the backend variable **FRONTEND_URL** and the frontend variable **VITE_BACKEND_URL** are the same\n\t- and be sure that the port listed in these two variables is the same as the port in the **vite.config.ts** file##showvitecon\n\t- start site\n\t\t- `npm run dev`\n\t- you should see the book site:##seethebooksite\n\t- but you are not able to log in because the backend has been changed from admin to multiple users\n- **enable users to log in**\n\t- we will now enable users to log in with their usernames and passwords\n\t\t- show their name under the site title\n\t- make new form with username and password\n\t\t- **PageLogin.tsx**\n\t\t\t--------------------------------------\n\t\t\t<form>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Please provide your credentials</legend>\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"password\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"buttonArea\">\n\t\t\t\t\t\t<div className=\"message\">This is a test message.</div>\n\t\t\t\t\t\t<button type=\"button\">Submit</button>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t</form>\t\t\t\n\t\t\t--------------------------------------\n\t\t- **App.scss**\n\t\t\t------------------------------------\n\t\t\t.pageLogin {\n\t\t\t\tform {\n\t\t\t\t\tfieldset {\n\t\t\t\t\t\tmargin: 2em 2em 2em 0;\n\t\t\t\t\t\tpadding: 1.5em 2em 2em 2em;\n\t\t\t\t\t\tborder: solid 1px #ccc;\n\t\t\t\t\t\tborder-radius: 6px;\n\t\t\t\t\t\twidth: 20rem;\n\t\t\t\t\t\tmin-width: 200px;\n\t\t\t\t\t\tbackground-color: #2a2a2a;\n\n\t\t\t\t\t\tlegend {\n\t\t\t\t\t\t\tpadding: 0 .25em;\n\t\t\t\t\t\t\tcolor: rgb(200, 169, 110) !important;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlabel {\n\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\tmargin-bottom: .3rem;\n\n\t\t\t\t\t\t\t&:after {\n\t\t\t\t\t\t\t\tcontent: ':';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinput {\n\t\t\t\t\t\t\tpadding: .5em;\n\t\t\t\t\t\t\tborder: 1px solid #999;\n\t\t\t\t\t\t\twidth: 96%;\n\t\t\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttextarea {\n\t\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t\t\theight: 6rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.buttonArea {\n\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\t\tgap: 2rem;\n\t\t\t\t\t\t\tmargin-top: 1rem;\n\n\t\t\t\t\t\t\tdiv.message {\n\t\t\t\t\t\t\t\tcolor: yellow;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\t\t\t\tpadding: .3rem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t------------------------------------\n\t\t- your form should look like this:##formlikethisji\n\t\t- make form work first\n\t\t\t- log in and show of logged in person below app title\n\t\t- implement login/logout page switching\n\t\t- then build in all [form handling and UX features](https://github.com/edwardtanguay/merncrud050-frontend/blob/main/src/pages/PageLogin.tsx) in one at a time","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-25 17:19:36","systemWhoCreated":"systemUnknown"},{"id":680,"category":"JWT","title":"Understand the difference between session-cookies and JWT tokens","body":"- **session-cookies**\n\t- a browser makes a request to a server\n\t- the server sets a cookie on then browser which contains a session id\n\t- everytime the browser sends a request to the server, the session object with that id is looked up\n\t- code on the server (e.g. a Node/Express/JavaScript app) can set properties on that session object\n\t\t- e.g. a user object which has information about the user who gave a correct password while using the browser which has to cookie which has the id which corresponds to the session id\n\t- therefore, as long as the cookie hasn't yet expired, each time the browser makes a request to the server, the backend code knows that the browser is being used by the same person who logged in earlier\n\t- the metaphor here is cattle branding: the browser gets branded with a session id so the server can recognize it when it comes back\n- **JWT**\n\t- a browser makes a request to a server\n\t- the server sends the browser a JWT token and says, \"you can use this token to return here or to any other server that accepts this token\"\n\t- the browser saves the JWT token in e.g. local storage\n\t- everytime the browser sends a request to the original server or any other server that accept the token, it sends the token along with the request\n\t- the token has a timestamp on it so that it eventually will be invalid\n\t- the metphor here is VIP wrist bands: you pay to get into a party, you get a VIP wrist band which means you can leave the party, go to other parties which accept the wrist band, and return to the original party, until the wristband expires\n- **overview**:##thegraphicjwtsessions\n- **technical implementation**\n\t- JWT tokens have to be saved on the client\n\t\t- the client (browser) is responsible for how these tokens are saved\n\t\t- the most popular ways are\n\t\t\t- local storage\n\t\t\t- cookie\n\t\t- the following code is what needs to be implemented for JWT with \n\t\t\t- TypeScript\n\t\t\t- ES6 modules\n\t\t\t- local storage (only affects the frontend)\n\t- **BACKEND**\n\t\t- import npm package **jsonwebtoken**\n\t\t\t- `npm i jsonwebtoken`\n\t\t\t- **server.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\timport jwt from 'jsonwebtoken';\n\t\t\t\t---------------------------------------\n\t\t- inteface for TypeScript\n\t\t\t- **server.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\tinterface CustomRequest extends Request {\n\t\t\t\t\ttoken: string;\n\t\t\t\t}\n\t\t\t\t---------------------------------------\n\t\t- decode JWT token that comes back from client\n\t\t\t- **server.ts**\n\t\t\t\t--------------------------\n\t\t\t\tconst decodeJwt = (token: string) => {\n\t\t\t\t\tlet base64Url = token.split('.')[1];\n\t\t\t\t\tlet base64 = base64Url.replace('-', '+').replace('_', '/');\n\t\t\t\t\tlet decodedData = JSON.parse(Buffer.from(base64, 'base64').toString('binary'));\n\t\t\t\t\treturn decodedData;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------\n\t\t- middleware to analyze incoming tokens and confirm or reject them\n\t\t\t- used similar to **authorizeAsAdmin**, etc. middleware functions in session/cookie implementations\n\t\t\t- **server.ts**\n\t\t\t\t-------------------------------------\n\t\t\t\tconst verifyToken = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\t\t\t\tconst bearerHeader = req.headers['authorization'];\n\t\t\t\t\tif (typeof bearerHeader !== 'undefined') {\n\t\t\t\t\t\tconst bearer = bearerHeader.split(' ');\n\t\t\t\t\t\tconst bearerToken = bearer[1];\n\t\t\t\t\t\t(req as unknown as CustomRequest).token = bearerToken;\n\t\t\t\t\t\tnext();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.sendStatus(403);\n\t\t\t\t\t}\n\t\t\t\t};\t\t\t\t\n\t\t\t\t-------------------------------------\n\t\t- use **verifyToken** in every route that needs protection, e.g.\n\t\t\t- **server.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\tapp.post('/welcomemessage', verifyToken, (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst { welcomeMessage } = req.body;\n\t\t\t\t\tmodel.saveWelcomeMessage(welcomeMessage);\n\t\t\t\t\tres.send({});\n\t\t\t\t})\t\t\t\n\t\t\t\t---------------------------------------\n\t\t- send token to client on successful login\n\t\t\t- **server.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tapp.post('/login', (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst password = req.body.password;\n\t\t\t\t\tif (password === process.env.ADMIN_PASSWORD) {\n\t\t\t\t\t\tconst user = {\n\t\t\t\t\t\t\tfirstName: 'Admin',\n\t\t\t\t\t\t\tlastName: 'User',\n\t\t\t\t\t\t\taccessGroups: [\n\t\t\t\t\t\t\t\t'loggedInUsers', 'admins'\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjwt.sign({ user }, process.env.SESSION_SECRET, { expiresIn: config.secondsTillTimeout + 's' }, (err: any, token: string) => {\n\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\ttoken\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.status(401).send({});\n\t\t\t\t\t}\n\t\t\t\t});\t\t\t\t\n\t\t\t\t--------------------------------------------\n\t\t- route to keep user logged in on browser refresh\n\t\t\t- if token is valid then send user the data in the token, e.g. user information (with e.g. accessGroups, etc.)\n\t\t\t- **server.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tapp.post('/currentuser', verifyToken, (req: express.Request, res: express.Response) => {\n\t\t\t\t\tjwt.verify((req as unknown as CustomRequest).token, process.env.SESSION_SECRET, (err, authData) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tres.sendStatus(403);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst data = decodeJwt((req as unknown as CustomRequest).token);\n\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\tuser: data.user\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\t\t\t\t\n\t\t\t\t--------------------------------------------\n\t- **FRONTEND**\n\t\t- on successful login, save token to local storage\n\t\t\t- **AppContext.tsx**\n\t\t\t\t---------------------------------------\n\t\t\t\tlocalStorage.setItem('token', response.data.token);\t\t\t\t\n\t\t\t\t---------------------------------------\t\n\t\t- keep logged-in user logged in\n\t\t\t- get token out of localstorage and send to server for verification\n\t\t\t- **AppContext.tsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await fetch(`${backendUrl}/currentuser`, {\n\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\tauthorization: 'Bearer ' + localStorage.getItem('token'),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t\tsetAdminIsLoggedIn(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\t\t\t\t--------------------------------------------\n\t\t- anytime you need to access a protected route, send the token along with the request\n\t\t\t- **AppContext.tsx**\n\t\t\t\t--------------------------------------------------\n\t\t\t\tconst response = await fetch(`${backendUrl}/welcomemessage`, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: JSON.stringify({ welcomeMessage }),\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\tauthorization: 'Bearer ' + localStorage.getItem('token'),\n\t\t\t\t\t},\n\t\t\t\t});\t\t\t\n\t\t\t\t--------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-29 23:53:01","systemWhoCreated":"systemUnknown"},{"id":681,"category":"JWT","title":"Convert a session-cookie site with admin login to JWT","body":"- **what we will do**\n\t- we will set up a site that allows a user to log in with session/cookie authentication\n\t- we will convert the site from session/cookie authetnication to JWT authentication\n- **final code**\n\t- backend: \n\t\t- https://github.com/edwardtanguay/jwt224-backend\n\t- frontend:\n\t\t- https://github.com/edwardtanguay/jwt224-frontend\n- set up this session/cookie site:\n\t- go to this starter site:\n\t\t- https://starters.tanguay.eu/list/reactNodeSimpleAdminAuth\n\t\t- download or clone code for backend/frontend into a directory structure, e.g.:\n\t\t\t- `jwt224`\n\t\t\t\t- `jwt224-backend`\n\t\t\t\t- `jwt224-frontend`\n\t- setup **BACKEND**\n\t\t- `npm i`\n\t\t- `npm run`\n\t\t- fix issues with site\n\t\t\t- **.env**\n\t\t\t\t---------------------------------------\n\t\t\t\tSESSION_SECRET = skdjfks28374\n\t\t\t\tADMIN_PASSWORD = 123\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- fix test page\n\t\t\t\t----------------------------------\n\t\t\t\t<h1>Test API</h1>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"/welcomemessage\">/welcomemessage</a> - shows message</li>\n\t\t\t\t</ul>\t\t\n\t\t\t\t----------------------------------\n\t\t\t- **test.rest**\n\t\t\t\t-----------------------------\n\t\t\t\t@url = http://localhost:3511\n\t\t\t\t-----------------------------\t\t\t\n\t\t- run all tests in test.rest\n\t- setup **FRONTEND**\n\t\t- `npm i`\n\t\t- `npm run`\n\t\t- site should work with backend, i.e. enable user to log in and change welcome message\n- convert session/cookies to JWT\n\t- **BACKEND**\n\t\t- **server.ts**\n\t\t\t- delete session/cookie code\n\t\t\t\t- `import session from 'express-session';`\n\t\t\t\t- `import cookieParser from 'cookie-parser';`\n\t\t\t\t- TypeScript code for session/cookies\n\t\t\t\t\t------------------------------------------\n\t\t\t\t\tdeclare module 'express-session' {\n\t\t\t\t\t\texport interface SessionData {\n\t\t\t\t\t\t\tuser: { [key: string]: any };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t------------------------------------------\n\t\t\t\t- `app.use(cookieParser());`\n\t\t\t\t- session definition\n\t\t\t\t\t---------------------------------------\n\t\t\t\t\tapp.use(\n\t\t\t\t\t\tsession({\n\t\t\t\t\t\t\tresave: true,\n\t\t\t\t\t\t\tsaveUninitialized: true,\n\t\t\t\t\t\t\tsecret: process.env.SESSION_SECRET,\n\t\t\t\t\t\t\tcookie: {\n\t\t\t\t\t\t\t\thttpOnly: true,\n\t\t\t\t\t\t\t\tsameSite: 'lax',\n\t\t\t\t\t\t\t\tsecure: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t);\t\t\t\t\t\n\t\t\t\t\t---------------------------------------\n\t\t\t- uninstall cookie/session packages\n\t\t\t\t- `npm un cookie-parser`\n\t\t\t\t- `npm un express-session`\n\t\t\t\t- `npm un -D @types/cookie-parser`\n\t\t\t\t- `npm un -D @types/express-session`\n\t\t\t- install JWT package\n\t\t\t\t- `npm i jsonwebtoken`\n\t\t\t\t- `npm i --save-dev @types/jsonwebtoken` (TypeScript types)\n\t\t\t- **server.ts**\n\t\t\t\t- add JWT code\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\timport jwt from 'jsonwebtoken';\n\n\t\t\t\t\tinterface CustomRequest extends Request {\n\t\t\t\t\t token: string;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst decodeJwt = (token: string) => {\n\t\t\t\t\t\tlet base64Url = token.split('.')[1];\n\t\t\t\t\t\tlet base64 = base64Url.replace('-', '+').replace('_', '/');\n\t\t\t\t\t\tlet decodedData = JSON.parse(Buffer.from(base64, 'base64').toString('binary'));\n\t\t\t\t\t\treturn decodedData;\n\t\t\t\t\t}\t\t\n\n\t\t\t\t\tconst verifyToken = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\t\t\t\t\tconst bearerHeader = req.headers['authorization'];\n\t\t\t\t\t\tif (typeof bearerHeader !== 'undefined') {\n\t\t\t\t\t\t\tconst bearer = bearerHeader.split(' ');\n\t\t\t\t\t\t\tconst bearerToken = bearer[1];\n\t\t\t\t\t\t\t(req as unknown as CustomRequest).token = bearerToken;\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.sendStatus(403);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\t\t\t\t\t\n\t\t\t\t\t-------------------------------------\n\t\t\t\t- change session/cookie code to JWT code\n\t\t\t\t\t- **/login**\n\t\t\t\t\t\t--------------------------------------\n\t\t\t\t\t\tapp.post('/login', (req: express.Request, res: express.Response) => {\n\t\t\t\t\t\t\tconst password = req.body.password;\n\t\t\t\t\t\t\tif (password === process.env.ADMIN_PASSWORD) {\n\t\t\t\t\t\t\t\tconst user = {\n\t\t\t\t\t\t\t\t\tfirstName: 'Admin',\n\t\t\t\t\t\t\t\t\tlastName: 'User',\n\t\t\t\t\t\t\t\t\taccessGroups: [\n\t\t\t\t\t\t\t\t\t\t'loggedInUsers', 'admins'\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tjwt.sign({ user }, process.env.SESSION_SECRET, { expiresIn: config.secondsTillTimeout + 's' }, (err: any, token: any) => {\n\t\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\t\ttoken\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tres.status(401).send({});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t--------------------------------------\n\t\t\t\t\t- **/currentuser** \n\t\t\t\t\t\t- note that you change it from **get** to **post** (so you can send the token)\n\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t\tapp.post('/currentuser', verifyToken, (req: express.Request, res: express.Response) => {\n\t\t\t\t\t\t\tjwt.verify((req as unknown as CustomRequest).token, process.env.SESSION_SECRET, (err, authData) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tres.sendStatus(403);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst data = decodeJwt((req as unknown as CustomRequest).token);\n\t\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\t\tuser: data.user\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\t-----------------------------------\n\t\t\t\t\t- **/logout**\n\t\t\t\t\t\t- delete this since it will be taken care of on the frontend\n\t\t\t\t\t\t- i.e. the frontend simply deletes its token\n\t\t\t\t\t- **authorizeUser**\n\t\t\t\t\t\t- delete, since this is replaced by **verifyToken**\n\t\t\t\t\t- **/welcomemessage**\n\t\t\t\t\t\t- replace **authorizeUser** with **verifyToken**\n\t\t\t- test in **test.rest**\n\t\t\t\t- **config.ts**\n\t\t\t\t\t- change secondsTillTimeout to **20** since it takes time to copy the token\n\t\t\t\t- delete **logout** test\n\t\t\t\t- when you check **currentuser** you have to copy the token from **login**\n\t- **FRONTEND**\n\t\t- **currentuser** (useEffect)\n\t\t\t--------------------------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await fetch(`${backendUrl}/currentuser`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\tauthorization: 'Bearer ' + localStorage.getItem('token'),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tsetAdminIsLoggedIn(true);\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}, []);\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **loginAsAdmin**\n\t\t\t---------------------------------------\n\t\t\tconst response = await axios.post(\n\n\t\t\tlocalStorage.setItem('token', response.data.token);\n\t\t\t---------------------------------------\n\t\t- **logout** (with JWT, logout is handled on the frontend)\n\t\t\t----------------------------------------\n\t\t\tconst logoutAsAdmin = () => {\n\t\t\t\tlocalStorage.removeItem('token');\n\t\t\t\tsetAdminIsLoggedIn(false);\n\t\t\t};\n\t\t\t----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-01-30 01:08:55","systemWhoCreated":"systemUnknown"},{"id":682,"category":"Node","title":"How to set up Google Account to use NodeMailer and send mails from your online Node/Express application","body":"- **What we will build**\n\t- this is a simple Node app using which when executed, sends a mail to an email address\n\t- we can send unlimited e-mails with this solution\n\t- this is a good solution if you are building e.g. a registration page where the use needs to receive an email to confirm their email address\n\t- when we send a test mail, it will look something like this:##sendthemailkk\n\t- the email arrives immediately in the target mailbox and looks like this:##maillooksksklooks\t\n- **How we will build it**\n\t- we will use the free service **nodemailer** to send mail\n\t- we will send the mail via a **Gmail account that we set up** and secure with 2-factor authentication\n\t- we will use **dotenv** to hide the password in an .env file\n- **What we will use**\n\t- Node\n\t- nodemailer\n\t- dotenv\n\t- Gmail account\n- **1. Set up dedicated Gmail account for your application**\n\t- first decide on a name for the account\n\t\t- remember that **this name will be shown when people receive your mails**\n\t\t- therefore make it as **appropriate, professional and serious-looking** as possible\n\t\t- e.g. if you run a language community site called **Spanish Chat Group** choose a name such as:\n\t\t\t- **spanishchatgroup**@gmail.com\n\t\t\t- **spanishchatgroupsite**@gmail.com\n\t\t\t- **spanishchatgroupteam**@gmail.com\n\t\t- **create a new Gmail account**\n\t\t\t- go to: https://mail.google.com\n\t\t\t- create account with the account name you decided on above##accountbeingcr\n\t\t\t- takes about 3 minutes\n\t\t\t- provide accurate information so that your account remains valid, these are the required fields:##provideemailinfos\n\t\t\t- choose the express personalization, you are forced to choose ads anyway##chooseanyway\n\t\t\t- 2x Confirm button\n\t\t\t- you now have a mailbox for your Google Mail account##nowhavemail\n\t\t- **secure this Gmail account with 2-step verification** \n\t\t\t- note that in May 2022, Google requires apps that send email via Gmail to use only 2-step verified accounts\n\t\t\t- to use the Gmail account you just created, you will have to **verify this account with e.g. an SMS to your smartphone**\n\t\t\t- goto: https://myaccount.google.com\n\t\t\t- sign in with your new account\n\t\t\t- choose **Security** and **Confirm in 2 Steps** (2-Step Verification)##sicherheitand\n\t\t\t\t- [JETZT LOSLEGEN]\n\t\t\t\t- type in your number (in Germany, start with number without \"0\" so if you number is **0179** then type **179**##typeinwithtel\n\t\t\t\t- you immediately get an SMS\n\t\t\t\t- typed in code from SMS, e.g. **G-283743*\n\t\t\t\t- click [Activate]\n\t\t- **create a password to use with NodeMailer**\n\t\t\t- to increase security, you have to create a password specifically for each app that uses this account to send e-mails\n\t\t\t- go back to your Google Account main page and click on **app passwords**##theapppass\n\t\t\t- for \"choose app\" select **Other**##choosetheotherkjkj\n\t\t\t- type in the word **NodeMailer**##andthenoddd\n\t\t\t- select and CTRL-C the password that you see here##selectandctrlc\n\t\t\t- paste the password into e.g. your Keepass for safe-keeping as you will need to use this password **instead of your main password for this account** when you send mails with NodeMailer\n- **2. Create code to send test mail**\n\t- set up simple script to send e-mails with your google account and NodeMailer password\n\t\t- https://github.com/edwardtanguay/nodemailer011\n\t- **server.js**\n\t\t--------------------------------------------\n\t\timport { createTransport } from 'nodemailer';\n\t\timport dotenv from 'dotenv';\n\n\t\tdotenv.config();\n\n\t\tconst transporter = createTransport({\n\t\t\tservice: 'gmail',\n\t\t\tauth: {\n\t\t\t\tuser: process.env.GOOGLE_MAIL_ACCOUNT_USER, // e.g. sitemailer92833\n\t\t\t\tpass: process.env.GOOGLE_MAIL_NODEMAILER_PASSWORD, // this is the \"app password\" that you set up, not the main password for this mail account\n\t\t\t},\n\t\t});\n\n\t\tconst mailOptions = {\n\t\t\tfrom: `Language Community Site <${process.env.GOOGLE_MAIL_ACCOUNT_USER}@gmail.com>`,\n\t\t\tto: 'thereceipient@domain.com', // change this to email you want to received test mails at\n\t\t\tsubject: 'Please confirm your registration',\n\t\t\thtml: `\n\t\t<h1>Please confirm your registration</h1>\t\n\t\t<p>Thank you for signing up with us!</p>\n\t\t<p>Please click here to confirm your registration: https://edwardtanguay.vercel.app/howtos</p>\n\t\t`,\n\t\t};\n\n\t\ttransporter.sendMail(mailOptions, (error, info) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tconsole.log('Email sent: ' + info.response);\n\t\t\t}\n\t\t});\t\t\n\t\t--------------------------------------------\n- **3. If you want to set up a complete registration process in which users can register for your site and receive an confirmation email, see this project:**\n\t- repositories\n\t\t- Frontend: https://github.com/edwardtanguay/et003testfront\n\t\t- Backend: https://github.com/edwardtanguay/et003test\n\t- database\n\t\t- et01reactregister\n\t- note\n\t\t- put in some kind of protection for denial-of-service attacks so that bots don't find your website and fill your database with 100,000 fake membership registrations","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-02 00:39:18","systemWhoCreated":"systemUnknown"},{"id":683,"category":"functional programming","title":"How to convert OOP polymorphism code to functional programming","body":"- I asked ChapGPT the following question and got the following answer\n\t- **How would you convert this OOP code using polymorphism to functional programming?**\n\t\t--------------------------------------------\n\t\tclass Scanner {\n\t\t\tprivate name;\n\n\t\t\tconstructor(name) {\n\t\t\t\tthis.name = name;\n\t\t\t}\n\n\t\t\tgetTemperature() {\n\t\t\t\t// will be overridden\n\t\t\t}\n\n\t\t\tgetLocation() {\n\t\t\t\treturn longitude/latitude;\n\t\t\t}\n\n\t\t\tmethod001 {\n\t\t\t\t// very long and complicated\n\t\t\t}\n\n\t\t\tmethod002 {\n\t\t\t\t// very long and complicated\n\t\t\t}\n\n\t\t\tmethod003 {\n\t\t\t\t// very long and complicated\n\t\t\t}\n\t\t}\n\n\t\tclass GreenHouseScanner extends Scanner {\n\t\t\tgetTemperature() {\n\t\t\t\tget temperature readings from 10 devices\n\t\t\t\treturn average\n\t\t\t}\n\t\t}\n\n\t\tclass WarehouseScanner extends Scanner {\n\t\t\tgetTemperature() {\n\t\t\t\treturn mainThermometere temperature\n\t\t\t}\n\t\t}\n\n\t\tclass FlyingDevice extends Scanner {\n\t\t\tgetLocation() {\n\t\t\t\t// also calculate height\n\t\t\t}\n\t\t}\n\n\t\tclass PlaneScanner extends FlyingDevice {\n\t\t\tgetTemperature() {\n\t\t\t\treturn average from parts of plane;\n\t\t\t}\n\t\t}\n\n\t\tclass HelicopterScanner extends FlyingDevice {\n\t\t\tgetTemperature() {\n\t\t\t\treturn get one temperature;\n\t\t\t}\n\t\t}\n\n\t\tscanner1 = new GreenHouseScanner();\n\t\tscanner2 = new WarehouseScanner();\n\t\tscanner3 = new WarehouseScanner();\n\t\tscanner4 = new WarehouseScanner();\n\t\tscanner5 = new GreenHouseScanner();\n\t\tscanner6 = new PlaneScanner();\n\n\t\tscanner6.getLocation()\n\n\t\tconst scanners = [scanner1, scanner2, scanner3, scanner4, scanner5, scanner6];\n\n\t\tscanners.map(scanner => {\n\t\t\treturn scanner.getTemperature();\n\t\t});\n\n\t\tscanners.map(scanner => {\n\t\t\treturn scanner.getLocation();\n\t\t});\n\t\t--------------------------------------------\n\t- **ChatGPT's answer**\n\t\t-------------------------------------------\n\t\tconst Scanner = name => ({\n\t\t  name,\n\t\t  getTemperature: () => {\n\t\t\t// will be overridden\n\t\t  },\n\t\t  getLocation: () => longitude/latitude,\n\t\t  method001: () => {\n\t\t\t// very long and complicated\n\t\t  },\n\t\t  method002: () => {\n\t\t\t// very long and complicated\n\t\t  },\n\t\t  method003: () => {\n\t\t\t// very long and complicated\n\t\t  }\n\t\t});\n\n\t\tconst GreenHouseScanner = name => {\n\t\t  const scanner = Scanner(name);\n\t\t  return {\n\t\t\t...scanner,\n\t\t\tgetTemperature: () => {\n\t\t\t  // get temperature readings from 10 devices\n\t\t\t  // return average\n\t\t\t}\n\t\t  };\n\t\t};\n\n\t\tconst WarehouseScanner = name => {\n\t\t  const scanner = Scanner(name);\n\t\t  return {\n\t\t\t...scanner,\n\t\t\tgetTemperature: () => {\n\t\t\t  // return mainThermometere temperature\n\t\t\t}\n\t\t  };\n\t\t};\n\n\t\tconst FlyingDevice = name => {\n\t\t  const scanner = Scanner(name);\n\t\t  return {\n\t\t\t...scanner,\n\t\t\tgetLocation: () => {\n\t\t\t  // also calculate height\n\t\t\t}\n\t\t  };\n\t\t};\n\n\t\tconst PlaneScanner = name => {\n\t\t  const flyingDevice = FlyingDevice(name);\n\t\t  return {\n\t\t\t...flyingDevice,\n\t\t\tgetTemperature: () => {\n\t\t\t  // return average from parts of plane\n\t\t\t}\n\t\t  };\n\t\t};\n\n\t\tconst HelicopterScanner = name => {\n\t\t  const flyingDevice = FlyingDevice(name);\n\t\t  return {\n\t\t\t...flyingDevice,\n\t\t\tgetTemperature: () => {\n\t\t\t  // return get one temperature\n\t\t\t}\n\t\t  };\n\t\t};\n\t\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-02 15:50:54","systemWhoCreated":"systemUnknown"},{"id":684,"category":"Hetzner","title":"How to sign up for a Hetzner Account and set up website on a HTTPS domain","body":"- **what we will do**\n\t- this howto will show you how to \n\t\t- sign up for an account at Hetzner \n\t\t- create a cloud machine running the Debian operating system\n\t\t- install Nginx and pm2 in order to host websites\n\t\t- publish three kinds of webistes sites on subdomains of you domain\n\t\t\t- 1. a simple HTML/CSS/JavaScript website (e.g. [https://tkserv.eu](https://tkserv.eu)\n\t\t\t- 2. React frontend (e.g. [https://getajob007.tkserv.eu/dashboard](https://getajob007.tkserv.eu/dashboard)\n\t\t\t- 3. Node/Express backend (e.g. [https://getajob007-backend.tkserv.eu](https://getajob007-backend.tkserv.eu)\n- **how much it will cost**\n\t- the **cost per month** will be **less than 6 euros per month** for \n\t\t- cloud machine + IP address = **4.75 euros**\n\t\t- domain name (e.g. tkserv.eu) - 10 euros per year, ca. **1 euro** per month\n\t\t- here are cost examples from my monthly statements:##thecosthetz\n\t\t- you can pay via **PayPal, Visa, SEPA, Überweisung**\n\t\t- you pay for machines by the hour, so you can create a machine and keep it on for one day, and on your monthly bill you will have a charge for e.g. less than a euro for the machine and the IP address it used\n- **technology used**\n\t- **Debian** Linux\n\t\t- Debian is similar to Ubuntu yet Debian is typically used as a Server while Ubuntu for a desktop machine\n\t\t- you can also install Ubuntu, Fedora, CentOS, Rocky Linux, and there is a back door trick to install ([Arch Linux](https://edwardtanguay.vercel.app/howtos?id=604))\n\t- **Nginx**\n\t\t- web server to server your pages\n\t\t- Nginx is worth learning as a developer skill\n\t\t- you can also install [Caddy](https://edwardtanguay.vercel.app/howtos?id=607) which saves a step setting up HTTPS on each site\n\t\t\t- but Nginx is better if you setting up machines at Hetzner in order to improve your general Linux and web admin skills\n\t- **pm2**\n\t\t- this is a process manager which keeps your Node/Express sites running 24/7\n- **create a Hetzner account**\n\t- go to: https://www.hetzner.com\n\t- click on **Login** and **Cloud**##thecloudandjo\n\t- click on **REGISTER NOW**##ontheregist\n\t- sign up for account\n- **set up machine**\n\t- log into your Hetzner account: https://accounts.hetzner.com/login\n\t- click on the [New Project] button##thenewprojsadclick\n\t- you may have to verify your account, e.g.##youmaypass\t\n\t- call your project e.g. **main**##goveaname\n\t- click on button##theserversdod\n\t- choose Nürnberg, Debian, Standard, and CX11\n\t\t- this is the least expensive machine, you can upgrade later at any time\n\t- leave all other settings as default, e.g. we can set up a firewall later\n\t- however, do **set up an SSH-Key** which is secure practice and in Hetzner's case, setting up a SSH-key will ensure that you do not receive a root password via e-mail\n\t\t- make directory for local login, e.g. in `c:/hetzner`\n\t\t\t- in that directory, type the command e.g. `ssh-keygen -f windowskey001 -t ecdsa` (`windowskey001` should identify your local machine)\n\t\t\t- for passphrase, just hit ENTER\n\t\t\t\t- the SSH will allow you to automatically log in from your local computer\n\t\t\t\t- your account is still protected by password\n\t\t\t\t- the root login to your Hetzner machine is by default not allowed to be accessed via remote login, only from the Hetzner website console\n\t\t\t\t- so this is a quite secure setup for your cloud machine\n\t\t\t- this will create two files on your machine##thewtwofiles\n\t\t\t- open `windowskey001.pub` and copy contents\n\t\t\t- back at the Hetzner website, click the area to create a SSH-key##clickthssssheehj\n\t\t\t- paste the contents of into the box, change the name to windowskey001, and click as standard (for when you create other machines), and click the button##thesshkeyinto\n\t- rename the machine to e.g. **debian-001**\n\t- click \"Kostenpflichtig erstellen\"\n- **log in as root**\n\t- because we set up an SSH-key during creation of our machine, Hetzner didn't send us a root password via e-mail, which one should avoid\n\t- to get the root password now so we can log in as root to create our first user, we need to reset the password in order to see what it is\n\t- click on machine\n\t- [RESCUE]\n\t- click the [ROOT-PASSWORT ZURÜCKSETZEN] button##doclickthereset\n\t- copy and save the root password in e.g. your keepass\n\t- note that from your local terminal, you can try to log in as root, but **as a security measure**, it won't let you:##permssspleasetry\n\t- you can only log in as host via the Hetzner console##theckonsole\n\t- with the generated password that you saved earlier, you can log in as root##andnowloggggg\n- **create main user**\n\t- you normally don't want or need to login as root user on Linux\n\t\t- we need to do it now in order to create our first user which will have sudo rights\n\t\t- having sudo rights means the user can temporarily have root rights\n\t- so we will now create a main user which you will use to regularly access and manage your machine\n\t- as root, create a main user (e.g. your name) like this:\n\t\t- `useradd -m edward` \n\t\t\t- (`-m` creates a home directory)\n\t\t- `passwd edward`\n\t\t- `usermod -aG sudo edward` \n\t\t\t- (`-aG sudo` adds user to the group which can execute sudo commands)\n\t- exit as root with `exit`\n\t- test to see in the console if you can log in and out as your main user\n\t\t- remember, to log out, type `exit`\n- **on local machine log in via SSH **\n\t- now from terminal on your local machine, log in via SSH as the user you just created\n\t- note you can already log in via password, e.g. `ssh edward@195.201.25.54`\n\t\t- (get the IP address of your machine from the Hetzner page that lists your machines)##notetologinok22\n\t- but we want to make it easier to log in via ssh\n\t- so set up SSH for that user: `ssh-copy-id -i windowskey001 edward@195.201.25.54`\t\n\t- you can now log in with command: `ssh -i windowskey001 edward@195.201.25.54`:\n\t- make file called e.g. `d1` (short for debian-001) with one line: `ssh -i windowskey001 edward@195.201.25.54`\n\t- now to log in with SSH:\n\t\t- go to `hetzner` directory in terminal \n\t\t- `./d1`\n\t\t- enter passphrase\n\t- note if your local machine is Linux, then\n\t\t- in your home directory, create `.bash_aliases` with this line:\n\t\t\t-----------------------------------------\n\t\t\talias d1='ssh -i ubuntukey001 edward@195.201.25.54'\n\t\t\t-----------------------------------------\n\t\t- then: `source ~/.bash_aliases`\n\t\t- now to log into your Hetzner machine, simply type: `d1`\n- **set up Nginx webserver**\n\t- https://edwardtanguay.vercel.app/howtos?id=605\n- **Buy a domain name to host this site**\n\thttps://edwardtanguay.vercel.app/howtos?id=605\n- **Set up HTML site at domain name**\n\thttps://edwardtanguay.vercel.app/howtos?id=605","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-05 01:14:29","systemWhoCreated":"systemUnknown"},{"id":685,"category":"Socket.io","title":"How to create a socket.io live-chat site with Node/Express backend and React frontend","body":"- **what we will make**\n\t- a chat application that uses socket.io which will consist of\n\t\t- **backend server** that connects all clients\n\t\t\t- Node\n\t\t\t- Express\n\t\t\t- TypeScript\n\t\t\t- ES6 modules\n\t\t- **frontend client** which can have numerous instances which chat with each other\n\t\t\t- Vite\n\t\t\t- TypeScript\n\t\t\t- ES6 modules\n- full code is here:\n\t- https://github.com/edwardtanguay/socket003-backend\n\t- https://github.com/edwardtanguay/socket003-frontend\n- multiple clients work like this:#gif#socketdemo001\n- **BACKEND**\n\t- set up starter **Node/Express API with simple JSON-file data source**\n\t\t- https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi\n\t\t- reduce to minimum\n\t- install dependences\t\t\n\t\t- `npm i socket.io`\n\t- **server.ts**\n\t\t--------------------------------------\n\t\timport express from 'express';\n\t\timport http from 'http';\n\t\timport cors from 'cors';\n\t\timport * as config from './config.js';\n\t\timport { Server } from 'socket.io';\n\n\t\tconst app = express();\n\t\tapp.use(cors());\n\t\tconst httpServer = http.createServer(app);\n\n\t\tconst io = new Server(httpServer, {\n\t\t\tcors: {\n\t\t\t\torigin: '*',\n\t\t\t\tmethods: [\"GET\", \"POST\"],\n\t\t\t},\n\t\t});\n\n\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\tres.send(`\n\t\t<h1>Socket.io Server</h1>\t\n\t\t<p>This backend connects socket.io clients and enables communication between them.</p>\n\t\t\t`)\n\t\t});\n\n\t\tio.on(\"connection\", (socket) => {\n\t\t\tconsole.log(`User Connected: ${socket.id}`);\n\n\t\t\tsocket.on(\"join_room\", (data) => {\n\t\t\t\tsocket.join(data);\n\t\t\t\tconsole.log(`User with ID: ${socket.id} joined room: ${data}`);\n\t\t\t});\n\n\t\t\tsocket.on(\"send_message\", (data) => {\n\t\t\t\tsocket.to(data.room).emit(\"receive_message\", data);\n\t\t\t});\n\n\t\t\tsocket.on(\"disconnect\", () => {\n\t\t\t\tconsole.log(\"User Disconnected\", socket.id);\n\t\t\t});\n\t\t});\n\n\t\thttpServer.listen(config.port, () => {\n\t\t\tconsole.log(`listening on port http://localhost:${config.port}`);\n\t\t});\t\t\n\t\t--------------------------------------\n- **FRONTEND**\n\t- set up starter **Simple React Site**\n\t\t- https://starters.tanguay.eu/list/darkViteSimple\n\t- install dependences\n\t\t- `npm i socket.io-client`\n\t\t- `npm i react-scroll-to-bottom`\n\t\t- `npm i -D @types/socket.io`\n\t\t- `npm i -D @types/socket.io-client`\n\t\t- `npm i -D @types/react-scroll-to-bottom`\n\t- **App.tsx**\n\t\t-----------------------------------\n\t\timport { useState } from 'react';\n\t\timport './App.scss';\n\t\timport { Socket, io } from 'socket.io-client';\n\t\timport Chat from './components/Chat';\n\n\t\tconst socket:Socket = io('http://localhost:3630');\n\n\t\tfunction App() {\n\t\t\tconst [username, setUsername] = useState('');\n\t\t\tconst [room, setRoom] = useState('');\n\t\t\tconst [showChat, setShowChat] = useState(false);\n\n\t\t\tconst joinRoom = () => {\n\t\t\t\tif (username !== '' && room !== '') {\n\t\t\t\t\tsocket.emit('join_room', room);\n\t\t\t\t\tsetShowChat(true);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t{!showChat ? (\n\t\t\t\t\t\t<div className=\"joinChatContainer\">\n\t\t\t\t\t\t\t<h3>Join A Chat</h3>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"John...\"\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tsetUsername(event.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Room ID...\"\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tsetRoom(event.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button onClick={joinRoom}>Join A Room</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Chat socket={socket} username={username} room={room} />\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\n\t\t-----------------------------------\n\t- **components/Chat.tsx**\n\t\t---------------------------------------\n\t\timport { useEffect, useState } from 'react';\n\t\timport ScrollToBottom from 'react-scroll-to-bottom';\n\t\timport {Socket} from 'socket.io-client';\n\n\t\tinterface IProps {\n\t\t\tsocket: Socket;\n\t\t\tusername: string;\n\t\t\troom: string;\n\t\t}\n\n\t\tinterface IMessage {\n\t\t\troom: string;\n\t\t\tauthor: string;\n\t\t\tmessage: string;\n\t\t\ttime: string;\n\t\t}\n\n\t\tfunction Chat({ socket, username, room }: IProps) {\n\t\t\tconst [currentMessage, setCurrentMessage] = useState('');\n\t\t\tconst [messageList, setMessageList] = useState<IMessage[]>([]);\n\n\t\t\tconst sendMessage = async () => {\n\t\t\t\tif (currentMessage !== '') {\n\t\t\t\t\tconst messageData = {\n\t\t\t\t\t\troom: room,\n\t\t\t\t\t\tauthor: username,\n\t\t\t\t\t\tmessage: currentMessage,\n\t\t\t\t\t\ttime:\n\t\t\t\t\t\t\tnew Date(Date.now()).getHours() +\n\t\t\t\t\t\t\t':' +\n\t\t\t\t\t\t\tnew Date(Date.now()).getMinutes(),\n\t\t\t\t\t};\n\n\t\t\t\t\tsocket.emit('send_message', messageData);\n\t\t\t\t\tsetMessageList((list: IMessage[]) => [...list, messageData]);\n\t\t\t\t\tsetCurrentMessage('');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tuseEffect(() => {\n\t\t\t\tsocket.on('receive_message', (data: IMessage) => {\n\t\t\t\t\tsetMessageList((list: IMessage[]) => [...list, data]);\n\t\t\t\t});\n\t\t\t}, [socket]);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"chat-window\">\n\t\t\t\t\t<div className=\"chat-header\">\n\t\t\t\t\t\t<p>Live Chat</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat-body\">\n\t\t\t\t\t\t<ScrollToBottom className=\"message-container\">\n\t\t\t\t\t\t\t{messageList.map((messageContent, i) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName=\"message\"\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tid={\n\t\t\t\t\t\t\t\t\t\t\tusername === messageContent.author\n\t\t\t\t\t\t\t\t\t\t\t\t? 'you'\n\t\t\t\t\t\t\t\t\t\t\t\t: 'other'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"message-content\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{messageContent.message}</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"message-meta\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p id=\"time\">{messageContent.time}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p id=\"author\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{messageContent.author}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ScrollToBottom>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat-footer\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={currentMessage}\n\t\t\t\t\t\t\tplaceholder=\"Hey...\"\n\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\tsetCurrentMessage(event.target.value);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonKeyPress={(event) => {\n\t\t\t\t\t\t\t\tevent.key === 'Enter' && sendMessage();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={sendMessage}>&#9658;</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default Chat;\n\t\t---------------------------------------\n- **improvements todo**\n\t- make a random color for each person (so 3+ people are distinguishable)\n\t- implement dashboard features\n\t\t- random quote every 10 seconds\n\t\t- show when files are added to a directory on backend\n\t\t- show when entries are added to a database or JSON file\n\t- protect routes and deploy online\n\t\t-------------------------------------------------\n\t\timport jwt from 'jsonwebtoken';\n\n\t\tconst verifyToken = (token: string): any => {\n\t\t\ttry {\n\t\t\t\treturn jwt.verify(token, process.env.SECRET);\n\t\t\t} catch (error) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\n\t\tconst authMiddleware = (socket: any, next: any) => {\n\t\t\tconst token = socket.handshake.query.token;\n\t\t\tif (!token) return next(new Error('Authentication error: No token provided'));\n\t\t\t\tconst user = verifyToken(token);\n\t\t\tif (!user) return next(new Error('Authentication error: Invalid token'));\n\t\t\t\tsocket.user = user;\n\t\t\tnext();\n\t\t};\n\n\t\tconst protectedRoute = io.of('/protected')\n\t\t\t.use(authMiddleware)\n\t\t\t.on('connection', (socket: any) => {\n\t\tconsole.log(`User ${socket.user.username} connected to protected route`);\n\t\t\t// CODE\n\t\t});\n\t\t-------------------------------------------------\n\t- put backend online at Hetzner and make numerous clients that all exchange real-time data with the backend","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-06 23:03:12","systemWhoCreated":"systemUnknown"},{"id":686,"category":"API testing","title":"How to test Node/Express API routes with Vitest and Supertest","body":"- **what we are going to do**\n\t- we will first set up a simple Node/Express API which uses TypeScript and ES6 modules\n\t- we will then use Vitest and Supertest to set up testing environment that tests if the routes function the way they should\n- code is here\n\t- https://github.com/edwardtanguay/vitest004\n- **set up and minimize Node/Express/TypeScript/ESM starter site**\n\t- download and set up\n\t\t- https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi\n\t- remove logging feature \n\t\t- (otherwise you have to keep checking in the changed log file)\n\t- test with **test.rest**\n- **prepare API for testing**\n\t- for us to test the backend, we have to split up server.ts into server.ts and app.ts\n\t\t- the reason we need to do this is that \n\t\t\t- server.ts will run app.ts so that it functions as before\n\t\t\t- yet we will be able to write tests for app.ts\n\t- create **app.ts**\n\t\t- move all code from **server.ts** to **app.ts** except the `app.listen` block\n\t\t- add to bottom\n\t\t\t---------------------------------\n\t\t\texport default app;\n\t\t\t---------------------------------\n\t- test again with **test.rest**\n- **set up API test of one route**\n\t- install necessary packages\n\t\t- `npm i vitest`\n\t\t- `npm i supertest`\n\t- create **server.test.ts**\n\t\t------------------------------------------\n\t\timport { test, expect } from 'vitest';\n\t\timport request from 'supertest';\n\t\timport app from './src/app.js';\n\n\t\ttest('GET /', async () => {\n\t\t\tconst response = await request(app).get('/');\n\t\t\texpect(response.statusCode).toBe(200);\n\t\t\texpect(response.text.length).toBeGreaterThan(250);\n\t\t});\n\t\t------------------------------------------\n\t- note that we are testing:\n\t\t- that the route is reachable (status code 200)\n\t\t- that it has a significant amount of text (e.g. isn't serving an empty file `null` or `undefined` etc.)\n\t- in **package.json** create an npm script that runs an npm test  \n\t\t-------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"nodemon\",\n\t\t\t\"build\": \"tsc\",\n\t\t\t\"test\": \"vitest\"\n\t\t},\t\t\n\t\t-------------------------------------\n\t- run the test\n\t\t- `npm test`\n- **write test for /books route**\n\t- **server.test.ts**\n\t\t------------------------------------------\n\t\ttest('GET /books', async () => {\n\t\t\tconst response = await request(app).get('/books');\n\t\t\texpect(response.statusCode).toBe(200);\n\t\t\texpect(JSON.parse(response.text).length).toBe(35);\n\t\t});\t\t\n\t\t------------------------------------------\n\t- note that we are turning the returned JSON text into a JavaScript object and analyzing it at that level\n- todo\n\t- write tests for the remaining routes\n\t\t- see this collection of Jest matchers\n\t\t\t- https://onespace.pages.dev/techItems?id=19\n\t- test API sessions\n\t\t - https://www.npmjs.com/package/supertest-session\n\t- test with mock data sources\n\t\t- https://www.sammeechward.com/mocking-a-database-with-jest-in-javascript","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-08 01:27:03","systemWhoCreated":"systemUnknown"},{"id":687,"category":"Cypress","title":"Set up Cypress testing for a React site","body":"- **what we will do**\n\t- set up a simple React website\n\t- set up a Cypress testing project that tests the React site\n- full code is here\n\t- React site that is tested: \n\t\t- https://github.com/edwardtanguay/cypress001site\n\t- Cypress project\n\t\t- https://github.com/edwardtanguay/cypress001\n- the Cypress test we are building will look like this##theinfotest\n- **create React site**\n\t- set up site based on this starter\n\t\t- https://starters.tanguay.eu/list/darkViteSimple\n\t- add input field and message that counts the characters\n- **create Cypress testing project**\n\t- `npm init -y`\n\t- `npm i -D cypress`\n\t\t- took over a minute\n\t- `npx cypress open`\n\t\t- E2E testing\n\t\t- Chrome\n\t\t- Scaffold Example Specs\n\t- create **cypress/e2e/test001.cy.js**\n\t\t- test if React site is running\n\t\t\t---------------------------------------------\n\t\t\tdescribe('template spec', () => {\n\t\t\t\tit('passes', () => {\n\t\t\t\t\tcy.visit('http://localhost:5173');\n\t\t\t\t});\n\t\t\t});\n\t\t\t---------------------------------------------\n\t\t- test if H1 has the right text\n\t\t\t-------------------------------------------\n\t\t\tdescribe('Heading text', () => {\n\t\t\t\tit('contains correct title', () => {\n\t\t\t\t\tcy.visit('http://localhost:5173');\n\t\t\t\t\tcy.get('h1').invoke('text').should('equal', 'Info Site');\n\t\t\t\t});\n\t\t\t});\n\t\t\t-------------------------------------------\n\t\t- select with HTML tags\n\t\t\t--------------------------------------------\n\t\t\tdescribe('Message box functions correctly', () => {\n\t\t\t\tit('displays the appropriate number of characters typed', () => {\n\t\t\t\t\tcy.visit('http://localhost:5173');\n\t\t\t\t\tcy.get('span.chars').invoke('text').should('equal', '0');\n\t\t\t\t\tcy.get('input').type('test');\n\t\t\t\t\tcy.get('span.chars').invoke('text').should('equal', '4');\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t--------------------------------------------\n\t\t- select with data-cy markers\n\t\t\t-------------------------------------------------\n\t\t\tdescribe('Message box functions correctly', () => {\n\t\t\t\tit('displays the appropriate number of characters typed', () => {\n\t\t\t\t\tcy.visit('http://localhost:5173');\n\t\t\t\t\tcy.get('[data-cy=\"chars\"]').invoke('text').should('equal', '0');\n\t\t\t\t\tcy.get('[data-cy=\"main-input\"]').type('test');\n\t\t\t\t\tcy.get('[data-cy=\"chars\"]').invoke('text').should('equal', '4');\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- select with aliases\n\t\t\t-------------------------------------------------\n\t\t\tdescribe('Message box functions correctly', () => {\n\t\t\t\tit('displays the appropriate number of characters typed', () => {\n\t\t\t\t\tcy.visit('http://localhost:5173');\n\t\t\t\t\tcy.get('[data-cy=\"chars1\"]').as('chars1');\n\t\t\t\t\tcy.get('[data-cy=\"input1\"]').as('input1');\n\t\t\t\t\tcy.get('@chars1').invoke('text').should('equal', '0');\n\t\t\t\t\tcy.get('@input1').type('test');\n\t\t\t\t\tcy.get('@chars1').invoke('text').should('equal', '4');\n\t\t\t\t});\n\t\t\t});\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- with before-each block\n\t\t\t-------------------------------------------------\n\t\t\tbeforeEach(() => {\n\t\t\t\tcy.visit('http://localhost:5173');\n\t\t\t\tcy.get('[data-cy=\"chars1\"]').as('chars1');\n\t\t\t\tcy.get('[data-cy=\"input1\"]').as('input1');\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- setting a base url\n\t\t\t- change reference to simply `/`\n\t\t\t- **cypress.config.js**\n\t\t\t\t------------------------------\n\t\t\t\timport { defineConfig } from 'cypress';\n\n\t\t\t\texport default defineConfig({\n\t\t\t\t\te2e: {\n\t\t\t\t\t\tsetupNodeEvents(on, config) {},\n\t\t\t\t\t\tbaseUrl: 'http://localhost:5173'\n\t\t\t\t\t}\n\t\t\t\t});\t\t\t\t\n\t\t\t\t------------------------------\n\t\t\t- **package.json**\n\t\t\t\t---------------------------------\n\t\t\t\t\"type\": \"module\"\n\t\t\t\t---------------------------------\n- learn more from the included tests\n\t- cypress/e2e/2-advanced-examples","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-09 01:28:04","systemWhoCreated":"systemUnknown"},{"id":688,"category":"Next.js","title":"Create a Next.js site with menu, useContext, TypeScript, Tailwind, API-fetching, and social-media preview links","body":"- **what we will do**\n\t- our task in this howto is to recreate this starter [React Site with Menu and useContext](https://starters.tanguay.eu/list/blankViteDarkMenuUsecontext) with the exceptions\n\t\t- use **Next.js** instead of React \n\t\t- use **Tailwind** instead of Sass\n\t\t- add meta information for rich social media links with description and image for each page\n\t\t- add a 404 page for bad routes\n- code is here:\n\t- https://github.com/edwardtanguay/et001-nextjs-usecontext\n- site it published online here:\n\t- https://et001-nextjs-usecontext.vercel.app\n\t- https://et001-nextjs-usecontext.netlify.app\n- final site will look like this:#gif#nextjsdemoshow\n- **set up base Next.js site**\n\t- set up site\n\t\t- **et001-nextjs-usecontext** is the name of my site, replace it with the name of your site\n\t\t- `npx create-next-app -e with-tailwindcss et001-nextjs-usecontext`\n\t\t- `code et001-nextjs-usecontext`\n\t- run site\n\t\t- if you need it to run on a specific port intead of 3000\n\t\t\t- **package.json**\n\t\t\t\t---------------------------------\n\t\t\t\t`\"dev\": \"next dev -p 4011\",`\n\t\t\t\t---------------------------------\n\t\t- `npm run dev`\n\t\t- you should see:##thewwenext\n\t\t- note TypeScript is automatically installed\n- **implement the new Next.js /app directory**\n\t- we need to replace the **pages** directory with a new **app** directory\n\t- delete the directory **pages**\n\t\t- you get a 404\n\t- add appDir to **next.config.js**\n\t\t-------------------------------------\n\t\t/** @type {import('next').NextConfig} */\n\t\tmodule.exports = {\n\t\t\treactStrictMode: true,\n\t\t\texperimental: {\n\t\t\t\tappDir: true\n\t\t\t}\n\t\t};\t\t\t\n\t\t-------------------------------------\n\t- create **app/page.tsx**\n\t\t------------------------------------------\n\t\timport React from 'react';\n\n\t\tfunction Home() {\n\t\t\treturn <div>This is the home page.</div>;\n\t\t}\n\n\t\texport default Home;\t\t\t\n\t\t------------------------------------------\n\t- `npm run dev`\n\t- refresh the browser page and you will see##thehomeinfornext\n\t- note also that the following files were created for you\n\t\t- `app/head.tsx`\n\t\t- `app/layout.tsx`\n\t\t\t- note that `layout.tsx` gets automatically imported into page.tsx without being imported anywhere\n- **set up base style of site**\n\t- create **styles/site.css**\n\t\t----------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tcolor: #ccc;\n\t\t\tfont-family: sans-serif;\n\t\t\tpadding: 0 1rem;\n\t\t}\n\t\t----------------------------------\n\t- change to Sass\n\t\t- `npm i sass`\n\t\t- rename **styles/site.css** to **styles/site.scss**\n\t\t- in **layout.tsx** change to\n\t\t\t---------------------------------\n\t\t\timport '../styles/site.scss';\n\t\t\t---------------------------------\n\t- add **app/Header.tsx**\n\t\t-------------------------------------------\n\t\timport React from 'react';\n\n\t\tfunction Header() {\n\t\t\treturn (\n\t\t\t\t<h1 className=\"text-yellow-400 text-3xl font-bold mb-4\">Info Site</h1>\n\t\t\t);\n\t\t}\n\n\t\texport default Header;\t\t\n\t\t-------------------------------------------\t\t\n\t- in order for Tailwind to work on the site, you have to import the global.css from **layout.tsx**\n\t\t--------------------------------------\n\t\timport '../styles/globals.css';\n\t\t--------------------------------------\n\t- in **head.tsx** give the page an HTML title\n\t\t---------------------------------------\n\t\t<title>Info Site</title>\n\t\t---------------------------------------\n\t- your site should look like this:##thisishomenext\n- **set up pages and navigation menu**\n\t- make the three pages: Welcome, Info, About\n\t\t- **note that except the default page, pages in the /app directory are always directories with a page.tsx file**\n\t\t- change **app/page.tsx** to be the Welcome page\n\t\t\t---------------------------------------------\n\t\t\timport React from 'react';\n\n\t\t\tfunction Welcome() {\n\t\t\t\treturn <div>This is the welcome page.</div>;\n\t\t\t}\n\n\t\t\texport default Welcome;\n\t\t\t---------------------------------------------\n\t\t- create info page as **app/info/page.tsx**\n\t\t\t---------------------------------------\n\t\t\timport React from 'react';\n\n\t\t\tfunction Info() {\n\t\t\t\treturn <div>This is the info page.</div>;\n\t\t\t}\n\n\t\t\texport default Info;\t\t\t\n\t\t\t---------------------------------------\n\t\t- create about page as **app/about/page.tsx**\n\t\t\t---------------------------------------\n\t\t\timport React from 'react';\n\n\t\t\tfunction About() {\n\t\t\t\treturn <div>This is the about page.</div>;\n\t\t\t}\n\n\t\t\texport default About;\t\t\t\n\t\t\t---------------------------------------\n\t\t- note that you have routing built in already without setting up e.g. React Router##theinfopagggesnext\n\t- create navigation bar\n\t\t- add to **layout.tsx**\n\t\t\t------------------------------------------\n\t\t\timport Link from 'next/link';\n\n\t\t\t<nav className=\"bg-neutral-800 py-1 px-2 mb-4\">\n\t\t\t\t<Link href=\"/\" className=\"mr-3\">Welcome</Link>\n\t\t\t\t<Link href=\"/info\" className=\"mr-3\">Info</Link>\n\t\t\t\t<Link href=\"/about\" className=\"mr-3\">About</Link>\n\t\t\t</nav>\t\t\t\n\t\t\t------------------------------------------\n\t\t- you will now be able to click on the links to change the pages\n\t\t- make the selected menu item yellow\n\t\t\t- add to **Header.tsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\t'use client';\n\n\t\t\t\tconst activeSegment = useSelectedLayoutSegment();\n\n\t\t\t\timport { useSelectedLayoutSegment } from 'next/navigation';\n\n\t\t\t\t<Link\n\t\t\t\t\thref=\"/\"\n\t\t\t\t\tclassName={`mr-3 ${\n\t\t\t\t\t\tactiveSegment === null ? 'active' : ''\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\tWelcome\n\t\t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\thref=\"/info\"\n\t\t\t\t\tclassName={`mr-3 ${\n\t\t\t\t\t\tactiveSegment === 'info' ? 'active' : ''\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\tInfo\n\t\t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\thref=\"/about\"\n\t\t\t\t\tclassName={`mr-3 ${\n\t\t\t\t\t\tactiveSegment === 'about' ? 'active' : ''\n\t\t\t\t\t}`}\n\t\t\t\t>\n\t\t\t\t\tAbout\n\t\t\t\t</Link>\n\t\t\t\t--------------------------------------------\n\t\t\t- note that the Header has to be client rendered in order for this navigation to work\n\t\t- your navigation will now work like this:#gif#willworklikethisnav\n- **implement useContext**\n\t- to get useContext set up, we will implement it with a simple variable **siteTitle** that we will display on two pages\n\t- **components/AppContext.tsx**\n\t\t------------------------------------------\n\t\timport { createContext } from 'react';\n\n\t\tinterface IAppContext {\n\t\t\tsiteTitle: string;\n\t\t}\n\n\t\tinterface IAppProvider {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst siteTitle = 'Info Site';\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tsiteTitle\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\t\t\n\t\t------------------------------------------\n\t- note that so far this code is the same we use in React sites\n\t\t- it is not in the /app directory since \n\t\t\t- the /app directory is reserved to pages that will be in the routing system\n\t\t\t- we don't have a /src directory in Next and I don't want to put site files in the root directory with the config files, etc.\n\t\t\t- and at least technically AppContext is a component so I put it in the components directory\n\t- wrap App in AppProvider\n\t\t- in a React site, we would wrap the App component with AppProvider in the **main.tsx** file\n\t\t- in Next.js, we do this in the **pages/_app.tsx** file\n\t\t\t- if you don't have the pages directory of the _app.tsx file anymore, no problem, just recreate the directory and the file\n\t\t- **pages/_app.tsx**\n\t\t\t-------------------------------------------------\n\t\t\timport type { AppProps } from 'next/app';\n\t\t\timport { AppProvider } from '../components/AppContext';\n\n\t\t\tconst App = ({ Component, pageProps }: AppProps) => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<AppProvider>\n\t\t\t\t\t\t\t<Component {...pageProps} />\n\t\t\t\t\t\t</AppProvider>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\n\t\t\texport default App;\t\t\n\t\t\t-------------------------------------------------\n\t- replace welcome page **app/page.tsx** with this content\n\t\t---------------------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../components/AppContext';\n\n\t\tfunction Welcome() {\n\t\t\tconst { siteTitle } = useContext(AppContext);\n\t\t\treturn <div>This is the welcome page for the site \"{siteTitle}\".</div>;\n\t\t}\n\n\t\texport default Welcome;\t\t\n\t\t---------------------------------------------------\n\t- **PROBLEM #1:**\n\t\t- when you view your Welcome page in the browser, you see:##thenextservererrorr\n\t\t- **SOLUTION:**\n\t\t\t- add as the top line of **AppContext.tsx**\n\t\t\t\t----------------------------------------\n\t\t\t\t'use client';\n\t\t\t\t----------------------------------------\t\t\n\t- **PROBLEM #2:**\n\t\t- when you view your Welcome page again, you see:##nextundhaldd\n\t\t- this doesn't really give you any information about what the problem is\n\t\t- but look at the generated error out in your terminal##warningonly\n\t\t- this points to another issue with a server-side component that needs to be a client-side component\n\t\t- **SOLUTION:**\t\t\n\t\t\t- add as the top line of **app/page.tsx**\n\t\t\t\t----------------------------------------\n\t\t\t\t'use client';\n\t\t\t\t----------------------------------------\n\t- **PROBLEM #3:**\n\t\t- you now can now view your site without errors, but the context variable **siteTitle** is empty:##sitetitletempy\n\t\t- and indeed when we console log the context object coming from AppContext, it is empty:##andindeedwhenwecontext\n\t\t- **SOLUTION:**\n\t\t\t- wrap the application's code with AppProvider not in **pages/_app.tsx** but in **app/layout.tsx**\n\t\t\t- **pages/_app.tsx**\n\t\t\t\t---------------------------------------\n\t\t\t\timport type { AppProps } from 'next/app';\n\n\t\t\t\tconst App = ({ Component, pageProps }: AppProps) => {\n\t\t\t\t\treturn <Component {...pageProps} />;\n\t\t\t\t};\n\n\t\t\t\texport default App;\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- add to **app/layout.tsx**\n\t\t\t\t--------------------------------\n\t\t\t\timport { AppProvider } from '../components/AppContext';\n\n\t\t\t\t<AppProvider>{children}</AppProvider>\n\t\t\t\t--------------------------------\n\t- the siteTitle now appears##thesitetitlethreer2\n\t- Thanks to **Sakura Dev** and his video [Context API in Next.js 13 App Directory](https://www.youtube.com/watch?v=Ho3FFUbk9_w) for helping me navigate around the above three errors\n\t- now import and display the siteTitle variable on the info page in the same way\n\t\t- **app/info/pages.tsx**\n\t\t\t----------------------------------------\n\t\t\t'use client';\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from '../../components/AppContext';\n\n\t\t\tfunction Info() {\n\t\t\t\tconst { siteTitle } = useContext(AppContext);\n\n\t\t\t\treturn <div>This is the info page for the site \"{siteTitle}\".</div>;\n\t\t\t}\n\n\t\t\texport default Info;\t\t\t\n\t\t\t----------------------------------------\n\t\t- it should show the siteTitle as well##infositeworkskk2\n- **add graphic to site**\n\t- we want to add a graphic to the site and see that it also works when the site is published at Vercel##wantoaddgraphicleft\n\t- add the following graphic here: **public/images/info-icon.png**\n\t\t- nnn\n\t- in **Header.tsx** change H1 code area to add graphic\n\t\t----------------------------------------\n\t\t<div className=\"headerArea\">\n\t\t\t<img src=\"images/info-icon.png\" />\n\t\t\t<h1 className=\"text-yellow-400 text-3xl font-bold mb-4\">\n\t\t\t\tInfo Site\n\t\t\t</h1>\n\t\t</div>\t\t\n\t\t----------------------------------------\n\t- notes that as in React, images that are in the **public/images** directory can be referenced directly as **<img src=\"images/IMAGENAME.png\"/>**\n\t- style it in **site.scss** for now (perhaps this could be done directly with Tailwind)\n\t\t-------------------------------------\n\t\t.headerArea {\n\t\t\tdisplay: flex;\n\t\t\tgap: .4rem;\n\n\t\t\timg {\n\t\t\t\theight: 1.5rem;\n\t\t\t\tborder-radius: .2rem;\n\t\t\t\tmargin-top: .3rem;\n\t\t\t}\n\t\t}\n\t\t-------------------------------------\n\t- it works when published at Vercel:##itworkimageonline\n\t- note that the image is here: https://et001-nextjs-usecontext.vercel.app/images/info-icon.png, i.e. **URL/images/IMAGENAME.png**##imageherelook\n- **add header information for each page which creates unique social media previews for each page**\n\t- we now want to set up our site so that when we post links to pages from teh site in social media, a custom **title**, **description** and **image** is shown for each page\n\t- create **app/head.tsx** which contains the meta information, e.g. **head and meta tags** that each page of the site will have unless that page specifically overrides it with another head.tsx file in their directory\n\t\t------------------------------------------------------------\n\t\texport default function Head() {\n\t\t  return (\n\t\t\t<>\n\t\t\t  <title>Info Site</title>\n\t\t\t  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n\t\t\t  <link rel=\"icon\" href=\"/favicon.ico\" />\n\t\t\t\t\t\t<meta\n\t\t\t\t\t\tname=\"viewport\"\n\t\t\t\t\t\tcontent=\"width=device-width, initial-scale=1.0\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tname=\"viewport\"\n\t\t\t\t\t\tcontent=\"width=device-width, initial-scale=1.0\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tproperty=\"og:title\"\n\t\t\t\t\t\tcontent=\"Info Site\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta property=\"og:type\" content=\"site\" />\n\t\t\t\t\t<meta\n\t\t\t\t\t\tproperty=\"og:description\"\n\t\t\t\t\t\tcontent=\"This is a Next.js site called Info Site which serves as an example how to create a Next.js site with useContext, TypeScript, Tailwind and other features. This text will be shown in social-media previews for every page that does not implement its own head information with a head.tsx file. Note also that each page can have its own social-media preview graphic.\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tproperty=\"og:image\"\n\t\t\t\t\t\tcontent=\"https://et001-nextjs-usecontext.vercel.app/images/info-icon.png\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta property=\"og:url\" content=\"https://starters.tanguay.eu\" />\n\t\t\t</>\n\t\t  )\n\t\t}\n\n\t\t------------------------------------------------------------\n\t- create **app\\about\\head.tsx** with meta information specifically about the About page\n\t\t-------------------------------------------\n\t\texport default function Head({ params }: { params: { slug: string } }) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<title>Info Site - About</title>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tname=\"viewport\"\n\t\t\t\t\t\tcontent=\"width=device-width, initial-scale=1.0\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tname=\"viewport\"\n\t\t\t\t\t\tcontent=\"width=device-width, initial-scale=1.0\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tproperty=\"og:title\"\n\t\t\t\t\t\tcontent=\"About Page\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta property=\"og:type\" content=\"site\" />\n\t\t\t\t\t<meta\n\t\t\t\t\t\tproperty=\"og:description\"\n\t\t\t\t\t\tcontent=\"This is the about page. It has a head.tsx file which enables it to have it's own title, description and image for social-media previews.\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta\n\t\t\t\t\t\tproperty=\"og:image\"\n\t\t\t\t\t\tcontent=\"https://et001-nextjs-usecontext.vercel.app/images/about-page.png\"\n\t\t\t\t\t/>\n\t\t\t\t\t<meta property=\"og:url\" content=\"https://starters.tanguay.eu\" />\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t\t-------------------------------------------\n\t- deploy your site at Vercel\n\t- your posts in Slack should now look like this:##tehsocialmedialinks\n\t- note that if you make changes in your **head.tsx** files, it does not get updated immediately, so one trick is to add a question mark with a random number suffix in order to make it a different URL which will force e.g. Slack to refetch the data from your site, yet clicking the link will still show your page as usual#gif#socialmedialinks\n\t- note also that these meta links which work for Slack may not work or may work differently for other platforms such as Facebook, Twitter, LinkedIn etc. \n\t- for instance, this is how the link to the About page looks on LinkedIn, note that only image and title are used but not description:##linkedinpost\n\t- note also that this information will also be collected by **search bots** which will improve the SEO of your site\n\t- consider when creating a site:\n\t\t- if individual pages on your site need **high SEO ranking** and if each page needs to have **customized social-media previews** with images for each page, etc., then this may be a reason you want to use **Next.js instead of React**\n\t\t- this would be the case for e.g. **conference sites** where you have numerous presentations each with have their own page, and you want these individual pages to be **found in search engines** based on text in the title, description, and content of the page, and your users want to **post links to individual presentations** on social media and have an appropriate preview generated for them automatically\n\t\t- however, if you are creating a site which is more of an **online application** that is behind an **authorization wall** (e.g. a community site which has an info page and a login page, and users have to log in to see other pages and use the site), then **client-side React would be an adequate choice**\n- **deploy at Netlify**\n\t- note that this site as is can be deployed at Netlify immediately with all default settings\n\t\t- https://et001-nextjs-usecontext.netlify.app\n- **create custom 404 page**\n\t- first of all, notice that Next.js does not have the same router-page-reload problem at Vercel and Netlify that React does with React Router\n\t\t- see  this post for more details on that: [Deploy a React frontend, read-only website to Netlify/Vercel/Cloudflare and understand frontend and frontend/backend hosting](https://edwardtanguay.vercel.app/howtos?id=642)\n\t\t- i.e. on your next site at Vercel, you can \n\t- note that Next.js has a default 404 page built in##thebasiclogin\n\t- to customize this 404 page, create **pages/404.tsx**\n\t\t-------------------------------------\n\t\timport React from 'react';\n\t\timport '../styles/globals.css';\n\t\timport '../styles/site.scss';\n\t\timport Link from 'next/link';\n\t\timport Head from 'next/head';\n\n\t\tinterface Props {\n\t\t\tstatusCode?: number;\n\t\t}\n\n\t\tconst Custom404Page: React.FC<Props> = () => {\n\t\t\treturn (\n\t\t\t\t<div className=\"sass-error-area text-center\">\n\t\t\t\t\t<Head>\n\t\t\t\t\t\t<title>Info Site - 404 Page</title>\n\t\t\t\t\t</Head>\n\t\t\t\t\t<p className=\"text-gray-900 text-9xl font-extrabold\">404</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Link href=\"/\" className=\"text-yellow-400 text-3xl\">\n\t\t\t\t\t\t\tGo to main page\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\n\t\texport default Custom404Page;\t\n\t\t-------------------------------------\n\t- I couldn't completely style this page with Tailwind only, so had to use Sass for the width:\n\t\t- add to **styles\\site.scss**\n\t\t\t----------------------------------------\n\t\t\t.sass-error-area {\n\t\t\t\twidth: 18rem;\n\t\t\t}\n\t\t\t----------------------------------------\n\t- note that with **Head** we can set the **title** tag as well for the 404 page\n\t- your custom 404 page will now look like this:##show404site\n- **refactor and reorganize folder structure to include src folder**\n\t- by default Next.js doesn't seem to have a **src folder**\n\t\t- yet a **src folder** is standard in JavaScript framworks, e.g. create-react-app, Vite, Angular, Vue.js\n\t\t- and it seems Next.js supports a **src folder** if you want to organize your files that way\n\t\t\t- **\"Pages can also be added under src/pages as an alternative to the root pages directory. The src directory is very common in many apps and Next.js supports it by default.\"* - https://nextjs.org/docs/advanced-features/src-directory\n\t\t\t- apparently this words for the new Next.js 13 **app folder** as well\n\t\t- that makes sense to me so that we dont' have files like e.g. **AppContext.tsx** and **interfaces.ts** lying around in the root directory where more typically config files go\n\t\t- therefore let's reorganize the folder structure to have a **/src folder**\n\t- reognize as follows so that all site files are sub-directories of **src**:\n\t\t- src\n\t\t\t- app\n\t\t\t- components\n\t\t\t- pages\n\t\t\t- styles\n\t\t\t- AppContext.tsx\n\t- fix all paths\n\t- another refactor is to move the style imports from **layout.tsx** to **_app.tsx** so that all style are loaded at the highest level\n\t\t- and update paths\n\t- also update paths in **tailwind.config.js**\n\t\t--------------------------------------------\n\t\t'./src/pages/**/*.{js,ts,jsx,tsx}',\n\t\t'./src/components/**/*.{js,ts,jsx,tsx}',\n\t\t'./src/app/**/*.{js,ts,jsx,tsx}',\t\t\n\t\t--------------------------------------------\n\t- your final structure should look like this and work just as before:##thelooklikethissd\n- **load data from an external API and display on pages**\n\t- fetch and display **jobs** on page load\n\t\t- `npm i axios`\n\t\t- add to **src/AppContext.tsx**\n\t\t\t-------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport { IJob } from './interfaces';\n\t\t\timport axios from 'axios';\n\n\t\t\tconst jobsUrl = 'https://edwardtanguay.vercel.app/share/jobs.json';\n\n\t\t\tinterface IAppContext {\n\t\t\t\tsiteTitle: string;\n\t\t\t\tjobs: IJob[];\n\t\t\t}\t\t\t\n\n\t\t\tconst [jobs, setJobs] = useState<IJob[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetJobs((await axios.get(jobsUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\t\t\t\n\n\t\t\t<AppContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tsiteTitle,\n\t\t\t\t\tjobs\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</AppContext.Provider>\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **src/interfaces.ts**\n\t\t\t------------------------------------------\n\t\t\texport interface IJob {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t\tskillList: string;\n\t\t\t\tpublicationDate: string;\n\t\t\t}\n\t\t\t------------------------------------------\n\t\t- display jobs on **Welcome page**\n\t\t\t- add to **src/app/pages.tsx**\n\t\t\t\t------------------------------------------------\n\t\t\t\tconst { siteTitle, jobs } = useContext(AppContext);\n\n\t\t\t\t{jobs.length > 0 && (\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThis site has{' '}\n\t\t\t\t\t\t<span className=\"text-yellow-400\">{jobs.length}</span> jobs.\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t\t------------------------------------------------\n\t\t- in order to avoid the job number showing 0 for a second and then changing to another number, add a fade-in to the site load\n\t\t\t- add to **site.scss**\n\t\t\t\t----------------------------------------\n\t\t\t\tanimation: fadein 2.5s ease-in;\n\n\t\t\t\t@keyframes fadein {\n\t\t\t\t\tfrom {\n\t\t\t\t\t\topacity: 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tto {\n\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t----------------------------------------\n\t\t- jobs will now be displayed on Welcome page like this:#gif#jobsonwelcomepage\n\t\t- display jobs on **Info page**\n\t\t\t- note that I use Sass instead of Tailwind here just for simplicity since I am copying Sass code from another website\n\t\t\t\t- it seems you can easily use both Sass and Tailwind in the same project and use each where more appropriately needed\n\t\t\t- add to **src/app/info/page.tsx**\n\t\t\t\t-------------------------------------------\n\t\t\t\tconst { siteTitle, jobs } = useContext(AppContext);\t\t\t\t\n\n\t\t\t\t<div className=\"page pageInfo\">\n\t\t\t\t\t<div>This is the info page for the site \"{siteTitle}\".</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<div className=\"jobs\">\n\t\t\t\t\t\t\t<h2>{jobs.length} Jobs</h2>\n\t\t\t\t\t\t\t{jobs.map((job) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"job\" key={job.id}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\">{job.title}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t-------------------------------------------\n\t\t\t- add to **site.css**\n\t\t\t\t--------------------------------------------\n\t\t\t\t.page {\n\t\t\t\t\th2 {\n\t\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.pageInfo {\n\t\t\t\t\t.content {\n\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t\twidth: 90%;\n\t\t\t\t\t\tdisplay: grid;\n\t\t\t\t\t\tgap: 3rem;\n\t\t\t\t\t\tgrid-template-columns: 1fr 1fr;\n\n\t\t\t\t\t\th2 {\n\t\t\t\t\t\t\tcolor: rgb(194, 164, 107);\n\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.jobs {\n\t\t\t\t\t\t\t.job {\n\t\t\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t\t- the Info page should now look like this##likethisinfopagejobs\n\t- fetch and display **skills** on page load\n\t\t- add to **src/AppContext.tsx**\n\t\t\t-------------------------------------------\n\t\t\timport { IJob,ISkill } from './interfaces';\n\n\t\t\tconst skillsUrl = 'https://edwardtanguay.vercel.app/share/skills.json';\n\n\t\t\tinterface IAppContext {\n\t\t\t\tsiteTitle: string;\n\t\t\t\tjobs: IJob[];\n\t\t\t\tskills: ISkill[];\n\t\t\t}\t\t\t\n\n\t\t\tconst [skills, setSkills] = useState<ISkill[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tsetSkills((await axios.get(skillsUrl)).data);\n\t\t\t\t})();\n\t\t\t}, []);\t\t\n\n\t\t\t<AppContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tsiteTitle,\n\t\t\t\t\tjobs,\n\t\t\t\t\tskills\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</AppContext.Provider>\n\t\t\t-------------------------------------------\n\t\t- **src/interfaces.ts**\n\t\t\t------------------------------------------\n\t\t\texport interface ISkill {\n\t\t\t\tidCode: string;\n\t\t\t\tname: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\t\t\t------------------------------------------\n\t\t- display skills on **Welcome page**\n\t\t\t- add to **src/app/pages.tsx**\n\t\t\t\t------------------------------------------------\n\t\t\t\tconst { siteTitle, jobs, skills } = useContext(AppContext);\n\n\t\t\t\tThis site has <span className=\"text-yellow-400\">{jobs.length}</span> jobs and <span className=\"text-yellow-400\">{skills.length}</span> skills.\n\t\t\t\t------------------------------------------------\n\t\t- display skills on **Info page**\n\t\t\t- add to **src/app/info/page.tsx**\n\t\t\t\t-------------------------------------------\n\t\t\t\tconst { siteTitle, jobs, skills } = useContext(AppContext);\t\t\t\t\n\n\t\t\t\t<div className=\"skills\">\n\t\t\t\t\t<h2>{skills.length} Skills</h2>\n\t\t\t\t\t{skills.map(skill => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"skill\" key={skill.name}>\n\t\t\t\t\t\t\t\t<div className=\"item\"><span className=\"name\">{skill.name}</span> - {skill.description}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t\t- add to **site.css**\n\t\t\t\t--------------------------------------------\n\t\t\t\t.skills {\n\t\t\t\t\t.skill {\n\t\t\t\t\t\tmargin-bottom: 1rem;\n\n\t\t\t\t\t\t.name {\n\t\t\t\t\t\t\tcolor: orange;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t\t- the Info page should now look like this##withjobsandskillsinfopage","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-10 20:24:47","systemWhoCreated":"systemUnknown"},{"id":689,"category":"VBA","title":"Basic code to get up-and-running with Excel VBA progamming","body":"- these are all my notes from past VBA programming in Excel\n- general notes\n\t- open dev tools \n\t\t- ALT-F11\n\t- project window\n\t\t- CTRL-R\n\t- delete module\n\t\t- say no to export\n\t- form controls vs activeX controls\n\t\t- ActiveX controls allow for more flexible design and should be used when the job just can't be done with a basic Forms control\n\t\t- sometimes ActiveX is turned off\n\t- get old VBA code here (in an SQLite database)\n\t\thttps://tanguay.info/code\n\t- code generator\n\t\t- https://www.automateexcel.com/vba-code-indenter\n\t- comment out block\n\t\t- https://www.wallstreetmojo.com/vba-comment-block\n\t- conditional format a cell in Excel\n\t\t- https://www.ablebits.com/office-addins-blog/change-background-color-excel-based-on-cell-value\n- howtos\n\t- How to create a simple VBA program that changes text when you click a button\n\t\t- https://edwardtanguay.vercel.app/howtos?id=232\n- example projects\n\t- **Vacation Calendar Generator**\n\t\t- [officeVacationPlanCreator.zip](https://onespace.pages.dev/downloads/officeVacationPlanCreator.zip)#gif#excelCalendarDemo\n\t- **2023-02-15 testing, example code, etc.**\n\t\t- [vba-testing-2023-02-15.zip](https://onespace.pages.dev/downloads/vba-testing-2023-02-15.zip)##thevbatesting\n- **USEFUL CODE FROM 2007**\n\t- **How to provide real-time functionality in an Excel file**\n\t\t- This code shows you how to program real time events into Excel. I used this to build a little \"observer\" file which constantly monitored a directory and sent an e-mail when a certain file was present. In this way your Excel file can play the part of a Windows service, i.e. running on some extra, unused machine on a network. Another interesting use for this is be able to give your Excel user live information, i.e. by checking the database, the file system, the date/time, or perhaps webservices. Interestingly, the updates happen silently in the background so that the user is not interrupted at all, can use his Excel file as usual all the while cells in his Excel file are being observed/updated by this service.\n\t\t\t-------------------------------------------------\n\t\t\tIN ThisWorkbook COPY IN THIS CODE:\n\t\t\t============================================================\n\t\t\tPrivate Sub Workbook_Open()\n\t\t\t\tqexc_Observer\n\t\t\tEnd Sub\n\n\n\t\t\tCREATE A MODULE CALLED qexc AND SAVE THIS CODE IN IT:\n\t\t\t============================================================\n\t\t\tSub qexc_Observer()\n\n\t\t\t\t'declarations\n\t\t\t\tDim intHours As Integer\n\t\t\t\tDim intMinutes As Integer\n\t\t\t\tDim intSectonds As Integer\n\n\t\t\t\t'config\n\t\t\t\tintHours = 0\n\t\t\t\tintMinutes = 0\n\t\t\t\tintSeconds = 10\n\n\t\t\t\t'do action that should be performed regularly\n\t\t\t\ttool_ObserverAction\n\n\t\t\t\t'observe again regularly\n\t\t\t\tApplication.OnTime Now + TimeSerial(intHours, intMinutes, intSeconds), \"qexc_Observer\"\n\n\t\t\tEnd Sub\n\n\n\t\t\tCREATE A MODULE CALLED Tools AND SAVE THIS CODE IN IT:\n\t\t\t============================================================\n\t\t\tSub tool_ObserverAction(\n\t\t\t\tSheets(\"Main\").Range(\"A1\").Value = Time\n\t\t\tEnd Sub\n\t\t\t-------------------------------------------------\n\t- **How to define a class and put its objects in an array and use method overloading to print it**\n\t\t- This is a quite simple code example that gives you the basis of using classes in Excel VBA and putting its objects in an array that is then sent to a generic method that processes (e.g. prints) the contents of the array. This is the beginning of generic code that can adapt to various types of objects easily.\n\t\t\t-------------------------------------------------\n\t\t\tPUT THIS IN A MODULE\n\t\t\t============================================================\n\n\t\t\tOption Explicit\n\n\t\t\tSub ProcessIt()\n\n\t\t\t\t'declarations\n\t\t\t\tDim objCodeChange As CodeChange\n\t\t\t\tDim arrCodeChangeObjects(4) As Object\n\t\t\t\tDim intIndex As Integer\n\n\t\t\t\t'define code change objects and put in array\n\t\t\t\tFor intIndex = 0 To 4\n\n\t\t\t\t\t'define object\n\t\t\t\t\tSet objCodeChange = New CodeChange\n\t\t\t\t\tobjCodeChange.Constructor (\"ccMail\" & intIndex + 1)\n\t\t\t\t\tobjCodeChange.OldCode = \"TestingLoops = \" & intIndex\n\t\t\t\t\tobjCodeChange.NewCode = \"TestingLoops = \" & intIndex + 1\n\n\t\t\t\t\t'add it to the array\n\t\t\t\t\tSet arrCodeChangeObjects(intIndex) = objCodeChange\n\n\t\t\t\tNext\n\n\t\t\t\t'show\n\t\t\t\tDisplayItems (arrCodeChangeObjects)\n\n\t\t\tEnd Sub\n\n\t\t\tSub DisplayItems(arrItems As Variant)\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim intNumberOfItems As Integer\n\t\t\t\tDim objItem As Variant\n\n\t\t\t\t'variables\n\t\t\t\tintNumberOfItems = UBound(arrItems)\n\n\t\t\t\t'show\n\t\t\t\tFor intIndex = 0 To intNumberOfItems - 1\n\n\t\t\t\t\t'define object\n\t\t\t\t\tSet objItem = arrItems(intIndex)\n\n\t\t\t\t\t'show\n\t\t\t\t\tDebug.Print objItem.IdCode\n\n\t\t\t\tNext\n\n\n\t\t\tEnd Sub\n\n\n\t\t\tPUT THIS IN A CLASS CALLED \"CodeChange\"\n\t\t\t============================================================\n\t\t\tOption Explicit\n\n\t\t\t'define all properties\n\t\t\tDim m_strIdCode As String\n\t\t\tDim m_strOldCode As String\n\t\t\tDim m_strNewCode As String\n\n\t\t\t'**** PROPERTIES ************************************************\n\n\t\t\t'property: IdCode\n\t\t\tProperty Get IdCode() As String\n\t\t\t\tIdCode = m_strIdCode\n\t\t\tEnd Property\n\t\t\tProperty Let IdCode(strIdCode As String)\n\t\t\t\tm_strIdCode = strIdCode\n\t\t\tEnd Property\n\n\t\t\t'property: OldCode\n\t\t\tProperty Get OldCode() As String\n\t\t\t\tOldCode = m_strOldCode\n\t\t\tEnd Property\n\t\t\tProperty Let OldCode(strOldCode As String)\n\t\t\t\tm_strOldCode = strOldCode\n\t\t\tEnd Property\n\n\t\t\t'property: NewCode\n\t\t\tProperty Get NewCode() As String\n\t\t\t\tNewCode = m_strNewCode\n\t\t\tEnd Property\n\t\t\tProperty Let NewCode(strNewCode As String)\n\t\t\t\tm_strNewCode = strNewCode\n\t\t\tEnd Property\n\n\n\n\t\t\t'**** CONSTRUCTORS ************************************************\n\n\t\t\t'constructor\n\t\t\tPublic Sub Constructor(strIdCode As String)\n\n\t\t\t\t'save the parameters\n\t\t\t\tm_strIdCode = strIdCode\n\n\t\t\t\t'initialize the object\n\t\t\t\tInitialize\n\n\t\t\tEnd Sub\n\n\n\t\t\t'**** PRIVATE METHODS ************************************************\n\n\t\t\tPrivate Sub Initialize()\n\n\t\t\t\t'define initial variables\n\t\t\t\tm_strOldCode = \"\"\n\t\t\t\tm_strNewCode = \"\"\n\t\t\tEnd Sub\n\n\t\t\t'**** PUBLIC METHODS ************************************************\n\t\t\t-------------------------------------------------\n\t- **A self-made ArrayList for Excel VBA**\n\t\t- So I was tired of fooling around with the ideosynchracies of Redim Preserve etc. when using Excel VBA and decided to make an ArrayList like you have in VB.NET, C#, Java, etc.  Now arrays are FINALLY easy to use in VBA.\n\t\t\t-------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim arlEmailAddresses As ArrayList\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strEmailToCheck As String\n\n\t\t\t\t'variables\n\t\t\t\tSet arlEmailAddresses = New ArrayList\n\n\t\t\t\t'add to it\n\t\t\t\tarlEmailAddresses.Add (\"jim@company.com\")\n\t\t\t\tarlEmailAddresses.Add (\"roger@company.com\")\n\t\t\t\tarlEmailAddresses.Add (\"nancy@company.com\")\n\n\t\t\t\t'check whether an item exist\n\t\t\t\tstrEmailToCheck = \"roger@company.com\"\n\t\t\t\tIf arlEmailAddresses.ItemExists(strEmailToCheck) Then\n\t\t\t\t\tDebug.Print strEmailToCheck & \" exists\"\n\t\t\t\tElse\n\t\t\t\t\tDebug.Print strEmailToCheck & \" does NOT exist\"\n\t\t\t\tEnd If\n\n\t\t\t\t'output them\n\t\t\t\tFor intIndex = 0 To arlEmailAddresses.NumberOfItems - 1\n\t\t\t\t\tDebug.Print arlEmailAddresses.GetItem(intIndex)\n\t\t\t\tNext\n\n\t\t\tEnd Sub\n\n\n\t\t\tCREATE A CLASS CALLED \"ArrayList\" AND ADD THIS CODE TO IT:\n\t\t\t============================================================\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As String\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(objItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tm_arrContainer(m_intNumberOfItems - 1) = objItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tGetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists, assumes you are saving strings\n\t\t\tFunction ItemExists(objDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim objItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tobjItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf objItem = objDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\n\n\n\t\t\t'method: sorts the contents of the array\n\t\t\t-------------------------------------------------------\n\t- **An ArrayList for objects**\n\t\t- This ObjectArrayList allows you to easily pack custom objects in a collection so you can iterate through them. This differs from the \"ArrayList\" that I have in these examples, pretty much the only difference is that the object array list has a \"Set\" in the Add method. Normally, however, you would probably want to create custom ArrayLists for each objects you have so that you can create custom methods to report on or change specific information about the custom objects in your collection. Interesting that the custom object that you put in the arraylist has to be a CLASS and not a TYPE, otherwise you get an error.\n\t\t\t-------------------------------------------------------\n\t\t\tSub TestArrayListWithCustomClass()\n\n\t\t\t\t'declarations\n\t\t\t\tDim objCurrentMail As Mail\n\t\t\t\tDim arlMails As ObjectArrayList\n\n\t\t\t\t'variables\n\t\t\t\tSet objCurrentMail = New Mail\n\t\t\t\tSet arlMails = New ObjectArrayList\n\n\t\t\t\t'set\n\t\t\t\tobjCurrentMail.Name = \"test name\"\n\n\t\t\t\t'test\n\t\t\t\tCall arlMails.Add(objCurrentMail)\n\n\t\t\t\tDebug.Print objCurrentMail.Name\n\n\t\t\tEnd Sub\n\n\n\n\t\t\tCREATE CLASS CALLED \"Mail\":\n\t\t\t============================================================\n\t\t\tPublic Name As String\n\n\n\t\t\tCREATE CLASS CALLED \"ObjectArrayList\"\n\t\t\t============================================================\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As Variant\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(varItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tSet m_arrContainer(m_intNumberOfItems - 1) = varItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tGetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists\n\t\t\tFunction ItemExists(varDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim varItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tvarItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf varItem = varDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\t\t\t\n\t\t\t-------------------------------------------------------\n\t- **How to send mails with Excel using CDO or Outlook**\n\t\t- This code shows you two ways to send mails with Excel VBA. The first uses CDO (e.g. for sending little status notes) and the second uses Outlook (e.g. which uses the user's Outlook application so that he has a record of the mail in his \"sent items\" just as if he sent it, good for when you have e-mails integrated into the business process and user's need to use Outlook to find out when mails were sent, etc. Notice this solution uses my ArrayList class so that you can conveniently add addresses to your variables without having to deal with redim, etc.\n\t\t\t----------------------------------------------------\n\t\t\tPUT THIS IN YOUR WORKSHEET CODE\n\t\t\t============================================================\n\t\t\tSub TestSendMail()\n\n\t\t\t\t'declarations\n\t\t\t\tDim arlToAddresses As ArrayList\n\t\t\t\tDim arlCcAddresses As ArrayList\n\t\t\t\tDim strSubject As String\n\t\t\t\tDim strMessage As String\n\n\t\t\t\t'variables\n\t\t\t\tSet arlToAddresses = New ArrayList\n\t\t\t\tSet arlCcAddresses = New ArrayList\n\n\t\t\t\t'config\n\t\t\t\tstrSubject = \"test\"\n\t\t\t\tarlToAddresses.Add (\"info@company.com\")\n\n\t\t\t\t'build message\n\t\t\t\tstrMessage = \"\"\n\t\t\t\tstrMessage = \"Test message.\"\n\n\t\t\t\t'send it\n\t\t\t\tCall qsys_SendMailWithCdo(strSubject, strMessage, arlToAddresses, arlCcAddresses)\n\n\t\t\tEnd Sub\n\n\n\t\t\tCREATE A MODULE CALLED qsys AND SAVE THIS CODE IN IT:\n\t\t\t============================================================\n\n\t\t\tFunction qsys_SendMailWithCdo(strSubject As String, strTextOfMail As String, arlToAddresses As ArrayList, arlCcAddresses As ArrayList) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim iMsg As Object\n\t\t\t\tDim iConf As Object\n\t\t\t\tDim strbody As String\n\t\t\t\tDim strSmtpServerIpAddress\n\n\t\t\t\t'config\n\t\t\t\tstrSmtpServerIpAddress = \"10.10.10.10\"\n\n\t\t\t\t'variables\n\t\t\t\tSet iMsg = CreateObject(\"CDO.Message\")\n\t\t\t\tSet iConf = CreateObject(\"CDO.Configuration\")\n\n\t\t\t\t'setup\n\t\t\t\tiConf.Load -1\n\t\t\t\tSet Flds = iConf.Fields\n\t\t\t\tWith Flds\n\t\t\t\t\t.Item(\"http://schemas.microsoft.com/cdo/configuration/sendusing\") = 2\n\t\t\t\t\t.Item(\"http://schemas.microsoft.com/cdo/configuration/smtpserver\") = strSmtpServerIpAddress\n\t\t\t\t\t.Item(\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\") = 25\n\t\t\t\t\t.Update\n\t\t\t\tEnd With\n\n\t\t\t\t'send the message\n\t\t\t\tWith iMsg\n\n\t\t\t\t\t'variables\n\t\t\t\t\tSet .Configuration = iConf\n\n\t\t\t\t\t'add the TO email addresses\n\t\t\t\t\tFor intIndex = 0 To arlToAddresses.NumberOfItems - 1\n\t\t\t\t\t\t.To = arlToAddresses.GetSeparatedList(\";\")\n\t\t\t\t\tNext\n\n\t\t\t\t\t'add the CC email addresses\n\t\t\t\t\tIf Not qstr_ArrayIsEmpty(arrCcAddresses) Then\n\t\t\t\t\t\tFor intIndex = 0 To arlCcAddresses.NumberOfItems - 1\n\t\t\t\t\t\t\t.CC = arlCcAddresses.GetSeparatedList(\";\")\n\t\t\t\t\t\tNext\n\t\t\t\t\tEnd If\n\n\t\t\t\t\t'rest of fields\n\t\t\t\t\t.BCC = \"\"\n\t\t\t\t\t.from = \"APPLICATION <application@company.com>\"\n\t\t\t\t\t.Subject = strSubject\n\t\t\t\t\t.TextBody = strTextOfMail\n\n\t\t\t\t\t'send it\n\t\t\t\t\t.Send\n\n\t\t\t\tEnd With\n\n\t\t\tEnd Function\n\n\n\t\t\tFunction qsys_SendMailWithOutlook(strSubject As String, ByVal TextOfMail As String, arlToAddresses As ArrayList, arlCcAddresses As ArrayList) As Boolean\n\n\t\t\t\tDim OApp As New Outlook.Application\n\t\t\t\tDim ONamespace As Outlook.Namespace\n\t\t\t\tDim OMail As Outlook.MailItem\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim blnMailWasSuccessfullySent As Boolean\n\t\t\t\tDim intNumberOfEmailAddresses\n\t\t\t\tDim strEmail As String\n\t\t\t\tDim arrProgrammerEmails() As String\n\t\t\t\tDim blnOnlyTesting As Boolean\n\n\t\t\t\t'FOR TESTING\n\t\t\t\tblnOnlyTesting = False\n\n\t\t\t\t'Constants\n\t\t\t\tConst olByValue = 1\n\t\t\t\tConst olMailItem = 0\n\n\t\t\t\t'variables\n\t\t\t\tSet OApp = CreateObject(\"Outlook.Application\")\n\t\t\t\tSet OMail = OApp.CreateItem(olMailItem)\n\t\t\t\tOMail.Display\n\n\t\t\t\t'define who gets the mail\n\t\t\t\tIf blnOnlyTesting Then\n\n\t\t\t\t\t'add email for test\n\t\t\t\t\tOMail.To = \"programmers@company.com\"\n\n\t\t\t\t\t'mark this as testing\n\t\t\t\t\tstrSubject = \"TESTING: \" & strSubject\n\n\t\t\t\t\t'add TO addresses where mail would have gone to\n\t\t\t\t\tTextOfMail = TextOfMail & vbCrLf & vbCrLf & \"TO ADDDRESSES FOR REAL MAIL:\"\n\t\t\t\t\tFor intIndex = 0 To arlToAddresses.NumberOfItems - 1\n\t\t\t\t\t\tTextOfMail = TextOfMail & vbCrLf & arlToAddresses.GetItem(intIndex)\n\t\t\t\t\tNext\n\n\t\t\t\t\t'add CC addresses where mail would have gone to\n\t\t\t\t\tTextOfMail = TextOfMail & vbCrLf & vbCrLf & \"CC ADDDRESSES FOR REAL MAIL:\"\n\t\t\t\t\tFor intIndex = 0 To arlCcAddresses.NumberOfItems - 1\n\t\t\t\t\t\tTextOfMail = TextOfMail & vbCrLf & arlCcAddresses.GetItem(intIndex)\n\t\t\t\t\tNext\n\n\t\t\t\tElse\n\n\t\t\t\t\t'add the TO email addresses\n\t\t\t\t\tFor intIndex = 0 To arlToAddresses.NumberOfItems - 1\n\t\t\t\t\t\tOMail.To = arlToAddresses.GetSeparatedList(\";\")\n\t\t\t\t\tNext\n\n\t\t\t\t\t'add the CC email addresses\n\t\t\t\t\tIf Not qstr_ArrayIsEmpty(arrCcAddresses) Then\n\t\t\t\t\t\tFor intIndex = 0 To arlCcAddresses.NumberOfItems - 1\n\t\t\t\t\t\t\tOMail.CC = arlCcAddresses.GetSeparatedList(\";\")\n\t\t\t\t\t\tNext\n\t\t\t\t\tEnd If\n\n\t\t\t\tEnd If\n\n\t\t\t\t'define the rest of the mail\n\t\t\t\tOMail.Subject = strSubject\n\t\t\t\tOMail.Importance = olImportanceHigh\n\t\t\t\tOMail.Body = TextOfMail\n\t\t\t\tOMail.BodyFormat = olFormatRichText\n\n\t\t\t\t'send the mail (you can use this but it causes the user to have to click a number of security OKs)\n\t\t\t\t'OMail.Send\n\n\t\t\t\t'this bypasses the security mechanism so that a mail goes out immediately\n\t\t\t\tSet WshShell = CreateObject(\"WScript.Shell\")\n\t\t\t\tWshShell.AppActivate OMail\n\t\t\t\tWshShell.SendKeys (\"%s\") ' sends a CTRL-S as if the user himself typed it in the application\n\n\t\t\t\t'close it up\n\t\t\t\tSet OApp = Nothing\n\t\t\t\tSendMail = True\n\n\t\t\t\tExit Function\n\n\t\t\tEnd Function\n\n\n\n\t\t\tSAVE THIS IN A CLASS CALLED: ArrayList\n\t\t\t============================================================\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As String\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(objItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tm_arrContainer(m_intNumberOfItems - 1) = objItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tGetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists\n\t\t\tFunction ItemExists(objDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim objItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tobjItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf objItem = objDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\n\n\t\t\t'gets a list with e.g. commas separating each item\n\t\t\tFunction GetSeparatedList(strSeparator As String) As String\n\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strListOfNames As String\n\t\t\t\tDim intAnzahl As Integer\n\t\t\t\tDim strName As String\n\t\t\t\tDim strSep As String\n\n\t\t\t\tstrListOfNames = \"\"\n\t\t\t\tintAnzahl = UBound(m_arrContainer)\n\n\t\t\t\tFor intIndex = 0 To intAnzahl - 1\n\t\t\t\t\tIf intIndex <> 0 Then\n\t\t\t\t\t\t\tstrSep = strSeparator\n\t\t\t\t\t\tElse\n\t\t\t\t\t\t\tstrSep = \"\"\n\t\t\t\t\tEnd If\n\t\t\t\tstrName = m_arrContainer(intIndex)\n\t\t\t\tstrListOfNames = strListOfNames & strSep & strName\n\t\t\t\tNext intIndex\n\n\t\t\t\tGetSeparatedList = strListOfNames\n\n\t\t\tEnd Function\t\t\t\n\t\t\t----------------------------------------------------\n\t- **How to compare previous and current value of a cell**\n\t\t- Often you want to react to the event that a cell was changed from one value to another, especially in a dropdown, e.g. when a status is set from \"Open\" to \"Closed\" but you want to react differently when it is set from \"Postponed\" to \"Closed\". This is how you get both values so you can compare them.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tOption Explicit\n\n\t\t\tPrivate Sub Worksheet_Change(ByVal Target As Range)\n\t\t\t\tDebug.Print \"The previous value of \" & Target.Address & \" was \" & Sheets(\"PreviousValues\").Range(Target.Address)\n\t\t\tEnd Sub\n\n\t\t\tPrivate Sub Worksheet_SelectionChange(ByVal Target As Range)\n\n\t\t\t\t'make sure it exists and make sure it is hidden\n\t\t\t\tqexc_ForceSheetToExist (\"PreviousValues\")\n\t\t\t\tSheets(\"PreviousValues\").Visible = False\n\n\t\t\t\t'assign the previous value of the cell that changed\n\t\t\t\tSheets(\"PreviousValues\").Range(Target.Address) = Target.Value\n\n\t\t\tEnd Sub\n\n\t\t\t'forces a sheet to exist (if not there, it is created)\n\t\t\tSub qexc_ForceSheetToExist(strSheetName As String)\n\n\t\t\t\t'make sure sheet exists\n\t\t\t\tIf Not qexc_SheetExists(strSheetName) Then\n\n\t\t\t\t\t'declarations\n\t\t\t\t\tDim wsNewSheet As Worksheet\n\n\t\t\t\t\t'variables\n\t\t\t\t\tSet wsNewSheet = Sheets.Add\n\n\t\t\t\t\t'name it\n\t\t\t\t\twsNewSheet.Name = strSheetName\n\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\n\n\t\t\t'returns whether or not sheet exists\n\t\t\tFunction qexc_SheetExists(strSheetName As String) As Boolean\n\t\t\t\tOn Error GoTo SheetDoesNotExist\n\t\t\t\tIf Len(Sheets(strSheetName).Name) > 0 Then\n\t\t\t\t\tqexc_SheetExists = True\n\t\t\t\t\tExit Function\n\t\t\t\tEnd If\n\t\t\tSheetDoesNotExist:\n\t\t\t\tqexc_SheetExists = False\n\t\t\tEnd Function\t\t\t\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to insert code with an IF statement**\n\t\t- This syntax took me awhile to get: I wanted to insert an IF statement via VBA in a German version Excel so I was using the WENN(...) statement and the semi-colons, BUT it turns out that you have to use IF and COMMAS in code which is then converted to WENN and semicolons in Excel.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub AddStatusCode()\n\n\t\t\tSheets(\"Tabelle1\").Range(\"G32\").Formula = \"=IF(G1>500, \"\"Finished\"\", \"\"Processing...\"\")\"\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to make plural and singular classes**\n\t\t- To raise everything to an object-oriented level, I usually make a plural and singular class of the main items I wam working on in my application, e.g. \"Users\" or \"Reports\" etc. where the plural class contains a collection of singular objects etc. This is somewhat difficult to do given the primitive array and collection support in VBA, but I got it to work, this code shows you how to do it.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim objMembers As members\n\n\t\t\t\t'variables\n\t\t\t\tSet objMembers = New members\n\t\t\t\tobjMembers.Constructor (\"all\")\n\n\t\t\t\t'show\n\t\t\t\tobjMembers.ShowTest\n\n\t\t\tEnd Sub\n\n\n\t\t\tSAVE IN CLASS CALLED: Member\n\t\t\t============================================================\n\t\t\tOption Explicit\n\n\t\t\t'define all properties\n\t\t\tDim m_strFirstName As String\n\t\t\tDim m_strLastName As String\n\t\t\tDim m_intRank As Integer\n\n\t\t\t'property: FirstName\n\t\t\tProperty Get FirstName() As String\n\t\t\t\tFirstName = m_strFirstName\n\t\t\tEnd Property\n\t\t\tProperty Let FirstName(strFirstName As String)\n\t\t\t\tm_strFirstName = strFirstName\n\t\t\tEnd Property\n\n\t\t\t'property: LastName\n\t\t\tProperty Get LastName() As String\n\t\t\t\tLastName = m_strLastName\n\t\t\tEnd Property\n\t\t\tProperty Let LastName(strLastName As String)\n\t\t\t\tm_strLastName = strLastName\n\t\t\tEnd Property\n\n\t\t\t'property: Rank\n\t\t\tProperty Get Rank() As Integer\n\t\t\t\tRank = m_intRank\n\t\t\tEnd Property\n\t\t\tProperty Let Rank(intRank As Integer)\n\t\t\t\tm_intRank = intRank\n\t\t\tEnd Property\n\n\t\t\t'constructor: basic\n\t\t\tPublic Sub Constructor(strDql As String)\n\n\t\t\t\t'save the parameters\n\t\t\t\tm_strDql = strDql\n\n\t\t\t\t'initialize the object\n\t\t\t\tInitialize\n\n\t\t\tEnd Sub\n\n\t\t\t'initialize the object with internal values\n\t\t\tPrivate Sub Initialize()\n\n\n\t\t\tEnd Sub\n\n\n\n\t\t\tSAVE IN CLASS CALLED: Members\n\t\t\t============================================================\n\t\t\tOption Explicit\n\n\t\t\t'define all properties\n\t\t\tDim m_strDql As String\n\t\t\tDim m_objCollection As ObjectArrayList\n\n\t\t\t'constructor: basic\n\t\t\tPublic Sub Constructor(strDql As String)\n\n\t\t\t\t'save the parameters\n\t\t\t\tm_strDql = strDql\n\n\t\t\t\t'initialize\n\t\t\t\tInitialize\n\n\t\t\tEnd Sub\n\n\t\t\t'initialize the object with internal values\n\t\t\tPrivate Sub Initialize()\n\n\t\t\t\t'variables\n\t\t\t\tSet m_objCollection = New ObjectArrayList\n\n\t\t\t\t'fill the internal collection\n\t\t\t\tFillCollection\n\n\t\t\tEnd Sub\n\n\t\t\t'fill the internal collection based on DQL statementj, e.g. \"all\" or \"rank < 10\"\n\t\t\tPrivate Sub FillCollection()\n\n\t\t\t\t'declarations\n\t\t\t\tDim mbrTest As Member\n\t\t\t\tDim intCount As Integer\n\t\t\t\tDim strDql As String\n\n\t\t\t\t'variables\n\t\t\t\tstrDql = m_strDql\n\n\t\t\t\t'READ IN FROM DATA SOURCE HERE\n\t\t\t\tSelect Case strDql\n\n\t\t\t\t\tCase \"all\"\n\n\t\t\t\t\t\tFor intCount = 1 To 10\n\n\t\t\t\t\t\t\t'create test item\n\t\t\t\t\t\t\tSet mbrTest = New Member\n\t\t\t\t\t\t\tmbrTest.FirstName = \"Jim\"\n\t\t\t\t\t\t\tmbrTest.LastName = \"Thompson\"\n\t\t\t\t\t\t\tmbrTest.Rank = 12\n\n\t\t\t\t\t\t\t'add item to internal collection\n\t\t\t\t\t\t\tCall m_objCollection.Add(mbrTest)\n\n\t\t\t\t\t\tNext\n\n\t\t\t\tEnd Select\n\n\t\t\tEnd Sub\n\n\t\t\t'show all in collection\n\t\t\tPublic Sub ShowTest()\n\n\t\t\t\t'declarations\n\t\t\t\tDim objMember As Member\n\t\t\t\tDim intIndex As Integer\n\n\t\t\t\t'show\n\t\t\t\tFor intIndex = 0 To m_objCollection.NumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tSet objMember = m_objCollection.GetItem(intIndex)\n\n\t\t\t\t\tDebug.Print objMember.FirstName\n\n\t\t\t\tNext\n\n\n\t\t\tEnd Sub\n\n\n\n\n\n\t\t\tSAVE IN CLASS CALLED: ObjectArrayList (and change from \"1 - Private\" to \"2-PublicNotCreatable\"\n\t\t\t==================================================================================================\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As Variant\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(varItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tSet m_arrContainer(m_intNumberOfItems - 1) = varItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tSet GetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists\n\t\t\tFunction ItemExists(varDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim varItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tvarItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf varItem = varDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to pass a custom class via a function**\n\t\t- If you have a class that you are traying to pass back from a function as the return value, you will have lots of troubles (e.g. with Call, Set, Private/Public). The easiest way to get this to work is to change your function into a subroutine and pass your value as a reference parameter using ByRef. Here's how to do it.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tOption Explicit\n\n\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim arlTestFiles As ArrayList\n\n\t\t\t\t'variables\n\t\t\t\tSet arlTestFiles = New ArrayList\n\n\t\t\t\t'fill the arraylist with a function\n\t\t\t\tCall GetFiles(arlTestFiles)\n\n\t\t\t\t'show results\n\t\t\t\tDebug.Print arlTestFiles.GetItem(0)\n\t\t\t\tDebug.Print arlTestFiles.GetItem(1)\n\n\t\t\tEnd Sub\n\n\n\n\n\t\t\tSub GetFiles(ByRef arlFiles As ArrayList)\n\n\t\t\t\t'variables\n\t\t\t\tSet arlFiles = New ArrayList\n\n\t\t\t\t'fill the arraylist\n\t\t\t\tarlFiles.Add (\"test1.jpg\")\n\t\t\t\tarlFiles.Add (\"test2.jpg\")\n\n\t\t\tEnd Sub\n\n\n\t\t\tMAKE A CLASS CALLED ArrayList AND SAVE THIS CODE IN IT, AND BE SURE TO CHANGE IT FROM \"1-Private\" TO \"2-PublicNotCreatable\"\n\t\t\t============================================================================================================================\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As String\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(objItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tm_arrContainer(m_intNumberOfItems - 1) = objItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tGetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists\n\t\t\tFunction ItemExists(objDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim objItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tobjItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf objItem = objDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\n\n\t\t\t'gets a list with e.g. commas separating each item\n\t\t\tFunction GetSeparatedList(strSeparator As String) As String\n\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strListOfNames As String\n\t\t\t\tDim intAnzahl As Integer\n\t\t\t\tDim strName As String\n\t\t\t\tDim strSep As String\n\n\t\t\t\tstrListOfNames = \"\"\n\t\t\t\tintAnzahl = UBound(m_arrContainer)\n\n\t\t\t\tFor intIndex = 0 To intAnzahl - 1\n\t\t\t\t\tIf intIndex <> 0 Then\n\t\t\t\t\t\t\tstrSep = strSeparator\n\t\t\t\t\t\tElse\n\t\t\t\t\t\t\tstrSep = \"\"\n\t\t\t\t\tEnd If\n\t\t\t\tstrName = m_arrContainer(intIndex)\n\t\t\t\tstrListOfNames = strListOfNames & strSep & strName\n\t\t\t\tNext intIndex\n\n\t\t\t\tGetSeparatedList = strListOfNames\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to get all file names from a directory into an array**\n\t\t- This shows you the quickest way to get an array of files from a directory.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'method: get all files as a directory object\n\t\t\tFunction qfil_GetAllFileNamesInDirectory(strDirectoryName As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim ra() As String\n\t\t\t\tDim objDirectory As Variant\n\t\t\t\tDim objFile As Variant\n\t\t\t\tDim intNumberOfFiles As Integer\n\t\t\t\tDim strFileName As String\n\t\t\t\tDim intIndex As Integer\n\n\t\t\t\t'variables\n\t\t\t\tSet objDirectory = qfil_GetDirectory(strDirectoryName)\n\t\t\t\tintNumberOfFiles = objDirectory.Files.Count\n\t\t\t\tReDim Preserve ra(intNumberOfFiles)\n\n\t\t\t\t'run through and get pathAndFileNames\n\t\t\t\tintIndex = 0\n\t\t\t\tFor Each objFile In objDirectory.Files\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrFileName = objFile.Name\n\n\t\t\t\t\t'assign it\n\t\t\t\t\tra(intIndex) = strFileName\n\n\t\t\t\t\t'increment\n\t\t\t\t\tintIndex = intIndex + 1\n\n\t\t\t\tNext\n\n\t\t\t\tqfil_GetAllFileNamesInDirectory = ra\n\n\t\t\tEnd Function\n\n\n\t\t\t'method: get directory object\n\t\t\tFunction qfil_GetDirectory(strDirectoryName As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim objFSO As Variant\n\t\t\t\tDim objDirectory As Variant\n\n\t\t\t\t'variables\n\t\t\t\tSet objFSO = CreateObject(\"Scripting.FileSystemObject\")\n\t\t\t\tSet objDirectory = objFSO.GetFolder(strDirectoryName)\n\t\t\t\tSet qfil_GetDirectory = objDirectory\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **ChopRight Function to chop off e.g. a trailing comma**\n\t\t- Often you run through an array and build a comma-separated string, then at the end you have to chop off the \", \" off the end. Or perhaps you have to chop off an exclamation mark or question mark off the end, but only if it is there. Use this function.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tstrList = ChopRight(strList, \", \")\n\n\t\t\tFunction ChopRight(strContent As String, strPieceToChop As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim r As String\n\t\t\t\tDim intLengthOfPieceToChop As Integer\n\t\t\t\tDim strEndPart As String\n\t\t\t\tDim intLengthOfNewString As Integer\n\n\t\t\t\t'variables\n\t\t\t\tr = \"\"\n\t\t\t\tintLengthOfPieceToChop = Len(strPieceToChop)\n\t\t\t\tstrEndPart = Right$(strContent, intLengthOfPieceToChop)\n\t\t\t\tintLengthOfNewString = Len(strContent) - intLengthOfPieceToChop\n\n\t\t\t\t'chop it if they are equal\n\t\t\t\tIf strEndPart = strPieceToChop Then\n\t\t\t\t\tr = Mid$(strContent, 1, intLengthOfNewString)\n\t\t\t\tEnd If\n\n\t\t\t\tChopRight = r\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to transport the user to another sheet/cell when he clicks on a certain cell**\n\t\t- Often if e.g. you have cells which are generated from information on another sheet, you want the user to be able to click on that cell and be sent to the sheet which is responsible for generating its data. Use this code. It assumes that you have a sheet \"Reports\" which has a cell with a range name \"Total\" which calculates its information from data on the sheet \"ReportData\"\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPrivate Sub Worksheet_SelectionChange(ByVal Target As Range)\n\n\t\t\t\tIf Target.Address = Sheets(\"Reports\").Range(\"Total\").Address Then\n\n\t\t\t\t\tSheets(\"ReportData\").Activate\n\t\t\t\t\tSheets(\"ReportData\").Range(\"A1\").Select\n\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Subroutine that encapsulates sending a user to another sheet when they click on a cell**\n\t\t- This is useful if you e.g. have a sheet that calculates the data for a cell in another sheet and when the user clicks on that calculated cell, he jumps to the source of that data on another sheet. Put this in Worksheet_SelectionChange, e.g. Call qsys_TransportUserToNewSheetIfHeIsOnACertainCell(Target, \"Reports\", \"Total\", \"Summary\")\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'method: used to transport a user to another sheet when he clicks on a certain cell, works even if the cell he clicks on expands over many cells\n\t\t\tSub qsys_TransportUserToNewSheetIfHeIsOnACertainCell(rngTarget As Range, strTransportFromSheetName As String, strClickedCellRangeName As String, strTransportToSheetName As String, Optional strTransportToCellRangeName As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim blnCellsAreEqual As Boolean\n\t\t\t\tDim blnCellsIntersect As Boolean\n\t\t\t\tDim strDefaultTransportToCellRangeName As String\n\n\t\t\t\t'config\n\t\t\t\tstrDefaultTransportToCellRangeName = \"A1\"\n\n\t\t\t\t'variables\n\t\t\t\tblnCellsAreEqual = rngTarget.Address = Sheets(strTransportFromSheetName).Range(strClickedCellRangeName).Address\n\t\t\t\tblnCellsIntersect = qsys_RangesIntersect(rngTarget, Sheets(strTransportFromSheetName).Range(strClickedCellRangeName))\n\t\t\t\tstrTransportToCellRangeName = IIf(strTransportToCellRangeName = \"\", strDefaultTransportToCellRangeName, strTransportToCellRangeName)\n\n\t\t\t\t'send them there if need be\n\t\t\t\tIf blnCellsAreEqual Or blnCellsIntersect Then\n\t\t\t\t\tSheets(strTransportToSheetName).Activate\n\t\t\t\t\tSheets(strTransportToSheetName).Range(strTransportToCellRangeName).Select\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function to protect one or more ranges of cells in a sheet**\n\t\t- This function allows you to define multiple ranges on a sheet which the user should not be able to change. I used this to be able to protect all rows that had been completely entered. It allows you to protect more than one area as well by separating the ranges with semicolons. This is important since otherwise if you just call this function twice each with a range name, it would erase the first protected range the second time it is called.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'tool: protects any number of areas (ranges) of a sheet, send them semi-colon separated as e.g. \"A1:F20;B1:B100\"\n\t\t\tSub qexc_ProtectAreaOfSheet(strSheetName As String, strRangeNamesToProtect As String, strPassword As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim arrRangeNames() As String\n\t\t\t\tDim intIndex As Integer\n\n\t\t\t\t'variables\n\t\t\t\tarrRangeNames = qstr_BreakIntoParts(strRangeNamesToProtect, \";\")\n\n\t\t\t\t'unprotect the sheet so you can unlock the cells\n\t\t\t\tSheets(strSheetName).Unprotect (strPassword)\n\n\t\t\t\t'unlock all cells in sheet\n\t\t\t\tSheets(strSheetName).Cells.Locked = False\n\n\t\t\t\t'lock the cells that you want to protect\n\t\t\t\tFor intIndex = 0 To UBound(arrRangeNames)\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrRangeName = arrRangeNames(intIndex)\n\n\t\t\t\t\t'lock cells for this range\n\t\t\t\t\tSheets(strSheetName).Range(strRangeName).Locked = True\n\n\t\t\t\tNext\n\n\t\t\t\t'protect the range they specified\n\t\t\t\tSheets(strSheetName).Protect Password:=strPassword, Contents:=True, Scenarios:=True, UserInterfaceOnly:=True\n\n\t\t\tEnd Sub\n\n\n\n\n\n\t\t\t'tool: this function acts like split, but also trims, takes e.g. \"log1.txt, log2.txt, log3.txt\" and returns the array(\"log1.txt\", \"log2.txt\", \"log3.\") without the spaces on the left isde\n\t\t\tFunction qstr_BreakIntoParts(ByVal strLine As String, strSeparator As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim ra() As String\n\t\t\t\tDim arrParts() As String\n\t\t\t\tDim intNumberOfParts As Integer\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strPart As Variant\n\t\t\t\tDim strCleanedPart As String\n\n\t\t\t\t'variables\n\t\t\t\tarrParts = Split(strLine, strSeparator)\n\t\t\t\tintNumberOfParts = UBound(arrParts) + 1\n\t\t\t\tReDim Preserve ra(intNumberOfParts - 1)\n\n\t\t\t\t'assign\n\t\t\t\tintIndex = 0\n\t\t\t\tFor Each strPart In arrParts\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrCleanedPart = Trim(strPart)\n\n\t\t\t\t\t'add it\n\t\t\t\t\tra(intIndex) = strCleanedPart\n\n\t\t\t\t\t'increment\n\t\t\t\t\tintIndex = intIndex + 1\n\n\t\t\t\tNext\n\n\t\t\t\tqstr_BreakIntoParts = ra\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to use regular expressions in Excel VBA**\n\t\t- This is a simple function which returns if a string starts with another string, which is pretty much the simplest regular express there is. You can use this base code to test and learn other regular expressions. Thanks kmillen.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim strPhone As String\n\n\t\t\t\t'variables\n\t\t\t\tstrPhone = \"719-499-2312\"\n\n\t\t\t\t'check\n\t\t\t\tIf qstr_BeginsWith(strPhone, \"719\") Then\n\t\t\t\t\tDebug.Print \"yes\"\n\t\t\t\tElse\n\t\t\t\t\tDebug.Print \"no\"\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\n\n\t\t\tFunction qstr_BeginsWith(strMain As String, strPart As String) As Boolean\n\t\t\t\tDim reg As New VBScript_RegExp_55.RegExp\n\t\t\t\treg.Pattern = strPart\n\t\t\t\tqstr_BeginsWith = reg.Test(strMain)\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to read from a MySQL database**\n\t\t- You have to first download [MySQL ODBC driver](http://www.mysql.com/products/connector/odbc) and then [setup an ODBC connection](http://www.depts.ttu.edu/helpcentral/directions/ODBCSetup.php), then you can use this code.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t1. install the 3.5.1 odbc driver from mysql: http://dev.mysql.com/downloads/connector/odbc/3.51.html (easy click click)\n\t\t\t2. setup an ODBC connection\n\n\t\t\tPrivate Sub btnTestReadInMysqlData_Click()\n\n\t\t\t\tDim objDB, arrRecord, strRecord, strOutput\n\t\t\t\tDim oRS, nRec, oFld\n\t\t\t\tDim row\n\n\t\t\t\t'Database connection & select all from Table\n\t\t\t\tSet objDB = DBConnect()\n\t\t\t\tSet oRS = objDB.Execute(\"SELECT * FROM members\")\n\n\t\t\t\t'Dump Records from Table\n\t\t\t\tnRec = 0\n\t\t\t\trow = 1\n\t\t\t\tDo While Not oRS.EOF\n\t\t\t\t  For Each oFld In oRS.Fields\n\n\t\t\t\t\t'WScript.Echo oFld.Name & \" = \" & oFld.Value\n\n\t\t\t\t\tWorksheets(\"Tabelle1\").Cells(row, 1).Value = oFld.Value\n\n\t\t\t\t\t'increment\n\t\t\t\t\trow = row + 1\n\n\t\t\t\t  Next\n\t\t\t\t  oRS.MoveNext\n\t\t\t\tLoop\n\n\t\t\tEnd Sub\n\n\n\t\t\tFunction DBConnect()\n\t\t\t\tSet objDB = CreateObject(\"ADODB.Connection\")\n\t\t\t\tobjDB.Open \"websitedata\"\n\t\t\t\tSet DBConnect = objDB\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **A function that splits a string like Split() but also trims**\n\t\t- In all languages that I program in I always make a \"BreakIntoPieces\" function which performs the functionality of \"split\" but also trims. It is good to have this splitting going through one access point as well in case you want to globally do other things while you split, e.g. any kind of parsing, etc.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'tool: this function acts like split, but also trims, takes e.g. \"log1.txt, log2.txt, log3.txt\" and returns the array(\"log1.txt\", \"log2.txt\", \"log3.\") without the spaces on the left isde\n\t\t\tFunction qstr_BreakIntoParts(ByVal strLine As String, strSeparator As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim ra() As String\n\t\t\t\tDim arrParts() As String\n\t\t\t\tDim intNumberOfParts As Integer\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strPart As Variant\n\t\t\t\tDim strCleanedPart As String\n\n\t\t\t\t'variables\n\t\t\t\tarrParts = Split(strLine, strSeparator)\n\t\t\t\tintNumberOfParts = UBound(arrParts) + 1\n\t\t\t\tReDim Preserve ra(intNumberOfParts - 1)\n\n\t\t\t\t'assign\n\t\t\t\tintIndex = 0\n\t\t\t\tFor Each strPart In arrParts\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrCleanedPart = Trim(strPart)\n\n\t\t\t\t\t'add it\n\t\t\t\t\tra(intIndex) = strCleanedPart\n\n\t\t\t\t\t'increment\n\t\t\t\t\tintIndex = intIndex + 1\n\n\t\t\t\tNext\n\n\t\t\t\tqstr_BreakIntoParts = ra\n\n\t\t\tEnd Function\n\n\t\t\t'example use:\n\t\t\tDim parts() as String\n\t\t\tDim part as String\n\t\t\tparts = qstr_BreakIntoParts(\"one, two, three\", \",\")\n\t\t\tFor Each part in Parts\n\t\t\t\tDebug.Print part\n\t\t\tNext\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function that returns whether or not a string is empty**\n\t\t- I use this function to determine if a value is empty since it also does a trim, but also in one application I was reading in text from a form and a blank line was marked as \"nn\" so I added to this function the logic that if the value was \"nn\" then that line should be considered empty. So immediately \"nn\" was treated as an empty value everywhere in the application. That is the value you get from encapsulating even the simplest of functionality.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'simply returns if a value is blank or not\n\t\t\tFunction qstr_IsEmpty(strValue As String) As Boolean\n\n\t\t\t\tIf Trim(strValue) = \"\" Then\n\t\t\t\t\tqstr_IsEmpty = True\n\t\t\t\tElse\n\t\t\t\t\tqstr_IsEmpty = False\n\t\t\t\tEnd If\n\n\t\t\tEnd Function\t\t\t\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to use ParamArray to be able to send variable numbers of parameters in a function**\n\t\t- This shows you how to make a flexible function that takes any number of parameters, good for custom concatenations or for mathematical functions which do processing on various number of integers, etc. This particular example shows you how to do a create a comma-separated string with any number of parameters.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub ProcessIt()\n\n\t\t\t\t'declarations\n\t\t\t\tDim arrFileNames(5) As String\n\n\t\t\t\t'sending array items in list\n\t\t\t\tDebug.Print qstr_DisplayAsCommaList(\"File1.xls\", \"File2.xls\", \"File3.xls\")\n\t\t\t\tDebug.Print qstr_DisplayAsCommaList(\"File20.xls\", \"File21.xls\", \"File22.xls\", \"File23.xls\", \"File24.xls\")\n\n\t\t\tEnd Sub\n\n\t\t\tFunction qstr_DisplayAsCommaList(ParamArray varParts() As Variant) As String\n\n\t\t\t\t'declarations\n\t\t\t\tDim r As String\n\t\t\t\tDim varPart As Variant\n\t\t\t\tDim strPart As String\n\t\t\t\tDim intCount As Integer\n\t\t\t\tDim intNumberOfParts As Integer\n\n\t\t\t\t'variables\n\t\t\t\tintCount = 1\n\t\t\t\tintNumberOfParts = UBound(varParts) + 1\n\n\t\t\t\t'build it\n\t\t\t\tFor Each varPart In varParts\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrPart = CStr(varPart)\n\n\t\t\t\t\t'add the part\n\t\t\t\t\tr = r & strPart\n\n\t\t\t\t\t'add the comma if not last one\n\t\t\t\t\tIf intCount < intNumberOfParts Then\n\t\t\t\t\t\tr = r & \", \"\n\t\t\t\t\tEnd If\n\n\t\t\t\t\t'increment\n\t\t\t\t\tintCount = intCount + 1\n\n\t\t\t\tNext\n\n\t\t\t\tqstr_DisplayAsCommaList = r\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to make a cell unchangeable**\n\t\t- Put the following IF statement inside the Worksheet_Change subroutine.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPrivate Sub Worksheet_Change(ByVal Target As Range)\n\n\t\t\t\tIf Target.Address = ActiveSheet.Range(\"Status\").Address Then\n\t\t\t\t\tApplication.EnableEvents = False\n\t\t\t\t\tCall MsgBox(\"This cell may not be changed.\", vbCritical)\n\t\t\t\t\tApplication.Undo\n\t\t\t\t\tApplication.EnableEvents = True\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Functions to read and write to INI files**\n\t\t- These functions allow you to keep information in an INI file anywhere on your hard drive. This allows you to keep information which many Excel files share, i.e. if you need to fill dropdowns with data that changes often then you put this data in the INI file and each of the Excel files then look it up and display it in their dropdowns.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tMAKE AN INI FILE NAMED: C\\:temp\\test.ini\n\t\t\t==============================================================\n\n\t\t\t[emails]\n\t\t\temail01=jim@company.com\n\t\t\temail02=hank@company.com\n\t\t\temail03=angie@company.com\n\n\n\n\t\t\tEXAMPLE CODE THAT READS AND WRITES TO THE INI FILE\n\t\t\t==============================================================\n\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim strEmail As String\n\t\t\t\tDim arrEmails() As String\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strKey As String\n\t\t\t\tDim strValue As String\n\t\t\t\tDim strIniFile As String\n\n\t\t\t\t'variables\n\t\t\t\tstrIniFile = \"c:\\temp\\test.ini\"\n\n\t\t\t\t'read value from ini file\n\t\t\t\tstrEmail = qsys_GetValueFromIniFile(strIniFile, \"emails\", \"email02\")\n\t\t\t\tDebug.Print \"The e-mail is: \" & strEmail & vbCrLf\n\n\t\t\t\t'read all values from an ini section\n\t\t\t\tarrEmails = qsys_GetIniSectionValues(strIniFile, \"emails\")\n\t\t\t\tFor intIndex = 0 To UBound(arrEmails)\n\n\t\t\t\t   'variables\n\t\t\t\t   strKey = arrEmails(intIndex, 0)\n\t\t\t\t   strValue = arrEmails(intIndex, 1)\n\n\t\t\t\t\t'show\n\t\t\t\t\tDebug.Print (\"The key \" & strKey & \" has the value: \" & strValue)\n\n\t\t\t\tNext intIndex\n\n\t\t\t\t'write value to the ini file\n\t\t\t\tCall qsys_WriteValueToIniFile(strIniFile, \"emails\", \"email99\", \"newton@company.com\")\n\n\t\t\tEnd Sub\n\n\n\t\t\tPUT THIS CODE IN A MODULE NAMED: qsys\n\t\t\t==============================================================\n\n\t\t\t'used for ini functions\n\t\t\tPrivate Declare Function GetPrivateProfileSection Lib \"kernel32\" _\n\t\t\tAlias \"GetPrivateProfileSectionA\" (ByVal Section As String, _\n\t\t\tByVal Buffer As String, ByVal Size As Long, ByVal FileName _\n\t\t\tAs String) As Long\n\n\t\t\tFunction qsys_GetValueFromIniFile(strPathAndFileName As String, strSection As String, strKey As String) As String\n\n\t\t\t\t'read the value\n\t\t\t\tqsys_GetValueFromIniFile = System.PrivateProfileString(strPathAndFileName, strSection, strKey)\n\n\t\t\tEnd Function\n\n\t\t\tFunction qsys_WriteValueToIniFile(strPathAndFileName As String, strSection As String, strKey As String, strValue As String) As String\n\n\t\t\t\t'write the value\n\t\t\t\tSystem.PrivateProfileString(strPathAndFileName, strSection, strKey) = strValue\n\n\t\t\tEnd Function\n\n\t\t\tPublic Function qsys_GetIniSectionValues(strPathAndFileName As String, strSection As String) As Variant\n\n\t\t\t\t'declarations\n\t\t\t\tDim strBuffer As String\n\t\t\t\tDim lngReturnValue As Long\n\t\t\t\tDim arrRawItems() As String\n\t\t\t\tDim strRawItem As String\n\t\t\t\tDim arrItems() As String\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim intBufferSize As Integer\n\n\t\t\t\t'variables\n\t\t\t\tintBufferSize = 32767\n\t\t\t\tstrBuffer = Space$(intBufferSize)\n\t\t\t\tlngRetVal = GetPrivateProfileSection(strSection, strBuffer, intBufferSize, strPathAndFileName)\n\n\t\t\t\t'make sure it exists\n\t\t\t\tIf lngRetVal = 0 Then\n\n\t\t\t\t\t'the section doesn't exist so go back\n\t\t\t\t\tReDim arrRawItems(-1 To -1)\n\t\t\t\t\tqsys_GetIniSectionValues = arrRawItems\n\t\t\t\t\tExit Function\n\n\t\t\t\tElse\n\n\t\t\t\t\t'get list of raw items from section\n\t\t\t\t\tarrRawItems = VBA.Split(Left$(strBuffer, lngRetVal), Chr$(0))\n\n\t\t\t\t\t'build array to send back\n\t\t\t\t\tIf Len(arrRawItems(UBound(arrRawItems))) = 0 Then\n\t\t\t\t\t\tintUBound = UBound(arrRawItems) - 1\n\t\t\t\t\tElse\n\t\t\t\t\t\tintUBound = UBound(arrRawItems)\n\t\t\t\t\tEnd If\n\n\t\t\t\t\t'redim\n\t\t\t\t\tReDim arrItems(0 To intUBound, 0 To 1)\n\n\t\t\t\t\t'run through and get all values\n\t\t\t\t\tFor intIndex = 0 To intUBound\n\n\t\t\t\t\t\t'build array to send back\n\t\t\t\t\t\tarrParts = qstr_BreakIntoParts(arrRawItems(intIndex), \"=\")\n\t\t\t\t\t\tarrItems(intIndex, 0) = arrParts(0)\n\t\t\t\t\t\tarrItems(intIndex, 1) = arrParts(1)\n\n\t\t\t\t\tNext intIndex\n\n\t\t\t\tEnd If\n\n\t\t\t\t'return array\n\t\t\t\tqsys_GetIniSectionValues = arrItems\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to create a dropdown in a cell**\n\t\t- This function creates a dropdown of values in a cell (like on a website). The qsys_GetIniSectionValues returns the values which I didn't include but to use this code you really just need to create the comma-separated strContent variable however best suits your context.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub qexc_FillCellWithDropdownList(strCellName As String, strIniSection As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim arrFinanzierer() As String\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strContent As String\n\n\t\t\t\t'variables\n\t\t\t\tarrItems = qsys_GetIniSectionValues(Config_IniFile, strIniSection)\n\t\t\t\tstrContent = \"\"\n\n\t\t\t\t'build the string to pass to the dropdown\n\t\t\t\tFor intIndex = 0 To UBound(arrItems)\n\t\t\t\t\tstrContent = strContent & \",\" & arrItems(intIndex, 0)\n\t\t\t\tNext intIndex\n\n\t\t\t\t 'build dropdown\n\t\t\t\t ActiveSheet.Range(strCellName).Select\n\t\t\t\t With Selection.Validation\n\t\t\t\t\t .Delete\n\t\t\t\t\t .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=strContent\n\t\t\t\t\t .IgnoreBlank = True\n\t\t\t\t\t .InCellDropdown = True\n\t\t\t\t\t .InputTitle = \"\"\n\t\t\t\t\t .ErrorTitle = \"Please ...\"\n\t\t\t\t\t .InputMessage = \"\"\n\t\t\t\t\t .ErrorMessage = \"... choose an item from the list!\"\n\t\t\t\t\t .ShowInput = True\n\t\t\t\t\t .ShowError = True\n\t\t\t\t End With\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function to get all lines from a file into an ArrayList**\n\t\t- This uses a custom class called ArrayList which is easier to work with than an array. You simply specify the file and get an arraylist of lines back that you can interate through.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\t'define\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim intNumberOfLines As Integer\n\t\t\t\tDim strLine As String\n\t\t\t\tDim arrLines As ArrayList\n\n\t\t\t\t'variables\n\t\t\t\tSet arrLines = New ArrayList\n\t\t\t\tSet arrLines = qfil_ReadFileAsLinesInArrayList(\"c:\\log.txt\")\n\t\t\t\tintNumberOfLines = arrLines.NumberOfItems\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To intNumberOfLines - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrLine = arrLines.GetItem(intIndex)\n\n\t\t\t\t\t'do something with the line\n\t\t\t\t\tDebug.Print strLine\n\n\t\t\t\tNext\n\n\t\t\tEnd Sub\n\n\n\n\n\t\t\t'method: read a file from the disk into an array of lines\n\t\t\tFunction qfil_ReadFileAsLinesInArrayList(strPathAndFileName As String) As ArrayList\n\n\t\t\t\t'declarations\n\t\t\t\tDim ra() As String\n\t\t\t\tDim objFSO As Variant\n\t\t\t\tDim objReadFile As Variant\n\t\t\t\tDim intNumberOfLines As Integer\n\t\t\t\tDim intLineNumber As Integer\n\t\t\t\tDim arrLines As ArrayList\n\t\t\t\tDim strLine As String\n\n\t\t\t\t'variables\n\t\t\t\tSet arrLines = New ArrayList\n\t\t\t\tSet objFSO = CreateObject(\"Scripting.FileSystemObject\")\n\t\t\t\tSet objReadFile = objFSO.OpenTextFile(strPathAndFileName, 1)\n\t\t\t\tintNumberOfLines = qfil_GetNumberOfLines(strPathAndFileName)\n\n\t\t\t\t'loop through file\n\t\t\t\tintLineNumber = 1\n\t\t\t\tDo While objReadFile.AtEndOfStream <> True\n\n\t\t\t\t\t'read in line\n\t\t\t\t\tstrLine = objReadFile.ReadLine\n\n\t\t\t\t\t'add it to the collection (unless it is the last line to avoid a trailing blank line in the arraylist)\n\t\t\t\t\tarrLines.Add (strLine)\n\n\t\t\t\t\t'increment\n\t\t\t\t\tintLineNumber = intLineNumber + 1\n\n\t\t\t\tLoop\n\n\t\t\t\t'close it up\n\t\t\t\tobjReadFile.Close\n\t\t\t\tSet objReadFile = Nothing\n\t\t\t\tSet objFSO = Nothing\n\n\t\t\t\tSet qfil_ReadFileAsLinesInArrayList = arrLines\n\n\t\t\tEnd Function\n\n\n\n\n\n\t\t\tCREATE CLASS CALLED ArrayList (set to 2-PublicNotCreatable)\n\t\t\t=========================================================================\n\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As String\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(objItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tm_arrContainer(m_intNumberOfItems - 1) = objItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tGetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists\n\t\t\tFunction ItemExists(objDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim objItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tobjItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf objItem = objDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\n\n\t\t\t'gets a list with e.g. commas separating each item\n\t\t\tFunction GetSeparatedList(strSeparator As String) As String\n\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strListOfNames As String\n\t\t\t\tDim intAnzahl As Integer\n\t\t\t\tDim strName As String\n\t\t\t\tDim strSep As String\n\n\t\t\t\tstrListOfNames = \"\"\n\t\t\t\tintAnzahl = UBound(m_arrContainer)\n\n\t\t\t\tFor intIndex = 0 To intAnzahl - 1\n\t\t\t\t\tIf intIndex <> 0 Then\n\t\t\t\t\t\t\tstrSep = strSeparator\n\t\t\t\t\t\tElse\n\t\t\t\t\t\t\tstrSep = \"\"\n\t\t\t\t\tEnd If\n\t\t\t\tstrName = m_arrContainer(intIndex)\n\t\t\t\tstrListOfNames = strListOfNames & strSep & strName\n\t\t\t\tNext intIndex\n\n\t\t\t\tGetSeparatedList = strListOfNames\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Date and time functions for getting mysql formatted dates/time strings**\n\t\t- I use these functions often to store date/time in text files or MySQL and other database, and for naming log files.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tCREATE A MODULE CALLED qdat\n\t\t\t==========================================================================\n\n\t\t\tOption Explicit\n\n\t\t\t'tool: returns current date, e.g. \"2006-12-31\"\n\t\t\tFunction qdat_GetCurrentDate() As String\n\n\t\t\t\tqdat_GetCurrentDate = Year(Date) & \"-\" & qstr_PadZeros(Month(Date), 2) & \"-\" & qstr_PadZeros(Day(Date), 2)\n\n\t\t\tEnd Function\n\n\t\t\t'tool: returns current date and time, e.g. \"2006-12-31 23:35:00\"\n\t\t\tFunction qdat_GetCurrentDateTime() As String\n\n\t\t\t\tqdat_GetCurrentDateTime = qdat_GetCurrentDate() & \" \" & qdat_GetCurrentTime()\n\n\t\t\tEnd Function\n\n\n\t\t\t'tool: returns current time, e.g. \"23:35:00\"\n\t\t\tFunction qdat_GetCurrentTime() As String\n\n\t\t\t\tqdat_GetCurrentTime = qstr_PadZeros(Hour(Now), 2) & \":\" & qstr_PadZeros(Minute(Now), 2) & \":\" & qstr_PadZeros(Second(Now), 2)\n\n\t\t\tEnd Function\n\n\t\t\t'tool: returns a date/time string that can be used in a file name, e.g. a log file name, e.g. \"logfile-2007-01-31--23-55-00.txt\"\n\t\t\tFunction qdat_GetDateTimeForFile() As String\n\n\t\t\t\tqdat_GetDateTimeForFile = qdat_GetCurrentDate() & \"--\" & qstr_PadZeros(Hour(Now), 2) & \"-\" & qstr_PadZeros(Minute(Now), 2) & \"-\" & qstr_PadZeros(Second(Now), 2)\n\n\t\t\tEnd Function\n\n\n\n\t\t\tCREATE A MODULE CALLED qstr\n\t\t\t==========================================================================\n\n\t\t\tFunction qstr_PadZeros(str As String, length As Integer) As String\n\t\t\t\tDim zerosToAdd As Integer\n\t\t\t\tzerosToAdd = length - Len(str)\n\t\t\t\tIf zerosToAdd > 0 Then\n\t\t\t\t\tqstr_PadZeros = String(zerosToAdd, \"0\") & str\n\t\t\t\tElse\n\t\t\t\t\tqstr_PadZeros = str\n\t\t\t\tEnd If\n\t\t\tEnd Function\t\t\t\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to use Enums in Excel VBA**\n\t\t- I was never a fan of enums even in C# (they are so static, values are in code, not in a database) but if you have a lookup table that will never change, e.g. some kind of status, etc. then they are useful, especially since they pop up in intellisense. Here's how to use them.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim objStatus As Status\n\n\t\t\t\t'variables\n\t\t\t\tobjStatus = Un 'as you type, you get intellisense\n\n\t\t\t\tDebug.Print objStatus 'prints \"3\"\n\n\t\t\tEnd Sub\n\n\t\t\tCREATE A MODULE CALLED \"Enums\":\n\t\t\t========================================\n\t\t\tEnum Status\n\t\t\t\tSent = 1\n\t\t\t\tUnsent = 2\n\t\t\t\tUnknown = 3\n\t\t\tEnd Enum\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to do a simple lookup in another sheet**\n\t\t- If you need to have a list of names/email addresses so you can look up the name and get the email address, then use this function. In this example in the sheet \"Email List\" you have the names in column A and the emails in column B.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tFunction GetEmail(strFieldName As String) As String\n\n\t\t\t\tDim ws As Worksheet\n\t\t\t\tDim Rng As Range\n\t\t\t\tDim CellValue As String\n\n\t\t\t\t'variables\n\t\t\t\tSet ws = ActiveWorkbook.Sheets(\"Email List\")\n\t\t\t\tSet Rng = ws.Range(\"A1:A100\")\n\n\t\t\t\t'determine it\n\t\t\t\tIf Not (Rng.Find(strFieldName) Is Nothing) Then\n\t\t\t\t\tIf Rng.Find(strFieldName).Cells(1, 2).Value <> \"\" Then\n\t\t\t\t\t\tGetEmail = Rng.Find(strFieldName).Cells(1, 2).Value\n\t\t\t\t\tElse\n\t\t\t\t\t\tGetEmail = \"\"\n\t\t\t\t\tEnd If\n\t\t\t\tElse\n\t\t\t\t\tGetEmail = \"SYSTEM_NOT_FOUND\"\n\t\t\t\tEnd If\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to find the last filled cell in a column (endlessly deep)**\n\t\t- This is an improvment to another piece of code I posted which forced you to have a limit on how deep you check for the last filled column. This is probably faster as well if you are, i.e. checking a number of columns on a number of sheets. Thanks kmillen.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\t\t\t\tDebug.Print qexc_GetLastFilledCellInColumn(\"Main\", 1)\n\t\t\tEnd Sub\n\n\t\t\tFunction qexc_GetLastFilledCellInColumn(strSheetName As String, intColumnToCheck As Integer) As Integer\n\t\t\t\tSheets(strSheetName).Cells(65536, intColumnToCheck).Select\n\t\t\t\tSelection.End(xlUp).Select\n\t\t\t\tqexc_GetLastFilledCellInColumn = Selection.Row\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function to search for a line in an arraylist of other lines**\n\t\t- Here you use a custom class called ArrayList and can search through a collection of strings to find if another string is contained in it, also good base code to build from for other functionality\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'define\n\t\t\tDim arrFileNames As ArrayList\n\n\t\t\t'variables\n\t\t\tSet arrFileNames = New ArrayList\n\t\t\tarrFileNames.Add(\"one.txt\")\n\t\t\tarrFileNames.Add(\"two.txt\")\n\t\t\tarrFileNames.Add(\"three.txt\")\n\n\t\t\tIf qstr_LineExistsInLines(\"two.txt\", arrFileNames) Then\n\t\t\t\t'act on it\n\t\t\tEnd If\n\n\n\n\n\t\t\t'tool: assumes you have a list of strings (e.g. file names) in an array, checks to see if a string equals any of those\n\t\t\tFunction qstr_LineExistsInLines(strDesiredLine As String, arrLines As ArrayList) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim intNumberOfLines As Integer\n\t\t\t\tDim strLine As String\n\n\t\t\t\t'variables\n\t\t\t\tqstr_LineExistsInLines = False\n\t\t\t\tintNumberOfLines = arrLines.NumberOfItems\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To intNumberOfLines - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrLine = arrLines.GetItem(intIndex)\n\n\t\t\t\t\t'check it\n\t\t\t\t\tIf qstr_AreEqual(strLine, strDesiredLine) Then\n\n\t\t\t\t\t\t'we found it so say so and get out\n\t\t\t\t\t\tqstr_LineExistsInLines = True\n\t\t\t\t\t\tExit Function\n\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\tEnd Function\n\n\n\n\n\t\t\tCREATE CLASS CALLED ArrayList (set to 2-PublicNotCreatable)\n\t\t\t===============================================================================\n\n\t\t\tOption Explicit\n\n\t\t\t'internal variables\n\t\t\tDim m_arrContainer() As String\n\t\t\tDim m_intNumberOfItems As Integer\n\n\n\t\t\t'method: add an item\n\t\t\tPublic Sub Add(objItem As Variant)\n\n\t\t\t\t'increment internal counter\n\t\t\t\tm_intNumberOfItems = m_intNumberOfItems + 1\n\n\t\t\t\t'redimension container\n\t\t\t\tReDim Preserve m_arrContainer(m_intNumberOfItems)\n\n\t\t\t\t'now add the item\n\t\t\t\tm_arrContainer(m_intNumberOfItems - 1) = objItem\n\n\t\t\tEnd Sub\n\n\t\t\t'method: returns the number of items for for/next loops\n\t\t\tFunction NumberOfItems() As Integer\n\t\t\t\tNumberOfItems = m_intNumberOfItems\n\t\t\tEnd Function\n\n\t\t\t'method: return a specific item\n\t\t\tFunction GetItem(intIndexNumber As Integer) As Variant\n\t\t\t\tGetItem = m_arrContainer(intIndexNumber)\n\t\t\tEnd Function\n\n\t\t\t'method: returns whether or not item exists\n\t\t\tFunction ItemExists(objDesiredItem As Variant) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim objItem As Variant\n\n\t\t\t\t'loop through and check\n\t\t\t\tFor intIndex = 0 To m_intNumberOfItems - 1\n\n\t\t\t\t\t'variables\n\t\t\t\t\tobjItem = Me.GetItem(intIndex)\n\n\t\t\t\t\t'if this is it, then return true\n\t\t\t\t\tIf objItem = objDesiredItem Then\n\t\t\t\t\t\tItemExists = True\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\t\t'if we are here, it was not found\n\t\t\t\tItemExists = False\n\n\t\t\tEnd Function\n\n\t\t\t'gets a list with e.g. commas separating each item\n\t\t\tFunction GetSeparatedList(strSeparator As String) As String\n\n\t\t\t\tDim intIndex As Integer\n\t\t\t\tDim strListOfNames As String\n\t\t\t\tDim intAnzahl As Integer\n\t\t\t\tDim strName As String\n\t\t\t\tDim strSep As String\n\n\t\t\t\tstrListOfNames = \"\"\n\t\t\t\tintAnzahl = UBound(m_arrContainer)\n\n\t\t\t\tFor intIndex = 0 To intAnzahl - 1\n\t\t\t\t\tIf intIndex <> 0 Then\n\t\t\t\t\t\t\tstrSep = strSeparator\n\t\t\t\t\t\tElse\n\t\t\t\t\t\t\tstrSep = \"\"\n\t\t\t\t\tEnd If\n\t\t\t\tstrName = m_arrContainer(intIndex)\n\t\t\t\tstrListOfNames = strListOfNames & strSep & strName\n\t\t\t\tNext intIndex\n\n\t\t\t\tGetSeparatedList = strListOfNames\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to get a list of which files in a directory are open**\n\t\t- This can be used if you need to process files and need to know if everyone is out of the files first.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\tSet objDirectory = qfil_GetAllFilesInDirectory(\"C:\\Testing\")\n\n\t\t\t\tFor Each objFile In objDirectory.Files\n\n\t\t\t\t\tIf IsFileAlreadyOpen(objFile.Path) Then\n\t\t\t\t\t\tDebug.Print objFile.Name & \" is OPENED\"\n\t\t\t\t\tElse\n\t\t\t\t\t\t'Debug.Print objFile.Name & \" is CLOSED\"\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\n\t\t\tEnd Sub\n\n\t\t\t'method: read a file from the disk into an array of lines\n\t\t\tFunction qfil_GetAllFilesInDirectory(DirectoryName As String)\n\n\t\t\t\tDim fs, Files\n\n\t\t\t\t'variables\n\t\t\t\tSet fs = CreateObject(\"Scripting.FileSystemObject\")\n\t\t\t\tSet f = fs.GetFolder(DirectoryName)\n\t\t\t\tSet qfil_GetAllFilesInDirectory = f\n\n\t\t\tEnd Function\n\n\n\t\t\tPUT THE FOLLOWING CODE IN A MODULE:\n\t\t\t=================================================================\n\n\t\t\tOption Explicit\n\n\t\t\tPublic Declare Function GetLastError _\n\t\t\t\tLib \"kernel32\" () _\n\t\t\t\tAs Long\n\t\t\tPublic Declare Function lopen _\n\t\t\t\tLib \"kernel32\" Alias _\n\t\t\t\t\"_lopen\" _\n\t\t\t\t(ByVal lpPathName As String, _\n\t\t\t\tByVal iReadWrite As Long) _\n\t\t\t\tAs Long\n\t\t\tPublic Declare Function lclose _\n\t\t\t\tLib \"kernel32\" Alias _\n\t\t\t\t\"_lclose\" _\n\t\t\t\t(ByVal hFile As Long) _\n\t\t\t\tAs Long\n\n\t\t\tPublic Function IsFileAlreadyOpen( _\n\t\t\t\t\t\t\tsFilename As String) _\n\t\t\t\t\t\t\tAs Boolean\n\t\t\t  Dim hFile   As Long\n\t\t\t  Dim lastErr As Long\n\n\t\t\t  hFile = -1\n\t\t\t  lastErr = 0\n\n\t\t\t  hFile = lopen(sFilename, &H10)\n\t\t\t  If hFile = -1 Then\n\t\t\t\tlastErr = Err.LastDllError\n\t\t\t  Else: lclose (hFile)\n\t\t\t  End If\n\t\t\t  If (hFile = -1) And (lastErr = 32) Then\n\t\t\t\tIsFileAlreadyOpen = True\n\t\t\t  Else: IsFileAlreadyOpen = False\n\t\t\t  End If\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to make all worksheets visible**\n\t\t- Perhaps for administrative reasons you want to have a button which makes all sheets visible, e.g. so the adminsitrator can access them all easily, and perhaps another button to hide certain ones when you are finished. Here is the basic code.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub LoopThroughWorksheets()\n\n\t\t\tDim WS_Count As Integer\n\t\t\tDim WorksheetIndex As Integer\n\n\t\t\tWS_Count = ActiveWorkbook.Worksheets.Count\n\n\t\t\tFor WorksheetIndex = 1 To WS_Count\n\n\t\t\t\t  Debug.Print ActiveWorkbook.Worksheets(WorksheetIndex).Name\n\t\t\t\t  ActiveWorkbook.Worksheets(WorksheetIndex).Visible = True\n\n\t\t\tNext WorksheetIndex\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function to determine if two ranges intersect or not**\n\t\t- Useful when you have cells that span over a couple cells and you need to know if the user clicked in there.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'method: returns whether or not two ranges intersect\n\t\t\tFunction qsys_RangesIntersect(Range1 As Range, Range2 As Range) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim InterSectRange As Range\n\n\t\t\t\t'variables\n\t\t\t\tSet InterSectRange = Application.Intersect(Range1, Range2)\n\n\t\t\t\t'determine it\n\t\t\t\tqsys_RangesIntersect = Not InterSectRange Is Nothing\n\n\t\t\t\t'clean up\n\t\t\t\tSet InterSectRange = Nothing\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Simple Message Box syntax**\n\t\t- Never having done a message box in Excel VBA before, I just wanted the basic syntax. This is it. Notice that you can ADD (with +) the vbQuestion and vbYesNo together. Others you might want to use are vbCritical and vbOk.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim strAnswer As String\n\n\t\t\t\t'ask\n\t\t\t\tstrAnswer = MsgBox(\"Do you want to delete the file?\", vbQuestion + vbYesNo, \"Delete File?\")\n\t\t\t\tIf strAnswer = vbNo Then\n\t\t\t\t\tDebug.Print \"File would NOT be deleted.\"\n\t\t\t\tElse\n\t\t\t\t\tDebug.Print \"File would be deleted.\"\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to use an optional parameter**\n\t\t- This shows you how you can have optional parameters in Excel VBA. With a couple lines emulating the default value, etc. you can get all the functionality you have in other languages so that you can send a value as a parameter but if you don't a default is used. Notice the use of IIf which is in itself a useful little syntax to make one-line definitions.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'tool: used to transport a user to another sheet when he clicks on a certain cell, works even if the cell he clicks on expands over many cells\n\t\t\tSub qexc_TransportUserToNewSheetIfHeIsOnACertainCell(rngTarget As Range, strTransportFromSheetName As String, strClickedCellRangeName As String, strTransportToSheetName As String, Optional strTransportToCellRangeName As String)\n\n\t\t\t\t'declarations\n\t\t\t\tDim blnCellsAreEqual As Boolean\n\t\t\t\tDim blnCellsIntersect As Boolean\n\t\t\t\tDim strDefaultTransportToCellRangeName As String\n\n\t\t\t\t'config\n\t\t\t\tstrDefaultTransportToCellRangeName = \"A1\"\n\n\t\t\t\t'variables\n\t\t\t\tblnCellsAreEqual = rngTarget.Address = Sheets(strTransportFromSheetName).Range(strClickedCellRangeName).Address\n\t\t\t\tblnCellsIntersect = qexc_RangesIntersect(rngTarget, Sheets(strTransportFromSheetName).Range(strClickedCellRangeName))\n\t\t\t\tstrTransportToCellRangeName = IIf(strTransportToCellRangeName = \"\", strDefaultTransportToCellRangeName, strTransportToCellRangeName)\n\n\t\t\t\t'send them there if need be\n\t\t\t\tIf blnCellsAreEqual Or blnCellsIntersect Then\n\t\t\t\t\tSheets(strTransportToSheetName).Activate\n\t\t\t\t\tSheets(strTransportToSheetName).Range(strTransportToCellRangeName).Select\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to find out if a cell changed.**\n\t\t- This is a simple function that encapsulates finding out if a cell changed.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPUT THIS IN Worksheet_Change:\n\t\t\t===========================================\n\n\t\t\tPrivate Sub Worksheet_Change(ByVal Target As Range)\n\t\t\t\tIf qexc_ThisCellChanged(Target, \"Total\") Then\n\t\t\t\t\t' e.g. send a mail or write to a database, etc.\n\t\t\t\tEnd If\t\n\t\t\tEnd Sub\n\n\t\t\tPUT THIS IN A MODULE called \"qexc\"\n\t\t\t===========================================\n\t\t\t'return whether or not we are on a certain cell\n\t\t\tFunction qexc_ThisCellChanged(Target As Range, strCellName As String) As Boolean\n\t\t\t\tIf Target.Address = ActiveSheet.Range(strCellName).Address Then\n\t\t\t\t\tqexc_ThisCellChanged = True\n\t\t\t\tElse\n\t\t\t\t\tqexc_ThisCellChanged = False\n\t\t\t\tEnd If\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to blank out a sheet**\n\t\t- Here is a simple subroutine which blanks out a sheet for you, set it to blank out as much as you want. Keep it in this subroutine and always call it so that you can later e.g. blank out certain formatting, or reset the formatting of a sheet a certain way, etc.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'tool: removes all data from sheet but keeps the formatting\n\t\t\tSub qexc_BlankOutSheet(strSheetName As String)\n\n\t\t\t\t'blank it out\n\t\t\t\tSheets(strSheetName).Columns(\"A:Z\").ClearContents\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to find out if a cell in a certain column was changed**\n\t\t- This code allows you to find out if a certain column was changed. I needed this so that if column A was changed, the program writes in the name of the user in column D, for instance.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPUT THIS IN Worksheet_Change:\n\t\t\t==========================================\n\n\t\t\tIf qexc_CellInThisColumnChanged(Target, 1) Then\n\t\t\t\tMsgBox \"You may not change cells in this column!\"\n\t\t\tEnd If\n\n\t\t\tPUT THIS IN THE MODULE CALLED qexc:\n\t\t\t================================================\n\n\t\t\t'tool: return whether or not the cell that was changed is in a certain column\n\t\t\tFunction qexc_CellInThisColumnChanged(Target As Range, intColumnNumber As Integer) As Boolean\n\t\t\t\tIf Target.Column = intColumnNumber Then\n\t\t\t\t\tqexc_CellInThisColumnChanged = True\n\t\t\t\tElse\n\t\t\t\t\tqexc_CellInThisColumnChanged = False\n\t\t\t\tEnd If\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function to check if directory exists**\n\t\t- This is a simple wrapper function to check if a directory exists, will make your code cleaner and easier to read.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'method: returns whether or not a directory exists, e.g. \"C:\\temp\"\n\t\t\tFunction qexc_DirectoryExists(strDirectory As String) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim objFSO As New Scripting.FileSystemObject\n\n\t\t\t\t'determine if it exists\n\t\t\t\tqexc_DirectoryExists = objFSO.FolderExists(strDirectory)\n\n\t\t\t\t'close everything up\n\t\t\t\tSet objFSO = Nothing\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to attach a custom toolbar to a file**\n\t\t- This shows you the code you need to make a toolbar visible when you open file and go away when you close it, so that a file can have its own special toolbar. Copy this code into \"ThisWorkbook\".\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPrivate Sub Workbook_Open()\n\t\t\t\tApplication.CommandBars(\"Views\").Visible = True\n\t\t\tEnd Sub\n\n\t\t\tPrivate Sub Workbook_BeforeClose(Cancel As Boolean)\n\t\t\t\tOn Error Resume Next\n\t\t\t\tApplication.CommandBars(\"Views\").Delete\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to find the row and column of a cell that contains a certain text**\n\t\t- If you have sheets which have marker fields at various locations, e.g. if you have different versions of a customer file and don't know where \"Main Report:\" might be, you can get its coordinates whereever it is with this code.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tFunction FindRowNumberWithText(strText As String) As Integer\n\n\t\t\t\tFindRowNumberWithText = ActiveSheet.Range(\"A1:A300\").Find(\"Main Report:\").Cells.Row\n\n\t\t\tEnd Function\n\n\n\t\t\tFunction FindColumnNumberWithText(strText As String) As Integer\n\n\t\t\t\tFindColumnNumberWithText = ActiveSheet.Range(\"A1:A300\").Find(\"Main Report:\").Cells.Column\n\n\t\t\tEnd Function\n\n\n\t\t\tSub Test()\n\n\t\t\t\tDim intRow As Integer\n\t\t\t\tDim intColumn As Integer\n\t\t\t\tDim strText As String\n\n\t\t\t\tstrText = \"Main Report:\"\n\t\t\t\tintRow = FindRowNumberWithText(strText)\n\t\t\t\tintColumn = FindColumnNumberWithText(strText)\n\n\t\t\t\tDebug.Print \"The cell that contains '\" & strText & \"' is at: \" & intRow & \",\" & intColumn\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to measure elapsed time**\n\t\t- If you have a piece of code that takes awhile to process and you want to log how long it takes, use this function.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tFunction qstr_TimeElapsed(datStart As Date, datEnd As Date) As String\n\t\t\t\tqstr_TimeElapsed = Format(datStart - datEnd, \"hh:mm:ss\")\n\t\t\tEnd Function\n\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim datStart As Date\n\t\t\t\tDim datEnd As Date\n\t\t\t\tDim x As Long\n\t\t\t\tDim y As Long\n\t\t\t\tDim strTimeElapsed As String\n\n\t\t\t\t'measure it\n\t\t\t\tdatStart = Time()\n\t\t\t\tFor x = 1 To 100000000\n\t\t\t\t\ty = y + 10\n\t\t\t\tNext\n\t\t\t\tdatEnd = Time()\n\n\t\t\t\tstrTimeElapsed = qstr_TimeElapsed(datStart, datEnd)\n\n\t\t\t\tDebug.Print strTimeElapsed\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to process each cell in a matrix range**\n\t\t- Up to now I have just looped through and processed cells in either a column or a row using Cells(x,y), but Excel has an easy for-each-cell-in-range solution which makes it easy to process cells in a e.g. 10 x 10 grid. This example shows you how. Not that it processes left to right first.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'shows how to process each cell\n\t\t\tSub Test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim strRangeAddress As String\n\t\t\t\tDim rngAll As Range\n\t\t\t\tDim rngCell As Range\n\n\t\t\t\t'variables\n\t\t\t\tstrRangeAddress = \"A2:B8\"\n\t\t\t\tSet rngAll = ActiveSheet.Range(strRangeAddress)\n\n\t\t\t\t'loop through\n\t\t\t\tFor Each rngCell In rngAll.Cells\n\n\t\t\t\t\tDebug.Print \"Cell \" & rngCell.Address & \" contains \" & rngCell.Value\n\n\t\t\t\tNext\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function that compares two strings**\n\t\t- No matter what language I program in I always make this function and use it instead of == so that I always know that case-senstivity and leading and trailing spaces are not a problem. It increases your peace-of-mind.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tFunction qstr_AreEqual(strLine1, strLine2) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim rb As Boolean\n\n\t\t\t\t'variables\n\t\t\t\trb = False\n\n\t\t\t\tIf UCase(strLine1) = UCase(strLine2) Then\n\t\t\t\t\trb = True\n\t\t\t\tElse\n\t\t\t\t\trb = False\n\t\t\t\tEnd If\n\n\t\t\t\tqstr_AreEqual = rb\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to hide and unhide the menu in the Excel application**\n\t\t- If you want to simplify an excel application you can hide the menu dropdowns so that the user can only do limited things with your buttons, etc. This is a how to make the menu disappear.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub HideMenu()\n\n\t\t\t\tOn Error Resume Next\n\t\t\t\tApplication.CommandBars(1).Enabled = False\n\n\t\t\tEnd Sub\n\n\t\t\tSub UnhideMenu()\n\n\t\t\t\tOn Error Resume Next\n\t\t\t\tApplication.CommandBars(1).Enabled = True\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Simple function that returns whether or not a string begins with another string**\n\t\t- Use functions like these to make your code more readable.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tFunction qstr_BeginsWith(strMain As String, strPart As String) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim rb As Boolean\n\t\t\t\tDim intLengthOfPart As Integer\n\n\t\t\t\t'variables\n\t\t\t\tintLengthOfPart = Len(strPart)\n\n\t\t\t\t'check it\n\t\t\t\tIf Left(strMain, intLengthOfPart) = strPart Then\n\t\t\t\t\trb = True\n\t\t\t\tElse\n\t\t\t\t\trb = False\n\t\t\t\tEnd If\n\n\t\t\t\tqstr_BeginsWith = rb\n\n\t\t\tEnd Function\t\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Subroutine to delete a sheet**\n\t\t- This subroutine enables you to delete a sheet without asking, no popups, if sheet doesn't exist no error, it just deletes it.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\t\t\t\texl_DeleteSheet (\"Test11\")\n\t\t\tEnd Sub\n\n\t\t\tSub exl_DeleteSheet(strSheetName As String)\n\n\t\t\t\tOn Error Resume Next\n\t\t\t\tApplication.DisplayAlerts = False\n\t\t\t\tSheets(strSheetName).Delete\n\t\t\t\tApplication.DisplayAlerts = True\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function that returns the last empty cell in a column**\n\t\t- Needed this to find the last cell that is empty in a sheet so that I could protect it to that point.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tFunction qexc_GetLastFilledCellInColumn(strSheetName As String, intColumnToCheck As Integer) As Integer\n\n\t\t\t\t'declarations\n\t\t\t\tDim intRow As Integer\n\t\t\t\tDim intColumn As Integer\n\t\t\t\tDim strCell As String\n\n\t\t\t\t'loop through and test each row\n\t\t\t\tFor intRow = 1 To 1000\n\n\t\t\t\t\t'variables\n\t\t\t\t\tstrCell = Sheets(strSheetName).Cells(intRow, intColumnToCheck).Value\n\n\t\t\t\t\t'if it is filled, then go to next row\n\t\t\t\t\tIf Trim(strCell) = \"\" Then\n\t\t\t\t\t\tqexc_GetLastFilledCellInColumn = intRow - 1\n\t\t\t\t\t\tExit Function\n\t\t\t\t\tEnd If\n\n\t\t\t\tNext\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Any easy way to lock a large area of the screen**\n\t\t- If you want to restrict the user to working in a small area, you can use sheet protection but this gets intricate especially in trying to understand the logic of \"select locked cells\" etc. So if you only have one range in the middle of the sheet somewhere to which you want to restrict the user, use ScrollArea\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPrivate Sub Worksheet_Activate()\n\t\t\t\tActiveSheet.ScrollArea = \"B2:K2\"\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to make a time stamp button**\n\t\t- Make the CommandButton, change the caption to \"btnShowTime\" and use this code. It fills cell A1 with the current time.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tPrivate Sub btnShowTime_Click()\n\t\t\t\tActiveSheet.Cells(1, 1).Formula = Format$(Now, \"HH:mm:ss\")\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Simple example of OnError**\n\t\t- I had never used OnError so made this example to see that it works. This particular example checks to see if a date is valid although for this you could actually use the built-in function IsDate(). Also beware that you at least in German dates it accepts \"04.18.2007\" since it automatically converts this to \"18.04.2007\" (hmmm, could be a surprise).\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub test()\n\n\t\t\t\t'declarations\n\t\t\t\tDim strTheDate1 As String\n\t\t\t\tDim strTheDate2 As String\n\n\t\t\t\t'variables\n\t\t\t\tstrTheDate1 = \"30.02.2007\"\n\t\t\t\tstrTheDate2 = \"30.03.2007\"\n\n\t\t\t\t'test first date\n\t\t\t\tIf qdat_DateIsValid(strTheDate1) Then\n\t\t\t\t\tDebug.Print strTheDate1 & \" is a valid date\"\n\t\t\t\tElse\n\t\t\t\t\tDebug.Print strTheDate1 & \" is NOT a valid date\"\n\t\t\t\tEnd If\n\n\t\t\t\t'test second date\n\t\t\t\tIf qdat_DateIsValid(strTheDate2) Then\n\t\t\t\t\tDebug.Print strTheDate2 & \" is a valid date\"\n\t\t\t\tElse\n\t\t\t\t\tDebug.Print strTheDate2 & \" is NOT a valid date\"\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\n\t\t\tSub test2()\n\n\t\t\t\t'declarations\n\t\t\t\tDim strTheDate As String\n\n\t\t\t\t'variables\n\t\t\t\tstrTheDate = InputBox(\"Enter a date: \", \"Enter Date\", \"12/31/2007\")\n\n\t\t\t\t'test first date\n\t\t\t\tIf qdat_DateIsValid(strTheDate) Then\n\t\t\t\t\tDebug.Print strTheDate & \" is a valid date\"\n\t\t\t\tElse\n\t\t\t\t\tDebug.Print strTheDate & \" is NOT a valid date\"\n\t\t\t\tEnd If\n\n\t\t\tEnd Sub\n\n\n\t\t\tFunction qdat_DateIsValid(strDate As String) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim datDate As Date\n\n\t\t\t\t'test it\n\t\t\t\tOn Error GoTo HANDLEERROR\n\t\t\t\tdatDate = CDate(strDate)\n\t\t\t\tqdat_DateIsValid = True\n\t\t\t\tExit Function\n\n\t\t\tHANDLEERROR:\n\t\t\t\tqdat_DateIsValid = False\n\t\t\t\tExit Function\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **Function which returns if text is contained in another text**\n\t\t- I need this in every language I program in, here is is for Excel VBA.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'tool: returns whether or not a string contains another string\n\t\t\tFunction qstr_Contains(strLine As String, strPart As String) As Boolean\n\n\t\t\t\t'declarations\n\t\t\t\tDim rb As Boolean\n\t\t\t\tDim intPosition As Integer\n\n\t\t\t\t'variables\n\t\t\t\trb = False\n\t\t\t\tintPosition = InStr(strLine, strPart)\n\n\t\t\t\t'determine it\n\t\t\t\tIf intPosition <> 0 Then\n\t\t\t\t\trb = True\n\t\t\t\tElse\n\t\t\t\t\trb = False\n\t\t\t\tEnd If\n\n\t\t\t\t'return it\n\t\t\t\tqstr_Contains = rb\n\n\t\t\tEnd Function\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to list all range names in a worksheet**\n\t\t- To see all the range names you can click in the menu Insert | Name | Define, but many times you need a list of them to process in your code, etc. Range has a nice method called \"ListNames\" which does this.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub ListOutAllRangeNames()\n\t\t\t\tSheets.Add\n\t\t\t\tRange(\"A1\").ListNames\n\t\t\t\tColumns(\"A:B\").Columns.AutoFit\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to rename a file in Excel VBA**\n\t\t- Here is the simplest way to rename a file. I wrap most functionality in functions like this in case I want to add more steps to it later, e.g. logging which names you renamed, or doing intelligent checking and error reporting if the file name you want to name it to already exists.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\t'tool: renames a file\n\t\t\tSub qfil_RenameFile(strOriginalPathAndFileName As String, strNewPathAndFileName As String)\n\n\t\t\t\tName strOriginalPathAndFileName As strNewPathAndFileName\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to copy a row to another row**\n\t\t- This could be used as a way to replace the contents of any line with a default value, e.g. if you want to \"erase\" a line.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub Test()\n\n\t\t\t\tCall qexc_CopyRange(ActiveSheet.Rows(15), ActiveSheet.Rows(4))\n\n\t\t\tEnd Sub\n\n\t\t\tSub qexc_CopyRange(objOriginalRange As Range, objTargetRange As Range)\n\n\t\t\t\t'error handling\n\t\t\t\tOn Error GoTo CATCHERROR\n\n\t\t\t\t'copy it from one to another\n\t\t\t\tobjOriginalRange.Copy\n\t\t\t\tobjTargetRange.PasteSpecial xlPasteAll\n\t\t\t\tApplication.CutCopyMode = xlCopy\n\t\t\t\tExit Sub\n\n\t\t\t\t'there was an error\n\t\t\tCATCHERROR:\n\t\t\t\tMsgBox (\"Could not copy \" & objOriginalRange.Address)\n\t\t\t\tExit Sub\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t- **How to delete all worksheets**\n\t\t- I needed some quick code to clean out an Excel file with over 40 worksheets but I needed to keep the code. Used this, it got an error on the last one but I deleted it manually.\n\t\t\t-----------------------------------------------------------------------------------------------------------\n\t\t\tSub qexc_DeleteAllWorksheets()\n\n\t\t\t\t'declarations\n\t\t\t\tDim objWorksheet As Worksheet\n\n\t\t\t\t'loop through and delete\n\t\t\t\tFor Each objWorksheet In ThisWorkbook.Worksheets\n\t\t\t\t\tApplication.DisplayAlerts = False\n\t\t\t\t\tobjWorksheet.Delete\n\t\t\t\t\tApplication.DisplayAlerts = True\n\t\t\t\tNext\n\n\t\t\tEnd Sub\n\t\t\t-----------------------------------------------------------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-15 21:47:03","systemWhoCreated":"systemUnknown"},{"id":690,"category":"Angular","title":"Set up Angular site with components, directives, pipes, and a service that loads external data, and publish to Vercel","body":"- **background**\n\t- this howto is useful for **React developers** to get up to speed with **Angular**\n\t- we will build **a basic but useful site** with Angular which have basic features such as:\n\t\t- **multiple pages** with navbar and URL routes\n\t\t- **user interaction** with checkboxes and buttons\n\t\t- fetch data from an **external API**\n\t\t- a **search box** that filters the API-fetched data that is displayed as one types\n\t\t- **component-based organization** to keep the code organized\n\t\t- learn where to **save and access images** within the site\n\t\t- you will also publish this site at **Vercel**\n\t- in building this site, you will also learn Angular concepts that are not familiar to React\n\t\t- **command-line creation** of components\n\t\t- each component consists of four files\n\t\t\t- **template file** (HTML with directives/pipes etc.)\n\t\t\t- **class file** (TypeScript)\n\t\t\t- **style file** (SCSS)\n\t\t\t- **test file** (default Karma)\n\t\t- **directives** to facilitate user interaction\n\t\t\t- creating custom directives\n\t\t- **pipes** to alter data in the template\n\t\t\t- creating custom pipes\n\t\t- **decorators** to attach meta-data to classes\n\t\t- working in an **object-oriented programming** paradigm with classes/methods instead of functional programming functions/hooks\n\t\t- Angular uses **TypeScript** by default\n- **finished project**\n\t- full code is here:\n\t\t- https://github.com/edwardtanguay/et111-angular-site\n\t- when finished, the site will look like this:#gif#demositeangular\n- overview of Angular concepts that are either new to React developers, or how you use them are new\n\t- intro\n\t\t- learning Angular is in large part learning new concepts\n\t\t- coming from a React background, many of these concepts are new\n\t\t- the following are a list of concepts that one learns as one learns Angular\n\t\t- in this tutorial we will not do an example of every concept\n\t\t- we will create an example of many of them\n\t\t- but we also want to get an understanding of every concept in terms of this howto example\n\t- concepts we will cover in this howto\n\t\t- **components**\n\t\t\t- in Angular you create components as you do in React\n\t\t\t- however, in Angular, to create a component you use the CLI, e.g.\n\t\t\t\t- `ng generate component employees`\n\t\t\t- this will create a directory called **employees** and four files:##directandfiles\n\t\t\t- the four files are\n\t\t\t\t- **template** file (`.html`)\n\t\t\t\t- **style sheet** file (`.scss`)\n\t\t\t\t- **test** file (`.spec.ts`)\n\t\t\t\t- **class** file (`.ts`)\n\t\t- **templates**\n\t\t\t- a template can be a piece of HTML or is usually meant to be the whole HTML file that is created when you create an Angular component, see above\n\t\t\t- this file has an .html extension\n\t\t\t- but the HTML in the file has many other capabilities using e.g. directives:\n\t\t\t\t------------------------------------------\n\t\t\t\t<div><button (click)=\"handleDevInfoButtonClick()\">Toggle dev info</button></div>\n\t\t\t\t<div *ngIf=\"showDevInfo\">\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div [ngSwitch]=\"status\"\n\t\t\t\t\t\t class=\"devInfo\">\n\t\t\t\t\t\t<span *ngSwitchCase=\"'danger'\">This info-box warns a user.</span>\n\t\t\t\t\t\t<span *ngSwitchCase=\"'success'\">Success is displayed when no action is required.</span>\n\t\t\t\t\t\t<span *ngSwitchDefault>Unknown status code: {{status}}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t------------------------------------------\n\t\t- **OOP**\n\t\t\t- where React (since 2019) is based on **functional programming** with **functions** and **hooks** as the main structural components\n\t\t\t\t- Angular is based on **object-oriented programming** with **classes** and **methods** as the main structural components\n\t\t\t- one of the four files in every component is a class file, e.g. **info-box.component.ts**\n\t\t\t\t----------------------------------------------\n\t\t\t\timport { Component } from '@angular/core';\n\t\t\t\timport { IEmployee } from 'src/shared/interfaces';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\t@Component({\n\t\t\t\t\tselector: 'app-employees',\n\t\t\t\t\ttemplateUrl: './employees.component.html',\n\t\t\t\t\tstyleUrls: ['./employees.component.scss']\n\t\t\t\t})\n\t\t\t\texport class EmployeesComponent {\n\n\t\t\t\t\temployees: IEmployee[] = [];\n\t\t\t\t\tsearchText: string = '';\n\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tconst rawEmployees = (await axios.get('https://edwardtanguay.vercel.app/share/employees.json')).data;\n\n\t\t\t\t\t\t\trawEmployees.forEach((rawEmployee: any) => {\n\t\t\t\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\t\t\t\tfirstName: rawEmployee.firstName,\n\t\t\t\t\t\t\t\t\tlastName: rawEmployee.lastName,\n\t\t\t\t\t\t\t\t\tnotes: rawEmployee.notes\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t})();\n\t\t\t\t\t}\n\n\t\t\t\t\temployeeHasSearchText(emp: IEmployee): boolean {\n\t\t\t\t\t\tconst bulkText = emp.firstName + '|' + emp.lastName + '|' + emp.notes;\n\t\t\t\t\t\treturn bulkText.toLowerCase().includes(this.searchText.toLowerCase());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t----------------------------------------------\n\t\t\t- note:\n\t\t\t\t- **employees** and **searchText** are class variables\n\t\t\t\t\t- they are referenced with the `this.` prefix, i.e. a variable in *this* class\n\t\t\t\t\t- props that are sent to components (none in this example) are also class variables\n\t\t\t\t- **employeeHasSearchText** is a class methods (functions that belong to a class)\n\t\t\t\t- note there is a constructor which runs when the class is created\n\t\t- **directives**\n\t\t\t- commands that add additional behavior to elements in Angular templates\n\t\t\t- two types\n\t\t\t\t- structural\n\t\t\t\t\t- e.g. **ngIf**\n\t\t\t\t- attribute\n\t\t\t\t\t- e.g. **ngStyle**##directatrbi\t\n\t\t\t- these typically perform similar functionality as conditional rendering and e.g. .map() in JSX\n\t\t- **decorators**\n\t\t\t- used to attach metadata to a class, method, accessor, property, or parameter\n\t\t\t- we apply the decorator using the form @expression, where expression is the name of the decorator\n\t\t\t- decorators are **Typescript features** and still not part of the Javascript\n\t\t\t- e.g. this is a decorator called **@Component** that is included in every class file\n\t\t\t\t------------------------------------------\n\t\t\t\t@Component({\n\t\t\t\t\tselector: 'app-info-box',\n\t\t\t\t\ttemplateUrl: './info-box.component.html',\n\t\t\t\t\tstyleUrls: ['./info-box.component.scss']\n\t\t\t\t})\n\t\t\t\t------------------------------------------\n\t\t- **bindings**\n\t\t\t- allow data to flow between a component's class and its template\n\t\t\t- there are four kinds of bindings\n\t\t\t\t- **interpolation**\n\t\t\t\t\t- e.g. `{{title}}`\n\t\t\t\t- **property binding**\n\t\t\t\t\t- `[disabled]=\"isDisabled\"`\n\t\t\t\t- **event binding**\n\t\t\t\t\t- `<button (click)=\"handleDevInfoButtonClick()\">Toggle dev info</button>`\n\t\t\t\t- **two-way binding**\n\t\t\t\t\t- `<input [(ngModel)]=\"name\" />`\n\t\t- **pipes**\n\t\t\t- take in data as input and transforms it into an output\n\t\t\t- e.g. `<div class=\"title\">{{title | uppercase}}</div>`\t\t\n\t\t- **forms**\n\t\t\t- reactive and template-driven\n\t\t- **services**\n\t\t\t- objects that get **instantiated just once** during the lifetime of an application\n\t\t\t- they are similar to components but don't have HTML \n\t\t\t- they enable components to load and change a data source, somewhat similar to useContext\n\t\t\t- at the end of this Howto, we refactor our Employee component so that it gives the responsibility of loading employees to an employee service which is accessible to numerous components\n\t- concepts we won't cover in this howto but which one should know about and eventually learn as an Angular developer\n\t\t- **animations**\n\t\t\t- Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable\n\t\t\t- this includes positions, sizes, transforms, colors, borders, and more\n\t\t- **dependency injection**\n\t\t\t- [Dependency Injection](https://www.youtube.com/watch?v=GUcWjYHmYhY) (deutsch)\t\t\n\t\t- **built-in testing**\n\t\t\t- notes that when components are created, they automatically create a test file\n\t\t- **the observable type with RxJS**\n\t\t\t- RxJS is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code\n- **==> 1. Create basic Angular site <==**\n\t- in terminal, go to projects folder\n\t- when you develop in Angular, you use the CLI (Command Line Interface)\n\t- **install the Angular CLI**\n\t\t- therefore we need to install it\n\t\t- check if it is installed and what version you have:\n\t\t\t- `ng version`\n\t\t\t- if it shows an error, then install the CLI like this:\n\t\t\t\t- `npm install -g @angular/cli@latest`\n\t\t\t- **NOTE: if you are on Windows, before you have to downgrade your Node to get it to work with Angular, try this fix**\n\t\t\t\t- Erweiterte Systemeinstellungen / Umgebungsvariables/ Patch (bearbeiten) / neu hinzufügen ( %AppData%\\npm) und bring nach oben##itshouldinstallver\n\t\t\t- However, I get this:##andtheokok\n\t\t\t- I learn here that:\n\t\t\t\t- my CLI is out of date, latest is [15.0.1](https://www.npmjs.com/package/@angular/cli?activeTab=versions)\n\t\t\t\t- my Node version is 18.2.0 (which I had to install for Next.js) is too high for Angular\n\t\t- it [says here](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3) that Angular ~15.0.0 needs **^14.20.0 || ^16.13.0 || ^18.10.0** so this tells me I could upgrade from 18.2.0 to 18.10.0\n\t\t- with `nvm list available` I get this, I want an LTS version (Long Term Support) so I'll get 18.12.1:##want1812\n\t\t- `nvm install 18.12.1`\n\t\t- `nvm list` shows me what I have available:##nvmlistshowjks\n\t\t- switch with `nvm use 18.12.1`\n\t\t\t- with Windows as Administrator\n\t\t\t- on Linux as `sudo`\n\t\t- now have latest LTS version:##nowhavijij\n\t\t- but it's also not supported:##the12not\n\t\t- `nvm use 17.9.1`##notsuppeither\n\t\t- `nvm install 16.18.0`\n\t\t\t`nvm use 16.18.0`\n\t\t\t- so Node version 16.18.0 is installed and supported, now we want to upgrade the CLI to the latest version 15.0.1:##nodeokbut\n\t\t- installing latest version of Angular (as administrator)\n\t\t\t- `npm uninstall -g @angular/cli`\n\t\t\t- `npm install -g @angular/cli@latest`\n\t\t- I now have the latest Angular CLI and a support Node version:##nowthboth\n\t- create Angular site\n\t\t- to create an Angular site, type `ng new` followed by the name of the directory you want the site to have\n\t\t\t- `ng new et001-angular-site`\n\t\t\t- choose routing and Sass##choosesasskjkj\n\t\t- open the project in VSCode e.g.\n\t\t\t- `code et001-angular-site`\n\t\t- note that \n\t\t\t- node_modules have been created\n\t\t\t- Git repository is installed\n\t\t- look at **package.json**##thengstart\n\t\t- to start the site\n\t\t\t- `npm start`\n\t\t\t- ctrl-click the link##click4200\n\t\t- the site will look like this:##theangsiteok\n\t- if you need to run Angular on a port other than 4200, do this:\n\t\t- **package.json**\n\t\t\t--------------------------------\n\t\t\t\"start\": \"ng serve --port 4300\",\n\t\t\t--------------------------------\n\t- publish at Vercel\n\t\t- push to a repository on GitHub##publisbrjj\n\t\t- publish it as private or public (either way it will publish at Vercel)##makeitpubl\n\t\t- go to [Vercel](https://vercel.com)\n\t\t- Add New\n\t\t- Project\n\t\t- Continue with GitHub\n\t\t- Import##pubtheang\n\t\t- Deploy##anguonline\n- **==> 2. Examine, minimize and publish the site to Vercel<==**\n\t- examine site\n\t\t- \"you basically have an src directory and outside that a bunch of config files\"\n\t\t- like Vite-React, has **app** component but it is a directory of files\n\t\t\t- every Angular component has four aspects to it, each aspect has its own file:\n\t\t\t\t- app.component.**html** - view\n\t\t\t\t- app.component.**ts** - model or \"code behind\"\n\t\t\t\t- app.component.**scss** - styles\n\t\t\t\t- app.component.**spec.ts** - testing file\n\t\t- **app.component.html**\n\t\t\t- in-file styles\n\t\t\t\t- lines 10-303\n\t\t\t\t- change e.g. `.card`\n\t\t\t- toolbar\n\t\t\t\t- img and svg are embbeded text\n\t\t\t\t- twitter icon\n\t\t\t\t\t- change 251 to 2251\n\t\t\t- {{title}} change in .ts file\n\t\t\t\t- \"Info Site\"\n\t\t\t- delete all \n\t\t\t\t- <h2>{{title}}</h2>\n\t\t\t- create {{message}}\n\t\t- **app.component.html**\n\t\t\t--------------------------------------\n\t\t\t<h2>{{title}}</h2>\n\t\t\t<p>{{message}}</p>\t\t\t\n\t\t\t--------------------------------------\n\t\t- **app.component.scss**\n\t\t\t-----------------------------------\n\t\t\th2 {\n\t\t\t\tcolor: rgb(212, 181, 124);\n\t\t\t}\n\t\t\t-----------------------------------\n\t\t- **src/styles.scss**\n\t\t\t--------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #333;\n\t\t\t\tpadding: 0 1rem;\n\t\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\t\tfont-size: 1.4rem;\n\t\t\t\tcolor: #ccc;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t- site looks like this now:##anglikethis\n\t- push to GitHub and check **Vercel**, in 30 seconds is the same##anglikethis\n- **==> 3. Create dynamic component with props <==**\t\n\t- `ng generate component info-box`\n\t- note that it creates a directory and four files\n\t- in the main component, add the new component\n\t\t- **app.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<app-info-box></app-info-box>\t\t\n\t\t\t-----------------------------------------\n\t\t- it will appear##theinfoboxappear\n\t- **info-box.component.html**\n\t\t----------------------------\n\t\t<div class=\"card\">\n\t\t\t<div class=\"title\">Info</div>\n\t\t\t<div class=\"body\">This is the info</div>\n\t\t</div>\t\t\n\t\t----------------------------\n\t- **info-box.component.scss**\n\t\t------------------------------------\n\t\t.card {\n\t\t\tbackground-color: #444;\n\t\t\tpadding: 1rem;\n\t\t\tborder: 1px solid yellow;\n\t\t\tborder-radius: .4rem;\n\t\t\twidth: 20rem;\n\t\t\tmargin-bottom: 1rem;\n\n\t\t\t.title {\n\t\t\t\tfont-size: 2rem;\n\t\t\t}\n\t\t\t.body {\n\t\t\t\tfont-style: italic;\n\t\t\t\tcolor: #999;\n\t\t\t}\n\t\t}\n\t\t------------------------------------\n\t- you should now see the styled component##withinfonowok\n\t- **add component props**\t\n\t\t- **info-box.component.ts**\n\t\t\t----------------------------------------\n\t\t\timport { Component, Input } from '@angular/core';\n\n\t\t\texport class InfoBoxComponent {\n\t\t\t  @Input() title = 'Info';\n\t\t\t  @Input() body = '(watch this space...)';\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **info-box.component.html**\n\t\t\t-------------------------------------------\n\t\t\t<div class=\"card\">\n\t\t\t\t<div class=\"title\">{{title}}</div>\n\t\t\t\t<div class=\"body\">{{body}}</div>\n\t\t\t</div>\n\t\t\t-------------------------------------------\n\t\t- **app.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" body=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" body=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\t\t\n\t\t\t-----------------------------------------\n\t- site looks like this:##sitewithcompon\n\t- push to GitHub and check at Vercel\n- **==> 4. Use directives and bindings to make site dynamic and interactive <==**\n\t- one realizes that Angular directives resemble **Vue.js** more than React\n\t- **ngStyle**\n\t\t- **app.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" status=\"danger\"\n\t\t\t\tbody=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" status=\"success\"\n\t\t\t\tbody=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\t\t\t\n\t\t\t------------------------------------------------\n\t\t- **info-box.component.ts**\n\t\t\t- note values of input variables aren't available in the constructor but only in **ngOnInit**\n\t\t\t\t--------------------------------------------\n\t\t\t\t@Input() status = '';\n\n\t\t\t\tcolor = '';\n\n\t\t\t\tngOnInit() {\n\t\t\t\t\tthis.color = this.status === 'danger' ? 'red' : 'green';\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t- **info-box.component.html**\n\t\t\t----------------------------------------\n\t\t\t<div class=\"card\" [ngStyle]=\"{'color': color, 'border': '1px solid ' + color}\">\t\t\t\n\t\t\t----------------------------------------\n\t\t- should look like this:##thsouldgrenwarn\n\t- **ngIf**\n\t\t- if status is \"danger\" we will include the text \"Please read:\"\n\t\t- **info-box.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<div *ngIf=\"status === 'danger'\" class=\"supertitle\">please read</div>\n\t\t\t-----------------------------------------\n\t\t- **info-box.component.scss**\n\t\t\t------------------------------------------------\n\t\t\t.supertitle {\n\t\t\t\tmargin-bottom: -.5rem;\n\t\t\t\tfont-variant: small-caps;\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------------\n\t\t- should look like this:##nowlookslislikethis\n\t- **ngSwitchCase**\n\t\t- report status at bottom of info-box\n\t\t- **app.component.html**\n\t\t\t-------------------------------------------\n\t\t\t<app-info-box title=\"Section 2\" status=\"unfinished\"\n\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **info-box.component.html**\n\t\t\t------------------------------------------\n\t\t\t<div [ngSwitch]=\"status\">\n\t\t\t\t<span *ngSwitchCase=\"'danger'\">This info-box warns a user.</span>\n\t\t\t\t<span *ngSwitchCase=\"'success'\">Success is displayed when no action is required.</span>\n\t\t\t\t<span *ngSwitchDefault>Unknown status code: {{status}}</span>\n\t\t\t</div>\n\t\t\t------------------------------------------\n\t\t- **info-box.component.scss**\n\t\t\t------------------------------------------\n\t\t\t.devInfo {\n\t\t\t\tcolor: black;\n\t\t\t\tfont-family: monospace;\n\t\t\t\tfont-size: .8rem;\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t\t- should look like this:##tehngswithwithtes\n\t- **(click)**\n\t\t- create a button to toggle the developer info\n\t\t- first make appearance of developer info based on a component class variable\n\t\t\t- **info-box.component.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tshowDevInfo = true;\n\t\t\t\t--------------------------------------------\n\t\t\t- **info-box.component.html**\n\t\t\t\t--------------------------------------------\n\t\t\t\t<div *ngIf=\"showDevInfo\">\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div [ngSwitch]=\"status\"\n\t\t\t\t\t\t class=\"devInfo\">\n\t\t\t\t\t\t<span *ngSwitchCase=\"'danger'\">This info-box warns a user.</span>\n\t\t\t\t\t\t<span *ngSwitchCase=\"'success'\">Success is displayed when no action is required.</span>\n\t\t\t\t\t\t<span *ngSwitchDefault>Unknown status code: {{status}}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t--------------------------------------------\n\t\t\t- changing **showDevInfo** to true and false will now toggle the text\n\t\t- now add the button\n\t\t- **info-box.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<div><button (click)=\"showDevInfo = !showDevInfo\">Toggle dev info</button></div>\n\t\t\t--------------------------------------------\n\t\t- the button should work like this:#gif#thebuttonvfordevinfo\n\t\t- you can also call a function e.g. if you need to execute more than one command\n\t\t\t- **info-box.component.html**\n\t\t\t\t--------------------------------------------\n\t\t\t\t<div><button (click)=\"handleDevInfoButtonClick()\">Toggle dev info</button></div>\n\t\t\t\t--------------------------------------------\n\t\t\t- **info-box.component.ts**\n\t\t\t\t---------------------------------\n\t\t\t\thandleDevInfoButtonClick = () => {\n\t\t\t\t\tthis.showDevInfo = !this.showDevInfo;\n\t\t\t\t\tconsole.log(`button for info-box \"${this.title}\" clicked`);\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------\n\t\t- which should work like this:#gif#thehandleclickworklik\n\t- **ngClass**\n\t\t- enable an info-box to be highlighted\n\t\t- **app.component.html**\n\t\t\t-------------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" status=\"danger\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" status=\"success\" highlight=\"true\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 2\" status=\"unfinished\" highlight=\"false\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **info-box.component.ts**\n\t\t\t------------------------------\n\t\t\tisHighlighted = false;\n\n\t\t\tthis.isHighlighted = this.highlight === 'true';\n\t\t\t------------------------------\n\t\t- **info-box.component.html**\n\t\t\t----------------------------------\n\t\t\t<div class=\"card\" [ngClass]=\"{'highlighted' : isHighlighted}\"\n\t\t\t\t [ngStyle]=\"{'color': color, 'border': '1px solid ' + color}\">\n\t\t\t----------------------------------\t\t\n\t\t- **info-box.component.scss**\n\t\t\t----------------------------------\n\t\t\t.highlighted {\n\t\t\t\tbox-shadow: 1px 1px 10px yellow;\n\t\t\t}\n\t\t\t----------------------------------\n\t\t- site should look like this:##onehighighsd\t\n- **==> 5. Create three pages, a navigation menu and routes <==**\n\t- create menu component\n\t\t- `ng generate component top-menu`\n\t\t- **top-menu.component.html**\n\t\t\t---------------------------------------------\n\t\t\t<nav class=\"navbar navbar-fixed-top navbar-dark bg-inverse\">\n\t\t\t\t<ul class=\"nav navbar-nav\"\n\t\t\t\t\trouterLinkActive=\"active\">\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t   routerLink=\"home\">Home</a></li>\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t   routerLink=\"info\">Info</a></li>\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t   routerLink=\"employees\">Employees</a></li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\n\t\t\t<router-outlet></router-outlet>\t\t\t\n\t\t\t---------------------------------------------\n\t\t- create **top-menu.config.ts**\n\t\t\t-------------------------------------\n\t\t\timport { Routes } from \"@angular/router\";\n\t\t\timport { EmployeesComponent } from \"../employees/employees.component\";\n\t\t\timport { HomeComponent } from \"../home/home.component\";\n\t\t\timport { InfoComponent } from \"../info/info.component\";\n\n\t\t\texport const routerConfig: Routes = [\t\t\t\n\t\t\t\t{\n\t\t\t\t\tpath: 'home',\n\t\t\t\t\tcomponent: HomeComponent\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: 'info',\n\t\t\t\t\tcomponent: InfoComponent\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: 'courses',\n\t\t\t\t\tcomponent: EmployeesComponent\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: '',\n\t\t\t\t\tredirectTo: '/home',\n\t\t\t\t\tpathMatch: 'full'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: '**',\n\t\t\t\t\tredirectTo: '/home',\n\t\t\t\t\tpathMatch: 'full'\n\t\t\t\t}\n\t\t\t];\t\t\t\n\t\t\t-------------------------------------\n\t- create home page\n\t\t- `ng generate component home`\n\t\t- **home.component.html**\n\t\t\t----------------------------------------\n\t\t\t<p>Welcome to this site.</p>\n\t\t\t----------------------------------------\n\t- create info page\n\t\t- `ng generate component info`\n\t\t- move from home page to **info.component.html**\n\t\t\t----------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" status=\"danger\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" status=\"success\" highlight=\"true\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 2\" status=\"unfinished\" highlight=\"false\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\n\t\t\t----------------------------------------\n\t- create employee page\n\t\t- `ng generate component employees`\n\t\t- **employees.component.html**\n\t\t\t----------------------------------------\n\t\t\t<p>This is the employees page.</p>\n\t\t\t----------------------------------------\n\t- make menu clickable\n\t\t- **app-routing.module.ts**\n\t\t\t--------------------------------------\n\t\t\tconst routes: Routes = [\n\t\t\t\t{ path: '', redirectTo: 'home', pathMatch: 'full' },\t\t\t\n\t\t\t\t{ path: 'home', component: HomeComponent },\n\t\t\t\t{ path: 'info', component: InfoComponent },\n\t\t\t\t{ path: 'employees', component: EmployeesComponent }\n\t\t\t];\t\t\t\n\t\t\t--------------------------------------\n\t- make menu item of selected page highlighted\n\t\t- **top-menumenu.component.html**\n\t\t\t- add `routerLinkActive=\"active-link\"` to each `<a>` tag\n\t\t- **top-menumenu.component.scss**\n\t\t\t-----------------------------------------\n\t\t\ta.active-link {\n\t\t\t\tcolor: rgb(216, 165, 56);\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------\n\t- menu should now work like this:#gif#themenuworklikethisnow\n- **==> 6. More bindings <==**\n\t- **disabled**\n\t\t- **info-box.component.ts**\n\t\t\t------------------------------------\n\t\t\tbuttonIsDisabled = true;\n\t\t\t------------------------------------\n\t\t- **info-box-component.html**\n\t\t\t--------------------------------------------------\n\t\t\t[disabled]=\"buttonIsDisabled\"\n\t\t\t--------------------------------------------------\n\t\t- notice that you can make buttons disabled and now from the class file\n\t\t- **info-box-component.html**\n\t\t\t-----------------------------------------------\n\t\t\t<input\n\t\t\t  type=\"checkbox\"\n\t\t\t  [checked]=\"!buttonIsDisabled\"\n\t\t\t  (change)=\"buttonIsDisabled = !buttonIsDisabled\"/>\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- this will allow the user to click the checkbox to disable/enable the button#gif#disablengablebugottton\n- **==> 7. Pipes <==**\n\t- pipes enable you to easily tranform data in the template\n\t- make the titles uppercase\n\t\t- **info-box.component.html**\n\t\t\t-----------------------------------------------\n\t\t\t<div class=\"title\">{{title | uppercase}}</div>\n\t\t\t-----------------------------------------------\n\t- display date in various formats on home page\n\t\t- **home.component.ts**\n\t\t\t------------------------------------------------\n\t\t\tnow = '2023-02-23 13:21:01';\n\t\t\t------------------------------------------------\n\t\t- **home.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<p>Current time is {{now}}.</p>\n\t\t\t<p>Today is {{now | date}}.</p>\n\t\t\t<p>Today is {{now | date | uppercase}}.</p>\n\t\t\t<p>Today is {{now | date : 'longDate' | uppercase}}.</p>\n\t\t\t------------------------------------------------\n\t- custom date formats\n\t\t- **home.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<p>The file name is <code>{{now | date: 'l\\og-yyyy-MM-dd-HH-mm-ss.txt'}}</code>.</p>\n\t\t\t------------------------------------------------\n\t\t- **home.component.scss**\n\t\t\t------------------------------------------------\n\t\t\tcode {\n\t\t\t\tbackground-color: #222;\n\t\t\t\tcolor: brown;\n\t\t\t\tpadding: .2rem;\n\t\t\t\tfont-size: 1.1rem;\n\t\t\t}\n\t\t\t------------------------------------------------\t\t\t\n\t- display German dates\n\t\t- **home.component.ts**\n\t\t\t------------------------------------------------\n\t\t\timport { Component } from '@angular/core';\n\t\t\timport { registerLocaleData } from '@angular/common';\n\t\t\timport localeDe from '@angular/common/locales/de';\n\n\t\t\tregisterLocaleData(localeDe);\n\t\t\t------------------------------------------------\n\t\t- **home.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<p>Heute ist der {{now | date : 'longDate' : '+02:00' : 'de'}}.</p>\n\t\t\t------------------------------------------------\n\t- custom pipes\n\t\t- on the info page, we want to create a pipe to convert the titles from **Section 1** to **Section One**, etc.\n\t\t- this pipe will be called **numtoname**\n\t\t- create **src\\shared\\numtoname.pipe.ts**\n\t\t\t----------------------------------------\n\t\t\timport { Pipe, PipeTransform } from '@angular/core';\n\n\t\t\t@Pipe({ name: 'numtoname' })\n\n\t\t\texport class NumtonamePipe implements PipeTransform {\n\t\t\t\ttransform(text: string): string {\n\t\t\t\t\tlet newText = text;\n\t\t\t\t\tnewText = newText.replace('1', 'one');\n\t\t\t\t\tnewText = newText.replace('2', 'two');\n\t\t\t\t\tnewText = newText.replace('3', 'three');\n\t\t\t\t\treturn newText;\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- make the new pipe available throughout your application\n\t\t\t- **app.module.ts**\n\t\t\t\t-------------------------------------------------\n\t\t\t\timport { NumtonamePipe } from '../shared/numtoname.pipe';\n\n\t\t\t\tNumtonamePipe\n\t\t\t\t-------------------------------------------------\n\t\t- use the pipe in **info-box.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<div class=\"title\">{{title | numtoname | uppercase}}</div>\n\t\t\t-----------------------------------------\n\t\t- now add another info box that has a 3 in the title\n\t\t\t- **info.component.html**\n\t\t\t\t------------------------------------------\n\t\t\t\t<app-info-box title=\"Section 3\" status=\"unfinished\" highlight=\"false\"\n\t\t\t\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\n\t\t\t\t------------------------------------------\n\t\t- the info page will look like this now:##likethiswiththenumum\n- **==> 6. Fetch data from external API and display on page <==**\n\t- on the Employees page, we want to display employee data that we fetch from an external API\n\t- for the first step, let's display data that comes from a mock JavaScript object\n\t\t- create interface for employees\n\t\t\t**src\\shared\\interfaces.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\texport interface IEmployee {\n\t\t\t\t\tfirstName: string;\n\t\t\t\t\tlastName: string;\n\t\t\t\t\tnotes: string;\n\t\t\t\t}\n\t\t\t\t---------------------------------------\n\t\t- load employees in Employees page constructor\n\t\t\t- **employees.component.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport { IEmployee } from 'src/shared/interfaces';\n\n\t\t\t\temployees: IEmployee[] = [];\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tthis.employees = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstName: \"Frank\",\n\t\t\t\t\t\t\tlastName: \"Holander\",\n\t\t\t\t\t\t\tnotes: \"These are Frank's notes.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstName: \"Selma\",\n\t\t\t\t\t\t\tlastName: \"Schmidt\",\n\t\t\t\t\t\t\tnotes: \"These are Selma's notes.\"\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t---------------------------------------------\n\t\t- display the employees in the template\n\t\t\t- **employees.component.html**\n\t\t\t\t----------------------------------------------\n\t\t\t\t<p>This is the employees page.</p>\n\t\t\t\t<div *ngFor=\"let emp of employees\">\n\t\t\t\t\t<div class=\"employee\">\n\t\t\t\t\t\t<div class=\"fullName\">{{emp.firstName}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t----------------------------------------------\n\t\t\t- notice you don't have intellisense on your TypeScript types##noticenowintelj\n\t\t\t- install the **Angular Language Server** extension from **Angular**##installbyang\n\t\t\t- you now have intellisense on TypeScrip types in your templates##nowthetempksdfin\n\t\t- complete the template with full info\n\t\t\t- **employees.component.html**\n\t\t\t\t----------------------------------------------\n\t\t\t\t<p>There are {{employees.length}} employees:</p>\n\t\t\t\t<div *ngFor=\"let emp of employees\">\n\t\t\t\t\t<div class=\"employee\">\n\t\t\t\t\t\t<div class=\"fullName\">{{emp.firstName}} {{emp.lastName}}</div>\n\t\t\t\t\t\t<div class=\"notes\">{{emp.notes}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t----------------------------------------------\n\t\t\t- **employees.component.scss**\n\t\t\t\t---------------------------------------\n\t\t\t\t.employee {\n\t\t\t\t\tbackground-color: #2a2a2a;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\twidth: 38rem;\n\t\t\t\t\tborder-radius: .3rem;\n\n\t\t\t\t\t.fullName {\n\t\t\t\t\t\tcolor: orange;\n\t\t\t\t\t}\n\n\t\t\t\t\t.notes {\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t- Employees page with **mock data** will now look like this:##nowiwthmockok\n\t- now let's load the employees data from the external API\n\t\t- `npm i axios`\n\t\t- **employees.component.ts**\n\t\t\t-------------------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\t(async () => {\n\t\t\t\tconst rawEmployees = (await axios.get('https://edwardtanguay.vercel.app/share/employees.json')).data;\n\n\t\t\t\trawEmployees.forEach((rawEmployee: any) => {\n\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\tfirstName: rawEmployee.firstName,\n\t\t\t\t\t\tlastName: rawEmployee.lastName,\n\t\t\t\t\t\tnotes: rawEmployee.notes\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t})();\t\t\t\n\t\t\t-------------------------------------------\n\t\t- page now looks like this:##themppagewithoall\n- **==> 7. Use ngModel directive to create a search box <==**\n\t- **employees.component.ts**\n\t\t--------------------------------------------\n\t\tsearchText: string = '';\n\t\t--------------------------------------------\n\t- **employees.component.html**\n\t\t--------------------------------------------\n\t\t<input type=\"text\" [(ngModel)]=\"searchText\"/>\n\t\t--------------------------------------------\n\t- register to use forms so that we get the bi-directional binding (as with React's change-state-variable-with-e-target-value solution)\n\t\t- **app.module.ts**\n\t\t\t--------------------------------------------\n\t\t\timport { FormsModule } from '@angular/forms';\n\n\t\t\tFormsModule\n\t\t\t--------------------------------------------\n\t- **employees.component.scss**\n\t\t--------------------------------------------\n\t\tp {\n\t\t\tmargin-bottom: 0;\n\t\t}\n\n\t\tinput {\n\t\t\tmargin-top: 1rem;\n\t\t\tmargin-bottom: 1rem;\n\t\t}\n\t\t--------------------------------------------\n\t- when searching, replace the info line informing the user of the text it is searching\n\t\t- **employees.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<p *ngIf=\"searchText === ''\">There are {{employees.length}} employees:</p>\n\t\t\t<p *ngIf=\"searchText !== ''\">Searching for \"{{searchText}}\"...</p>\n\t\t\t--------------------------------------------\n\t- now only display the employees which contain the search text\n\t\t- **employees.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<div class=\"employee\" *ngIf=\"employeeHasSearchText(emp)\">\n\t\t\t--------------------------------------------\n\t\t- **employees.component.ts**\n\t\t\t--------------------------------------------\n\t\t\temployeeHasSearchText(emp: IEmployee): boolean {\n\t\t\t\tconst bulkText = emp.firstName + '|' + emp.lastName + '|' + emp.notes;\n\t\t\t\treturn bulkText.toLowerCase().includes(this.searchText.toLowerCase());\n\t\t\t}\n\t\t\t--------------------------------------------\n\t- make the input box auto-focused when page is shown by creating a custom directive called **autofocus**\n\t\t- **share/autofocus.directive.ts**\n\t\t\t--------------------------------------------\n\t\t\timport { Directive, ElementRef } from '@angular/core';\n\n\t\t\t@Directive({\n\t\t\t  selector: '[autofocus]'\n\t\t\t})\n\t\t\texport class AutofocusDirective {\n\t\t\t  constructor(private host: ElementRef) {}\n\n\t\t\t  ngAfterViewInit() {\n\t\t\t\tthis.host.nativeElement.focus();\n\t\t\t  }\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- **employees.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<input type=\"text\" [(ngModel)]=\"searchText\" autofocus/>\n\t\t\t--------------------------------------------\t\t\n\t\t- two bugs\n\t\t\t- this autofocus works only on page load, but not when you visit the page via the navigation bar\n\t\t\t\t- that would have to be accomplished by some kind of event handling\n\t\t\t- this autofocus apparently doesn't work at Vercel\n\t\t\t\t- this would have to be debugged\n\t- the employee page should now work like this:#gif#employeepageworkthisway\n- **==> 8. Display local images from the site in image tags <==**\n\t- we want to display a simple image from an img tag\n\t- in Vite and create-react-app **React** sites, one has to save the images in the /public directory, e.g. under **/public/images**\n\t- in **Angular** apps, the **/src/assets** directory is used, e.g. save images under **/src/assets/images**\n\t- **home.component.html**\n\t\t---------------------------------------\n\t\t<img src=\"assets/images/info.jpg\"/>\n\t\t---------------------------------------\n\t- save the image here: **/src/assets/images/info.jps**\n\t- your home page will look like this:##thehomepagewithpicutre\n\t- note that images displayed in this way will also work when published at **Vercel**\n- **=== ADDENDUM ==========================**\n\t- **options with ngFor**\n\t\t- `ng-container` is similar to a fragment in React/JSX\n\t\t- you can get the index as with .map() in React/JSX\n\t\t- with ngFor you also have `first`, `last`, `even`, `odd`\n\t\t- **employees.component.html**\n\t\t\t---------------------------------------\n\t\t\t<ng-container *ngFor=\"let emp of employees; index as i; first as isFirst; last as isLast; odd as isOdd; even as isEven\">\n\t\t\t\t<div class=\"employee\" *ngIf=\"employeeHasSearchText(emp)\" [ngStyle]=\"{'background-color': isOdd ? '#555' : '#444'}\">\n\t\t\t\t\t<div class=\"fullName\">{{i + 1}}. {{emp.firstName}} {{emp.lastName}} \n\t\t\t\t\t\t<span *ngIf=\"isFirst\" style=\"color: lightgreen\"> - the first one</span>\n\t\t\t\t\t\t<span *ngIf=\"isLast\" style=\"color: red\"> - the last one</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"notes\">{{emp.notes}}</div>\n\t\t\t\t</div>\n\t\t\t</ng-container>\n\t\t\t---------------------------------------\n\t- **create a service**\n\t\t- we will create an employee service which is responsible for loading and handling data of employees\n\t\t\t- to demonstrate its advantages to an Angular application, we will import and use it from two components the site header and the employee page\n\t\t\t- the employee component will allow the user to select employees which are then shown in the page header component\n\t\t- `ng generate service employee`\n\t\t- creates two new files\n\t\t- **app.module.ts**\n\t\t\t------------------------------\n\t\t\timport { EmployeeService } from './employee.service';\n\n\t\t\tproviders: [\n\t\t\t\tEmployeeService\n\t\t\t],\t\t\t\n\t\t\t------------------------------\n\t\t- move the loading of employees from **employees.component.ts** to the employee service we just created\n\t\t\t- also add other functionality we need such as getSelectedEmployeesList() so we can display who has been selected in the header\n\t\t\t- **employee.service.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\timport { IEmployee } from 'src/shared/interfaces';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\texport class EmployeeService {\n\n\t\t\t\t\temployees: IEmployee[] = [];\n\n\t\t\t\t\tgetEmployees() {\n\t\t\t\t\t\treturn this.employees;\n\t\t\t\t\t}\n\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tconst rawEmployees = (await axios.get('https://edwardtanguay.vercel.app/share/employees.json')).data;\n\n\t\t\t\t\t\t\trawEmployees.forEach((rawEmployee: any) => {\n\t\t\t\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\t\t\t\tfirstName: rawEmployee.firstName,\n\t\t\t\t\t\t\t\t\tlastName: rawEmployee.lastName,\n\t\t\t\t\t\t\t\t\tnotes: rawEmployee.notes,\n\t\t\t\t\t\t\t\t\tselected: false\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})();\n\t\t\t\t\t}\n\n\t\t\t\t\tgetSelectedEmployees() {\n\t\t\t\t\t\treturn this.employees.filter(m => m.selected);\n\t\t\t\t\t}\n\n\t\t\t\t\tgetSelectedEmployeesList() {\n\t\t\t\t\t\tconst selectedEmployees = this.employees.filter(m => m.selected);\n\t\t\t\t\t\tlet prefix = '';\n\t\t\t\t\t\tif (selectedEmployees.length === 0) {\n\t\t\t\t\t\t\tprefix = '0 selected employees';\n\t\t\t\t\t\t} else if (selectedEmployees.length === 1) {\n\t\t\t\t\t\t\tprefix = '1 selected employee: ';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprefix = `${selectedEmployees.length} selected employees: `;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn `${prefix}${selectedEmployees.map(m => m.lastName).join(', ')}`;\n\t\t\t\t\t}\n\n\t\t\t\t\temployeeHasSearchText(emp: IEmployee, searchText: string): boolean {\n\t\t\t\t\t\tconst bulkText = emp.firstName + '|' + emp.lastName + '|' + emp.notes;\n\t\t\t\t\t\treturn bulkText.toLowerCase().includes(searchText.toLowerCase());\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t- note we also updated the employee interface\n\t\t\t- **interfaces.ts**\n\t\t\t\t-------------------------------\n\t\t\t\texport interface IEmployee {\n\t\t\t\t\tfirstName: string;\n\t\t\t\t\tlastName: string;\n\t\t\t\t\tnotes: string;\n\t\t\t\t\tselected: boolean;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-------------------------------\n\t\t- change the employee component template so that it \n\t\t\t- uses the employee service\n\t\t\t- allows the user to select employees\n\t\t\t- **employees.component.html**\n\t\t\t\t---------------------------------------------\n\t\t\t\t<p *ngIf=\"searchText === ''\">There are {{employeeService.getEmployees().length}} employees:</p>\n\t\t\t\t<p *ngIf=\"searchText !== ''\">Searching for \"{{searchText}}\"...</p>\n\t\t\t\t<input type=\"text\"\n\t\t\t\t\t   [(ngModel)]=\"searchText\"\n\t\t\t\t\t   autofocus />\n\t\t\t\t<ng-container\n\t\t\t\t\t\t\t  *ngFor=\"let emp of employeeService.getEmployees(); index as i; first as isFirst; last as isLast; odd as isOdd; even as isEven\">\n\t\t\t\t\t<div class=\"employee\"\n\t\t\t\t\t\t *ngIf=\"employeeService.employeeHasSearchText(emp, searchText)\"\n\t\t\t\t\t\t [ngStyle]=\"{'background-color': isOdd ? '#555' : '#444'}\">\n\t\t\t\t\t\t<div class=\"fullName\">\n\t\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t\t   [checked]=\"emp.selected\"\n\t\t\t\t\t\t\t\t   (change)=\"emp.selected = !emp.selected\" />\n\t\t\t\t\t\t\t{{i + 1}}. {{emp.firstName}} {{emp.lastName}}\n\t\t\t\t\t\t\t<span *ngIf=\"isFirst\"\n\t\t\t\t\t\t\t\t  style=\"color: lightgreen\"> - the first one</span>\n\t\t\t\t\t\t\t<span *ngIf=\"isLast\"\n\t\t\t\t\t\t\t\t  style=\"color: red\"> - the last one</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"notes\">{{emp.notes}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-container>\t\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t- change the site header so that it shows which employees are selected\n\t\t\t- import the employee service and **dependency-inject** it into the constructor\n\t\t\t- **top-menu.component.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\timport { EmployeeService } from '../employee.service';\n\n\t\t\t\tconstructor(public employeeService: EmployeeService) {\n\t\t\t\t}\n\t\t\t\t-----------------------------------------\n\t\t\t- **top-menu.component.html**\n\t\t\t\t--------------------------------------\n\t\t\t\t<div class=\"employeeInfo\">{{employeeService.getSelectedEmployeesList()}}</div>\n\t\t\t\t--------------------------------------\n\t\t\t- **top-menu.component.scss**\n\t\t\t\t--------------------------------------\n\t\t\t\t.employeeInfo {\n\t\t\t\t\ttext-align: right;\n\t\t\t\t\tmargin-top: -3rem;\n\t\t\t\t}\n\t\t\t\t--------------------------------------\n\t\t- the site will now work like this:#gif#withtheempleoyservicein","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-21 19:36:30","systemWhoCreated":"systemUnknown"},{"id":691,"category":"React","title":"Why you should stop using create-react-app","body":"- create-react-app is **old** and **extremely slow**\n- use **Vite** instead, it's about four times faster\n\t- [HOWTO: Create a minimal site with Vite](https://edwardtanguay.vercel.app/howtos?id=618)\n- Videos\n\t- Kyle: [Stop Using Create React App](https://www.youtube.com/watch?v=kvkAoCbTM3Q)##slow002\n\t- Ian Lenehan: [Vite vs Create React App / Webpack, Vite and ESBuild explained.](https://www.youtube.com/watch?v=-KEuTPIpLbE)##slow004\n\t- Theo: [Don't Use Create React App in 2023](https://www.youtube.com/watch?v=o9TJWEPc0Lk)##slow003\n\t- Fireship: [7 better ways to create a React app without create-react-app](https://www.youtube.com/results?search_query=create-react-app)##slow008\n\t- Fireship: [Vite in 100 Seconds](https://www.youtube.com/watch?v=KCrXgy8qtjM)##slowvite\n\t- CodeStackr: [Vite 2.0 Crash Course](https://www.youtube.com/watch?v=LQQ3CR2JTX8)##slow007333\n\t- 2023-03-17 Theo: **[Create-react-app is no longer recommended by the React team](https://www.youtube.com/watch?v=M4CLvtCS2YU)** *\"I'll be closing this pull request now. So, thank you React team, it's finally over. This is my final video about create-react-app. I am so excited that I will never have to talk about this again.\"*##creaetreareracover","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-24 00:32:40","systemWhoCreated":"systemUnknown"},{"id":692,"category":"command line interface","title":"How to create an interactive CLI tool","body":"- I review three tools for creating CLI tools\n\t- **1. [Commander.js](https://www.npmjs.com/package/commander)**\n\t\t- I found this tool the least useful because few users want to enter more than e.g. one or two arguments and options in a CLI command and so reading arguments from the command line can be done in most cases with the native node variable **argv** (e.g. argv [0], argv[1]) and then process them themselves.\n\t- **2. [chalk](https://www.npmjs.com/package/chalk)**\n\t\t- Chalk is useful for increasing the readability of text on the command line with colors and it's really easy to use.\n\t\t- I found that **hex** and **bgHex** colors don't work in some terminals such as VSCode terminals:##thenewcolorforchaclk\n\t- **3. [Inquirer](https://www.npmjs.com/package/inquirer)**\n\t\t- Inquirer is indeed a useful tool. It seems to be the tool that Vite uses to set up sites and gives you that same control of asking the user for numerous data points in one process at the command line. \n\t\t- I also created an example where I **combined argv and Inquirer** to allow the user to enter the project name as a command line argument, and then using **chalk** I rendered that info as a preselected answer to make its color match Inquirer and look as if it comes from Inquirer.\n- code is here:\n\t- https://github.com/edwardtanguay/ettestcmd\n- the main file you want to look at is **inquirer.js** to see an example of using all the functionality of Inquirer\n- also look at **inquirerWithPreselect.js** to see how to enable the user to type the answer to the first question on the command line as an argument\n- I run inquirer as an npm script:\n\t------------------------------------\n\t\"scripts\": {\n\t\t\"install\": \"node inquirer.js\",\n\t\t\"install2\": \"node inquirerWithPreselect.js\"\n\t},\t\n\t------------------------------------\n- this is an example of inquirer.js#gif#inquirerdemo","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-25 18:54:01","systemWhoCreated":"systemUnknown"},{"id":693,"category":"Hetzner","title":"How to set up a React site as the main domain site on a Debian machine at Hetzner with Nginx/pm2","body":"- I'm replacing a static HTML site at my home domain with a React site\n- therefore I will first record the settings of the static site and then remove it\n- **static site**\n\t- **/etc/nginx/conf.d/tanguay.eu.conf**\n\t\t--------------------------------------\n\t\tserver {\n\t\t\t\tserver_name tanguay.eu;\n\t\t\t\troot /home/edward/projects/mainsite;\n\t\t\t\tindex index.html;\n\t\t\t\tlocation / {\n\t\t\t\t\t\ttry_files $uri $uri/ =404;\n\t\t\t\t}\n\n\n\t\t\tlisten 443 ssl; # managed by Certbot\n\t\t\tssl_certificate /etc/letsencrypt/live/tanguay.eu/fullchain.pem; # managed by Certbot\n\t\t\tssl_certificate_key /etc/letsencrypt/live/tanguay.eu/privkey.pem; # managed by Certbot\n\t\t\tinclude /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n\t\t\tssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n\t\t}\n\t\tserver {\n\t\t\tlisten 80 default_server;\n\t\t\tserver_name tanguay.eu;\n\t\t\treturn 301 https://tanguay.eu/$request_uri;\n\t\t}\t\t\n\t\t--------------------------------------\n- create simple, local react site\n\t- creating the site from this starter\n\t\t- https://starters.tanguay.eu/list/blankViteDarkMenuUsecontext\n\t\t- set up here: **C:\\ggg\\tanguayeu\\mainsitereact**\n\t\t- made small change: tanguay.eu\n\t\t- site works locally:##theinfositeok\n\t- pushing site to GitHub\n\t\t- https://github.com/edwardtanguay/mainsitereact\n\t- set up npm scripts for deployment\n\t\t-------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"vite\",\n\t\t\t\"build\": \"tsc --build --clean && vite build\",\n\t\t\t\"start\": \"vite serve --host --port 3555\",\n\t\t\t\"setup\": \"npm i && npm run build && pm2 start --name tanguayeu-mainsitereact npm -- start --update-env --time && pm2 save\",\n\t\t\t\"deploy\": \"git pull --no-rebase && npm i && npm run build && pm2 restart tanguayeu-mainsitereact --update-env --time && pm2 save\",\n\t\t\t\"cp\": \"node cli/cp.mjs\"\n\t\t},\t\t\n\t\t-------------------------------------\n- clone the directory at Hetzner\n\t- logged into Hetzner\n\t- changed directory to **~/projects**\n\t- `git clone git@github.com:edwardtanguay/mainsitereact.git`\n- test site without domain name\n\t- `cd mainsitereact`\n\t- `npm i`\n\t\t- if this process hangs on your slow 2GB machine, reboot the machine and try again\n\t\t- after reboot, it took about 50 seconds to install the node packages but then finally completed##tookabout23\n\t- `npm start`##thenpmstartok\n\t- opened port 3555 in my fire wall\n\t- it works at address **http://tanguay.eu:3555**\n- now connect it to your domain, in my case **tanguay.eu**\n\t- stop Node serving your site with CTRL-C\n\t- `cd /etc/nginx/conf.d`\n\t- test your site in the browser first: https://tanguay.eu\n\t- rename the current conf file for your main domain, e.g.\n\t\t- `sudo mv tanguay.eu.conf tanguay.eu.conf-SAVE`\n\t- your site should still work in your browser\n\t- now restart Nginx\n\t\t- `sudo systemctl restart nginx`\n\t- your site will temporarily no longer work in the browser since there is no conf file to match your domain:##eusitenowork\n- set up a conf file for your new React site\n\t- create **/etc/nginx/conf.d/mainsitereact.conf**\n\t\t-------------------------------------\n\t\tserver {\n\t\t\t\tserver_name tanguay.eu;\n\t\t\t\tlocation / {\n\t\t\t\t\t\tproxy_pass http://tanguay.eu:3555;\n\t\t\t   }\n\t\t}\t\t\t\n\t\t-------------------------------------\n\t- create the https certificate for this site with certbot\n\t\t- `sudo certbot --nginx`\n\t\t- type the number that corresponds to your site, e.g. here **1** for **tanguay.eu**\n\t\t- renew it if it asks##therenewanddo\n\t- restart Nginx\n\t\t- `sudo systemctl restart nginx`\n\t- your site will still not work, but the reason now is that your React site is not being served at the designated port##notwokrijdifj\n- set up your React site with pm2\n\t- go back to your site's directory\n\t\t- `cd ~/projects/mainsitereact`\n\t- look at the npm scripts\n\t\t- `cat package.json`\n\t- you need to run the **setup** and then the **deploy** script\n\t\t- note **setup** will install your node_modules again, so you might have to reboot again if you are on an inexpensive CX11 server\n\t\t- `npm run setup`\n\t\t\t- mine completed in 2 seconds\n- check your browser, your test site should work:##siteeuworks\n- make changes and deploy to server \n\t- make changes to your test site locally so that it is the site you want to host\n\t- push to GitHub\n\t- go back to your terminal at Hetzner, make sure you are in your site's directory\n\t- `npm run deploy`##thedpleoyisin\n- check your site\n\t- it should now have the latest changes#gif#thedemotanguayeuworks","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-02-26 23:09:58","systemWhoCreated":"systemUnknown"},{"id":694,"category":"Vue.js","title":"Set up Vue 3 site with TypeScript, components, interaction, script setup syntax, API data fetch, and publish to Vercel","body":"- goals of this howto is to **help React developers**\n\t- 1. **get a broad understanding of the Vue ecosystem** \n\t\t- which tools are used\n\t\t- which versions are used\n\t\t- what various concepts mean\n\t\t- understand the various ways Vue can be used\n\t\t- gain enough knowledge to identify which Vue tutorials, articles and documentation are out-of-date and which are relevant for learning Vue moving forward\n\t- 2. **get up-to-speed using the Vue framework** in order to e.g.\n\t\t- acquire the skills to create a customized Vue site, publish it at Vercel\n\t\t- which you link from your portfolio site \n\t\t- as proof you have rudimentary Vue.js skills\n\t\t- and to give you the confidence to take on Vue.js development projects\n- to do this, **we will create the following site:**\n\t- code is here:\n\t\t- https://github.com/edwardtanguay/vue-proj-003\n\t- router with three pages\n\t- user interaction\n\t- state variables (ref)\n\t- basic styling (scoped and non-scoped plain CSS)\n\t- TypeScript interfaces\n\t- API fetching#gif#demositeforvue003\n- but first let's \n\t- (1) get acquainted with the **background and fundamental concepts of Vue**\n\t- (2) discuss the **optimal tool and version choices** for getting into **Vue development in March 2023**\n\t- background\n\t\t- currently the three major JavaScript frameworks are\n\t\t\t- **React** - maintained by **Facebook**\n\t\t\t- **Angular** - maintained by **Google**\n\t\t\t- **Vue.js** - maintained by **Evan You** and the open-source community\n\t\t\t\t- Evan worked for Google from 2012-2014\n\t\t\t\t\t- he worked on AngularJS\n\t\t\t\t\t- after leaving, he created Vue.js, *\"a framework that contained what I liked about Angular but really lightweight\"*\n\t\t\t\t- in 2020, Evan also created **Vite**\n\t\t- Vue has gone through numerous changes in the last three years \n\t\t\t- version change (Vue 2 to **Vue 3**)\n\t\t\t- build-tool change (Vue CLI to **Vite**)\n\t\t\t- changes in state-management tooling (Vuex to **Pinia**)\n\t\t- therefore use the following guide to make sure you\n\t\t\t- get started with the most up-to-date version and tooling\n\t\t\t- can identify up-to-date tutorials, articles and documentation\n\t- **==> 1.** Which **VERSION** should you use, **Vue 2** or **Vue 3**? ==> ANSWER ==>**Vue 3**\n\t\t- *Vue 2 support will end on December 31st, 2023*\n\t\t\t- https://v3-migration.vuejs.org\n\t\t- Vue 3 came out in November 2020\n\t\t\t- added support for TypeScript\n\t\t\t- smaller and faster\n\t\t\t- uses the new Composition API\n\t\t\t- uses the new script setup format\n\t- **==> 2.** Which **SFC LAYOUT** should you use, the **Options API** or the **Composition API**? ==> ANSWER ==> **Composition API + script setup**\n\t\t- SFC = Single File Component\n\t\t- **Vue 2** uses the **Options API**\n\t\t\t- the Options API is simpler \n\t\t\t\t- but therefore less structured \n\t\t\t\t- and so tends to become too complicated in larger applications\t\t\n\t\t\t- the Options API will be phased out as Vue 2 is no longer supported at the end of 2023\n\t\t\t- if you need to use Vue 2 for backward-compatibility reasons\n\t\t\t\t- you can upgrade to Vue 2.7 which has the option to use the Composition API\n\t\t- **Vue 3** uses the **Composition API**\n\t\t\t- a new way to write Vue components\n\t\t\t- easier to reuse code\n\t\t\t- easier to organize code logically\n\t\t\t- better separation of concerns\n\t\t\t- easier to test because of a more functional style of programming\n\t\t\t- better structured for larger, more complex applications\n\t\t- this shows the differences in syntaxes between the two approaches##optionscomp\n\t\t- note there is also a **script setup** syntax that one can use for the Composition API\n\t\t\t- more succinct\n\t\t\t- less boilerplate\n\t\t\t- declare props and events with TypeScript\n\t\t\t- better IDE type-inference\n\t\t\t- see [script-setup documentation](https://vuejs.org/api/sfc-script-setup.html)\n\t\t\t- or as explained here, *the idea of script setup is that you want to get rid of the unnecessary wrapper and the other old component options so you can write components simpler and focused*:\n\t\t\t\t- [The 101 guide to Script Setup in Vue 3](https://vuedose.tips/the-101-guide-to-script-setup-in-vue-3)##thsetupcode\t\n\t\t\t- VIDEO: [Vue 3 Script Setup](https://www.youtube.com/watch?v=9uSNKIXH_AI)\n\t- **==> 3.** Which **INSTALL METHOD** should you use to install Vue, **Vue CLI** or **Vite with create-vue**? ==> ANSWER ==> **Vite with create-vue**\n\t\t- **Vue CLI** is officially no longer recommended\n\t\t\t- even the Vue CLI website https://cli.vuejs.org now says:\n\t\t\t\t- *\"please use **create-vue** to scaffold Vite-based projects\"*\n\t\t\t- this is how you know a tutorial is installing Vue with the Vue CLI\n\t\t\t\t- the Vue CLI is installed globally\n\t\t\t\t\t- `npm install -g @vue/cli`\n\t\t\t\t- the Vue CLI is then used to create a site\n\t\t\t\t\t- `vue create site001`\t\n\t\t\t- **NOTE:** don't confuse the command **vue create** (old) with **create-vue** (new) \n\t\t\t- **Vue CLI** is to Vite as **create-react-app** is to React\n\t\t\t\t- both **Vue CLI** and **create-react-app** are slow, outdated and superseded by **Vite**\n\t\t\t\t- **Vue CLI** and **create-react-app** use **Webpack** which is written in **JavaScript** which makes them **slow**\n\t\t\t\t- **Vite** uses **esbuild** which is written in **Go** which makes it **fast**\n\t\t\t- but note that it is however possible to use the old **Vue CLI** to install **Vue 3**\n\t\t\t\t- so you may find Vue 3 tutorials that use Vue CLI##thevue3canuse\n\t\t\t- a Vue-CLI-created Vue site is started with `npm run serve`##thevuserve\n\t\t\t- a Vue-CLI-created Vue site will look like this:##nowvueoutdate\n\t\t\t- here is the code of a new Vue 3 site created with Vue CLI\n\t\t\t\t- https://github.com/edwardtanguay/vue-with-vue-cli-002\n\t\t\t- here is the same code after I created a new component (InfoSpace.vue)\n\t\t\t\t- https://github.com/edwardtanguay/vue-with-vue-cli-001 \n\t\t\t- note if you choose **Manually select features** you can make very fine-grained choices##ifmanulask\n\t\t\t- **Vue CLI** also has a **GUI option**\n\t\t\t\t- you type `vue ui` and get this, but it makes little sense to have a GUI to create websites:##thevueui\n\t\t- *** but the **modern, preferred, standard way** to create **Vue 3** websites is now to use **Vite** with **create-vue**\n\t\t\t- just as when you are building a React site, start Vite with `npm create vite` \n\t\t\t\t- (note that `npm init vite` is the same command, `create` is simply an alias for `init`)\n\t\t\t\t- choose: **Vue** and then **Customize with create-vue**##withwithcreatevuew\t\t\n\t\t\t\t- then you can choose the options you want initally in your application##choosealloptions\n\t\t\t\t- open editor, set up a Git repository, and run the three commands listed\n\t\t\t\t\t- `code <name-of-your-app>`\n\t\t\t\t\t- `git init -b main` - creates a local Git repository with a main branch\n\t\t\t\t\t- `npm i` - installs node_modules\n\t\t\t\t\t- `npm run format` - starts prettier watching the /src directory for changes\n\t\t\t\t\t- `npm run dev` - the standard command used in Vite React as well to start the app in development mode\n\t\t\t\t- when you click on the URL provided, your **Vite with create-vue site** will look like this:##vitevuestartpage\t\t\t\t\t\n\t\t\t\t- the initial code of the site looks like this\n\t\t\t\t\t- https://github.com/edwardtanguay/vue-with-vite-create-vue-all-options\n\t\t\t- you may also see some tutorials and videos use the **create-vue** installation **without Vite**, here are some variations of that command:\n\t\t\t\t- `npm create vue` - latest **stable** version\n\t\t\t\t- `npm init vue`\n\t\t\t\t- `npm create vue@latest` - latest version, may not be stable\n\t\t\t\t- `npm init vue@latest`\n\t\t\t\t- `npm create vue@next` - latest pre-release version, upcoming changes, likely not stable, don't use in production\n\t\t\t\t- `npm init vue@next`\n\t\t\t\t- `npm init vue@3`\n\t\t\t\t- `npm create vue@3`\n\t\t\t\t\t- you can provide the version (2 or 3)\n\t\t\t\t- note that in npm syntax, `create` is merely an alias of `init`\n\t\t\t- it's important to note that **Vite with create-vue** and `npm create vue@latest` give you the **exact same install**##notethesamesproce\n\t\t\t- and note that the initial site looks exactly the same\n\t\t\t\t- it even gives the same message that you created a project with **Vite**:##sameaswithvite\n\t\t\t- so to create a modern Vue 3 website, you can either use:\n\t\t\t\t- `npm create vite`\n\t\t\t\t- `npm create vue`\n\t\t\t\t- both of these commands **use Vite**\n\t\t\t- **I recommend always using Vite** because:\n\t\t\t\t- Vite is becoming the standard tool to install JavaScript frameworks\n\t\t\t\t\t- **Vue**, **React**, **Svelte**\n\t\t\t\t\t- also **Nuxt** (the server-side version of Vue, much like Next.js is for React)\n\t\t\t\t- Vite is the most innovate and comprehensive install tool today\n\t\t\t\t\t- by using it frequently you stay up to day with new frameworks and technologies it can install, e.g.\n\t\t\t\t\t\t- server-side rendered JS/DOM, Vue, React, Svelte, Solid + Deno##ssrdeno\n\t\t\t\t- you can also use Vite to **install very simple JavaScript or TypeScript configurations of Vue 3**, e.g. \n\t\t\t\t\t- `npm create vite` then choose **Vue** then **JavaScript**\n\t\t\t\t\t\t- the start site looks and works similar to when you set up a React site\n\t\t\t\t\t\t- it has a `ref` variable in the HelloWorld component for the interactive counter button\n\t\t\t\t\t\t- otherwise it is similar but not the same as when you set up with **Vue, Customize with create-vue** and answer only **No**\n\t\t\t\t\t\t- both have a 3.2 version of Vue installed\n\t\t\t\t\t\t- you would use this if you know you don't want any other app features, or know how to install them manually\n\t\t\t\t\t\t- here is the initial code for this project\n\t\t\t\t\t\t\t- https://github.com/edwardtanguay/vue-with-vite-javascript\n\t\t\t\t\t\t- the initial site looks like this, basically the same functionality as when you create a React site with Vite##vuewithvitejavascript \n\t\t\t\t\t- `npm create vite` then choose **Vue** then **TypeScript**\n\t\t\t\t\t\t- this is the same site as above, but with TypeScript\n\t\t\t\t\t\t- here is the inital code, basically the same as above but with TypeScript files (`.ts`) instead of (`.js`)\n\t\t\t\t\t\t\t- https://github.com/edwardtanguay/vue-with-vite-typescript\n\t\t\t\t\t\t- the initial site looks the same, note that there are minor changes in the code and file names for TypeScript##thevuewithtyp\n\t\t\t\t\t- these two options are for extremely simple sites, e.g. without routing, etc. \n\t\t\t\t\t- **my advice:** unless you want to install the simplest site and will never need Routing, state management, Testing, or Prettier, etc., always choose **Vue, Customize with create-vue** and select what you intially want to have installed\n\t- **=>4.** Should you start learning **Vue (client-side)** or **Nuxt (server-side)** first? ==> ANSWER ==> **Vue (client-side)**\n\t\t- **Vue** is a client-side framework like **React**\n\t\t- **Nuxt** is a server-side framework like **Next.js**\n\t\t- as a React developer, you have enough new concepts and tools to learn when beginning with Vue\n\t\t\t- **Nuxt** is the same as Vue but adds even more tools and concepts\n\t\t\t- therefore my recommended learn path is to **first get familiar with Vue, its concepts and tools**\n\t\t- nevertheless, let's at least be familiar with the two main ways to get Nuxt installed\n\t\t- **Nuxt install option #1:** use **Vite** which gives the option to install Nuxt\n\t\t\t- `npm create vite` then choose **Vue** then **Nuxt**##thenuxtinstall\n\t\t\t- the code is extremely minimal\n\t\t\t\t- https://github.com/edwardtanguay/nuxt-with-vite\n\t\t\t\t- the readme states that it is a \"Nuxt 3 Minimal Starter\"\n\t\t\t\t- basically you only have one file which shows a starter screen with code from the .next directory**app.vue**##allisnuxut\n\t\t\t- the starter site looks like this##thenuxtsiteie\n\t\t- **Nuxt install option #2:** use **npx create-nuxt-app**\n\t\t\t- this is the official installation method recommended on the Nuxt website:\n\t\t\t\t- https://nuxtjs.org/docs/get-started/installation\n\t\t\t- `npx create-nuxt-app <project-name>`\n\t\t\t\t- note that you get many options as you install, similar to using **create-vue** for a Vue site##nuxtoptions\n\t\t\t\t- there are even more options than with **create-vue**##nuxtmany\n\t\t\t\t- the entire process looks like this when finished##nuxtinstallprocess\n\t\t\t- starting the Nuxt site with `npm run dev` I got this error##startingnuxterror\n\t\t\t\t- tried various solutions suggested but none worked\n\t\t\t\t- it seems to have something to do with Tailwind\n\t\t\t- reinstalled, this time didn't choose Tailwind (vuetify.js instead) and didn't select GitHub Actions##threnuxtinstl\n\t\t\t\t- the build seemed to work fine:##notailworked\n\t\t\t\t- but the site gets an error:##nuxtsitewithseconderror\n\t\t\t\t- this [post](https://stackoverflow.com/questions/64620120/nuxt-installation-error-rule-can-only-have-one-resource-source-provided-resou) suggested `\"webpack\": \"^4.46.0\"` which got past the above error but gave me this error##thenewnuxterror\n\t\t\t- trying an install on Nuxt 3 on Ubuntu to see if it is any different:##createnuxtlinux\n\t\t\t\t- even on Ubuntu it gets the same error (with Tailwind):##evenubuntjs\n\t\t\t- ok, back on Windows, resintalling with minimal feature selection##nuxtminimalaal\n\t\t\t\t- builds fine##buildsfinekjsd\n\t\t\t\t- but then crashes with same error##sameerror\n\t\t\t\t- but this got me further\n\t\t\t\t\t---------------------------------\n\t\t\t\t\tnpm un webpack\n\t\t\t\t\tnpm i -D webpack@^4.0.0\n\t\t\t\t\t---------------------------------\n\t\t\t\t- it begins to build##beginbuildkjdf\n\t\t\t\t- but then got a **PostCSS 8** error\n\t\t\t\t- executed the fix suggested in [this Stack Overflow post](https://stackoverflow.com/questions/64057023/error-postcss-plugin-autoprefixer-requires-postcss-8-update-postcss-or-downgra)\n\t\t\t\t\t- `npm un autoprefixer` - somehow the packages are not listed in **package.json* but you can find the versions in **package-lock.json**\n\t\t\t\t\t- `npm i autoprefixer` - now it shows in **package.json**\n\t\t\t\t\t- **package.json** change the version down to **9.0.0**##downto9\n\t\t\t\t\t- do a full reinstall of node_modules\n\t\t\t\t\t\t----------------------------------------\n\t\t\t\t\t\trm -rf node_modules\n\t\t\t\t\t\tnpm i\n\t\t\t\t\t\t-----------------------------------------\n\t\t\t\t- now `npm run dev` successfully builds in the terminal##clientserversj\n\t\t\t\t- and site looks like this:##theworkonnuxtwin\n\t\t\t\t- and here is the code of the **Nuxt application** created with **create-nuxt-app**\n\t\t\t\t\t- https://github.com/edwardtanguay/nuxt-with-create-nuxt-app-minimal\n\t\t\t\t\t- note that it is also a very minimal site\n\t\t\t\t\t- you have a [/page/index.vue](https://github.com/edwardtanguay/nuxt-with-create-nuxt-app-minimal/blob/master/pages/index.vue) file\n\t\t\t\t\t- which calls a [/components/Tutorial.vue](https://github.com/edwardtanguay/nuxt-with-create-nuxt-app-minimal/blob/master/components/Tutorial.vue)\n\t- **==>5.** Should you use the **CDN link** or **install a Vue application** ==> ANSWER ==> **BOTH, depending on your use case**\n\t\t- the purpose of this howto is to show how to **set up a stand-alone web application** with **Vue**\n\t\t\t- similar to applications created with **React** or **Angular**\n\t\t\t- to do this, as explained above, you use **Vite** and then choose **Customize with create-vue**\n\t\t- however, unlike React and Angular, **Vue** can also be **accessed via a simple CDN link**\n\t\t\t- this is why they call Vue a **progressive framework**\n\t\t\t\t- it can have **a light footprint** by simply being imported via a CDN link to **add functionality to an existing page** of another website\n\t\t\t\t- or it can be used to create a **complex, stand-alone, enterprise application** as with React or Angular\n\t\t\t- for instance, this is the CDN link that you use:\n\t\t\t\t- https://unpkg.com/vue@3/dist/vue.global.js\n\t\t\t\t- when you click on it you see that it downloads the entire Vue 3 code for you to use on any page\n\t\t\t- hence Vue can be used as a way to easily add interactive functionality to static sites, e.g. \n\t\t\t\t- plain HTML pages\n\t\t\t\t- any server-side rendered pages such as those from server-side frameworks such as PHP, Ruby-on-Rails, ASP.NET, EJS, etc.\n\t\t- for instructions on how to set up a HTML page with Vue as a CDN link, see [Using Vue from CDN](https://vuejs.org/guide/quick-start.html#using-vue-from-cdn)\n\t\t- for a detailed Howto on how to add Vue functionality to an existing HTML site, including loading data from an API and user interactivity, see this howto:\n\t\t\t- [Build interactive Vue.js into HTML site with API data call](https://edwardtanguay.vercel.app/howtos?id=645)\n\t- **==> 6.** Which **ROUTER** should you use, **Vue Router** or an alternative Vue router? ==> ANSWER ==> **Vue Router**\n\t\t- [Vue Router](https://router.vuejs.org) is the official and recommended router for Vue\n\t\t- there are other routers you could try out such as [Vue-Routisan](https://www.npmjs.com/package/vue-routisan)\n\t\t\t- but most Vue projects use the standard **Vue Router**\n\t\t\t- and it can be installed with build tools such as **Vite**\n\t- **==> 7.** Which **STATE MANAGEMENT** should you use, **Vuex** or **Pinia**? ==> ANSWER == **Pinia**\n\t\t- **Vuex** and **Pinia** are equivalent to **useContext** in React\n\t\t\t- they provide a more organized way to centrally manage state in a single-page application\n\t\t- **Vuex** was created by **Evan You** in 2016\n\t\t\t- since then it has been the standard state management solution in Vue\n\t\t- **Pinia** was created in 2020 by Eduardo San Martin Morote\n\t\t\t- since then it has gained popularity as a **lightweight alternative to Vuex**\n\t\t\t- it's **more straightforward** than Vuex\n\t\t\t- Pinia is now recommended by the Vue core team\n\t\t\t- has excellent **TypeScript support**\n\t\t\t- VIDEO: [Vue State Management Pinia Crash Course](https://www.youtube.com/watch?v=Ok6vO98RV_Q) (15 min)\n\t\t- note that there is a **third way**:\n\t\t\t- create a mini state-management system with **ref** and **reactive**\n\t\t\t\t- these commands allow you to share data between multiple components by creating composables\n\t- **==> 8.** Which **TESTING FRAMEWORK** show you use, **@testing-library/vue** or **Cypress**? ==> ANSWER ==> **BOTH**\n\t\t- use **@testing-library/vue** for **unit testing**\n\t\t- use **Cypress** for **end-to-end testing**\n\t\t- you can add both of these into your pull-requests and CI/CD system\n\t- **==> 9.** Which **STARTER TEMPLATE** should you use, **Vue 3 Enterprise Boilerplate** or **Vitesse**? ==> ANSWER ==> **Vitesse**\n\t\t- **Vue 3 Enterprise Boilerplate**\n\t\t\t- https://github.com/MrSunshyne/vue3-enterprise-boilerplate\n\t\t\t- might be useful for very large projects\n\t\t- **Vitesse**\n\t\t\t- uses Vite\n\t\t\t- file-based routing\n\t\t\t- Pinia\n\t\t\t- auto import of components\n\t\t\t- is lighter than Vue 3 Enterprise Boilerplate\n\t\t\t- VIDEO: [Vitesse](https://www.youtube.com/watch?v=rMD3A5BgDxE)\n\t- **==> 10.** Which **COMPONENT LIBRARY** should you use, **Vuetify** or **Quasar**? ==> ANSWER ==> **Quasar**\n\t\t- both of these provide pre-built components such as Bootstrap does\n\t\t- **Vuetify**\n\t\t\t- took a long time to upgrade from Vue 2 to Vue 3 and **lost many of their users to Quasar**\n\t\t\t- based on **Material UI**\n\t\t- **Quasar**\n\t\t\t- it is more or less its own framework with its own CLI\n\t\t\t\t- therefore offers more than Vuetify\n\t\t\t- supports desktop, tablet and mobile\n\t\t\t- has themes, internationalization\n\t\t\t- VIDEO: [Quasar Vue.js Tutorial - Getting Started](https://www.youtube.com/watch?v=C-v262YhYvw)\n\t\t- alternative: **Tailwind**\n\t\t\t- instead of pre-built components, learn Tailwind and create your own\n\t- **==> 11.** Which **VSCODE VUE EXTENSION** should you use, **Vetur** or **Volar**? ==> ANSWER ==> **Volar**\n\t\t- **Vetur**\n\t\t\t- was popular with Vue 2\n\t\t\t- doesn't work well with Vue 3 script setup\n\t\t- **Volar**\n\t\t\t- good support for TypeScript\n\t\t\t- works will with Vue 3 script setup\n\t\t\t- nice auto-completion\n\t- **==> 12.** Which **LANGUAGE** should you use with Vue projects, **JavaScript** or **TypeScript**? ==> **either work, but TypeScript is recommended** <==\n\t\t- while **Angular** more or less requires you to use TypeScript since you will run into limitations and problems if you don't\n\t\t\t- **React** and **Vue** are more flexible in allowing both JavaScript and TypeScript\n\t\t- **Vue officially recommends TypeScript** \n\t\t\t- but it doesn't set up any unnecessary limitations if you choose JavaScript\n\t\t- as in React, while **TypeScript adds some coding complexity**, it also:\n\t\t\t- encourages cleaner, **more understandable code** \n\t\t\t\t- by forcing you to define your types explicitly\n\t\t\t- provides**auto-completion** of e.g. objects properties\n\t\t\t- **catches type errors** as you develop\n\t\t\t\t- will alert you if you send a string to a function that expects a number\n\t\t\t- acts as a kind of **testing mechanism** to decrease the chance that your application will fail\n\t\t\t\t- types are not only checked as you develop, but anywhere you build the application, e.g. Vercel won't publish your site if TypeSript finds errors in it\n- **Build a Vue Application**\n\t- we are going to build a classic \"Info Site\" such as this site\n\t\t- router and menu\n\t\t- decent styling\n\t\t- interaction on the page, e.g. button clicks that show and hide variables\n\t\t\t- with ref and reactive variables (like state variables)\n\t\t- fetched API data displayed on separate pages\n\t\t\t- to keep it simple, I won't include a shared state management solution like Pinia but will simply load data on each page for that page\n\t\t- code is here:\n\t\t\t- https://github.com/edwardtanguay/vue-proj-003\n\t\t- finished site looks like this:#gif#demositeforvue003\n\t- create boilerplate Vue site\n\t\t- `npm create vite`\n\t\t- `vue-proj-003`\n\t\t- Vue\n\t\t- Customize with create-vue\n\t\t- TypeScript - Yes\n\t\t- Vue Router - Yes\n\t\t- Pinia - Yes\n\t\t- `code vue-proj-003`\n\t\t\t- open VSCode terminal\n\t\t- `git init -b main`\n\t\t\t- make \"initial commit\"\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- click on link##clickonliiijlis\n\t\t- site will look like this:##yodisvue\n\t- publish at Vercel\n\t\t- push to GitHub\n\t\t- go to Vercel\n\t\t\t- Add New\n\t\t\t- Project\n\t\t\t- Import\n\t\t\t- Deploy\n\t\t- published site should look the same:##thevercelsandion\n\t\t- but notice that while browser-refresh on pages works on the local site\n\t\t\t- you get a 404 on the Vercel site#gif#noticevercle404\n\t\t- the way you fix this is add this file to the root directory of your site\n\t\t\t- **vercel.json**\n\t\t\t\t-------------------------------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"rewrites\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"source\": \"/(.*)\",\n\t\t\t\t\t\t\t\"destination\": \"/\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-------------------------------------------------------\n\t- minimize site\n\t\t- we want to now reduce this site to a simple, unstyled site with Home and About pages\n\t\t- /src/assets\n\t\t\t- **logo.svg** - delete\n\t\t\t- **base.css** - delete\n\t\t\t- **main.css** - blank out\n\t\t- /src/components\n\t\t\t- delete all files\n\t\t- /src/views\n\t\t\t- **AboutView.vue**\n\t\t\t\t------------------------------------\n\t\t\t\t<template>\n\t\t\t\t  <div class=\"about\">\n\t\t\t\t\t<p>This is the about page.</p>\n\t\t\t\t  </div>\n\t\t\t\t</template>\t\t\t\t\n\t\t\t\t------------------------------------\n\t\t\t- **HomeView.vue**\n\t\t\t\t--------------------------------------\n\t\t\t\t<template>\n\t\t\t\t  <div class=\"home\">\n\t\t\t\t\t<p>This is the home page.</p>\n\t\t\t\t  </div>\n\t\t\t\t</template>\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t- /src\n\t\t\t- **App.vue**\n\t\t\t\t------------------------------------------\n\t\t\t\t<script setup lang=\"ts\">\n\t\t\t\t\timport { RouterLink, RouterView } from 'vue-router';\n\t\t\t\t</script>\n\n\t\t\t\t<template>\n\t\t\t\t\t<h1>The Info Site</h1>\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<RouterLink to=\"/\">Home</RouterLink>\n\t\t\t\t\t\t<RouterLink to=\"/about\">About</RouterLink>\n\t\t\t\t\t</nav>\n\t\t\t\t\t<RouterView />\n\t\t\t\t</template>\t\t\t\n\t\t\t\t------------------------------------------\n\t\t- the minimized site should look like this:#gif#theinfositesimple\n\t- add styling\n\t\t- **main.css**\n\t\t\t-----------------------------------------\n\t\t\tbody {\n\t\t\t  background-color: #333;\n\t\t\t  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\t  padding: 0 1rem;\n\t\t\t}\n\n\t\t\tp {\n\t\t\t  color:#ccc; \n\t\t\t  font-size: 1.3rem;\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **App.vue**\n\t\t\t---------------------------------------\n\t\t\t<style scoped>\n\t\t\tnav {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 0.5rem;\n\t\t\t  background-color: #222;\n\t\t\t  padding: .5rem 1rem;\n\t\t\t}\n\t\t\ta {\n\t\t\t\tcolor: #ccc;\n\t\t\t  text-decoration: none;\n\t\t\t  font-size: 1.3rem;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t  color: rgb(206, 163, 83);\n\t\t\t}\n\n\t\t\ta.router-link-active {\n\t\t\t\tcolor: rgb(207, 207, 110);\n\t\t\t}\n\t\t\t</style>\t\t\t\n\t\t\t---------------------------------------\n\t\t- the styled site should look like this:##thestyledinfos\n\t- create desired pages\n\t\t- rename and create minimal pages:\n\t\t\t- Welcome\n\t\t\t- Jobs\n\t\t\t- Skills\n\t\t- /views\n\t\t\t- make all pages##thepagesfinish\n\t\t- **App.vue** - add all pages in router\n\t\t\t------------------------------------\n\t\t\t<nav>\n\t\t\t\t<RouterLink to=\"/\">Welcome</RouterLink>\n\t\t\t\t<RouterLink to=\"/jobs\">Jobs</RouterLink>\n\t\t\t\t<RouterLink to=\"/skills\">Skills</RouterLink>\n\t\t\t</nav>\t\t\t\n\t\t\t------------------------------------\n\t\t- **/src/router/index.ts**\n\t\t\t---------------------------------------\n\t\t\timport WelcomeView from '../views/WelcomeView.vue'\n\n\t\t\troutes: [\n\t\t\t\t{\n\t\t\t\t\tpath: '/',\n\t\t\t\t\tname: 'welcome',\n\t\t\t\t\tcomponent: WelcomeView\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: '/jobs',\n\t\t\t\t\tname: 'jobs',\n\t\t\t\t\tcomponent: () => import('../views/JobsView.vue')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: '/skills',\n\t\t\t\t\tname: 'skills',\n\t\t\t\t\tcomponent: () => import('../views/SkillsView.vue')\n\t\t\t\t}\n\t\t\t]\n\t\t\t---------------------------------------\n\t\t- note that Jobs and Skills pages will be lazy loaded\n\t\t\t- they will be loaded only when the user accesses them\n\t\t- site should now look like this:##andnowthreesites\n\t- create state variables and scoped styles \n\t\t- we'll be working in **WelcomeView.vue**\n\t\t- create static variables and display them\n\t\t\t------------------------------------\n\t\t\t<script setup lang=\"ts\">\n\t\t\tconst greeting = \"Welcome to this site\";\n\t\t\tconst message = 'This site contains information about available jobs.';\n\t\t\t</script>\n\n\t\t\t<template>\n\t\t\t\t<div class=\"welcome\">\n\t\t\t\t\t<h2>{{ greeting }}</h2>\n\t\t\t\t\t<p>{{ message }}</p>\n\t\t\t\t</div>\n\t\t\t</template>\t\t\n\t\t\t------------------------------------\n\t\t- note that we are using the **script setup format** discussed early\n\t\t- will look like this##andthewelcom\n\t\t- now add styles\n\t\t\t--------------------------------------\n\t\t\t<style>\n\t\t\t\th2 {\n\t\t\t\t\tcolor: orange;\n\t\t\t\t}\n\n\t\t\t\tp {\n\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\tfont-style: italic;\n\t\t\t\t}\n\t\t\t</style>\t\t\t\n\t\t\t--------------------------------------\n\t\t- but notice that this changes the styles on the other sites\n\t\t- make these style scoped so that they only affect this page\n\t\t\t--------------------------------------------\n\t\t\t<style scoped>\n\t\t\t--------------------------------------------\n\t- add interactivity and \"state\" variables\n\t\t- try to change variable with button\n\t\t\t----------------------------------------\n\t\t\tconst changeMessage = () => {\n\t\t\t\tmessage = 'This site also contains skills you need for IT jobs.';\n\t\t\t}\n\n\t\t\t<button @click=\"changeMessage\">more info</button>\n\t\t\t----------------------------------------\n\t\t- it doesn't work\n\t\t- therefore you need to add a ref() variable\n\t\t\t- this is like a state variable in React\n\t\t\t\t------------------------------------\n\t\t\t\timport { ref } from 'vue';\n\n\t\t\t\tmessage.value = 'This site also contains skills you need for IT jobs.';\n\t\t\t\t------------------------------------\n\t\t- now make the button disappear after clicked once\n\t\t\t-----------------------------------------------\n\t\t\tconst showButton = ref(true);\n\n\t\t\tshowButton.value = false;\n\n\t\t\t<button v-if=\"showButton\" @click=\"changeMessage\">more info</button>\n\t\t\t-----------------------------------------------\n\t\t- the site should now work like this#gif#sitenowrokslike\n\t- define TypeScript interfaces for Jobs and Skills first\n\t\t- **/src/interfaces.ts**\n\t\t\t---------------------------------------------\n\t\t\texport interface ISkill {\n\t\t\t  url: string;\n\t\t\t  name: string;\n\t\t\t  description: string;\n\t\t\t}\n\n\t\t\texport interface IJob {\n\t\t\t\ttitle: string;\n\t\t\t\turl: string;\n\t\t\t\tcompany: string;\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t- load API data on Job page\n\t\t- we want to load jobs on the jobs page\n\t\t- `npm i axios`\n\t\t- **JobsView.vue**\n\t\t\t-----------------------------------------\n\t\t\timport axios from 'axios';\n\t\t\tconst jobs: IJob[] = (await axios.get('https://edwardtanguay.vercel.app/share/jobs.json')).data;\n\n\t\t\t<p>There are {{ jobs.length }} jobs.</p>\n\t\t\t-----------------------------------------\n\t\t- jobs are being loaded, but they are not shown, there is an error about **no <Suspense> boundary was found in the parent component**:##thesuspensesd\n\t\t- add `<Suspense>` in **App.vue**\n\t\t\t-----------------------------------------------\n\t\t\t<template>\n\t\t\t\t<Suspense>\n\t\t\t\t\t<h1>The Info Site</h1>\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<RouterLink to=\"/\">Welcome</RouterLink>\n\t\t\t\t\t\t<RouterLink to=\"/jobs\">Jobs</RouterLink>\n\t\t\t\t\t\t<RouterLink to=\"/skills\">Skills</RouterLink>\n\t\t\t\t\t</nav>\n\t\t\t\t\t<RouterView />\n\t\t\t\t</Suspense>\n\t\t\t</template>\n\t\t\t-----------------------------------------------\n\t\t- now you get an error that says the Suspense element expects a single node as a child##nowsinglenode\n\t\t- add a **div** element inside of the **Suspense** element\n\t\t\t- Vue doesn't seem to have a **fragment** as React has\n\t\t\t\t------------------------------------------\n\t\t\t\t<template>\n\t\t\t\t\t<Suspense>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1>The Info Site</h1>\n\t\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t\t\t<RouterLink to=\"/\">Welcome</RouterLink>\n\t\t\t\t\t\t\t\t<RouterLink to=\"/jobs\">Jobs</RouterLink>\n\t\t\t\t\t\t\t\t<RouterLink to=\"/skills\">Skills</RouterLink>\n\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t<RouterView />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Suspense>\n\t\t\t\t</template>\t\t\t\t\n\t\t\t\t------------------------------------------\n\t\t- the number of jobs are now shown##teh94sdfj\n\t\t- now display jobs\n\t\t\t----------------------------------------\n\t\t\t<ul>\n\t\t\t  <li v-for=\"job in jobs\">{{ job.title }}</li>\n\t\t\t</ul>\t\t\t\n\t\t\t----------------------------------------\n\t\t- job titles will be shown##thejobtitlesandshow\n\t\t- add link and company info, and style\n\t\t\t--------------------------------------------\n\t\t\t<a target=\"_blank\" :href=\"job.url\">{{ job.title }}</a> - {{ job.company }}\n\n\t\t\t<style scoped>\n\t\t\tli {\n\t\t\t\tcolor: #ccc;\n\t\t\t  font-size: 1.3rem;\n\t\t\t}\n\t\t\ta {\n\t\t\t\tcolor: rgb(218, 218, 128);\n\t\t\t}\n\t\t\t</style>\n\t\t\t--------------------------------------------\n\t\t- finished job page should look like this:##tehjobsstyled\n\t- load skills the same way on Skills page\n\t\t- **SkillsView.vue**\n\t\t\t--------------------------------------------\n\t\t\t<script setup lang=\"ts\">\n\t\t\timport axios from 'axios';\n\t\t\tconst skills: ISkill[] = (\n\t\t\t\tawait axios.get('https://edwardtanguay.vercel.app/share/skills.json')\n\t\t\t).data;\n\t\t\t</script>\n\n\t\t\t<template>\n\t\t\t\t<div class=\"skills\">\n\t\t\t\t\t<p>There are {{ skills.length }} skills.</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li v-for=\"skill in skills\">\n\t\t\t\t\t\t\t<a target=\"_blank\" :href=\"skill.url\">{{ skill.name }}</a> - {{ skill.description }}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</template>\n\n\t\t\t<style scoped>\n\t\t\tli {\n\t\t\t\tcolor: #ccc;\n\t\t\t  font-size: 1.3rem;\n\t\t\t}\n\t\t\ta {\n\t\t\t\tcolor: rgb(218, 218, 128);\n\t\t\t}\n\t\t\t</style>\n\t\t\t--------------------------------------------\n- todos for next-level Vue.js howto:\n\t- dynamic and static images\n\t- install Sass (`npm i sass` and `<style scoped lang=\"scss\">`)\n\t- Tailwind with Vue\n\t- components and defineProps\n\t- defineEmits\n\t- shared state with composables\n\t\t- https://mokkapps.de/vue-tips/share-composable-state-across-components\n\t- shared state with Pinia\n\t- testing: Vitest, @testing-library/vue, Cypress, Playwright\n\t- auth0 authentication\n\t\t- https://auth0.com/blog/complete-guide-to-vue-user-authentication\n\t- install with Quasar\n\t- install with Vitesse\n\t- hosting Vue at Hetzner","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-03-01 16:35:03","systemWhoCreated":"systemUnknown"},{"id":695,"category":"GraphQL","title":"Roadmap for learning GraphQL: Node/Express backend to serve data and React frontend to consume and display it, with mutation","body":"- **what is GraphQL?**\n\t- GraphQL is an alternative way to REST which allows frontend clients to fetch data from the backend\n\t- the \"QL\" stands for Query Language which is something REST does not have\n\t\t- with REST, you send static requests to endpoints which at most allow you to specify one argument, e.g. `/employee/:id` which sends you back **every field** of every object\n\t\t\t- this often leads to front ends fetching much more data than they actually use, e.g. an array of employee objects each with 40 fields, when all the frontend displays are the firstName and lastName fields\n\t\t- **GraphQL allows the frontend to specify only the fields it needs**\n\t\t\t- this is the biggest advantage of GraphQL that you notice early on in using it\n\t- so GraphQL **gives frontends more flexibility** by allowing them to send queries to the backend specifying which records and fields they want instead of only being able to query static routes that often send them data they don't need##restvsgraphql\n- **what we will do**\n\t- the purpose of this howto is to get people who have had no experience with GraphQL to the point where they have enough knowledge of it to employ it in a backend project\n\t- note that you can have both REST and GraphQL routes in a Node/Express application\n\t\t- you don't have to choose one or the other\n\t\t- you can simply add a graphql endpoint to your Node/Express backend (always `/graphql`) along with all of your REST endpoints, e.g. `/employees`, `employees:id`, etc.\n\t\t\t- use GraphQL for what it does best\n\t\t\t\t- allow flexible querying from the frontend \n\t\t\t- use REST for what it does best\n\t\t\t\t- allow simple delivery of targeted data via a decicated enpoint\n\t- a common scenerio to learn GraphQL is to built it into your REST backend\n\t\t- continue to use to your REST end points as before\n\t\t- constantly experiment with using GraphQL queries to the GraphQL endpoint instead\n\t- this example uses the modern setup of TypeScript and ES6 modules on frontend (Vite) and backend (Node/Express/express-graphql)\n- **background**\n\t- when getting into GraphQL, you are faced with quite a number of technology choices that can be confusing\n\t- in my short research of the subject, I found two major distinctions to understand\n\t\t- 1. **express-graphql vs Apollo Server**\n\t\t\t- **express-graphql** is a piece of middleware, to quickly setup a GraphQL Server, either with Express, or any web-framework that supports middleware\n\t\t\t- **Apollo Server** basically does the same thing, but has a large ecosystem that is installed with it which can do much more than express-graphql\n\t\t\t- it your goal is to have a lightweight GraphQL solution, Apollo is probably the worst pick\n\t\t\t\t- yet if you want to use the whole Apollo ecosystem, it might be the best pick\n\t\t\t- **note however** that even if you use **express-graphql** on the backend, it's recommended to use **apollo-client** on the frontend to send queries to the backend\n\t\t- 2. **buildSchema** vs **GraphQLObjectType**\n\t\t\t- buildSchema\n\t\t\t\t- very easy, quick way to set up GraphQL\n\t\t\t\t- apparently only for getting data\n\t\t\t- GraphQLObjectType\n\t\t\t\t- is more complicated\n\t\t\t\t- has many more options, e.g.\n\t\t\t\t\t- mutations\n\t\t\t\t\t- filters\n\t- other technologies to look at\n\t\t- [GraphQL-Yoga](https://the-guild.dev/graphql/yoga-server)\n\t\t\t- built with apollo-server and express-graphql. And it's built and maintained by the Prisma Team\n\t\t- [GraphQL Nexus](https://nexusjs.org)\n\t\t\t- uses auto-generation which will save you the time of creating GraphQL boilerplate to enable more complicated queries\n\t\t- [urql](https://formidable.com/open-source/urql)\n\t\t\t- an alternative to **Apollo Client** on the frontend\n\t\t\t- makes using GraphQL easier for features such as **uploading**, **authentication**, or if you are using **Next.js**\n\t\t\t- see: [Why I (finally) switched to urql from Apollo Client](https://blog.logrocket.com/why-i-finally-switched-to-urql-from-apollo-client)\n- project\n\t- code is here:\n\t\t- backend: https://github.com/edwardtanguay/et001-graphql-full\n\t\t- frontend: https://github.com/edwardtanguay/et001-graphql-front\n\t- another implementation is here\n\t\t- backend: https://github.com/edwardtanguay/et002-graphql-backend\n\t\t- frontend: https://github.com/edwardtanguay/et002-graphql-frontend\n- setting up local GraphQL server and client\n\t- **build basic backend REST server first**\n\t\t- I'll make it first with employees as in the howto, then with jobs/skills:\n\t\t\t- http://edwardtanguay.vercel.app/share/jobs.json\n\t\t\t- http://edwardtanguay.vercel.app/share/skills.json\n\t\t- instead of building the backend manually, I'm using this starter\n\t\t\t- https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi\n\t\t\t- removing logger\n\t\t- REST finished with jobs/skills\n\t\t\t- **server.ts**\n\t\t\t\t------------------------------------------------\n\t\t\t\timport * as model from './model.js';\n\t\t\t\timport express from 'express';\n\t\t\t\timport cors from 'cors';\n\t\t\t\timport * as config from './config.js';\n\n\t\t\t\tconst app = express();\n\t\t\t\tapp.use(cors());\n\n\t\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\t\tres.send(model.getApiInstructions());\n\t\t\t\t});\n\n\t\t\t\tapp.get('/jobs', (req: express.Request, res: express.Response) => {\n\t\t\t\t\tres.json(model.getJobs());\n\t\t\t\t});\n\n\t\t\t\tapp.get('/skills', (req: express.Request, res: express.Response) => {\n\t\t\t\t\tres.json(model.getSkills());\n\t\t\t\t});\n\n\t\t\t\tapp.get('/jobs/:id', (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst id = Number(req.params.id);\n\t\t\t\t\tif (isNaN(id)) {\n\t\t\t\t\t\tres.status(400).send({\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tmessage: \"sent string, should be number\"\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst job = model.getJob(id);\n\t\t\t\t\t\tif (job === undefined) {\n\t\t\t\t\t\t\tres.status(404).send({\n\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t\tmessage: \"id did not correspond to an existing item\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.json(job);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tapp.get('/skills/:idCode', (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst idCode = req.params.idCode;\n\t\t\t\t\tconst skill = model.getSkill(idCode);\n\t\t\t\t\tif (skill === undefined) {\n\t\t\t\t\t\tres.status(404).send({\n\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\tmessage: \"idCode did not correspond to an existing item\"\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.json(skill);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tapp.listen(config.port, () => {\n\t\t\t\t\tconsole.log(`listening on port http://localhost:${config.port}`);\n\t\t\t\t});\t\t\t\n\t\t\t\t------------------------------------------------\n\t\t\t- **model.ts**\n\t\t\t\t-------------------------------------------------------\n\t\t\t\timport fs from 'fs';\n\t\t\t\timport { IJob, ISkill } from './interfaces.js';\n\n\t\t\t\tconst jobs: IJob[] = JSON.parse(fs.readFileSync('./src/data/jobs.json', 'utf8'));\n\t\t\t\tconst skills: ISkill[] = JSON.parse(fs.readFileSync('./src/data/skills.json', 'utf8'));\n\n\t\t\t\texport const getApiInstructions = () => {\n\t\t\t\t\treturn `\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #444;\n\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\tcolor: #fff;\n\t\t\t\t\t\tfont-family: courier;\n\t\t\t\t\t}\n\t\t\t\t\tcode {\n\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<h1>Book Site API</h1>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><code>/books</code> - all books</li>\n\t\t\t\t\t<li><code>/books/3</code> - book with id 3</li>\n\t\t\t\t</ul>\n\t\t\t\t\t`;\n\t\t\t\t}\n\n\t\t\t\texport const getJobs = (): IJob[] => {\n\t\t\t\t\treturn jobs;\n\t\t\t\t}\n\n\t\t\t\texport const getJob = (id: number): IJob => {\n\t\t\t\t\treturn jobs.find(m => m.id === id);\n\t\t\t\t}\n\n\t\t\t\texport const getSkills = (): ISkill[] => {\n\t\t\t\t\treturn skills;\n\t\t\t\t}\n\n\t\t\t\texport const getSkill = (idCode: string): ISkill => {\n\t\t\t\t\treturn skills.find(m => m.idCode === idCode);\n\t\t\t\t}\n\t\t\t\t-------------------------------------------------------\n\t- **add GraphQL in backend**\n\t\t- `npm i graphql express-graphql cors`\n\t\t- **schema.ts**\n\t\t\t-------------------------------------\n\t\t\timport { buildSchema } from 'graphql';\n\n\t\t\texport const schema = buildSchema(`\n\t\t\t\t\ttype Query {\n\t\t\t\t\t\tmessage: String\n\t\t\t\t\t}\n\t\t\t\t`);\t\t\t\n\t\t\t-------------------------------------\n\t\t- **server.ts**\n\t\t\t-------------------------------------------\n\t\t\timport { graphqlHTTP } from 'express-graphql';\n\t\t\timport { schema } from './schema.js';\t\t\t\n\n\t\t\t// GRAPHQL\n\n\t\t\tconst root = {\n\t\t\t\tmessage: () => {\n\t\t\t\t\treturn 'this is the message';\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tapp.use(\n\t\t\t\t'/graphql',\n\t\t\t\tgraphqlHTTP({\n\t\t\t\t\tschema,\n\t\t\t\t\trootValue: root,\n\t\t\t\t\tgraphiql: true,\n\t\t\t\t})\n\t\t\t);\n\t\t\t-------------------------------------------\n\t\t- go to: http://localhost:3610/graphql\n\t\t\t--------------------------------------------\n\t\t\t{\n\t\t\t  message\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- add departments\n\t\t\t- add to **schema.ts**\n\t\t\t\t------------------------------------\n\t\t\t\tdepartments: [String]\n\t\t\t\t------------------------------------\n\t\t\t- in **server.ts** \n\t\t\t\t-----------------------------------\n\t\t\t\tconst root = {\n\t\t\t\t\tmessage: () => {\n\t\t\t\t\t\treturn 'this is the message';\n\t\t\t\t\t},\n\t\t\t\t\tdepartments: () => {\n\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\"Sales\",\n\t\t\t\t\t\t\t\"Marketing\",\n\t\t\t\t\t\t\t\"Development\",\n\t\t\t\t\t\t\t\"Executive\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t-----------------------------------\t\n\t\t- add jobs and skills with **buildSchema**\n\t\t\t- add to **schema.ts**\n\t\t\t\t------------------------------------\n\t\t\t\texport const schema = buildSchema(`\n\t\t\t\t\t\ttype Query {\n\t\t\t\t\t\t\tmessage: String,\n\t\t\t\t\t\t\tdepartments: [String]\n\t\t\t\t\t\t\tjobs: [Job]\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype Job {\n\t\t\t\t\t\t\tid: Int,\n\t\t\t\t\t\t\ttitle: String,\n\t\t\t\t\t\t\tcompany: String,\n\t\t\t\t\t\t\turl: String,\n\t\t\t\t\t\t\tdescription: String,\n\t\t\t\t\t\t\tskillList: String,\n\t\t\t\t\t\t\tpublicationDate: String\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype Skill {\n\t\t\t\t\t\t\tidCode: String,\n\t\t\t\t\t\t\tname: String,\n\t\t\t\t\t\t\turl: String,\n\t\t\t\t\t\t\tdescription: String\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t`);\n\t\t\t\t------------------------------------\n\t\t\t- in **server.ts** \n\t\t\t\t-----------------------------------\n\t\t\t\tjobs: model.getJobs()\n\t\t\t\t-----------------------------------\t\n\t\t- query jobs and skills in GraphiQL\n\t\t\t------------------------------------\n\t\t\t{\n\t\t\t  jobs {\n\t\t\t\tid,\n\t\t\t\ttitle, \n\t\t\t\turl,\n\t\t\t\tpublicationDate\n\t\t\t  },\n\t\t\t  skills {\n\t\t\t\tidCode,\n\t\t\t\tname\n\t\t\t  }\n\t\t\t}\t\t\t\n\t\t\t------------------------------------\n\t- set up GraphQL frontend\n\t\t- use starter\n\t\t\t- https://starters.tanguay.eu/list/blankViteDarkMenuUsecontext\t\n\t\t- `npm i @apollo/client graphql`\n\t\t- **main.tsx**\n\t\t\t----------------------------------------------------\n\t\t\timport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\n\n\t\t\tconst client = new ApolloClient({\n\t\t\t\turi: 'http://localhost:3610/graphql',\n\t\t\t\tcache: new InMemoryCache(),\n\t\t\t});\n\n\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t<ApolloProvider client={client}>\n\t\t\t\t\t<AppProvider>\n\t\t\t\t\t\t<BrowserRouter>\n\t\t\t\t\t\t\t<App />\n\t\t\t\t\t\t</BrowserRouter>\n\t\t\t\t\t</AppProvider>\n\t\t\t\t</ApolloProvider>\n\t\t\t);\t\t\t\n\t\t\t----------------------------------------------------\n\t\t- **AppContext.tsx**\n\t\t\t-------------------------------------------------------\n\t\t\timport { useQuery, gql } from '@apollo/client';\t\t\t\n\n\t\t\tinterface IAppContext {\n\t\t\t\tappTitle: string;\n\t\t\t\tjobs: IJob[];\n\t\t\t\tskills: ISkill[];\n\t\t\t}\n\n\t\t\tconst { loading, data } = useQuery(gql`\n\t\t\t\t{\n\t\t\t\t\tmessage,\n\t\t\t\t\tjobs {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\ttitle\n\t\t\t\t\t},\n\t\t\t\t\tskills {\n\t\t\t\t\t\tidCode,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdescription\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`);\n\t\t\tuseEffect(() => {\n\t\t\t\tif (!loading) {\n\t\t\t\t\tsetMessage(data.message);\n\t\t\t\t\tsetJobs(data.jobs);\n\t\t\t\t\tsetSkills(data.skills);\n\t\t\t\t}\n\t\t\t}, [loading]);\t\t\t\n\t\t\t-------------------------------------------------------\n- convert to **GraphQLSchema**\n\t- **server.ts**\n\t\t------------------------------------------\n\t\timport { GraphQLSchema, GraphQLObjectType, GraphQLInt, GraphQLString, GraphQLList } from 'graphql';\n\n\t\tconst jobs = model.getJobs();\n\n\t\tconst JobType = new GraphQLObjectType({\n\t\t\tname: \"Job\",\n\t\t\tfields: () => ({\n\t\t\t\tid: { type: GraphQLInt },\n\t\t\t\ttitle: { type: GraphQLString },\n\t\t\t\tcompany: { type: GraphQLString },\n\t\t\t\turl: { type: GraphQLString },\n\t\t\t\tdescription: { type: GraphQLString },\n\t\t\t\tskillList: { type: GraphQLString },\n\t\t\t\tpublicationDate: { type: GraphQLString },\n\t\t\t})\n\t\t})\n\n\t\tconst rootQuery = new GraphQLObjectType({\n\t\t\tname: \"RootQueryType\",\n\t\t\tfields: {\n\t\t\t\tjobs: {\n\t\t\t\t\ttype: new GraphQLList(JobType),\n\t\t\t\t\targs: { id: { type: GraphQLInt } },\n\t\t\t\t\tresolve(parent, args) {\n\t\t\t\t\t\treturn jobs\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst mutation = new GraphQLObjectType({\n\t\t\tname: \"Mutation\",\n\t\t\tfields: {\n\t\t\t\tcreateJob: {\n\t\t\t\t\ttype: JobType,\n\t\t\t\t\targs: {\n\t\t\t\t\t\ttitle: { type: GraphQLString },\n\t\t\t\t\t\tcompany: { type: GraphQLString },\n\t\t\t\t\t\turl: { type: GraphQLString }\n\t\t\t\t\t},\n\t\t\t\t\tresolve(parent, args) {\n\t\t\t\t\t\tjobs.push({\n\t\t\t\t\t\t\tid: jobs.length + 1,\n\t\t\t\t\t\t\ttitle: args.title,\n\t\t\t\t\t\t\tcompany: args.company,\n\t\t\t\t\t\t\turl: args.url,\n\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\tskillList: '',\n\t\t\t\t\t\t\tpublicationDate: '',\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn args;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst schema = new GraphQLSchema({ query: rootQuery, mutation });\t\t\t\n\t\t------------------------------------------\n\t- querying is the same\n\t\t-------------------------------------\n\t\tquery {\n\t\t\tjobs {\n\t\t\t  id,\n\t\t\ttitle\n\t\t\t}\n\t\t}\t\t\n\t\t-------------------------------------\n\t- mutation\n\t\t-----------------------------------\n\t\tmutation {\n\t\t  createJob(title:\"ttt\", company:\"ccc\", url:\"uuuu\") {\n\t\t\tid,\n\t\t\ttitle\n\t\t  }\n\t\t}\t\t\n\t\t-----------------------------------\n\t- add filter\n\t\t-------------------------------------------------\n\t\tconst rootQuery = new GraphQLObjectType({\n\t\t\tname: \"RootQueryType\",\n\t\t\tfields: {\n\t\t\t\tjobs: {\n\t\t\t\t\ttype: new GraphQLList(JobType),\n\t\t\t\t\targs: {\n\t\t\t\t\t\ttitleContains: { type: GraphQLString }\n\t\t\t\t\t},\n\t\t\t\t\tresolve(parent, args) {\n\t\t\t\t\t\treturn jobs.filter(\n\t\t\t\t\t\t\t(job) =>\n\t\t\t\t\t\t\t\t!args.titleContains || job.title.toLowerCase().includes(args.titleContains.toLowerCase())\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\t\t\n\t\t-------------------------------------------------\n\t- query with filter\n\t\t------------------------------------------------\n\t\tquery {\n\t\t\tjobs(titleContains: \"junior\"){\n\t\t\t  id,\n\t\t\ttitle,\n\t\turl\n\t\t\t}\n\t\t}\t\t\n\t\t------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-03-10 08:21:39","systemWhoCreated":"systemUnknown"},{"id":696,"category":"Docker","title":"Understand the basics of Docker, setup numerous containers and run on various machines","body":"- **what we will do**\n\t- this howto is for MERN-stack developers who have never worked with Docker before\n\t- we'll install Docker Desktop on our local machines\n\t\t- e.g. I have Docker Desktop installed on my Windows and Ubuntu machines\n\t- we'll create three Docker applications\n\t\t- minimalistic 10-line Node/Express API\n\t\t- Node/Express API that shows data from local JSON files\n\t\t- that Node/Express API plus a frontend React website that work together\n\t- each of these application will get running on three operating systems\n\t\t- local Windows machine\n\t\t- local Ubuntu machine\n\t\t- cloud machine at Hetzner\n- **why learn Docker?**\n\t- technical reasons\n\t\t- it makes applications easier to deploy\n\t\t\t- especially if they have complex environments and complicated setup procedures \n\t\t- replacement for virtual machines in many instances\n\t\t\t- wrap applications instead of machines\n\t\t- can be easily scaled\n\t\t\t- since they are abstracted\n\t- employment reasons\n\t\t- many companies are adopting Docker and Kubernetes into their DevOp solutions\n\t\t- it is often mentioned in job ads\n\t\t\t- https://jobs.tanguay.eu\n- **what's difficult about Docker?**\n\t- Docker has a steep learning curve\n\t\t- not something you learn in a day, week or become an expert in a month\n\t- Docker is a technology that by its nature spans every kind of operating machine which you constantly have to deal with and understand the peculiarities of\n\t\t- Windows\n\t\t- Mac\n\t\t- many versions of Linux, particularly those used in Cloud computing, e.g. \n\t\t\t- Ubuntu / Debian\n\t\t\t- Red Hat / Fedora / CentOS\n\t- Docker is primarily a DevOps technology, not a development technology\n\t\t- historically developers did not have much to do with deployment or application hosting\n\t\t- but today with the popularity of GitLab, GitHub, CI/CD pipelines, microservices, cloud computing\n\t\t\t- the boundaries of development and devops have been blurring over the past decade##devopstechs3\n\t- Docker has a high amount of new \n\t\t- concepts \n\t\t- vocabulary\n\t\t- tools \n\t\t- technologies\n- **Docker concepts, vocabulary, tools and technology**\n\t- Docker vocabulary\n\t\t- **repository**\n\t\t\t- a place where Docker images are stored and managed, e.g. at Docker Hub\n\t\t\t- a Docker repository stores Docker images, not Docker files that are used to create images\n\t\t\t- you clone a Docker repository, you are typically retrieving the source code and any associated files needed to build the Docker image. In some cases, the repository may also contain a Dockerfile that can be used to build the image\n\t\t\t- a Docker repository typically stores only the Docker images themselves and not the Dockerfiles used to build them\n\t\t- **image**\n\t\t\t- images are a lightweight, standalone, executable package that contains everything needed to run an application, including the code, libraries, dependencies, and configuration files\n\t\t\t- images are built from a Dockerfile, which is a script that contains instructions for creating an image\n\t\t\t- a Dockerfile is used to create a Docker image, which can then be used to create a Docker container\n\t\t- **container**\n\t\t\t- Docker containers are running instances of Docker images\n\t\t\t- a place to put each logical part of an application \n\t\t\t- a Docker container is a running instance of a Docker image\n\t\t\t- to run an image as a container: `docker run ...`\t\t\t\n\t\t- **Dockerfile**\n\t\t\t- the file is called `Dockerfile`\n\t\t\t- a Dockerfile is used to define and create a Docker image, not a container\n\t\t\t- used by Docker Composer\n\t\t\t- it specifies the base image to use, as well as any additional dependencies and configuration required to run the application\n\t\t- **docker-compose.yml** file\n\t\t\t- the config file for Docker Compose\n\t\t\t- defines how numerous images will work together to create containers which will function as an application\n\t\t- **volumes**\n\t\t\t- where data is kept in the containers\n\t\t- **shared local drives**\n\t\t\t- used by volumes\n\t\t- **networking**\n\t\t\t- Docker containers must be networked to interact\n\t\t\t- this is defined in the docker-compose.yml files\n\t- Docker tools\n\t\t- **Docker Engine**\n\t\t\t- the core technology that enables containerization\n\t\t- **Docker CLI**\n\t\t\t- command line interface that allows you to create and manage containers\n\t\t- **Docker Desktop**\n\t\t\t- GUI application that allows developers to create, run, and manage Docker containers on their local machine\n\t\t\t- you don't need Docker Desktop (you could exclusively use the Docker CLI) but it simplifies management of containers\n\t\t\t- originally only ran on Mac and Windows\n\t\t\t- as of **May 2022** available on Linux\n\t\t\t\t- https://www.docker.com/blog/the-magic-of-docker-desktop-is-now-available-on-linux/\n\t\t- **Docker Hub**\n\t\t\t- a central hub for Docker images\n\t\t\t- users can upload their own Docker images to Docker Hub\n\t\t\t- like GitHub provides both public and private repositories\n\t\t\t- free but has paid subscription for increased storage and bandwidth\n\t\t- **Docker Compose**\n\t\t\t- allows you to manage multiple containers as an application\n\t\t\t- tool used to define and run multi-container Docker applications\n\t\t\t- allows developers to define a multi-container application as a single unit, specifying the services, networks, and volumes required to run the application\n\t\t\t- developers define their application as a YAML file\n\t\t\t\t- specifies the containers, images, and configuration options needed for each service in the application\n\t\t\t- good for complex applications that require multiple containers to be deployed together\n\t\t\t\t- e.g. a web application that requires a web server, a database server, and a caching service\n\t\t\t- others features\n\t\t\t\t- environment variables \n\t\t\t\t- command line overrides\n\t\t\t\t- enables scaling of application\t\n\t\t- **Docker vs. Docker Compose**\n\t\t\t- this is actually a difference between the command **docker run** and the comand **docker-compose**\n\t\t\t- docker run is entirely command line based\n\t\t\t\t- docker-compose reads configuration data from a YAML file\n\t\t\t- docker run can only start one container at a time\n\t\t\t\t- docker-compose will configure and run multiple containers as an application\n\t- Docker technologies\n\t\t- **Docker Swarm**\n\t\t\t- manages Docker containers at scale\n\t\t\t- a clustering and scheduling tool for Docker containers, allowing users to manage a group of Docker hosts as a single virtual system\n\t\t\t- provides integration with Docker Compose\n\t\t- **Docker Swarm vs Docker Compose**\n\t\t\t- both tools are for managing Docker containers\n\t\t\t- Compose: defining and running multi-container Docker applications on a **single host**\n\t\t\t- Swarm: managing and orchestrating Docker containers across **multiple hosts in a cluster**\n\t\t- **Docker Swarm vs Kubernetes**\n\t\t\t- basically the same, Kubernetes just has more features\tand is the industry standard\n\t\t\t- Docker Swarm is a Docker technology, installed with Docker\n\t\t\t- Kubernetes is a separate software\n\t\t- **wasm or WebAssembly modules**\n\t\t\t- a low-level virtual machine that can be used as a compilation target for a variety of programming languages, allowing developers to write code in their preferred language and compile it to wasm for execution in the browser\n\t\t\t- supported by all major web browsers, including Chrome, Firefox, Safari, and Edge\n\t\t\t- ARTICLE: [Why Containers and WebAssembly Work Well Together](https://www.docker.com/blog/why-containers-and-webassembly-work-well-together)\n\t\t\t\t- heavyweight - virtual machines\n\t\t\t\t- middleweight - containers\n\t\t\t\t- lightweight - WebAssembly\n\t- Docker commands\n\t\t- list images\n\t\t\t- `docker images`\n\t\t- list containers\n\t\t\t- `docker ps`\n\t\t- create an image from a Dockerfile\n\t\t\t- `docker build -t (ACCOUNTNAME)/(IMAGENAME) .`\n\t\t- create and run a container from an image\n\t\t\t- `docker run -p 5000:5000 (ACCOUNTNAME)/(IMAGENAME)`\n\t\t- delete an image\n\t\t\t- `docker rmi -f 123abc` (123abc = first characters in the image di)\n\t\t- stop a container\n\t\t\t- `docker stop 123abc` (123abc = first characters in the container di) \n\t\t- kill a container (if it won't stop)\n\t\t\t- `docker kill 123abc` (123abc = first characters in the container di) \n\t\t- delete an container\n\t\t\t- `docker rm -f 123abc` (123abc = first characters in the container di)\n\t\t- push an image to the Docker Hub\n\t\t\t- `docker push (ACCOUNTNAME)/(IMAGENAME)`\n\t\t- pull an image from Docker Hub\n\t\t\t- `docker pull (ACCOUNTNAME)/(IMAGENAME)`\n- **install Docker Desktop**\n\t- Mac/Windows/Linux\n\t\t- go to docker.com\n\t\t\t- Get Started\n\t\t\t- Docker Desktop\n\t\t\t- follow instructions\n\t- note that **Docker Desktop** originally was only available on **Windows and Mac**\n\t\t- it was created for Linux in **May 2022** and apparently **requires an AMD64 processor and either Ubuntu 21.10 or 22.04**\n\t\t- you can of course use Docker without Docker Desktop but it simplifies many tasks and eases one's introduction into Docker\n\t- **installing on Ubuntu**\n\t\t- also go to docker.com\n\t\t- note that Docker Desktop on Linux will not recognize images and containers that were made before you install it##notondeksks\n\t\t- click Ubuntu\n\t\t- click [DEB package] button to download\n\t\t\t- note you apparently need Ubuntu 22.04 and not Ubuntu 20.04##note2204ok\n\t\t- follow the instructions to install, e.g. on Ubuntu\n\t\t\t- `sudo apt-get update`\n\t\t\t- `sudo apt-get install (the-path-and-file-name-of-the-deb-file-you-downloaded).deb`\n\t\t\t- ignore \"unsandboxed\" error\n\t\t- easiest: \n\t\t\t- click on **Show Applications** icon\n\t\t\t- add to favorites on the side\n\t\t\t- start Docker Desktop by clicking on the whale icon\n- **get an account at hub.docker.com and log in with Docker Desktop**\n\t- https://hub.docker.com/signup\n\t- sign into this account from Docker Desktop##thesignjisjdindock\n- **1. Create the simplest Node/Express API container and run other machines**\n\t- code for this step is here:\n\t\t- https://github.com/edwardtanguay/dockerhowto-01nodeexpress\n\t- create the Node/Express app\n\t\t- `npm init -y`\n\t\t\t- \"type\": \"module\"\n\t\t- `npm i express`\n\t\t- `\"start\": \"node index.js\"`\n\t\t- **index.js**\n\t\t\t--------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 5000;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('this is a test api');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t\t});\n\t\t\t--------------------------\n\t\t- test\n\t- dockerize it\n\t\t- create **.dockerignore**\n\t\t\t---------------------------------\n\t\t\tnode_modules\n\t\t\tnpm-debug.log\n\t\t\t---------------------------------\n\t\t- create **Dockerfile**\n\t\t\t----------------------------------------------------\n\t\t\tFROM node \n\n\t\t\tWORKDIR /usr/src/app\n\n\t\t\tCOPY package*.json ./\n\n\t\t\tRUN npm install\n\n\t\t\tCOPY . . \n\n\t\t\tEXPOSE 5000\n\n\t\t\tCMD [\"npm\", \"start\"]\n\t\t\t----------------------------------------------------\n\t\t- install Docker extension to make e.g. Dockerfile have hyperlinks##instalvsdcodedocker\n\t\t- create image from Dockerfile\n\t\t\t- make sure your Docker Desktop is started and you are signed in\n\t\t\t- `docker build -t edwardtanguay/01nodeexpress .`\n\t\t\t\t- it downloads the Node image and creates the new image you specified in the docker file\n\t\t\t- `docker images`##anddockimagies\n\t\t\t- and you will then see it in your Docker Desktop##nowseeimagevododck\n\t\t- create and run container from image\n\t\t\t- `docker run -p 5001:5000 edwardtanguay/01nodeexpress`\n\t\t\t\t- host machine: port 5001\n\t\t\t\t- container: port 5000\n\t\t\t- list containers\n\t\t\t\t- `docker ps`\n\t\t- test in browser:##andthetestwwdock\n\t- push image to Docker Hub\n\t\t- with Docker Desktop##dothepushtodock\n\t- pull and use image from another machine\n\t\t- with Docker Desktop##onaothrmahc\n\t\t- had this problem when I click **Pull** on Linux Docker Desktop##520undexpe\n\t\t- after a restart, the Pull worked, the image took about 60 seconds to load:##withimagesnow\n\t\t- created a container from the image##runningonwnew\n\t\t- test in browser##thetest1piaapidadock\n\t- run container at Hetzner\n\t\t- set up machine with Docker\n\t\t\t- server hinzufügen\n\t\t\t- Nürnberg, Apps, Docker CE, CX11, SSH key, erstellen\n\t\t\t- Rescue, Root-Password zurücksetzen\n\t\t\t- Hetzner console, root, einfügen ohne Formatierung\n\t\t\t- add user\n\t\t\t\t- `useradd -m edward`\n\t\t\t\t- `passwd edward`\n\t\t\t\t- `usermod -aG sudo edward`\n\t\t\t\t- `exit`\n\t\t\t- login from host machine\n\t\t\t\t- `ssh edward@ipaddress`\n\t\t- pull image and run it as container\n\t\t\t- `sudo docker pull edwardtanguay/01nodeexpress2`\n\t\t\t- `sudo docker run -p 5009:5000 edwardtanguay/01nodeexpress2`\n\t\t\t- view at http://ipaddress-of-machine:5009##thwokeronhetz\n- **2. Create a Node/Express API that shows data from JSON files, and run other machines**\n\t- Dockerfile only\n\t- code is here:\n\t\t- https://github.com/edwardtanguay/03nodeexpressdata-backend\n\t\t- `docker build -t edwardtanguay/03nodeexpressdata-backend .`\n\t\t- `docker run -p 5001:5000 edwardtanguay/03nodeexpressdata-backend`\n\t\t- `docker push edwardtanguay/03nodeexpressdata-backend`\n\t- Linux\n\t\t- pulled from Docker Desktop\n\t\t- `docker run -p 5000:5000 edwardtanguay/03nodeexpressdata-backend`\n\t\t- worked\n- **3. Add a React frontend to the above Node/Express API and use docker-compose to create a Docker application that runs on other machines**\n\t- backend\n\t\t- call it \"step3reactnodeexpressdata\"\n\t\t- x set it up again with Dockerfile\n\t\t\t- `docker build -t edwardtanguay/step3reactnodeexpressdata-backend .`\n\t\t\t- `docker run -p 5000:5000 edwardtanguay/03nodeexpressdata-backend`\n\t- frontend\n\t\t- code is here:\n\t\t\t- https://github.com/edwardtanguay/step3reactnodeexpressdata-frontend\n\t\t- x set up react and get working alone with Dockerfile\n\t\t\t- **package.json**\n\t\t\t\t-------------------------\n\t\t\t\t \"start\": \"vite serve --host --port 4000\",\n\t\t\t\t-------------------------\n\t\t\t- `docker build -t edwardtanguay/step3reactnodeexpressdata-frontend .`\n\t\t\t- `docker run -p 4000:4000 edwardtanguay/step3reactnodeexpressdata-frontend`\n\t\t- x test with container frontend and host backend\n\t- put both together in docker-compose\n\t\t- create in parent directory: **docker-compose.yml**\n\t\t\t---------------------------------------\n\t\t\t#{remove}\n\t\t\tversion: \"3\"\n\t\t\tservices:\n\t\t\t\tclient:\n\t\t\t\t\tcontainer_name: frontend\n\t\t\t\t\trestart: always\n\t\t\t\t\tbuild: ./step3reactnodeexpressdata-frontend\n\t\t\t\t\tports: \n\t\t\t\t\t\t- \"4000:4000\"\n\t\t\t\t\tlinks:\n\t\t\t\t\t- api\n\t\t\t\tapi:\n\t\t\t\t\tcontainer_name: api\n\t\t\t\t\trestart: always\n\t\t\t\t\tbuild: ./step3reactnodeexpressdata-backend\n\t\t\t\t\tports: \n\t\t\t\t\t- \"5000:5000\"\n\t\t\t---------------------------------------\n\t\t- `docker-compose build`\n\t\t- `docker-compose up`\n\t\t- starts both and works: ##thecomsposkjworksdoc","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-03-15 19:13:02","systemWhoCreated":"systemUnknown"},{"id":697,"category":"DevOps","title":"Overview of DevOps","body":"- what we will do\n\t- the purpose of this howto is to **give MERN-stack students** an overview of **DevOps** and everything it entails\n\t- this is not a practical howto but **a theoretical explanation** which will help the MERN-student to \n\t\t- better understand how their frontend and backend skills fit into **the complete landscape of IT projects** they will be a part of building\n\t\t- be able to better **discuss deployment and architecture** in job interviews for developer positions\n\t\t- more readily *8take on responsibility of DevOps tasks** and arcitectural planning in IT projects\n- why learn about DevOps\n\t- an increasing number of [jobs](https://jobs.tanguay.eu) require frontend and backend developers to have DevOps skills\n\t- DevOps skills are becoming more important in our industry as as companies \n\t\t- build more comprehensive **distributed applications**\n\t\t- process **larger amounts of data** \n\t\t- continue to move their infrastructures from self-managed hardware to **cloud solutions**\n\t\t- demand more agile and **immediate deployment of changes and versioning**\n\t- MERN-stack curriculums typically lack coverage of the following skills which are nevertheless sought by most companies:\n\t\t- TypeScript \n\t\t- testing (Jest, Vitest, Supertest, Cypress, Mocha/Chai)\n\t\t- server-side rendering (Next.js)\n\t\t- the other two frameworks (Vue.js, Angular)\n\t\t- DevOps (Docker, CI/CD, AWS)\n- DEVOPS OVERVIEW\n\t- DevOps is the integration between the \"Sofware **Dev**evlopment\" and \"IT **Op**eration**s**\" departments\n\t\t- Continuous Integration\n\t\t\t- the **build** and **test** phases\n\t\t\t- testing can be everyting from\n\t\t\t\t- testing for syntax errors\n\t\t\t\t- end-to-end testing of software\n\t\t\t- the process of combining updates into an existing code base\n\t\t- Continuous Delivery = relase, deploy\n\t\t\t- Continuous Deployment = the term used when this process is **completely automated**\n\t\t\t\t- practed by \n\t\t\t\t\t- brand new start-ups where agility is more important than liability\n\t\t\t\t\t- well-establish companies that have built up 100% testing to catch all issues automatically\n\t\t\t- gets your updates into the hands of the users\n\t\t\t- may be \n\t\t\t\t- an upload of a file to be downloaded \n\t\t\t\t- setting up a website\n\t\t\t- usually has release events\n\t\t\t\t- times when it will have low-impact on users\n\t- it solved the problem of the disconnect between creating software and deploying it\n\t- one can say that as DevOps became increasingly automated, it developed the CI/CD approach\n\t- became common around 2010 in larger projects to automate work between these two groups \n\t- trend/concept: **as-a-service**\n\t\t- SaaS - Software-as-a-Service\n\t\t\t- Slack\n\t\t\t- Google Docs\n\t\t\t- Dropbox\n\t\t- PaaS - Platform-as-a-Service\n\t\t\t- Heroku, Cyclic, Render.com\n\t\t\t- AWS Beanstalk\n\t\t- IaaS - Infrastructure-as-a-Service \t\n\t\t\t- AWS\n\t\t\t- Azure\n\t- **the DevOps life-cycle**\n\t\t- development stages: plan, code, build, test\n\t\t- operational stages: release, deploy, operate, monitor##devopslifescyle\n\t- if you are a web developer, you basically have three areas in which you need skills\n\t\t- Frontend\n\t\t- Backend\n\t\t- DevOps\n\t\t- here is a good overview, from 2020, but still servers as a relevant orientation guide and checklist for the scope of technologies that one should know as a web developer today\n\t\t\t- https://coggle.it/diagram/XfeRbWj7xy3dsEX8/t/web-development-in-2020\n\t- [DevOps Graphical Overview](https://coggle.it/diagram/ZBqphgAjwnrfsZ0h/t/devops)##devopscoggg11122233\n- **== Infrastructure Platforms =====**\n\t- **AWS**\n\t\t- **AWS Lambda**\n\t\t\t- 2014 introduced\n\t\t\t- a computing service that runs code in response to events and automatically manages the computing resources required by that code\n\t\t\t- https://en.wikipedia.org/wiki/AWS_Lambda\t\t\n\t- **Azure**\n\t\t- ARM (Azure Resource Manager) - Microsoft's deployment and management service for Azure, used to create, update, and delete Azure resources\t\t\n\t- **Google Cloud**\n\t- simpler infrastructure\n\t\t- **DigitalOcean**\n\t\t- **Hetzner**\n\t- alternatives\n\t\t- **OpenStack**\n\t\t\t- created 2010\n\t\t\t- often seen as an **alternative to AWS and Azure**\n\t\t\t- **freely available** under the Apache 2.0 license\n\t\t\t\t- you may be more on your own\n\t\t\t- written in Python\n\t\t\t- main site: https://www.openstack.org\n\t\t\t- a collection of modules called projects\n\t\t\t- can used many computers to perform big data tasks\n\t\t\t- a set of software components that provide common services for cloud infrastructure\n\t\t\t- a free, open standard cloud computing platform\n\t\t\t- mostly deployed as infrastructure-as-a-service \n\t\t\t- no LinkedIn videos\t\n- **== Container Virtualization =====**\n\t- **Docker**\n\t\t- the de facto standard for building containers and running them in various environments\n\t- small scale\n\t\t- deploy and run containers on DigitalOcean or Hetzner\n\t- medium scale \n\t\t- **Docker Swarm**\n\t\t\t- Article: [Docker Swarm on DigitalOcean](https://www.digitalocean.com/community/tutorials/how-to-create-a-cluster-of-docker-containers-with-docker-swarm-and-digitalocean-on-ubuntu-16-04)\t\n\t\t- **AWS Fargate**\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2019-en: https://www.linkedin.com/learning/aws-devops-continuous-docker-deployment-to-aws-fargate-from-gitlab\n\t\t\t- a serverless, pay-as-you-go compute engine that lets you focus on building applications without managing servers\n\t- large scale\n\t\t- **Kubernetes**\n\t\t\t- a complex framework for orchestrating containers\n\t\t\t- main site: https://kubernetes.io\n\t\t\t- 2019,de: https://www.linkedin.com/learning/kubernetes-grundlagen-fur-entwickler\n\t\t- tools that work with Kubernetes\n\t\t\t- **Helm**\n\t\t\t\t- a package manager for running apps on Kubernetes\n\t\t\t\t- main site: https://helm.sh\t\n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- 2020-en: https://www.linkedin.com/learning/kubernetes-package-management-with-helm\n\t\t\t- **Rancher**\n\t\t\t\t- is not an alternative solution to Kubernetes\n\t\t\t\t- it manages multiple Kubernetes clusters\n\t\t\t\t- main site: https://www.rancher.com\n\t\t\t\t- adds a complete UI and workload management layer to Kubernetes\n\t\t\t\t- a framework for managing and orchestrating containers or Kubernetes clusters\n\t\t\t- **Istio**\n\t\t\t\t- an open source service mesh that layers transparently onto existing distributed applications\n\t\t\t\t- Istio’s control plane runs on Kubernetes\n\t\t\t\t- main site: https://istio.io/latest/about/service-mesh\n\t\t\t\t- service mesh\n\t\t\t\t\t- a dedicated infrastructure layer for facilitating service-to-service communications between services or microservices, using a proxy\n\t\t\t\t\t- provides a set of tools and services for managing and controlling the interactions between microservices, including traffic routing, load balancing, service discovery, security, and observability\n\t\t\t\t\t- in a service mesh architecture, each microservice is equipped with a sidecar proxy that intercepts and manages all network traffic to and from the microservice\n\t\t\t\t\t- popular service mesh solutions include Istio, Linkerd, and Envoy\t\t\t\t\n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- 2018-en: https://www.linkedin.com/learning/kubernetes-monitoring-with-prometheus\n\t- container registries\n\t\t- container registry\n\t\t\t- a software application that is used to store, manage, and distribute container images\n\t\t\t- provides a central location for storing and sharing container images among developers, testers, and other stakeholders in the software development and deployment process\n\t\t- articles\n\t\t\t- [How to Choose a Container Registry: The Top 9 Picks](https://bluelight.co/blog/how-to-choose-a-container-registry)\n\t\t- **Docker Hub**\n\t\t\t- the most popular container registry as it is the default Docker Repository\n\t\t- **Amazon ECR**\n\t\t\t- main site: https://aws.amazon.com/de/ecr\n\t\t- **GitHub Package Registry**\n\t\t\t- 2020 release support for container images\n\t\t\t- not the container registry packed with the most features\n\t\t\t- but the price is lower in comparison\n\t\t\t- main site: https://github.com/features/packages\n\t\t- **Sonatype Nexus**\n\t\t\t- used by software development teams to store, manage and distribute software artifacts, such as libraries, dependencies, and components, across the development lifecycle\n\t\t\t- provides a central location for teams to share and distribute components \n\t\t\t- helps with the management of software development workflows and builds\n\t\t\t- manages components, binaries and build artifacts across software supply chains\n\t\t\t- supports various repository formats such as Maven, Docker, npm, RubyGems, PyPI\n\t\t\t- main site: https://www.sonatype.com/products/nexus-repository\n\t\t\t- no Linked-In-Learning courses\t\n\t- virutal machines\n\t\t- VirtualBox\n\t\t\t- a free operating-system virtualization package from Oracle \n\t\t\t- Linked-In-Learning:\n\t\t\t\t- 2020-en: https://www.linkedin.com/learning/learning-virtualbox-2\n\t\t- KVM\n\t\t\t- s smaller and faster than VirtualBox, but VirtualBox is more scalable\n\t\t\t- KVM is better integrated with Linux, and while it will work with other guests, it works best with Linux\n\t\t- **Vagrant**\n\t\t\t- used to preserve purpose-build, isolated development environments\n\t\t\t- a Vagrant VM is frozen in time\n\t\t\t- main site: https://www.vagrantup.com\n\t\t\t- think of Vagrant as a scripting engine for VirtualBox\n\t\t\t- Stack Overflow: [Why should I use Vagrant instead of just VirtualBox?](https://superuser.com/questions/584100/why-should-i-use-vagrant-instead-of-just-virtualbox)\n\t\t\t- \"Don't use vagrant if you dont need it. Use vagrant when you find creating VMs is becoming tedious.\"\n\t\t\t- Linked-In-Learning:\n\t\t\t\t- 2018-en: https://www.linkedin.com/learning/learning-vagrant\t\t\t\t\n\t\t- LXC and LXD\n\t\t\t- 2008 created\n\t\t\t- an operating-system-level virtualization software\n\t\t\t- LXC containers are very much like a virtual machine, but significantly lighter weight since it is sharing the host kernel with the LXC host.\n\t\t\t- *\"a common confusion for potential users of LXD is that LXD is an alternative to Docker or Kubernetes. However, LXD and Docker are not competing container technologies, and they tend to serve completely different purposes\"*\n\t\t\t- LXC provides a simple and lightweight containerization solution, while LXD provides a more complete management and orchestration platform for containers\t\t\t\n- **== Server and Configuration Management =====**\n\t- concepts\n\t\t- infrastructure-as-code\n\t\t- provisioning\n\t\t\t- automatically setting up and configuring the infrastructure required to build, test, and deploy software applications\n\t\t\t- when a new version of the software is ready to be tested or deployed, the CI/CD system triggers a provisioning process that creates the necessary environment for that version. This environment could include virtual machines, containers, databases, load balancers, or other components needed for the software to run\n\t\t\t- is typically automated using tools like Terraform or Ansible\t\n\t- comparisons\n\t\t- VIDEO: [Chef vs Puppet vs Ansible vs Saltstack](https://www.youtube.com/watch?v=_TVNCTK808I)\n\t- **Terraform**\n\t\t- 2014 created by HashiCorp\n\t\t- it is a **command-line program**\n\t\t- it is also a **language**##tehterrasform\n\t\t- free and open-source\n\t\t- lets you provision, manage and maintain cloud resources\n\t\t\t- servers\n\t\t\t- storage\n\t\t\t- networking\n\t\t- an **infrastructure-as-code** software tool \n\t\t- HCL: HashiCorp Configuration Language\n\t\t- rather than using imperative commands to provision resources\n\t\t\t- Terraform uses **declarative configuration** to describe the desired final state\n\t\t- often used with AWS\n\t\t- LinkedIn-Learning\n\t\t\t- 2022-en: https://www.linkedin.com/learning/learning-terraform-15575129\t\n\t- **Ansible**\n\t\t- 2012 created\n\t\t- 2015 acquired by Red Hat\n\t\t- configures both Unix-like and Microsoft Windows\n\t\t- a suite of software tools that enables **infrastructure as code**\n\t\t- Linked-In-Learning course:\n\t\t\t- 2021-en: https://www.linkedin.com/learning/ansible-essential-training-14199798\n\t- **Salt** (also known as **SaltStack**)\n\t\t- an open-source configuration management and automation software tool used to manage and provision servers, cloud resources, and software applications\n\t\t- main site: https://docs.saltproject.io/en/getstarted\n\t\t- no Linked-In-Learning courses\n\t- **Puppet**\n\t\t- configuration management tool\n\t\t- a configuration management tool that automates the deployment and management of software and systems\n\t\t- LinkedIn\n\t\t\t- 2015-de: https://www.linkedin.com/learning/konfigurationsmanagement-mit-puppet\t\n\t- **Chef**\n\t\t- 2008 created\n\t\t- configuration management tool\n\t\t- automates the process of deploying and managing software applications and infrastructure\n\t\t- uses a declarative approach to define the desired state of servers, workstations, and other computing devices\n\t\t- concepts: kitchen, recipes and cookbooks\n\t\t\t- how to install, configure, and manage specific software packages, applications, or services\n\t\t- key benefit\n\t\t\t- ability to automate the entire software deployment process, from initial installation and configuration to ongoing maintenance and updates\n\t\t- LinkedIn\n\t\t\t- 2017-en https://www.linkedin.com/learning/learning-chef\n\t- **AWS CloudFormation**\n\t\t- one of the pioneer tools that allowed infrastructure to be expressed as code\n\t\t- Linked-In-Learning course:\n\t\t\t- 2019-en: https://www.linkedin.com/learning/learning-aws-cloudformation\n\t\t- expressed in JSON or YAML format##cloudformksjdf\n\t\t- cloud formation services##thecloudformation\t\t\t\t\n- **== Operational Visibility =====**\n\t- **Monitoring**\n\t\t- **Grafana**\n\t\t\t- 2014 created\n\t\t\t- main site: https://grafana.com\n\t\t\t- try the interactive [Grafana sandbox](https://play.grafana.org)\n\t\t\t- **free and open-source** software licensed under the Apache License 2.0\n\t\t\t\t- Grafana Labs also supports commercial features\n\t\t\t- you can get a **free forever plan** to test it out\n\t\t\t- written in TypeScript (frontend) and Go (backend)\n\t\t\t- expandable through plugin system\n\t\t\t- an analytics and interactive visualization tool that helps devops visualize and analyze system data in real-time\n\t\t\t- mainly targets **time-series databases** such as InfluxDB, Prometheus and Graphite\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- https://www.linkedin.com/learning/graphite-and-grafana-visualizing-application-performance\n\t\t\t- evolved to support MySQL, PostgreSQL and Microsoft SQL Server.#gif#grafanahshow\n\t\t- **DataDog**\n\t\t\t- main site: https://www.datadoghq.com\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- https://www.linkedin.com/learning/monitoring-and-observability-with-datadog\n\t\t\t- an observability service for cloud-scale applications, providing monitoring, tracing, debugging of servers, databases, tools, and services##thedatadogsdf\n\t\t- **New Relic**\n\t\t\t- monitors Web and mobile applications in real-time\n\t\t\t- **not free**, has various paid plans\n\t\t\t- main site: https://newrelic.com##thenewreleic\n\t\t- **Sentry**\n\t\t\t- an open-source error tracking and monitoring software that helps developers identify and fix errors in their applications\n\t\t\t- has a **hard-to-understand business model**\n\t\t\t\t- you can use the open source version of Sentry, which is free, by pulling it down from GitHub and hosting it yourself\n\t\t\t\t- there is a limited [free tier](https://sentry.io/pricing) for the hosted service plus many paid plans\n\t\t\t- detailed error reports, including stack traces\n\t\t\t- main site: https://sentry.io\n\t\t\t- integration with GitHub, Slack, and Jira##thesentrysok\n\t\t- **Prometheus**\n\t\t\t- event monitoring and alerting software written in Go\n\t\t\t- main site: https://prometheus.io\t\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2018-en: https://www.linkedin.com/learning/kubernetes-monitoring-with-prometheus\n\t\t- **Nagios**\n\t\t\t- open-source tool used for monitoring IT infrastructure such as servers, applications, network devices, and services\n\t\t\t- originally developed in 1999\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2018-en: https://www.linkedin.com/learning/learning-nagios\n\t\t- **AWS CloudWatch**\n\t\t\t- resources monitored by CloudWatch##watchedbycloudwatch\n\t- **Logging**\n\t\t- **ELK Stack** - or \"Elastic Stack\"\n\t\t\t- **Elasticsearch**\n\t\t\t\t- both this and Apache Solr are based on Lucene\n\t\t\t- **Logstash**\n\t\t\t\t- a tool to collect, analyze and store logs\n\t\t\t- **Kibana**\n\t\t\t\t- open source data visualization dashboard for Elasticsearch\n\t\t\t- Beats\n\t\t\t\t- lightweight, purpose-built agents that acquire data and then feed it to Elasticsearch\n\t\t\t- can also be expensive\n\t\t\t\t- leave the authentication capabilities to the enterprise edition\n\t\t\t- search is fast\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2020-en: https://www.linkedin.com/learning/learning-the-elastic-stack-2\n\t\t- **Sematext**\n\t\t\t- main site: https://sematext.com\n\t\t\t- see live demo: https://apps.sematext.com/ui/integrations/apps##tehsematextok\n\t\t- **GrayLog**\n\t\t\t- an open-source log management platform that collects, indexes, and analyzes large volumes of machine-generated log data from various sources\n\t\t\t- allows users to search and visualize log data from multiple sources in real-time\n\t\t\t- offers features such as alerting, dashboards, reporting\n\t\t\t- compared to [Kibana and Splunk](https://thehftguy.com/2020/08/04/the-differences-between-splunk-kibana-and-graylog)\n\t\t\t\t- they are 90% the same\n\t\t\t\t- they all work well and at scale\n\t\t\t\t- they can all be expensive\n\t\t\t- consists of several components, including \n\t\t\t\t- a web interface\n\t\t\t\t- a server for collecting and processing log data\n\t\t\t\t- uses **Elasticsearch** for indexing and storing the data\n\t\t\t\t-  a RESTful API for interacting with the platform programmatically\n\t\t\t- main site: https://www.graylog.org\n\t\t\t- no Linked-in-Learing courses\n\t\t- **Splunk**\n\t\t\t- a tool for analyzing and searching incoming machine-generated data like application or database logs\n\t\t\t- very expensive, *puts Oracle to shame*\n\t\t\t- ideal for monitoring the health of IT infrastructure, especially networks with complex and aging systems, and software in production\n\t\t\t- main competitor: ELK\n\t\t\t- performance in search is abysmal\n\t\t\t\t- whereas ElasticSearch (Graylog and Kibana) can complete the same search just fine in a couple seconds\n\t\t\t- has good support for join and transformations\n\t\t\t\t- ELK does not\n\t\t\t- main site: https://www.splunk.com\n\t\t\t- has dashboards for visual insights \n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2018-en: https://www.linkedin.com/learning/learning-splunk\n\t- **Big data**\n\t\t- **Apache projects**\n\t\t\t- **Hadoop**\n\t\t\t\t- 2006 created\n\t\t\t\t- pr. [hah-DOOP]\n\t\t\t\t- a collection of open-source software utilities that facilitate using a **network of many computers** to solve problems involving **massive amounts of data and computation**\n\t\t\t\t\t- uses a network of computers to solve problems such as data crunching and computation\n\t\t\t\t- an open source framework that is used to efficiently store and process large datasets ranging in size from gigabytes to petabytes of data\n\t\t\t\t- Apache project\n\t\t\t\t- consists of a storage part, known as Hadoop Distributed File System (HDFS), and a processing part which is a MapReduce programming model\n\t\t\t\t- Internet used to only have documents\n\t\t\t\t\t- Big Data: around 2005 this changed to be all kinds of data: videos, audio, images, emails, etc.\n\t\t\t\t- two parts\n\t\t\t\t\t- 1. HDFS stores data in numerous sources\n\t\t\t\t\t\t- fault-tolerant\n\t\t\t\t\t- 2. MapReduce\n\t\t\t\t\t\t- processes separately and then collects data together\n\t\t\t\t- works together with others tools for Big Data management\n\t\t\t\t\t- **Apache Hive**\n\t\t\t\t\t\t- s SQL-like query language taht generates MapReduce code\n\t\t\t\t\t- **Apache Pig**\n\t\t\t\t\t\t- ETL library for Hadoop\n\t\t\t\t\t\t\t- an abstract language\n\t\t\t\t\t\t- **ETL = Extract, Transform, Load**\n\t\t\t\t\t\t\t- a data integration process that combines data from multiple data sources into a single, consistent data store that is loaded into a data warehouse or other target system\n\t\t\t\t\t- **Apache Spark**\n\t\t\t\t\t\t- 2014 created\n\t\t\t\t\t\t- in-memory distributed data analysis\n\t\t\t\t\t\t\t- enables **faster queries**\n\t\t\t\t\t\t- an open-source distributed general-purpose cluster-computing framework\n\t\t\t\t\t\t- Cloudera Impala were vendor-added features to Hadoop\n\t\t\t\t\t\t\t- Spark is the open-source community's response to this\n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- 2020-en: https://www.linkedin.com/learning/learning-hadoop-2\t\t\n\t\t\t- **Kafka**\n\t\t\t\t- also an Apache project\n\t\t\t\t- an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications\n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- 2019-en: https://www.linkedin.com/learning/learn-apache-kafka-for-beginners\n\t\t- time-series databases \n\t\t\t- InfluxDB\n\t\t\t\t- an open-source time series database that is designed to handle high write and query loads of time-stamped data\n\t\t\t\t- main site: https://www.influxdata.com\n\t\t\t\t- uses a SQL-like query language called InfluxQL \n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- https://www.linkedin.com/learning/introduction-to-influxdb\n\t\t\t- Graphite\t\t\n\t\t\t\t- does two things\n\t\t\t\t\t- stores numeric time-series data\n\t\t\t\t\t- renders graphs on this data on demand\n\t\t\t\t- main site: https://graphite.readthedocs.io/en/latest/overview.html\n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- 2018-en: https://www.linkedin.com/learning/graphite-and-grafana-visualizing-application-performance\n\t\t\t\t\t\t- (Graphite with Grafana)\n- **== Continuous Integration / Continuous Deployment (CI/CD) =====**\n\t- Linked-In-Learning course:\n\t\t- 2020-en: https://www.linkedin.com/learning/continuous-integration-tools\n\t- hosted solutions\n\t\t- **GitHub Actions**\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2021-en: https://www.linkedin.com/learning/learning-github-actions-2\n\t\t- **CircleCI**\n\t\t\t- uses Docker containers to build CI/CD steps\n\t\t\t- main site: https://circleci.com\n\t\t\t- watch demonstration: https://circleci.com/product/demo\n\t\t\t- free tier: \n\t\t\t\t- 1000 build units each month\n\t\t\t\t- unlimited number of repos\n\t\t\t\t- online one container\n\t\t\t- Orbs\n\t\t\t\t- sharable packages of CircleCI configuration\n\t\t\t- YAML configuration files##ymlconfigfiles\n\t\t\t- various stages have dependencies on other stages##thecirclisi\n\t\t- **Codeship**\n\t\t\t- main site: https://www.cloudbees.com/products/codeship\n\t\t\t- two versions\n\t\t\t\t- Codeship Basic\n\t\t\t\t\t- free\n\t\t\t\t\t- 100 builds/month\n\t\t\t\t\t- 1 concurrent build\n\t\t\t\t\t- unlimited users and teams\n\t\t\t\t- Codeship Pro\n\t\t\t\t\t- priced\n\t\t\t\t- uses Python \n\t\t\t- codeship.yml\n\t\t\t\t- stored in repository along with the respositories code##thecodeship\n\t\t\t- shows build steps##thesecondcodeship\n\t\t- **GitLab**\n\t\t\t- can be used like GitHub: https://gitlab.com\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2022-en: https://www.linkedin.com/learning/continuous-integration-and-continuous-delivery-with-gitlab\n\t- internal solutions\n\t\t- **GitLab**\n\t\t\t- originally focused on source control like GitHub\n\t\t\t- vs GitHub\n\t\t\t\t- GitHub primary competitor \n\t\t\t\t- GitLab strives to be an end-to-end CI/CD solution in a way that GitHub does not\n\t\t\t\t\t- e.g. adopting GitLab over GitHub might allow you to replace Jenkins\n\t\t\t\t- but GitLab is plug-and-play flexible, doesn't force you to use their solutions\n\t\t- **Jenkins**\n\t\t\t- automation framework\n\t\t\t- used in the build, test, release and deploy stages##jenkscycle\n\t\t\t- once test has passed, the artifact can be moved to the next stage\n\t\t\t- Linked-In-Learning courses:\n\t\t\t\t- 2022-en**: https://www.linkedin.com/learning/jenkins-essential-training-17420152\n\t\t\t\t- 2017,de: https://www.linkedin.com/learning/jenkins-grundkurs\t\n\t\t- **Gradle**\n\t\t\t- a build automation tool for multi-language software development that controls the development process from compilation and packaging to testing, deployment, and publishing, supported languages include Java, Kotlin, Groovy, Scala, C/C++, and JavaScript\t\n\t\t\t- can use it **inside Jenkings**\n\t\t\t\t- Linked-In-Learning course:\n\t\t\t\t\t- 2020-en: https://www.linkedin.com/learning/learning-gradle\t\t\t\t\n\t\t- **Maven**\n\t\t\t- 2004 created\n\t\t\t-  a build automation tool used primarily for Java project\n\t\t\t- Linked-In-Learning course:\n\t\t\t\t- 2019-en: https://www.linkedin.com/learning/introducing-maven\t\t\t\t\t\t\t\t\t\t\n\t\t- **DroneCI**\n\t\t\t- open-source project\n\t\t\t- main site: https://www.drone.io\n\t\t\t- also called Drone.io\n\t\t\t- is competition to Jenkins\n\t\t\t\t- https://boom.co/blogs/drone-ci-for-engineering-teams\n\t- test automation\n\t\t- Selenium\n\t\t- Cypress\n- **== Microservices =====**\n\t- a architecture style that structures an application as a collection of services that are:\n\t\t- small\n\t\t- independent\n\t\t- loosely coupled\n\t\t- widely distributed\n\t- building on efficiencies of DevOps and CI/CD, microservices increase speed at which software can be updated and deployed\n\t\t- smaller teams responsible for one services (e.g. orders) can make a quick change and deloy it without redeploying the whole application\t\n\t- concepts \n\t\t- functional decomposition\n\t\t- each service manages its data source\n\t\t\t- data access to it is only via the service's API\n\t\t\t- encourages event-driven architecture\n\t- advantages\n\t\t- enables smaller and more focused teams \n\t\t- fits better into a CI/CD structure\n\t\t- more scalable\n\t\t- more flexible\n\t\t\t- you can deploy smaller changes more easily\n\t\t\t\t- e.g. the shopping-cart team can continually make small improvements that customers see without launching a new application version\n\t\t- more resilient\n\t\t\t- if one service fails, the others can gracefully react\n\t- disadvantages\n\t\t- complexity\n\t\t- partial failure\n\t\t- split up databases, but still need transitions\n\t\t- testing is more complicated\n\t\t- deploying can be more complex\n\t\t- but there are solutions to most of these problems now\n\t\t\t- monoliths tend to not have solutions to their drawbacks\t\t\n- **LEARN MORE**\n\t- peruse **job ads** and identify skills and tools on the above DevOps landscape\n\t\t- https://jobs.tanguay.eu (search for \"devops\")\n\t\t- StepStone: https://www.stepstone.de/jobs/devops\n\t\t- Jobware: https://www.jobware.de/jobsuche?jw_jobname=devops\n\t- identify DevOps skills and tools in **Google Images**\n\t\t- search for [devops technologies](https://www.google.com/search?q=devops+technologies&client=firefox-b-d&sxsrf=AJOqlzXEvTM0mBCafm5b4s_Q7wttPMhN9A:1679638362553&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi5sc2_9PP9AhXBSPEDHYKHDj8Q_AUoAXoECAEQAw&biw=1920&bih=909&dpr=1) in Google Images\n\t\t- e.g. popular DevOps tools##thepopulartolsdevops\n\t\t- e.g. DevOps Toolchain Roundup:##advanceddveop\n\t- type the new techology followed by **vs** in Google to find comparisons to it##tiptolocate","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-03-22 18:30:47","systemWhoCreated":"systemUnknown"},{"id":698,"category":"Debounce","title":"Example of debounce for a search box in a React site with TypeScript","body":"- **what we will do**\n\t- build an example of debounce to force a search box handler function to call an API at a slower interval\n- **why you would want a debounce function**\n\t- usually you want to give your users the fastest response time\n\t- so often in search boxes, you respond to every key stroke\n\t- however, if responding to the key stroke involves calling an API\n\t\t- then this can lead to excessive and unnecessary calls to the API\n\t- therefore you want a way to say, e.g. that the user can type as fast as they want\n\t\t- but the text they are typing will only be sent to the API at an interval of e.g. **every two seconds**\n\t- note this example is in **TypeScript** so it has the necessary types in the debounce function, e.g.\n\t\t- `ReturnType<typeof setTimeout>`\n\t\t- `fn: Function`\n- **code is here**\n\t- https://github.com/edwardtanguay/et001-debounce\n- **site works like this**\n\t- note how we reduce the number of times the API is called significantly by raising the amount of waiting between API calls from 0 to 2 seconds#gif#debounceexample2\n- **App.tsx**\n\t-------------------------------------------------------\n\timport { useState, useEffect } from 'react';\n\timport './App.scss';\n\timport axios from 'axios';\n\n\tconst secondsToWait = 2;\n\n\tinterface IBook {\n\t\tid: number;\n\t\ttitle: string;\n\t}\n\n\tfunction App() {\n\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\t\tconst [searchText, setSearchText] = useState('');\n\t\tconst [timesApiAccessed, setTimesApiAccessed] = useState(0);\n\t\tconst [initialDataLoaded, setInitialDataLoaded] = useState(false);\n\t\tconst [isWaiting, setIsWaiting] = useState(false);\n\n\t\tconst debounce = (fn: Function, ms = 300) => {\n\t\t\tlet timeoutId: ReturnType<typeof setTimeout>;\n\t\t\treturn function (this: any, ...args: any[]) {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\ttimeoutId = setTimeout(() => {\n\t\t\t\t\tsetIsWaiting(false);\n\t\t\t\t\tfn.apply(this, args);\n\t\t\t\t}, ms);\n\t\t\t};\n\t\t};\n\n\t\tconst searchApi = () => {\n\t\t\tconst url = `https://edwardtanguay.vercel.app/share/techBooks.json`;\n\t\t\t(async () => {\n\t\t\t\tconst data = (await axios.get(url)).data;\n\t\t\t\tconst _originalBooks = data;\n\t\t\t\tconst _books = _originalBooks.filter((m: IBook) =>\n\t\t\t\t\tm.title.toLowerCase().includes(searchText.toLowerCase())\n\t\t\t\t);\n\t\t\t\tsetBooks(_books);\n\t\t\t\tif (initialDataLoaded) {\n\t\t\t\t\tsetTimesApiAccessed(timesApiAccessed + 1);\n\t\t\t\t\tconsole.log('here');\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\tconst debounceSearch = debounce(searchApi, secondsToWait * 1000);\n\n\t\tuseEffect(() => {\n\t\t\tif (!initialDataLoaded) {\n\t\t\t\tsearchApi();\n\t\t\t} else {\n\t\t\t\tif (!isWaiting) {\n\t\t\t\t\tsetIsWaiting(true);\n\t\t\t\t\tdebounceSearch();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetInitialDataLoaded(true);\n\t\t}, [searchText]);\n\n\t\tconst handleSearchTextChange = (_searchText: string) => {\n\t\t\tsetSearchText(_searchText);\n\t\t};\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"supertitle\">Debounce Example</div>\n\t\t\t\t<h1>Search Gutenberg Books</h1>\n\t\t\t\t<div className=\"searchArea\">\n\t\t\t\t\tSearch:{' '}\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={searchText}\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tonChange={(e) => handleSearchTextChange(e.target.value)}\n\t\t\t\t\t/>{' '}\n\t\t\t\t\t<div className=\"numberOfSeconds\">\n\t\t\t\t\t\tNumber of seconds to wait before accessing API:{' '}\n\t\t\t\t\t\t{secondsToWait}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"timesApiAccessed\">\n\t\t\t\t\t\tTimes API was accessed: {timesApiAccessed}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\n\t\t\t\t<h2>There are {books.length} books</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{books.map((book: IBook) => {\n\t\t\t\t\t\treturn <li key={book.id}>{book.title}</li>;\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n\n\texport default App;\t\n\t-------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-03-30 07:56:19","systemWhoCreated":"systemUnknown"},{"id":699,"category":"Node/Express","title":"Create a Node/Express backend with routing controllers, santizers and validators, and a frontend React site to fetch, display and add data","body":"- the finished site will work like this:#gif#demoemployeebackend2\n- **what we will do**\n\t- create **backend API** that has the following routes and features\n\t\t- `GET /` - info about API\n\t\t- `GET /employees` - shows all employees\n\t\t- `POST /employee` - creates a new employee\n\t\t- controllers\n\t\t\t- **employeeController** - handles all routes\n\t\t- middleware\n\t\t\t- **employeeSanitizer** \n\t\t\t\t- `sanitizeName` - capitalize first letter, e.g. `hans` to `Hans`\n\t\t\t\t- `sanitizeAge` - changes string to number\n\t\t\t- **employeeValidator** \n\t\t\t\t- `validateAge` - throws error if age is a negative number\n\t\t\t\t- `validateFirstName`- throws error if first name is blank\n\t\t\t\t- `validateLastName`- throws error if last name is blank\n\t\t- because we create controllers and middleware\n\t\t\t- our **server.js** is more **clearly arranged** and easy to understand\n\t\t\t- our code is separated into **clear responsibilities**\n\t\t\t- because of this separation of responsiblities, our code is more **reusable**\n\t- create **frontend** \n\t\t- one-page site with two sections\n\t\t\t- Add Employee\n\t\t\t\t- form that allows user to add employee \n\t\t\t\t- reacts appropriately based on response from backend\n\t\t\t- Show Employees\n\t\t\t\t- lists out all employees\n- **code is here**:\n\t- backend\n\t\t- https://github.com/edwardtanguay/et002-employeesite-backend\n\t- frontend\n\t\t- https://github.com/edwardtanguay/et002-employeesite-frontend\n- **== CREATE PROJECT DIRECTORIES==**\n\t- `et002-employeesite`\n\t\t- `et002-employeesite-backend`\n\t\t- `et002-employeesite-frontend`\n- **== CREATE BACKEND ==**\n\t- **open VSCode** \n\t\t- `cd et002-employeesite-backend`\n\t\t- `code .`\n\t- **set up simple Node/Express server with test /employees route**\n\t\t- set up npm project\n\t\t\t- `npm init -y`\n\t\t\t- add `\"type\": \"module\",`\n\t\t- import tools you need\n\t\t\t- `npm i express` - to serve data on routes\n\t\t\t- `npm i -D nodemon` - to restart Node server (`-D` = dev dependencies)\n\t\t- create **src/server.js**\n\t\t\t--------------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3333;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('COMPANY API');\n\t\t\t});\n\n\t\t\tapp.get('/employees', (req, res) => {\n\t\t\t\tres.send('test: employees will be shown here');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t\t});\n\t\t\t--------------------------------------------\n\t\t- create run script\n\t\t\t- **package.json**\n\t\t\t\t-----------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon src/server.js\"\n\t\t\t\t},\n\t\t\t\t-----------------------------------\n\t\t- start the backend\n\t\t\t- `npm run dev`\n\t\t- test it in browser\n\t\t\t- CTRL-click the link##click333slkjolink\n\t\t\t- change to http://localhost:3333/employees##andemplous\n\t\t- test with REST client\n\t\t\t- make sure you have installed [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)\n\t\t\t- create in root directory: **test.rest**\n\t\t\t\t-----------------------------------------\n\t\t\t\t@url = http://localhost:3333\n\n\t\t\t\t### BASE\n\t\t\t\t{{url}}\n\n\t\t\t\t### EMPLOYEES\n\t\t\t\t{{url}}/employees\n\t\t\t\t-----------------------------------------\n\t\t\t- click on the `send resquest` links##onthessedndjres\n\t- **set up Git**\n\t\t- `git init -b main`\n\t\t- **.gitignore**\n\t\t\t---------------------------------\n\t\t\tnode_modules\n\t\t\t---------------------------------\n\t\t- push code\n\t- **add and serve data**\t\n\t\t- create **src/data/employees.json**\n\t\t\t--------------------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"firstName\": \"Alice\",\n\t\t\t\t\t\"lastName\": \"Fuller\",\n\t\t\t\t\t\"title\": \"Sales Manager\",\n\t\t\t\t\t\"age\": 35\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\"firstName\": \"Martin\",\n\t\t\t\t\t\"lastName\": \"Hornbeck\",\n\t\t\t\t\t\"title\": \"Sales Representative\",\n\t\t\t\t\t\"age\": 47\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 3,\n\t\t\t\t\t\"firstName\": \"Karin\",\n\t\t\t\t\t\"lastName\": \"Lombaster\",\n\t\t\t\t\t\"title\": \"Developer\",\n\t\t\t\t\t\"age\": 24\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": 4,\n\t\t\t\t\t\"firstName\": \"William\",\n\t\t\t\t\t\"lastName\": \"Groneger\",\n\t\t\t\t\t\"title\": \"Developer\",\n\t\t\t\t\t\"age\": 42\n\t\t\t\t}\n\t\t\t]\n\t\t\t--------------------------------------------\n\t\t- **server.js**: read from file\n\t\t\t--------------------------------------------\n\t\t\tconst rawEmployees = fs.readFileSync('./src/data/employees.json','utf8');\n\t\t\tconst employees = JSON.parse(rawEmployees);\n\t\t\tres.send(employees);\n\t\t\t--------------------------------------------\n\t\t- **server.js**: import file system object\n\t\t\t-------------------------------------\n\t\t\timport fs from 'fs';\n\t\t\t-------------------------------------\n\t\t- test it with test.rest##therestjsijwokdo\n\t- **refactor code into controller for employees**\n\t\t- reason: as we build more functionality for employee data, we want to have this all in one place\n\t\t- create **src/controllers/employeeController.js**\n\t\t\t-------------------------------------------------\n\t\t\timport fs from 'fs';\n\n\t\t\texport const getEmployees = (req, res) => {\n\t\t\t\tconst rawEmployees = fs.readFileSync('./src/data/employees.json', 'utf8');\n\t\t\t\tconst employees = JSON.parse(rawEmployees);\n\t\t\t\tres.send(employees);\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- **server.js**: simplify route\n\t\t\t-----------------------------------------\n\t\t\tapp.get('/employees', getEmployees);\n\t\t\t-----------------------------------------\n\t\t- test with test.rest\n\t- **add route `POST /employee`**\n\t\t- **src/controllers/employeeController.js**\n\t\t\t------------------------------------------------\n\t\t\texport const addEmployee = (req, res) => {\n\t\t\t\tconst employee = { ...req.body.employee };\n\t\t\t\tconst rawEmployees = fs.readFileSync('./src/data/employees.json', 'utf8');\n\t\t\t\tconst employees = JSON.parse(rawEmployees);\n\t\t\t\tconst employeeWithHighestId = employees.reduce((prev, current) => {\n\t\t\t\t\treturn prev.id > current.id ? prev : current;\n\t\t\t\t});\n\t\t\t\temployee.id = employeeWithHighestId.id + 1;\n\t\t\t\temployees.push(employee);\n\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t'./src/data/employees.json',\n\t\t\t\t\tJSON.stringify(employees, null, 2)\n\t\t\t\t);\n\t\t\t\tres.send({\n\t\t\t\t\tmessage: 'ok',\n\t\t\t\t\temployeeAdded: employee\n\t\t\t\t});\n\t\t\t};\n\t\t\t------------------------------------------------\n\t\t- **server.js**\n\t\t\t-------------------------------------\n\t\t\tapp.post('/employee', addEmployee);\n\t\t\t-------------------------------------\n\t\t- test with test.rest\n\t- **add santizers**\n\t\t- note if you add an employee with an ungrammatical name such as \"hans\" or an age that is a string, it simply saves it\n\t\t- this will cause problems with data integrity\n\t\t- we want to create a sanitizer which the employee is run through so that these issues are fixed before it is saved\n\t\t- create **src/middleware/employeeSanitizers.js**\n\t\t\t------------------------------------------------------\n\t\t\texport function sanitizeName(req, res, next) {\n\t\t\t\tconst { firstName, lastName } = req.body.employee;\n\t\t\t\treq.body.employee.firstName =\n\t\t\t\t\tfirstName.charAt(0).toUpperCase() + firstName.slice(1);\n\t\t\t\treq.body.employee.lastName =\n\t\t\t\t\tlastName.charAt(0).toUpperCase() + lastName.slice(1);\n\t\t\t\tnext();\n\t\t\t}\n\n\t\t\texport function sanitizeAge(req, res, next) {\n\t\t\t\treq.body.employee.age = Number(req.body.employee.age);\n\t\t\t\tnext();\n\t\t\t}\n\t\t\t------------------------------------------------------\n\t\t- **server.js**: add the sanitizers to the route\n\t\t\t-------------------------------------------------\n\t\t\tapp.post('/employee', sanitizeName, sanitizeAge, addEmployee);\n\t\t\t-------------------------------------------------\n\t\t- test with test.rest##thesantisjok\n\t- **add validators**\n\t\t- some errors in the data cannot be fixed and so must be rejected as errors, e.g. so the frontend can respond appropriate\n\t\t- we want to create a validator to throw an error if the first or last name is blank or if the age is not a positive number\n\t\t- create **src/middleware/employeeValidators.js**\n\t\t\t-------------------------------------------------------\n\t\t\texport function validateFirstName(req, res, next) {\n\t\t\t\tconst { firstName } = req.body.employee;\n\n\t\t\t\tif (firstName.trim() === '') {\n\t\t\t\t\tconst error = new Error('first name is required');\n\t\t\t\t\terror.status = 400;\n\t\t\t\t\tnext(error);\n\t\t\t\t}\n\n\t\t\t\tnext();\n\t\t\t}\n\n\t\t\texport function validateLastName(req, res, next) {\n\t\t\t\tconst { lastName } = req.body.employee;\n\n\t\t\t\tif (lastName.trim() === '') {\n\t\t\t\t\tconst error = new Error('last name is required');\n\t\t\t\t\terror.status = 400;\n\t\t\t\t\tnext(error);\n\t\t\t\t}\n\n\t\t\t\tnext();\n\t\t\t}\n\n\t\t\texport function validateAge(req, res, next) {\n\t\t\t\tconst { age } = req.body.employee;\n\n\t\t\t\tif (isNaN(age) || age <= 0 || age >= 120) {\n\t\t\t\t\tconst error = new Error('age must be between 1 and 120');\n\t\t\t\t\terror.status = 400;\n\t\t\t\t\tnext(error);\n\t\t\t\t}\n\n\t\t\t\tnext();\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------------------\n\t\t- **server.js**: add the validators to the route\n\t\t\t-------------------------------------------------\n\t\t\tapp.post('/employee', sanitizeName, sanitizeAge, validateFirstName, validateLastName, validateAge, addEmployee);\n\t\t\t-------------------------------------------------\n\t\t- **server.js**: add the error handling middleware\n\t\t\t-------------------------------------------------\n\t\t\tapp.use((err, req, res, next) => {\n\t\t\t\tres.status(err.status || 500);\n\t\t\t\tres.send({\n\t\t\t\t\terror: {\n\t\t\t\t\t\tmessage: err.message\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- test with test.rest##nowiwthwvalid\n- **== CREATE FRONTEND ==**\n\t- **create minimalized React frontend**\n\t\t- in your terminal, navigate to `et002-employeesite-frontend`\n\t\t- create a React site\n\t\t\t- `npm create vite`\n\t\t\t\t- don't forget the period (`.`) so that the files are created in the current directory##andtheviteagian\n\t\t- open your VSCode in that directory\n\t\t\t- `code .`\n\t\t- compile and start\n\t\t\t- `npm i`\n\t\t\t- `npm run dev`\n\t\t- click on the link, you should see:##clickonlinkshoulsshe\n\t\t- minimize the site:\n\t\t\t- `/assets` - delete\n\t\t\t- **index.html**: change title of site\n\t\t\t\t------------------------------\n\t\t\t\t<title>Company Site</title>\t\t\t\t\n\t\t\t\t------------------------------\n\t\t\t- **main.js**: remove React.StrictMode so useEffect doesn't load twice\n\t\t\t\t--------------------------------------\n\t\t\t\tReactDOM.createRoot(document.getElementById('root')).render(\n\t\t\t\t\t<App />\n\t\t\t\t)\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t\t- convert to Sass and minimize styles\n\t\t\t\t- `npm i sass`\n\t\t\t\t- **main.jsx**\n\t\t\t\t\t- delete line\n\t\t\t\t\t\t----------------------------------\n\t\t\t\t\t\timport './index.css'\n\t\t\t\t\t\t----------------------------------\n\t\t\t\t- delete file: `index.css`\n\t\t\t\t- rename file: `App.css` to `App.scss`\n\t\t\t\t- **App.jsx**\n\t\t\t\t\t---------------------------\n\t\t\t\t\timport './App.scss'\n\t\t\t\t\t---------------------------\n\t\t\t\t- **App.scss**: replace content with\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #333;\n\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\t\t\th1 {\n\t\t\t\t\t\t\tcolor: rgb(209, 168, 85);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t-------------------------------------\n\t\t\t- **App.jsx**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport './App.scss';\n\n\t\t\t\tfunction App() {\n\t\t\t\t  return (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t  <h1>Company Site</h1>\n\t\t\t\t\t  <p>test</p>\n\t\t\t\t\t</div>\n\t\t\t\t  );\n\t\t\t\t}\n\n\t\t\t\texport default App;\n\t\t\t\t---------------------------------------------\n\t\t- site should look like this:##nowminminjs\n\t- **set up Git repository**\n\t\t- `git init -b main`\n\t\t- commit as \"initial commit\" and push\n\t- **fetch employees from backend and display on page**\n\t\t- install axios\n\t\t\t- `npm i axios`\n\t\t- **App.jsx**: fetch employees from backend and display how many there are\n\t\t\t-----------------------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\t\t\timport './App.scss';\n\n\t\t\tconst backendUrl = 'http://localhost:3333';\n\n\t\t\tfunction App() {\n\t\t\t  const [employees, setEmployees] = useState([]);\n\n\t\t\t  useEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t  setEmployees((await axios.get(`${backendUrl}/employees`)).data);\n\t\t\t\t})();\n\t\t\t  }, []);\n\n\t\t\t  return (\n\t\t\t\t<div className=\"App\">\n\t\t\t\t  <h1>Company Site</h1>\n\t\t\t\t  <h2>Employees</h2>\n\t\t\t\t  <p>There are {employees.length} employees:</p>\n\t\t\t\t</div>\n\t\t\t  );\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\n\t\t\t-----------------------------------------------------\n\t\t- you will get a cors error##therrosjcors\n\t\t\t- fix cors error on **backend**\n\t\t\t\t- install cors\n\t\t\t\t\t- `npm i cors`\n\t\t\t\t- **server.js**: add these lines in their appropriate places\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\timport cors from 'cors';\n\n\t\t\t\t\tapp.use(cors());\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t- cors problem is solved##oknowowkrjks\n\t\t- **App.jsx**: list out employees\n\t\t\t---------------------------------------------------\n\t\t\t<div className=\"employees\">\n\t\t\t\t{employees.map(employee => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"employee\" key={employee.id}>\n\t\t\t\t\t\t\t<div className=\"fullName\">{employee.firstName} {employee.lastName}</div>\n\t\t\t\t\t\t\t<div className=\"title\">{employee.title}</div>\n\t\t\t\t\t\t\t<div className=\"age\">Age: {employee.age}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t---------------------------------------------------\n\t\t- **App.scss**: add styles\n\t\t\t--------------------------------------------------\n\t\t\t.employees {\n\t\t\t\t.employee {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\twidth: 20rem;\n\n\t\t\t\t\t.fullName {\n\t\t\t\t\t\tcolor: rgb(201, 135, 12);\n\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t}\n\t\t\t\t\t.title {\n\t\t\t\t\t\tcolor: rgb(229, 229, 128);\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t}\n\t\t\t\t\t.age {\n\t\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- site should look like this:##nowthempejsijsok\n\t- **create form to that adds an employee to the backend data**\n\t\t- create HTML and CSS for form on right\n\t\t\t- **App.jsx**\n\t\t\t\t--------------------------------------------------\n\t\t\t\t<main>\n\t\t\t\t\t<section className=\"showEmployeesArea\">\n\t\t\t\t\t\t<h2>Employees</h2>\n\t\t\t\t\t\t<p>There are {employees.length} employees:</p>\n\t\t\t\t\t\t<div className=\"employees\">\n\t\t\t\t\t\t\t{employees.map(employee => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"employee\" key={employee.id}>\n\t\t\t\t\t\t\t\t\t\t<div className=\"fullName\">{employee.firstName} {employee.lastName}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\">{employee.title}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"age\">Age: {employee.age}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"addEmployeeArea\">\n\t\t\t\t\t\t<h2>Add Employee</h2>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t\t\t<label htmlFor=\"firstName\">First Name:</label>\n\t\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\t\t\t\t\tid=\"firstName\" />\n\n\t\t\t\t\t\t\t\t<label htmlFor=\"lastName\">Last Name:</label>\n\t\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"lastName\"\n\t\t\t\t\t\t\t\t\tid=\"lastName\" />\n\n\t\t\t\t\t\t\t\t<label htmlFor=\"title\">Title:</label>\n\t\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\t\t\tid=\"title\" />\n\n\t\t\t\t\t\t\t\t<label htmlFor=\"age\">Age:</label>\n\t\t\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t\t\tclassName=\"typeNumber\"\n\t\t\t\t\t\t\t\t\tname=\"age\"\n\t\t\t\t\t\t\t\t\tid=\"age\" />\n\n\t\t\t\t\t\t\t\t<div className=\"buttonRow\">\n\t\t\t\t\t\t\t\t\t<button>Save</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</fieldset>\n\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\t\t\t\t\n\t\t\t\t--------------------------------------------------\n\t\t\t- **App.scss**\n\t\t\t\t--------------------------------------------------------\n\t\t\t\tmain {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: 3rem;\n\n\t\t\t\t\tsection.showEmployeesArea {\n\t\t\t\t\t\t.employees {\n\t\t\t\t\t\t\t.employee {\n\t\t\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\t\t\t\twidth: 20rem;\n\n\t\t\t\t\t\t\t\t.fullName {\n\t\t\t\t\t\t\t\t\tcolor: rgb(201, 135, 12);\n\t\t\t\t\t\t\t\t\tfont-size: 1.4rem;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\t\t\tcolor: rgb(229, 229, 128);\n\t\t\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t.age {\n\t\t\t\t\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsection.addEmployeeArea {\n\t\t\t\t\t\tform {\n\t\t\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\t\t\tborder-radius: 6px;\n\n\t\t\t\t\t\t\tfieldset {\n\t\t\t\t\t\t\t\tmargin-top: 1em;\n\t\t\t\t\t\t\t\tpadding: 1rem 1.5rem 2rem 1.5rem;\n\t\t\t\t\t\t\t\tborder: none;\n\t\t\t\t\t\t\t\tmin-width: 400px;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlabel {\n\t\t\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\t\t\tpadding-top: .5em;\n\t\t\t\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\t\t\t\tmargin-bottom: .2rem;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tinput {\n\t\t\t\t\t\t\t\tpadding: .5em;\n\t\t\t\t\t\t\t\tborder: 1px solid #999;\n\t\t\t\t\t\t\t\twidth: 96%;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.typeNumber {\n\t\t\t\t\t\t\t\twidth: 3rem;\n\t\t\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.buttonRow {\n\t\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\t\tjustify-content: flex-end;\n\n\t\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t\t\t\t\tfont-size: 1rem;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t--------------------------------------------------------\n\t\t\t- page should look like this:##shouldlookkddksk\n\t\t- enable form to update data in fields into a formData state variable and display as test\n\t\t\t- **App.jsx**: implement formData and handling function in appropriate places\n\t\t\t\t----------------------------------------------\n\t\t\t\tconst _formData = {\n\t\t\t\t\tfirstName: '',\n\t\t\t\t\tlastName: '',\n\t\t\t\t\ttitle: '',\n\t\t\t\t\tage: 0\n\t\t\t\t}\t\t\n\n\t\t\t\tconst [formData, setFormData] = useState(_formData);\t\t\t\t\n\n\t\t\t\tconst handleFormFieldChange = (fieldName, value) => {\n\t\t\t\t\tformData[fieldName] = value;\n\t\t\t\t\tsetFormData({ ...formData });\n\t\t\t\t}\n\n\t\t\t\tonChange={(e)=>handleFormFieldChange('firstName', e.target.value)}\n\t\t\t\tonChange={(e)=>handleFormFieldChange('lastName', e.target.value)}\n\t\t\t\tonChange={(e)=>handleFormFieldChange('title', e.target.value)}\n\t\t\t\tonChange={(e)=>handleFormFieldChange('age', e.target.value)}\n\n\t\t\t\t<pre>\n\t\t\t\t\t{JSON.stringify(formData, null, 2)}\n\t\t\t\t</pre>\t\t\t\t\n\t\t\t\t----------------------------------------------\n\t\t\t- form should work like this:#gif#formshowdemofieldsss\n\t\t- program save button to send data to backend so that it saves the form data as a new employee\n\t\t\t- **App.jsx**\n\t\t\t\t---------------------------------------------------------\n\t\t\t\tconst handleSaveButton = (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.post(`${backendUrl}/employee`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\temployee: formData\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t})();\n\t\t\t\t};\n\n\t\t\t\t<button onClick={(e) => handleSaveButton(e)}>Save</button>\n\t\t\t\t---------------------------------------------------------\n\t\t\t- test: add an employee (with valid data), click save, and see that it is added to the JSON file in the backend\n\t\t- update the frontend with the newly added employee\n\t\t\t- **App.jsx**\n\t\t\t\t----------------------------------------------------\n\t\t\t\tconst newEmployee = response.data.employeeAdded;\n\t\t\t\temployees.push(newEmployee);\n\t\t\t\tsetEmployees([...employees]);\n\n\t\t\t\tsetFormData({ ..._formData });\t\t\t\t\n\t\t\t\t----------------------------------------------------\n\t\t- if the backend throws an error, then display an appropriate message to the user\n\t\t\t- **App.jsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\tconst [errorMessage, setErrorMessage] = useState('');\n\n\t\t\t\tconst handleSaveButton = (e) => {\n\t\t\t\t\tsetErrorMessage('');\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await axios.post(`${backendUrl}/employee`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\temployee: formData\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst newEmployee = response.data.employeeAdded;\n\t\t\t\t\t\t\temployees.push(newEmployee);\n\t\t\t\t\t\t\tsetEmployees([...employees]);\n\t\t\t\t\t\t\tsetFormData({ ..._formData });\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tsetErrorMessage(e.response.data.error.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t};\n\n\t\t\t\t{errorMessage.trim() !== '' && (\n\t\t\t\t\t<div className=\"errorMessage\">{errorMessage}</div>\n\t\t\t\t)}\n\t\t\t\t--------------------------------------------\n\t\t\t- **App.scss**\n\t\t\t\t-----------------------------------------------\n\t\t\t\t.errorMessage {\n\t\t\t\t\tbackground-color: rgb(150, 26, 26);\n\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\tcolor:rgb(206, 206, 105);\n\t\t\t\t\tborder-radius: 6px;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------------\n- **challenges**\n\t- refactor to use multiple pages \"Employees\" and \"Add Employee\", and add useContext as the state manager of the front end\n\t- recreate frontend with TypeScript including interface `IEmployee`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-04-18 03:23:55","systemWhoCreated":"systemUnknown"},{"id":700,"category":"JavaScript","title":"Tips on debugging JavaScript browser applications","body":"- **what we will do**\n\t- in this howto we will look at some common ways to debug JavaScript when working both in the **browser** and in **Node**\n- **debugging in the browser**\n\t- it's common when solving problems in websites to want to know what the values of variables are at certain moments during the execution of your code\n\t- **console.log**\n\t\t- probably the most common way to find out the value of a variable is to simply output it to the terminal with `console.log()`\n\t\t- this works sufficiently well in most cases quite well particularly in smaller websites\n\t\t- example:\n\t\t\t- set up this site:\n\t\t\t\t- https://github.com/edwardtanguay/et003-consolelog\n\t\t\t- there's obviously a bug in it somewhere##thecolorpageijs\n\t\t\t- look through the files and get an understanding of the code of the site so you understand it\n\t\t\t\t- it's a classic Vanilla JavaScript/DOM site with modules\n\t\t\t- **tools.js**: the bug is in this file\n\t\t\t\t-------------------------------------------\n\t\t\t\texport const getTitle = () => {\n\t\t\t\t\treturn 'Color Site';\n\t\t\t\t};\n\n\t\t\t\texport const insertColorsIntoElement = (elem) => {\n\t\t\t\t\tconst colors = ['yellow', 'green', 'blue', 'purple', 'orange'];\n\t\t\t\t\tfor (const color of colors) {\n\t\t\t\t\t\tconst firstLetter = color.charAt(1).toUpperCase();\n\t\t\t\t\t\tconst rest = color.slice(0);\n\t\t\t\t\t\tconst titleColor = firstLetter + rest;\n\t\t\t\t\t\tconst title = `${titleColor} Page`;\n\t\t\t\t\t\telem.innerHTML += `<div class=\"colorBar\" style=\"background-color: ${color}\">${title}</div>`;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t-------------------------------------------\n\t\t\t- debug the code by displaying variable values with `console.log()`##andthelielilettting\n\t\t\t- eventually you'll solve the bug##evnsjeyou\n\t\t\t- for most cases `console.log` is **very useful** and **pragmatic** way to debug JavaScript in the browser which is why it is usually the only debugging tool many web developers use to display values variables\n\t- 3 tips for console.log()\n\t\t- in larger applications the amount of variable values in the console can get convoluted and confusing \n\t\t\t- especially when you have **dozens or hundreds of output variables** in your console\n\t\t\t- particularly when the values are **large strings**\n\t\t\t- it's easy to lose the overview of which values belong to which variables\n\t\t- TIP 1: **console.log('message', message)**\n\t\t\t- pass the name of the variable as the first parameter\n\t\t\t- it's a bit more typing but for intensive debugging can be worth it##withlekkssi\n\t\t- TIP 2: **use the dev tools search**\n\t\t\t- you can also simply search any text including the named of the variables if you output them as the first parameter#gif#demofindtheletter\n\t\t- TIP 3: **console.log** and **console.debug**\n\t\t\t- sometimes when you are debugging, you have particular variables that are very large, e.g. when you output innerHTML\n\t\t\t- it is difficult to focus one on particular variable for a short time##havemanysjd\n\t\t\t- to fix this, change all the larger, less-needed variable to **console.debug**\n\t\t\t- then you can toggle the **Debug** option in the web developer tools#gif#demoshowclink\n\t- create a **custom logger**\n\t\t- don't forget that it is very easy to create a custom logger function called e.g. **debug()**\n\t\t- in larger applications when debugging becomes convoluted, I often quickly make a **dev.js** file with a **debug()** function:\n\t\t\t---------------------------------------\n\t\t\texport const debug = (label, value) => {\n\t\t\t\tconsole.log.bind(window.console);\n\t\t\t\tconsole.log(`>>> ${label.toUpperCase()} >>> [${value}]`);\n\t\t\t};\n\t\t\t---------------------------------------\n\t\t- I then import it in other files like this:\n\t\t\t------------------------------------\n\t\t\timport { debug } from './dev.js';\n\t\t\t------------------------------------\n\t\t- then use it like this:\n\t\t\t-------------------------------------\n\t\t\tdebug('color', color);\n\t\t\t-------------------------------------\n\t\t- it's very simple and you can expand it and customize it to each application, sending large e.g. **user objects** to it which only print out the fields you want\n\t\t- you can add as many different debug functions as you want for various kinds of objects or variables\n\t\t- putting parameters around the values of strings help you catch preceding and trailing spaces##demotrailingsd\n\t- instead of displaying large objects in the console, display them on the browser page with **JSON.stringify()**\n\t\t- **tools.js**\n\t\t\t-----------------------------------------------\n\t\t\texport const insertColorsIntoElement = (elem) => {\n\t\t\t\tconst colors = ['yellow', 'green', 'blue', 'purple', 'orange'];\n\t\t\t\tconst titles = [];\n\t\t\t\tfor (const color of colors) {\n\t\t\t\t\tconst firstLetter = color.charAt(1).toUpperCase();\n\t\t\t\t\tconst rest = color.slice(0);\n\t\t\t\t\tconst titleColor = firstLetter + rest;\n\t\t\t\t\tconst title = `${titleColor} Page`;\n\t\t\t\t\telem.innerHTML += `<div class=\"colorBar\" style=\"background-color: ${color}\">${title}</div>`;\n\t\t\t\t\ttitles.push(title);\n\t\t\t\t}\n\n\t\t\t\tconst colorInfo = {};\n\t\t\t\tfor (const color of colors) {\n\t\t\t\t\tcolorInfo[color] = {\n\t\t\t\t\t\trandomId: Math.random(),\n\t\t\t\t\t\tallTitles: titles\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telem.innerHTML += '<pre>' + JSON.stringify(colorInfo, null, 2) + '</pre>';\n\n\t\t\t\tconsole.log(colorInfo);\n\t\t\t-----------------------------------------------\n\t\t- the third parameter is how many characters to indent\n\t\t- the objects with JSON.stringify are shown in their entirety and so can be perused and searched with ease\n\t\t\t- while the objects in the console are closed by default which you have to click open multiple times to read nested information##thetwosidisjggreen\n\t\t- I often use this with forms e.g. with an object variable named `formData` that contains all of the field values of my form\n\t\t- particularly in reactive frameworks such as React, Vue, Angular, etc. this will show you the values of your JavaScript objects as they change#gif#formshowdemofieldsss\n\t- debug by setting breakpoints and stepping through code in the **Debugger tab** of the your brower's Dev Tools\n\t\t- this is a completely different way to observe the values of your code as it executes\n\t\t- if you just need one value or a few values, using `console.log` might be faster\n\t\t- but particularly if you are debugging loops where one or more values are changing on every iteration, debugging with breakpoints is often more efficient\n\t\t- to stop execution at a specific point to view the values of variables\n\t\t\t- insert `debugger;` on the line on which you want to pause execution\n\t\t\t- it will stop on that line##demodefinkjsdddebb\n\t\t\t- you can hover over variables to see their values\n\t\t\t- you can enter a variable name on the right in order to **watch** its value change as you iterate through the loop#gif#demodefinkjsdddebb\n\t\t\t- note you can set new breakpoints#gif#demoandthenewpreak\n\t- a note on browsers\t\n\t\t- when using devtool debugging, I find Chrome more useful than Firefox\n\t\t\t- e.g. objects that I am watching tend to stay open as I step through loops in Chrome, not so in Firefox\n\t- preemptive debugging\n\t\t- one way to debug more effectively is to debug less\n\t\t\t- i.e. use tools which catch errors before you have to debug them\n\t\t- use ES6 modules\n\t\t\t- ES6 modules are the modern way to develop JavaScript applications\n\t\t\t- one advantage is **ES6 modules are always in strict mode by default**\n\t\t\t- there is no need to write 'use strict;' at the top of your files\n\t\t\t\t- e.g. when using ES6 modules, if you forget `const` or `let`, then your code will not run##ifdemonothen\n\t\t\t- if you are not using ES6 modules in JavaScript for web development, e.g. if you are merely using one JavaScript file referenced by your HTML with no modules, then use `'use strict';` at the top of your JavaScript file so that the browser catches errors such as not using `const` or `var`##ifnoes6then\n\t\t- use TypeScript\n\t\t\t- TypeScript catches type errors as you develop, e.g. if you send a boolean variable to a function that expects a string\n\t\t\t\t- JavaScript will completely ignore these errors##jsplusts\n\t\t\t- furthermore, TypeScript will not build your project and will not deploy your code to production until you fix these errors##willnotbuilskjdf\n\t\t\t- particularly when creating websites, it is quick and easy to set up your projects in which TypeScript is completely configured to use\n\t\t\t\t- for JavaScript/DOM sites, use `npm create vite` then choose **Vanilla** and **TypeScript**\n\t\t\t\t- for React sites, use `npm create vite` then choose **React** and **TypeScript**#gif#dothecreatejs","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-04-18 19:31:20","systemWhoCreated":"systemUnknown"},{"id":701,"category":"JSON","title":"Understanding and working with JSON","body":"- general background\n\t- **what is JSON?**\n\t\t- JavaScript objects for transportation\n\t\t- JSON is a string format for objects so they can be easily stored, accessed and sent across the Internet\n\t\t- easy for humans to read and write and for machines to parse and generate\n\t\t- \"the lingua franca of data\"\n\t- **where and how is JSON used?**\n\t\t- to send and receive data between clients and APIs\n\t\t- to store data in MongoDB\n\t\t- as files (`.json`) to store information \n\t\t\t- can be read via API\n\t\t\t- can be read and queried as a local data source\n\t\t\t- config files\n\t\t\t\t- nnn\n\t- **how similar is JSON to JavaScript objects?**\n\t\t- very\n\t\t- there are four main differences between JSON and JavaScript objects:\n\t\t\t- 1. JSON does not allow single quotes to define strings, **only double quotes**\n\t\t\t- 2. **key names must be enclosed in quotes**, and of course with double quotes\n\t\t\t- 3. JSON parameters cannot end with a **trailing comma**\n\t\t\t- 4. JSON **cannot contain functions**\n\t\t\t\t- a JavaScript object with functions will be converted to a JSON object without functions##tehcomparjs\n\t- **who invented JSON and when and why?**\n\t\t- Douglas Crockford in 2001\n\t\t- he also wrote JavaScript: The Good Parts, 2008, a pivotal book that lead to more JavaScript acceptance\n\t- **what did we use to transfer data before JSON?**\n\t\t- XML\n\t\t- and before that, various text and binary formats\n\t- **what is the basic structure of a JSON file?**\n\t\t- either an **object** or an **array**\n- learn to use JSON\n\t- **tools used to transform JSON**\n\t\t- online tools\n\t\t\t- [Convert Javascript Object to JSON](https://www.convertsimple.com/convert-javascript-to-json/) - *lenient, just has to be a JavaScript object*\n\t\t\t\t-----------------------------------------------\n\t\t\t\t{\n\t\t\t\t\tfirstName: 'Robert',\n\t\t\t\t\t\"lastName\": \"Hansandi\",\n\t\t\t\t\t\"fullName\": function() {\n\t\t\t\t\t\treturn this.firstName + ' ' + this.lastName;\n\t\t\t\t\t},\n\t\t\t\t\tage: 23,\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------------\t\t\t\t\n\t\t\t- [Convert JSON to Javascript Object](https://www.convertsimple.com/convert-json-to-javascript) - *strict, has to be valid JSON*\n\t\t- JavaScript functions\n\t\t\t- [JSON.stringify()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) - *lenient, just has to be a JavaScript object*\n\t\t\t\t- Convert Javascript Object to JSON\n\t\t\t- [JSON.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) - *strict, has to be valid JSON*\n\t\t\t\t- Convert JSON to Javascript Object\n\t- **tools used to transport JSON**\n\t\t- [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)\n\t\t\t- native in all browsers\n\t\t\t- in Node apps must be imported as npm package [node-fetch](https://www.npmjs.com/package/node-fetch)\n\t\t- [axios](https://www.npmjs.com/package/axios)\n\t\t\t- not native in browsers\n\t\t\t- in browser and Node apps must be imported as npm package [axios](https://www.npmjs.com/package/axios)\n\t\t\t- has somewhat simpler syntax and more features\n\t\t- both tools do the same thing \n\t\t- both are wildly used\n\t\t- learn them both\n\t\t\t- [Examples of consuming APIs with fetch and axios](https://edwardtanguay.vercel.app/howtos?id=506)\n\t- real-life examples of using JSON\n\t\t- **create a website that reads and displays data from a JSON file**\n\t\t\t- NOTE: we build this site step-by-step\n\t\t\t\t- but if you need to check or debug something as you work through this, final code for this project is here\n\t\t\t\t\t- https://github.com/edwardtanguay/et001-readjsonfile)\n\t\t\t- create basic JS/DOM site with Vite\n\t\t\t\t- `npm create vite`, Vanilla, JavaScript\n\t\t\t\t- open in VSCode\n\t\t\t\t- `npm i`\n\t\t\t\t- `npm run dev`\n\t\t\t\t- your site will look like this:##simsitjs\n\t\t\t- minimize site\n\t\t\t\t- **main.js**\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\timport './style.css';\n\n\t\t\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t\t\t  <div>\n\t\t\t\t\t\t<h1>Employees</h1>\n\t\t\t\t\t  </div>\n\t\t\t\t\t`;\n\n\t\t\t\t\tsetupCounter(document.querySelector('#counter'));\t\t\t\t\t\n\t\t\t\t\t-------------------------------------\n\t\t\t\t- site will look like this:##theempsite\n\t\t\t- create JSON file with employees\n\t\t\t\t- go to [Edward's realistic API data](https://edwardtanguay.vercel.app/share) \n\t\t\t\t- click on employees JSON file##clickemplslink\n\t\t\t\t- save into your project in a file called `data/employees.json`\n\t\t\t\t\t- note that the json file has an **array** structure, not an **object** structure##notethatisjson\n\t\t\t\t- import the JSON file into a JavaScript object\n\t\t\t\t\t- Vite does this for us automatically (with the web bundler esbuild behind the scenes)\n\t\t\t\t\t- **main.js**\n\t\t\t\t\t\t---------------------------------------------\n\t\t\t\t\t\timport './style.css';\n\t\t\t\t\t\timport employees from './data/employees.json';\n\n\t\t\t\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t\t\t\t  <div>\n\t\t\t\t\t\t\t<h1>Employees</h1>\n\t\t\t\t\t\t\t<p>There are ${employees.length} employees.</p>\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t`;\n\n\t\t\t\t\t\tsetupCounter(document.querySelector('#counter'));\n\t\t\t\t\t\t---------------------------------------------\n\t\t\t\t\t- your site should now say that you have 9 employees:##your9emplsdkfj\n\t\t\t- now display all nine employees, showing **full name** and **country**\n\t\t\t\t- **main.js**\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\tconst getEmployeeListHtml = () => {\n\t\t\t\t\t\tlet html = '';\n\t\t\t\t\t\tfor (const emp of employees) {\n\t\t\t\t\t\t\thtml += `<div className=\"employee\">\n\t\t\t\t\t\t\t${emp.firstName} ${emp.lastName} - ${emp.address.country}\t\n\t\t\t\t\t\t\t</div>`\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn html;\n\t\t\t\t\t};\n\n\t\t\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1>Employees</h1>\n\t\t\t\t\t\t\t<p>There are ${employees.length} employees.</p>\n\t\t\t\t\t\t\t${getEmployeeListHtml()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t- your site should look like this:##nowshosdijwemps\n\t\t\t- test\n\t\t\t\t- delete an employee in the JSON file and see that the site reflects this change\n\t\t- **read and display data from an external API**\n\t\t\t- we want to now display books available from the Gutenberg project\n\t\t\t\t- as all REST APIs, the Gutenberg API serves its data in JSON format\n\t\t\t- go to [Edward's realistic API data](https://edwardtanguay.vercel.app/share) \n\t\t\t- click on the gutendex link##clickongutsdfj\n\t\t\t- copy the URL which searches for books with the keyword **berlin**##copyjsthelink\n\t\t\t- display the number of books found\n\t\t\t\t- when you click in the browser on **raw data** and **format**\n\t\t\t\t- note we see the number we need to get out of our JSON file\n\t\t\t\t- note that this JSON is not an **array** as in our last example but is an **object**##thecount31\n\t\t\t- **main.js**\n\t\t\t\t-------------------------------------\n\t\t\t\timport './style.css';\n\t\t\t\timport employees from './data/employees.json';\n\n\t\t\t\tconst getEmployeeListHtml = () => {\n\t\t\t\t\tlet html = '';\n\t\t\t\t\tfor (const emp of employees) {\n\t\t\t\t\t\thtml += `<div className=\"employee\">\n\t\t\t\t\t\t${emp.firstName} ${emp.lastName} - ${emp.address.country}\t\n\t\t\t\t\t\t</div>`;\n\t\t\t\t\t}\n\t\t\t\t\treturn html;\n\t\t\t\t};\n\n\t\t\t\t(async () => {\n\t\t\t\t\tconst booksUrl = 'https://gutendex.com/books/?search=berlin';\n\t\t\t\t\tconst response = await fetch(booksUrl);\n\t\t\t\t\tconst booksData = await response.json();\n\n\t\t\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>Employees</h1>\n\t\t\t\t\t\t<p>There are ${employees.length} employees.</p>\n\t\t\t\t\t\t${getEmployeeListHtml()}\n\t\t\t\t\t\t<h1>Books</h1>\n\t\t\t\t\t\t<p>There are ${booksData.count} books.</p>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\t})();\n\t\t\t\t-------------------------------------\n\t\t\t- your site should show that you have fetched 31 books##andnow31books\n\t\t\t- note that the code the fetches the books and the code that displays the data on the page are in an async function called an [IIFE](https://en.wikipedia.org/wiki/Immediately_invoked_function_expression)\n\t\t\t\t- this is because when you fetch data from another server, you merely fetch a **promise** that you will get the data, but not the data itself\n\t\t\t\t- this is why we have to **await** the promise to be fulfilled\n\t\t\t\t- notice that it **takes a moment** for the data to be loaded from the external Gutenberg server which is somewhere on the Internet#gif#takeskmommo\n\t\t\t\t- but since we want to display the data together, we have to display the employee data together with the book data together\n\t\t\t\t\t- solving this problem efficiently was one of the main reasons reactive JavaScripts were created such as **React**, **Angular** and **Vue**\n\t\t\t\t\t\t- these frameworks allow you to easily show the user some data while other data to be loaded into specific places in the HTML dynamically when it arrives\n\t\t\t\t\t\t- the HTML template **reacts** to changes in the underlying data, hence the name **reactive frameworks** and the name **React**\n\t\t\t\t- but for now, let's just give the user a message that our site's data is loading until we can display the site\n\t\t\t\t\t- **main.js**: put this line before the IIFE code\n\t\t\t\t\t\t---------------------------------------------------\n\t\t\t\t\t\tdocument.querySelector('#app').innerHTML = `<h1>Loading...</h1>`;\n\t\t\t\t\t\t---------------------------------------------------\n\t\t\t\t- your site should now show a loading message until the data is shown:#gif#dotheloaduntilsdj\n\t\t\t- display the books as well\n\t\t\t\t- **main.js**\n\t\t\t\t\t----------------------------------------------------------\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst booksUrl = 'https://gutendex.com/books/?search=berlin';\n\t\t\t\t\t\tconst response = await fetch(booksUrl);\n\t\t\t\t\t\tconst booksData = await response.json();\n\n\t\t\t\t\t\tconst getBookListHtml = () => {\n\t\t\t\t\t\t\tlet html = '';\n\t\t\t\t\t\t\tfor (const book of booksData.results) {\n\t\t\t\t\t\t\t\thtml += `<div class=\"book\">\n\t\t\t\t\t\t\t${book.title}\n\t\t\t\t\t\t\t</div>`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn html;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1>Employees</h1>\n\t\t\t\t\t\t\t<p>There are ${employees.length} employees.</p>\n\t\t\t\t\t\t\t${getEmployeeListHtml()}\n\t\t\t\t\t\t\t<h1>Books</h1>\n\t\t\t\t\t\t\t<p>There are ${booksData.count} books.</p>\n\t\t\t\t\t\t\t${getBookListHtml()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t\t})();\n\t\t\t\t\t----------------------------------------------------------\n\t\t\t\t- your site should look like this:##thebookaswell\n\t\t- **create a Node script that creates a JSON file**\n\t\t\t- up to now, we have read JSON from a local file and from an external API but haven't had to use the functions **JSON.parse()** or **JSON.stringify()**\n\t\t\t\t- this is because **Vite** and **fetch** is taking care of this for us in the background\n\t\t\t- let's move away from the web and do an example of a simple JavaScript code that creates a JSON file from a JavaScript object\n\t\t\t\t- we will need to use **JSON.stringify()** to manually convert the JavaScript object to a string so we can save it as a file\n\t\t\t- NOTE: we will build this step-by-step\n\t\t\t\t- but if you need to check or debug anything, finished code is here:\n\t\t\t\t\t- https://github.com/edwardtanguay/et001-json-script\n\t\t\t- build a basic npm project app which displays a test message\n\t\t\t\t- go to your projects directory\n\t\t\t\t- create and enter directory \n\t\t\t\t\t- `mkdir et001-json-script`\n\t\t\t\t\t- `cd et001-json-script`\n\t\t\t\t- enter VSCode\n\t\t\t\t\t- `code .`\n\t\t\t\t- create npm project\n\t\t\t\t\t- `npm init -y`\n\t\t\t\t- enable ES6 modules##enablkjsdfksjd\n\t\t\t\t- create **src/app.js**\n\t\t\t\t\t-------------------------------------\n\t\t\t\t\tconsole.log('this will convert data to a json file');\n\t\t\t\t\t-------------------------------------\n\t\t\t\t- **package.json**: create start script\n\t\t\t\t\t--------------------------------------\n\t\t\t\t\t\"scripts\": {\n\t\t\t\t\t\t\"convert\": \"node src/app.js\"\n\t\t\t\t\t},\n\t\t\t\t\t--------------------------------------\n\t\t\t\t- run the app\n\t\t\t\t\t- `npm run convert`##therunconvertnow\n\t\t\t- program script so that it reads a text file of names and creates a JSON file\n\t\t\t\t- first simply use an array of strings as a test\n\t\t\t\t- **app.js**\n\t\t\t\t\t---------------------------------\n\t\t\t\t\tconst lines = [\n\t\t\t\t\t\t'Schmolke, Andreas, developer',\n\t\t\t\t\t\t'Schulz, Pedro, CEO',\n\t\t\t\t\t\t'Himmelton, Barbara, marketing director'\n\t\t\t\t\t];\n\n\t\t\t\t\t// create array to be converted to JSON file\n\t\t\t\t\tconst employees = [];\n\t\t\t\t\tfor (const line of lines) {\n\t\t\t\t\t\tconst parts = line.split(',');\n\t\t\t\t\t\tconst lastName = parts[0].trim();\n\t\t\t\t\t\tconst firstName = parts[1].trim();\n\t\t\t\t\t\tconst position = parts[2].trim();\n\t\t\t\t\t\tconst employee = {\n\t\t\t\t\t\t\tfirstName,\n\t\t\t\t\t\t\tlastName,\n\t\t\t\t\t\t\tposition\n\t\t\t\t\t\t};\n\t\t\t\t\t\temployees.push(employee);\n\t\t\t\t\t}\n\n\t\t\t\t\t//save file\n\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\t'./src/output/employees.json',\n\t\t\t\t\t\tJSON.stringify(employees, null, 2)\n\t\t\t\t\t);\n\t\t\t\t\t---------------------------------\n\t\t\t- now read the text file to get the array\n\t\t\t\t- nnn\n- challenges\n\t- create a website that uses json-server to read and write to a JSON file like a database\n\t\t- see: [Create Frontend CRUD with React and json-server](https://edwardtanguay.vercel.app/howtos?id=524)\n\t- display the books with author, language and an image of the book\n\t\t- note that some books have mulitple authors and images","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-04-19 02:02:51","systemWhoCreated":"systemUnknown"},{"id":702,"category":"async/await","title":"Create a JS/DOM technology quiz website by using axios to fetch data from API","body":"- **finished site is published here**\n\t- https://et001-skillquiz.vercel.app\n- **finished site will work like this**#gif#thewebdevsiqquizolike\n- **what we will make**\n\t- we will create a quiz site that will help you learn about skills that companies require for developer positions\n\t- this quiz will use axios to fetch these [jobs](https://edwardtanguay.vercel.app/share/jobs.json) and [skills](https://edwardtanguay.vercel.app/share/skills.json) from an external website\n\t- four skills will be chosen at random\n\t- one of the skills will be displayed, e.g. **Nginx**\n\t- all four of the skills' definitions will be displayed, e.g.\n\t\t- a build automation tool used primarily for Java projects which can also be used to build and manage projects written in C#, Ruby, and Scala\n\t\t- JavaScript library for maintaining state, used with React and Angular\n\t\t- a fast web server that can also be used as a reverse proxy, load balancer, mail proxy and HTTP cache\n\t\t- infrastructure as code tool created by HashiCorp\n\t- the user will try to guess for themselves which of the answers is correct\n\t- a **Toggle Answers** button can be clicked which shows all answers including which one was clicked\n\t\t- the user can click this on and off getting familiar with each skills\n\t\t- for each skill there are links for more information\n\t\t\t- basic information\n\t\t\t- articles in English\n\t\t\t- articles in German\n\t\t\t- videos in English\n\t\t\t- videos in German\n\t\t- there is also an info that informs how many job ads contains this skills\n\t\t\t- this is a link which expands the list of job ads to click on and peruse\n\t- there is a next button that repeats the above\n- **technology used**\n\t- Vite Vanilla JavaScript application\n\t- Sass\n\t- axios and async/await to get data from an external website\n- **finished code is here**\n\t- https://github.com/edwardtanguay/et001-skillquiz\n- **=== Create minimized and restyled JavaScript/DOM site ===**\n\t- create JS/DOM site with Vite\n\t\t- `npm create vite`, type in name of project, Vanilla, JavaScript\n\t- open in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- your site will look like this:##simsitjs\n\t- initialize Git\n\t\t- `git init -b dev`\n\t\t- make initial commit\n\t- minimize site\n\t\t- delete `public/vite.svg` - a graphic for Vite start page\n\t\t- **.gitignore** - prevents specific files and directories from being committed to the Git repository, these three are all we need for now\n\t\t\t-----------------------------\n\t\t\tnode_modules\n\t\t\tdist\n\t\t\t.vscode/*\t\t\t\n\t\t\t-----------------------------\n\t\t- delete `counter.js` - a script file for Vite start page\n\t\t- **index.html**: change title\n\t\t\t--------------------------------\n\t\t\t<title>Webdev Skill Quiz</title>\n\t\t\t--------------------------------\n\t\t- delete `javascript.svg` - a graphic for Vite start page\n\t\t- **main.js**: replace content with this\n\t\t\t---------------------------------------------\n\t\t\timport './style.css';\n\n\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t  <div>\n\t\t\t  <h1>Webdev Skill Quiz</h1>\n\t\t\t  </div>\n\t\t\t`;\t\t\t\n\t\t\t---------------------------------------------\n\t\t- delete `package-lock.json` - can be deleted at any time, will be recreated automatically, locks the versions in package.json so that `npm i` will not install a version that is incompatible with your current site, for small sites irrelevant\n\t\t- **style.css**: delete all content\n\t\t- your minimized site should look like this##theweddevskillsp\n\t- install Sass and restyle\n\t\t- `npm i sass`\n\t\t- rename `style.css` to `style.scss`\n\t\t- **main.js**: change line\n\t\t\t------------------------------------------\n\t\t\timport './style.scss';\n\t\t\t------------------------------------------\n\t\t- **style.scss**\n\t\t\t---------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #333;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tpadding: .5rem 2rem;\n\t\t\t\tfont-family: sans-serif;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(217, 183, 118);\n\t\t\t\t}\n\n\t\t\t\tp {\n\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- **main.js**: add\n\t\t\t------------------------------------\n\t\t\t<p>Welcome to this site.</p>\n\t\t\t------------------------------------\n\t- minimized and restyled website should look like this:##nowstyldskjfsho\n- **=== Retrieve and display jobs and skills ===**\n\t- for the next step, we need to first fetch the data from an external site which we will be using in our quiz site\n\t- since the data resides as two JSON files on another server, we need to use async/await and axios to retreive this data \n\t\t- we could also use **fetch**\n\t\t- we are using **axios** in this exercise since both **fetch** and **axios** are widely used and one should know how to use both\n\t\t- main differences\n\t\t\t- fetch is built into the browser and is more lightweight\n\t\t\t- axios provides \n\t\t\t\t- a richer set of features making \n\t\t\t\t- a more concise syntax\n\t\t\t\t- there is often a better choice, particularly for complex applications\n\t- **load jobs** from external website\n\t\t- we will first write out the full axios code to retrieve the job data from the external website into a variable\n\t\t\t- will will then simplify it numerous times \n\t\t\t- in the end because of the consice syntax of axios and Vite's support for asynchronous module loading\n\t\t\t\t- we will be able to retrieve data from the external website **in one short line of code**\n\t\t- first import axios so that we can use it\n\t\t\t- `npm i axios`\n\t\t- **STEP 1: full async/await code with function**\n\t\t\t- **main.js**: add\n\t\t\t\t---------------------------------------------\n\t\t\t\timport './style.scss';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\tconst jobsUrl = 'https://edwardtanguay.vercel.app/share/jobs.json';\n\n\t\t\t\tconst getData = async () => {\n\t\t\t\t\tconst response = await axios.get(jobsUrl);\n\t\t\t\t\tconst jobs = response.data;\n\t\t\t\t\tconsole.log(jobs);\n\t\t\t\t}\n\n\t\t\t\tgetData();\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t\t- in the browser you see that the data is being fetched##thefethandthedata\n\t\t- **STEP 2: convert separate function to a self-calling iife function**\n\t\t\t- **main.js**: replace\n\t\t\t\t-----------------------------------------------------\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(jobsUrl);\n\t\t\t\t\tconst jobs = response.data;\n\t\t\t\t\tconsole.log(jobs);\n\t\t\t\t})();\t\t\t\n\t\t\t\t-----------------------------------------------------\n\t\t\t- data is fetched##thefethandthedata\n\t\t- **STEP 3: remove async altogether since Vite supports asynchronous module loading**\n\t\t\t- **main.js**: replace\n\t\t\t\t--------------------------------------\n\t\t\t\tconst response = await axios.get(jobsUrl);\n\t\t\t\tconst jobs = response.data;\n\t\t\t\tconsole.log(jobs);\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t\t- data is fetched##thefethandthedata\n\t\t- **STEP 4: refactor axios data call into one line**\n\t\t\t- **main.js**: replace\n\t\t\t\t--------------------------------------\n\t\t\t\tconst jobs = (await axios.get(jobsUrl)).data;\n\t\t\t\tconsole.log(jobs);\n\t\t\t\t--------------------------------------\n\t\t\t- data is fetched##thefethandthedata\n\t\t- **NOTE:** if you are going to publish this at Vercel, you need to put the async IIFE back in, as not all browsers are compatible with first-level await\n\t\t\t- you have wrap all the code in the async IIFE as [shown here](https://github.com/edwardtanguay/et001-skillquiz/blob/20d7623cc4a9812b079c530af93cc9722b71335d/main.js#L13)\n\t\t\t- you can see that this code with async IIFE runs fine at Vercel here: \n\t\t\t\t- https://et001-skillquiz.vercel.app\n\t\t\t- here is the error you get at Vercel if you use first-level await##notoplevelaksdf\n\t- load skills from external website\n\t\t- **main.js**: replace\n\t\t\t------------------------------------------------\n\t\t\tconst jobsUrl = 'https://edwardtanguay.vercel.app/share/jobs.json';\n\t\t\tconst skillsUrl = 'https://edwardtanguay.vercel.app/share/skills.json';\n\n\t\t\tconst jobs = (await axios.get(jobsUrl)).data;\n\t\t\tconst skills = (await axios.get(skillsUrl)).data;\t\t\t\n\t\t\t------------------------------------------------\n\t- show that you can display information from this data on the page\n\t\t- **main.js**: add\n\t\t\t-------------------------------------------\n\t\t\t<p>There are ${jobs.length} jobs.</p>\n\t\t\t<p>There are ${skills.length} skills.</p>\n\t\t\t-------------------------------------------\n\t\t- data is being displayed##showthatksislkd\n- **=== Create quiz ===**\n\t- display all skills with name and description\n\t\t- **main.js**\n\t\t\t---------------------------------------------\n\t\t\tconst displayQuizHtml = () => {\n\t\t\t\tlet html = '<div class=\"quizArea\">';\n\t\t\t\tfor (const skill of skills) {\n\t\t\t\t\thtml += `\n\t\t\t<div class=\"skill\">\n\t\t\t\t<div class=\"name\">${skill.name}</div>\n\t\t\t\t<div class=\"description\">${skill.description}</div>\n\t\t\t</div>\n\t\t\t `;\n\t\t\t\t}\n\t\t\t  html += '</div>';\n\t\t\t\treturn html;\n\t\t\t};\n\n\t\t\tdocument.querySelector('#app').innerHTML = `\n\t\t\t  <div>\n\t\t\t  <h1>Webdev Skill Quiz</h1>\n\t\t\t  ${displayQuizHtml()}\n\t\t\t  </div>\n\t\t\t`;\n\t\t\t---------------------------------------------\n\t\t- **style.scss**\n\t\t\t---------------------------------------\n\t\t\t.quizArea {\n\t\t\t\t.skill {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\tmargin-bottom: 1rem;\n\n\t\t\t\t\t.name {\n\t\t\t\t\t\tcolor: orange;\n\t\t\t\t\t}\n\t\t\t\t\t.description {\n\t\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t\t- site should look like this##thenamesitejskok\n\t- show random skills\n\t\t- refactor displaying of skill as a function\n\t\t\t- **main.js**\n\t\t\t\t----------------------------------\n\t\t\t\tconst displaySkill = (skill) => {\n\t\t\t\t  let html = '';\n\t\t\t\t\t\thtml += `\n\t\t\t\t<div class=\"skill\">\n\t\t\t\t\t<div class=\"name\">${skill.name}</div>\n\t\t\t\t\t<div class=\"description\">${skill.description}</div>\n\t\t\t\t</div>\n\t\t\t\t `;\n\t\t\t\t  return html;\n\t\t\t\t}\n\n\t\t\t\tconst displayQuizHtml = () => {\n\t\t\t\t\tlet html = '<div class=\"quizArea\">';\n\t\t\t\t\tfor (const skill of skills) {\n\t\t\t\t\thtml += displaySkill(skill);\n\t\t\t\t\t}\n\t\t\t\t  html += '</div>';\n\t\t\t\t\treturn html;\n\t\t\t\t};\t\t\t\t\n\t\t\t\t----------------------------------\n\t\t- refactor skills as quizSkills\n\t\t\t- **main.js**\n\t\t\t\t----------------------------------------------\n\t\t\t\tconst getQuizSkills = () => {\n\t\t\t\t  return skills;\n\t\t\t\t}\n\n\t\t\t\tconst displayQuizHtml = () => {\n\t\t\t\t\tlet html = '<div class=\"quizArea\">';\n\t\t\t\t\tfor (const skill of getQuizSkills()) {\n\t\t\t\t\thtml += displaySkill(skill);\n\t\t\t\t\t}\n\t\t\t\t  html += '</div>';\n\t\t\t\t\treturn html;\n\t\t\t\t};\t\t\t\t\n\t\t\t\t----------------------------------------------\n\t\t- in quizSkills, return the first 5 skills\n\t\t\t- **main.js**\n\t\t\t\t-----------------------------------------\n\t\t\t\tconst config = {\n\t\t\t\t\tnumberOfQuestions: 5\n\t\t\t\t};\n\n\t\t\t\tconst getQuizSkills = () => {\n\t\t\t\t\tconst randomSkills = [];\n\t\t\t\t\tfor (let i = 0; i < config.numberOfQuestions; i++) {\n\t\t\t\t\trandomSkills.push(skills[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn randomSkills;\n\t\t\t\t};\n\t\t\t\t-----------------------------------------\n\t\t- in quizSkills, return 5 random skills\n\t\t\t- **main.js**\n\t\t\t\t--------------------------------------------\n\t\t\t\tconst getQuizSkills = () => {\n\t\t\t\t\tconst randomSkills = [];\n\t\t\t\t\tfor (let i = 0; i < config.numberOfQuestions; i++) {\n\t\t\t\t\tconst randomIndex = Math.floor(Math.random() * skills.length);\n\t\t\t\t\trandomSkills.push(skills[randomIndex]);\n\t\t\t\t\t}\n\t\t\t\t\treturn randomSkills;\n\t\t\t\t};\t\t\t\t\n\t\t\t\t--------------------------------------------\n\t\t\t- your site should now work like this:#gif#worklikfiveshowing\n\t- create **Toggle Answers** button with test event\n\t\t- **main.js**\n\t\t\t-------------------------------------------\n\t\t\t<div class=\"commandArea\">\n\t\t\t\t<button class=\"btnToggleAnswers\">Toggle Answers</button>\n\t\t\t</div>\n\n\t\t\tconst attachEvents = () => {\n\t\t\t\tconst btnToggleAnswersElem = document.querySelector('.btnToggleAnswers');\n\t\t\t\tbtnToggleAnswersElem.addEventListener('click', () => {\n\t\t\t\t\talert('button works');\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tattachEvents();\n\t\t\t-------------------------------------------\n\t\t- **style.scss**\n\t\t\t----------------------------------------\n\t\t\t.commandArea {\n\t\t\t\tmargin-top: -.5rem;\n\t\t\t\tmargin-bottom: 1.5rem;\n\n\t\t\t\tbutton {\n\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t}\n\t\t\t}\t\t\t\t\n\t\t\t----------------------------------------\n\t\t- when you click the **Toggle Answers** button, you should see the alert message##testwithworks\n\t- make **Toggle Answers** button show and hide the descriptions\n\t\t- **main.js**\n\t\t\t---------------------------------------\n\t\t\tconst config = {\n\t\t\t\tnumberOfQuestions: 5,\n\t\t\t\tdisplayingDescriptions: false\n\t\t\t};\n\n\t\t\t<div class=\"description\" style=\"display:none\">${skill.description}</div>\n\n\t\t\tconst attachEvents = () => {\n\t\t\t\tconst btnToggleAnswersElem = document.querySelector('.btnToggleAnswers');\n\t\t\t\tbtnToggleAnswersElem.addEventListener('click', () => {\n\t\t\t\t\tconst descriptionElems = document.querySelectorAll('.description');\n\t\t\t\t\tconfig.displayingDescriptions = !config.displayingDescriptions;\n\t\t\t\t\tdescriptionElems.forEach((elem) => {\n\t\t\t\t\t\tif (config.displayingDescriptions) {\n\t\t\t\t\t\t\telem.style.display = 'block';\n\t\t\t\t  } else {\n\t\t\t\t\t\t\telem.style.display = 'none';\n\t\t\t\t  }\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\t---------------------------------------\n\t\t- site should work like this#gif#shoulldotoggleok\n\t- display correct answer on top and highlight this answer in skills when answers are shown\n\t\t- **main.js**\n\t\t\t---------------------------------------\n\t\t\tconst config = {\n\t\t\t\tnumberOfQuestions: 5,\n\t\t\t\tdisplayingDescriptions: false,\n\t\t\t\tcorrectSkill: null\n\t\t\t};\n\n\t\t\tconst determineCorrectAnswer = (randomSkills) => {\n\t\t\t\tconst randomIndex = Math.floor(Math.random() * randomSkills.length);\n\t\t\t\tconfig.correctSkill = randomSkills[randomIndex];\n\t\t\t}\n\n\t\t\tdetermineCorrectAnswer(randomSkills);\n\n\t\t\tconst answerElem = document.querySelector('.answer');\n\t\t\tanswerElem.innerText = config.correctSkill.description;\t\t\t\t\n\n\t\t\t<div class=\"answer\"></div>\n\t\t\t---------------------------------------\n\t\t- **style.scss**\n\t\t\t-----------------------------------------\n\t\t\t.answer {\n\t\t\t\tmargin-top: 1.2rem;\n\t\t\t}\t\t\t\t\n\t\t\t-----------------------------------------\n\t\t- your site should work like this:#gif#andtheworkquizsa\n\t- add learn links\n\t\t- **main.js**\n\t\t\t-----------------------------------------------\n\t\t\tconst config = {\n\t\t\t\tnumberOfQuestions: 5,\n\t\t\t\tdisplayingExtraInfo: false,\n\t\t\t\tcorrectSkill: null\n\t\t\t};\t\t\t\n\n\t\t\t<div class=\"extraInfo\" style=\"display:none\">\n\t\t\t\t<div class=\"description\">${skill.description}</div>\n\t\t\t\t<div class=\"learnLinks\">\n\t\t\t\t\t<a target=\"_blank\" href=\"${skill.url}\" class=\"learnLink\">GENERAL INFO</a>\n\t\t\t\t\t<div class=\"separator\">&#x2022;</div>\n\t\t\t\t\t<div>English:</div>\n\t\t\t\t\t<a target=\"_blank\" href=\"https://www.google.com/search?q=${skill.name}+web+development\" class=\"learnLink\">articles</a>\n\t\t\t\t\t<a target=\"_blank\" href=\"https://www.youtube.com/results?search_query=web+development+${skill.name}\" class=\"learnLink\">videos</a>\n\t\t\t\t\t<div class=\"separator\">&#x2022;</div>\n\t\t\t\t\t<div>German:</div>\n\t\t\t\t\t<a target=\"_blank\" href=\"https://www.google.com/search?q=${skill.name}+web+development+deutsch\" class=\"learnLink\">articles</a>\n\t\t\t\t\t<a target=\"_blank\" href=\"https://www.youtube.com/results?search_query=web+development+deutsch+${skill.name}\" class=\"learnLink\">videos</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\tconst attachEvents = () => {\n\t\t\t\tconst btnToggleAnswersElem = document.querySelector('.btnToggleAnswers');\n\t\t\t\tbtnToggleAnswersElem.addEventListener('click', () => {\n\t\t\t\t\tconst extraInfoElems = document.querySelectorAll('.extraInfo');\n\t\t\t\t\tconfig.displayingExtraInfo = !config.displayingExtraInfo;\n\t\t\t\t\textraInfoElems.forEach((elem) => {\n\t\t\t\t\t\tif (config.displayingExtraInfo) {\n\t\t\t\t\t\t\telem.style.display = 'block';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telem.style.display = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tconst answerElem = document.querySelector('.answer');\n\t\t\t\tanswerElem.innerText = config.correctSkill.description;\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- **style.scss**\n\t\t\t-----------------------------------------\n\t\t\t.learnLinks {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: .5rem;\n\t\t\t\tmargin-top: .7rem;\n\t\t\t\tbackground-color: #1c1c1c;\n\t\t\t\tpadding: .5rem;\n\t\t\t\tborder-radius: .5rem;\n\t\t\t\ta {\n\t\t\t\t\tcolor: #777;\n\t\t\t\t}\n\t\t\t\t.separator {\n\t\t\t\t\tcolor: #444;\n\t\t\t\t}\n\t\t\t}\n\t\t\t-----------------------------------------\t\t\t\n\t- add links to jobs which require each skill\n\t\t- **main.js**\n\t\t\t-------------------------------------------------\n\t\t\tconst getJobAdHtml = (skill) => {\n\t\t\t\tconst jobHtmlBlocks = skill.jobs.map(\n\t\t\t\t\t(job) => `<span><a target=\"_blank\" href=\"${job.url}\">${job.title} at ${job.company}</a></span>`\n\t\t\t\t);\n\t\t\t\treturn jobHtmlBlocks.join('<span> &#x2022; </span>');\n\t\t\t};\n\n\t\t\t<div class=\"jobAds\">\n\t\t\t\t<span class=\"intro\">${skill.jobs.length === 1 ? '1 job ad' : skill.jobs.length + ' job ads'}: </span>\n\t\t\t\t${getJobAdHtml(skill)}\t\n\t\t\t</div>\n\n\t\t\tconst getJobsForSkill = (skill) => {\n\t\t\t\treturn jobs.filter(job => {\n\t\t\t\t\tconst skillIdCodes = job.skillList.split(',');\n\t\t\t\t\tfor (const skillIdCode of skillIdCodes) {\n\t\t\t\t\t\tif (skill.idCode === skillIdCode.trim()) {\n\t\t\t\t\t\t\treturn job;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\t\t\n\n\t\t\tconst getQuizSkills = () => {\n\t\t\t\tconst randomSkills = [];\n\t\t\t\tfor (let i = 0; i < config.numberOfQuestions; i++) {\n\t\t\t\t\tconst randomIndex = Math.floor(Math.random() * skills.length);\n\t\t\t\t\tconst randomSkill = skills[randomIndex];\n\t\t\t\t\trandomSkill.jobs = getJobsForSkill(randomSkill);\n\t\t\t\t\trandomSkills.push(randomSkill);\n\t\t\t\t}\n\t\t\t\tdetermineCorrectAnswer(randomSkills);\n\t\t\t\treturn randomSkills;\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- **style.scss**\n\t\t\t-----------------------------------------\n\t\t\t.learnLinks {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: .5rem;\n\t\t\t\tmargin-top: .7rem;\n\t\t\t\tbackground-color: #1c1c1c;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder-radius: .5rem;\n\t\t\t\ta {\n\t\t\t\t\tcolor: #777;\n\t\t\t\t}\n\t\t\t\t.separator {\n\t\t\t\t\tcolor: #444;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.jobAds {\n\t\t\t\tmargin-top: .7rem;\n\t\t\t\tbackground-color: #151515;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder-radius: .5rem;\n\t\t\t\tline-height: 1.4rem;\n\n\t\t\t\t.intro {\n\t\t\t\t\tcolor: rgb(211, 211, 96);\n\t\t\t\t}\n\t\t\t\ta {\n\t\t\t\t\tcolor: #777;\n\t\t\t\t}\n\t\t\t\t.separator {\n\t\t\t\t\tcolor: #444;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t-----------------------------------------\t\n- **challenges**\n\t- make it so doubles are not displayed##nothedoubles\n\t- enable user to specific how many jobs ads skills must have in order to be included in the quiz\n\t- make it so the more popular a skill is, the more often it is selected to be included in the quiz\n\t- make it so job ads have a link only if they were posted within the last month (to increase relevance and reduce the number of dead links)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-04-19 21:16:08","systemWhoCreated":"systemUnknown"},{"id":704,"category":"TypeScript","title":"Create frontend React site and backend Node/Express site both with TypeScript","body":"- creating this site will be useful for two reasons:\n\t- the site itself is informative to anyone looking for a web developer job as it lists **current webdev job ads** and **which skills are in most demand**\n\t- technically, it will show you how to use **TypeScript** in a real-world frontend/backend application\n- the final code can be found here:\n\t- nnn\n\t- https://github.com/edwardtanguay/et005-jobskills-frontend\n- the final site works like this\n\t- nnn\n- **== WHAT IS TYPESCRIPT? ==**\n\t- since this howto serves as an **introduction to pragmatic TypeScript**, let's briefly discuss what TypeScript is\n\t- background\n\t\t- TypeScript is a **strongly-typed superset of JavaScript**\n\t\t\t- **superset** means that everything in JavaScript is also in TypeScript, but not visa versa\n\t\t\t- **strongly-typed** means that you are forced to define the type of every variable you use, e.g.\n\t\t\t\t- base language types such as string, number, boolean or HTMLAnchorElement\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t\tconst createEmployee = (lastName: string, age: number, signedContract: boolean) => {\n\t\t\t\t\t\t...\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t- types in npm packages you use, such as in Express\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\t\t\tres.send(model.getApiInstructions());\n\t\t\t\t\t});\t\t\t\t\t\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t- custom types that you create such as IEmployee, ICustomer\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\tinterface IEmployee {\n\t\t\t\t\t\tfirstName: string;\n\t\t\t\t\t\tlastName: string;\n\t\t\t\t\t\tnotes: string;\n\t\t\t\t\t}\t\t\t\n\n\t\t\t\t\tconst employees: IEmployee[] = [];\n\t\t\t\t\t------------------------------------------------\n\t\t- **Anders Hejlsberg** works for Microsoft, created **C# in 2002**, and created **TypeScript in 2012**\n\t\t\t- this is one reason there are many similarities between C# and JavaScript\n\t\t\t- TypeScript gives JavaScript many of the advantages of strongly-typed languages such as C# and Java##andershejlsberg\n\t- advantages of TypeScript\n\t\t- **type safety**\n\t\t\t- catches errors at runtime \n\t\t\t- will not build the application or allow you to publish your code live until you fix all type errors\n\t\t- **intellisense on variables**\n\t\t\t- since all properties of objects are known, VSCode will give you a nice dropdown of all properites of objects, even on your custom objects such as IEmployee\n\t\t- **makes code more understandable**\n\t\t\t- if you want to know what properties an object might have in the application, you look at its interface (type)\n\t\t\t- with JavaScript, you never know what properties might be added to an object somewhere else in the code\n\t\t- **easier to refactor code**\n\t\t\t- you can add or remove a property of an object and TypeScript will inform of every change you need to make everywhere in your application so that this change will cause no errors\n\t\t- **TypeScript serves as a linter**\n\t\t\t- it makes sure your code is more organized and will easily find typos, e.g. will inform you if object properties are not spelled correctly\n\t\t- **TypeScript servers as a testing tool**\n\t\t\t- TypeScript guarantees the internal consistency of variable types, e.g. that all uses in your application of a functions, actually sends the correct types of variables to the function as parameters, e.g. that a number is not sent when a string is expected\n\t\t- **less bugs**\n\t\t\t- once you get TypeScript running smoothly in your applications, you'll notice you have less bugs, particulary less sloppy bugs caused by misspellings, typos, misunderstandings, use of wrong variables, ambiguous variable names, lack of planning and organization, etc.\n\t- disadvantages of TypeScript\n\t\t- **steep learning curve**\n\t\t\t- but the invested time is in most cases worth spending particularly if you work with large, complicated applications\n\t\t- **time-consuming frustration**\n\t\t\t- particularly with always having to define and find types for variables, even for variables in system and third-party packages\n\t\t\t- but in the end you always find them, and the more experience you accumulate, the faster you get in resolving missing type issues\n\t\t- **compilation overhead**\n\t\t\t- TypeScript needs to be compiled, which when developing a Node/Express site with TypeScript typically means waiting a few seconds after every code change for the TypeScript to compile to JavaScript and be ready to run\n\t\t\t- on the frontend, frameworks like Vite reduce this compile time to a negligably short time\n\t\t- **issues with third-party npm packages that don't have good TypeScript support**\n\t\t\t- some npm packages have better TypeScript support than others and when using npm packages, one often spends time looking for the right definitions\n\t\t\t\t- but for the most part, most popular npm packages are TypeScript compatible and installing the @types/packagename types is quick and works well, e.g.\n\t\t\t\t\t------------------------------------------\n\t\t\t\t\tnpm i -D @types/lodash\n\t\t\t\t\t------------------------------------------\n\t\t\t\t- for some packages such as Jest, there are other packages with better TypeScript support, e.g. instead of **Jest**, use **Vitest** which was created to be a kind of Jest clone that is designed from the beginning to be compatible with ES6 modules and TypeScript\n\t\t- **can be difficult to get set up**\n\t\t\t- TypeScript can be difficult to set up in your programming environment since \n\t\t\t\t- TypeScript does not run natively in the browser or in Node\n\t\t\t\t- therefore TypeScript needs to be converted into JavaScript before your code can be executed\n\t\t\t\t- this involves some kind of (1) observation of code changes, and (2) a build process when those changes are made\n\t\t\t- on the frontend\n\t\t\t\t- build tools such as Vite completely solve this problem and make programming in TypeScript a seemless, immediate experience\n\t\t\t- on the backend\n\t\t\t\t- there is a setup process which involves using nodemon to observe the changes in code, then transpile TypeScript into JavaScript and run it each time there is a change in the code\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\t\"scripts\": {\n\t\t\t\t\t\t\"dev\": \"nodemon\",\n\t\t\t\t\t\t\"build\": \"tsc\"\n\t\t\t\t\t},\n\t\t\t\t\t\"nodemonConfig\": {\n\t\t\t\t\t\t\"watch\": [\n\t\t\t\t\t\t\t\"src\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"ext\": \"ts\",\n\t\t\t\t\t\t\"exec\": \"npm run build && node dist/server.js\"\n\t\t\t\t\t},\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t- once you get TypeScript running on the backend  once, you can use it for other projects\n\t\t\t\t- my [starter sites](https://starters.tanguay.eu) are all based on TypeScript and ES6 modules both frontend and backend, feel free to use them as templates which have TypeScript up and running\n\t- **avoid misunderstandings in TypeScript**\n\t\t- 1. **TypeScript does not check types at runtime**\n\t\t\t- TypeScript only exists\n\t\t\t\t- **during development**, e.g. VSCode will inform you if you use a function and send a parameter with the wrong type\n\t\t\t\t- **during build time**, e.g. your build will fail (and thus will not be published live at e.g. Vercel or Netlify) if there are any type inconsistencies\n\t\t\t- **TypeScript does not exist at runtime at all**\n\t\t\t\t- type script **compiles to plain JavaScript** which is run in the browser or in Node\n\t\t\t\t- this means that at run time, **TypeScript interfaces do not exist**, and **type checking is not performed at all**\n\t\t\t\t- in particular, this means that if your app fetches data from an external source such as an API, **there is no guarantee that the data you fetch from external sources will conform to the interfaces or types**\n\t\t\t\t- therefore if you fetch external data in your application, you have to check it at runtime\n\t\t\t\t\t- one of the best tools to verify the structure of data from external sources is **Zod** which works well with TypeScript, e.g. you can define Zod types based on TypeScript types\n\t\t\t\t\t- if you have never heard of Zod, let [Kyle](https://www.youtube.com/watch?v=9UVPk0Ulm6U) or [Theo]([Zod](https://www.youtube.com/watch?v=9UVPk0Ulm6U)) give you a quick overview\n\t\t- 2. **interfaces** and **types** are the same thing in TypeScript (more or less)\n\t\t\t- there are slight differences but both are commonly used and these terms can usually be used interchangeably\n\t\t\t- I tend to use interfaces since\n\t\t\t\t- this is a convention in C# which I programmed in for decades\n\t\t\t\t- when you use interfaces, it's common to prefix your interface names with an \"I\" so you have IEmployees and ICustomers\n\t\t\t\t- this makes it clearer when you look at the code what is an interface and what is not\n\t\t\t\t\t- types are typically named e.g. Employee or Customer, which can be easily confused with e.g. the name of a component, etc.\n\t- **tips for developing with TypeScript**\n\t\t- when using TypeScript, ChatGPT is your friend\n\t\t\t- particularly when TypeScript is complaining that a system variable such as an event object needs to have a type, simply ask ChatGPT\n\t\t\t- my experience is that ChatGPT will either give you the exact type you need, or it will get close and thereby give you useful terms and type names to google in order to find it yourself##chatgggafortype\n\t\t- learning by doing the best way to learn TypeScript\n\t\t\t- TypeScript can't be learned in a day or week, but over months by using it, having problems with it, solving those problems, and constantly learning new features\n\t\t\t- the best way to start is to choose a non-critical project and develop it with TypeScript, frontend and backend\n\t\t\t\t- you'll run into many problems, eventually solve them, and that's how you'll get good with TypeScript\n- **== BUILD THE FRONTEND ==**\n\t- set up all folders for project\n\t\t- `et005-jobskills`\n\t\t\t- `et005-jobskills-backend`\n\t\t\t- `et005-jobskills-frontend`\n\t- cd into `et005-jobskills-frontend`\n\t\t- create React site in this directory\n\t\t\t- `npm create vite .`\n\t\t\t\t- React\n\t\t\t\t- TypeScript\n\t\t- go into VSCode\n\t\t\t- `code .`\n\t- set up Git repository\n\t\t- `git init -b dev`\n\t\t- make initial commit\n\t- start site\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- site should look like this##andthefirssite\n\t- minimize site\n\t\t- delete `public/vite.svg` - a graphic for initial Vite site\n\t\t- **.gitignore**: minimize\n\t\t\t-------------------------------------\n\t\t\tnode_modules\n\t\t\tdist\n\t\t\t.vscode/*\t\t\t\t\n\t\t\t-------------------------------------\n\t\t- **index.html**: change title\n\t\t\t-------------------------------------\n\t\t\t<title>Job Site</title>\n\t\t\t-------------------------------------\n\t\t- delete `package-lock.json` - locks npm package versions, will be recreated\n\t\t- delete `src/assets` - graphic for initial Vite site\n\t\t- empty content of `src/App.css` - this will be our only CSS file (will convert to Sass)\n\t\t- **App.tsx**: the main application file, reduce to minimimum\n\t\t\t-----------------------------------------\n\t\t\timport './App.css';\n\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<h1>Job Site</h1>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\t\n\t\t\t-----------------------------------------\n\t\t- delete `index.css` - we will only have on Sass file \n\t\t- **main.tsx**: reduce to minimum\n\t\t\t- remove reference to index.css \n\t\t\t- remove StrictMode (reloads useEffect twice in development, confusing)\n\t\t\t--------------------------------------------\n\t\t\timport ReactDOM from 'react-dom/client'\n\t\t\timport App from './App'\n\n\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t<App />\n\t\t\t)\n\t\t\t--------------------------------------------\n\t\t- keep the `vite-env.d.ts` file, interesting, it seems to enable you to set types even on environment variables##whatisviteenv\n\t\t- your site should now look like this##themiininjsite\n\t- set up Sass\n\t\t- `npm i sass`\n\t\t- rename `App.css` to `App.scss`\n\t\t- **App.tsx**\n\t\t\t-------------------------------\n\t\t\timport './App.scss';\n\t\t\t-------------------------------\n\t\t- **App.scss**\n\t\t\t-----------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #333;\n\t\t\t\tcolor: #ccc;\n\t\t\t\tpadding: .5rem 2rem;\n\t\t\t\tfont-family: sans-serif;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: rgb(217, 183, 118);\n\t\t\t\t}\n\n\t\t\t\tp {\n\t\t\t\t\tfont-size: 1.2rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\t-----------------------------------\n\t\t- **App.tsx**\n\t\t\t---------------------------------\n\t\t\t<p>Welcome to this site.</p>\n\t\t\t---------------------------------\n\t\t- your site should now look like this##themiininjsite22\n\t- implement React Router with three pages: Welcome, Jobs, Skills\n\t\t- `npm i react-router-dom`\n\t\t- create the three page components\n\t\t\t- **src/pages/PageWelcome.tsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\texport const PageWelcome = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"pageWelcome\">\n\t\t\t\t\t\t\t<p>This is the welcome page.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t--------------------------------------------\n\t\t\t- **src/pages/PageJobs.tsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\texport const PageJobs = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"pageJobs\">\n\t\t\t\t\t\t\t<p>This is the jobs page.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t--------------------------------------------\n\t\t\t- **src/pages/PageSkills.tsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\texport const PageSkills = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"pageSkills\">\n\t\t\t\t\t\t\t<p>This is the skills page.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t--------------------------------------------\t\n\t\t- make React Router available to the site\n\t\t\t- **main.tsx**: add\n\t\t\t\t--------------------------------------------\n\t\t\t\timport { BrowserRouter } from 'react-router-dom';\n\n\t\t\t\tReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t\t\t\t\t<BrowserRouter>\n\t\t\t\t\t\t<App />\n\t\t\t\t\t</BrowserRouter>\n\t\t\t\t);\t\t\t\n\t\t\t\t--------------------------------------------\n\t\t- create menu and routing logic\n\t\t\t- **App.tsx**: add\n\t\t\t\t-----------------------------------------\n\t\t\t\timport { NavLink, Routes, Route, Navigate } from 'react-router-dom';\n\n\t\t\t\t<nav>\n\t\t\t\t\t<NavLink to=\"/welcome\">Welcome</NavLink>\n\t\t\t\t\t<NavLink to=\"/jobs\">Jobs</NavLink>\n\t\t\t\t\t<NavLink to=\"/skills\">Skills</NavLink>\n\t\t\t\t</nav>\n\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />} />\n\t\t\t\t\t<Route path=\"/jobs\" element={<PageJobs />} />\n\t\t\t\t\t<Route path=\"/skills\" element={<PageSkills />} />\n\t\t\t\t\t<Route path=\"/\" element={<Navigate to=\"/welcome\" replace />} />\n\t\t\t\t</Routes>\t\n\t\t\t\t-----------------------------------------\n\t\t- add styling\n\t\t\t- **App.scss**\n\t\t\t\t-----------------------------------------\n\t\t\t\tnav {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\ta {\n\t\t\t\t\t\tcolor: #aaa;\n\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\tmargin-right: 1rem;\n\t\t\t\t\t}\n\n\t\t\t\t\ta.active {\n\t\t\t\t\t\tcolor: rgb(211, 211, 110);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t-----------------------------------------\n\t\t- site should look like this:##sitewithmenuoksdf\n\t- implement useContext\n\t\t- **main.tsx**: add\n\t\t\t------------------------------------------------\n\t\t\timport { AppProvider } from './AppContext';\n\n\t\t\t<AppProvider>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<App />\n\t\t\t\t</BrowserRouter>\n\t\t\t</AppProvider>\n\t\t\t------------------------------------------------\n\t\t- **src/AppContext.tsx**: create\n\t\t\t-----------------------------------------------\n\t\t\timport { createContext } from 'react';\n\n\t\t\texport const AppContext = createContext();\n\n\t\t\texport const AppProvider = ({ children }) => {\n\t\t\t\tconst appTitle = 'The Job Site';\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tappTitle,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- **App.tsx**: add\n\t\t\t---------------------------------------------\n\t\t\timport { useContext } from 'react';\n\t\t\timport { AppContext } from './AppContext';\t\t\t\n\n\t\t\tconst { appTitle} = useContext(AppContext);\n\n\t\t\t<h1>{appTitle}</h1>\n\t\t\t---------------------------------------------\n\t- resolve TypeScript issues\n\t\t- notice that TypeScript is reporting all kinds of errors\n\t\t\t- in **AppContext.tsx** with AppContext and AppProvider children##noticeallsjikin\n\t\t\t- in **App.tsx** it says we need to supply the type for **appTitle**##theappnotickjs\n\t\t- but also notice that even with these errors, our website actually works (!)##worksthejo\n\t\t\t- why is that?\n\t\t\t\t- because **TypeScript compiles to JavaScript**\n\t\t\t\t- and there is **nothing wrong with the JavaScript** that is produced for the browser (created by Vite in the background via the esbuild bundler)\n\t\t\t- but TypeScript is informing us that if we want to guarantee our own types (e.g. for **appTitle**) and the types of variables we use from other packages (e.g. **AppContext** and **AppProvider**), then **we need to explicitly define these types**\n\t\t- provide TypeScript with all the type information it needs\n\t\t\t- problem:\n\t\t\t\t- this is a typical point where developers give up on TypeScript\n\t\t\t\t- TypeScript is famous for producing these kinds of cryptic and difficult to understand error messages\n\t\t\t\t- it's often not easy to find these \n\t\t\t- solution:\n\t\t\t\t- know that while often difficult, it is always possible to find the types and correct syntax that TypeScript needs\n\t\t\t\t- in my experience, with ChatGPT, Google, Stack Overflow and a spirit of perservence, you can resolve any TypeScript error\n\t\t\t\t- the following is the solution to getting useContext to work with TypeScript\n\t\t\t- **AppContext.tsx**\n\t\t\t\t- create interfaces for **AppContext** and **AppProvider**\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t\tinterface IAppContext {\n\t\t\t\t\t\tappTitle: string;\n\t\t\t\t\t}\n\n\t\t\t\t\tinterface IAppProvider {\n\t\t\t\t\t\tchildren: React.ReactNode;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t- inform TypeScript that the createContext() function will be receiving a variable of type **IAppContext**\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\t- this code allows us to pass an initial value of empty object **which nevertheless should be understood to be of type IAppContext**##explainappcontesetj\n\t\t\t\t- inform TypeScript that **AppProvider** is a function component of type IAppProvider\n\t\t\t\t\t---------------------------------------\n\t\t\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\t\t---------------------------------------\n\t\t\t\t\t- if you look at the definition of IAppProvider, you see that it has children which return **React.ReactNode* otherwise known as JSX##thesecondjgchat\n\t\t\t- all TypeScript errors are now resolved\n\t\t\t\t- note that now in **App.tsx** the type of **appTitle** is now known##tstjresolved\n\t\t\t\t- this means that all variables we provide from our AppContext will be explicitly known as specific types throughout our application\n\t\t\t\t\t- this not only makes our application much more secure, e.g. we won't be able to use **.trim()** on a number variables (which JavaScript would allow)\n\t\t\t\t\t- and also, we get intellisense dropdown information on all variables, e.g. for strings, we get a dropdown of all methods that are allowed with strings##theidenfitwexp222\n\t\t\t\t\t- as we will see later, we will also get intellisense dropdown information on our **custom variables** that we define with custom interfaces\n\t- fetch and display jobs on page\n\t\t- fetch jobs in AppContext\n\t\t\t- create an interface that describes the properties that our job variables will have\n\t\t\t\t- based on this JSON file: https://edwardtanguay.vercel.app/share/jobs.json\n\t\t\t\t- create **src/interfaces.ts**\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\texport interface IJob {\n\t\t\t\t\t\tid: number;\n\t\t\t\t\t\ttitle: string;\n\t\t\t\t\t\tcompany: string;\n\t\t\t\t\t\turl: string;\n\t\t\t\t\t\tdescription: string;\n\t\t\t\t\t\tskillList: string;\n\t\t\t\t\t\tpublicationDate: string;\n\t\t\t\t\t}\n\t\t\t\t\t--------------------------------------------\n\t\t\t- **AppContext.tsx**: add\n\t\t\t\t----------------------------------------\n\t\t\t\timport { IJob } from './interfaces';\n\n\t\t\t\tconst jobsUrl = 'https://edwardtanguay.vercel.app/share/jobs.json';\n\n\t\t\t\tinterface IAppContext {\n\t\t\t\t\tappTitle: string;\n\t\t\t\t\tjobs: IJob[];\n\t\t\t\t}\n\n\t\t\t\tconst [jobs, setJobs] = useState<IJob[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetJobs((await axios.get(jobsUrl)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\tvalue={{\n\t\t\t\t\tappTitle,\n\t\t\t\t\tjobs\n\t\t\t\t}}\t\t\t\t\n\t\t\t\t----------------------------------------\n\t\t\t- you'll have to also import **useState**, **useEffect** and install and import **axios**\n\t\t- display jobs on Welcome page\n\t\t\t- **WelcomePage.tsx**\n\t\t\t\t----------------------------------\n\t\t\t\timport { useContext } from 'react';\n\t\t\t\timport { AppContext } from '../AppContext';\n\n\t\t\t\texport const PageWelcome = () => {\n\t\t\t\t\tconst { jobs } = useContext(AppContext);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>There are {jobs.length} jobs.</p>\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t----------------------------------\n\t\t\t- our welcome page now looks like this:##thewelpageksj\n\t\t- display jobs on Jobs page\n\t\t\t- **JobsPage.tsx**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport { useContext } from 'react';\n\t\t\t\timport { AppContext } from '../AppContext';\n\n\t\t\t\texport const PageJobs = () => {\n\t\t\t\t\tconst { jobs } = useContext(AppContext);\n\n\t\t\t\t\tconst _jobs = jobs.filter(m => m.publicationDate > '2023-03-01').sort((a, b) => (a.publicationDate < b.publicationDate) ? 1 : 0);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"pageJobs\">\n\t\t\t\t\t\t\t<div className=\"jobs\">\n\t\t\t\t\t\t\t\t{_jobs.map((job) => {\n\t\t\t\t\t\t\t\t\treturn <div className=\"job\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"publicationDate\">{job.publicationDate}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"title\"><a target=\"_blank\" href={job.url}>{job.title}</a> - {job.company}</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"skillList\">{job.skillList}</div>\n\t\t\t\t\t\t\t\t\t</div>;\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t---------------------------------------------\n\t\t\t- **App.scss**\n\t\t\t\t--------------------------------------------\n\t\t\t\t.pageJobs {\n\t\t\t\t\t.jobs {\n\t\t\t\t\t\t.job {\n\t\t\t\t\t\t\tbackground-color: #292929;\n\t\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t\t\tpadding: 1rem;\n\n\t\t\t\t\t\t\t.publicationDate {\n\t\t\t\t\t\t\t\tcolor: rgb(221, 221, 116);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.title {\n\t\t\t\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\t\t\t\t\tcolor: rgb(144, 95, 5);\n\n\t\t\t\t\t\t\t\ta {\n\t\t\t\t\t\t\t\t\tcolor: rgb(199, 144, 41);\n\t\t\t\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\t\t\t\t&:hover {\n\t\t\t\t\t\t\t\t\t\ttext-decoration: underline;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t.skillList {\n\t\t\t\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\t\t\tcolor:#999; \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t\t- the job page should look like this##andthejobpage\n\t\t- refactor displaying of job to its own component, and deal with TypeScript issues\n\t\t\t- **src/components/Job.tsx**\n\t\t\t\t------------------------------------------\n\t\t\t\timport { IJob } from '../interfaces';\n\n\t\t\t\tinterface IProps {\n\t\t\t\t\tjob: IJob;\n\t\t\t\t}\n\n\t\t\t\texport const Job = ({ job }: IProps) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"job\">\n\t\t\t\t\t\t\t<div className=\"publicationDate\">{job.publicationDate}</div>\n\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t<a target=\"_blank\" href={job.url}>\n\t\t\t\t\t\t\t\t\t{job.title}\n\t\t\t\t\t\t\t\t</a>{' '}\n\t\t\t\t\t\t\t\t- {job.company}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"skillList\">{job.skillList}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t------------------------------------------\n\t\t\t- **PageJobs.tsx**: change\n\t\t\t\t-----------------------------------------\n\t\t\t\t<div className=\"pageJobs\">\n\t\t\t\t\t<div className=\"jobs\">\n\t\t\t\t\t\t{_jobs.map((job) => {\n\t\t\t\t\t\t\treturn <Job job={job} />; })}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t- fetch and display jobs on page\n\t\t- nnn\n- **== BUILD THE FRONTEND ==**\n\t- see this starter\n\t\t- [Node/Express API with simple JSON-file data source](https://starters.tanguay.eu/list/backendSimpleReadonlyJsonApi)\n- **challenges**\n\t- implement [Zod](https://www.npmjs.com/package/zod) into this application so the external data fetches from APIs are checked for validity at runtime","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-04-20 23:21:07","systemWhoCreated":"systemUnknown"},{"id":705,"category":"Commands","title":"How to copy the contents of a file to the clipboard on Windows, Linux and Mac","body":"- one sometimes has to copy the contents of a file onto the clipboard in order to paste it elsewhere\n- this is common when e.g. you set up an SSH key, when you have to copy the public key to an external website\n- here are commands to do this on each operating system\n- Windows: \n\t- `clip < id_ed25519.pub`\n- Ubuntu:\n\t- `xclip -selection clipboard < ~/.ssh/id_ed255519.pub`\n- Macbook\n\t- `pbcopy < ~/.ssh/id_ed25519.pub`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-04-27 01:22:49","systemWhoCreated":"systemUnknown"},{"id":706,"category":"Tailwind","title":"Set up a Vite React-Router site with Tailwind/Sass that uses Google fonts","body":"- **what we will do**\n\t- we will create a simple React site that uses both Tailwind and Sass together\n\t- Tailwind takes a number of steps to set up\n\t- Sass is much easier to set up\n\t- you will see that you can use both together in one project\n\t- you can even create styles in Sass that use Tailwind styles\n\t- we also import Google fonts and use these from both Sass styles as well as inline Tailwind\n\t- in all, this howto will set you up with a **simple React Router site in which you can use both Sass, Tailwind and Google fonts**\n- **final project**\n\t- code is here:\n\t\t- https://github.com/edwardtanguay/et001-react-router-tailwind\n\t- here is the final site with Sass, Tailwind and Google fonts:##thetailsitefinished\n- **set up basic React site with React Router**\n\t- download or clone this starter: \n\t\t- https://starters.tanguay.eu/list/darkViteSimpleMenu\n\t- `npm audit fix` to fix the vulnerability\n\t- you should have a site that looks like this##thebasesitekjs\n- **install Tailwind**\n\t- install all dependences\n\t\t- `npm i -D tailwindcss postcss autoprefixer`\n\t\t- your package.json will look like this##theautoprexxx\n\t- add **postcss.config.js**\n\t\t---------------------------------\n\t\texport default {\n\t\t  plugins: {\n\t\t\ttailwindcss: {},\n\t\t\tautoprefixer: {},\n\t\t  },\n\t\t}\t\t\n\t\t---------------------------------\n\t- add **tailwind.config.js**\n\t\t-----------------------------------------------\n\t\texport default {\n\t\t  corePlugins: {\n\t\t\tpreflight: false,\n\t\t  },\n\t\t  content: [\n\t\t\t\"./index.html\",\n\t\t\t\"./src/pages/**/*.{js,ts,jsx,tsx}\",\n\t\t  ],\n\n\t\t  theme: {\n\t\t\textend: {\n\t\t\t  fontFamily:{\n\t\t\t\t'Poppins':'Poppins'\n\t\t\t  }\n\t\t\t},\n\t\t  },\n\t\t  plugins: [],\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- import fonts and add directives\n\t\t- create **src/index.css**\n\t\t\t----------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\n\t\t\t----------------------------------------\n\t\t- add to **App.tsx**\n\t\t\t-------------------------------------\n\t\t\timport './index.css';\t\t\t\n\t\t\t-------------------------------------\n\t- use Tailwind styling\n\t\t- change **PageWelcome.tsx**\n\t\t\t---------------------------------------------\n\t\t\t<p className=\"text-red-600\">Welcome to this site.</p>\n\t\t\t---------------------------------------------\n\t\t- you should see intellisense for Tailwind##thetwiwwwinintel\n\t\t- Tailwind styling will show on page:##showtailonpagge\n\t- troubleshooting\n\t\t- if VSCode is not showing you Tailwind styles as intellisense\n\t\t\t- see Stackoverflow: [My TailWind CSS Intellisense plugin just isn't working on my VSCode](https://stackoverflow.com/questions/61343447/my-tailwind-css-intellisense-plugin-just-isnt-working-on-my-vscode)\n- **add Sass styling**\n\t- note Sass is installed\n\t\t- note that since we used this starter site, Sass is already installed\n\t\t- but if you didn't use the starter, then install Sass like this:\n\t\t\t- `npm i sass`\n\t\t\t- rename all `.css` files to `.scss`\n\t- note that Sass takes precedence over Tailwind\n\t\t- add another paragraph element to the Welcome page, and make sure the page div is marked `pageWelcome`\n\t\t\t- **PageWelcome.tsx**\n\t\t\t\t----------------------------------------\n\t\t\t\texport const PageWelcome = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"page pageWelcome\">\n\t\t\t\t\t\t\t<p className=\"text-red-600\">Welcome to this site.</p>\n\t\t\t\t\t\t\t<p>This is some info.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\t\t\t\n\t\t\t\t----------------------------------------\n\t\t\t- the second line will of course be white:##tailwindtheseconde\n\t\t- now with Sass, style all paragraph elements on the welcome page\n\t\t\t- add to **App.scss**\n\t\t\t\t-----------------------------------------\n\t\t\t\t.pageWelcome {\n\t\t\t\t\tp {\n\t\t\t\t\t\tcolor: orange;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t- note that both paragraph elements are orange since Sass (orange) takes precedence over Tailwind (red)##thesassmoretail\n- **add Tailwind styles in Sass stylesheet**\n\t- note that with the `@apply` directory, you can use Tailwind in your Sass stylesheet\n\t- **App.scss**\n\t\t-----------------------------------------\n\t\t.pageWelcome {\n\t\t\tp {\n\t\t\t\tcolor: orange;\n\t\t\t\t@apply bg-[#111] p-2 w-80;\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------\n\t- welcome page now looks like this##withtailbothon\n- **use Google fonts with Sass and Tailwind**\n\t- add Google font and use with Sass or Tailwind\n\t\t- add the Poppins font to first line in **index.css**\n\t\t\t--------------------------------------------\n\t\t\t@import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');\n\t\t\t--------------------------------------------\n\t\t- note that `display=swap` will cause your browser to display a similar font, if available, while your font loads, in order to reduce the amount of flicker in your font when your page loads and your desired font is finally loaded\n\t\t- **App.scss** - add font to paragraph elements with Sass\n\t\t\t---------------------------------------------------\n\t\t\tp {\n\t\t\t\tcolor: orange;\n\t\t\t\t@apply bg-[#111] p-2 w-80;\n\t\t\t\tfont-family: poppins;\n\t\t\t}\n\t\t\t---------------------------------------------------\n\t\t- **App.scss** - note you can also add it as a Tailwind font, but instead of `poppins` you have to write `font-Poppins`\n\t\t\t-------------------------------------------------\n\t\t\tp {\n\t\t\t\tcolor: orange;\n\t\t\t\t@apply bg-[#111] p-2 w-80 font-Poppins;\n\t\t\t}\t\t\n\t\t\t-------------------------------------------------\n\t- search for new Google font and add it\n\t\t- go to the Google fonts page: https://fonts.google.com\n\t\t- search for **shadows**##thesahdowsearch\n\t\t- click **Shadows Into Light**\n\t\t- click on **Select Regular 400**##clickonregulasend\n\t\t- click **View selected families**##vieweselcijsd\n\t\t- copy the font family text and name:##copyfmailysfont\n\t\t- add it in **index.css**##addthefamilyfont\n\t\t- you can immediately use it from Sass, **App.scss**\n\t\t\t----------------------------------------\n\t\t\t.pageWelcome {\n\t\t\t\th2 {\n\t\t\t\t\tfont-family: Shadows Into Light;\n\t\t\t\t}\n\t\t\t\tp {\n\t\t\t\t\tcolor: orange;\n\t\t\t\t\t@apply bg-[#111] p-2 w-80 font-Poppins;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t-----------------------------------------------\n\t\t\t<div className=\"page pageWelcome\">\n\t\t\t\t<h2>Welcome to this site</h2>\n\t\t\t\t<p className=\"text-red-600\">Welcome to this site.</p>\n\t\t\t\t<p>This is some info.</p>\n\t\t\t</div>\n\t\t\t-----------------------------------------------\n\t\t- the H2 element is now styled##theh2style\n\t\t- to use it as a Tailwind font, you have to register it\n\t\t\t- **tailwind.config.js**\n\t\t\t\t---------------------------------------------------\n\t\t\t\tfontFamily:{\n\t\t\t\t\t'Poppins':'Poppins',\n\t\t\t\t\t'Shadows': 'Shadows Into Light'\n\t\t\t\t}\n\t\t\t\t---------------------------------------------------\n\t\t\t- **App.scss**\n\t\t\t\t---------------------------------------------\n\t\t\t\th2 {\n\t\t\t\t\t@apply text-yellow-200 font-Shadows;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t\t- it will look like this:##theyellowtailkj\n\t\t- you can also use the font as a Tailwind inline font:\n\t\t\t- remove the h2 font from **App.scss**\n\t\t\t- **PageWelcome.tsx**\n\t\t\t\t--------------------------------------------\n\t\t\t\t<div className=\"page pageWelcome\">\n\t\t\t\t\t<h2 className=\"font-Shadows text-orange-700 text-4xl\">Welcome to this site</h2>\n\t\t\t\t\t<p className=\"text-red-600\">Welcome to this site.</p>\n\t\t\t\t\t<p>This is some info.</p>\n\t\t\t\t</div>\n\t\t\t\t--------------------------------------------\n\t\t\t- it will look like this:##thebrownlargerskj\n- fix **Unknown at rule** warning messages in VSCode\n\t- note that in your **index.css** and **App.scss** files, you have warnings:##problemstis\n\t- to fix this, go into **Settings** (`CTRL-,`), search for `unknown`, and set both CSS and SCSS to **ignore**##fixbothtoignore","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-05-14 07:34:24","systemWhoCreated":"systemUnknown"},{"id":707,"category":"Sass","title":"How to set up Sass to use in website development","body":"- since **browsers do not understand Sass**, you have to have some way to convert your Sass code (in a `.scss` file) to CSS (in a .css file)\n\t- this is **similar to TypeScript** and JavaScript\n\t\t- browsers cannot understand TypeScript (`.ts` files), so it has to be converted to JavaScript (`.js` files)\n- the following are four ways to set up your web development environment to be able to use Sass\n\t- **1. VSCode Extension**\n\t\t- if you are creating a simple HTML/CSS website, e.g. `index.html` and `main.css`\n\t\t\t- the easiest way to set up Sass is by installing the [Live Sass Compiler](https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass) extension for VSCode\n\t\t\t\t- be sure to install the version by **Glenn Marks** \n\t\t\t\t- not the version by *Ritwick Dey*, which is deprecated\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t\t\t<title>Info Site</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t<p>Welcome to this page.</p>\n\t\t\t</body>\n\t\t\t</html>\t\t\t\n\t\t\t-------------------------------\n\t\t- **main.css**\n\t\t\t---------------------------------\n\t\t\t* {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tfont-family: arial;\n\t\t\t\tpadding: 2rem;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tcolor: brown;\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t}\t\t\t\n\t\t\t---------------------------------\n\t\t- in VSCode, install the [Live Sass Compiler](https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass) extension\n\t\t- change the name of your `main.css` file to `main.scss.`\n\t\t- **do not change** the reference to the `main.css` file in the link:##donotchangethecss\n\t\t- the extension will automatically generated a **main.css** file from **main.scss**\n\t\t- in your bottom task bar of VSCode, look for the words \"Watch Sass\" and click it\n\t\t\t- note you may have to expand the width your VSCode application as wide as possible to see it\n\t\t\t- click on **Watch Sass**##nowlookkdjfsd\n\t\t- note as soon as you click on Watch Sass, a `main.css` file is created\n\t\t- now everytime you change your **.scss** file, your **.css** file will be automatically regenerated\n\t\t- to turn it off, click \"Watching...\" in the bottom task bar\n\t- **2. node-sass**\n\t\t- I've experienced that the above VSCode extension sometimes doesn't work for one reason or the other\n\t\t- if that is the case, you can similarly set up automatic **scss-to-css** conversion with **node-sass**\n\t\t- to test this, start with the same HTML and CSS files above\n\t\t- set up your site as an npm project\n\t\t\t- `npm init -y` which will create a **package.json** file\n\t\t- install **node-sass**\n\t\t\t- `npm i -D node-sass`\n\t\t\t\t- `i` = install\n\t\t\t\t- `-D` = as a dev dependency##nodesassinsal\n\t\t- change your **main.css** file to **main.scss**\n\t\t- convert the file with this command\n\t\t\t--------------------------------------------------\n\t\t\t./node_modules/node-sass/bin/node-sass ./css/main.scss ./css/main.css\n\t\t\t--------------------------------------------------\n\t\t- everytime you make a change to your SCSS file, simply run this command again, i.e. press **up-arrow** and **Enter** in your terminal\n\t\t- create a simpler npm script\n\t\t\t- **todo**\n\t\t- set node-sass up to watch and convert your file automatically after every change\n\t\t\t- **todo**\n\t- for options 3 and 4, we use\n\t\t- the static site generator **Vite** \n\t\t- takes care of both of these conversions automatically\n\t\t- you won't even have a `.css` file in your directory since this is converted on the fly and sent to your browser\n\t\t- note that we don't use the live-server extension anymore since Vite has its own server\n\t\t- we will also install TypeScript so we can use both Sass and TypeScript directly and automatically\n\t- **3. Vite Vanilla**\n\t\t- install manually\n\t\t\t- `npm create vite`\n\t\t\t- give our project a name e.g. `et020-info-site`\n\t\t\t\t- this will be the name of the directory it creates\n\t\t\t- choose **Vanilla**\n\t\t\t- choose **TypeScript**\n\t\t\t- open your project in VSCode\n\t\t\t\t- `code et020-info-site`\n\t\t\t- in VSCode terminal\n\t\t\t\t- `npm i` - installs node_modules\n\t\t\t\t- `npm run dev` - start the site\n\t\t\t- open in browser\n\t\t\t\t- click URL link that appears in terminal \n\t\t- install Sass\n\t\t\t- in terminal: `npm i -D sass`\n\t\t\t- change both file name and reference to file name in import statement to `.scss`\n\t\t- for a pre-styled version with dark theme, download or clone this project\n\t\t\t- https://starters.tanguay.eu/list/darkViteVanilla\n\t- **4. Vite React**\n\t\t- install manually\n\t\t\t- `npm create vite`\n\t\t\t- give our project a name e.g. `et021-info-site`\n\t\t\t\t- this will be the name of the directory it creates\n\t\t\t- choose **React**\n\t\t\t- choose **TypeScript**\n\t\t\t- open your project in VSCode\n\t\t\t\t- `code et021-info-site`\n\t\t\t- in VSCode terminal\n\t\t\t\t- `npm i` - installs node_modules\n\t\t\t\t- `npm run dev` - start the site\n\t\t\t- open in browser\n\t\t\t\t- click URL link that appears in terminal \n\t\t- install Sass\n\t\t\t- in terminal: `npm i -D sass`\n\t\t\t- change both file name and reference to file name in import statement to `.scss`\n\t\t- for a pre-styled version with dark theme, download or clone this project\n\t\t\t- https://starters.tanguay.eu/list/darkViteSimple","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-16 08:43:46","systemWhoCreated":"systemUnknown"},{"id":708,"category":"React","title":"How to Refactor a React Site with React Router, JSON-data loading, a searchbox and Tailwind","body":"- **what we will do**\n\t- this howto allows you to compare two React projects for **learning purposes**:\n\t\t- 1. a React site created by a beginning React student\n\t\t- 2. the completely refactored site\n\t- while this howto is mainly for learning purposes, the finished site is also a good template for good React application structure:\n\t\t- completely **responsive**\n\t\t- uses **TypeScript**\n\t\t- uses **Tailwind-only for styling**\n\t\t- uses **React Router**\n\t\t- has **numerous components** including page components and regular components\n\t\t- loads various **Google fonts**\n\t\t- loads and displays **data from a JSON file**\n\t\t- has a **search box** that searches books as you type\n\t\t- has a **nicely-styled** light/dark toggle\n\t- so while this howto is mainly to demonstrate good app design and refactoring\n\t\t- you can also use it as a template for a site with the above features\n- **where to find the site**\n\t- the original, unrefactored site\n\t\t- GitHub repository\n\t\t\t- https://github.com/edwardtanguay/et01-bookstore-react-tailwind-unrefactored\n\t\t- Vercel site\n\t\t\t- https://et01-bookstore-react-tailwind-is8j.vercel.app\n\t- the refactored site\n\t\t- GitHub repository\n\t\t\t- https://github.com/edwardtanguay/et01-bookstore-react-tailwind\n\t\t- Vercel site\n\t\t\t- https://et01-bookstore-react-tailwind.vercel.app\n- **what the site looks like when finished**#gif#booksitedemo\n- **Refactoring**\n\t- in this howto the main topic is how we refactor the site step-by-step\n\t- if you are looking for a howto or template for a React site, particularly one with Tailwind set up, simply use the [finished version](https://github.com/edwardtanguay/et01-bookstore-react-tailwind) of this project\n\t- note that I don't do any refactoring of the **Tailwind** implementation \n\t\t- the fact that this site has Tailwind built in is one reason I decided to refactor it\n\t\t- I wanted to have a solid example of a small React website with many features such as React Router, TypeScript, JSON-data and Tailwind\n- **REFACTOR: Reduce two contexts to one AppContext**\n\t- this site had a ActiveContext for books and a SearchContext for searching\n\t- this was a misunderstand by the student\n\t- in a small to mid-sized React app, you simply need one context named **AppContext**\n\t\t- the idea is **all of your components** in your **App** get their data from this context, hence it is called **AppContext**##thectwocontexts\n\t- here's the cleaner **AppContext** with variables from both former contexts:##cleanedupappcontext\n\t- compare to the [finished AppContext](https://github.com/edwardtanguay/et01-bookstore-react-tailwind/blob/main/src/AppContext.tsx)\n- **REFACTOR: Unnecessary handling function**\n\t- this is an example of misunderstanding the state variables and functions can be used directly by event handliners like onClick\n\t- you don't need to create a \"useless middleman\" handling function##unnecessaryhandle\n- **REFACTOR: Also import books into and serve from AppContext**\n\t- instead of loading books directly from a component\n\t\t- we load books into the AppContext so that book information is avaiable via the AppContext throughout our application##booksalsoinappcon\n- **REFACTOR: Put data in a data file, code in a code file**\n\t- the book data in an array that was embedded in code in a data.ts file\n\t- we refactored this into a books.json file to have **separation of concerns**\n\t\t- data is nothing more than data in its own file\n\t\t- code is in a code file and fetches the data from the data file\n\t- this enables us to use our JSON file much like a database \n\t\t- which will make a future modification to instead get the data from a database or API instead much easier##notfromdatajs\n\t- here's how the JSON file then looks##hereshowjson\n- **REFACTOR: Loaded books from AppContext**\n\t- after the book data was in its own JSON file\n\t\t- we wrote the code to load the books into the AppContext\n\t\t- so that it would be available to any component in the app\n\t\t- [line 2 in AppContext](https://github.com/edwardtanguay/et01-bookstore-react-tailwind/blob/main/src/AppContext.tsx) not shown here is: `import _books from './data/books.json';`##hereshowjson\n- **REFACTOR: Replace URLSearchParams search with a state variable**\n\t- there was a [creative but misguided implementation for search](https://github.com/edwardtanguay/et01-bookstore-react-tailwind-unrefactored/blob/dev/src/components/SearchBox.tsx) in this app which used URLSearchParams\n\t\t- it was changing the URL by adding the search text and then would read the URL to get the search text in another component (!)\n\t- we replaced all that with a standard state-variable **filter** which is handled in **AppContext** and so is used to change and use the current search keywords\n\t- the SearchBox.tsx is much more straight-forward now:##sonowthefilter\n- **REFACTOR: Simplified pages and directory structure**\n\t- I then renamed the page componenets with a **Page** prefix\n\t\t- this allows you to have a page component called e.g. **PageBooks** while components can be called **Books** and **Book** etc.\n\t- the **PageBooks.tsx** file then reads in the params, e.g. `localhost:5714/books/8` and loads the appropriate component, very straight-forward##smpplifedfiles\n\t- this allows the **Book.tsx** component to remain simple and simply display a book, and nothing more##thebooksimple\n\t- note the example of passing a prop\n- **REFACTOR: Fix the Vercel 404 error with React Router**\n\t- in order for permalinks on React-Router pages to work at Vercel, you have to add this file to the root directory\n\t- **vercel.json**\n\t\t-------------------------------------------------\n\t\t{\n\t\t\t\"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/\" }]\n\t\t}\n\t\t-------------------------------------------------\n- **Note on Tailwind styles**\n\t- if you find yourself repeating Tailwind styles in elements\n\t\t- you can use the @apply keyword to create CSS-stylesheet-like styles##thestylesoksi","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-18 00:42:49","systemWhoCreated":"systemUnknown"},{"id":709,"category":"CSS","title":"Three-screen responsive CSS Grid layout","body":"- notice we don't use grid-template-areas here (which are visually easier to understand for more complex grids), but that we use e.g. `grid-column: 1 / 3` which is short-hand for `grid-column-start: 1` and `grid-column-end: 3`:#gif#threeresponsiveexample\n- CSS:\n\t--------------------------------\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\tbody {\n\t\tfont-family: arial;\n\t\tbackground-color: #222;\n\t}\n\n\t.grid-container {\n\t\tdisplay: grid;\n\t\tgrid-gap: 20px;\n\t\tmargin: 20px 10px;\n\t}\n\n\theader {\n\t\tbackground-color: lightblue;\n\t\tpadding: 1rem;\n\t}\n\n\taside {\n\t\tbackground-color: lightcoral;\n\t\tpadding: 1rem;\n\t}\n\n\tmain {\n\t\tbackground-color: lightgreen;\n\t\tpadding: 1rem;\n\t}\n\n\tfooter {\n\t\tbackground-color: lightseagreen;\n\t\tpadding: 1rem;\n\t}\n\n\t@media screen and (min-width: 768px) {\n\t\t.grid-container {\n\t\t\tgrid-template-columns: 1fr 350px;\n\t\t}\n\n\t\theader, footer {\n\t\t\tgrid-column: 1 / 3;\n\t\t}\n\t}\n\n\t@media screen and (min-width: 1024px) {\n\t\t.grid-container {\n\t\t\tgrid-template-columns: 1fr 600px;\n\t\t\tgrid-template-rows: auto 1fr 1fr;\n\t\t}\n\n\t\tmain {\n\t\t\tgrid-row: 2 / 4;\n\t\t}\n\n\t\tfooter {\n\t\t\tgrid-column: 2 / 3;\n\t\t}\n\t}\n\t--------------------------------\n- HTML:\n\t------------------------------\n\t<body class=\"grid-container\">\n\t\t<header>\n\t\t\t<h1>Lorem ipsum dolor sit.</h1>\n\t\t</header>\n\t\t<main>\n\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex, maxime enim alias, illum blanditiis, amet\n\t\t\t\teaque id illo accusantium eius nisi facere rerum? Beatae atque, tempora explicabo repellendus reiciendis\n\t\t\t\tconsequuntur.</p>\n\t\t\t<p>Quis, porro praesentium pariatur corporis impedit assumenda eum vero quos blanditiis voluptate recusandae\n\t\t\t\todio natus illum similique dolorem optio vitae doloribus mollitia voluptatibus consequuntur nesciunt\n\t\t\t\tperferendis aliquid, et nisi. Id.</p>\n\t\t\t<p>Atque ipsum, eos, excepturi optio dolore aliquid error placeat nemo magni, natus fuga! Molestiae modi\n\t\t\t\tassumenda sequi ullam velit perferendis eligendi, alias esse recusandae doloribus aut molestias nihil\n\t\t\t\test reprehenderit?</p>\n\t\t\t<p>Eveniet, cupiditate repudiandae molestiae quos. Laboriosam magni, ullam tempore vitae repellendus\n\t\t\t\ttemporibus possimus. Dolorum corrupti voluptatum, repellat cum praesentium facilis soluta quis porro\n\t\t\t\taliquid itaque perferendis, nostrum libero fuga eaque?</p>\n\t\t</main>\n\t\t<aside>\n\t\t\tAside ipsum dolor sit amet, consectetur adipisicing elit. Dolorem, labore dolorum, fuga explicabo, placeat\n\t\t\taliquid facere nesciunt illo animi neque dolores voluptatibus reprehenderit doloribus tenetur amet facilis\n\t\t\tsit quidem corrupti.\n\t\t</aside>\n\t\t<footer>Footer ipsum dolor sit amet, consectetur.</footer>\n\t</body>\n\t------------------------------","points":100,"extras":"$rank=4.8232;$generalRank=4.9928","systemWhenCreated":"2023-06-19 08:18:07","systemWhoCreated":"systemUnknown"},{"id":710,"category":"Responsive","title":"How to use the picture and source elements to dynamically load responsive images","body":"- **what this howto shows**\n\t- the picture and source elements allow the browser to download a differently-sized image for each specific browser widt\n\t- this allows you the mobile version of your site to load small versions of images\n\t\t- but when the user widens the screen to larger widths, *only then* do the larger images get downloaded\n\t- note that the widths are given in the HTML, not the CSS as with e.g. media queries\n- **code and online site**\n\t- you can find the code here:\n\t\t- https://github.com/edwardtanguay/et003-picture-source-demo\n\t- the online site is here:\n\t\t- https://et003-picture-source-demo.vercel.app\n- **how it works**\n\t- I first loaded the page on the smallest width, which loaded only the 27K images, then I widened the browser which loaded the 86K image:##picturesource001\n\t- here is the widest width, the 431K image was loaded:##picturesource002\n- **index.html**\n\t----------------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<link rel=\"stylesheet\"\n\t\t\t  href=\"css/main.css\">\n\t\t<title>Responsive Test</title>\n\t</head>\n\n\t<body>\n\t\t<h1>picture/source example</h1>\n\t\t<picture>\n\t\t\t<source media=\"(min-width: 1200px)\" srcset=\"images/mediterranean431.jpg\" />\n\t\t\t<source media=\"(min-width: 768px)\" srcset=\"images/mediterranean86.jpg\" />\n\t\t\t<img src=\"images/mediterranean27.jpg\" class=\"photo\" />\n\t\t</picture>\n\t</body>\n\n\t</html>\n\t----------------------------------------------------\n- **main.css**\n\t----------------------------------------------------\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\tbody {\n\t\tfont-family: arial;\n\t\tpadding: 2rem;\n\t}\n\n\th1 {\n\t\tcolor: brown;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.photo {\n\t\twidth: 100%;\n\t}\n\t----------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-19 19:24:03","systemWhoCreated":"systemUnknown"},{"id":711,"category":"React","title":"Transform a HTML/CSS site to a Vite Vanilla site with menus","body":"- **what we will do**\n\t- convert a HTML/CSS site into a Vite vanilla site with menu routing\n\t- view the finished site here: https://microsoft-html-css-res.vercel.app\n\t- we convert a static HTML/CSS site that looks like this:##thestatichtmlsite\n\t- into the same layout but with dynamic menu:#gif#thefinishedsiteforscss\n- **how we did it**\n\t- forked this site: https://github.com/ghulamkarimi/microsoft-html-css-res\n\t\t- to this site: https://github.com/edwardtanguay/microsoft-html-css-res\n\t- cloned forked site locally\n\t- copied all files to temp-original\n\t- downloaded: https://starters.tanguay.eu/list/darkViteVanillaMenu\n\t- set up\n\t\t- `npm i`\n\t\t- `npm run dev`\n- **recreate menu**\n\t- base site work:##siteworkswithcopieds\n\t- made pages array from original menu##turnedinto\n\t- filed menu with new pages in **Router.ts** and created pages themselves:##thealrouter\n\t- menu now works like this:#gif#adnthenewone\n- **moved stylessheets into site**\n\t- copied everything from `<head>` to index.html\n\t- copied over image from header\n\t- deleted in head, then imported in App.ts the two index files\n\t\t--------------------------------------------\n\t\t<link rel=\"stylesheet\" href=\"main.css\" />\n\t\t<link rel=\"stylesheet\" href=\"responsive.css\" />\t\t\n\t\t--------------------------------------------\n\t- renames files:##thefilesrenamscss\n\t- added this to stop the blink, **index.html**:\n\t\t-------------------------------------------\n\t\t<style>\n\t\t\tbody {\n\t\t\t\tbackground-color: rgb(133, 175, 179);\n\t\t\t}\n\t\t</style>\t\t\n\t\t-------------------------------------------\n- **move footer from index.html App.ts**\n\t- copied to after menu\n- **small style touch ups**\n\t- menu now looks like this:#gif#themenunowtlikescss2\n- **copied over all images and corrected image path**\n\t- menu now looks like this:#gif#themenunowtlikescss4\n- **move rest of index.html content to PageOffice.ts except for **\n\t- copied HTML into PageWelcome.ts\n\t- updated image links from `./image` to `images`\n\t- site now looks like this:##tehsitenowwith5\n- **made minor changes on extended pages**\n\t- finished site now looks like this, read to add content to extended pages:#gif#thefinishedsiteforscss","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-19 22:44:07","systemWhoCreated":"systemUnknown"},{"id":712,"category":"CSS","title":"Overview of CSS tools and solutions based on a Theo video","body":"- **what this howto covers**\n\t- this is an overview of CSS tools\n\t- it is based on \n\t\t- a video by Theo from November 2022: [CSS in 2023 - Tailwind vs MUI vs Bootstrap vs Chakra vs...](https://www.youtube.com/watch?v=CQuTF-bkOgc)\n\t- Theo calls this video a \"love letter to Tailwind\", through it is an explanation why Tailwind, particularly when used in a component architecture such as React, allows you to reach Zen mode when styling your applications, it reduces friction, styles are there where they need to be, in your JSX\n\t- Theo maps out a good classification of CSS tools:##theosoverviewcss\n- **CATEGORY: CSS++**\n\t- **Sass**\n\t\t- nice, ubiquitous solution\n\t\t- variables, nesting, mixins, partials, operators, conditional statements\n\t\t\tsee: https://edwardtanguay.vercel.app/howtos?id=630\n\t\t- https://sass-lang.com/guide\n\t- **Tailwind**\n\t\t- because Tailwind provides solid design concepts, it takes a good bit of effort to make something ugly with it\n\t\t- when you learn Chakra and MUI, you learn Chakra and MUI, when you learn Tailwind, you're getting better at CSS\n\t\t- Tailwind is just CSS but easier to write\n\t\t- Tailwind allows you to own your style system\t\t\n\t\t- nice cheat sheet for Tailwind, keep it open on your second monitor when you are learning Tailwind\n\t\t\t- https://nerdcave.com/tailwind-cheat-sheet\n\t\t- I don't think in 24px anymore for padding, I think in Tailwind's padding##tehpaddinkjs\n\t\t- the easiest tool that allows you to write CSS in a consistent way\n\t\t- it's the first time I've felt not only good but great writing styles after a decade of various solutions\n\t\t- it makes you fast at styling\n\t\t- it doesn't enforce a ceiling on the quality of what I can ship, e.g. as component libraries like MUI and Chakra do\n\t\t- Tailwind is changing a lot of things about how we architect our applications\n\t\t- but what do I do if I am using Tailwind and need a datepicker?\n\t\t\t- I google react date picker, find one, and use it\n\t\t\t- I would npm install a datepicker because its the one piece of UI that I don't feel like building\n\t\t- https://tailwindcss.com\n- **CATEGORY: Behavior Libraries**\n\t- behavior libraries use JavaScript\n\t- **HeadlessUI**\n\t\t- unstyled UI components\n\t\t- integrates with Tailwind\n\t\t- makes e.g. a dropdown work with good assessibility\n\t\t- https://headlessui.com\n\t- Radix\n\t\thttps://www.radix-ui.com\n\t- React Aria\n\t\t- https://react-spectrum.adobe.com/react-aria\n- **CATEGORY: Component Libraries**\n\t- professional developers should own their component libraries, not install them\n\t\t- you need to be able to fix problems in styles and not rely on the library\n\t- **Mantine**\n\t\t- a fully featured React components library\n\t\t- https://mantine.dev\n\t- **MUI** \n\t\t- has \"weird prop-passing behaviors\"\n\t\t- there no reason to use MUI unless you are a backend-leaning developer trying to avoid as much frontend issues as possible\n\t\t- MUI and things like it are a scary thing to adopt because you're choosing the new maximum of how good our application design can be\n\t\t- difference between Material Design UI and MUI\n\t\t\t- Material Design UI provides a set of design principles, guidelines, and components that developers can use to implement the Material Design style in their applications\n\t\t\t- MUI (Material-UI) is a React component library that follows the Material Design guidelines\n\t\t- https://mui.com\n\t- **ChakraUI**\n\t\t- for React\n\t\t- it kind of annoyed me\n\t\t- it has like 20 components, where Mantine has over 100\n\t\t- there was a lot to learn\n\t\t- not very tree-shakeable\n\t\t- the lock-in is absurd, not just code-based lock-in but brain lock-in\n\t\t- https://chakra-ui.com\n\t- **Vanilla Extract**\n\t\t- do a way better job at being a flexible component library\n\t\t- https://vanilla-extract.style\t\t\n- **CATEGORY: Style Systems**\n\t- **TailwindUI**\n\t\t- TailwindUI just gives you the code base\n\t\t\t- so it is easier to customize than the other style systems\n\t\t- but TailwindUI **costs money**\n\t\t\t- it's a good investment for a professional project\n\t\t\t- otherwise use DaisyUI\n\t\t- https://tailwindui.com\n\t- **DaisyUI**\n\t\t- built on top of Tailwind instead of on top of traditional CSS\n\t\t- pre-written Tailwind classes\n\t\t- if you are a backend developer, don't want to bother yourself with frontend styling, and so need to use a style system, use DaisyUI\n\t\t- https://daisyui.com\n\t- **Master.co**\n\t\t- odd, interesting, tries to build its own virtual CSS\n\t\t- https://master.co\n\t- **Bootstrap**\n\t\t- Can you customize Bootstrap? Yes. Are you going to have fun? No.\n\t\t- don't use Bootstrap, it's 2022, you know better\n\t\t- https://getbootstrap.com\n\t\t- https://react-bootstrap.github.io\t\t\n- **styled components**\n\t- styled components were very important\n\t- a powerful primitive for building a component library\n\t\t- but also the the problem, it is only good at this, similar to storybook\n\t- but in the end, styled components are a bastardization of CSS and JavaScript, a messy combination of the two, and the TypeScript definitions around it can be obnoxious\n\t- the best thing we learned from styled-components is that **inline styles are actually good**\n\t\t- for a long time we hated inline styled, but they are actually good\n\t\t- it's ok to simply write styling inline where styling goes\n\t\t- when you use Tailwind, you just create styles in the area that is used to create style, no referencing any other file, full on zen mode##inlineoktouse\n\t- https://styled-components.com\n- **concepts**\n\t- the scope frameworks allow to create beautiful design##cssscopeofbeauty\n\t- an explanation that inline styles such as Tailwind make sense in a component-based system like React\n\t\t- you have a component which has a place for its logic and a place for styles, *which get written directly there in that place, i.e. the JSX*\n\t\t- compare this to a component library such as MUI where you have bring in bulky components from external files##theinlineoks\n- **other various CSS tools**\t\n\t- **Foundation**\n\t\t- apparently excels at responsive design\n\t\t- https://get.foundation\n\t- **Bulma**\n\t\t- every element in Bulma is mobile-first and optimizes for vertical reading, so by default on mobile\n\t\t- has five breakpoints\n\t\t\t- mobile: up to 768px\n\t\t\t- tablet: from 769px\n\t\t\t- desktop: from 1024px\n\t\t\t- widescreen: from 1216px\n\t\t\t- fullhd: from 1408px\n\t\t- https://bulma.io\n\t- **Materialize**\n\t\t- different than MUI but also based on Material Design principles\n\t\t- https://materializecss.com\n\t- **Stylus**\n\t\t- says it is \"built for Node.js\"\n\t\t- https://stylus-lang.com\n\t- **CSS Modules**\n\t\t- ensures that styles defined within that module do not collide with styles from other modules\n\t\t- automatic class name generation\n\t\t- https://github.com/css-modules/css-modules\n\t- **UIKit**\n\t\t- lightweight and modular\n\t\t- https://getuikit.com\n\t- **Emotion**\n\t\t- a library designed for writing css styles with JavaScript\n\t\t- https://emotion.sh/docs\n\t- **Styletron**\n\t\t- falls into the CSS in JS category\n\t\t- works great with React \n\t\t- https://styletron.org\n\t- **JSS**\n\t\t- allows you to use JavaScript to describe styles in a declarative, conflict-free and reusable way\n\t\t- https://cssinjs.org\n\t- **Rebass**\n\t\t- React primitive UI components\n\t\t- https://rebassjs.org\t\n\t- **PostCSS**\n\t\t- a Node.js tool that transforms your styles using JavaScript plugins\n\t\t- supports future CSS features\n\t\t- has plug-in architecture\n\t\t- supports CSS modules\n\t\t- https://postcss.org","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-23 06:50:31","systemWhoCreated":"systemUnknown"},{"id":713,"category":"CSS","title":"How to build a slide deck site with animated movements and menu","body":"- **what we will do**\n\t- we want to recreate the basic functionality of this site: http://www.hi.agency/deck\n\t- we create this site (https://et023-presentation-site.vercel.app) which has\n\t\t- nine slides\n\t\t- slides have different layouts\n\t\t- menu on top\n\t\t- smooth scrolling\n\t- our finished site looks like this:#gif#sitepresentationdemo\n\t- code is here:\n\t\t- https://github.com/edwardtanguay/et023-presentation-site\n- **index.html**\n\t------------------------------------------------------\n\t<body>\n\t\t<h1>\n\t\t\t<nav>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><a href=\"#slide1\">Slide 1</a></li>\n\t\t\t\t\t<li><a href=\"#slide2\">Slide 2</a></li>\n\t\t\t\t\t<li><a href=\"#slide3\">Slide 3</a></li>\n\t\t\t\t\t<li><a href=\"#slide4\">Slide 4</a></li>\n\t\t\t\t\t<li><a href=\"#slide5\">Slide 5</a></li>\n\t\t\t\t\t<li><a href=\"#slide6\">Slide 6</a></li>\n\t\t\t\t\t<li><a href=\"#slide7\">Slide 7</a></li>\n\t\t\t\t\t<li><a href=\"#slide8\">Slide 8</a></li>\n\t\t\t\t\t<li><a href=\"#slide9\">Slide 9</a></li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</h1>\n\t\t<main>\n\t\t\t<div class=\"slides\">\n\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide1\">\n\t\t\t\t\t The Beginning\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide2\">Next</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide2\">\n\t\t\t\t\t <img src=\"images/lighthouse.jpg\"/>\n\t\t\t\t\t<div class=\"text\">\n\t\t\t\t\t\tLighthouse\n\t\t\t\t\t</div>\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide3\">Next</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide3\">\n\t\t\t\t\t <img src=\"images/twighlight.jpg\"/>\n\t\t\t\t\t<div class=\"text\">\n\t\t\t\t\t\tTwighlight\n\t\t\t\t\t</div>\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide4\">Next</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide4\">Slide 4\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide5\">Next</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide5\">Slide 5\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide6\">Next</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide6\">Slide 6\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide7\">Next</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide7\">Slide 7\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide8\">Next</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide8\">Slide 8\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide9\">Next</a>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"slide\"\n\t\t\t\t\t id=\"slide9\">Slide 9\n\t\t\t\t\t<a class=\"next\"\n\t\t\t\t\t   href=\"#slide1\">Next</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</main>\n\t</body>\t\n\t------------------------------------------------------\n- **main.scss**\n\t-------------------------------------------------------\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t\tscroll-behavior: smooth;\n\t\toverflow: hidden;\n\t}\n\n\tbody {\n\t\tfont-family: arial;\n\t\tposition: relative;\n\t}\n\n\th1 {\n\t\tcolor: #ccc;\n\t\tbackground-color: #000;\n\t\tpadding: 1rem;\n\t\tposition: fixed;\n\t\tz-index: 2;\n\t\twidth: 100vw;\n\t\theight: 4.5rem;\n\n\t\tnav {\n\t\t\tul {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 2rem;\n\n\t\t\t\ta {\n\t\t\t\t\tcolor: rgb(218, 170, 82);\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tnav {\n\t\tposition: absolute;\n\t\tz-index: 2;\n\t\ttop: 1rem;\n\t\tleft: 1rem;\n\n\t\tul {\n\t\t\tlist-style: none;\n\t\t}\n\t}\n\n\t.slides {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(3, 1fr);\n\t\tgrid-template-rows: repeat(3, 1fr);\n\t\tjustify-content: space-evenly;\n\t\tflex-wrap: wrap;\n\t\twidth: 300vw;\n\n\t\t#slide1 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tbackground-image: url('../images/background-blue-purple.jpg');\n\t\t\tbackground-size: cover;\n\t\t\tcolor: #ccc;\n\t\t}\n\n\t\t#slide2 {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: space-between;\n\n\t\t\timg {\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 50vw;\n\t\t\t}\n\n\t\t\tdiv.text {\n\t\t\t\twidth: 50vw;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t}\n\n\t\t#slide3 {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\n\t\t\timg {\n\t\t\t\tposition: absolute;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tobject-fit: cover;\n\t\t\t}\n\n\t\t\tdiv.text {\n\t\t\t\ttext-align: center;\n\t\t\t\tz-index: 2;\n\t\t\t\tcolor: #000;\n\t\t\t\ttext-shadow: 5px 5px 13px #ccc;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t}\n\n\t\t#slide4 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tcolor: black;\n\t\t\tbackground-color: rgb(199, 155, 74);\n\t\t}\n\n\t\t#slide5 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tcolor: black;\n\t\t\tbackground-color: rgb(145, 207, 132);\n\t\t}\n\n\t\t#slide6 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tcolor: black;\n\t\t\tbackground-color: rgb(151, 115, 149);\n\t\t}\n\n\t\t#slide7 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tcolor: black;\n\t\t\tbackground-color: rgb(236, 196, 169);\n\t\t}\n\n\t\t#slide8 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tcolor: black;\n\t\t\tbackground-color: rgb(105, 113, 153);\n\t\t}\n\n\t\t#slide9 {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tcolor: black;\n\t\t\tbackground-color: rgb(198, 116, 209);\n\t\t}\n\n\n\t\t.slide {\n\t\t\tfont-size: 12vh;\n\t\t\tbackground-color: #fff;\n\t\t\twidth: 100vw;\n\t\t\theight: 100vh;\n\t\t\tcolor: navy;\n\t\t\tposition: relative;\n\n\t\t\tul {\n\t\t\t\tli {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ta.next {\n\t\t\t\tposition: absolute;\n\t\t\t\tbottom: 7rem;\n\t\t\t\tright: 6rem;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tbackground-color: #aaa;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tpadding: 1rem 1.5rem;\n\t\t\t\tborder-radius: 1rem;\n\n\t\t\t\tcolor,\n\t\t\t\t&:active,\n\t\t\t\t&:visited,\n\t\t\t\t&:link {\n\t\t\t\t\tcolor: #000;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t-------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-24 13:50:15","systemWhoCreated":"systemUnknown"},{"id":715,"category":"JavaScript","title":"The `this` keyword in arrow and classic functions in JavaScript","body":"- **thethis.js**\n\t---------------------------------------------------------------\n\tfunction doIt() {\n\t\tconsole.log('doIt', this); // undefined\n\t}\n\tdoIt();\n\n\tconst obj = {\n\t\tdoIt1: () => {\n\t\t\tconsole.log('arrow function', this); // undefined\n\t\t},\n\t\tdoIt2: function () {\n\t\t\tconsole.log('classic function', this); // the current JavaScript object\n\t\t}\n\t}\n\tobj.doIt1();\n\tobj.doIt2();\n\n\tclass Person {\n\t\tconstructor(firstName) {\n\t\t\tthis.firstName = firstName;\n\t\t}\n\n\t\tgetPersonInfo1() {\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log('info1 this', this); // the current class object\n\t\t\t\tconsole.log('info1 firstName', this.firstName); // \"Jake\"\n\t\t\t}, 1000)\n\t\t}\n\n\t\tgetPersonInfo2() {\n\t\t\tsetTimeout(function () {\n\t\t\t\tconsole.log('info2 this', this); // the Node or window object\n\t\t\t\tconsole.log('info2 firstName', this.firstName); // undefined\n\t\t\t}, 2000)\n\t\t}\n\n\t}\n\n\tconst person = new Person('Jake');\n\tperson.getPersonInfo1();\n\tperson.getPersonInfo2();\t\n\t---------------------------------------------------------------\n- **output**:##jisdjiwthethis","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-24 21:18:36","systemWhoCreated":"systemUnknown"},{"id":716,"category":"JavaScript animations","title":"How to make a flashcard that slides down on mouseover","body":"- flashcard works like this#gif#flashcarddemoslide\n- **index.html**\n\t--------------------------------------------\n\t<!DOCTYPE html>\n\n\t<head>\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t<title>flashcard</title>\n\t</head>\n\n\t<body>\n\t\t<div class=\"flashcard\">\n\t\t\t<div class=\"front\">to repeat</div>\n\t\t\t<div class=\"back\">wiederholen</div>\n\t\t</div>\n\t</body>\n\n\t</html>\n\t--------------------------------------------\n- **main.css**\n\t-----------------------------------------------\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\tbody {\n\t\tfont-family: arial;\n\t\theight: 100vh;\n\t\tbackground-color: #333;\n\t}\n\n\t.flashcard .front, .back {\n\t\twidth: 13rem;\n\t\theight: 7rem;\n\t\tbackground-color: rgb(101, 101, 173);\n\t\tposition: absolute;\n\t\ttop: 3rem;\n\t\tleft: 3rem;\n\t\tdisplay: grid;\n\t\tplace-items: center;\n\t\tbox-shadow: 3px 3px 12px #555;\n\t\tfont-size: 2rem;\n\t\tborder-radius: .5rem;\n\t}\n\n\t.flashcard .back {\n\t\tbackground-color: yellow;\n\t\tcolor: navy;\n\t}\n\n\t.flashcard .front {\n\t\tbackground-color: navy;\n\t\tcolor: yellow;\n\t\ttransition: .5s;\n\t\tz-index: 2;\n\t}\n\n\t.front:hover {\n\t\ttransform: translateY(6rem);\n\t}\n\n\tmain {\n\t\tdisplay: grid;\n\t\tplace-items: center;\n\t\theight: 90%;\n\t}\n\t-----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-25 00:18:12","systemWhoCreated":"systemUnknown"},{"id":717,"category":"JavaScript","title":"The accessibility of class and arrow functions, what function hoisting is, and why JavaScript modules are so important for modern development","body":"- in general, in 2023 and beyond, I always use arrow functions\n\t- the syntax is more succinct\n\t- they can be written as one-liners\n\t- **example1.js**\n\t\t---------------------------------------------------------\n\t\tconst shuffle = (items) => {\n\t\t\tfor (let i = items.length - 1; i > 0; i--) {\n\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\tconst temp = items[i];\n\t\t\t\titems[i] = items[j];\n\t\t\t\titems[j] = temp;\n\t\t\t}\n\t\t};\n\n\t\tconst frameworks = [\"React\", \"Angular\", \"Vue.js\", \"Next.js\", \"Knockout\", \"Svelte\", \"SolidJS\", \"Gatsby\", \"Remix\", \"Astro\" ];\n\n\t\tconsole.log(frameworks);\n\t\tshuffle(frameworks);\n\t\tconsole.log(frameworks);\t\t\n\t\t---------------------------------------------------------\n\t- output:##thearrow1\n- one reason one still might use **classic functions** is if you have a simple one-file script and want to keep long functions out of the way at the **bottom of the file**\n\t- this **doesn't work with arrow functions**, since they are variables and so can't be used until they are defined\n\t- **example2.js**\n\t\t----------------------------------------------------\n\t\tconst frameworks = [\"React\", \"Angular\", \"Vue.js\", \"Next.js\", \"Knockout\", \"Svelte\", \"SolidJS\", \"Gatsby\", \"Remix\", \"Astro\" ];\n\n\t\tconsole.log(frameworks);\n\t\tshuffle(frameworks);\n\t\tconsole.log(frameworks);\n\n\t\t// long functions\n\n\t\tconst shuffle = (items) => {\n\t\t\tfor (let i = items.length - 1; i > 0; i--) {\n\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\tconst temp = items[i];\n\t\t\t\titems[i] = items[j];\n\t\t\t\titems[j] = temp;\n\t\t\t}\n\t\t};\t\t\n\t\t----------------------------------------------------\n\t- output:##arrowfunctionnotwokrjkjing\n- so in this case, if you transform these functions at the bottom of your file to **classic functions**, then you can call them before they are defined\n\t- this works because classic functions are automatically **[hoisted](https://linuxhint.com/function-hoisting-in-javascript)** to the top of the file\n\t- **example3.js**\n\t\t---------------------------------------------\n\t\tconst frameworks = [\"React\", \"Angular\", \"Vue.js\", \"Next.js\", \"Knockout\", \"Svelte\", \"SolidJS\", \"Gatsby\", \"Remix\", \"Astro\" ];\n\n\t\tconsole.log(frameworks);\n\t\tshuffle(frameworks);\n\t\tconsole.log(frameworks);\n\n\t\t// long functions\n\n\t\tfunction shuffle (items) {\n\t\t\tfor (let i = items.length - 1; i > 0; i--) {\n\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\tconst temp = items[i];\n\t\t\t\titems[i] = items[j];\n\t\t\t\titems[j] = temp;\n\t\t\t}\n\t\t};\n\t\t---------------------------------------------\n\t- output:##theaginskjein\n- but all of **these issues are moot** from a practical point of view, since as **modern JavaScript developers** we program almost exclusively with JavaScript **ES6 modules** which use **import** and **export** commands to enable you to access the functions you need **from other files** such as libraries\n\t- all **JavaScript frameworks** use modules in this way\n\t- the simplest example of solving the above problem using modules is to do the following:\n\t\t- create new directory\n\t\t- create an npm project \n\t\t\t- `npm init -y`\n\t\t\t- this simply creates a simple **package.json** file\n\t\t\t- add `\"type\": \"module\",` to the list of properties\n\t\t- your **package.json** should then look like this\n\t\t\t--------------------------------------------\n\t\t\t{\n\t\t\t\t\"name\": \"et003-basic-javascript-modules\",\n\t\t\t\t\"version\": \"1.0.0\",\n\t\t\t\t\"description\": \"\",\n\t\t\t\t\"type\": \"module\",\n\t\t\t\t\"main\": \"tools.js\",\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\t\t\t\t},\n\t\t\t\t\"keywords\": [],\n\t\t\t\t\"author\": \"\",\n\t\t\t\t\"license\": \"ISC\"\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- **app.js**\n\t\t\t----------------------------------------------------\n\t\t\timport * as tools from './tools.js';\n\n\t\t\tconst frameworks = [\"React\", \"Angular\", \"Vue.js\", \"Next.js\", \"Knockout\", \"Svelte\", \"SolidJS\", \"Gatsby\", \"Remix\", \"Astro\"];\n\n\t\t\tconsole.log(frameworks);\n\t\t\ttools.shuffle(frameworks);\n\t\t\tconsole.log(frameworks);\n\t\t\t----------------------------------------------------\n\t\t- **tools.js**\n\t\t\t----------------------------------------------\n\t\t\texport const shuffle = (items) => {\n\t\t\t\tfor (let i = items.length - 1; i > 0; i--) {\n\t\t\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t\t\tconst temp = items[i];\n\t\t\t\t\titems[i] = items[j];\n\t\t\t\t\titems[j] = temp;\n\t\t\t\t}\n\t\t\t};\n\t\t\t----------------------------------------------\n\t\t- the output:##thenodeappsokok\n\t\t- so with this module approach, you have one or more library files (e.g. **tools.js**) from which you **export** as many functions as you like\n\t\t\t- then from your main application files (e.g. **app.js**), you **import** your library files which gives you access to all of your functions\n\t\t- the above mini-app with module-based code can be found in [this repo](https://github.com/edwardtanguay/et003-basic-javascript-modules) \n- **TIP:** if you are learning JavaScript\n\t- **get to a point as fast as you can** where you are \n\t\t- programming with **ES6 modules** (import/export)\n\t\t- either self-created projects such as the above\n\t\t- or **JavaScript frameworks** such as React, Angular, Vue.js, Next.js, Svelte, etc.\n\t- programming with **JavaScript modules** \n\t\t- 1. solves these earlier problems of JavaScript such as \n\t\t\t- variable collisions with global variables\n\t\t\t- JavaScript functions that are not available\n\t\t- 2. makes your code more organized\n\t\t- 3. makes your code easier to test","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-06-25 23:33:11","systemWhoCreated":"systemUnknown"},{"id":719,"category":"CSS","title":"Popular unstyled React component libraries and how to use them, based on Kyle video","body":"- video is here:\n\t- [Unstyled Component Libraries Are A Game Changer](https://www.youtube.com/watch?v=yn6vFCRkC3c) - Web Dev Simplified\n- pre-styled libraries\n\t- useful pre-styled libraries and components:\n\t\t- [Bootstrap](https://react-bootstrap.netlify.app)\n\t\t- [ChakraUI](https://chakra-ui.com)\n\t\t\t- has the ability for more customization\n\t\t- [MUI](https://mui.com)\n\t\t- [Mantine](https://mantine.dev)\n\t\t- [React-Select](https://react-select.com)\n\t\t\t- handles custom select boxes which is difficult to do if done manually\n\t- problems with pre-styled libraries\n\t\t- they bring with them pre-defined styles that may not fit your design\n\t\t- these styles are generally difficult to change\n- unstyled libraries\n\t- you get the best of both worlds\n\t\t- you can style them as you want\n\t\t- you get all the Aria assessibility features\n\t- two types of unstyled libraries\n\t\t- hook-based version\n\t\t- component-based version\n\t- **[React Aria](https://react-spectrum.adobe.com/react-aria)**\n\t\t- managed by Adobe\n\t\t- a library of React Hooks\n\t\t\t- Button\n\t\t\t\t- e.g. ButtonProps are retrieved from a hook##thehooksamekj\n\t\t\t- DatePicker\n\t\t\t\t- in more complex components, you retrieve more from the hook##thedatepickijsdfkj\n\t\t\t\t- the DatePicker looks like this:##thedatepickerworksjdfijsthis\n\t\t\t\t- the DatePicker HTML has **aria attributes**##theariasdjf\n\t\t\t- DateRangePicker\n\t\t\t\t- looks like this##alsohadrangjd\n\t\t- React Aria also has [components](https://react-spectrum.adobe.com/react-aria/#components) instead of hooks\n\t- **[Downshift](https://www.downshift-js.com)**\n\t\t- works similarly with hooks:##workswithhooksj\n\t- **[BaseUI-Overview](https://mui.com/base-ui/getting-started/overview)**\n\t\t- *\"they essentially took what MUI is built on top of, and they broke it out into its own library\"*\n\t\t- so these are components instead of hooks, so you \"don't have to write all the HTML from scratch\"\n\t- **[Radix](https://www.radix-ui.com)**\n\t\t- Kyle likes this one\n\t\t\t- Radix components are not as low-level as the hooks\n\t\t\t\t- they are just components with no styles\n\t\t\t- \"this is the sweet spot that I like to live in\"\n\t\t\t\t- they are easier to use since the HTML is written for you\n\t\t\t\t- you just don't get that much control over the HTML as with e.g. React Aria and Downshift\t\t\n\t\t- Checkbox component\n\t\t\t- you get the code for the component##codechckbox\n\t\t- this is what the default looks like##thedfulksjlookslike\n\t\t- you look at the HTML##thehtmllookslijlihthin\n\t\t- and style it as you want##afteritsstyled\n\t- **[HeadlessUI](https://headlessui.com)**\n\t\t- made by **Tailwind**\n\t\t\t- if you use Tailwind, this is a very easy library to use\n\t- **[ReachUI](https://reach.tech)**\n\t\t- another popular unstyled library##thereachuisdkj\n- Kyle recommends: **create your own component library** based on an unstyled library\n\t- when you use unstyled libraries, **always make custom components**##thesecondsomlkcheck\n\t- then you just call your checkbox##theyoujustcall\n\t- in this way, you create your own component library that is based on an unstyled component library\n\t- working in a medium-to-large project, it makes sense to set up a custom component system like this\n\t\t- multiple develops can easily use it and make changes to it","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-01 09:44:35","systemWhoCreated":"systemUnknown"},{"id":720,"category":"JavaScript","title":"Create a minimal slot-machine with Vite Vanilla and JavaScript","body":"- [Vite](https://vitejs.dev) enables you to make **Vanilla JavaScript sites**\n- `npm create vite` then choose\n\t- `Vanilla`\n\t- `JavaScript`\n- Vite Vanilla is a **good framework for learning JavaScript**\n\t- with HTML/CSS and minimal JavaScript skills, you can create interactive, data-driven websites\n- minimize the site and replace with the code below\n\t- full repository is here: https://github.com/edwardtanguay/et020-js-slot-machine\n\t- site can be used here: https://et020-js-slot-machine.vercel.app\n\t- site looks like this:#gif#slotmachinedemo\n- **main.js**\n\t---------------------------------------------\n\timport \"./style.css\";\n\n\tdocument.querySelector(\"#app\").innerHTML = /*html*/ `\n\t<div>\n\n\t<div class=\"windows\">\n\t\t<div class=\"window window1\">---</div>\n\t\t<div class=\"window window2\">---</div>\n\t\t<div class=\"window window3\">---</div>\n\t</div>\n\n\t<button class=\"btnLever\">Pull Lever</button>\n\t</div>\n\t`;\n\n\tconst fruits = ['cherry', 'lemon', 'plum', 'grapes', 'apple', 'banana', 'orange', 'watermelon', 'strawberry', 'mango', 'kiwi', 'pineapple', 'pear'];\n\n\tconst getRandomFruit = () => {\n\t\tconst index = Math.floor(Math.random() * fruits.length);\n\t\treturn fruits[index];\n\t}\n\n\tconst btn = document.querySelector('.btnLever');\n\tbtn.addEventListener('click', (e) => {\n\t\tconst window1Elem = document.querySelector('.window1');\n\t\tconst window2Elem = document.querySelector('.window2');\n\t\tconst window3Elem = document.querySelector('.window3');\n\n\t\twindow1Elem.innerHTML = getRandomFruit();\n\t\twindow2Elem.innerHTML = getRandomFruit();\n\t\twindow3Elem.innerHTML = getRandomFruit();\n\t});\n\t---------------------------------------------\n- **style.css**\n\t---------------------------------------------\n\t:root {\n\t\tcolor-scheme: light dark;\n\t\tcolor: rgba(255, 255, 255, 0.87);\n\t\tbackground-color: #333;\n\t}\n\n\tbody {\n\t\tmargin: 0;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tmin-height: 100vh;\n\t\tfont-family: arial;\n\t}\n\n\t#app {\n\t\tmargin: 0 auto;\n\t}\n\n\t.windows {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t\tjustify-content: space-between;\n\t\tmargin-bottom: 2rem;\n\t}\n\n\t.window {\n\t\twidth: 6rem;\n\t\theight: 6rem;\n\t\tbackground-color: #111;\n\t\tdisplay: grid;\n\t\tplace-items: center;\n\t}\n\n\t.btnLever {\n\t\twidth: 20rem;\n\t\theight: 2.5rem;\n\t}\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-01 21:41:09","systemWhoCreated":"systemUnknown"},{"id":721,"category":"Boxicons","title":"How to use Boxicons with pseudo elements","body":"- [Boxicons](https://boxicons.com) are a simple alternative to Font Awesome\n- you can use the `<i>` element just as with Font Awesome##savetheiiii\n- if you want to use Boxicons in a `:before` or `:after` pseudo-element, then syntax is the same, e.g.\n\t--------------------------------------\n\t.user4;after {\n\t\tfont-family: 'boxicons';\n\t\tcontent: \"\\eb3e\";\n\t}\n\t--------------------------------------\n- **the backslash code is not found anywhere on the Boxicons site**\n\t- but you can find it in **[this GitHub file](https://github.com/atisawd/boxicons/blob/master/css/boxicons.css)** by searching for the name of the icon you want to use:##anddothearrowbox\n- the HTML element might look like this:\n\t------------------------------------------\n\t<a href=\"nnn\" class=\"user4 icon\"></a>\n\t------------------------------------------\n- it will show the icon as a hyperlink like this: ##thelinkathteend\n- **index.html**\n\t---------------------------------------------------\n\t<h1>Box Icons</h1>\n\t<h2>using the <code>&lt;i&gt;</code> element</h2>\n\t<p>plain text</p>\n\t<p>this is a person icon: <i class='bx bx-user'></i></p>\n\t<p>this is a person icon that is styled: <i class='bx bx-user user'></i></p>\n\t<p>this is a person icon that is more styled:\n\t<div>\n\t\t<i class='bx bx-user user2'></i>\n\t</div>\n\t</p>\n\n\t<h2>Pseudo elements:</h2>\n\t<p>this is a person icon styled with pseudo-element after: <a href=\"nnn\" class=\"user3\"></a></p>\n\t<p>this is an arrow icon styled with pseudo-element after: <a href=\"nnn\" class=\"user4\"></a></p>\n\t<p><strong>TIP: </strong>search for the content code here: <a href=\"https://github.com/atisawd/boxicons/blob/master/css/boxicons.css\">https://github.com/atisawd/boxicons/blob/master/css/boxicons.css</a></p>\t\n\t---------------------------------------------------\n- **main.css**\n\t--------------------------------------------------\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\tbody {\n\t\tfont-family: sans-serif;\n\t\tpadding: 2rem;\n\t\tline-height: 1.3rem;\n\t}\n\n\th1 {\n\t\tmargin-bottom: 1rem;\n\t}\n\n\tcode {\n\t\tcolor: brown;\n\t}\n\n\th2 {\n\t\tmargin-top: 1.5rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.user {\n\t\tcolor: red;\n\t}\n\n\t.user2 {\n\t\tcolor: navy;\n\t\ttransform: rotate(90deg);\n\t\tfont-size: 5rem;\n\t\ttext-shadow: 3px 3px 15px yellow;\n\t}\n\n\t.user3;after {\n\t\tfont-family: 'boxicons';\n\t\tcontent: \"\\ec63\";\n\t}\n\n\t.user4;after {\n\t\tfont-family: 'boxicons';\n\t\tcontent: \"\\eb3e\";\n\t}\n\n\ta.icon {\n\t\ttext-decoration:none;\n\t\tcolor: blue;\n\t\ttext-decoration: none;\n\t}\t\n\t--------------------------------------------------\n- repository for this code is here\n\t- https://github.com/edwardtanguay/et003-boxicons","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-09 20:48:12","systemWhoCreated":"systemUnknown"},{"id":722,"category":"deployment","title":"How to publish a HTML/CSS website at GitHub Pages, Netlify and Vercel","body":"- **what we will do**\n\t- create a simple HTML/CSS site\n\t- publish it at GitHub Pages, Netlify and Vercel\n- **create website locally**\n\t- in your projects directory, create directory for site, e.g. `nn012-sports-site` \n\t\t- where `nn` are your initials\n\t\t- this is important since the directory name will be the same as the\n\t\t\t- repository name\n\t\t\t- URL name at Netlify\n\t\t\t- URL name at Vercel\n\t\t\t- these names need to be unique, hence the prefix, e.g. `nn012-`\n\t- download repository\n\t\t- https://github.com/edwardtanguay/et032-sports-store\n\t- copy files into above site directory, e.g. `nn012-sports-site`\n\t- go into directory and open VSCode\n\t\t- `code .`\n\t- view in browser\n\t\t- right-click on `index.html` and **Open with Live Server**\n- **create GitHub repository for site**\n\t- create local repository first\n\t\t- open VSCode terminal\n\t\t- `git init -b dev`\n\t- create GitHub repository##theuploadandtisite\n- **>>> PUBLISH SITE AT GITHUB**\n\t- go to GitHub respository\n\t- click on **Settings**##onthesettingj\n\t- on the left, click on **Pages**##onthepages\n\t- choose **dev** and **save**##choosedevandsave\n\t- click reload until you see the URL for your site##gotositegitbhub\n\t- click on it and go to your site##clickonandshowsite\n\t- make a small change, push to GitHub, and within about one minute, you will see the change live\n- **>>> PUBLISH SITE AT NETLIFY**\n\t- go to: https://www.netlify.com\n\t- if you don't have an account, sign up##ifnoaccounet\n\t- sign up with **GitHub**##thegithusignup\n\t- Netlify needs to have a connection to your GitHub account so that it can watch repositories and automatically publish changes that you make to them\n\t- so sign into GitHub from Netlify in order to connect these two services##thesigninanddoit\n\t- when you are logged in\n\t\t- **Add new site** and **Import an existing project**##theaddsiteandother\n\t\t- search for the name of your site:##searcofrjnaam\n\t\t- make sure repository is correct, if you only have one, it will be##ameksure\n\t\t- because this is a simple HTML/CSS site (and your main file is named `index.html`), you can leave all fields blank and click the **Deploy** button##allokonemp\n\t- while site is being deployed\n\t\t- change site name\n\t\t\t- by default Netlify gives your site a random name\n\t\t\t- change this name to the name of your repository\n\t\t\t- click **Site configuration**##badnamekjd\n\t\t\t- click **Change site name**##changesitenamekj\n\t\t\t- copy the name of your repository and paste it as the name of your site##thenamenakjsd\n\t- when you see the site's preview, click on the new URL name of your site:##seetheprevisj\n\t- you should see your site at your new URL:##nowthenetlify\n\t- make a small change, push to GitHub, and within about one minute, you will see the change live\n- **>>> PUBLISH SITE AT VERCEL**\n\t- go to: https://vercel.com\n\t- click on **Sign Up**##thevercelsignup\n\t- choose **Hobby** and type in your **full name**##choosehobby\n\t- Vercel needs to have a connection to your GitHub account so that it can watch repositories and automatically publish changes that you make to them##vercelgitgti\n\t- so sign up with GitHub to connect these two services##vercgiinon\n\t- when you are signed in via GitHub\n\t\t- click on **Add New...** and **Project**##addnewprojectsdf\n\t\t- the last repository that you pushed to will be the first one listed, click **Import**:##thelastfirst\n\t\t- because this is a simple HTML/CSS site (and your main file is named `index.html`), all defaults are correct, simply click **Deploy**##allvercelok\n\t- within a few seconds, your site will be deployed and show as a preview:##congvercel\n\t\t- click on the preview and you should see your site:##vercaandshowsite\n\t\t- make a small change, push to GitHub, and within about one minute, you will see the change live\n- Note: **Vercel** has the **best user experience**\n\t- the URLs of Vercel are shorter than GitHub\n\t- at Vercel you don't have to search for your site as you do on Netlify\n\t- at Vercel your site is not deployed by default with a silly, random name that you have to always change, as it is on Netlify","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-10 23:27:37","systemWhoCreated":"systemUnknown"},{"id":723,"category":"JavaScript","title":"Overview of the various ways to use HTML/CSS/JavaScript to create websites, apps and tools","body":"- **purpose of this howto**\n\t- explain the wide landscape of websites, apps and tools one can create with HTML, CSS and JavaScript\n\t- encourage project ideas possible with HTML/CSS and JavaScript skills\n- HTML/CSS/JS web sites\n\t- deployment\n\t\t- simple HTML/CSS/JS sites can be published for free at \n\t\t\t- GitHub pages\n\t\t\t- Netlify\n\t\t\t- **Vercel** (my recommendation, best user experience)\n\t- **HTML**\n\t\t- the simplest website is simply text in a index.html file that is published to a server\n\t\t- this could be very useful: \n\t\t\t- type shopping list in file\n\t\t\t- push to GitHub\n\t\t\t- it's automatically published to Vercel\n\t\t\t- you have an icon on your smart phone that goes to this page\n\t\t- **index.html**\n\t\t\t------------------------------------------\n\t\t\tmilk, juice, bread\n\t\t\t------------------------------------------\n\t\t- one reason why HTML and the web won over other technologies (e.g. [gopher](https://en.wikipedia.org/wiki/Gopher_(protocol))) was that it was so lenient, flexible and tolerant of bad syntax \n\t- **HTML/CSS in one file**\n\t\t- nnn\n\t- **HTML/CSS in multiple files**\n\t\t- nnn\n\t- **HTML/CSS/JS in one file**\n\t\t- nnn\n\t- **HTML/CSS/JS in separate files**\n\t\t- nnn\n\t- **HTML/CSS/JS in separate files with JavaScript modules**\n\t\t- nnn\n\t- **HTML/CSS/JS with JavaScript modules with CDN libraries**\n\t\t- Alpine.js\n\t\t- HTMLX\n\t\t- PicoCSS\n\t\t- CDN Vuejs\n\t- **HTML/CSS/JS with data fetching via fetch**\n\t\t- nnn\n- self-made JavaScript framework\n\t- deployment\n\t\t- since your files need to be **built** by e.g. npm scripts, best is to host at a full provider\n\t\t\t- Netlify\n\t\t\t- **Vercel** (my recommendation, best user experience)\n\t- **HTML/CSS/JS with JavaScript modules and a web bundler or task runner**\n\t\t- Webpack\n\t\t- Parcel\n\t\t- npm scripts\n\t\t- Grunt/Gulp\n\t\t- advantages\n\t\t\t- Sass automatically transpiled to CSS\n\t\t\t- TypeScript automatically transpiled to JavaScript\n\t\t\t- image optimization\n\t\t\t- markdown file conversion\n\t\t\t- etc.\n\t\t- difficulties\n\t\t\t- complicated to set up\n\t\t\t- basically you are building your own JavaScript framework\n- JavaScript frameworks\n\t- deployment\n\t\t- professional hosting services automatically recognize most major frameworks, hence deployment is simple\n\t\t- Netlify\n\t\t- **Vercel** (my recommendation, best user experience)\n\t- **Vite Vanilla frontend**\n\t\t- easy to set up\n\t\t- read-only database\n\t\t\t- local json files \n\t\t- read/write \n\t\t\t- via API with fetch\n\t- **Vite Vanilla app: frontend with local backend in one directory**\n\t\t- backend: json-server (read-write data)\n\t\t- backend: Node/Express (read-write data)\n\t\t- deploy: not necessary, i.e. used as local application (e.g. Course Website)\n\t- **Vite Vanilla frontend with local admin backend in one directory**\n\t\t- backend: json-server\n\t\t- backend: Node/Express\n\t\t- deploy: Netlify, Vercel but with no online backend functionality\n\t- **Vite React**\n\t\t- same variants as Vite Vanilla but with React State and JSX\n\t- **Vite Vuejs**\n\t\t- same variants as above\n\t- **Angular**\n\t\t- same variants as above\n\t- **Vite Svelte**\n\t\t- same variants as above\n- Node projects\n\t- (execute Node scripts with console.log)\n\t\t- a way to learn and teach JavaScript\n\t- (Quokka)\n\t\t- basically used as a JavaScript teaching/learning tool, since it gives immediate output\n\t\t- perhaps useful for experimenting with algorithms, etc.\n\t- CLIs\n\t\t- scripting in JavaScript, possible only since Node was created in 2009\n\t\t- very useful, particularly when combined with npm scripts\n\t\t\t- e.g. https://github.com/edwardtanguay/et005-starter-example-showcase/tree/dev\n\t- NPM package as interactive script\n\t\t- https://www.npmjs.com/package/sweetstack\n- desktop applications\n\t- [Electron](https://www.electronjs.org)\n- Mobile devices\n\t- [React Native](https://reactnative.dev)\n- classic server-side websites\n\t- [EJS](https://ejs.co) (Embeded JavaScript templating)\n\t\t- this is the JavaScript equivalent of old-school PHP, ASP.NET, Ruby-on-Rails, Django/Python sites, etc.\n\t- use cases\n\t\t- info site with no login\n\t\t- good SEO and Social Media previews needed\n\t\t- e.g. conference site\n- arguably the future trend of React, MERN-stack and JavaScript frameworks:\n\t- **SSR** (Server Side Rendering) \n\t\t- [Next.js](https://nextjs.org)\n\t\t- [Remix](https://remix.run)\n\t- **SSG** (Static Site Generation) \n\t\t- [Jamstack](https://jamstack.org)\n\t\t\t- **a general architectural approach** that decouples the web experience layer from data and business logic, improving flexibility, scalability, performance, and maintainability\n\t\t- [Gatsby](https://www.gatsbyjs.com)\n\t\t\t- a React-based SSG framework, recommended by the React team for [starting a new React project](https://react.dev/learn/start-a-new-react-project)\n\t\t\t- also a good introduction to GraphQL","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-11 08:42:33","systemWhoCreated":"systemUnknown"},{"id":724,"category":"JavaScript/CSS","title":"Learn minimal HTML/CSS/JS libraries and tools by building a site with Alpine.js, Pico.css, Animate.css, emojis","body":"- **who this howto is for**\n\t- developers who want interaction on their HTML/CSS sites but do not yet have strong JavaScript skills\n\t- anyone who wants to make a small, quick professional-looking, responsive site with interaction and animation\n- **what technologies will we learn**\n\t- we will look at **four minimal libraries/tools** to enhance HTML/CSS sites:\n\t\t- **[Alpine.js](https://alpinejs.dev)**: a lightweight CDN link that gives your HTML/CSS site interactivity without you having to program in JavaScript, e.g. display/hide buttons, searching, interactivity on forms, etc.\n\t\t- **[Pico.css](https://picocss.com)**: a lightweight CDN link that makes it easy to give HTML/CSS sites professional-looking menus, forms, tool tips, accordians, tables and layouts that are more or less responsive, easy to override and customize\n\t\t- **[animate.css](https://animate.style)**: a lightweight CDN link that gives you 20-30 subtle animations which are easy to apply to elements as they are displayed on the page or are hovered over\n\t\t- **emojis**: we'll use the simple site ([unicode.party](https://unicode.party)) which enables you to quickly find emojis by keyword and copy/paste them into your HTML text, which is an easier solution than using font libraries, and sufficient in most cases\n- code is here:\n\t- https://github.com/edwardtanguay/et045-minimal-website-tools\n- live site is here:\n\t- https://et045-minimal-website-tools.vercel.app\n- site looks like this:#gif#minimumtoolsitedemo\n- **what we will build**\n\t- we will use Alpine.js, Pico.css, animate.css and emojis to build a professional-looking, responsive HTML/CSS site with interactivity and animations\n- **set up simple HTML/CSS structure with all pages and Sass**\n\t- create directory, e.g. `et046-minimal-website-tools`\n\t- create index.html with Pico.css menu\n\t\t- add h1 and p\n\t\t- add pico.css CDN\n\t\t- add dark theme\n\t\t- create basic nav menu structure based on pico docs\n\t\t- add main container\n\t\t- make five menu links##andthestartmenu\n\t- add stylesheet and style menu\n\t\t- add `css/main.css` file with nav style\n\t\t\t-------------------------------\n\t\t\tnav {\n\t\t\t\tbackground-color: #111;\n\t\t\t\tpadding-left: 2rem;\n\t\t\t\tpadding-right: 2rem;\n\t\t\t\tmargin-bottom: 2rem;\n\t\t\t}\t\t\t\n\t\t\t-------------------------------\n\t\t- add page names\n\t\t- copy other pages, change menu:\n\t\t\t----------------------------------\n\t\t\t<ul>\n\t\t\t\t<li<strong>submenu</strong></li>\n\t\t\t</ul>\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"index.html\">home</a></li>\n\t\t\t</ul>\t\t\t\n\t\t\t----------------------------------\n\t\t- add section\n\t\t\t--------------------------------\n\t\t\t<section>\n\t\t\t\t<p>search page</p>\n\t\t\t</section>\t\t\t\n\t\t\t--------------------------------\n\t- you now have a clickable website with a main page and five topic pages#gif#thepagesmenuoan\n\t- convert CSS to Sass\n\t\t- add Sass styles to test\n\t\t\t----------------------------------\n\t\t\tsection {\n\t\t\t\tp {\n\t\t\t\t\tcolor: yellow;\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------\n\t\t- use VSCode Sass extension\n\t\t\t- rename file to .scss##dothescss\n- **MAIN PAGE**\n\t- see [main page](https://et045-minimal-website-tools.vercel.app/index.html)\t\t\n\t- copy main HTML with data-tooltips\n\t- copy accordians HTML\n- **SUBMENU PAGE**\n\t- see [submenu page](https://et045-minimal-website-tools.vercel.app/submenu.html)\t\t\n\t- Alpine.js enables us to use **simplified JavaScript commands as attributes in HTML**\n\t- we need Alpine.js for the functionality of clicking an element to display or hide another element\n\t\t- for this we need three commands:\n\t\t\t- **x-data**\n\t\t\t- **@click**\n\t\t\t- **x-show**\n\t\t\t- these are [explained here](https://alpinejs.dev/directives/data)\n\t\t- copy in CDN\n\t\t- build an example showing how each works\n\t\t- build an element with text \"toggle message\" which shows and hides a message\n\t\t\t-------------------------------------------\n\t\t\t<section x-data=\"{showingMessage: true}\">\n\t\t\t\t<p @click=\"showingMessage = !showingMessage\">toggle message</p>\n\t\t\t\t<p x-show=\"showingMessage\">submenu page</p>\n\t\t\t</section>\t\t\t\n\t\t\t-------------------------------------------\n\t- build menu and all sections as HTML, showing all\n\t- make current page variable and make sections show accordings\n\t- program menu to switch the variable\n\t- program active link in menu\n- **SEARCH PAGE**\n\t- on the search page, we will use **x-data** to hold a large array of objects\n\t- **x-model** in an input box to hold a state variable\n\t- **x-text** to show values of state variables\n\t- **@click** to attach click event\n\t- show a simple example\n\t\t---------------------------------------\n\t\t<body x-data=\"{newColor: '', colors: ['red', 'blue', 'green']}\">\n\n\t\t<p>There are <span x-text=\"colors.length\"></span> colors.</p>\n\t\t<p>Current colors are: <span x-text=\"colors.join(', ')\"></span></p>\n\t\t<input x-model=\"newColor\"/>\n\t\t<button @click=\"colors.push(newColor); newColor = ''\">add color</button>\t\t\n\t\t---------------------------------------\n\t- use these concepts to program the search page\n- **FORM PAGE**\n\t- the form page shows how Pico.css and Alpine.js can be used together to easily create an interactive user experience\n\t- copy the [form boilerplate](https://picocss.com/docs/forms.html)\n\t- use every form control, changing the state variable with **x-model**\n\t- show the data\n\t- use Pico.css to split page with `<div class=\"grid\">`, show on mobile view\n- **TABLE PAGE**\n\t- copy boilerplate from Pico's [table](https://picocss.com/docs/tables.html) page\n\t- use **role=\"grid\"** for striped rows\n\t- note that Pico's [figure](https://picocss.com/docs/scroller.html) element makes the table horizontally scrollable\t\t\n- **EMOJIS PAGE**\n\t- search and copy emojis from the [unicode.party](https://unicode.party) site\n\t- example\n\t\t----------------------------------------\n\t\t<span class=\"icon\">🤸‍♂️</span>\n\n\t\t.icon {\n\t\t\tfont-size: 5rem;\n\t\t\tdisplay: inline-block;\n\t\t\tanimation: rotateIt 3s infinite linear;\n\t\t}\n\n\t\t@keyframes rotateIt {\n\t\t\tfrom {\n\t\t\t\ttransform: rotate(0deg);\n\t\t\t}\n\t\t\tto {\n\t\t\t\ttransform: rotate(360deg);\n\t\t\t}\n\t\t}\n\t\t----------------------------------------\n\t- complete page from original site\n- **animations.css**\n\t- on page load\n\t\t-----------------------------------\n\t\t<div class=\"mainIcon animate__animated animate__bounce\">🤸‍♂️</div>\n\t\t-----------------------------------\n\t- on hover \n\t\t------------------------------------\n\t\t.mainIcon {\n\t\t\tfont-size: 15rem;\n\t\t\tdisplay: inline-block;\n\n\t\t\t&:hover {\n\t\t\t\tanimation: rubberBand;\n\t\t\t\tanimation-duration: 1s;\n\t\t\t}\n\t\t}\t\t\n\t\t------------------------------------\n- **note**\n\t- Pico.css tooltips are incompatible with mobile displays\n\t\t- they extend over the edge, and since these tooltip areas are on the screen even when not being displayed, they cause the width of the display to be wider than it actually is##tooltippicocsseffects\n\t\t- I solved this by removing tooltips on narrow screens:#gif#onnarrowscreensl\t\n- **consider**\n\t- Alpine.js enables the **state variable** pattern in HTML sites\n\t\t- this is a feature that **Vite Vanilla** does not have\n\t\t- therefore, **Vite Vanilla + Alpine.js** is a very useful technology pair\n- **learn more**\n\t- **Alpine.js**\n\t\t- 3 Excellent New Features in Alpine.js\n\t\t\t- https://www.youtube.com/watch?v=-koKDD5lVAo\n\t\t- AlpineJS - The Most Fun You'll Ever Have Without a JavaScript File\n\t\t\t- https://www.youtube.com/watch?v=AyxAwnc6zN8\n\t\t- Alpine.js Crash Course\n\t\t\t- https://www.youtube.com/watch?v=r5iWCtfltso\n\t\t- Alpine JS Tutorial | Build a Todo App\n\t\t\t- https://www.youtube.com/watch?v=DJjenhzqBHk\n\t- **Pico.css**\n\t\t- Say Goodbye to CSS Classes Web Designers with Pico CSS\n\t\t\t- https://www.youtube.com/watch?v=JPzC_sbBfyY\n\t\t- Really nice premade components with Pico.css\n\t\t\t- https://www.youtube.com/watch?v=dH7XFG8ZqFY\n\t\t- Pico.css company theme \n\t\t\t- https://picocss.com/examples/company\n\t\t- Pico.css Sign-in page\n\t\t\t- https://picocss.com/examples/sign-in\n\t\t- all features of Pico.css shown on one page\n\t\t\t- https://picocss.com/examples/basic-template\n\t- **HTMX**\n\t\t- I was going to include the library [HTMX](https://htmx.org) in this project which is also a minimal tool which enhances HTML/CSS sites, but its features are more centered around easing the communication to a **backend** API or websockets server, which makes it too different from the libraries used in this howto which focus more on the **frontend**\n\t\t- but if you need to connect your frontend to a backend server, API, web socket solution, etc. HTMX has features that make it easy to:\n\t\t\t- fetch data from other APIs and servers\n\t\t\t- submit form requests\n\t\t\t- enhanced validation checks on forms\n\t\t\t- enable real-time updates via web sockets\n\t\t- Dynamic Web Pages Without JavaScript? - Intro to HTMX\n\t\t\t- https://www.youtube.com/watch?v=CWSmP3LSILo","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-16 11:56:24","systemWhoCreated":"systemUnknown"},{"id":725,"category":"Tailwind","title":"How to install and use Tailwind in plain HTML/CSS, Vite Vanilla, and Vite React sites","body":"- **what we will do**\n\t- we will get Tailwind up and running in the following sites:\n\t\t- **HTML/CSS**\n\t\t\t- install Tailwind\n\t\t\t- set up watch script to convert from tailwind.css to main.css\n\t\t\t- create reusable classes with @apply\n\t\t- **Vite Vanilla**\n\t\t\t- set up framework\n\t\t\t- add Tailwind\n\t\t\t- create reusable classes with @apply\n\t\t\t- create components\n\t\t- **Vite React**\n\t\t\t- (similar to Vite Vanilla)\n- **create HTML/CSS site with Tailwind**\n\t- GitHub code\n\t\t- https://github.com/edwardtanguay/et015-html-css-tailwind-site\n\t- live site:\n\t\t- https://et015-html-css-tailwind-site.vercel.app\n\t- create directory\n\t- create index.html and css/main.css\n\t- install Tailwind\n\t\t- make npm project: `npm init -y`\n\t\t- `npm i -D tailwindcss`\n\t\t- `npx tailwindcss init`\n\t\t- add to **tailwind.config.js**\n\t\t\t-------------------------------------------\n\t\t\t\"./**/*.html\"\n\t\t\t-------------------------------------------\n\t\t- convert to ES module\n\t\t- **css/tailwind.css**\n\t\t\t---------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\n\t\t\t---------------------------------\n\t\t- add to **package.json**\n\t\t\t---------------------------------------\n\t\t\t\"dev\":\"npx tailwindcss -i ./css/tailwind.css -o ./css/main.css --watch\"\n\t\t\t---------------------------------------\n\t- create Git repository\n\t\t- `git init -b dev`\n\t- start Tailwind transpiling process\n\t\t- `npm run dev`\n\t- add Tailwind styles\n\t\t- look up Tailwind syntax with [Tailwind Cheat Sheet](https://nerdcave.com/tailwind-cheat-sheet)\n\t\t- **index.html**\n\t\t\t-----------------------------------------------\n\t\t\t<body class=\"bg-gray-400 h-screen grid place-items-center\">\n\t\t\t\t<main class=\"grid place-items-center\">\n\t\t\t\t\t<h1 class=\"text-green-800 text-7xl\">This is a test of Tailwind</h1>\n\t\t\t\t\t<p class=\"text-3xl mt-7 italic\">testing testing</p>\n\t\t\t\t</main>\n\t\t\t</body>\n\t\t\t-----------------------------------------------\n\t- add custom reusable Tailwind styles with **@apply**\n\t\t- **index.html**\n\t\t\t------------------------------------------\n\t\t\t<p class=\"text-3xl mt-7 italic w-1/2 leading-10\">Lorem ipsum, dolor sit <span class=\"highlight\">amet</span> consectetur adipisicing elit. Ab consequatur, et natus quis at repellendus rerum quas! Atque fuga repudiandae laborum <span class=\"highlight\">eveniet</span> facilis, harum quas dignissimos <span class=\"highlight\">okisdje</span>? Deleniti, ipsam?</p>\n\t\t\t------------------------------------------\n\t\t- **tailwind.css**\n\t\t\t-----------------------------------------\n\t\t\t.highlight {\n\t\t\t\t@apply bg-yellow-300 inline-block px-2 py-0 text-red-500 border-4 border-blue-800 rounded-md;\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------\n\t- site should look like this:##finsihedhtmlcss\n\t- add extra CSS styles as last resort\n\t\t- if you can't solve some issue with Tailwing, e.g. wide line-height issue, create extra stylesheet\n\t\t- **extra.css**\n\t\t\t-----------------------------------------------\n\t\t\t.forceLineHeight {\n\t\t\t\tline-height: 4rem;\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- **index.html**\n\t\t\t------------------------------------------\n\t\t\t<link rel=\"stylesheet\" href=\"css/extra.css\">\n\n\t\t\t<p class=\"text-3xl mt-7 italic w-1/2 leading-10 forceLineHeight\">\n\t\t\t------------------------------------------\n\t\t- fixed site will look like this##thefixedsitokandok\n- **create Vite Vanilla site with Tailwind**\n\t- GitHub\n\t\t- https://github.com/edwardtanguay/et015-vite-vanilla-tailwind-typescript-site\n\t\t\t- original site\n\t\t- https://github.com/edwardtanguay/et019-vite-vanilla-tailwind-ts-sass-json-site\n\t\t\t- similar but also loads API data from https://reqres.in/api/users\n\t- live site:\n\t\t- https://et015-vite-vanilla-tailwind-typescript-site.vercel.app\n\t- create Vite Vanilla site with unique name\n\t\t- e.g. `npm create vite et012-vite-vanilla-tailwind-typescript-site`\n\t- minimize it\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- delete all unnecessary content\n\t- install Tailwind\n\t\t- `npm i -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init -p`\n\t\t- add to **tailwind.config.js**\n\t\t\t----------------------------------------\n\t\t\tcontent: [\n\t\t\t\t\"./index.html\",\n\t\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t\t],\n\t\t\t----------------------------------------\n\t\t- **style.css**\n\t\t\t---------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\n\t\t\t---------------------------------\t\t\t\n\t- add Tailwind styles to HTML\n\t\t- **index.html**\n\t\t\t---------------------------------------\n\t\t\t<body class=\"bg-gray-400 h-screen grid place-items-center\">\n\t\t\t---------------------------------------\n\t\t- **main.ts**\n\t\t\t-------------------------------------\n\t\t\t<main class=\"grid place-items-center\">\n\t\t\t\t<h1 class=\"text-green-800 text-7xl\">This is a test of Tailwind</h1>\n\t\t\t\t<p class=\"text-3xl mt-7 italic w-1/2 leading-10\">Lorem ipsum, dolor sit <span class=\"highlight\">amet</span> consectetur adipisicing elit. Ab consequatur, et natus quis at repellendus rerum quas! Atque fuga repudiandae laborum <span class=\"highlight\">eveniet</span> facilis, harum quas dignissimos <span class=\"highlight\">okisdje</span>? Deleniti, ipsam?</p>\n\t\t\t</main>\n\t\t\t-------------------------------------\n\t\t- add to **styles.css**\n\t\t\t---------------------------------------\n\t\t\t.highlight {\n\t\t\t\t@apply bg-yellow-300 inline-block px-2 py-0 text-red-500 border-4 border-blue-800 rounded-md;\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t- combine Sass and Tailwind\n\t\t- `npm i sass`\n\t\t- rename **styles.scss** and add\n\t\t\t-----------------------------------------------\n\t\t\t.forceLineHeight {\n\t\t\t\tline-height: 4rem;\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------------\t\n\t\t- **main.ts**\n\t\t\t-------------------------------------------\n\t\t\t<p class=\"text-3xl mt-7 italic w-1/2 leading-10 forceLineHeight\">\n\t\t\t-------------------------------------------\n\t- site should look the same as the HTML/CSS site:##finsihedhtmlcss\t\t\t\n- **learn basics of Tailwind**\n\t- **layout**\n\t\t---------------------------------------------\n\t\t<body class=\"bg-gray-900 h-screen grid place-items-center\">\n\t\t---------------------------------------------\n\t- explore\n\t\t- https://flowbite.com/docs/components/buttons\n\t- **buttons**\n\t\t- are extremely plain\n\t\t\t--------------------------------------\n\t\t\t<button>create page</button>\n\t\t\t--------------------------------------\n\t\t- you have to style them\n\t\t\t- it's easy to find Tailwind styles to use and learn from, e.g. [Flowbite](https://flowbite.com/docs/components/buttons/)\n\t\t- make buttons\n\t\t\t---------------------------------------------\n\t\t\t<div class=\"flex gap-2\">\t\t\t\n\t\t\t\t<button type=\"button\" class=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800\">Copy</button>\n\t\t\t\t<button type=\"button\" class=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800\">Send</button>\n\t\t\t\t<button type=\"button\" class=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800\">Save</button>\n\t\t\t\t<button type=\"button\" class=\"focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\">Delete</button>\n\t\t\t</div>\n\t\t\t---------------------------------------------\n\t\t- should look like this:##thebuttonshould\n\t- **problem: duplicate code reduces flexibility**\n\t\t- solve with at one of two levels:\n\t\t\t- style level (`@apply`)\n\t\t\t- component level (feature of framework)\n\t\t- solve the above duplicate-code issue of buttons on the **style level**\n\t\t\t- **style.css**\n\t\t\t\t---------------------------------------\n\t\t\t\t.btn-primary {\n\t\t\t\t\t@apply text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800;\n\t\t\t\t}\n\n\t\t\t\t.btn-danger {\n\t\t\t\t\t@apply focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t----------------------------------------\n\t\t\t\t<div class=\"flex gap-2\">\n\t\t\t\t\t<button class=\"btn-primary\">Copy</button>\n\t\t\t\t\t<button class=\"btn-primary\">Send</button>\n\t\t\t\t\t<button class=\"btn-primary\">Save</button>\n\t\t\t\t\t<button class=\"btn-danger\">Delete</button>\n\t\t\t\t</div>\n\t\t\t\t----------------------------------------\n\t\t- HTML is simpler, should also look like this:##thebuttonshould\n\t- **interactivity with Alpine.js**\n\t\t- abbreviated styles are cleaner, which makes it easier to add other functionality to the code such as interactivity with Alpine.js\n\t\t- add alpine.js CDN\n\t\t\t- **index.html**\n\t\t\t\t------------------------------------------\n\t\t\t\t<script src=\"//unpkg.com/alpinejs\" defer></script>\n\t\t\t\t------------------------------------------\n\t\t- add interactivity\n\t\t\t- **main.ts**\n\t\t\t\t----------------------------------------\n\t\t\t\t<div class=\"flex gap-2\" x-data=\"{message: ''}\">\n\t\t\t\t\t<button class=\"btn-primary\" @click=\"message = 'copied'\">Copy</button>\n\t\t\t\t\t<button class=\"btn-primary\" @click=\"message = 'sent'\">Send</button>\n\t\t\t\t\t<button class=\"btn-primary\" @click=\"message = 'saved'\">Save</button>\n\t\t\t\t\t<button class=\"btn-danger\" @click=\"message = 'deleted'\">Delete</button>\n\t\t\t\t\t<div class=\"text-gray-500 text-3xl\" x-text=\"message\"></div>\t\t\n\t\t\t\t</div>\n\t\t\t\t----------------------------------------\n\t\t- interactivity should work like this:#gif#showthbutooson\n\t- **solve duplicate-code issue at component level**\n\t\t- we want to now have headers and separators for each feature, like this:##showcominguppattern\n\t\t- first implement with duplicate code to see the problem:\n\t\t\t- header\n\t\t\t\t--------------------------------------------\n\t\t\t\t<h2 class=\"text-2xl mb-4 text-gray-600\">Interactive Buttons</h2>\n\t\t\t\t<h2 class=\"text-2xl mb-4 text-gray-600\">Employee Cards</h2>\n\t\t\t\t<h2 class=\"text-2xl mb-4 text-gray-600\">Feature 3</h2>\n\t\t\t\t<h2 class=\"text-2xl mb-4 text-gray-600\">Feature 4</h2>\n\t\t\t\t--------------------------------------------\n\t\t- now add new style, and notice you have to add it in four places:\n\t\t\t- **style.css**\n\t\t\t\t---------------------------------------\n\t\t\t\t.ex-small-caps {\n\t\t\t\t\tfont-variant: small-caps;\n\t\t\t\t}\n\t\t\t\t---------------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t------------------------------------\n\t\t\t\tex-small-caps\n\t\t\t\t------------------------------------\n\t\t- replace duplicate code with component\n\t\t\t- **components/ItemHeader.ts**\n\t\t\t\t-------------------------------------------\n\t\t\t\texport const ItemHeader = (text: string) => {\n\t\t\t\t\treturn `<h2 class=\"text-2xl mb-4 text-gray-600 ex-small-caps\">${text}</h2>`;\n\t\t\t\t}\n\t\t\t\t-------------------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t----------------------------------------\n\t\t\t\t${ItemHeader('Interactive Buttons')}\n\t\t\t\t${ItemHeader('Employee Cards')}\n\t\t\t\t${ItemHeader('Feature 3')}\n\t\t\t\t${ItemHeader('Feature 4')}\n\t\t\t\t----------------------------------------\n\t\t- create Separator component as well\n\t\t\t- **components/Separator.ts**\n\t\t\t\t-------------------------------------------\n\t\t\t\texport const Separator = () => {\n\t\t\t\t\treturn '<div class=\"my-5 border-gray-800 border-b\"></div>';\n\t\t\t\t}\n\t\t\t\t-------------------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t----------------------------------------\n\t\t\t\t${Separator()}\n\t\t\t\t${Separator()}\n\t\t\t\t${Separator()}\n\t\t\t\t${Separator()}\n\t\t\t\t----------------------------------------\n\t- **employee cards**\n\t\t- see [Flowbite cards](https://flowbite.com/docs/components/card)\n\t\t- copy card and add image:\n\t\t\t----------------------------------------\n\t\t\t<a href=\"#\" class=\"flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700\">\n\t\t\t\t<img class=\"object-cover rounded-t-lg h-96 md:h-auto md:w-48 md:rounded-none md:rounded-l-lg\" src=\"images/person.jpg\" alt=\"\">\n\t\t\t\t<div class=\"flex flex-col justify-between p-4 leading-normal\">\n\t\t\t\t\t<h5 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">Noteworthy technology acquisitions 2021</h5>\n\t\t\t\t\t<p class=\"mb-3 font-normal text-gray-700 dark:text-gray-400\">Here are the biggest enterprise technology acquisitions of 2021 so far, in reverse chronological order.</p>\n\t\t\t\t</div>\n\t\t\t</a>\n\t\t\t----------------------------------------\n\t\t- it should look like this:##thelooklikecard\n\t\t- create **data/employees.json**\n\t\t\t- from this data: https://edwardtanguay.vercel.app/share/employees.json\n\t\t- show list of employees \n\t\t\t- `import employees from './data/employees.json'`\n\t\t\t- show employees\n\t\t\t\t--------------------------------------\n\t\t\t\t${employees.map(employee => {\n\t\t\t\t\treturn `<div class=\"text-gray-500\">${employee.firstName} ${employee.lastName}</div>`;\n\t\t\t\t}).join('')}\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t- put card into component\n\t\t\t- **components/Employee.ts**\n\t\t\t\t-----------------------------------\n\t\t\t\texport const Employee = (employee: any) => {\n\t\t\t\t\treturn `\n\t\t\t\t<a href=\"#\" class=\"flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700 mb-4\">\n\t\t\t\t\t<img class=\"object-cover rounded-t-lg h-96 md:h-auto md:w-48 md:rounded-none md:rounded-l-lg\" src=\"https://edwardtanguay.vercel.app/share/images/employees/employee_${employee.employeeID}.jpg\" alt=\"\">\n\t\t\t\t\t<div class=\"flex flex-col justify-between p-4 leading-normal\">\n\t\t\t\t\t\t<h5 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">${employee.firstName} ${employee.lastName}</h5>\n\t\t\t\t\t\t<p class=\"mb-3 text-sm font-normal text-gray-700 dark:text-gray-400\">${employee.notes}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\n\t\t\t\t`\n\t\t\t\t}\n\t\t\t\t-----------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t------------------------------------------\n\t\t\t\t${employees.map(employee => {\n\t\t\t\t\treturn `${Employee(employee)}`;\n\t\t\t\t}).join('')}\t\t\t\t\n\t\t\t\t------------------------------------------\n\t- solve TypeScript **any** issue\n\t\t- **interfaces.ts**\n\t\t\t----------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\temployeeID: number;\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\tnotes: string;\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t- employee cards look like this:#gif#theemployeecardsok\n- **create Vite React site with Tailwind**\n\t- (similar to Vite Vanilla)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-17 21:25:31","systemWhoCreated":"systemUnknown"},{"id":726,"category":"CSS","title":"Install and use Tailwind and DaisyUI in a TypeScript Vite-Vanilla site with menus","body":"- **what we will do**\n\t- the main purpose of this howto is to get to know **DaisyUI**\n\t- DaisyUI is a Tailwind CSS framework \n\t- if you are new to Tailwind, see [this howto](https://edwardtanguay.vercel.app/howtos?id=725) first\n\t- code is here:\n\t\t- https://github.com/edwardtanguay/et022-vitevanilla-daisyui-site\n\t- live site is here:\n\t\t- https://et022-vitevanilla-daisyui-site.vercel.app (see Info page)\n\t\t- https://github.com/edwardtanguay/et024-vite-vanilla-daisyui-site (better formatted but only a few components so far, see Info page)\n- **create TypeScript Vite-Vanilla site with Tailwind and DaisyUI**\n\t- set up a **Vite-Vanilla Site**\n\t\t- use: https://starters.tanguay.eu/list/darkViteVanillaMenu\n\t\t- clone it\n\t\t- delete .git directory\n\t\t- VSCode\n\t\t- `npm i` and `npm run dev`\n\t\t- click on URL in terminal to see this site:##theinfositeokokok\n\t- install **Tailwind**\n\t\t- `npm i -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init -p`\n\t\t- add to **tailwind.config.js**\n\t\t\t----------------------------------------\n\t\t\tcontent: [\n\t\t\t\t\"./index.html\",\n\t\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t\t],\n\t\t\t----------------------------------------\n\t\t- **src/main.scss**\n\t\t\t---------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\n\t\t\t---------------------------------\n\t\t- restart site\n\t\t\t- CTRL-C\n\t\t\t- `npm run dev`\n\t\t- test Tailwind\n\t\t\t- **PageWelcome.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\t<p class=\"text-red-500\">Welcome to this site.</p>\n\t\t\t\t-----------------------------------------\n\t\t\t- site should be responsive to inline Tailwind styles:#gif#thecolorredkdkdkd\n\t- install **DaisyUI**\n\t\t- `npm i -D daisyui@latest`\n\t\t- **tailwind.config.js**\n\t\t\t-------------------------------------------------------\n\t\t\tplugins: [require(\"daisyui\")]\n\t\t\t-------------------------------------------------------\n\t\t- test DaisyUI\n\t\t\t- site should look like this\n\t\t\t\t- notice Tailwind and DaisyUI have made some structural changes to the site\n\t\t\t\t- this is because this site is currently styled in Sass\n\t\t\t\t- in the next section, we will convert the site layout from Sass to Tailwind/DaisyUI\n\t\t\t\t- for now, note that DaisyUI works:##tehdaisyuiinin\n- convert site styling from Sass to Tailwind/DaisyUI\n\t- remove all **Sass** styling\n\t\t- **main.scss** - delete all but first three lines\n\t\t\t-----------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\n\t\t\t-----------------------------------------\n\t\t- if your browser has dark mode turned on, temporarily disable it\n\t\t- in **index.html** delete style block##theremovestily\n\t\t- **PageWelcome.ts**: remove Tailwind styles on that we added above\n\t\t- **Router.ts**: remove class from `<nav class=\"menu\">`\n\t\t- your site should now look bare like this:##thesimplesitekjsij\n\t- restyle site with **Tailwind and DaisyUI**\n\t\t- convert to dark theme\n\t\t\t- **tailwind.config.js**\n\t\t\t\t----------------------------------------\n\t\t\t\tdaisyui: {\n\t\t\t\t\tthemes: [\"dark\"],\n\t\t\t\t}\n\t\t\t\t----------------------------------------\n\t\t\t- **index.html**\n\t\t\t\t-------------------------------------------\n\t\t\t\t<html data-theme=\"dark\">\n\t\t\t\t-------------------------------------------\n\t\t\t- **index.html** - to avoid a blinking white screen on page-load, add this style block\n\t\t\t\t--------------------------------------------\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #1D232A;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t--------------------------------------------\n\t\t- style the **navbar** and rest of site\n\t\t\t- **Router.ts** - add to nav **<ul>**\n\t\t\t\t-----------------------------------------\n\t\t\t\t<nav class=\"mt-3 mb-6 bg-gray-950 rounded-md\">\n\t\t\t\t\t<ul class=\"menu menu-horizontal bg-base-20 gap-1\">\n\t\t\t\t-----------------------------------------\n\t\t\t- **App.ts**\n\t\t\t\t------------------------------------------\n\t\t\t\t<main class=\"container p-6\">\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<h1 class=\"text-yellow-500 text-4xl\">Info Site</h1>\n\t\t\t\t\t\t${getMenu()}\n\t\t\t\t\t</header>\n\t\t\t\t\t${getCurrentPage()}\n\t\t\t\t</main>\t\t\t\t\n\t\t\t\t------------------------------------------\n\t\t\t- site should look like this:#gif#thevanokandjno\n- **experiment with DaisyUI**\n\t- https://daisyui.com/components/accordion\n\t- build DaisyUI layout components into functional Vite-Vanilla components that work within the framework\n- **experiement with Flowbite**\n\t- https://flowbite.com/docs/components/buttons\n\t- build Flowbite layout components into functional Vite-Vanilla components that work within the framework","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-18 23:39:44","systemWhoCreated":"systemUnknown"},{"id":727,"category":"CSS","title":"How to use SVG graphics in websites with animation, interaction and dynamic data","body":"- **purpose of this howto**\n\t- to get you up and running with SVGs\n\t- know what they are\n\t- how to create them\n\t- how to use them\n\t- how to change them\n\t- how to animate them\n\t- how to incorporate them into interactive websites\n- **what are SVGs**\n\t- SVG stands for **Scalable Vector Graphics** and they were created around **2003**\n\t- `.jpg`, `.png` or `.gif` images are **raster** graphics which means they are made up of **pixels**\n\t- `.svg` images are **vector** graphics which means they are made up of **math equations**\n\t\t- because **vector** graphics are made up of math equations, they are **scalable**\n\t\t\t- that is why they are called **Scalable Vector Graphics** (SVG)\n\t\t- this means that as they are infinitely scaled larger or smaller, they do not loose their sharpness##vectorraster1\n\t\t- note that at optimal display sizes, vector and raster images can look similarly sharp, but it is important to remember that only vector graphics can be scaled without losing their sharpness and accuracy##vectorraster2\t\n\t- SVGs can be used in `<img>` tags just like other raster graphics (`.jpg`, `.png`, `.gif`), e.g.\n\t\t- **index.html**\n\t\t\t----------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<title>SVG Test</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<img src=\"images/ball.svg\"/>\n\t\t\t</body>\n\n\t\t\t</html>\t\t\t\n\t\t\t----------------------------------------\n\t\t- **images/ball.svg**\n\t\t\t-----------------------------------------------\n\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n\t\t\t\t<circle cx=\"100\" cy=\"100\" r=\"80\" fill=\"blue\" />\n\t\t\t</svg>\n\t\t\t-----------------------------------------------\n\t\t- site looks like this:##svgblueball\n\t- but since SVGs are XML (similar to HTML), their contents can also be directly copied into the HTML\n\t\t- this enables you to easily make SVGs **interactive** with tools like **Alpine.js**\n\t\t\t- **index.html**\n\t\t\t\t----------------------------------------------------\n\t\t\t\t<!DOCTYPE html>\n\t\t\t\t<html>\n\t\t\t\t<head>\n\t\t\t\t\t<meta name=\"viewport\"\n\t\t\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t\t\t  <script src=\"//unpkg.com/alpinejs\" defer></script>\n\t\t\t\t\t<title>SVG Test</title>\n\t\t\t\t</head>\n\t\t\t\t<body x-data=\"{ballColor: 'red'}\">\n\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t width=\"200\"\n\t\t\t\t\t\t height=\"200\"\n\t\t\t\t\t\t class=\"ball\"\n\t\t\t\t\t\t @click=\"ballColor = ballColor === 'green' ? 'red' : 'green'\"\n\t\t\t\t\t\t viewBox=\"0 0 200 200\">\n\t\t\t\t\t\t<circle cx=\"100\"\n\t\t\t\t\t\t\t\tcy=\"100\"\n\t\t\t\t\t\t\t\tr=\"80\"\n\t\t\t\t\t\t\t\t:fill=\"ballColor\" />\n\t\t\t\t\t</svg>\n\t\t\t\t</body>\n\t\t\t\t</html>\n\t\t\t\t----------------------------------------------------\n\t\t\t- site looks like this:#gif#svginteractivalll\t\t\t\n- **SVG basics**\n\t- learn how to alter SVGs, not necessarily create them\n\t\t- most work with SVGs involves\n\t\t\t- creating SVGs with graphic tools\n\t\t\t- altering SVGs to match your exact needs\n\t\t\t- animating SVGs\n\t\t\t- adding interactivity to SVGs\n\t\t\t- making SVGs dynamic by \n\t\t\t\t- wrapping them in components which are called with key parameters\n\t\t\t\t- setting them up so that they can be generated from dynamic data such as from a JSON file, API or database\n\t- so first simply familiarize youself with the 8 main SVG elements and what attribute values you can chanage to alter their shape\n\t\t- **1. circle**\n\t\t\t- https://www.w3schools.com/graphics/svg_intro.asp\n\t\t- **2. rect**\n\t\t\t- https://www.w3schools.com/graphics/svg_rect.asp\n\t\t- **3. ellipse**\n\t\t\t- https://www.w3schools.com/graphics/svg_ellipse.asp\n\t\t- **4. line**\n\t\t\t- https://www.w3schools.com/graphics/svg_line.asp\n\t\t- **5. polygon**\n\t\t\t- https://www.w3schools.com/graphics/svg_polygon.asp\n\t\t- **6. polyline**\n\t\t\t- https://www.w3schools.com/graphics/svg_polyline.asp\n\t\t- **7. text**\n\t\t\t- https://www.w3schools.com/graphics/svg_text.asp\n\t\t- **8. path**\n\t\t\t- https://www.w3schools.com/graphics/svg_path.asp\n- **free tools to create SVGs**\n\t- [Inkscape](https://inkscape.org) - full-featured, all-purpose vector graphics application\n\t- [Figma](https://www.figma.com) - design and prototyping tool that also creates SVGs\n\t- [SVGator](https://app.svgator.com) - decidated and streamlined web site that allows you to quickly create SVGs for your website\n- **make an interactive SVG \"learning roadmap\"**\n\t- 1. use [SVGator](https://app.svgator.com)  to create the SVG code for the roadmap\n\t- 2. create a Vite Vanilla site\n\t\t- use this site that uses Tailwind/DaisyUI\n\t\t\t- https://github.com/edwardtanguay/et024-vite-vanilla-daisyui-site\n\t- 3. display SVG as XML text on Welcome page\n\t- 4. animate it\n\t\t----------------------------------------\n\t\t.roadmap {\n\t\t\twidth: 10rem;\n\t\t\ttransition: width .3s;\n\t\t}\n\n\t\t.roadmap:hover {\n\t\t\twidth: 40rem;\n\t\t}\t\t\n\t\t----------------------------------------\n\t- 5. convert it to a Roadmap component \n\t\t- show the advantage of making it a component, by calling it from both the Welcome and About page\n\t- 6. use Alpine.js to enable the user to click each of the tech boxes which toggles the color of that box between red to green\n\t- 7. move the initial array back to a JSON file\n\t- 8. use json-server to save state in JSON file permanently\n\t\t-----------------------------------------\n\t\t<script>\n\t\t\tdocument.addEventListener('alpine:init', () => {\n\t\t\t\tAlpine.data('data', () => ({\n\t\t\t\t\thtml: true,\n\t\t\t\t\thtmlColor: this.html ? 'green' : 'red',\n\t\t\t\t\ttoggleHtml() {\n\t\t\t\t\tthis.htmlColor = this.htmlColor === 'green' ? 'red' : 'green'; \n\t\t\t\t\t}\n\t\t\t\t}))\n\t\t\t})\n\t\t</script>\n\t\t-----------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-20 00:37:38","systemWhoCreated":"systemUnknown"},{"id":728,"category":"Next.js","title":"Build a Next.js 13.4 site with app router, TypeScript, Tailwind, Prisma, SQLite and server actions","body":"- **about this howto**\n\t- this howto is good if you are new to Next.js and want to see how \n\t\t- server pages and client components work together\n\t\t- server actions work\n\t\t- see a Next.js site with Tailwind, TypeScript, Prisma all in one\n\t\t- it also uses the app router so no React Router necessary\n\t\t- this is a nice intro project to get to know Next.js 13.4 (May 2023)\n- final code is here:\n\t- https://github.com/edwardtanguay/et002-nextjs-todo-app\n- I built this based on Kyle's video on this topic:\n\t- [Learn Next.js 13 With This One Project](https://www.youtube.com/watch?v=NgayZAuTgwM)\n- the app works like this:#gif#thedemonextjsappserver\n- notes\n\t- I got this app to work locally but online there is an error because the SQLite db can't be found\n\t\t- if you were going to put this online, you would have some other online data store which Prisma would connect to\n\t- Next.js [App Router](https://nextjs.org/docs/app)\n- watched this video: [Learn Next.js 13 With This One Project](https://www.youtube.com/watch?v=NgayZAuTgwM&feature=youtu.be)\n\t- video from: 2023-05-23\n\t- Next.js 13.4\n\t\t- May 4, 2023\n\t\t- changes regarding mutations between server and client\n\t- this video\n\t\t- todo list application##thetodookjokj\n\t\t- data is persisted in a database on the backend\n- install base site\n\t- `npx create-next-app@latest et002-nextjs-todo-app`\n\t\t- it says I'm installing Next.js 13.4.12\n\t\t\t- TypeScript: yes\n\t\t\t- ESLint: yes\n\t\t\t- Tailwind: yes\n\t\t\t- /src directory: yes (mine was default \"no\", his was \"yes\")\n\t\t\t- App directory: yes\n\t\t\t- customize import alias: no##nextdoitok\n\t\t- finished installing in 25 seconds\n\t\t\t- node_modules have been created\n\t\t\t- `npm run dev`##thenewnextsiteok\n- install Prisma\n\t- `npm i prisma -D`\n\t- `npx prisma init --datasource-provider sqlite`\n\t- add to **.gitignore**\n\t\t--------------------------------------\n\t\t.env\n\t\t--------------------------------------\n\t- add to **schema.prisma**\n\t\t-------------------------------------------\n\t\tmodel Todo {\n\t\t\tid String @id @default(uuid())\n\t\t\ttitle String\n\t\t\tcomplete Boolean\n\t\t\tcreatedAt DateTime @default(now())\n\t\t\tupdateAt DateTime @updatedAt\n\t\t}\t\t\t\n\t\t-------------------------------------------\n\t- `npx prisma migrate dev --name init`##thedbokos\n\t- add to **.gitignore**\n\t\t--------------------------------------\n\t\tdev.db*\n\t\t--------------------------------------\n\t- **/src/db.ts** - fix hot-loading issue, copied from [Best practice for instantiating PrismaClient with Next.js](https://www.prisma.io/docs/guides/other/troubleshooting-orm/help-articles/nextjs-prisma-client-dev-practices)\n\t\t------------------------------------\n\t\timport { PrismaClient } from '@prisma/client'\n\n\t\tconst globalForPrisma = globalThis as unknown as {\n\t\t\tprisma: PrismaClient | undefined\n\t\t}\n\n\t\texport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\n\t\tif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\t\t------------------------------------\n- start application\n\t- `npm run dev`\n\t- minimize **globals.css**\n\t\t-------------------------------------------\n\t\t@tailwind base;\n\t\t@tailwind components;\n\t\t@tailwind utilities;\t\t\t\n\t\t-------------------------------------------\n\t- **page.tsx**\n\t\t-----------------------------------\n\t\texport default function Home() {\n\t\t\treturn <h1>App</h1>\n\t\t}\n\t\t-----------------------------------\n\t- site should look like this:##thetodoaddapp\n\t- **layout.tsx**\n\t\t------------------------------------\n\t\texport const metadata: Metadata = {\n\t\t\ttitle: 'The Todo App'\n\t\t}\n\n\t\t<body className={`${inter.className} bg-slate-800 text-slate-100 container mx-auto p-4`}>{children}</body>\n\t\t------------------------------------\n\t- add data\n\t\t-----------------------------------------\n\t\tconst todos = await prisma.todo.findMany();\n\n\t\t<ul className=\"\">\n\t\t\t{todos.map((todo) => (\n\t\t\t\t<li key={todo.id}>{todo.title}</li>\n\t\t\t))}\n\t\t</ul>\n\t\t-----------------------------------------    \n\t- to fix \"Cannot find name li\" error, **tsconfig.json**\n\t\t-----------------------------------------\n\t\t\"jsx\": \"preserve\",\n\t\t-----------------------------------------\n- trying to publish with SQLite file\n\t- gets Prisma error##prismaerrorr\n\t- **package.json**\n\t\t------------------------------------------\n\t\t\"build\": \"prisma generate && next build\"\t\t\n\t\t------------------------------------------\n\t- no env file##noenvksjd\n\t\t- added it (on deployments, click three dots)\n\t- it deployed##onlinedbvercel\n\t- add record\n\t\t--------------------------------------------------\n\t\tawait prisma.todo.create({ data: { title: \"test\", complete: false } });\n\t\t--------------------------------------------------\n\t- but it's not read/write online\n- component\n\t- **page.tsx**\n\t\t--------------------------------------\n\t\t{todos.map((todo) => (\n\t\t\t<TodoItem todo={todo} key={todo.id} />\n\t\t))}\n\t\t--------------------------------------\n\t- **TodoItem.tsx**\n\t\t----------------------------------------------\n\t\tinterface ITodo {\n\t\t\ttitle: string;\n\t\t}\n\t\ttype IProps = {\n\t\t\ttodo: ITodo;\n\t\t}\n\n\t\texport function TodoItem({ todo }: IProps) {\n\t\t\treturn <li>{todo.title}</li>;\n\t\t}\n\t\t----------------------------------------------\n\t- **TodoItem.tsx** - add checkbox\n\t\t-------------------------------------------------\n\t\t<li className=\"flex gap-1 items-center\">\n\t\t\t<input id={todo.id} type=\"checkbox\" className=\"cursor-pointer peer\"/>\n\t\t\t<label htmlFor={todo.id} className=\"cursor-pointer peer-checked:line-through\">\n\t\t\t\t{todo.title}\n\t\t\t</label>\n\t\t</li>\t\t\n\t\t-------------------------------------------------\n- form\n\t- **add/page.tsx**\n\t\t-------------------------------------------\n\t\texport default function Page() {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<header className=\"flex justify-between items-center mb-4\">\n\t\t\t\t\t\t<h1 className=\"text-2xl\">Add Todo</h1>\n\t\t\t\t\t</header>\n\t\t\t\t\t<form className=\"flex gap-2 flex-col w-[50%]\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\tclassName=\"border border-slate-300 bg-transparent rounded px-2 py-1 outline-none focus-within:border-slate-100\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"flex gap-1 justify-end\">\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\thref=\"..\"\n\t\t\t\t\t\t\t\tclassName=\"border border-slate-300 text-slate-300 px-1 py-1 rounded hover:bg-slate-700 focus-within:bg-slate-700 outline-none\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<button type=\"submit\" className=\"border border-slate-300 text-slate-300 px-1 py-1 rounded hover:bg-slate-700 focus-within:bg-slate-700 outline-none\">Create</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\t\t\n\t\t-------------------------------------------\n\t- add server functions\n\t\t- **next.config.js**\n\t\t\t---------------------------------------\n\t\t\tconst nextConfig = {\n\t\t\t\texperimental: {\n\t\t\t\t\tserverActions: true\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t\t- **add/pages.tsx**\n\t\t\t------------------------------------------\n\t\t\tasync function createTodo (data: FormData) {\n\t\t\t\t'use server';\n\t\t\t\tconst title = data.get('title')?.valueOf();\n\t\t\t\tif (typeof title !== 'string' || title.length === 0) {\n\t\t\t\t\tthrow new Error('Invalid title');\n\t\t\t\t}\n\t\t\t\tawait prisma.todo.create({ data: { title, complete: false } });\n\t\t\t\tredirect(\"/\");\n\t\t\t};\t\t\t\n\n\t\t\t<form action={createTodo} \n\t\t\t------------------------------------------\n\t- suppress hydration warnings\n\t\t- **layout.tsx**\n\t\t\t----------------------------------------\n\t\t\t<body suppressHydrationWarning={true} \n\t\t\t----------------------------------------\n\t- update **TodoItem.tsx**, note `use client`\n\t\t-------------------------------------------------\n\t\t\"use client\"; \n\n\t\tinterface ITodo {\n\t\t\tid: string;\n\t\t\ttitle: string;\n\t\t\tcomplete: boolean;\n\t\t}\n\n\t\ttype IProps = {\n\t\t\ttodo: ITodo;\n\t\t\ttoggleTodo: (id: string, complete: boolean) => void; \n\t\t};\n\n\t\texport function TodoItem({ todo, toggleTodo }: IProps) {\n\t\t\treturn (\n\t\t\t\t<li className=\"flex gap-1 items-center\">\n\t\t\t\t\t<input id={todo.id} type=\"checkbox\"\n\t\t\t\t\t\tdefaultChecked={todo.complete}\t\n\t\t\t\t\t\tonChange={e => toggleTodo(todo.id, e.target.checked)}\n\t\t\t\t\t\tclassName=\"cursor-pointer peer\" />\n\t\t\t\t\t<label htmlFor={todo.id} className=\"cursor-pointer peer-checked:line-through peer-checked:text-slate-500\">\n\t\t\t\t\t\t{todo.title}\n\t\t\t\t\t</label>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\t\t\n\t\t-------------------------------------------------\n\t- **app/page.tsx**\n\t\t------------------------------------------------\n\t\tconst toggleTodo = async (id: string, complete: boolean) => {\n\t\t\t'use server';\n\t\t\tawait prisma.todo.update({ where: { id }, data: { complete } });\n\t\t}\t\t\n\t\t------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-07-26 23:19:45","systemWhoCreated":"systemUnknown"},{"id":729,"category":"asynchronous data","title":"How to fetch asynchronous data via callbacks and promises in a JavaScript-DOM site","body":"- **what we will do**\n\t- demonstrate how callbacks, promises and error handling can be implemented in a modular JavaScript framework web application\n- code is here\n\t- https://github.com/edwardtanguay/et008-callback-example\n- online site is here:\t\n\t- https://et008-callback-example.vercel.app\n- **set up basic site**\n\t- clone this simple Vite Vanilla site:\n\t\t- https://starters.tanguay.eu/list/darkViteVanilla\n\t- should look like this:##thesiteclonedark\n- **load data synchronously, i.e. without a callback**\n\t- **components/ColorDataLoader.tsx**\n\t\t------------------------------------\n\t\texport const ColorDataLoader = () => {\n\t\t\treturn ['green', 'yellow', 'red', 'purple'];\n\t\t};\t\n\t\t------------------------------------\n\t- **main.tsx**\n\t\t------------------------------------\n\t\timport { ColorDataLoader } from './components/dataLoader';\n\t\timport './style.scss';\n\n\t\tconst colors = ColorDataLoader();\n\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t<h1>Callback Demo Site</h1>\n\t\t<p>There are ${colors.length} colors: ${colors.map(m => `${m}`).join(', ')}</p>\n\t\t`;\n\t\t------------------------------------\n\t- will load immediately and show this:##thecallbacksites\n- **now load these asynchronously**\n\t- we will load this JSON file via axios\n\t\t- https://edwardtanguay.vercel.app/share/employees.json\n\t- **components/EmployeeDataLoader.tsx**\n\t\t------------------------------------\n\t\timport axios from 'axios';\n\n\t\tconst url = 'https://edwardtanguay.vercel.app/share/employees.json';\n\n\t\texport const EmployeeDataLoader = () => {\n\t\t\t(async () => {\n\t\t\t\tconst employees = (await axios.get(url)).data;\n\t\t\t\tconsole.log(employees);\n\t\t\t\treturn employees;\n\t\t\t})();\n\t\t\treturn 'nothing';\n\t\t};\t\n\t\t------------------------------------\n\t- **main.tsx**\n\t\t------------------------------------\n\t\tconst employees = EmployeeDataLoader();\n\t\tconsole.log(employees);\n\t\t------------------------------------\n\t- note that the employee data array loads successfully, but this array is not returned by the function\n\t\t- instead the string \"nothing\" is returned\n\t\t- this is because we enter the function, the data fetching is started, then \"nothing\" is returned\n\t\t- the data fetching then continues, and then about 50 milleseconds later, the data is output to the console##backaswisjkjcdata\n- **return the asynchronously fetched data from the EmployeeDataLoader component**\n\t- how are we going to return the asynchronous data if we don't have it yet when the function returns its data\n\t- the answer is that we don't have the EmployeeDataLoader send back our fetched data at all\n\t- but rather, we have it **execute a function** when it is finished, and this function has the data in it, which we then use on our main.tsx page\n\t- **src/interfaces.ts**\n\t\t-----------------------------------------\n\t\texport interface IEmployee {\n\t\t\tfirstName: string,\n\t\t\tlastName: string\n\t\t}\n\t\t-----------------------------------------\n\t- **components/EmployeeDataLoader.tsx**\n\t\t------------------------------------\n\t\timport axios from 'axios';\n\t\timport { IEmployee } from '../interfaces';\n\n\t\tconst url = 'https://edwardtanguay.vercel.app/share/employees.json';\n\n\t\texport const EmployeeDataLoader = (callback: (employees: IEmployee[]) => void) => {\n\t\t\t(async () => {\n\t\t\t\tconst employees:IEmployee[] = (await axios.get(url)).data;\n\t\t\t\tcallback(employees);\n\t\t\t})();\n\t\t};\n\t\t------------------------------------\n\t- **main.tsx**\n\t\t---------------------------------------\n\t\tconst colors = ColorDataLoader();\n\n\t\tEmployeeDataLoader((employees) => {\n\t\t\tconsole.log(employees);\n\t\t});\t\t\n\t\t---------------------------------------\n\t- now we have the employees array in main.tsx\n\t\t- but only in the callback function that we send as a parameter##employeesgottenksdf\n- **display the data from the asynchronous function on the web page**\n\t- **components/EmployeeDataLoader.tsx**\n\t\t------------------------------------\n\t\timport axios from 'axios';\n\t\timport { IEmployee } from '../interfaces';\n\n\t\tconst url = 'https://edwardtanguay.vercel.app/share/employees.json';\n\n\t\texport const EmployeeDataLoader = (callback: (employees: IEmployee[]) => void) => {\n\t\t\t(async () => {\n\t\t\t\tconst employees:IEmployee[] = (await axios.get(url)).data;\n\t\t\t\tcallback(employees);\n\t\t\t})();\n\t\t};\t\n\t\t------------------------------------\n\t- **main.tsx**\n\t\t----------------------------------------------\n\t\timport { ColorDataLoader } from './components/ColorDataLoader';\n\t\timport { EmployeeDataLoader } from './components/EmployeeDataLoader';\n\t\timport './style.scss';\n\n\t\tconst colors = ColorDataLoader();\n\n\t\tEmployeeDataLoader((employees) => {\n\t\t\tdocument.querySelector<HTMLDivElement>('.employeeInfo')!.innerHTML = `\n\t\t\tThere are ${employees.length} employees:\n\t\t\t<ul>\n\t\t\t${employees.map(employee => {\n\t\t\t\treturn `<li>${employee.firstName} ${employee.lastName}</li>`;\n\t\t\t}).join('')}\t\n\t\t\t</ul>\n\t\t\t`;\n\t\t});\n\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t<h1>Callback Demo Site</h1>\n\t\t<p>There are ${colors.length} colors: ${colors.map(m => `${m}`).join(', ')}</p>\n\t\t<p class=\"employeeInfo\"></p>\n\t\t`;\t\t\n\t\t----------------------------------------------\n\t- the data is not available immediately in main.tsx\n\t- but when it is, it is available inside the callback function\n\t- the callback function has access to the DOM and so can add this data to the website##all9empls\n- **build in a spinner to be shown while data loads, and mock wait to show how it works**\n\t- **tools.ts**\n\t\t-----------------------------------------\n\t\texport const showWaiting = () => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.querySelector<HTMLDivElement>('.employeeInfo')!.innerHTML = `<div><img class=\"spinner\" src=\"images/spinner.gif\"/></div>`;\n\t\t\t}, 0);\n\t\t}\t\t\n\t\t-----------------------------------------\n\t- **main.ts**\n\t\t------------------------------------------\n\t\timport { showWaiting } from './tools';\n\n\t\tEmployeeDataLoader(showWaiting, (employees) => {\n\t\t------------------------------------------\n\t- **EmployeeDataLoader.tsx**\n\t\t------------------------------------\n\t\texport const EmployeeDataLoader = async (cbPreload: () => void, cbPostload: (employees: IEmployee[]) => void) => {\n\t\t\tcbPreload();\n\t\t\tsetTimeout(async () => {\n\t\t\t\tconst employees: IEmployee[] = (await axios.get(url)).data;\n\t\t\t\tcbPostload(employees);\n\t\t\t}, config.mockWaitInSeconds() * 1000);\n\t\t};\t\t\n\t\t------------------------------------\n\t- **styles.scss**\n\t\t-----------------------------------\n\t\t.spinner {\n\t\t\twidth: 3rem;\n\t\t}\t\t\n\t\t-----------------------------------\n\t- **public/images/spinner.gif**\n\t\t- [spinner.gif](https://github.com/edwardtanguay/et008-callback-example/blob/dev/public/images/spinner.gif)\n\t- site works like this now:#gif#animatedcallback001\n- **enable showWaiting to work with multiple loading areas**\n\t- **tools.ts**\n\t\t-----------------------------------------------\n\t\texport const showWaiting = (elementIdentifier: string) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.querySelector<HTMLDivElement>(elementIdentifier)!.innerHTML = `<div><img class=\"spinner\" src=\"images/spinner.gif\"/></div>`;\n\t\t\t}, 0);\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **CustomerDataLoader.ts**\n\t\t--------------------------------------------\n\t\timport axios from 'axios';\n\t\timport { ICustomer } from '../interfaces';\n\t\timport * as config from '../config';\n\n\t\tconst url = 'https://edwardtanguay.vercel.app/share/customers.json';\n\n\t\texport const CustomerDataLoader = async (elementIdentifier: string, cbPreload: (elementIdentifier: string) => void, cbPostload: (customers: ICustomer[]) => void) => {\n\t\t\tcbPreload(elementIdentifier);\n\t\t\tsetTimeout(async () => {\n\t\t\t\tconst customers: ICustomer[] = (await axios.get(url)).data;\n\t\t\t\tcbPostload(customers);\n\t\t\t}, config.mockWaitInSeconds() * 1000);\n\t\t};\t\t\n\t\t--------------------------------------------\n\t- **main.ts**\n\t\t---------------------------------------------\n\t\tCustomerDataLoader('.customerInfo', showWaiting, (customers) => {\n\t\t\tdocument.querySelector<HTMLDivElement>('.customerInfo')!.innerHTML = `\n\t\t\tThere are ${customers.length} customers:\n\t\t\t<ul>\n\t\t\t${customers.map(customer => {\n\t\t\t\treturn `<li>${customer.companyName} ${customer.contactName}</li>`;\n\t\t\t}).join('')}\t\n\t\t\t</ul>\n\t\t\t`;\n\t\t});\t\t\n\t\t---------------------------------------------\n\t- site now works like this:#gif#siteloadstwoareas\n- **convert the CustomerDataLoader so that it returns a Promise and call it from main.ts with async/await**\n\t- we will convert our data loader\n\t\t- from:\n\t\t\t- parameters: **1 string, 2 callbacks**\n\t\t\t- return value: **void**\n\t\t- to:\n\t\t\t- parameters: **1 string, 1 callback**\n\t\t\t- return value: **Promise**\n\t- **CustomerDataLoader.ts**\n\t\t------------------------------------------------\n\t\texport const CustomerDataLoader = async (elementIdentifier: string, cbPreload: (elementIdentifier: string) => void):Promise<ICustomer[]> => {\n\t\t\tcbPreload(elementIdentifier);\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tconst customers: ICustomer[] = (await axios.get(url)).data;\n\t\t\t\t\tif (customers) {\n\t\t\t\t\t\tresolve(customers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new Error('Customer could not be loaded'));\n\t\t\t\t\t}\n\t\t\t\t}, config.mockWaitInSeconds() * 1000);\n\t\t\t});\n\t\t};\t\t\n\t\t------------------------------------------------\n\t- **main.ts**\n\t\t---------------------------------------------\n\t\t(async () => {\n\t\t\tconst customers: ICustomer[] = await CustomerDataLoader('.customerInfo', showWaiting);\n\n\t\t\tdocument.querySelector<HTMLDivElement>('.customerInfo')!.innerHTML = `\n\t\t\tThere are ${customers.length} customers:\n\t\t\t<ul>\n\t\t\t${customers.map(customer => {\n\t\t\t\treturn `<li>${customer.companyName} ${customer.contactName}</li>`;\n\t\t\t}).join('')}\t\n\t\t\t</ul>\n\t\t\t`;\n\t\t})();\t\t\n\t\t---------------------------------------------\t\t\n\t- the site loads the same way as before:#gif#siteloadstwoareas\n- **add a mock problem that can occur in the loading of the CustomerDataLoader and demonstrate how async/await resolve rejected promises**\n\t- **CustomerDataLoader.ts**\n\t\t- note that we have **6 mock states**, 4 of which return the data successfully, and 2 which return a specific error explaining why the data could not be fetched\n\t\t\t------------------------------------------------\n\t\t\texport const CustomerDataLoader = async (elementIdentifier: string, cbPreload: (elementIdentifier: string) => void): Promise<ICustomer[]> => {\n\t\t\t\tcbPreload(elementIdentifier);\n\t\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\t\t// 0, 1, 2, 3 = data was successfully fetched\n\t\t\t\t\t// -2, -1 = can't get the data because a mock problem has occurred\n\t\t\t\t\tconst randnum = tools.getRandomNumberBetween(-2, 3); \n\n\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\tconst customers: ICustomer[] = (await axios.get(url)).data;\n\t\t\t\t\t\tif (customers && randnum >= 0) {\n\t\t\t\t\t\t\tresolve(customers);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (randnum === -2) {\n\t\t\t\t\t\t\t\treject(new Error('Network error occurred, customers could not be loaded.'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (randnum === -1) {\n\t\t\t\t\t\t\t\treject(new Error('Customer API is currently undergoing maintenance.'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, config.mockWaitInSeconds() * 1000);\n\t\t\t\t});\n\t\t\t};\t\n\t\t\t------------------------------------------------\n\t- **main.ts**\n\t\t- note that **the type of a caught error is truly unknown** since anything can happen on an API call, so you have to check to see if the returned type is even of type Error that was returned from your Promise's reject method\n\t\t\t---------------------------------------------\n\t\t\t(async () => {\n\t\t\t\tconst _customerInfoElem = document.querySelector<HTMLDivElement>('.customerInfo');\n\t\t\t\tif (_customerInfoElem) {\n\t\t\t\t\tconst customerInfoElem = _customerInfoElem;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst customers: ICustomer[] = await CustomerDataLoader('.customerInfo', showWaiting);\n\t\t\t\t\t\tcustomerInfoElem.innerHTML = `<div>\n\t\t\t\tThere are ${customers.length} customers:\n\t\t\t\t<ul>\n\t\t\t\t${customers.map(customer => {\n\t\t\t\t\t\t\treturn `<li>${customer.companyName} - ${customer.contactName}</li>`;\n\t\t\t\t\t\t}).join('')}\t\n\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err: unknown) {\n\t\t\t\t\t\tif (err instanceof Error) {\n\t\t\t\t\t\t\tcustomerInfoElem.innerHTML = `<p class=\"error\">${err.message}</p>`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcustomerInfoElem.innerHTML = `<p class=\"error\">GENERAL ERROR</p>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\t\t\n\t\t\t---------------------------------------------\t\n\t- now the data will be displayed unless there is an error, which is caught and displayed#gif#mockerrorspromise\n- **also build in error handling into the EmployeeDataLoader which uses callbacks**\n\t- **interfaces.ts**\n\t\t- to handle errors with callbacks, we first have to create an interface for the data object that the callback will return, since sometimes we need to return employees, but sometimes we need to return an error\n\t\t- interfaces.ts \n\t\t\t-------------------------------------------\n\t\t\texport interface IEmployeeDataLoaderData {\n\t\t\t\temployees: IEmployee[],\n\t\t\t\thasError: boolean,\n\t\t\t\terrorMessage: string\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t- **EmployeeDataLoader.ts**\n\t\t- if we successfully can load employees, then we pack the data object with employees\n\t\t- however, if we can't load employees, then we pack the data object with an error message\n\t\t- but in every case, we send back a data object that is of type IEmployeeDataLoaderData\n\t\t\t------------------------------------------------\n\t\t\texport const EmployeeDataLoader = async (elementIdentifier: string, cbPreload: (elementIdentifier: string) => void, cbPostload: (data: IEmployeeDataLoaderData) => void) => {\n\t\t\t\tcbPreload(elementIdentifier);\n\n\t\t\t\t// 0, 1, 2, 3 = data was successfully fetched\n\t\t\t\t// -2, -1 = can't get the data because a mock problem has occurred\n\t\t\t\tconst randnum = tools.getRandomNumberBetween(-2, 3);\n\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tconst employees: IEmployee[] = (await axios.get(url)).data;\n\n\t\t\t\t\tif (employees && randnum >= 0) {\n\t\t\t\t\t\tcbPostload({\n\t\t\t\t\t\t\temployees,\n\t\t\t\t\t\t\thasError: false,\n\t\t\t\t\t\t\terrorMessage: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (randnum === -2) {\n\t\t\t\t\t\t\tcbPostload({\n\t\t\t\t\t\t\t\temployees: [],\n\t\t\t\t\t\t\t\thasError: true,\n\t\t\t\t\t\t\t\terrorMessage: 'Employees could not be loaded, no connection to data source.'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (randnum === -1) {\n\t\t\t\t\t\t\tcbPostload({\n\t\t\t\t\t\t\t\temployees: [],\n\t\t\t\t\t\t\t\thasError: true,\n\t\t\t\t\t\t\t\terrorMessage: 'Employee API is unreachable.'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, config.mockWaitInSeconds() * 1000);\n\t\t\t};\n\t\t\t------------------------------------------------\n\t- **main.ts**\n\t\t- here we look into the data object that comes back via callback from the EmployeeDataLoader function\n\t\t- if there is no error, we show the employees\n\t\t- if there is an error, we show the error\n\t\t\t------------------------------------------------\n\t\t\tEmployeeDataLoader('.employeeInfo', showWaiting, (data: IEmployeeDataLoaderData) => {\n\t\t\t\tconst _customerInfoElem = document.querySelector<HTMLDivElement>('.employeeInfo');\n\t\t\t\tif (_customerInfoElem) {\n\t\t\t\t\tconst customerInfoElem = _customerInfoElem;\n\t\t\t\t\tif (!data.hasError) {\n\t\t\t\t\t\tconst employees = data.employees;\n\t\t\t\t\t\tcustomerInfoElem.innerHTML = `\n\t\t\t\tThere are ${employees.length} employees:\n\t\t\t\t<ul>\n\t\t\t\t${employees.map(employee => {\n\t\t\t\t\t\t\treturn `<li>${employee.firstName} ${employee.lastName}</li>`;\n\t\t\t\t\t\t}).join('')}\t\n\t\t\t\t</ul>\n\t\t\t\t`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcustomerInfoElem.innerHTML = `<p class=\"error\">${data.errorMessage}</p>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t------------------------------------------------\t\n\t- now the data will be displayed unless there is an error, which is caught and displayed#gif#callbackspromiseserrorhandle222","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-08-11 17:17:07","systemWhoCreated":"systemUnknown"},{"id":730,"category":"readline.sync","title":"Create an interactive CLI with readline-sync that adds custom pages to a Vite Vanilla Site","body":"- **what we will do**\n\t- create an interactive CLI that creates different types of pages in a website\n\t- in a Vite Vanilla site, you will be able to type in the following commands\n\t\t- `npm run cp Reports` \n\t\t\t- creates a page called \"Reports\" with a default intro text \"Welcome to this page.\"\n\t\t- `npm run cp`\n\t\t\t- asks for title\n\t\t\t- asks for intro text\n- code is here:\n\t- https://github.com/edwardtanguay/et038-site-cli\n- finished CLI will work like this:#gif#showfinalcli\n- create a Vite Vanilla site with pages\n\t- set up this site: https://starters.tanguay.eu/list/darkViteVanillaMenu\n\t- go to repository: https://github.com/edwardtanguay/vite-vanilla-menu\n\t\t- Create a new repository##clickthetemplate\n\t\t- create site:##thecreatsiteksas\n\t\t- git clone it and open in VSCode locally\n\t- site looks like this##theinfositeisonk\n- **set up CLI command that outputs test text**\n\t- **backend/cp.js**\n\t\t-------------------------------\n\t\tconsole.log('cli test');\n\t\t-------------------------------\n\t- `node backend/cp.js` \n\t\t- works##theclie11\n\t- **package.json**\n\t\t-------------------------------------\n\t\t\"cp\": \"node backend/cp.js\"\t\t\n\t\t-------------------------------------\n\t- works##thecliiii22\n\t- for our CLI, we will want to use helper functions from another module with the ES6 **import** command instead of the old CommonJS **require** command\n\t- so let's get this to work first with a mock function from a module called **tools**\n\t\t- **backend/tools.js**\n\t\t\t-----------------------------------------\n\t\t\texport const getTestMessage = () => {\n\t\t\t\treturn 'tools works';\n\t\t\t}\n\t\t\t-----------------------------------------\n\t\t- **cp.js**\n\t\t\t----------------------------------------\n\t\t\timport * as tools from './tools.js';\n\n\t\t\tconsole.log('cli test: ' + tools.getTestMessage());\t\t\t\n\t\t\t----------------------------------------\n\t\t- it works:##itworksiwththeijjj\n\t\t- note that the reason we can use import statements (and not just the old require statements) is because Vite has this line in the package.json by default\n\t\t\t-------------------------------------\n\t\t\t\"type\": \"module\",\n\t\t\t-------------------------------------\n\t\t- change titles to \"CLI Test\"\n- **Why not TypeScript here?**\n\t- TypeScript would be recommended at this point\n\t- but TypeScript is difficult to set up\n\t- we are no longer in the frontend where Vite takes care of TypeScript transpiling for us\n\t- but rather, we are in the backend where we have to do it ourselves\n\t- it is definitely possible, but you have to set up a number of npm scripts and config files, etc. which would be a bit much for this howto\n\t- if you want to know how to do it, see this [working example of TypeScript in a backend here](https://starters.tanguay.eu/list/viteVanillaTestingBackendFrontendTypeScript)\n\t- if you are not just doing this howto as an example, but setting up an application you will use in the long term, definitely set up TypeScript in the backend now\n- **Create static CLI**\n\t- we will first create a non-interactive CLI that accepts a page name via command line argument\n\t- read in page name and print instructions or say you are processing it\n\t- **cp.js**\n\t\t-------------------------------------------\n\t\tconst pageName = process.argv[2];\n\n\t\tif (!pageName) {\n\t\t\tconsole.log('EXAMPLE: npm run cp Reports');\n\t\t\tprocess.exit();\n\t\t} else {\n\t\t\tconsole.log(`building page \"${pageName}\"...`);\n\t\t}\t\t\n\t\t-------------------------------------------\n\t- it works:#gif#thedemocliok\n\t- there are two changes we need to make programmatically in order to create a new page in our application:\n\t\t- 1. create a `src/pages/PageNnnnnnnn.ts` file\n\t\t- 2. add two entries in `Router.ts`##twothingsforpage2\n\t- in order to do this, we need to add a library of functions to manage all the text manipulation we will have to do to our files\n\t\t- **tools.js**\n\t\t\t--------------------------------\n\t\t\timport fs from 'fs';\n\t\t\timport * as tools from './tools.js';\n\n\t\t\t/**\n\t\t\t * Creates a file with content\n\t\t\t * \n\t\t\t * tools.createFile('../logs/log.txt', 'added item');\n\t\t\t * \n\t\t\t * (file is created)\n\t\t\t */\n\t\t\texport const createFile = (pathAndFileName, content) => {\n\t\t\t\tfs.writeFileSync(pathAndFileName, content.trim());\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Adds a line to a specific point in a file\n\t\t\t * \n\t\t\t * tools.addLineInFile(`./src/main.ts`, '@@FIRSTLINE', `import { ${idCodeSnakeCase} } from './examples/${idCodeSnakeCase}';`);\n\t\t\t * tools.addLineInFile(`./src/Router.ts`, 'switch (', `case '${pageName.toLowerCase()}':\\nreturn Page${pageName}();`);\n\t\t\t * \n\t\t\t * (line is added)\n\t\t\t */\n\t\t\texport const addLineInFile = (pathAndFileName, marker, additionalLine) => {\n\t\t\t\tconst content = fs.readFileSync(pathAndFileName, { encoding: 'utf8' });\n\t\t\t\tconst lines = tools.convertStringBlockToLines(content);\n\t\t\t\tlet newLines = [];\n\t\t\t\tlet lineNumber = 1;\n\t\t\t\tfor (const line of lines) {\n\t\t\t\t\tif (lineNumber === 1 && marker === '@@FIRSTLINE') {\n\t\t\t\t\t\tnewLines.push(additionalLine);\n\t\t\t\t\t}\n\t\t\t\t\tconst newLine = line;\n\t\t\t\t\tnewLines.push(newLine);\n\t\t\t\t\tif (newLine.includes(marker)) {\n\t\t\t\t\t\tnewLines.push(additionalLine);\n\t\t\t\t\t}\n\t\t\t\t\tlineNumber++;\n\t\t\t\t}\n\t\t\t\tconst newContent = tools.convertLinesToStringBlock(newLines);\n\t\t\t\ttools.createFile(pathAndFileName, newContent);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Converts an array of strings to a string with newline characters\n\t\t\t * \n\t\t\t * const content = tools.convertLinesToStringBlock(lines);\n\t\t\t * \n\t\t\t * \"line1\\nline2\\nline3\"\n\t\t\t */\n\t\t\texport const convertLinesToStringBlock = (lines) => {\n\t\t\t\tlet r = '';\n\t\t\t\tlet index = 0;\n\t\t\t\tfor (const line of lines) {\n\t\t\t\t\tr += line;\n\t\t\t\t\tif (index != lines.length - 1) {\n\t\t\t\t\t\tr += '\\n';\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t};\n\n\n\t\t\t/**\n\t\t\t * Converts a string with newline characters to an array of strings, one per line \n\t\t\t * \n\t\t\t * const lines: string[] = tools.convertStringBlockToLines(content);\n\t\t\t * \n\t\t\t * ['line1', 'line2', 'line3']\n\t\t\t */\n\t\t\texport const convertStringBlockToLines = (stringBlock, trimLines = true) => {\n\t\t\t\tlet roughLines = [];\n\n\t\t\t\tif (tools.isEmpty(stringBlock)) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\troughLines = stringBlock.split('\\n');\n\t\t\t\tif (trimLines) {\n\t\t\t\t\troughLines = tools.trimAllLinesInLinesArray(roughLines);\n\t\t\t\t}\n\t\t\t\troughLines = tools.removeEmptyLinesFromLinesAtBeginningAndEnd(roughLines);\n\t\t\t\treturn roughLines;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Trims every string in a string array\n\t\t\t * \n\t\t\t * roughLines = ['line1  ', 'line2'];\n\t\t\t * \n\t\t\t * roughLines = tools.trimAllLinesInLinesArray(roughLines);\n\t\t\t * \n\t\t\t * ['line1','line2']\n\t\t\t */\n\t\t\texport const trimAllLinesInLinesArray = (lines) => {\n\t\t\t\tconst newLines = [];\n\t\t\t\tlines.forEach(function (line) {\n\t\t\t\t\tlet newLine = line.trim();\n\t\t\t\t\tnewLines.push(newLine);\n\t\t\t\t});\n\t\t\t\treturn newLines;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Removes blank strings from the beginning and end of a string of arrays\n\t\t\t * \n\t\t\t * roughLines = ['', 'line1', 'line2', ''];\n\t\t\t * \n\t\t\t * roughLines = tools.removeEmptyLinesFromLinesAtBeginningAndEnd(roughLines);\n\t\t\t * \n\t\t\t * ['line1','line2']\n\t\t\t */\n\t\t\texport const removeEmptyLinesFromLinesAtBeginningAndEnd = (lines) => {\n\t\t\t\tlines = tools.trimAllLinesInLinesArray(lines);\n\t\t\t\tlines = tools.removeBlankLinesFromBeginning(lines);\n\t\t\t\tlines = lines.reverse();\n\t\t\t\tlines = tools.removeBlankLinesFromBeginning(lines);\n\t\t\t\tlines = lines.reverse();\n\t\t\t\treturn lines;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Removes blank strings from the beginning of a string of arrays\n\t\t\t * \n\t\t\t * roughLines = ['', 'line1', 'line2'];\n\t\t\t * \n\t\t\t * roughLines = tools.removeBlankLinesFromBeginning(roughLines);\n\t\t\t * \n\t\t\t * ['line1','line2']\n\t\t\t */\n\t\t\texport const removeBlankLinesFromBeginning = (lines) => {\n\t\t\t\tconst newLines = [];\n\t\t\t\tlet trimmingBlanks = true;\n\t\t\t\tlines.forEach(function (line) {\n\t\t\t\t\tlet newLine = line;\n\t\t\t\t\tif (trimmingBlanks && line == \"\") {\n\t\t\t\t\t\t//skip it since it is a preceding blank item\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewLines.push(newLine);\n\t\t\t\t\t\ttrimmingBlanks = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn newLines;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Check if a string is empty, undefined, null, etc.\n\t\t\t * \n\t\t\t * if(tools.empty(text)) {\n\t\t\t * \n\t\t\t * true\n\t\t\t */\n\t\t\texport const isEmpty = (line) => {\n\t\t\t\tif (line === undefined || line === null) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tline = line.toString();\n\t\t\t\t\tif (line.trim() == '') {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Inserts a text into another text at the point where a certain marker is.\n\t\t\t * \n\t\t\t * const newLine = tools.insertStringAfterMarkerInString(line, lineMarker, textToInsert);\n\t\t\t * \n\t\t\t * newLine contains new text \n\t\t\t */\n\t\t\texport const insertStringAfterMarkerInString = (line, marker, textToInsert) => {\n\t\t\t\tconst parts = line.split(marker); \n\t\t\t\tconst firstPart = parts[0];\n\t\t\t\tconst secondPart = parts[1];\n\t\t\t\treturn firstPart + textToInsert + marker + secondPart;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Changes text in a line at the point before a unique marker.\n\t\t\t * \n\t\t\t * tools.changeLineInFile(`./src/Router.ts`, 'const pageNames =', ']', ` ,'${pageName}'`);\n\t\t\t * \n\t\t\t * line in file is changed\n\t\t\t */\n\t\t\texport const changeLineInFile = (pathAndFileName, marker, lineMarker, textToInsert) => {\n\t\t\t\tconst content = fs.readFileSync(pathAndFileName, { encoding: 'utf8' });\n\t\t\t\tconst lines = tools.convertStringBlockToLines(content);\n\t\t\t\tlet newLines = [];\n\t\t\t\tfor (const line of lines) {\n\t\t\t\t\tlet newLine = line;\n\t\t\t\t\tif (newLine.includes(marker)) {\n\t\t\t\t\t\tnewLine = tools.insertStringAfterMarkerInString(line, lineMarker, textToInsert);\n\t\t\t\t\t\tnewLines.push(newLine);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewLines.push(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst newContent = tools.convertLinesToStringBlock(newLines);\n\t\t\t\ttools.createFile(pathAndFileName, newContent);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------\n\t- create the page file\n\t\t- **cp.js**\n\t\t\t-------------------------------\n\t\t\timport * as tools from './tools.js';\n\n\t\t\tconst pageName = process.argv[2];\n\n\t\t\tif (!pageName) {\n\t\t\t\tconsole.log('EXAMPLE: npm run cp Reports');\n\t\t\t\tprocess.exit();\n\t\t\t} else {\n\n\t\t\t\t// create code file\n\t\t\t\ttools.createFile(`./src/pages/Page${pageName}.ts`, `export const Page${pageName} = () => {\n\t\t\t\treturn /*html*/\\`\n\t\t\t<div class=\"page page${pageName}\">\n\t\t\t\t<p>This is the ${pageName} page.</p>\n\t\t\t</div>\n\t\t\t\\`; \n\t\t\t}`);\n\t\t\t}\n\t\t\t-------------------------------\n\t\t- it works:#gif#showcreatingpage\n\t- now update the router so that the page is also added to the menu\n\t\t- add to **cp.js**\n\t\t\t-----------------------------------------------\n\t\t\t// add page to router\n\t\t\ttools.addLineInFile(`./src/Router.ts`, '@@FIRSTLINE', `import { Page${pageName} } from './pages/Page${pageName}';`);\n\t\t\ttools.addLineInFile(`./src/Router.ts`, 'switch (', `case '${pageName.toLowerCase()}':\\nreturn Page${pageName}();`);\n\t\t\ttools.changeLineInFile(`./src/Router.ts`, 'const pageNames =', ']', ` ,'${pageName}'`);\t\t\t\n\t\t\t-----------------------------------------------\n\t- it works:#gif#showaddingpages\n- **Add interactivity to the CLI**\n\t- we now want to change the CLI command so that if you don't specify a page, it will ask you for the page\n\t- `npm i readline-sync`\n\t- add to **cp.js**\n\t\t--------------------------------------\n\t\timport * as tools from './tools.js';\n\t\timport readlineSync from 'readline-sync';\n\n\t\tlet pageName = process.argv[2];\n\n\t\tif (!pageName) {\n\t\t\tpageName = readlineSync.question('Page name to create: ');\n\t\t\tconsole.log(`creating page \"${pageName}\"...`);\n\t\t} else {\t\t\n\t\t--------------------------------------\n\t- works:#gif#showreadlinework\n\t- now create the page after the user types in the name of th page\n\t- let's refactor this a bit\t\n\t\t- we are probably going to have more that we do with this site\n\t\t- so let's make **siteManager* which contains functions that manages the site, e.g. add pages, delete pages, change configs, etc.\n\t\t- **backend/siteManager.js**\n\t\t\t-------------------------------------------------\n\t\t\timport * as tools from './tools.js';\n\n\t\t\texport const createPage = (pageName) => {\n\n\t\t\t\t// create code file\n\t\t\t\ttools.createFile(`./src/pages/Page${pageName}.ts`, `export const Page${pageName} = () => {\n\t\t\t\treturn /*html*/\\`\n\t\t\t<div class=\"page page${pageName}\">\n\t\t\t\t<p>This is the ${pageName} page.</p>\n\t\t\t</div>\n\t\t\t\\`; \n\t\t\t}`);\n\n\t\t\t\t// add page to router\n\t\t\t\ttools.addLineInFile(`./src/Router.ts`, '@@FIRSTLINE', `import { Page${pageName} } from './pages/Page${pageName}';`);\n\t\t\t\ttools.addLineInFile(`./src/Router.ts`, 'switch (', `case '${pageName.toLowerCase()}':\\nreturn Page${pageName}();`);\n\t\t\t\ttools.changeLineInFile(`./src/Router.ts`, 'const pageNames =', ']', ` ,'${pageName}'`);\n\t\t\t};\n\t\t\t-------------------------------------------------\n\t- now the code for our create-page command is very straight-forward\n\t\t- **cp.js**\n\t\t\t--------------------------------------\n\t\t\timport readlineSync from 'readline-sync';\n\t\t\timport { createPage } from './siteManager.js';\n\n\t\t\tlet pageName = process.argv[2];\n\n\t\t\tif (!pageName) {\n\t\t\t\tpageName = readlineSync.question('Page name to create (e.g. \"About\"): ');\n\t\t\t\tcreatePage(pageName);\n\t\t\t} else {\n\t\t\t\tcreatePage(pageName)\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t- now add the ability to specify the intro line shown on the page\n\t\t- **cp.js**\n\t\t\t----------------------------------\n\t\t\tif (!pageName) {\n\t\t\t\tpageName = readlineSync.question('Page name to create (e.g. \"About\"): ');\n\t\t\t\tconst customIntroLine = readlineSync.question(`Custom intro line on page (press ENTER for default text): `);\n\t\t\t\tcreatePage(pageName, customIntroLine);\n\t\t\t} else {\n\t\t\t\tcreatePage(pageName)\n\t\t\t}\n\t\t\t----------------------------------\n\t\t- **siteManager.js**\n\t\t\t---------------------------------------\n\t\t\texport const createPage = (pageName, introLine = '') => {\n\n\t\t\t\tintroLine = introLine.trim() === '' ? `This is the ${pageName} page.` : introLine;\n\n\t\t\t\t// create code file\n\t\t\t\ttools.createFile(`./src/pages/Page${pageName}.ts`, `export const Page${pageName} = () => {\n\t\t\t\treturn /*html*/\\`\n\t\t\t<div class=\"page page${pageName}\">\n\t\t\t\t<p>${introLine}</p>\n\t\t\t</div>\n\t\t\t\\`; \n\t\t\t}`);\t\t\t\n\t\t\t---------------------------------------\n\t\t- it works:#gif#showfinalcli","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-08-16 18:27:48","systemWhoCreated":"systemUnknown"},{"id":731,"category":"JavaScript","title":"An example of when to use the array parameter in higher order functions","body":"- it is often hard to think of a use case scenario for the array parameter in higher order functions, e.g. for map():##arrayprotmap\n- one reason it's hard to think of an example when one would need the **array** parameter is that one usually has access to the original array anyway, so it makes little sense to have a copy of the array passed as a parameter##usethemainarray2\n- but the **array** parameter is necessary in this situation to get the length of an array that exists only on the fly as the chained higher-order-functions are being calculated:#gif#examplearrayinhof","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-08-23 17:35:27","systemWhoCreated":"systemUnknown"},{"id":732,"category":"MERN Stack","title":"Develop a full-stack, full-feature MERN application deployed at Backend-Render.com and Frontend-Vercel","body":"- stages of this project\n\t- get a full backend/frontend MERN stack application running locally\n\t- deploy both backend and frontend at Render.com\n\t- create a [starter site](https://starters.tanguay.eu) based on it\n\t- publish the site at flashcards.tanguay.eu as an open-source application that is used publically\n\t\t- continually improve it with new features\n- source code is here:\n\t- Backend: https://github.com/edwardtanguay/et042-mernstackapp-backend\n\t- Frontend: https://github.com/edwardtanguay/et042-mernstackapp-frontend\n- application is live here:\n\t- Render Backend (OLD -- slow spin-up times): https://et042-mernstackapp-backend.onrender.com\n\t- Cyclic Backend (NEW -- always available): https://et042-mernstackapp-backend.cyclic.app\n\t- Frontend: https://et042-mernstackapp-frontend.vercel.app\n- features\n\t- the features of this site will be **held to a minimum** for learning purposes \n\t- but all the **features are all essential** for building a full-stack MERN app \n\t\t- separate frontend and backend\n\t\t\t- frontend\n\t\t\t\t- React\n\t\t\t\t- TypeScript\n\t\t\t\t- useContext\n\t\t\t- backend\n\t\t\t\t- Node/Express\n\t\t\t\t- TypeScript\n\t\t\t\t- MongoDB\n\t\t\t\t- Compass\n\t\t- use of a database for data permanence, in our case **MongoDB Atlas**\n\t\t\t- the online database will be used for both the local and online versions\n\t\t\t- this eliminates the need to transfer data from a local database to the online database\n\t\t\t- is also easier to debug locally\n\t\t- authentication/authorization\n\t\t- programatic sending of e-mails (member signup)\n\t\t- image uploading (profile picture change)\n\t\t- online deployment at Render.com\n- this application will be a **flashcard app**\n\t- this topic makes this app:\n\t\t- (1) a **good app for learning the MERN stack**\n\t\t- (2) a **useful app** as-is which can be customized and extended for one's own purposes \n\t- **authentication**\n\t\t- we will use **username and password** for identification\n\t\t\t- passwords will be saved as hashes in the database using bcrypt\n\t\t- the signup process use **e-mail verification**\n\t\t\t- for this we will use NodeMailer or SendGrid, whichever we can get to work at Render.com\n\t\t- we will use **JWT** to assert authentication claims\n\t\t\t- to keep authentication straight-forward and basic, we will issue JWT tokens that **expire in 60 minutes**\n\t\t\t\t- if a user is on the site longer than this, they need to log back in\n\t\t\t\t- for most use cases, users will never experience being logged out\n\t\t\t\t- having an expiration time increases security of the site\n\t\t\t- our tokens will be stored in **localStorage**\n\t\t\t\t- this is **straight-forward** for learning purposes and **safe enough** for low-profile sites\n\t\t\t\t- our JWTs have expiration times so even if they continue to exist in localStorage permanently, this is not a security breach\n\t\t\t\t- XSS attacks are resource-intensive to execute and so not a practical concern on low-profile sites, particularly with short-expiration durations\n\t- **authorization**\n\t\t- I will be using an **access-group concept** for authorization\n\t\t\t- this is a concept I created myself for my Datapod project and have refined throughout the years\n\t\t\t- a unique characteristic of this approach is the **anonymousUser**\n\t\t\t\t- this is a concept based on the [Null object pattern](https://en.wikipedia.org/wiki/Null_object_pattern)\n\t\t\t\t- any user that comes to the page is immediately identified by the application as anonymousUser\n\t\t\t\t- this means that **every user is always identified as a particular user** and has the rights of the groups to which they are assigned\n\t\t\t\t- the anonymousUser in most use cases only belongs to the group **loggedOutUsers**\n\t\t\t- this authorization pattern works well to **granually assign users rights based on groups**\n\t\t- accessGroups\n\t\t\t- **loggedOutUsers**\n\t\t\t\t- are not logged in\n\t\t\t\t\t- e.g. users new to the site or members who have not logged in yet\n\t\t\t\t- can test themselves on the flashcards, but cannot mark their process\n\t\t\t\t- in menu there is a login page but no logout page\n\t\t\t- **loggedInUsers**\n\t\t\t\t- in menu there is a logout page but no login page\n\t\t\t- **members**\n\t\t\t\t- have identified themselves with username/password\n\t\t\t\t- have their own profile page where they can change their information\n\t\t\t\t- see extra member-specific information on the welcome page\n\t\t\t\t- can record their progress when testing themselves on flashcards, e.g. mark if they have learned it or not\n\t\t\t\t- can view a Members page which shows all members sorted by how many flashcards they have learned\n\t\t\t- **contributors**\n\t\t\t\t- can add, edit, delete and delete flashcards\n\t\t\t- **administrators**\n\t\t\t\t- can add, edit, delete and delete flashcards\n\t\t\t\t- can add, edit, delete and delete users\n\t- **responsive** \n\t\t- application can be used on all computer screens as well as all common smart phones and tablets\n\t- **sign-up with email verification**\n\t- **image upload for profile picture**\n\t- **frontend and backend in TypeScript**\n\t- **menu**\n\t\t- Welcome, Flashcards, Members, Login, Logout\n- **(1) create local Node/Express backend in JavaScript**\n\t- set up local project structure, the name for my project is `et042-mernstackapp`, choose your own name\n\t\t- create two directories in a project directory:\n\t\t\t- /et042-mernstackapp\n\t\t\t\t- /et042-mernstackapp-backend\n\t\t\t\t- /et042-mernstackapp-frontend\n\t- make the simplest Node/Express server that servers \"testing\" at router \"/\"\n\t\t- create npm project\n\t\t\t- `npm init -y`\n\t\t- create local git repository\n\t\t\t- `git init -b dev`\n\t\t\t- **.gitignore**\n\t\t\t\t---------------------------------------\n\t\t\t\tnode_modules\n\t\t\t\tdist\n\t\t\t\t---------------------------------------\n\t\t\t- make first local commit##theinitcommidijdd\n\t\t- install Express\n\t\t\t- `npm i express`\n\t\t- **src/index.js**\n\t\t\t---------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\t\t\tconst port = 3601;\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.send('testing');\n\t\t\t});\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`listening on post http://localhost:${port}`);\n\t\t\t});\n\t\t\t---------------------------------\n\t\t- create npm command to start backend\n\t\t\t- **package.json**\n\t\t\t\t-------------------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"node ./src/index.js\"\n\t\t\t\t},\n\t\t\t\t-------------------------------------------\n\t\t- enable ES6 modules\n\t\t\t- **package.json**\n\t\t\t\t-------------------------------------------\n\t\t\t\t\"type\": \"module\",\n\t\t\t\t-------------------------------------------\n\t\t- start the API with `npm run dev`##thefirsttesting\n- **(2) convert Node/Express backend to TypeScript**\n\t- because we don't have a framework like Vite in the backend, we have to set up JavaScript compiling ourselves\n\t- install TypeScript as a dev dependency\n\t\t- `npm i -D typescript`\n\t- install nodemon as a dev dependency\n\t\t- nodemon is a tool that will watch our TypeScript files and each time they are changes, we will\n\t\t\t- (1) compile our TypeScript files into JavaScript files which can be run by Node\n\t\t\t- (2) restart Node so we see our changes \n\t\t- `npm i -D nodemon`\n\t- change `index.js` to `index.ts`\n\t\t- you will notice that there are ellipses markers in the code##thelittledots\n\t\t- install the @types for Express so that these no longer appear\n\t\t\t- `npm i -D @types/express`\n\t\t- now add types for `req` and `res`\n\t\t\t-------------------------------------\n\t\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\t\tres.send('testing TypeScript');\n\t\t\t});\n\t\t\t-------------------------------------\n\t\t- now you can add types to any Express objects, e.g. `req` and `res`##stsendthe\n\t- set up TypeScript config file\n\t\t- **tsconfig.json**\n\t\t\t--------------------------------------------------\n\t\t\t{\n\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\"module\": \"NodeNext\",\n\t\t\t\t\t\"moduleResolution\": \"NodeNext\",\n\t\t\t\t\t\"target\": \"ES2020\",\n\t\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\t\"outDir\": \"dist\",\n\t\t\t\t},\n\t\t\t\t\"include\": [\"src/**/*\"]\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t\t- edit the **package.json** file so that nodemon watches TypeScript files and recompiles them to JavaScript whenever they change\n\t\t\t-------------------------------------------------------------\n\t\t\t\"nodemonConfig\": {\n\t\t\t\t\"watch\": [\n\t\t\t\t\t\"src\"\n\t\t\t\t],\n\t\t\t\t\"ext\": \"ts\",\n\t\t\t\t\"exec\": \"npm run build && node dist/index.js\"\n\t\t\t},\t\t\t\t\t\n\t\t\t-------------------------------------------------------------\n\t\t- now in **package.json** have `npm run dev` start nodemon, and have build run the TypeScript compiler, note that `npm run build` will create transpiled JavaScript files in the `dist` directory\n\t\t\t------------------------------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"nodemon\",\n\t\t\t\t\"build\": \"tsc\"\n\t\t\t},\t\t\t\t\t\n\t\t\t------------------------------------------------------------\n\t- the backend API is now running on TypeScript##thetypescriptstste\n\t- note that when you change any .ts file, nodemon will compile your typescript files and restart Node\n\t\t- the next hit to the API route will reflect the changes#gif#thewatchtypes\n- **(3) Add realistic data (an array of flashcard items) and test with browser, Rest Client and Postman**\n\t- at this point\n\t- **src/model.ts**\n\t\t-----------------------------------------------------\n\t\texport const getFlashcards = () => {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\tcategory: \"git\",\n\t\t\t\t\tfront: \"change GitHub email\",\n\t\t\t\t\tback: \"git config --global user.email \\\"hans@nnn.com\\\"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 2,\n\t\t\t\t\tcategory: \"javascript\",\n\t\t\t\t\tfront: \"count how many items in an array have a property of certain value\",\n\t\t\t\t\tback: \"const numberSelected = this.categories.filter(item => item.selected).length\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 3,\n\t\t\t\t\tcategory: \"html\",\n\t\t\t\t\tfront: \"create a hyperlink\",\n\t\t\t\t\tback: \"<a href=\\\"https://www.example.com\\\">Click here</a>\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 4,\n\t\t\t\t\tcategory: \"css\",\n\t\t\t\t\tfront: \"center an element horizontally\",\n\t\t\t\t\tback: \"margin: 0 auto;\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 5,\n\t\t\t\t\tcategory: \"python\",\n\t\t\t\t\tfront: \"open and read a file\",\n\t\t\t\t\tback: \"with open('file.txt', 'r') as file:\\n    content = file.read()\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 6,\n\t\t\t\t\tcategory: \"javascript\",\n\t\t\t\t\tfront: \"remove an item from an array\",\n\t\t\t\t\tback: \"const index = array.indexOf(item);\\nif (index > -1) array.splice(index, 1);\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 7,\n\t\t\t\t\tcategory: \"sql\",\n\t\t\t\t\tfront: \"retrieve records from a database\",\n\t\t\t\t\tback: \"SELECT * FROM tableName WHERE condition;\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 8,\n\t\t\t\t\tcategory: \"javascript\",\n\t\t\t\t\tfront: \"check if a variable is an array\",\n\t\t\t\t\tback: \"Array.isArray(variable)\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 9,\n\t\t\t\t\tcategory: \"sql\",\n\t\t\t\t\tfront: \"update data in a database\",\n\t\t\t\t\tback: \"UPDATE tableName SET column1 = value1 WHERE condition;\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 10,\n\t\t\t\t\tcategory: \"javascript\",\n\t\t\t\t\tfront: \"use map() to transform an array\",\n\t\t\t\t\tback: \"const newArray = array.map(item => item * 2);\"\n\t\t\t\t}\n\t\t\t];\n\t\t}\t\t\t\t\n\t\t-----------------------------------------------------\n\t- in **index.ts**, create a new route for flashcards\n\t\t--------------------------------------------\n\t\timport { getFlashcards } from './model.js';\n\n\t\tapp.get('/flashcards', (req: express.Request, res: express.Response) => {\n\t\t\tres.json(getFlashcards());\n\t\t});\t\t\t\t\n\t\t--------------------------------------------\n\t- update the root route in **index.ts** so that it shows a documentation of the API\n\t\t------------------------------------------\n\t\tapp.get('/', (req: express.Request, res: express.Response) => {\n\t\t\tres.send(`\n\t\t<h1>Test API</h1>\t\n\t\t<ul>\n\t\t\t<li><a href=\"/flashcards\">flashcards</a></li>\n\t\t</ul>\n\t\t\t`);\n\t\t});\t\t\t\t\n\t\t------------------------------------------\n\t- test both routes in the **browser**##thetestapitstsji\n\t- now test with the **REST Client** extension\n\t\t- install extension##theresclient\n\t\t- **test.rest**\n\t\t\t---------------------------------------\n\t\t\t@url = http://localhost:3601\n\n\t\t\t### ROOT\n\t\t\t{{url}}\n\n\t\t\t### FLASHCARDS\n\t\t\t{{url}}/flashcards\n\t\t\t---------------------------------------\n\t\t- you can now test your routes by clicking on links created by REST Client#gif#testrestisin\n\t- now test with **Postman**\n\t\t- install [Postman](https://www.postman.com/downloads)\n\t\t- test the root route:##postman111\n\t\t- test the flashcards route:##testpostman222\n- **(4) Create frontend project that reads flashcards from the backend and displays them in the frontend website**\n\t- create Vite React site\n\t\t- in terminal, go to `et042-mernstackapp\\et042-mernstackapp-frontend`\n\t\t- `npm create vite@latest .`##createreatcoksk\n\t- open VSCode in the newly created React project\n\t\t- `code .`\n\t- set up and start basic Vite React site\n\t\t- open VSCode terminal\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- looks like this:##thebasicreactvite\n\t- set up Git repository\n\t\t- open new terminal window in VSCode\n\t\t- `git init -b dev`\n\t\t- make initial commit\n\t- minimize site\t\t\t\t\n\t\t- **index.html**\n\t\t\t---------------------------------------\n\t\t\t<title>Flashcard Site</title>\n\t\t\t---------------------------------------\n\t\t- **assets** directory - delete\n\t\t- **App.css** - clear content\n\t\t- **index.css** - clear content\n\t\t- **main.tsx** - remove `<React.StrictMode>` (don't need this testing feature, and it causes problems later)\n\t\t- **App.tsx**\n\t\t\t------------------------------------------\n\t\t\timport './App.css';\n\n\t\t\tfunction App() {\n\t\t\t  return (\n\t\t\t\t<div>\n\t\t\t\t  <h1>Flashcard Site</h1>\n\t\t\t\t  <p>Welcome to this site.</p>\n\t\t\t\t</div>\n\t\t\t  )\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\t\t\n\t\t\t------------------------------------------\n\t\t- minimized site looks like this##theminsitevaerif\n\t- give site minimal styling\n\t\t- install Sass\n\t\t\t- `npm i -D sass`\n\t\t\t- rename extensions of App.css and index.css and their references to `.scss`\n\t\t- **index.scss**\n\t\t\t------------------------------------------\n\t\t\t* {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\t\t\t\t\t\n\t\t\t------------------------------------------\n\t\t- all styles should be reset##shouldreset\n\t\t- **App.scss**\n\t\t\t---------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #444;\n\t\t\t\tcolor: #ddd;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tfont-family: sans-serif;\n\n\t\t\t\th1 {\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t}\n\t\t\t}\t\t\t\t\t\n\t\t\t---------------------------------------\n\t\t- site is now minimally styled##styledmin\n\t- display flashcards from backend on the main page\n\t\t- install axios\n\t\t\t- `npm i axios`\n\t\t- **App.tsx**\n\t\t\t---------------------------------------\n\t\t\timport { useState, useEffect } from 'react';\n\t\t\timport axios from 'axios';\n\t\t\timport './App.scss';\n\n\t\t\tconst backendUrl = 'http://localhost:3601';\n\n\t\t\tfunction App() {\n\t\t\t\tconst [flashcards, setFlashcards] = useState([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst _flashcards = (await axios.get(`${backendUrl}/flashcards`)).data;\n\t\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>Flashcard Site</h1>\n\t\t\t\t\t\t<p>There are {flashcards.length} flashcards.</p>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\texport default App;\t\t\t\t\t\n\t\t\t---------------------------------------\n\t\t- **PROBLEM**: you will notice you get a **CORS error**##noticecores\n\t\t\t- **SOLUTION**: set up CORS with default values on the backend\n\t\t\t\t- install cors\n\t\t\t\t\t- `npm i cors`\n\t\t\t\t\t- `npm i -D @types/cors` (for TypeScript)\n\t\t\t\t- add cors lines to **index.ts**\n\t\t\t\t\t----------------------------------------\n\t\t\t\t\timport express from 'express';\n\t\t\t\t\timport { getFlashcards } from './model.js';\n\t\t\t\t\timport cors from 'cors';\n\n\t\t\t\t\tconst app = express();\n\t\t\t\t\tapp.use(cors());\n\t\t\t\t\tconst port = 3601;\n\t\t\t\t\t----------------------------------------\n\t\t\t\t- reload frontend:##getsnumbflash\n\t\t- show the flashcards\n\t\t\t- **App.tsx**\n\t\t\t\t------------------------------------------\n\t\t\t\t<p>There are {flashcards.length} flashcards.</p>\n\t\t\t\t{flashcards.map(flashcard => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"flashcard\">\n\t\t\t\t\t\t\t<div className=\"front\">{flashcard.front}</div>\n\t\t\t\t\t\t\t<div className=\"back\">{flashcard.back}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\t\t\t\t\t\t\n\t\t\t\t------------------------------------------\n\t\t\t- **App.scss**\n\t\t\t\t-------------------------------------------\n\t\t\t\tdiv.flashcard {\n\t\t\t\t\tbackground-color: #222;\n\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\n\t\t\t\t\tdiv.front {\n\t\t\t\t\t\tcolor: rgb(207, 207, 118);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tdiv.back {\n\t\t\t\t\t\tcolor: #999;\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\tfont-family: courier;\n\t\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\t\tfont-size: .8rem;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t\t- **PROBLEM:** the site works in JavaScript, but TypeScript is showing an error since it doesn't know what structure of a \"flashcard\" object\n\t\t\t\t- note that while you have TypeScript errors, your project run the browser locally\n\t\t\t\t\t- but it will not compile (`npm run build`) and so cannot be deployed until you resolve the TypeScript errors\n\t\t\t\t- **SOLUTION:** create an interface for flashcards\n\t\t\t\t\t- **src/interfaces.ts**\n\t\t\t\t\t\t--------------------------------------------------\n\t\t\t\t\t\texport interface IFlashcard {\n\t\t\t\t\t\t\tid: number;\n\t\t\t\t\t\t\tcategory: string;\n\t\t\t\t\t\t\tfront: string;\n\t\t\t\t\t\t\tback: string;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t--------------------------------------------------\n\t\t\t\t\t- **App.tsx**\n\t\t\t\t\t\t--------------------------------------------------\n\t\t\t\t\t\timport { IFlashcard } from './interfaces';\n\n\n\t\t\t\t\t\tconst [flashcards, setFlashcards] = useState<IFlashcard[]>([]);\n\t\t\t\t\t\t--------------------------------------------------\n\t\t\t\t\t- note that your variable flashcard is identified as of type IFlashcard, and you get intellisense when typing properties on the variable##nowithts\n\t- the local frontend now reads data successfully from the local backend#gif#thesamesdata\n- **(5) Publish backend at Render.com**\n\t- push both backend repository to GitHub\n\t- set up account at render.com\n\t\t - sign up with Google account\n\t- create a \"web service\" and deploy it\n\t\t- New\n\t\t- Web Service\n\t\t- click Connect on your backend repository, e.g. et042-mernstackapp-backend\n\t\t- add to **package.json**\n\t\t\t-----------------------------------\n\t\t\t\"build\": \"npm install && tsc\",\n\t\t\t\"start\": \"node dist/index.js\"\t\t\t\n\t\t\t-----------------------------------\n\t\t- git push\n\t\t- fill in form\n\t\t\t- Name: `et004-render-test`\n\t\t\t- Build Command: `npm run build`\n\t\t\t- Start Command: `npm start`\n\t\t- Create Web Service\n\t\t\t- looks good:##thelooksgood2\n\t\t- site works:##thesiteapipi\n\t\t- test with Postman##tehonlipostwork\n- **(6) Publish frontend at Vercel and read data from API at Render.com**\n\t- enable app to get its backend url not from code but from the **environment variable file**\n\t\t- the environment variable file is called **.env**\n\t\t\t- locally it contains a variable for the local backend URL\n\t\t\t- at Vercel, we will enter an environment variable which will contain the URL for our Render.com backend\n\t\t- create file for environment variables \n\t\t\t- **.env**\n\t\t\t\t-------------------------------------------\n\t\t\t\tVITE_BACKEND_URL = http://localhost:3601\n\t\t\t\t-------------------------------------------\n\t\t\t- add the `.env` directory to the list of files and directories for Git to ignore\n\t\t\t\t- so that it doesn't get pushed to your GitHub repository##theenvok\n\t\t- read the backend url from the environment variable you just created\n\t\t\t- **App.tsx**\n\t\t\t\t----------------------------------------\n\t\t\t\tconst backendUrl = import.meta.env.VITE_BACKEND_URL;\n\t\t\t\t----------------------------------------\n\t\t\t- to test that this variable is being correctly read add in **App.tsx**\n\t\t\t\t------------------------------------------------------\n\t\t\t\t<h1>Flashcard Site</h1>\n\t\t\t\t<p>BACKEND URL: {import.meta.env.VITE_BACKEND_URL}</p>\n\t\t\t\t------------------------------------------------------\n\t- publish site to Vercel\n\t\t- push to GitHub\n\t\t- got to https://vercel.com\n\t\t- New > Project\n\t\t- click on the Import button for your frontend project##ontehbuttonfron\n\t\t- click on **Environment Variables** and add\n\t\t\t- key: VITE_BACKEND_URL\n\t\t\t- value: https://et042-mernstackapp-backend.onrender.com\n\t\t\t- be sure to **click Add**##andthehttpsite\n\t\t- click Deploy\n\t\t- after about 20 seconds, you should see that your online site reads data from your Render.com backend:##theshowback\n\t- test that the Vercel site is really fetching data from the Render.com site\n\t\t- delete the test message \"BACKEND URL: ...\"##deleteitok\n\t\t- in the backend's **model.ts** file, change the first item's title:##the222sdfsdf\n\t\t- view the site locally:##viewlocal\n\t\t- now view the Vercel site:##onlinenotchanged\n\t\t- now push the backend to its GitHub repository\n\t\t\t- Render.com will notice the push and start building the site\n\t\t\t- go to your Render.com dashboard and see that it is building##gotorenderdash\n\t\t\t- unfortunately, the Render.com seems to be stuck on \"in progress\"##inprogressis\n\t\t\t- after 15 minutes, it's still stuck\n\t\t\t- eventually it published, though:##showdthe333\n\t- test again with 444\n\t\t- the deployment starts immediately\n\t\t- was live without 60 seconds this time##waslivequick\n\t\t- you see that the Vercel frontend fetches data from the Render.com backend \n\t- the next morning I went to https://et042-mernstackapp-frontend.vercel.app\n\t\t- it took 16 seconds for the backend on Render.com to wake up and send data\n- **(7) Create a loading spinner for the frontend**\n\t- Note that the Render.com:\n\t\t- **free instance types will spin down with inactivity**\n\t\t\t- web services on the free instance type are **automatically spun down after 15 minutes of inactivity**\n\t\t\t- when a new request for a free service comes in, Render **spins it up again** so it can process the request\n\t\t\t- this will cause a **delay in the response of the first request** after a period of inactivity while the instance spins up\n\t\t- this is why in this section, we are going to create a loading spinner for the frontend\n\t\t\t- if your website has not been used in the last 15 minutes, then \n\t\t\t\t- when the Frontend tries to fetch data from it\n\t\t\t\t- it will take from 15-40 seconds (in my experience) to spin up and send data to the front end\n\t\t\t\t- therefore, if the full-stack app you are creating is intended to actually be used by people\n\t\t\t\t\t- you want to give them some indication that the data for the website is loading\n\t\t\t\t\t- and give them something to read/do while the data is loading\n\t\t\t\t\t- in this way, you can use the free-tier at Render.com and Vercel for more or less useful online applications at no cost\n\t\t\t- if another person accesses the site before 15 minutes after the last user accessed it\n\t\t\t\t- the spinner will appear for less than a second\n\t\t\t\t- this may cause an unpleasant flicker, which is not a positive user experience\n\t\t\t\t- therefore we will build in a default wait of 1 second in all cases\n\t\t\t\t\t- so that the user has the feeling that \"data is loading\"\n\t\t\t\t\t- see my [jobs.tanguay.eu](https://jobs.tanguay.eu) site which uses this feature as well\n\t- install and test React Icons\n\t\t- `npm i react-icons`\n\t\t- **App.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { FiLoader } from 'react-icons/fi';\t\n\n\t\t\t<FiLoader className=\"spinner\" />\t\t\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- you should see the loading spinner, but it will not be spinning yet\n\t\t\t- for that we need CSS\n\t- change the JSX so that the spinner is shown while there are no flashcards yet\n\t\t- **App.tsx**\n\t\t\t-------------------------------------------------------------\n\t\t\t<h1>Flashcard Site</h1>\n\t\t\t<p className=\"intro\">Welcome to this site. This site will enable you to test yourself on flashcards.</p>\n\t\t\t{flashcards.length === 0 ? (\n\t\t\t\t<FiLoader className=\"spinner\" />\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<p>There are {flashcards.length} flashcards.</p>\n\t\t\t\t\t{flashcards.map(flashcard => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"flashcard\" key={flashcard.id}>\n\t\t\t\t\t\t\t\t<div className=\"front\">{flashcard.front}</div>\n\t\t\t\t\t\t\t\t<div className=\"back\">{flashcard.back}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t-------------------------------------------------------------\n\t- add styling and animation\n\t\t- **App.scss**\n\t\t\t-------------------------------------------------------\n\t\t\t$header-color: rgb(221, 175, 90);\n\n\t\t\th1 {\n\t\t\t\tmargin-bottom: .5rem;\n\t\t\t\tcolor: $header-color;\n\t\t\t}\n\n\t\t\t.intro {\n\t\t\t\tmargin-bottom: 1.5rem;\n\t\t\t\tcolor: $header-color;\n\t\t\t}\n\n\t\t\t.spinner {\n\t\t\t\tfont-size: 6rem;\n\t\t\t\tmargin-left: .5rem;\n\t\t\t\tcolor: #888;\n\t\t\t\tanimation: spin infinite 2s linear;\n\t\t\t}\n\n\t\t\t@keyframes spin {\n\t\t\t\tfrom {\n\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t}\n\n\t\t\t\tto {\n\t\t\t\t\ttransform: rotate(360deg);\n\t\t\t\t}\n\t\t\t}\t\t\t\t\t\n\t\t\t-------------------------------------------------------\n\t- now if the data takes several seconds to load\n\t\t- the loading spinner will be shown during that time\n\t- **PROBLEM:** if the data is available, it will still take a fraction of a second to load (from Render.com to Vercel)\n\t\t- this will cause an unpleasant flicker of the loading spinner\n\t\t- **SOLUTION:** force a default time of one second to load in all cases\n\t\t\t- this gives the user the feeling that data is loading, whether it is 1 second or 25\n\t\t\t- to implement this solution, we merely need to wrap the data loading in a timeout callback which waits for one second before fetching the data\n\t\t\t\t- **App.tsx**\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tconst _flashcards = (await axios.get(`${backendUrl}/flashcards`)).data;\n\t\t\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t}, []);\n\t\t\t\t\t------------------------------------------------\n\t- push the frontend changes to GitHub\n\t- your online site should now work like this\n\t\t- I hadn't visited this site in over 15 minutes and it took **17 seconds to load**\n\t\t\t- showing the loading spinner the whole time\n\t\t- after that, when I reload the page, it takes only 1 second:#gif#theworkvercelspin\n- **(8) Install Tailwind**\n\t- when working with component-based JavaScript frameworks\n\t\t- Tailwind is an elegant solution to styling\n\t- we will now install Tailwind alongside Sass\n\t\t- then convert the styling from Sass that makes more sense in Tailwind (H1 and intro styling)\n\t\t- and leave the styling that makes more sense to be in Sass (the animation, etc.)\n\t- install Tailwind\n\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t- create the necessary Tailwind config files\n\t\t- `npx tailwindcss init -p`\n\t- update **tailwind.config.js**\n\t\t--------------------------------------------------\n\t\tcontent: [\n\t\t\t\"./index.html\",\n\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t],\t\t\t\n\t\t--------------------------------------------------\n\t- replace content of **index.scss** with this\n\t\t--------------------------------------\n\t\t@tailwind base;\n\t\t@tailwind components;\n\t\t@tailwind utilities;\t\t\t\t\n\t\t--------------------------------------\n\t- reduce styles to one file: **index.scss**\n\t\t- I find working with a combination of **Tailwind and Sass** to be very effective\n\t\t\t- each has its advantages:\n\t\t\t\t- **Tailwind**: styling components inline on the spot \n\t\t\t\t\t- instead of having to create class names and then the classes in other files\n\t\t\t\t- **Sass**: animations, mixins, global styles and oversights in Tailwind such as the lack of `font-variant: small-caps`\n\t\t- so in small to medium-size applications, having one .scss file is enough\n\t\t\t- most of your styles in inline throughout your application anyway\n\t\t\t- and this way you have all extra styling in one place, whether Tailwind @apply styles or Sass styling\n\t\t- copy contents into **index.scss** and delete **App.scss**\n\t- your site should now look like this:##sitwithtailwi\n\t- now let's convert our styling into Tailwind as much as makes sense\n\t\t- delete the H1 and .intro styles\n\t\t- site looks like this##sitenoh1\n\t\t- now implement these styles with Tailwind in **App.tsx**\n\t\t\t----------------------------------------\n\t\t\t<h1 className=\"text-orange-400 text-4xl\">Flashcard Site</h1>\n\t\t\t<p className=\"text-orange-300 mb-4\">Welcome to this site. This site will enable you to test yourself on flashcards.</p>\t\t\t\t\t\n\t\t\t----------------------------------------\t\t\t\t\t\n\t\t- make sure you have the **Tailwind CSS IntelliSense** extension installed\n\t\t\t- so that you get this intellisense as you write Tailwind:##tailwingextenss\n\t\t- in **index.scss** delete all body styles\n\t\t- site should look like this:##sitewoutibody\n\t\t- add body styles with Tailwind\n\t\t\t- notice that you can also use Tailwind in the **index.html** file, because of this setting:##becauseihindl\n\t\t\t\t- be sure to use **class** and not **className**\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\t<body class=\"bg-slate-600 p-6 text-slate-300\">\n\t\t\t\t\t-----------------------------------------------\n\t\t- site now looks like this:##sitewithtttailw\n\t\t- in **index.scss**, delete all flashcard styles\n\t\t- site now looks like this##withnoflash\n\t\t- **App.tsx** add Tailwind styles\n\t\t\t---------------------------------------------\n\t\t\t<>\n\t\t\t\t<p className=\"text-xl\">There are {flashcards.length} flashcards.</p>\n\t\t\t\t{flashcards.map(flashcard => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"bg-slate-900 p-3 mt-3 rounded-md\" key={flashcard.id}>\n\t\t\t\t\t\t\t<div className=\"text-yellow-200 text-xl\">{flashcard.front}</div>\n\t\t\t\t\t\t\t<div className=\"font-mono\">{flashcard.back}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</>\t\t\t\t\t\n\t\t\t---------------------------------------------\n\t- site now looks like this:##withtailwind33\t\n- **(9) Implement React Router 6.4 and useContext**\n\t- we now want to implement a router which can switch between various pages\n\t\t- we will use useContext instead of the loading functionality of React Router 6.4\t\t\t\n\t\t- note that you can also use the data loading features of React Router 6.4 to load data\n\t\t\t- but useContext is a more standard React implementation of a centralized state store for a React application\n\t- these will be our pages\n\t\t- Welcome - general info about the site\n\t\t- Tech - will show the tech flashcards loaded from JavaScript object\n\t\t- German Nouns - will show german noun flashcards loaded from async API (implemented in a future step)\n\t- install React Router\n\t\t- `npm i react-router-dom`\n\t- in **main.tsx** we will set up the simplest example of **createBrowserRouter**, and then expand on it\n\t\t-------------------------------------------------------------\n\t\timport ReactDOM from 'react-dom/client';\n\t\timport './index.scss';\n\t\timport { createBrowserRouter, RouterProvider, Outlet, NavLink, Navigate } from 'react-router-dom';\n\n\t\tconst SiteHeader = () => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<nav className=\"flex gap-4\">\n\t\t\t\t\t\t\t<NavLink to=\"welcome\">Welcome</NavLink>\n\t\t\t\t\t\t\t<NavLink to=\"tech\">Tech</NavLink>\n\t\t\t\t\t\t\t<NavLink to=\"german-nouns\">German Nouns</NavLink>\n\t\t\t\t\t\t</nav>\n\t\t\t\t\t</header>\n\t\t\t\t\t<hr className=\"mt-2 mb-2\" />\n\t\t\t\t\t<Outlet />\n\t\t\t\t</>\n\t\t\t)\n\t\t};\n\n\t\tconst router = createBrowserRouter([\n\t\t\t{\n\t\t\t\tpath: \"/\",\n\t\t\t\telement: <SiteHeader />,\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: \"/welcome\",\n\t\t\t\t\t\telement: <div>welcome page</div>\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: \"/tech\",\n\t\t\t\t\t\telement: <div>tech page</div>\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: \"/german-nouns\",\n\t\t\t\t\t\telement: <div>German nouns page</div>\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tindex: true,\n\t\t\t\t\t\telement: <Navigate to=\"/welcome\" replace />\n\t\t\t\t\t}\n\t\t\t\t]\n\n\t\t\t}\n\t\t])\n\n\t\tReactDOM.createRoot(document.getElementById('root')!).render(\n\t\t\t<RouterProvider router={router} />\n\t\t)\n\t\t-------------------------------------------------------------\n\t- site should work like this:#gif#thethreelmenuok\n\t- now we will import and load the header and page components\n\t\t- put SiteHeader in its own component\n\t\t\t- **components/SiteHeader.tsx** \n\t\t\t\t---------------------------------------------------\n\t\t\t\timport { NavLink, Outlet } from \"react-router-dom\";\n\n\t\t\t\texport const SiteHeader = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t<nav className=\"flex gap-4\">\n\t\t\t\t\t\t\t\t\t<NavLink to=\"welcome\">Welcome</NavLink>\n\t\t\t\t\t\t\t\t\t<NavLink to=\"tech\">Tech</NavLink>\n\t\t\t\t\t\t\t\t\t<NavLink to=\"german-nouns\">German Nouns</NavLink>\n\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t<hr className=\"mt-2 mb-2\" />\n\t\t\t\t\t\t\t<Outlet />\n\t\t\t\t\t\t</>\n\t\t\t\t\t)\n\t\t\t\t};\n\t\t\t\t---------------------------------------------------\n\t\t- in **/routes**, make Welcome Page component, **routes/PageWelcome.tsx**\n\t\t\t-----------------------------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the welcome page.</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------------\n\t\t- make other two pages in same way\n\t\t- **main.tsx** - load the route components\n\t\t\t----------------------------------------------------\n\t\t\tconst router = createBrowserRouter([\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\telement: <SiteHeader />,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/welcome\",\n\t\t\t\t\t\t\telement: <PageWelcome />\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/tech\",\n\t\t\t\t\t\t\telement: <PageTech />\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/german-nouns\",\n\t\t\t\t\t\t\telement: <PageGermanNouns />\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindex: true,\n\t\t\t\t\t\t\telement: <Navigate to=\"/welcome\" replace />\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\n\t\t\t\t}\n\t\t\t]);\n\t\t\t----------------------------------------------------\n\t\t- replace the original layout and data loading from the App.tsx page\n\t\t\t- **SiteHeader.tsx**\n\t\t\t\t-------------------------------------------------\n\t\t\t\t<h1 className=\"text-orange-400 text-4xl\">Flashcard Site</h1>\n\t\t\t\t<p className=\"text-orange-300 mb-4\">This site enables you to create and test yourself on flashcards.</p>\t\t\t\t\n\t\t\t\t-------------------------------------------------\n\t\t\t- now copy over the data loading code for the tech site\n\t\t\t\t- **PageTech.tsx**\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\t\timport axios from 'axios';\n\t\t\t\t\timport { IFlashcard } from '../interfaces';\n\t\t\t\t\timport { FiLoader } from 'react-icons/fi';\n\n\t\t\t\t\tconst backendUrl = import.meta.env.VITE_BACKEND_URL;\n\n\t\t\t\t\texport const PageTech = () => {\n\t\t\t\t\t\tconst [flashcards, setFlashcards] = useState<IFlashcard[]>([]);\n\n\t\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\t\tconst _flashcards = (await axios.get(`${backendUrl}/flashcards`)).data;\n\t\t\t\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t}, []);\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{flashcards.length === 0 ? (\n\t\t\t\t\t\t\t\t\t<FiLoader className=\"spinner\" />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<p className=\"text-xl\">There are {flashcards.length} flashcards.</p>\n\t\t\t\t\t\t\t\t\t\t{flashcards.map(flashcard => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"bg-slate-900 p-3 mt-3 rounded-md\" key={flashcard.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-yellow-200 text-xl\">{flashcard.front}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"font-mono\">{flashcard.back}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t};\t\t\t\t\t\n\t\t\t\t\t--------------------------------------------\n\t\t- **problem**: the page loads each time one navigates to it##gif##navigateloadeach\n\t\t- **solution**: add useContext which loads the data once when the application loads\n\t\t\t- first set up simplest working **test version** of useContext\n\t\t\t\t- **AppContext.tsx**\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\timport { createContext } from 'react';\n\n\t\t\t\t\tinterface IAppContext {\n\t\t\t\t\t\ttestMessage: string;\n\t\t\t\t\t}\n\n\t\t\t\t\tinterface IAppProvider {\n\t\t\t\t\t\tchildren: React.ReactNode;\n\t\t\t\t\t}\n\n\t\t\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\n\t\t\t\t\t\tconst testMessage = 'TEST MESSSAGE FROM APPCONTEXT';\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\t\t\ttestMessage\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t- make AppContext available to every component (**provide** it to the **app** with **AppProvider**)\n\t\t\t\t\t- **main.tsx**\n\t\t\t\t\t\t------------------------------------------------------\n\t\t\t\t\t\tReactDOM.createRoot(document.getElementById('root')!).render(\n\t\t\t\t\t\t\t<AppProvider>\n\t\t\t\t\t\t\t\t<RouterProvider router={router} />\n\t\t\t\t\t\t\t</AppProvider>\n\t\t\t\t\t\t)\t\t\t\t\t\t\n\t\t\t\t\t\t------------------------------------------------------\n\t\t\t\t- load the test message into the **pageTech.tsx** page\n\t\t\t\t\t------------------------------------------\n\t\t\t\t\timport { useState, useEffect, useContext } from 'react';\n\n\t\t\t\t\tconst { testMessage } = useContext(AppContext);\n\n\t\t\t\t\t<h2>{testMessage}</h2>\n\t\t\t\t\t------------------------------------------\n\t\t\t\t- tech page should look like this:##testpagewithtestmessage\n\t\t\t- replace **test message** with the actual **tech flashcards**\n\t\t\t\t- **AppContext.tsx**\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\timport { createContext } from 'react';\n\t\t\t\t\timport { useState, useEffect } from 'react';\n\t\t\t\t\timport { IFlashcard } from './interfaces';\n\t\t\t\t\timport axios from 'axios';\n\n\t\t\t\t\tconst backendUrl = import.meta.env.VITE_BACKEND_URL;\n\n\t\t\t\t\tinterface IAppContext {\n\t\t\t\t\t\tflashcards: IFlashcard[];\n\t\t\t\t\t}\n\n\t\t\t\t\tinterface IAppProvider {\n\t\t\t\t\t\tchildren: React.ReactNode;\n\t\t\t\t\t}\n\n\t\t\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\t\t\tconst [flashcards, setFlashcards] = useState<IFlashcard[]>([]);\n\n\t\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\t\tconst _flashcards = (await axios.get(`${backendUrl}/flashcards`)).data;\n\t\t\t\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t}, []);\n\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\t\t\tflashcards\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t- **PageTech.tsx**\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\tconst { flashcards } = useContext(AppContext);\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t- note that now the flashcards are only loaded once\n\t\t\t\t\t- and if the user lands on the Welcome page first, the tech flashcards will already have loaded#gif#gif#thealreadyloaded\n\t- **refactoring and layout improvements**\n\t\t- we have successfully implemented React Router 6.4 and useContext\n\t\t\t- data is loading on the **Tech** page\n\t\t\t\t- we will implement the data loading on the **German nouns** page in a future step\n\t\t- we are now going to some do some refactoring and layout improvements\n\t\t- **make active menu item highlighted**\n\t\t\t- **problem**: currently the user cannot look at the menu to tell which page is currently displayed \n\t\t\t- **solution**: make the current page highlighted\n\t\t\t\t- **SiteHeader.tsx**\n\t\t\t\t\t-------------------------------------------------------\n\t\t\t\t\timport { NavLink, Outlet } from \"react-router-dom\";\n\n\t\t\t\t\texport const SiteHeader = () => {\n\n\t\t\t\t\t\tconst pages = [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Welcome',\n\t\t\t\t\t\t\t\tidCode: 'welcome'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'Tech',\n\t\t\t\t\t\t\t\tidCode: 'tech'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttitle: 'German Nouns',\n\t\t\t\t\t\t\t\tidCode: 'german-nouns'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<h1 className=\"text-blue-950 text-4xl\">Flashcard Site</h1>\n\t\t\t\t\t\t\t\t\t<p className=\"text-blue-950 mb-4 italic\">This site enables you to create and test yourself on flashcards.</p>\n\t\t\t\t\t\t\t\t\t<nav className=\"flex gap-4\">\n\t\t\t\t\t\t\t\t\t\t{pages.map(page => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<NavLink to={page.idCode} className={({ isActive }) => isActive ? 'active' : ''}>{page.title}</NavLink>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</nav>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t\t<hr className=\"mt-2 mb-2\" />\n\t\t\t\t\t\t\t\t<Outlet />\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t};\t\t\t\t\t\n\t\t\t\t\t-------------------------------------------------------\n\t\t\t\t- **index.scss**\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t\tnav a.active {\n\t\t\t\t\t\tcolor: rgb(221, 221, 101);\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t- active page is now highlighted in menu#gif#nowactivehighigh\n\t\t- **improve menu layout**\n\t\t\t- **SiteHeader.tsx**\n\t\t\t\t- remove the `<hr/>` element\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t\t<nav className=\"flex gap-4 bg-slate-700 p-2 rounded w-fit min-w-[45rem] mb-4\">\n\t\t\t\t\t---------------------------------------------\n\t\t\t- **index.scss**\n\t\t\t\t- make all text the same size\n\t\t\t\t-------------------------------------------------\n\t\t\t\t@layer components {\n\t\t\t\t\tp {\n\t\t\t\t\t\t@apply text-xl;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t\t-------------------------------------------------\n\t\t\t- site looks like this:#gif#likethislayoutbet\n\t\t- **refactor page name**\n\t\t\t- the pages should be called the names of categories of flashcards, e.g. **Webdev** and **German Nouns**\n\t\t\t- refactor site so that all variables are changed from **tech** to **webdev**\n\t\t- **add a 404 page**\n\t\t\t- if the user types a route that does not exist, they should get an informative 404 page\n\t\t\t- **Page404.tsx**\n\t\t\t\t------------------------------------------------------\n\t\t\t\timport { NavLink } from \"react-router-dom\"\n\n\t\t\t\texport const Error404 = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t<h1 className=\"text-4xl text-blue-950 mb-6\">404 Page</h1>\n\t\t\t\t\t\t<p>This page does not exist. Please return to <NavLink to=\"/welcome\" className=\"text-yellow-200\">the site</NavLink>.</p>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)\n\t\t\t\t}\t\t\t\t\n\t\t\t\t------------------------------------------------------\n\t\t\t- **main.tsx** - add errorElement\n\t\t\t\t-----------------------------------------------\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\terrorElement: <Error404 />,\n\t\t\t\t\telement: <SiteHeader />,\t\t\t\t\n\t\t\t\t-----------------------------------------------\n\t\t- **add Vercel-React-Router fix**\n\t\t\t- Vercel has an issue with reloading React Router pages\n\t\t\t- the fix is to add this file to the root directory\n\t\t\t\t- **vercel.json**\n\t\t\t\t\t-----------------------------------------\n\t\t\t\t\t{\n\t\t\t\t\t\t\"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/\" }]\n\t\t\t\t\t}\t\t\t\n\t\t\t\t\t-----------------------------------------\n\t\t- site now looks like this:#gif#mernfinishmenu\n- **(10) Publish backend at Cyclic and use Cyclic from frontend instead of Render in order to avoid long spin-up times**\n\t- using the free-tier version of **Render** for the backend server is useful for learning full-stack but **not for public-facing applications**\n\t\t- the reason is that **after 15 minutes, it backend is spun down**\n\t\t- this means that the next time a user visits your frontend\n\t\t\t- your frontend sends a request to the backend at Render for data\n\t\t\t- Render then has to **spin up the Node instance**\n\t\t\t- while the Render documentation says this **takes a few seconds**\n\t\t\t- my research has shown that it can take anywhere from **19 to 55 seconds**##therenerwait\n\t\t- Render even states in their documentation, that **free instances are not recommended for production use**##evenrendersa\n\t- therefore we will try a new service for our backend called **[Cyclic](https://cyclic.sh/pricing)**\n\t\t- while this service has **no inactive delay** as Render has\n\t\t- you are only allowed to have **1 app** on the free tier\n\t\t- since at Render you can have unlimited apps (limited only by usage of hours)\n\t\t\t- **Render** is a good platform for **learning and experimenting** with numerous test backends\n\t\t\t- while **Cyclic** is good backend service that is consistently fast, responsive and **can be used to serve data to a public-facing frontend**##cyclicfreefor\n\t- get account at Cyclic\n\t\t- go to: https://cyclic.sh\n\t\t- sign up with your GitHub account\n\t- publish your app\n\t\t- click **Link Your Own** and search for the repository you want to publish##earhmern\n\t\t- (we can leave all advanced settings as their defaults)##thenewssssetin\t\n\t\t- just click the button **Connect Cyclic**\n\t\t- your app should be live within about **20 seconds**##thesuccesssecon\n\t\t- click on the link and you will see your backend##seethebbback\n\t\t- change the random URL name to the name of your directory: **et042-mernstackapp-backend**\n\t\t\t- click **Cyclic**\n\t\t\t- then click on the **settings icon** of your app:##theseettt\n\t\t\t- click **Environments**##theenvivenv\n\t\t\t- enter your project name and click **Save Changes**##customdommdom\n\t\t\t- click on the new link and you will see your backend under your new URL##thenewurl\n\t- now change your frontend so that it reads the Cyclic backend instead of the Render backend\n\t\t- go to [Vercel](https://vercel.com/dashboard)\n\t\t- click on your frontend app##tehsapptoclick\n\t\t- click **Settings** and **Environment Variables**##clicksettngenv\n\t\t- edit your backend URL variable##editenvurl\n\t\t- replace the Render URL with the Cyclic URL and click **Save**##editenvandsave\n\t\t- in order for the change of environmental variable to take place, you have to redepoy the app\n\t\t- click **Deployments**, edit the last deployment, and choose **Redploy**##therepldeploy\n\t\t- the site should load immediately, but with the mock one second wait\n\t\t- let's take that mock wait out now:##talethewait\n\t\t- push and publish to Vercel\n\t\t- the online frontend now loads and displays the data from the backend immediately\n\t\t\t- but since it takes a half second, there is splite second where you see the flicker of the spinner:#gif#withbitoffli\n\t\t- remove this flicker with a CSS animation that fades the screen in on page load\n\t\t\t- **index.css**\n\t\t\t\t-------------------------------------------\n\t\t\t\tbody {\n\t\t\t\t\tanimation: fadein .5s ease-in;\n\t\t\t\t}\n\n\t\t\t\t@keyframes fadein {\n\t\t\t\t\tfrom {\n\t\t\t\t\t\topacity: 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tto {\n\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t-------------------------------------------\n\t\t\t- I had a white flash in Firefox on page load, the solution was to add a background color of the same site color in **index.html**\n\t\t\t\t--------------------------------------------------\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tbackground-color: #475569;\n\t\t\t\t\t}\n\t\t\t\t</style>\t\t\t\t\n\t\t\t\t--------------------------------------------------\n\t\t- push and publish to Vercel\n\t\t- look at the online site, you should see a fade-in instead of a flicker:#gif#nomoreflicker\n- **(11) Refactor webdev flashcards into components and make interactive (open/close)**\n\t- DOING...\n- **NEXT STEPS...**\n\t- **(12) In backend create /germannouns route which fetchs data from API and display on frontend**\n\t- (EXTRA) Create starter site: Full-stack application for read-only data using React-Vercel and Node-Express-Render\n\t- (FORAY): Research and set up best-practice Node/Express/Mongo/Mongoose API with routes, controllers, models, error handling and testing\n\t- **(13) In backend, fetch data from MongoDB Atlas database**\n\t\t- currently the data in the backend is coming from a JavaScript object\n\t\t- we will set up a MongoDB Atlas database\n\t\t\t- copy this data into a collection in that database \n\t\t\t- then from the backend, connect to the MongoDB Atlas database and read in data and pass it to the API route\n\t\t- log into MongoDB Atlas: https://www.mongodb.com\n\t\t- click on **Browse Collections**","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-08-28 20:20:45","systemWhoCreated":"systemUnknown"},{"id":733,"category":"useReducer","title":"Create todo list with React useReducer styled with Tailwind","body":"- this code shows you how to use React's useReducer hook to create a simple todo list app\n\t- the site is a **Vite React** site\n\t- the site uses **TypeScript**\n\t\t- all interfaces\n\t- the main point of the site is to demonstrate how to use **useReducer** to store and change state\n\t\t- only useReducer is used, there is **no useState**\n\t- all code is in one file (App.tsx) including the reducer and all TypeScript interfces\n\t\t- so this is a good **academic exercise**\n\t\t- useReducer code is kept as simple as possible\n\t- the site is styled with **Tailwind** and **React Icons**\n- code is here: \n\t- https://github.com/edwardtanguay/et033-reducer-todo-list\n- live site is here:\n\t- https://et033-reducer-todo-list.vercel.app\n- site works like this:#gif#reducersiteworksdemo\t\n- **App.tsx**\n\t--------------------------------------------------------------\n\timport { useReducer } from 'react';\n\timport { BsTrash3Fill } from 'react-icons/bs';\n\timport { BsPencilFill } from 'react-icons/bs';\n\timport { GiCancel } from 'react-icons/gi';\n\timport { BiSolidSave } from 'react-icons/bi';\n\n\timport './App.scss';\n\n\tinterface ITodo {\n\t\ttext: string;\n\t\tmode: string;\n\t\toriginalEditText: string;\n\t}\n\n\tinterface IState {\n\t\ttodos: ITodo[];\n\t\tnewTodoText: string;\n\t}\n\n\tinterface IChangeEditing {\n\t\tindex: number;\n\t\ttext: string;\n\t}\n\n\tinterface IAction {\n\t\ttype: string;\n\t\tpayload: number | string | ITodo | IChangeEditing;\n\t}\n\n\tconst initialState: IState = {\n\t\ttodos: [],\n\t\tnewTodoText: ''\n\t};\n\n\tconst reducer = (state: IState, action: IAction) => {\n\t\tconst _state = { ...state };\n\t\tlet index = 0;\n\t\tswitch (action.type) {\n\t\t\tcase 'addTodo':\n\t\t\t\tif (typeof action.payload === 'string') {\n\t\t\t\t\tconst newTodoText = action.payload;\n\t\t\t\t\tconst todo: ITodo = {\n\t\t\t\t\t\ttext: newTodoText,\n\t\t\t\t\t\tmode: 'normal',\n\t\t\t\t\t\toriginalEditText: ''\n\t\t\t\t\t}\n\t\t\t\t\t_state.todos.push(todo);\n\t\t\t\t\t_state.newTodoText = '';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'deleteTodo':\n\t\t\t\tif (typeof action.payload === 'number') {\n\t\t\t\t\tindex = action.payload;\n\t\t\t\t\t_state.todos.splice(index, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'editTodo':\n\t\t\t\tif (typeof action.payload === 'number') {\n\t\t\t\t\tindex = action.payload;\n\t\t\t\t\tconst item = _state.todos[index];\n\t\t\t\t\titem.mode = 'editing';\n\t\t\t\t\titem.originalEditText = item.text;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'cancelEditing':\n\t\t\t\tif (typeof action.payload === 'number') {\n\t\t\t\t\tindex = action.payload;\n\t\t\t\t\tconst item = _state.todos[index];\n\t\t\t\t\titem.mode = 'normal';\n\t\t\t\t\titem.text = item.originalEditText;\n\t\t\t\t\titem.originalEditText = '';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'changeNewTodo':\n\t\t\t\tif (typeof action.payload === 'string') {\n\t\t\t\t\tconst newTodoText = action.payload;\n\t\t\t\t\t_state.newTodoText = newTodoText;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'changeEditing':\n\t\t\t\tif (typeof action.payload === 'object') {\n\t\t\t\t\tconst changeEditing: IChangeEditing = action.payload as IChangeEditing;\n\t\t\t\t\tconst editedTodoText = action.payload.text;\n\t\t\t\t\tconst index = changeEditing.index;\n\t\t\t\t\tconst item = _state.todos[index];\n\t\t\t\t\titem.text = editedTodoText;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'saveEditing':\n\t\t\t\tif (typeof action.payload === 'number') {\n\t\t\t\t\tindex = action.payload;\n\t\t\t\t\tconst item = _state.todos[index];\n\t\t\t\t\titem.mode = 'normal';\n\t\t\t\t\titem.originalEditText = '';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn _state;\n\t}\n\n\tfunction App() {\n\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"text-4xl mb-5\">Reducer Todo List</h1>\n\t\t\t\t<div className=\"flex gap-2 mb-5\">\n\t\t\t\t\t<input className=\"text-3xl rounded text-orange-950\" value={state.newTodoText} onChange={(e) => dispatch({ type: 'changeNewTodo', payload: e.target.value })} />{' '}\n\t\t\t\t\t<button className=\"bg-slate-800 text-slate-400 p-2 rounded\" onClick={() => dispatch({ type: 'addTodo', payload: state.newTodoText })}>Add Todo</button>\n\t\t\t\t</div>\n\t\t\t\t<h2 className=\"text-2xl mb-2\">Number of todos: {state.todos.length}</h2>\n\t\t\t\t<ul className=\"list-disc ml-4\">\n\t\t\t\t{state.todos.map((todo, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t{todo.mode === 'editing' ? (\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 text-xl\"><input value={todo.text} onChange={(e) => dispatch({ type: 'changeEditing', payload: { index, text: e.target.value } })} /> <BiSolidSave className=\"cursor-pointer text-lg mt-[.25rem]\" onClick={() => dispatch({ type: 'saveEditing', payload: index })}/><GiCancel className=\"cursor-pointer text-base mt-[.3rem]\" onClick={() => dispatch({ type: 'cancelEditing', payload: index })}/> </div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2 text-xl\"><span className=\"text-orange-950\">{todo.text}</span> <BsPencilFill className=\"cursor-pointer text-sm mt-[.4rem]\" onClick={() => dispatch({ type: 'editTodo', payload: index })}/><BsTrash3Fill className=\"cursor-pointer text-sm mt-[.4rem]\" onClick={() => dispatch({ type: 'deleteTodo', payload: index })}/> </div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t)\n\t}\n\n\texport default App\n\t--------------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-09-05 00:52:05","systemWhoCreated":"systemUnknown"},{"id":734,"category":"JavaScript classes","title":"Introduction and practical examples to JavaScript classes","body":"- final code is here:\n\t- https://github.com/edwardtanguay/et183-js-classes\n- final site looks like this:##classandfinal\n- the advantages of **JavaScript classes** and **class objects** over **object literals** in JavaScript\n\t- since ES6 in 2015, there are two kinds of objects in JavaScript\n\t\t- **object literals** - a simple object that has always been part of the language\n\t\t- **class objects** - an object instantiated from a JavaScript class (introduced with ES6)\n\t- with **object literals**, you can define methods\n\t\t- inside the method, the `this` keyword refers to the object\n\t\t\t-------------------------------------------------\n\t\t\tconst person1 = {\n\t\t\t\tfirstName: \"Lena\",\n\t\t\t\tlastName: \"Weber\",\n\t\t\t\tsayHello: function () {\n\t\t\t\t\tconsole.log(`Hello, my name is ${this.firstName} ${this.lastName}`);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconsole.log(person1);\n\t\t\t-------------------------------------------------\n\t- however, you realize after awhile that this is **not very useful in practice**\n\t\t- if you have e.g. having numerous person objects with methods that perform the same function, you have unnecessary code repetition:\n\t\t\t----------------------------------------------------\n\t\t\tconst person1 = {\n\t\t\t  firstName: \"Lena\",\n\t\t\t  lastName: \"Weber\",\n\t\t\t  sayHello: function() {\n\t\t\t\tconsole.log(`Hello, my name is ${this.firstName} ${this.lastName}`);\n\t\t\t  }\n\t\t\t};\n\n\t\t\tconst person2 = {\n\t\t\t  firstName: \"Matthias\",\n\t\t\t  lastName: \"Schneider\",\n\t\t\t  sayHello: function() {\n\t\t\t\tconsole.log(`Hello, my name is ${this.firstName} ${this.lastName}`);\n\t\t\t  }\n\t\t\t};\n\n\t\t\tperson1.sayHello(); \n\t\t\tperson2.sayHello(); \t\t\n\t\t\t----------------------------------------------------\n\t- before ES6 in 2015, this problem was solved with a concept called **prototype** in JavaScript\n\t\t- but ES6 introduced **JavaScript classes** which uses prototype to give the developer the ability to program with object-oriented patterns as one does in languages such as C#, Java, PHP, etc.\n\t\t- here is a more realistic example of the above code using **JavaScript classes**\n\t\t- we have numerous people for which we need to generate a nametag text:\n\t\t\t------------------------------------------------------------\n\t\t\tclass Person {\n\n\t\t\t\tconstructor(firstName, lastName) {\n\t\t\t\t\tthis.firstName = firstName;\n\t\t\t\t\tthis.lastName = lastName;\n\t\t\t\t}\n\n\t\t\t\tgetNametagText = () => {\n\t\t\t\t\treturn `Hello, my name is ${this.firstName} ${this.lastName}`;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst person1 = new Person('Lena', 'Weber');\n\t\t\tconst person2 = new Person('Matthias', 'Schneider');\n\n\t\t\tconsole.log(person1.getNametagText());\n\t\t\tconsole.log(person2.getNametagText());\t\t\n\t\t\t------------------------------------------------------------\n\t\t- now, the method is not in **every object** but instead in the **class** which is used to create the objects \n\t\t\t- no matter how many persons we create, we only have one method\n\t\t\t- this method can be changed in one place which effects all objects instantiated from that class\n\t- there are many more advantages of **JavaScript classes and objects** instead of plain **object literals**\n\t\t- you can use most basic features of OOP such as\n\t\t\t- inheritance\n\t\t\t- method overloading\n\t\t- you can use most [OOP patterns](https://en.wikipedia.org/wiki/Design_Patterns) which help you more easily solve complex programming tasks \n\t\t- you learn skills that enable you to more easily learn the **Angular** framework, which uses **JavaScript classes** by default\n\t\t- you learn skills which are easily transferable to OOP languages such as C#, Java and PHP\n- build a JS-DOM Vite site to demonstrate a practical use of JavaScript classes\n\t- we will print conference nametags for employees and customers\n\t- set up base site\n\t\t- `npm create vite@latest`\n\t\t- start\n\t\t- minimize\n\t\t- install [Tailwind](https://tailwindcss.com/docs/guides/vite)\n\t\t- style with Tailwind\n\t\t- `git init -b dev`\n\t\t- initial commit\n\t- display name tags\n\t\t- copy above class to **src/classes/person.ts** and conform to TypeScript\n\t\t\t-------------------------------------\n\t\t\texport class Person {\n\n\t\t\t\tprivate _firstName: string = '';\n\t\t\t\tprivate _lastName: string = '';\n\n\t\t\t\tconstructor(firstName: string, lastName: string) {\n\t\t\t\t\tthis._firstName = firstName;\n\t\t\t\t\tthis._lastName = lastName;\n\t\t\t\t}\n\n\t\t\t\tgetNametagText = () => {\n\t\t\t\t\treturn `Hello, my name is ${this._firstName} ${this._lastName}`;\n\t\t\t\t};\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------\n\t\t- **main.ts**\n\t\t\t-------------------------------------------------------\n\t\t\timport { Person } from './classes/person';\n\t\t\timport './style.css';\n\n\t\t\tconst person1 = new Person('Lena', 'Weber');\n\t\t\tconst person2 = new Person('Matthias', 'Schneider');\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t<div>\n\t\t\t\t<h1 class=\"text-3xl mb-4\">Conference Preparation Site</h1>\n\n\t\t\t\t<h2 class=\"text-2xl mb-3\">Nametags</h2>\n\n\t\t\t\t<div>${person1.getNametagText()}</div>\n\t\t\t\t<div>${person2.getNametagText()}</div>\n\t\t\t</div>\n\t\t\t`;\t\t\t\n\t\t\t-------------------------------------------------------\n\t\t- site should look like this:##thesitewithclassand\n\t- make name tags for customers and employees\n\t\t- instantiate each person as what they are, customer or employee\n\t\t\t- **customer.ts**\n\t\t\t\t--------------------------------------------------\n\t\t\t\timport { Person } from \"./person\";\n\n\t\t\t\texport class Customer extends Person {\n\n\t\t\t\t}\n\t\t\t\t--------------------------------------------------\n\t\t\t- **employee.ts**\n\t\t\t\t--------------------------------------------------\n\t\t\t\timport { Person } from \"./person\";\n\n\t\t\t\texport class Employee extends Person {\n\n\t\t\t\t}\n\t\t\t\t--------------------------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\tconst person1 = new Customer('Lena', 'Weber');\n\t\t\t\tconst person2 = new Employee('Matthias', 'Schneider');\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- note that in main.ts we interface only with Customer and Employee, but site looks the same:##thesitewithclassand\n\t\t- now display them as who they are, customer or employee\n\t\t\t- to do this most efficiently, we need to apply some OOP features\n\t\t\t- **person.ts**\n\t\t\t\t-------------------------------------\n\t\t\t\tprotected _kind: string = '';\n\n\t\t\t\tgetNametagText = () => {\n\t\t\t\t\treturn `Hello, my name is ${this._firstName} ${this._lastName} (${this._kind})`;\n\t\t\t\t};\n\t\t\t\t-------------------------------------\n\t\t\t- **customer.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\tconstructor(firstName: string, lastName: string) {\n\t\t\t\t\tsuper(firstName, lastName);\n\t\t\t\t\tthis._kind = 'customer';\n\t\t\t\t}\n\t\t\t\t-----------------------------------------\n\t\t\t- **employee.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\tconstructor(firstName: string, lastName: string) {\n\t\t\t\t\tsuper(firstName, lastName);\n\t\t\t\t\tthis._kind = 'employee';\n\t\t\t\t}\n\t\t\t\t-----------------------------------------\n\t\t\t- site should look like this:##thesitewithcusemp\n\t\t- now lets make on the site both show a list of attendees and their name tags\n\t\t\t- change layout##thechanglayoulist\n\t\t\t- add and change methods in **person.ts**\n\t\t\t\t-------------------------------------------------------\n\t\t\t\tgetFullName = () => {\n\t\t\t\t\treturn `${this._firstName} ${this._lastName}`;\n\t\t\t\t}\n\n\t\t\t\tgetNametagText = () => {\n\t\t\t\t\treturn `Hello, my name is ${this.getFullName()} (${this._kind})`;\n\t\t\t\t};\n\n\t\t\t\tgetNameTagHtml = () => {\n\t\t\t\t\treturn /*html*/ `\n\t\t\t\t\t\t<div class=\"bg-slate-700 w-[15rem] flex flex-col items-center p-3 mb-3\">\n\t\t\t\t\t\t\t<div class=\"text-orange-400 text-xl\">${this.getFullName()}</div>\n\t\t\t\t\t\t\t<div>${this._kind}</div>\n\t\t\t\t\t\t</div>\t\n\t\t\t\t\t`;\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t-------------------------------------------------------\n\t\t\t- display in **main.ts**\n\t\t\t\t---------------------------------------------------\n\t\t\t\t<div>\n\t\t\t\t\t<h1 class=\"text-3xl text-gray-900\">Conference Preparation Site</h1>\n\n\t\t\t\t\t<h2 class=\"text-2xl mt-3 mb-2 text-yellow-300\">Attendance List</h2>\n\t\t\t\t\t<div>${person1.getNametagText()}</div>\n\t\t\t\t\t<div>${person2.getNametagText()}</div>\n\n\t\t\t\t\t<h2 class=\"text-2xl mt-3 mb-2 text-yellow-300\">Nametags</h2>\n\t\t\t\t\t<div>${person1.getNameTagHtml()}</div>\n\t\t\t\t\t<div>${person2.getNameTagHtml()}</div>\n\t\t\t\t</div>\n\t\t\t\t---------------------------------------------------\n\t\t\t- site looks like this:##thewithnamentagas\n\t\t- add more people\n\t\t\t- we now want to add more people\n\t\t\t- therefore, of course we want to import this from a data source\n\t\t\t- **persons.json**\n\t\t\t\t---------------------------------------------------------\n\t\t\t\t[\n\t\t\t\t  {\n\t\t\t\t\t\"firstName\": \"Lena\",\n\t\t\t\t\t\"lastName\": \"Weber\",\n\t\t\t\t\t\"kind\": \"customer\"\n\t\t\t\t  },\n\t\t\t\t  {\n\t\t\t\t\t\"firstName\": \"Monika\",\n\t\t\t\t\t\"lastName\": \"Müller\",\n\t\t\t\t\t\"kind\": \"customer\"\n\t\t\t\t  },\n\t\t\t\t  {\n\t\t\t\t\t\"firstName\": \"Matthias\",\n\t\t\t\t\t\"lastName\": \"Schneider\",\n\t\t\t\t\t\"kind\": \"employee\"\n\t\t\t\t  },\n\t\t\t\t  {\n\t\t\t\t\t\"firstName\": \"Hans\",\n\t\t\t\t\t\"lastName\": \"Durenfeldt\",\n\t\t\t\t\t\"kind\": \"employee\"\n\t\t\t\t  }\n\t\t\t\t]\t\t\t\t\n\t\t\t\t---------------------------------------------------------\n\t\t\t- **main.ts**\n\t\t\t\t-----------------------------------------------------\n\t\t\t\timport './style.css';\n\t\t\t\timport rawPersons from './data/persons.json';\n\t\t\t\timport { Person} from './classes/person';\n\t\t\t\timport { instantiatePerson } from './classes/factories';\n\n\t\t\t\tconst persons: Person[] = [];\n\t\t\t\tfor (const rawPerson of rawPersons) {\n\t\t\t\t\tconst person = instantiatePerson(rawPerson);\n\t\t\t\t\tif (person) {\n\t\t\t\t\t\tpersons.push(person);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t\t<div>\n\t\t\t\t\t<h1 class=\"text-3xl text-gray-900\">Conference Preparation Site</h1>\n\n\t\t\t\t\t<h2 class=\"text-2xl mt-3 mb-2 text-yellow-300\">Attendance List</h2>\n\t\t\t\t\t${persons.map(m => `<div>${m.getNametagText()}`).join('')}\n\n\t\t\t\t\t<h2 class=\"text-2xl mt-3 mb-2 text-yellow-300\">Nametags</h2>\n\t\t\t\t\t${persons.map(m => `<div>${m.getNametagHtml()}`).join('')}\n\t\t\t\t</div>\n\t\t\t\t`;\t\t\t\t\n\t\t\t\t-----------------------------------------------------\n\t\t\t- **factories.ts**\n\t\t\t\t-------------------------------------------------------\n\t\t\t\timport { Customer } from \"./customer\";\n\t\t\t\timport { Employee } from \"./employee\";\n\t\t\t\timport { IPerson } from \"./interfaces\";\n\n\t\t\t\texport const instantiatePerson = (person: IPerson) => {\n\t\t\t\t\tswitch (person.kind) {\n\t\t\t\t\t\tcase 'customer':\n\t\t\t\t\t\t\treturn new Customer(person.firstName, person.lastName);\n\t\t\t\t\t\tcase 'employee':\n\t\t\t\t\t\t\treturn new Employee(person.firstName, person.lastName);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-------------------------------------------------------\n\t\t- site now looks like this:##classandfinal","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-09-05 03:23:54","systemWhoCreated":"systemUnknown"},{"id":735,"category":"TypeScript","title":"How to define a TypeScript type for object literal bracket notation","body":"- when you use object literal bracket notation in TypeScript\n\t- TypeScript needs to know the type of property depending on the property sent it\n\t- but since this is dynamic, you need a bit more complex type definition, namely:\n\t\t- property is of type **T**\n\t\t- value is of type e.g. **IUser[T]**\n\t\t- and you define T in a generic statement as **<T extends keyof IUser>**\n\t\t\t-----------------------------------------------\n\t\t\tinterface IUser {\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\tage: number\n\t\t\t}\n\n\t\t\tconst changeProperty = <T extends keyof IUser>(user: IUser, prop: T, value: IUser[T]) => {\n\t\t\t\tuser[prop] = value;\n\t\t\t}\n\n\t\t\tconst user: IUser = {\n\t\t\t\tfirstName: 'Hans',\n\t\t\t\tlastName: 'Lefèbvre',\n\t\t\t\tage: 23\n\t\t\t};\n\n\t\t\tchangeProperty(user, \"firstName\", \"Georg\");\n\n\t\t\tconsole.log(user);\t\t\n\t\t\t-----------------------------------------------\n\t- here is the code when executed:##thcodexpbracket","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-09-07 06:16:46","systemWhoCreated":"systemUnknown"},{"id":736,"category":"React","title":"How to customize React Image Gallery with a text over each image","body":"- [React Image Gallery](https://www.npmjs.com/package/react-image-gallery) is an easy way to display images as a carousel in React\n- by default, you send an array of images and thumbnails as described on the npm page\n- but you can also send custom a custom component so that you can e.g. have photos that have a text overlay on them\n\t- for that you have to use **renderItem**\n- the code for this project is here:\n\t- https://github.com/edwardtanguay/et074-react-image-gallery-test\n- the live app is here:\n\t- https://et074-react-image-gallery-test.vercel.app\n- the app works like this:#gif#imagegallerytest\n- **App.jsx**\n\t----------------------------------------------\n\timport { useState } from 'react';\n\timport './App.scss';\n\timport React from 'react';\n\timport ImageGallery from 'react-image-gallery';\n\timport 'react-image-gallery/styles/css/image-gallery.css';\n\timport employees from './data/employees.json';\n\n\tconst  images = employees.map(m => ({original: `images/employee_${m.employeeID}.jpg`, description: m.firstName}))\n\n\tconst customRenderItem = (item) => {\n\t\treturn (\n\t\t\t<div className=\"custom-gallery-item\">\n\t\t\t\t<img src={item.original} alt={item.description} />\n\t\t\t\t{item.description && (\n\t\t\t\t\t<span className=\"image-description\"><span>{item.description}</span></span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tfunction App() {\n\t\tconst [count, setCount] = useState(0);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h1>React Image Gallery Test</h1>\n\t\t\t\t<ImageGallery items={images} renderItem={customRenderItem} />\n\t\t\t</>\n\t\t);\n\t}\n\n\texport default App;\t\n\t----------------------------------------------\n- **App.scss**\n\t-------------------------------------------\n\tbody {\n\t\tmargin-left: 1rem;\n\t\tbackground-color: #333;\n\t\tfont-family: sans-serif;\n\t}\n\n\th1 {\n\t\tcolor: rgb(218, 179, 107);\n\t}\t\n\n\t.image-gallery {\n\t\twidth: 30rem;\n\t\tbackground-color: #444;\n\t\tpadding: 1rem;\n\n\t\t.custom-gallery-item {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\ttext-align: center;\n\t\t\tposition: relative;\n\n\t\t\timg {\n\t\t\t\twidth: 20rem;\n\t\t\t\theight: 20rem;\n\t\t\t}\n\n\t\t\t.image-description {\n\t\t\t\ttop: 1.1rem;\n\t\t\t\tleft: 5.5rem;\n\t\t\t\tposition: absolute;\n\t\t\t\tcolor: #ccc;\n\n\t\t\t\tspan {\n\t\t\t\t\tbackground-color: #111;\n\t\t\t\t\tpadding: .2rem .4rem;\n\t\t\t\t\tfont-size: .9rem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\t-------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-09-08 13:22:02","systemWhoCreated":"systemUnknown"},{"id":737,"category":"Algorithms","title":"Notes on ThePrimeagen's algorithm course at Frontend Masters","body":"- these are my notes on this course at Frontend Masters\n\t- https://frontendmasters.com/courses/algorithms\n- reflections on taking this course\n\t- 1. if you are a Quereinsteiger developer who never had any formal computer science education\n\t\t- you may not be familiar with algorithms\n\t\t- in fact, as in my case, you can work as a developer for decades and not ever have to\n\t\t\t- write algorithms\n\t\t\t- know algorithms as such\n\t\t\t- answer questins about algorithms in interviews\n\t\t- at least this is my experience\n\t\t\t- of course when you program, you are using languages, libraries, frameworks that use algorithms\n\t\t\t- and just in solving some problem, you may write what is commonly known as an algorithm without knowing it as such\n\t\t- you may even have studied e.g. object-oriented patterns such as factory, observer, singleton without having to write algorithms as such\n\t\t\t- **pattern**\n\t\t\t\t- a recurring and recognizable form, structure or arrangement of elements of data\n\t\t\t\t- used to identify common behaviors and regulatiries within data or processes\n\t\t\t- **algorithm**\n\t\t\t\t- a step-by-step set of instructions or well-defined computational procedure that is designed to solve a specific problem\n\t\t\t\t- used for problem-solving in a precise and systematic way\n\t- 2. so formally studying algorithms will give you more concepts and a deeper knowledge of how to solve problems\n\t\t- therefore, if you didn't formally study computer science, I recommend taking a class or reading a book on algorithms at some point\n\t\t- this class is excellent, ThePrimeagen is the kind of developer who is deeply smart\n\t\t\t- you learn more than the topic at hand\n\t\t\t- listening to him talk is a rich source of side-tips and insightful quotes based on decades of solving problems\n\t\t\t- and he is humorful, entertaining and fun to listen to##\n\t\t\t- he uses the Vim editor like a boss, basically his thoughts just make code appear on the screen, its beautiful to watch\n\t\t- you don't need to understand everything in this course or a book on algorithms\n\t\t\t- I think algorithms is a topic you will learn increasingly deeply on each pass\n\t\t\t- the first pass will be mainly absorbing a large quantity of vocabulary and basic concepts, e.g.\n\t\t\t\t- Big O, bubble sort, linked list, ArrayList, ArrayBuffer, recursion, base case, pathing, QuickSort, divide and conquer, MergeSort, greedy search, pivot, trees, breadth-first vs. depth-first, heap, graphs, queue, stack, adjacency matrix, LRU (least recently used) cache, etc.\n\t\t\t- *\"when learning algorithms, there will be a period where you may not be able to use these concepts, but you will begin to see them in code\"* - ThePrimeagen\n\t\t\t\t- whereas if you never formally read a book on them or took a course on them, you may not ever see them as such \n\t\t- the more you understand algorithms, the more you think about the **performance** of not only your code, but the code that your code uses (e.g. third-party software)\n\t\t\t- when you use functions, methods and other tools, you will be more concerned with how these work internally\n\t\t\t- you will be concerned not only whether an object method works for processing 1 item\n\t\t\t\t- you will wonder how it will perform, how long it will take, and what resources it will consume when processing 10, 100, 1000, or a million items\n\t\t- in general, algorithms are going to be more of a focus for backend developers than frontend developers\n\t- 3. I was surprised that the focus of this course was not only **algorithms** but also very much on **data structures** and their diferences\n\t\t- these two concepts seem to be inextricably intertwined\n\t\t- for instance, whether you are using an **array** or a **linked list** will determine how resource-intensive your algorithm is\n\t- 4. an import concept when talking about arrays is **Big O**\n\t\t- this is an ill-chosen name for **worst-case time and resource complexity of an algorithm**\n\t\t\t- which basically answers the question: \n\t\t\t\t- what is going to happen to my machine's memory and speed as I add more input to an algorithm?\n\t\t\t\t- depending on the **Big O** of an algorithm\n\t\t\t\t\t- it may take an insignificant difference of time and resources to process 1, 100, or 1000 items\n\t\t\t\t\t- but to process 10,000 items, it will crash a normal machine by consuming its entire RAM or taking a week instead of 5 seconds\n- **===BASICS===**\n\t- **>>> 1. Big O Time Complexity**\n\t\t- https://frontendmasters.com/courses/algorithms/big-o-time-complexity\n\t\t- Big O categorizes you algorithm on time or memory based on the input\n\t\t\t- it's only a generalized way to understand how your algorithm will react to various inputs\n\t\t\t\t- and how it will act differently as your application grows\n\t\t\t- **it measures growth with respect to input**\n\t\t- *\"strings are effectively an array when you think about it\"*\n\t\t- algorithm #1: \n\t\t\t- O(N)\n\t\t\t- the algorithm's execution time or resource usage grows linearly with the size of the input\n\t\t\t- e.g. if N doubles, the time it takes the algorithm to run will roughly double as well##looksatalgo\n\t\t- algorithm #2:\n\t\t\t- not O(2N) for some reason\n\t\t\t- \"always drop constants\"##alg2\n\t\t\t- just because N is faster than N^2, doesn't mean practically it's always faster for smaller input\n\t\t- algorithm #3\n\t\t\t- running time is O(N)\n\t\t\t- because we always consider worst case##alg3\n\t\t\t- in interview, always assume worst case scenario\n\t\t- graph\n\t\t\t- \"you can't solve the traveling salesman for 12 cities\"\n\t\t\t\t- you have a list of cities\n\t\t\t\t- you need to find the shortest possible route that visits each city exactly once and returns to the starting city\n\t\t\t\t- time complexity is described as O(N!), where N is the number of cities\n\t\t\t\t- e.g.##thefexpl\n\t\t\t- Big-O Complexity graph##thebigogra\n\t\t- The Primeagen's favorite algorithms\n\t\t\t- [quick sort](https://www.youtube.com/watch?v=Vtckgz38QHs) is nice\n\t\t\t- but [ring buffer](https://www.youtube.com/watch?v=KyreJSKEagg) is always awesome\n\t- **>>> 2. Arrays Data Structure**\n\t\t- https://frontendmasters.com/courses/algorithms/arrays-data-structure\n\t\t- somehow `const a = []` is not an array\n\t\t- an array is a data structure\n\t\t\t- a contiguous memory space that contains a certain amount of bytes\n\t\t\t- to a developer, this is abtracted away, but an array is at a low level simply a collection of 0s and 1s##thearraybuff\n\t\t\t- when he says \"array\" its this\n\t\t\t- a \"list\" is something different\n\t\t\t- \"you don't delete something out of contiguous memory\"\n\t\t\t\t- you set it to e.g. 0\n\t\t\t\t- you have to be able to tell yourself that it is not in the array anymore\n\t\t\t\t- \"there's not something in this very something spot\"\n\t\t\t- what is the Big O for getting a value out of an array\n\t\t\t\t- it's all O(1) because you don't have to iterate through the array to get to a specific position, you simply do the math to get there\n\t\t\t\t- we do a constant amount of things no matter what the input is\n\t\t\t\t- it does not grow with more input at all\n\t- **>>> 3. Arrays Q&A**\n\t\t- 4-5 various questions\n\t\t- \"when you use Rust and you use an array, you realize you have to define a size at the beginning\"\n\t\t\t- you can't grow it\n\t\t\t- you can reallocate it\n- **===SEARCH===**\n\t- **>>> 4. Linear Search & Kata Setup**\n\t\t- developer tip:##thedevtippr\n\t\t- visualize problem first on paper, whiteboard or [excalidraw](https://excalidraw.com) first\n\t\t\t- then translate abstraction into concreteness\n\t\t- linear search is the simplest kind of search\n\t\t\t- this is what [indexof](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) does under the hood:##indexofis\n\t\t\t- what is the **Big O** of this type of approach?\n\t\t\t\t- what's the worst-case situation?\n\t\t\t\t\t- what we are searching for is not in the array\n\t\t\t\t\t- we will search through the whole array and not find it\n\t\t\t\t\t- this is **O(N)** pronounced [oh of n]\n\t\t\t\t\t\t- if there are 10 more items in your array, then it have ten more cycles to find it\n\t\t\t\t\t\t- time grows linearly with input\n\t\t- clones a repository\n\t\t- example of linear search\n\t\t\t- *\"I normally don't return in the middle of a for loop, but for a simple example I will make an exception\"*\n\t\t\t- `npx jest Linear`##thejestok\n\t- **>>> 5. Binary Search Algorithm**\n\t\t- todo\n\t- **>>> 6. Pseudo Code Binary Search**\n\t\t- todo\n\t- **>>> 7. Implementing Binary Search**\n\t\t- todo\n\t- **>>> 8. Two Crystal Balls Problem**\n\t\t- todo\n- **===SORT===**\n\t- **>>> 9. Bubble Sort**\n\t\t- *\"algorithm courses often start with sorting, but search is a simpler concept to understand\"*\n\t\t- *\"sorting often gets into this weird world\"*\n\t\t- *\"bubble sort is not only easy to visualize what is happening, it's also 3 lines of code, it's an extremely simple algorithm\"*\n\t\t- *\"if you are on a plane and a stewardess yells 'the plane is crashing, we need someone to write a bubble sort', you could write a bubble sort while the plane is crashing\"*\n\t\t- to know if an array is sorted:\n\t\t\t- you need to know that any item in the array is less or equal to the next item\n\t\t\t- the mathy way to say this is:##themathy\n\t\t- a bubble sort works like this\n\t\t\t- go through each item\n\t\t\t- if the item to the right is less than you, then swap positions\n\t\t\t- *\"a single iteration will always produce the largest item in the last spot\"*\n\t\t\t- you keep moving the end bar back toward the front\n\t\t\t\t- dividing the array in not-sorted to the left and sorted to the right\n\t\t- what is the **Big O** of this algorithm?\n\t\t\t- it is something like **O(N)** but less since each iteration, the number of iterations is reduced by 1:##thennnsk\n\t\t\t- it is **O(N^2)**\n\t- **>>> 10. Implementing Bubble Sort**\n\t\t- todo\n\t- **>>> 11. Linked List Data Structures**\n\t\t- todo\n\t- **>>> 12. Queue**\n\t\t- todo\n\t- **>>> 13. Implementing a Queue**\n\t\t- todo\n\t- **>>> 14. Queue Q&A**\n\t\t- todo\n\t- **>>> 15. Stack**\n\t\t- todo\n\t- **>>> 16. Implementing a Stack**\n\t\t- todo\n- **===ARRAYS===**\n\t- **>>> 17. Arrays vs Linked List**\n\t\t- arrays are fast and simple to use\n\t\t- most of what you do with arrays is **O(1)**: resources consumed grows only linearly with growth of inputs\n\t\t- problem with arrays\n\t\t\t- if you want to store 1000 items, you have to reserve all that memory up front\n\t\t- a linked-list is different: \n\t\t\t- when you create it, it has nothing to begin with\n\t\t\t- if you insert one item, it reserves memory only for that item\n\t\t\t- but with arrays, you can more easily use what you have reserved\n\t\t\t- however, the usability of an array is more cumbersome\n\t\t\t\t- basically it is always linear\n\t- **>>> 18. ArrayList**\n\t\t- todo\n\t- **>>> 19. ArrayBuffer**\n\t\t- todo\n\t- **>>> 20. Data Structures Q&A**\n\t\t- todo\n- **===RECURSION===**\n\t- **>>> 21. Recursion**\n\t\t- recursion is technically not an algorithm\n\t\t\t- recursion is a technique that can be used to design and implement algorithms\n\t\t\t- many algorithms are recursive in nature\n\t\t\t- one can speak of a \"recursive algorithm\"\n\t\t- recursion is something that keeps calling itself over and over again until a problem is solved\n\t\t- a **base case** is the point at which the problem is solved\n\t\t\t- *\"base case is extremely important, always determine clearly what your base case is, if you don't know your base case, recursion is extremely hard\"*##therecuss \n\t\t- recursion often has a pattern in which you go deeper and deeper into itself until you can't go any deeper\n\t\t\t- then you start coming out again changing a value at each level going upward that you will ultimately return from the recursive function when you get back to the top\n\t\t\t- if you have ever watched the movie [Inception](https://www.youtube.com/watch?v=YoHD9XEInc0), you have experienced a similar idea\n\t\t\t\t- \"Downward is the only way forward.\" - Dom Cobb\n\t\t\t- the base case is the bottom of the stack of functions that have been called\n\t\t\t\t- on the way down, you build a stack of functions until you get to the base case \n\t\t\t\t- from there, you start executing this stack of functions until you get back to the top\n\t\t\t\t- at which point you have a value that you return\n\t\t\t\t- *\"you can see that the execution of a recursive function goes down the stack, gets to the base case, and then starts coming back up the stack\"*##backupthestack\n\t\t\t- in recursive function, you have three areas:\n\t\t\t\t- pre: do something before recursion\n\t\t\t\t- recursion\n\t\t\t\t- post: do something after recursion\n\t\t- *\"it's hard to write a tree algorithm without some knowledge of recursion\"*\n\t\t- *\"when you first look at recursion, your lizard brain says: I could solve this with a simple for loop, but that just means you don't understand what recursion does, you just don't grok the need for it yet\"*\n\t\t- *\"the most important thing about writing recursive functions is that you have a solid base case, remember that, it's so important\"*\n\t- **>>> 22. Path Finding: Base Case**\n\t\t- todo\n\t- **>>> 23. Path Finding: Recursive Case**\n\t\t- todo\n\t- **>>> 24. Recursion Q&A**\n\t\t- todo\n- **===QUICK SORT===**\n\t- **>>> 25. QuickSort Algorithm**\n\t\t- this is the last example in the array section\n\t\t- QuickSort helps you understand divide and conquer\n\t\t- to explain divide and conquer concept, MergeSort is often used, but we will use QuickSort\n\t\t- divide and conquer\n\t\t\t- split your input into parts, then go over these smaller subsets, splitting them each into smaller subsets, etc. in order to solve the problem faster\n\t\t\t- watch a [visualization of QuickSort](https://www.youtube.com/watch?v=kPRA0W1kECg&t=90s)\n\t\t\t- greedy search\n\t\t\t\t- go until you find the first item and then you're done\n\t\t- a super fun algorithm\n\t\t- quick sort divides and conquers\n\t\t\t- pick some element out of the array\n\t\t\t\t- call it \"p\" since it is referred to as the \"pivot\"\n\t\t\t\t- put all items that are greater than p on one side of the array\n\t\t\t\t\t- all that re less then on the other side of the array\n\t\t\t- this is called a weak sort\n\t\t\t- you keep dividing and sort each of the smaller groups##tehsplitting\n\t\t- QuickSort does not always sort quickly\n\t\t\t- worst-case scenario\n\t\t\t\t- e.g. if an array is in descending order, it won't be quick to sort it at all\n\t\t\t\t- in this case, it is O(N^2), which is going to be exponentionally slower based on number of inputs\n\t\t\t- it can be quick if you hit the right conditions\n\t\t\t\t- its speed depends on how the original array is sorted\n\t- **>>> 26. Implementing QuickSort**\n\t\t- todo\n- **===DOUBLY LINKED LIST===**\n\t- **>>> 27. Linked List: prepend, insertAt, & append**\n\t\t- todo\n\t- **>>> 28. Linked List: remove, get & removeAt**\n\t\t- todo\n\t- **>>> 29. Linked List Q&A**\n\t\t- todo\n\t- **>>> 30. Debugging Linked List**\n\t\t- todo\n- **===TREES===**\n\t- **>>> 31. Trees Overview**\n\t\t- todo\n\t- **>>> 32. Tree Traversals**\n\t\t- todo\n\t- **>>> 33. Implement Tree Traversal**\n\t\t- todo\n- **===TREE SEARCH===**\n\t- **>>> 34. Breadth-First Search**\n\t\t- todo\n\t- **>>> 35. Implement Breadth-First Search**\n\t\t- todo\n\t- **>>> 36. Search Practice**\n\t\t- todo\n\t- **>>> 37. Implement Binary Tree Comparison**\n\t\t- todo\n\t- **>>> 38. Depth-First: Find**\n\t\t- todo\n\t- **>>> 39. Depth-First: Insert**\n\t\t- todo\n\t- **>>> 40. Depth-First: Delete**\n\t\t- todo\n\t- **>>> 41. Binary Search Tree Q&A**\n\t\t- todo\n\t- **>>> 42. Implement Depth-First Search**\n\t\t- todo\n- **===HEAP===**\n\t- **>>> 43. Heap**\n\t\t- todo\n\t- **>>> 44. Implementing Heap**\n\t\t- todo\n\t- **>>> 45. Tries**\n\t\t- todo\n- **===GRAPHS===**\n\t- **>>> 46. Graphs Overview**\n\t\t- todo\n\t- **>>> 47. Searching an Adjacency Matrix**\n\t\t- todo\n\t- **>>> 48. Implementing BFS on Adjacency Matrix**\n\t\t- todo\n\t- **>>> 49. Implement DFS on Adjacency List**\n\t\t- todo\n\t- **>>> 50. Dijkstr's Shortest Path**\n\t\t- todo\n\t- **>>> 51. Implement Dijkstra's Shortest Path**\n\t\t- todo\n\t- **>>> 52. Dijkstr's Shortest Path Run Time**\n\t\t- todo\n- **===Maps & LRU===**\n\t- **>>> 52. Maps**\n\t\t- todo\n\t- **>>> 53. LRU Cache**\n\t\t- todo\n\t- **>>> 54. LRU Cache Setup**\n\t\t- todo\n\t- **>>> 55. Implementing an LRU Cache**\n\t\t- todo","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-09-19 13:04:12","systemWhoCreated":"systemUnknown"},{"id":738,"category":"JavaScript","title":"The basics of JavaScript/TypeScript classes","body":"- class terminology\n\t- the difference between a **class** and an **object** (or instance) of the class\n\t\t- a **class** is like a blueprint\n\t\t- an **instance** is the **object** that is created based on the blueprint##classandobject\n\t- the difference between **properties** and **methods** of a class\n\t\t- **properties**\n\t\t\t- represent the **state** of the class\n\t\t\t- are **variables**\n\t\t\t- can have various access levels: public, private or protected\n\t\t- **methods**\n\t\t\t- represent **actions or behaviors** of class\n\t\t\t- are functions called **methods** in OOP terminology\n\t\t\t- can have various access levels: public, private or protected\n\t\t- **getters** and **setters** are simply **methods** that changed **properties**\n\t\t\t- a **getter** *gets* the value of a private property from the outside\n\t\t\t- a **setter** *sets* the value of a private property from the outside\n\t\t\t- JavaScript doesn't support this concept well or fully\n\t\t\t- TypeScript gives you a bit more control and familiarity with OOP of other languages such as C# and Java\n\t\t- examples\n\t\t\t- bicycle##classmethodprop\n\t\t\t- dog##tehdogclass\n\t\t\t- cat##classcat\n\t- OOP terminology\n\t\t- **constructor** and **this** keyword\n\t\t\t- **constructor**\n\t\t\t\t- the method that is used to contruct the class with the new keyword\n\t\t\t- **this** keyword\n\t\t\t\t- used internally in the object to refer to the object itself\n\t\t\texample##claconstruct\n\t\t- **inheritance**\n\t\t\t- a mechanism that allows a subclass to inherit properties and methods from its superclass\n\t\t\t- **extends** keyword\n\t\t\t- **super()** method\n\t\t- **method overriding** and **polymorphism**\n\t\t\t- **method overriding**\n\t\t\t\t- allows a subclass to provide a specific implementation for a method that is already defined in its superclass\n\t\t\t\t- don't confuse with *method overloading* (not possible in JavaScript)\n\t\t\t- **polymorphism**\n\t\t\t\t- allows objects of subclasses to be treated as objects of a common superclass\n\t\t\t\t- example\n\t\t\t\t\t- you have a superclass called File\n\t\t\t\t\t\t- it has a method called **create()**\n\t\t\t\t\t- your file superclass has many subclasses which have subclasses\n\t\t\t\t\t\t- `ExcelFile extends File`\n\t\t\t\t\t\t\t- `OldFormatExcelFile extends ExcelFile`\n\t\t\t\t\t\t\t- `NewFormatExcelFile extends ExcelFile`\n\t\t\t\t\t\t- `WordFile extends File`\n\t\t\t\t\t\t\t- `OldFormatWordFile extends WordFile`\n\t\t\t\t\t\t\t- `NewFormatWordFile extends WordFile`\n\t\t\t\t\t\t- `JsonFile extends File`\n\t\t\t\t\t\t- `CssFile extends File`\n\t\t\t\t\t- you create an array of file objects, e.g. [excelFile, wordFile, excelFile, cssFile, cssFile, jsonFile)\n\t\t\t- **abstract** classes and **interfaces**\n\t\t\t\t- **abstract classes** don't exist in JavaScript\n\t\t\t\t- **interfaces** don't exist in JavaScript\n\t\t\t\t\t- you have something similar in TypeScript called interfaces\n\t\t\t\t\t- in JavaScript, a class functions similarly to an interface\n\t\t- **static methods**\n\t\t\t- methods that can be called on the class, not on the object\n\t\t\t- used for factories, e.g. to create a method of the class with another constructor signature\n\t\t- more realistic examples: what would be useful properties and methods?\n\t\t\t- File\n\t\t\t\t- properties\n\t\t\t\t\t- ...\n\t\t\t\t- methods\n\t\t\t\t\t- ...\n\t\t\t- CustomScript\n\t\t\t\t- properties\n\t\t\t\t\t- ...\n\t\t\t\t- methods\n\t\t\t\t\t- ...\n\t\t\t- Product (with subclasses Book and Magazine)\n\t\t\t\t- properties\n\t\t\t\t\t- ...\n\t\t\t\t- methods\n\t\t\t\t\t- ...\t\t\t\n- coding classes and objects with JavaScript\n\t- create code examples of the above examples and concepts\n\t- do some examples in JavaScript and most in TypeScript\n\t\t- note the differences\n\t- create a debug() method for debugging of objects\n\t- **(1) house**\n\t\t-----------------------------------\n\t\tclass House {\n\n\t\t\tconstructor(roofColor, doorColor, windowColor) {\n\t\t\t\tthis.roofColor = roofColor;\n\t\t\t\tthis.doorColor = doorColor;\n\t\t\t\tthis.windowColor = windowColor;\n\t\t\t}\n\n\t\t\tdescribe() {\n\t\t\t\treturn `The roof is ${this.roofColor}, the door is ${this.doorColor} and the window is ${this.windowColor}.`;\n\t\t\t}\n\t\t}\n\n\t\tconst house1 = new House('red', 'orange', 'blue');\n\t\tconst house2 = new House('blue', 'red', 'blue');\n\n\t\tconsole.log(house1.describe());\n\t\tconsole.log(house2.describe());\t\t\n\t\t-----------------------------------\n\t- notice how you don't need setters\n\t\t------------------------------------\n\t\thouse1.roofColor = 'black';\n\t\t------------------------------------\n\t- but JavaScript has a way to fake this\n\t\t--------------------------------------\n\t\t#roofColor = '';\n\n\t\tconstructor(roofColor, doorColor, windowColor) {\n\t\t\tthis.#roofColor = roofColor;\n\t\t\tthis.doorColor = doorColor;\n\t\t\tthis.windowColor = windowColor;\n\t\t}\n\t\t--------------------------------------\n\t- this gives you intellisense of only public properties and methods\n\t\t- but this syntax is **uncommon** in other languages\n\t\t- you have no concept of protected properties so it is \n\t- **use TypeScript instead**\n- coding classes and objects with **TypeScript**\n\t- set up multi-page JS-DOM Vite site from [this starter](nnn)\n\t- **PageWelcome.ts**\n\t\t--------------------------------------------------\n\t\texport const PageWelcome = () => {\n\n\t\t\tclass House {\n\n\t\t\t\tprivate roofColor: string = '';\n\t\t\t\tprivate doorColor: string = '';\n\t\t\t\tprivate windowColor: string = '';\n\n\t\t\t\tconstructor(roofColor: string, doorColor: string, windowColor: string) {\n\t\t\t\t\tthis.roofColor = roofColor;\n\t\t\t\t\tthis.doorColor = doorColor;\n\t\t\t\t\tthis.windowColor = windowColor;\n\t\t\t\t}\n\n\t\t\t\tpublic getDoorColor(color: string) {\n\t\t\t\t\tthis.doorColor = color;\n\t\t\t\t}\n\n\t\t\t\tpublic describe() {\n\t\t\t\t\treturn `The roof is ${this.roofColor}, the door is ${this.doorColor} and the window is ${this.windowColor}.`;\n\t\t\t\t}\n\n\t\t\t\tstatic instantiateSimpleHouse(roofColor: string, doorColor: string) {\n\t\t\t\t\treturn new House(roofColor, doorColor, 'blue');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst house1 = new House('red', 'orange', 'blue');\n\t\t\tconst house2 = new House('blue', 'red', 'blue');\n\t\t\tconst house3 = House.instantiateSimpleHouse('red', 'orange');\n\n\t\t\treturn /*html*/`\n\t\t<div class=\"page pageWelcome\">\n\t\t\t<ul class=\"list-disc ml-6\">\n\t\t\t\t<li>${house1.describe()}</li>\n\t\t\t\t<li>${house2.describe()}</li>\n\t\t\t\t<li>${house3.describe()}</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t`;\n\t\t}\t\n\t\t--------------------------------------------------\n\t- TypeScript code is\n\t\t- properties and methods have full public, protected, private functionality\n\t\t- allows you to explicitly list all properties at the beginning of class \n\t\t\texplicitly defining their **access modifier** (public, protected, private) and their **type** (string, number, boolean, or custom types)\n\t\t- you can have static methods\n\t\t- TypeScript classes are more aligned with the syntax of other languages such as C# and Java\n\t\t\t- and allow similar patterns\n\t- in proper application structure, you want to **export** and **import** classes as you do components, functions, etc.\n\t\t--------------------------------------------\n\t\timport { House } from \"../classes/House\";\n\n\t\texport const PageWelcome = () => {\n\n\t\t\tconst house1 = new House('red', 'orange', 'blue');\n\t\t\tconst house2 = new House('blue', 'red', 'blue');\n\t\t\tconst house3 = House.instantiateSimpleHouse('red', 'orange');\n\n\t\t\treturn /*html*/`\n\t\t<div class=\"page pageWelcome\">\n\t\t\t<h2 class=\"text-2xl mb-3 text-orange-400\">House</h2>\n\t\t\t<ul class=\"list-disc ml-6\">\n\t\t\t\t<li>${house1.describe()}</li>\n\t\t\t\t<li>${house2.describe()}</li>\n\t\t\t\t<li>${house3.describe()}</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t`;\n\t\t}\t\n\t\t--------------------------------------------\n\t- practice building classes in TypeScript with simple examples\n\t\t- Bicycle\n\t\t- Dog\n\t\t- Cat\n\t- practice building classes in TypeScript with realistic examples\n\t\t- File\n\t\t- CustomScript\n\t\t- Product\n\t\t\t- Book\n\t\t\t- Magazine","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-09-25 05:47:01","systemWhoCreated":"systemUnknown"},{"id":739,"category":"Testing","title":"Create Vite JS-DOM site with TypeScript and Vitest unit testing","body":"- **what we are going to do**\n\t- we will use Vite to set up a JS-DOM website\n\t- this will be a simple **one-page site**\n\t\t- since the purpose of this howto is to show **how to add unit testing** to a website application\n\t- since we are setting up this site with **TypeScript**, we will use **Vitest** instead of Jest\n\t\t- **Jest** is a standard for unit testing particularly in React websites\n\t\t- **Vitest** is basically Jest but faster and uses TypeScript natively\n\t\t- but if you learn Vitest and then work on a project with Jest, the practice of writing tests is the same, and with the same syntax\n- **code is here**\n\t- https://github.com/edwardtanguay/et964-vitest-site\n- **why do we need unit testing at all?**\n\t- so we know that are code works\n\t- we will set up our Vite JS-DOM project so that when we build it (with `npm run build`), it executes all tests\n\t\t- if any of the tests fail, our application will not build\n\t\t- this means that when we push changes to GitHub, and Vercel pulls our changes from GitHub, Vercel executes `npm run build` which executes the tests, and if one of them fails, then this code will not be deployed to production\n\t- note that using TypeScript has a similar protection\n\t\t- if you have a TypeScript error in your application, your application still may work locally, but it will not build\n\t\t\t- and if you push it to GitHub, and Vercel pulls the code and execute `npm run build`, it will not build and not be deployed to production\n\t- therefore, using a combination of TypeScript and unit testing gives your application much more security than what you would have if you used JavaScript with no unit testing\n- **what does unit testing test?**\n\t- unit testing tests the **smallest units** of an application, in most cases: **functions**\n\t- therefore in our project, we will keep all functions in a directory called **tools**\n\t\t- in this folder we will have files that each contain a certain kind of function that we use in our application, e.g.\n\t\t\t- **qstr.ts** - *quick string functions* e.g.\n\t\t\t\t- **capitalizeFirst()** - capitalizes the first character of a string\n\t\t\t\t- **chopLeft()** - removes a certain string from the left side of another string\n\t\t\t- **qarr.ts** - *quick math functions* e.g. \n\t\t\t\t- **sortObjects()** - sorts an array of objects based on a property\n\t\t\t\t- **shuffle()** - randomizes an array of objects\n\t\t\t- **cart.ts** - *business logic functions* e.g.\n\t\t\t\t- **addProductToCart()** - adds a product to a shopping cart\n- **when does one know one has written enough tests for a function to test it properly?**\n\t- this is in many cases a nuanced and debated issue\n\t\t- one can in most cases only approach 100% tested code\n\t- this is why in many companies, there are dedicated testers\n\t\t- there job is to think of realistic and likely ways that each unit could fail\n\t- but whether you are a developer writing your own tests, or a dedicated tester\n\t\t- you need to think of the most probably ways your function could fail\n\t\t- for instance, if you are writing tests for the **capitalizeFirst()** function\n\t\t- the purpose of this function is to capitalize the first character of a string\n\t\t- so you could write the following tests\n\t\t\t- expect **capitalizeFirst(\"test\")** to be **\"Test\"**\n\t\t\t- expect **capitalizeFirst(\"\")** to be **\"\"**\n\t\t\t- expect **capitalizeFirst(\"TEST\")** to be **Test**\n\t\t\t\t- here, for instance, you may need to consider or ask other developers or a program manager\n\t\t\t\t- should **TEST** be changed to **TEST** or **Test**?\n\t\t\t\t- in this way, writing tests forces you to make the meaning of your tests **explicit**\n\t\t\t\t- for instance, if your application supports languages such as Mandarin or Arabic, what is **capitalizeFirst()** expected to do with these languages?\n- **besides making your application more stable, what benefits does unit testing have?**\t\t\n\t- enables you to make changes quickly regardless how large your code base is\n\t\t- change what you want to fix a bug or get a new feature to work\n\t\t- your tests will inform you if your changes cause anything to break in any other part of the application\n\t- helps new developers more quickly get up to speed in the project\n\t\t- if you want to know what the application is requied to do and not do, read the tests\n\t\t- this is even more true for end-to-end testing, which tests the entire application programmatically from the user's point of view\n- **>>> 1. CREATE A MINIMAL JS-DOM SITE WITH VITE**\n\t- create base site\n\t\t- `npm create vite@latest`\n\t\t- name of project, e.g. **et964-vitest-site** (choose your own project name of course)\n\t\t- Vanilla\n\t\t- TypeScript\n\t- open site in VSCode and start\n\t\t- `code et964-vitest-site**`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- minimalize site\n\t\t- delete **counter.ts**\n\t\t- **main.ts**\n\t\t\t----------------------------------\n\t\t\timport './style.css'\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t\t<h1>Vitest Site</h1>\n\t\t\t<p>testing</p>\n\t\t\t`;\t\t\t\n\t\t\t----------------------------------\n\t\t- empty **style.css**\n\t\t- delete **typescript.svg**\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<title>Vitest Site</title>\t\t\t\n\t\t\t-------------------------------\n\t\t- minimalized site##minimvites\n\t- install Sass\n\t\t- `npm i sass`\n\t\t- rename **style.css** to **style.scss**\n\t\t- **main.ts**\n\t\t\t----------------------------------------\n\t\t\timport './style.scss';\t\t\t\n\t\t\t----------------------------------------\n\t- install Tailwind\n\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init -p`\n\t\t- **tailwind.config.js**\n\t\t\t--------------------------------------\n\t\t\tcontent: [\n\t\t\t\t\"./index.html\",\n\t\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t\t],\n\t\t\t--------------------------------------\n\t\t- **style.scss**\n\t\t\t----------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\n\t\t\t----------------------------------------\n\t\t- basic Tailwind-styled site:##basetaillla\n\t- add Tailwind styles\n\t\t- **index.html**\n\t\t\t--------------------------------------\n\t\t\t<body class=\"p-6 bg-slate-500\">\n\t\t\t--------------------------------------\n\t\t- **main.ts**\n\t\t\t----------------------------------------\n\t\t\t<h1 class=\"text-3xl mb-3\">Vitest Site</h1>\t\t\t\n\t\t\t----------------------------------------\n\t- minimized site looks like this:##minsetupokvitest\n- **>>> 2. CREATE AND USE A FUNCTION**\n\t- **/src/tools/qstr.ts**\n\t\t--------------------------------------------\n\t\t/**\n\t\t * capitalizeFirstLetter()\n\t\t * \n\t\t * capitalizeFirstLetter('this is a test')\n\t\t * \n\t\t * \"This is a test\"\n\t\t */\n\t\texport const capitalizeFirstLetter = (text: string) => {\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1);\n\t\t}\n\t\t--------------------------------------------\n\t- **main.ts**\n\t\t-----------------------------------------\n\t\t<h2 class=\"text-2xl mb-2\">capitalizeFirstLetter()</h2>\n\t\t<ul class=\"list-disc ml-6\">\n\t\t\t<li>${qstr.capitalizeFirstLetter('this is a test')}</li>\n\t\t</ul>\t\t\n\t\t-----------------------------------------\n\t- note that because we `/**...*/` comment above the function, it appears when we use the function as a kind of in-place documentation##notethehelpsdj\n- **>>> 3. SET UP VITEST TESTING AND CREATE TEST FOR FIRST FUNCTION**\n\t- set up Vitest\n\t\t- `npm i -D vitest`\n\t\t- **package.json**\n\t\t\t----------------------------------------\n\t\t\t\"test\": \"vitest --ui\"\n\t\t\t----------------------------------------\n\t\t- `npm test`##thetestandrunjjj\n\t\t- answer \"y\" (it installs)\n\t\t- `npm test`\n\t\t- vitest runs but finds no tests, since we haven't written any yet##thenotestjsi\n\t- write a test for capializeFirstLetter()\n\t\t- **/src/tools/qstr.test.ts**\n\t\t\t---------------------------------------------------\n\t\t\timport { capitalizeFirstLetter } from \"./qstr\";\n\n\t\t\tdescribe('capitalizeFirstLetter', () => {\n\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------------------\n\t\t- note that it is telling us we need to install the TypeSript types for **jest** which vitest will use##isntalltypesjest\n\t\t\t- `npm i -D @types/jest`\n\t\t\t- the error will disappear\n\t\t- **qstr.test.ts**\n\t\t\t-------------------------------------\n\t\t\tdescribe('capitalizeFirstLetter', () => {\n\t\t\t\tit('uppercases and lowercases correct letters', () => {\n\t\t\t\t\texpect(capitalizeFirstLetter('test')).toBe('Test');\n\t\t\t\t})\n\t\t\t});\n\t\t\t-------------------------------------\n\t- now run the tests again\n\t\t- `npm test`\n\t\t- it will tell you it can't find **test**##tesllcantfind\n\t\t- in the root directory, create **vitest.config.ts**\n\t\t\t--------------------------------------------------\n\t\t\timport { defineConfig } from 'vitest/config'\n\n\t\t\texport default defineConfig({\n\t\t\t\ttest: {\n\t\t\t\t\tinclude: ['./src/tools/**/*.test.ts'],\n\t\t\t\t\tglobals: true\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- again run `npm test`\n\t\t- your terminal will show that the test passed:##thefirsttestjsjspast\n\t\t- note because we specified **--ui** in our test script, our browser opened with the following page:##thefollpagetestse\n\t- write more expectations for the test \"uppercases and lowercases correct letters\"\n\t\t- **qstr.test.ts**\n\t\t\t-------------------------------------\n\t\t\texpect(capitalizeFirstLetter('Test')).toBe('Test');\n\t\t\t-------------------------------------\n\t\t- note is still shows that one tests passes\n\t\t- now add in **qstr.test.ts**\n\t\t\t-------------------------------------\n\t\t\texpect(capitalizeFirstLetter('TEST')).toBe('Test');\n\t\t\t-------------------------------------\n\t\t- and you see that it fails\n\t\t\t- so we need to update our function to be able to pass this test##thefirstfailksj\n\t\t- **qstr.ts** - add `.toLowerCase()` to the end\n\t\t\t-----------------------------------------\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n\t\t\t-----------------------------------------\n\t\t- all three expectations of the one test will immediately run again and this time succeed:##thetestsrunagain\n\t\t- also tests multiple words - **qstr.test.ts**\n\t\t\t------------------------------------------\n\t\t\texpect(capitalizeFirstLetter('two words')).toBe('Two words');\t\t\t\n\t\t\t------------------------------------------\n\t- now write another test to handle edge cases\n\t\t- **qstr.test.ts**\n\t\t\t--------------------------------------\n\t\t\tit('handles all edge cases', () => {\n\t\t\t\texpect(capitalizeFirstLetter('')).toBe('');\n\t\t\t\texpect(capitalizeFirstLetter('  ')).toBe('  ');\n\t\t\t\texpect(capitalizeFirstLetter('!@#$%^&*()')).toBe('!@#$%^&*()');\n\t\t\t});\t\t\n\t\t\t--------------------------------------\n\t\t- note two tests pass now##nowthatwotests\n\t- now write another test to handle German characters\n\t\t- **qstr.test.ts**\n\t\t\t-----------------------------------------\n\t\t\tit('handles German characters', () => {\n\t\t\t\texpect(capitalizeFirstLetter('äpfel')).toBe('Äpfel');\n\t\t\t\texpect(capitalizeFirstLetter('öfter')).toBe('Öfter');\n\t\t\t\texpect(capitalizeFirstLetter('über')).toBe('Über');\n\t\t\t\texpect(capitalizeFirstLetter('ÄÄÄÄ')).toBe('Ääää');\n\t\t\t\texpect(capitalizeFirstLetter('ÖÖÖÖ')).toBe('Öööö');\n\t\t\t\texpect(capitalizeFirstLetter('ÜÜÜÜ')).toBe('Üüüü');\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------------\n- **>>> 4. SET UP TEST COVERAGE**\n\t- Vitest has a feature to see how much of your code you are testing\n\t- **package.json**\n\t\t-----------------------------------\n\t\t\"testcov\": \"vitest --coverage\"\n\t\t-----------------------------------\n\t- `npm run testcov`\n\t\t- you will have to install it first\n\t\t\t- press \"y\"##sodotheinsllfirst\n\t- run again: `npm run testcov`\n\t- at the moment you have 100% coverage##sodotheinsllfirstsdfdf\n\t- but now let's create a new function in **qstr.ts** without testing it\n\t\t-----------------------------------------------------\n\t\texport const sentencize = (text: string) => {\n\t\t\treturn 'nnn';\n\t\t}\n\t\t-----------------------------------------------------\n\t- run again: `npm run testcov`\n\t\t- you will see that you now have less than 100%\n\t\t- and it tells you which lines are not yet tested:##needthe100\n- **>>> 5. CREATE AND TEST A SECOND FUNCTION**\n\t- we will now add a second function to our tools\n\t- we will practice Test-Driven Development (TDD)\n\t\t- we will first write our test for this function\n\t\t- we will write as many expectations necessary to make sure \n\t\t\t- when all expectations are fulfilled, the function does what it is supposed to do\n\t\t- we will then run the tests and see that the test for this function fails of course\n\t\t- we will then write our function until all tests pass\n\t\t- when all tests pass, we know we are finished\n\t- we want to test a function that will be called **sentencize()**\n\t\t- it should **take a string of text and convert it to a sentence**\n\t\t\t- note that this is a quite vague statement, e.g.\n\t\t\t- what exactly is considered a sentence?\n\t\t\t- does it have to have period at the end?\n\t\t\t- what about a question mark or exclamation mark?\n\t\t\t- what if it ends with a colon or semi-colon, is it still a sentence?\n\t\t\t- does it need to start with a capital letter?\n\t\t\t- what if it is a Spanish question that starts with a \"¿\"?\n\t\t\t- is a text that is only one character long considered a sentence?\n\t\t\t- is a text of all numbers considered a sentence?\n\t\t\t- what does the function return do if e.g. one character is not considered a sentence?\n\t\t\t\t- return that character?\n\t\t\t\t- return a blank string?\n\t\t\t\t- return a text that shows some kind of error message?\n\t\t\t\t- throw an error from the function?\n\t\t\t\t- ignore it but write in a log file what text was sent leave it\n\t\t- all of these questions depend on the context of the application\n\t\t\t- in many cases in a work context, what you need to test is decided: \n\t\t\t\t- by **program management** who determines the business logic of the application\n\t\t\t\t- together with the **developer team** when creating and discussing tasks for a sprint\n\t\t\t- in addition, a developer/tester should test edge cases such as\n\t\t\t\t- what happens when an **empty string**, an **extremely long string**, etc.\n\t\t\t- note also that **TypeScript** covers the basic tests, e.g.\n\t\t\t\t- you don't have to test what happens when you send e.g. a **number** or **boolean**\n\t\t\t\t- since TypeScript won't compile if you don't send a **string**\n\t- let's say that program management and your developer team decide on the following functionality for the function **sentencize**:\n\t\t- 1. it receives a string as parameter\n\t\t- 2. if the first character is not capitalized, then capitalize it\n\t\t- 3. if the last character is not a period, question mark or exclamation mark, then add a period\n\t\t- 4. if the last character is a comma, semi-colon or colon, then remove it before added a period\n\t\t- 5. even if the string is one character or all numbers, treat it as a sentence, e.g. \n\t\t\t- e.g. \"who was it?\" / \"i\" --> \"Who was it?\" / \"I.\"\n\t\t\t- e.g. \"how many?\" / \"23\" -->  \"How many?\" / \"23.\"\n\t\t- 6. if it begins with \"¿\", then capitalize the second character\n\t\t\t- e.g. \"¿por qué?\" --> \"¿Por qué?\"\n\t\t- 7. if there are multiple end-punctuation marks, reduce them to only one, namely, the first one\n\t\t\t- e.g. \"who was it????\" --> \"Who was it?\"\n\t\t\t- e.g. \"what they hell??????!!!!!!\" --> \"What the hell?\"\n\t\t\t- e.g. \"what they hell!!!!!!??????\" --> \"What the hell!\"\n\t- here are is the test you could write that would arguable fulfill the above specifications:\n\t\t- spec 1 is covered by TypeScript\n\t\t- specs 2-5 might be something like this:\n\t\t\t- **qstr.test.ts**\n\t\t\t\t----------------------------------------------------\n\t\t\t\tdescribe('sentencize', () => {\n\t\t\t\t\tit('handles no capital and no punctuation mark', () => {\n\t\t\t\t\t\texpect(sentencize('this is a text')).toBe('This is a text.');\n\t\t\t\t\t\texpect(sentencize('hello')).toBe('Hello.');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles no capital and punctuation mark', () => {\n\t\t\t\t\t\texpect(sentencize('hello!')).toBe('Hello!');\n\t\t\t\t\t\texpect(sentencize('hello?')).toBe('Hello?');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles no capital and bad punctuation mark', () => {\n\t\t\t\t\t\texpect(sentencize('hello,')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('hello:')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('hello;')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('hello/')).toBe('Hello/.');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles capital', () => {\n\t\t\t\t\t\texpect(sentencize('Hello')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('Hello///')).toBe('Hello///.');\n\t\t\t\t\t\texpect(sentencize('This is a test.')).toBe('This is a test.');\n\t\t\t\t\t\texpect(sentencize('AAA')).toBe('AAA.');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles task examples', () => {\n\t\t\t\t\t\texpect(sentencize('who was it?')).toBe('Who was it?');\n\t\t\t\t\t\texpect(sentencize('i')).toBe('I.');\n\t\t\t\t\t\texpect(sentencize('how many?')).toBe('How many?');\n\t\t\t\t\t\texpect(sentencize('23')).toBe('23.');\n\t\t\t\t\t});\n\t\t\t\t});\t\t\t\n\t\t\t\t----------------------------------------------------\n\t\t\t- **qstr.ts**\n\t\t\t\t----------------------------------------------\n\t\t\t\t/**\n\t\t\t\t * sentencize()\n\t\t\t\t * \n\t\t\t\t * sentencize('this is a test')\n\t\t\t\t * \n\t\t\t\t * \"This is a test.\"\n\t\t\t\t */\n\t\t\t\texport const sentencize = (text: string) => {\n\t\t\t\t\tlet r = text;\n\n\t\t\t\t\tr = text.charAt(0).toUpperCase() + text.slice(1);\n\n\t\t\t\t\tif (',:;'.includes(text.slice(-1))) {\n\t\t\t\t\t\tr = r.slice(0,-1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!'.!?'.includes(text.slice(-1))) {\n\t\t\t\t\t\tr += '.'\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\t----------------------------------------------\n\t\t- **DOING...**\n\t\t\t- specs 6-7 might be something like this:\n\t\t\t\t- **qstr.test.ts**\n\t\t\t\t\t----------------------------------------------------\n\n\t\t\t\t\t----------------------------------------------------\n\t\t\t\t- **qstr.ts**\n\t\t\t\t\t----------------------------------------------\n\n\t\t\t\t\t----------------------------------------------\n\t- now use the function sentencize()\n\t\t- nnn\n- **>>> 6. SET UP VITEST SUCH THAT VERCEL WILL NOT PUBLISH IF ALL TESTS DO NOT PASS**\n\t- nnn\n- **>>> 7. TEST COMPONENTS**\n\t- nnn\n- **>>> 8. TEST PAGES**\n\t- nnn","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-01 22:36:15","systemWhoCreated":"systemUnknown"},{"id":740,"category":"JS-DOM","title":"An overview of the many ways to build websites from HTML/CSS to JS-DOM to SPA/SSR/SSG frameworks","body":"- **background**\n\t- web development has been evolving for more than 30 years, from 1989 to 2023\n\t- hence there are many various ways to build a website: from (1) a simple **HTML file** to (2)  a complex **JavaScript application** built with a JavaScript framework\n\t- these many methods each have their specific advantages and disadvantages on various spectrums\n\t\t- historical/practical spectrum\n\t\t- size of project\n\t\t- complexity of project\n\t\t- appropriateness for learning\n\t\t- what kind of website: interactive/static/SEO-friendly\n- **===METHODS OF BUILDING WEBSITES FOR LEARNING PURPOSES===**\n\t- **---DISPLAY SITES---**\n\t\t- **=== 010 Text site** ( [howto](https://tanguay-eu.vercel.app/howtos/743) | [repo](https://github.com/edwardtanguay/et837site) | [live](https://et837site.vercel.app) )\n\t\t- **=== 020 HTML site** ( [repo](https://github.com/edwardtanguay/web020-htmlsite) | [live](https://web020-htmlsite.vercel.app) )\n\t\t- **=== 030 HTML/CSS site in one file** ( [repo](https://github.com/edwardtanguay/web030-html-css-one-file) | [live](https://web030-html-css-one-file.vercel.app/) )\n\t\t- **=== 040 HTML/CSS site in two files** ( [repo](https://github.com/edwardtanguay/web040-html-css-two-files) | [live](https://web040-html-css-two-files.vercel.app) )\n\t\t- *mainly used for beginners to learn HTML/CSS*\n\t\t- *very accessible: all you need is a text editor and a browser*\n\t\t- *you can easily publish these sites to hosting services such as Vercel and Netlify*\n\t\t- PROBLEM: **no optimization** of files, development files are simply copied 1-to-1 to the hosting provider\n\t\t- PROBLEM: **difficult to use TypeScript, Sass, or npm packages etc.**\t\n\t\t- PROBLEM: **not a professional solution**, and so only used for simple, static pages, or templates, etc.\n\t\t- PROBLEM: **no user interaction**\n\t- **---SIMPLE JS-DOM SITES---** \n\t\t- **=== 050 HTML/CSS/JavaScript site in one file**  ( [repo](https://github.com/edwardtanguay/web050-htmlcssjsone) | [live](https://web050-htmlcssjsone.vercel.app) )\n\t\t- **=== 060 HTML/CSS/JavaScript site in three files**\n\t\t- *mainly used for beginners to learn JS-DOM website programming*\n\t\t- *enables interaction with JavaScript: buttons that show/hide sections, forms that process data, etc.*\n\t\t- *professional editors such as VSCode usually used*\n\t\t- *you can easily publish these sites to hosting services such as Vercel and Netlify*\n\t\t- *hot reloading available with VSCode Live-Server extension*\n\t\t- *events and data fetching possible*\n\t\t- PROBLEM: **no optimization** of files, development files are simply copied 1-to-1 to the hosting provider\n\t\t- PROBLEM: **difficult to use TypeScript, Sass, or npm packages etc.**\t\n\t\t- PROBLEM: **not a professional solution**\n\t\t- PROBLEM: **no JavaScript modules and hence unorganized, unisolated (global variables) and unscalable code**\t\n\t- **---MODULAR JS-DOM SITES---** \n\t\t- **=== 070 HTML/CSS/JavaScript site in three files with CommonJS modules (using Browserify)** ( [howto](https://browserify.org/#install) | [repo](https://github.com/edwardtanguay/web070-commonjs-site) | [live](https://web070-commonjs-site.vercel.app) )\n\t\t- **=== 080 HTML/CSS/JavaScript site in three files with ES6 modules** ( [howto](https://tanguay-eu.vercel.app/howtos/742) |  [repo](https://github.com/edwardtanguay/et882-module-javascript-website) | [live](https://et882-module-javascript-website.vercel.app) )\n\t\t- **=== 090 HTML/CSS/JavaScript site in three files with ES6 modules and multiple pages**\n\t\t- *mainly used for beginners to learn the concepts of JavaScript modules in websites*\n\t\t- *you can easily publish these sites to hosting services such as Vercel and Netlify*\n\t\t- *events and data fetching possible*\t\n\t\t- PROBLEM: **no optimization** of files, development files are simply copied 1-to-1 to the hosting provider\n\t\t- PROBLEM: **difficult to use TypeScript, Sass, or npm packages etc.**\t\n\t\t- PROBLEM: **not a professional solution**\n\t\t- PROBLEM: **no concepts of components, hence you have code duplication on every page, e.g. header, navbar, footer, etc.**\t\n\t- **---JS-DOM FRAMEWORK APPLICATION---**\n\t\t- **=== 100 Vite Vanilla JS-DOM framework site with JavaScript**\n\t\t- **=== 110 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind**\n\t\t- **=== 120 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components**\n\t\t- **=== 130 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router**\n\t\t- **=== 140 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router/events**\n\t\t- **=== 150 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router/events/npm-packages**\n\t\t- **=== 160 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router/events/npm-packages/tools**\n\t\t- **=== 170 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router/events/npm-packages/tools/unit-testing**\n\t\t- **=== 180 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router/events/npm-packages/tools/unit-testing/fetch-API-data**\n\t\t- **=== 190 Vite Vanilla JS-DOM framework site with TypeScript/Sass/Tailwind/components/router/events/npm-packages/tools/unit-testing/fetch-API-data/json-server**\n\t\t- *Vite Vanilla framework enables you to build real-world, interactive applications in JS-DOM*\n\t\t- *native hot-reloading with `npm run dev`*\n\t\t- *build process (`npm run build`) optimizes files for speed*\n\t\t- *build process (`npm run build`) increases stability by not publishing if TypeScript or unit-testing find errors*\n\t\t- *you can easily publish these sites to hosting services such as Vercel and Netlify*\n\t\t- *TypeScript, Sass, Tailwind and all npm packages easy to install and use*\n\t\t- *easy to fetch information from external data sources such as backends and external APIs*\n\t\t- *easy to set up with json-server for local-application CRUD manipulative of a JSON file*\n\t\t- *React-style components easy to create, eliminates code-duplication and increases code organization*\n\t\t- *easy to set up simple router to eliminate code-dpublication for multipage sites*\n\t\t- *is an excellent framework to learn JS-DOM in a 90% React-like programming environment without the initial complexity of state management (useState, useEffect)*\n\t\t- *can be used to build semi-complex, stable and secure applications*\n\t\t- PROBLEM: **does not compare to React/Angular/Vue/Next.js/etc. as a professional solution** since it lacks state management and the rich component ecosystem of these advanced frameworks\n\t\t- PROBLEM: Vite Vanilla **does not build an SPA** (single-page-application) and so every page requires a round-trip to the server, which makes e.g. use on mobile devices slow \n\t\t- PROBLEM: event processing is **procedural instead of declarative**, which leads to applications that become unscalable with increased complexity\n\t\t\t- when a user clicks a button, you have to specify the step-by-step **procedure** of how e.g. a dropdown has to change\n\t\t\t- in a JavaScript framework like React, Angular, Vue.js, you **declare** what you your application should look like and how it should behave based on the current **state** of the data your application\n\t\t\t\t- you **wire your app up to your data** and then simply **change your data**\n- **===PROFESSIONAL SOLUTIONS FOR BUILDING WEBSITES USED BY COMPANIES===**\n\t- **CUSTOM JS-DOM FRAMEWORK**\n\t\t- **=== 210 JS-DOM framework built with Parcel that parses TypeScript/Sass** ([tutorial](https://adrianhall.github.io/javascript/react/2020/03/29/parcel-typescript-react))\n\t\t- **=== 200 JS-DOM framework built with Webpack that parses TypeScript/Sass** ([tutorial](https://marketsplash.com/tutorials/typescript/how-to-setup-webpack-for-typescript-and-sass))\n\t\t- **=== 220 JS-DOM framework built with Rollup that parses TypeScript/Sass** ([tutorial](https://www.thisdot.co/blog/how-to-serve-a-single-page-application-spa-using-rollup-js-and-web-dev))\n\t\t- *many companies build their own frameworks using a website bundler such as Webpack or Rollup in order to have complete control over processed resources and custom build workflows*\n\t\t- PROBLEM: the complexity of using a web bundler and creating a custom website build workflow is considerably more difficult than using established frameworks such as React, Angular and Vue.js\n\t- **FRAMEWORKS THAT PRODUCE SINGLE-PAGE APPLICATIONS (SPA)** \n\t\t- **=== 300 React**\n\t\t- **=== 350 Angular**\n\t\t- **=== 400 Vue.js**\n\t\t- **=== 450 Svelte**\n\t\t- *each of these frameworks has a sophsicated state management solution which enables you to create websites **declaritively** instead of **procedurally**, which enables you means you can create applications that are both complex and scalable*\n\t- **FRAMEWORKS THAT PRODUCE SERVER-SIDE-RENDERED APPLICATIONS (SSR)** \n\t\t- **=== 500 Next.js**\n\t\t- **=== 550 Remix**\n\t\t- **=== 600 SvelteKit**\n\t- **FRAMEWORKS THAT PRODUCE STATIC-SITE-GENERATED APPLICATIONS (SSG)** \n\t\t- **=== 650 Astro**\n\t\t- **=== 700 Gatsby**\n\t\t- **=== 720 Hugo**\n\t\t- **=== 730 Jekyll**\n\t\t- **=== 760 Eleventy **","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-07 12:28:09","systemWhoCreated":"systemUnknown"},{"id":741,"category":"Regex","title":"Learn the basics of regular expressions (regex) and how to use them in JavaScript","body":"- **what are regular expressions and what are they used for**\n\t- **regular expressions**, often referred to as **regex**, is a pattern-matching syntax used for searching, extracting, and manipulating text based on patterns\n\t- it allows you to define a pattern or a set of rules that describe a specific sequence of characters or a textual structure\n\t- it is often used in programming to **validate** certain patterns such as **email addresses**, **postal codes** or custom syntax such as **product ids**\n\t- regular expressions are also used for **searching**, **text extraction**, **text transformation** and **parsing** of commands, e.g. when creating a computer language or compiler\t\n- **what is the history of regex**\n\t- regular expressions were being used as early as the **1950s and 1960s** in computer science and linguistics\n\t- the **grep** command, introduced in Unix in the **1970s**, allowed users to search for patterns using regular expressions\n\t- during the **1980s**, regular expressions were included in many languages being developed such as **C++** and **Haskell**\n\t- particularly the language **Perl** embraced regular expressions as a core feature\n\t- by **2000** nearly all major computer languages had support for regular expression, e.g. **Python**, **Java** and **JavaScript**\n\t- by the **early 2000s** all **SQL variants** had regular expression support\n\t- since then regular expressions have found adoption as a **search option** in non-developer tools such as **Microsoft Excel/Word**, **Google Sheet/Documents** and editors such as **Notepad++**\n- **code is here**\n\t- https://github.com/edwardtanguay/et778-regex-learn\n- **live site is here**\n\t- https://et778-regex-learn.vercel.app\n- **learn regex basics**\n\t- 1. find an interactive learning site that has takes you through the commands step by step with questions and answers, work through it\n\t\t- e.g. https://regexone.com\n\t- 2. while working through this keep another site open where you can experiment with what you learn in the first site\n\t\t- e.g. https://regex101.com\n\t\t- use ChatGPT to help you find the right regex and if it works, try to understand it\n\t- 3. create a JavaScript site where you can experiment with what you learn in JavaScript regexs\n\t\t- e.g. a Vite JS-DOM site\n\t\t- see documentation for\n\t\t\t- REGEX.test(string)\n\t\t\t\t- [w3schools](https://www.w3schools.com/jsref/jsref_regexp_test.asp)\n\t\t\t\t- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)\n\t\t\t- string.match(REGEX)\n\t\t\t\t- [w3schools](https://www.w3schools.com/jsref/jsref_match.asp)\n\t\t\t\t- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n\t\t\t- string.replace(REGEX)\n\t\t\t\t- [w3schools](https://www.w3schools.com/jsref/jsref_replace.asp)\n\t\t\t\t- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\t\t\t- capture groups\n\t\t\t\t- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences)\n\t\t\t\t- [2ality](https://2ality.com/2017/05/regexp-named-capture-groups.html)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-08 08:02:54","systemWhoCreated":"systemUnknown"},{"id":742,"category":"JavaScript","title":"How to create a modular JavaScript website with ES6 modules","body":"- **what we will do**\n\t- create a website that uses JavaScript modules *in the browser*\n\t\t- these files are places 1-to-1 on the hosting server to be served as they are\n\t- note this differs from using **JavaScript frameworks** (e.g. one created by Vite) which has an **npm run build** command which\n\t\t- transpiles and bundles files into optmized files that are served on the hosting server\n\t- note that these kinds of websites do not allow you to use **npm packages**, or easily use **Sass** or TypeScript, etc.\n\t\t- for that you would need to use a **JavaScript framework** or build your own JavaScript framework with e.g. Webpack\n\t- note that such sites are **rarely used by companies** anymore to create their web applications\n\t\t- instead **JavaScript frameworks** are used \n- **final code is here**\n\t- https://github.com/edwardtanguay/et882-module-javascript-website\n- **the final site is here**\n\t- https://et882-module-javascript-website.vercel.app#gif#thesieonlineok\n- **create base HTML site**\n\t- create directory for site, e.g. **et882-module-javascript-website**\n\t\t- *if you are following along, don't use this name, but choose your own name, so you can have a unique url at Vercel later*\n\t- go into the directory and type `code .` which opens VSCode in the directory\n\t- create **index.html**\n\t\t--------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>Modular Site Test</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Module Site Text</h1>\n\t\t\t<p>Welcome to this site.</p>\n\t\t</body>\n\t\t</html>\n\t\t--------------------------------------------\n\t- view it by right-clicking on the file name and selecting **Open with Live Server**##thedoandlookslive\n\t- site should look like this##thefirsmod\n- **create local Git repository**\n\t- `git init -b dev`\n\t- make initial commit\n- **add CSS**\n\t- **css/main.css**\n\t\t--------------------------------------------\n\t\tbody {\n\t\t\tpadding: 0 1rem;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\t\th1 {\n\t\t\tcolor: navy;\n\t\t}\n\t\t--------------------------------------------\n\t- **index.hml** add in head area\n\t\t----------------------------------------\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t----------------------------------------\n\t- site should look like this:##thsecondsite\n- **add JavaScript without modules**\n\t- add button to **index.html**\n\t\t------------------------------------------\n\t\t<body>\n\t\t\t<h1>Module Site Text</h1>\n\t\t\t<p>Welcome to this site.</p>\n\t\t\t<button class=\"btnInfo\">Info</button>\n\t\t</body>\n\t\t------------------------------------------\n\t- add in **js/main.js** an event handler\n\t\t---------------------------------------\n\t\tconst btnInfoElem = document.querySelector('.btnInfo');\n\n\t\tbtnInfoElem.addEventListener('click', () => {\n\t\t\talert('clicked');\n\t\t});\n\t\t---------------------------------------\n\t- PROBLEM: the button doesn't do anything when clicked\n\t\t- REASON: we have not referenced the JavaScript code from the **index.html** file yet\n\t\t- SOLUTION: in **index.html**, reference the JavaScript file from inside the HEAD section\n\t\t\t-----------------------------------------\n\t\t\t<title>Modular Site Test</title>\n\t\t\t<script src=\"js/main.js\"></script>\t\t\n\t\t\t-----------------------------------------\n\t- PROBLEM: the button still doesn't do anything when clicked\n\t\t- REASON: when the JavaScript is executed, the HTML button element doesn't exist yet\n\t\t- SOLUTION: in **index.html**, move the **script** line down to right before the **</body>** tag\n\t\t\t-----------------------------------------\n\t\t\t\t<script src=\"js/main.js\"></script>\n\t\t\t</body>\t\n\t\t\t-----------------------------------------\n\t- when you click the button, the attached event code is executed:##nowworkstheclick\n\t- but since HTML 5, you can keep the **script** code block that references JavaScript files in the HEAD section by using the **defer** attribute\n\t\t-----------------------------------------------------------------\n\t\t<title>Modular Site Test</title>\n\t\t<script src=\"js/main.js\" defer></script>\n\t\t-----------------------------------------------------------------\n\t- the button continues to work\n\t- now let's change the text above the button when it is clicked\n\t\t- in **index.html** add a class to the **<p>** tag\n\t\t\t----------------------------------------------\n\t\t\t<p class=\"message\">Welcome to this site.</p>\n\t\t\t----------------------------------------------\n\t\t- **main.js**\n\t\t\t------------------------------------------------\n\t\t\tconst btnInfoElem = document.querySelector('.btnInfo');\n\t\t\tconst messageElem = document.querySelector('.message');\n\n\t\t\tbtnInfoElem.addEventListener('click', () => {\n\t\t\t\tmessageElem.innerText = 'the button has been clicked'\n\t\t\t});\t\t\t\n\t\t\t------------------------------------------------\n\t\t- now when you click on the button, the text above it changes:#gif#thebbisclicke\n- add JavaScript module \t\n\t- we will now add a JavaScript module file called **tools.js** which exports a function\n\t- we will then import that function into **main.js**\n\t- **js/tools.js**\n\t\t------------------------------------------\n\t\texport const sentencize = (text) => {\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1) + '.';\n\t\t}\n\t\t------------------------------------------\n\t- **js/main.js**\n\t\t------------------------------------------\n\t\timport * as tools from './tools.js';\n\n\t\tconst btnInfoElem = document.querySelector('.btnInfo');\n\t\tconst messageElem = document.querySelector('.message');\n\n\t\tbtnInfoElem.addEventListener('click', () => {\n\t\t\tconst sentence = tools.sentencize('the button has been clicked');\n\t\t\tmessageElem.innerText = sentence;\n\t\t});\n\t\t------------------------------------------\n\t- PROBLEM: the button doesn't work and the browser shows an error:##noworkwanderro\n\t- SOLUTION: indicate in the **index.html** file that we are using modules\n\t\t- **index.html**\n\t\t\t-------------------------------------------------------\n\t\t\t<script src=\"js/main.js\" defer type=\"xmodule\"></script>\n\t\t\t-------------------------------------------------------\n\t\t- now when you click on the button, it changes the text which shows that the function was successfully imported from the module file:#gif#thebbisclicke22\n- publish to Vercel\n\t- push your code to GitHub\n\t- go to https://vercel.com\n\t- click **Add new...** and **Project**\n\t- click the **Import** button next to your repository##clickimporajsiforthe\n\t- click **Deploy**\n\t- the site works online at Vercel:#gif#thesieonlineok\n- **you now have a modular JavaScript website**\n\t- you can add and import as many modules as you want\n\t- modules can also import other modules \n\t- but while you can use JavaScript modules, **you can't do any of these things**:\n\t\t- import **npm packages**\n\t\t- use **Sass**\n\t\t- use **TypeScript**\n\t\t- **optimize your code**, e.g. combine all JS modules into one, or minimize your CSS in order to improve the speed of your site\n\t\t- **convert or reduce size of images**\n\t- to do these things, you need to\n\t\t- **use a JavaScript framework** such as \n\t\t\t- [Vite Vanilla](https://tanguay-eu.vercel.app/howtos/739) (JS-DOM)\n\t\t\t- [Vite Vanilla JS-DOM site with Router](https://starters.tanguay.eu/list/darkViteVanillaMenu)\n\t\t\t- Vite React\n\t\t\t- Angular\n\t\t\t- Vue.js\n\t\t\t- Next.js\n\t\t\t- Svelte\n\t\t\t- etc.\n\t\t- **create your own JavaScript framework** with\n\t\t\t- Webpack\n\t\t\t- Parcel\n\t\t\t- Rollup\n\t\t\t- etc.","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-08 14:08:33","systemWhoCreated":"systemUnknown"},{"id":743,"category":"HTML","title":"Create the simplest HTML online website and view on smart phone","body":"- the simplest way to create a text that appears on an online website is:\n\t- create a **directory**\n\t- inside the directory create a file called **index.html** \n\t- inside the file write a **sentence** on the first line\n\t- publish this to **Vercel**\n\t- view it \n\t\t- in your **browser** \n\t\t- on your **smart phone**\n- a real example of using this method would be to **create a shopping list that appears on your smart phone**\n- let's create it\n\t- note: if you are going to follow these examples, create a directory that is unique, e.g. **et837site**\n\t\t- this will be used for the name of your\n\t\t\t- local directory, e.g. **/home/edward/projects/et837site**\n\t\t\t- GitHub repository, e.g. **https://github.com/edwardtanguay/et837site**\n\t\t\t- your Vercel site, e.g. **https://et837site.vercel.app**\n\t\t- note that you should NOT use the name **et837site**\n\t\t\t- \"et\" are my initials (Edward Tanguay)\n\t\t\t- and the number is a random number\n\t\t\t- use your **own initials** instead, and a random number\n\t\t\t- this way you guarantee that:\n\t\t\t\t- your GitHub name and Vercel URL are available\n\t\t\t\t- that your local directory, GitHub name, and URL all have the same name for one project\n\t\t\t\t- this helps you organize your projects better\n\t- **et837site/index.html**\n\t\t-------------------------------------------------\n\t\tbutter, bread, milk, yogurt, bananas, apples\n\t\t-------------------------------------------------\n\t- with the [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) VSCode extension\n\t\t- view your site in a browser:##thefirstoneview\n\t- create a local GitHub repository\n\t\t- `git init -b dev`\n\t\t- with VSCode, push your site to a GitHub repository##thefirstoneview222\n\t- publish at Vercel\n\t\t- got to https://vercel.com\n\t\t- sign up (with GitHub) or log in\n\t\t- click **Add New...** and **Project**##clickaddnewww\n\t\t- click **Import** for the site you just pushed to GitHub##choosimpoforsite\n\t\t- leave all defaults and click **Deploy**##accealldefff\n\t\t- it will tell you the site is published##congratsss\n\t\t- click on the above area and you will be taken to your online site##theonononline\n\t\t- view it on your smart phone##onthephonejjj\n\t\t- note that the text is **very small**\n\t\t\t- while you can zoom in on the text\n\t\t\t- this can also be fixed by using the meta attribute **initial-scale=1.0** with proper HTML like this:\n\t\t\t\t-------------------------------------------------------------\n\t\t\t\t<!DOCTYPE html>\n\t\t\t\t<html lang=\"en\">\n\t\t\t\t<head>\n\t\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t\t<title>Document</title>\n\t\t\t\t</head>\n\t\t\t\t<body>\n\t\t\t\t\t<p>butter, bread, milk, yogurt, bananas, apples</p>\n\t\t\t\t</body>\n\t\t\t\t</html>\t\t\t\t\n\t\t\t\t-------------------------------------------------------------\n\t\t\t- push your changes to your GitHub repository\n\t\t\t- text is now **larger** on your smart phone##thebgggger\n- **SUMMARY**: \n\t- this example shows how easy it is to publish a simple text to the Internet, even with minimal knowledge of HTML","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-10 01:30:28","systemWhoCreated":"systemUnknown"},{"id":744,"category":"JS-DOM","title":"The difference between e.target and e.currentTarget","body":"- **what we will do**\n\t- create a HTML/CSS/JavaScript site that demonstrates what element **e.target** and **e.currentTarget** refer to when a DOM event fires\n- **code is here**\n\t- https://github.com/edwardtanguay/et942-jsdomtarget/blob/dev/index.html\n- **live site**\n\t- https://et942-jsdomtarget.vercel.app\n\t- site works like this#gif#dothedjsomdojio\n- **index.html**\n\t------------------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>target and currentTarget</title>\n\t\t<style>\n\t\t\t* {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tpadding: 1rem;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tbackground-color: rgb(124, 218, 124);\n\t\t\t}\n\n\t\t\tp {\n\t\t\t\tbackground-color: rgb(97, 194, 97);\n\t\t\t\tuser-select: none;\n\t\t\t}\n\n\t\t\tsection {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\t\t\t}\n\n\t\t\t.card {\n\t\t\t\tbackground-color: lightgreen;\n\t\t\t\twidth: 20rem;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tcursor: default\n\t\t\t}\n\n\t\t\t.data {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\twidth: 30rem;\n\t\t\t\tpadding: 1rem 1.5rem;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t}\n\n\t\t\t.targetNodeName {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: blue;\n\t\t\t}\n\n\t\t\t.currentTargetNodeName {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: red;\n\t\t\t}\n\n\t\t\th3 {\n\t\t\t\tmargin-top: .5rem;\n\t\t\t}\n\n\t\t\tul {\n\t\t\t\tmargin-left: 1rem;\n\t\t\t\tlist-style: none;\n\t\t\t}\n\t\t\t.note {\n\t\t\t\tfont-style: italic;\n\t\t\t\tfont-family: arial;\n\t\t\t\tcolor: #777;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section>\n\t\t\t<div class=\"card\">\n\t\t\t\t<h1>Test</h1>\n\t\t\t\t<p>Lorem ipsum dolor sit amet <strong>consectetur</strong> adipisicing elit. Voluptatum officiis eligendi,\n\t\t\t\t\tpraesentium ducimus <em>blanditiis</em> iusto perferendis temporibus nostrum animi aspernatur unde ut\n\t\t\t\t\tquo aliquid\n\t\t\t\t\tconsequuntur quis iste eveniet illo placeat.\n\t\t\t\t\tMagnam debitis quos totam dicta quas vero voluptatum harum tempore aut tenetur, rerum ad nam ullam\n\t\t\t\t\tfugit, unde voluptatem quaerat veniam soluta. Inventore possimus distinctio temporibus perferendis\n\t\t\t\t\texercitationem veniam assumenda.\n\t\t\t\t\tLibero nemo non quo alias inventore ipsam deleniti odit sunt vero eligendi sint eos dolor nulla, rerum\n\t\t\t\t\tcum, dignissimos corrupti odio et provident impedit? Qui, tempora ad! Eum, incidunt dolores?</p>\n\t\t\t</div>\n\t\t\t<div class=\"data\">\n\t\t\t\t<h3>e.target</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t<li class=\"note\">the element that triggered the event</li>\n\t\t\t\t\t<li>nodeName: <span class=\"targetNodeName\"></span></li>\n\t\t\t\t</ul>\n\t\t\t\t<h3>e.currentTarget</h3>\n\t\t\t\t<ul>\n\t\t\t\t\t<li class=\"note\">the element that the event listener is attached to</li>\n\t\t\t\t\t<li>nodeName: <span class=\"currentTargetNodeName\"></span></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</section>\n\t\t<script>\n\t\t\tconst cardElem = document.querySelector('.card');\n\t\t\tconst targetNodeNameElem = document.querySelector('.targetNodeName');\n\t\t\tconst currentTargetNodeNameElem = document.querySelector('.currentTargetNodeName');\n\n\t\t\tcardElem.addEventListener('click', (e) => {\n\t\t\t\tconst targetElem = e.target;\n\t\t\t\tconst currentTargetElem = e.currentTarget;\n\n\t\t\t\ttargetElem.style.backgroundColor = 'blue';\n\t\t\t\ttargetNodeNameElem.innerText = targetElem.nodeName;\n\n\t\t\t\tcurrentTargetElem.style.border = '2px solid red';\n\t\t\t\tcurrentTargetNodeNameElem.innerText = currentTargetElem.nodeName;\n\n\t\t\t})\n\t\t</script>\n\t</body>\n\n\t</html>\n\t------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-16 21:57:21","systemWhoCreated":"systemUnknown"},{"id":745,"category":"JS-DOM","title":"Demonstrate how JS-DOM event propagation works","body":"- **what we will do**\n\t- create a HTML/CSS/JavaScript site that demonstrates how **JS-DOM event propagation** works\n- **code is here**\n\t- https://github.com/edwardtanguay/et942-jsdomtarget/blob/dev/propagation.html\n- **live site**\n\t- https://et942-jsdomtarget.vercel.app/propagation.html\n\t- site works like this#gif#thedojdomsdoit\n- **index.html**\n\t------------------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>target and currentTarget</title>\n\t\t<style>\n\t\t\t* {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tpadding: 1rem;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tbackground-color: rgb(124, 218, 124);\n\t\t\t}\n\n\t\t\tp {\n\t\t\t\tbackground-color: rgb(97, 194, 97);\n\t\t\t\tuser-select: none;\n\t\t\t}\n\n\t\t\tsection {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\t\t\t}\n\n\t\t\t.card {\n\t\t\t\tbackground-color: lightgreen;\n\t\t\t\twidth: 20rem;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tcursor: default\n\t\t\t}\n\n\t\t\t.data {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\twidth: 30rem;\n\t\t\t\tpadding: 1rem 1.5rem;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t}\n\n\t\t\t.targetNodeName {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: blue;\n\t\t\t}\n\n\t\t\t.currentTargetNodeName {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: red;\n\t\t\t}\n\n\t\t\th3 {\n\t\t\t\tmargin-top: .5rem;\n\t\t\t\tmargin-bottom: .5rem;\n\t\t\t}\n\n\t\t\tol {\n\t\t\t\tmargin-left: 2rem;\n\t\t\t}\n\n\t\t\t.note {\n\t\t\t\tfont-style: italic;\n\t\t\t\tfont-family: arial;\n\t\t\t\tcolor: #777;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section>\n\t\t\t<div class=\"card\">\n\t\t\t\t<h1>Test</h1>\n\t\t\t\t<p>Lorem ipsum dolor sit amet <strong>consectetur</strong> adipisicing elit. Voluptatum officiis eligendi,\n\t\t\t\t\tpraesentium ducimus <em>blanditiis</em> iusto perferendis temporibus nostrum animi aspernatur unde ut\n\t\t\t\t\tquo aliquid\n\t\t\t\t\tconsequuntur quis iste eveniet illo placeat.\n\t\t\t\t\tMagnam debitis quos totam dicta quas vero voluptatum harum tempore aut tenetur, rerum ad nam ullam\n\t\t\t\t\tfugit, unde voluptatem quaerat veniam soluta. Inventore possimus distinctio temporibus perferendis\n\t\t\t\t\texercitationem veniam assumenda.\n\t\t\t\t\tLibero nemo non quo alias inventore ipsam deleniti odit sunt vero eligendi sint eos dolor nulla, rerum\n\t\t\t\t\tcum, dignissimos corrupti odio et provident impedit? Qui, tempora ad! Eum, incidunt dolores?</p>\n\t\t\t</div>\n\t\t\t<div class=\"data\">\n\t\t\t\t<h3>events ( <input type=\"checkbox\"\n\t\t\t\t\t\t   id=\"check\"> stopPropagation )</h3>\n\t\t\t\t<ol>\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t</section>\n\t\t<script>\n\t\t\tconst cardElem = document.querySelector('.card');\n\t\t\tconst h1Elem = document.querySelector('h1');\n\t\t\tconst eventListElem = document.querySelector('.data ol');\n\t\t\tconst pElem = document.querySelector('p');\n\t\t\tconst strongElem = document.querySelector('strong');\n\t\t\tconst emElem = document.querySelector('em');\n\t\t\tconst checkElem = document.getElementById(\"check\");\n\n\t\t\tconst showEvent = (text) => {\n\t\t\t\tconst li = document.createElement('li');\n\t\t\t\tli.innerText = text;\n\t\t\t\teventListElem.append(li);\n\t\t\t};\n\n\t\t\tcardElem.addEventListener('click', (e) => {\n\t\t\t\tif (checkElem.checked) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tshowEvent('div.card clicked');\n\t\t\t});\n\t\t\th1Elem.addEventListener('click', (e) => {\n\t\t\t\tif (checkElem.checked) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tshowEvent('h1 clicked');\n\t\t\t});\n\t\t\tpElem.addEventListener('click', (e) => {\n\t\t\t\tif (checkElem.checked) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tshowEvent('p clicked');\n\t\t\t});\n\t\t\tstrongElem.addEventListener('click', (e) => {\n\t\t\t\tif (checkElem.checked) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tshowEvent('strong clicked');\n\t\t\t});\n\t\t\temElem.addEventListener('click', (e) => {\n\t\t\t\tif (checkElem.checked) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tshowEvent('em clicked');\n\t\t\t});\n\t\t</script>\n\t</body>\n\n\t</html>\n\t------------------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-16 22:39:44","systemWhoCreated":"systemUnknown"},{"id":746,"category":"JS-DOM","title":"Create a JS-DOM form that builds an object of field data","body":"- **what we will build**\n\t- a form which has various kinds of input controls \n\t- which allows the user to input data that gets saved to an object\n- **code is here**\n\t- https://github.com/edwardtanguay/et942-jsdomtarget/blob/dev/basicform.html\n- **live site is here**\n\t- https://et942-jsdomtarget.vercel.app/basicform.html\n\t- site works like this:#gif#theformjsdomwokr\n- **basicform.html**\n\t---------------------------------------------\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\"\n\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>target and currentTarget</title>\n\t\t<style>\n\t\t\t* {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\tpadding: 1rem;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t}\n\n\t\t\tsection {\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\t\t\t}\n\n\t\t\tform {\n\t\t\t\tbackground-color: rgb(224, 224, 139);\n\t\t\t\twidth: 20rem;\n\t\t\t\tpadding: 1rem;\n\t\t\t\tborder-radius: .5rem;\n\t\t\t}\n\n\t\t\t.data {\n\t\t\t\tbackground-color: #eee;\n\t\t\t\twidth: 30rem;\n\t\t\t\tpadding: 1rem 1.5rem;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t}\n\n\t\t\tul {\n\t\t\t\tmargin-left: 2rem;\n\t\t\t}\n\n\t\t\tfieldset {\n\t\t\t\tpadding: .5rem 1rem .6rem 1rem;\n\t\t\t\tborder: solid 1px brown;\n\t\t\t\tborder-radius: 6px;\n\t\t\t\tmin-width: 200px;\n\t\t\t\tmargin-bottom: .5rem;\n\t\t\t}\n\n\t\t\tlegend {\n\t\t\t\tcolor: brown;\n\t\t\t\tfont-variant: small-caps;\n\t\t\t}\n\n\t\t\t.field {\n\t\t\t\tmargin-bottom: .5rem;\n\t\t\t}\n\t\t\t.field2 {\n\t\t\t\tmargin-bottom: .1rem;\n\t\t\t}\n\n\t\t\tinput {\n\t\t\t\tfont-size: 1rem;\n\t\t\t\twidth: 100%;\n\t\t\t\tmargin: .1rem 0;\n\t\t\t}\n\n\t\t\t.buttons {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: flex-end;\n\t\t\t\tmargin-top: .9rem;\n\t\t\t}\n\n\t\t\tbutton {\n\t\t\t\tfont-size: .95rem;\n\t\t\t\tpadding: .1rem .3rem;\n\t\t\t}\n\n\t\t\th3 {\n\t\t\t\tmargin-bottom: .5rem;\n\t\t\t}\n\n\t\t\t.output {\n\t\t\t\tcolor: brown;\n\t\t\t}\n\n\t\t\tinput[type=\"checkbox\"],\n\t\t\tinput[type=\"radio\"] {\n\t\t\t\tmargin: .5em 0;\n\t\t\t\twidth: auto;\n\t\t\t}\n\t\t</style>\n\t</head>\n\n\t<body>\n\t\t<section>\n\t\t\t<form>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Contact info: </legend>\n\n\t\t\t\t\t<div class=\"field\">\n\t\t\t\t\t\t<label for=\"fullName\">Full name:</label>\n\t\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\t\t   name=\"fullName\"\n\t\t\t\t\t\t\t   id=\"fullName\">\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"field\">\n\t\t\t\t\t\t<label for=\"email\">Email:</label>\n\t\t\t\t\t\t<input type=\"email\"\n\t\t\t\t\t\t\t   name=\"email\"\n\t\t\t\t\t\t\t   id=\"email\">\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"field\">\n\t\t\t\t\t\t<label for=\"phone\">Phone:</label>\n\t\t\t\t\t\t<input type=\"tel\"\n\t\t\t\t\t\t\t   name=\"phone\"\n\t\t\t\t\t\t\t   id=\"phone\">\n\t\t\t\t\t</div>\n\n\n\t\t\t\t</fieldset>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Food Preference:</legend>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t\t   id=\"vegetarian\"\n\t\t\t\t\t\t\t   value=\"vegetarian\"> <label for=\"vegetarian\">vegetarian</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t\t   id=\"vegan\"\n\t\t\t\t\t\t\t   value=\"vegan\"> <label for=\"vegan\">vegan</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"radio\"\n\t\t\t\t\t\t\t   name=\"food\"\n\t\t\t\t\t\t\t   id=\"noPreference\"\n\t\t\t\t\t\t\t   value=\"noPreference\"> <label for=\"noPreference\">no preference</label>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Activities</legend>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t   name=\"activities\"\n\t\t\t\t\t\t\t   id=\"yoga\"\n\t\t\t\t\t\t\t   value=\"yoga\"> <label for=\"yoga\">yoga</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t   name=\"activities\"\n\t\t\t\t\t\t\t   id=\"pilates\"\n\t\t\t\t\t\t\t   value=\"pilates\"> <label for=\"pilates\">pilates</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t   name=\"activities\"\n\t\t\t\t\t\t\t   id=\"strengthTraining\"\n\t\t\t\t\t\t\t   value=\"strengthTraining\"> <label for=\"strengthTraining\">strength training</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t   name=\"activities\"\n\t\t\t\t\t\t\t   id=\"boxing\"\n\t\t\t\t\t\t\t   value=\"boxing\"> <label for=\"boxing\">boxing</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t   name=\"activities\"\n\t\t\t\t\t\t\t   id=\"cardio\"\n\t\t\t\t\t\t\t   value=\"cardio\"> <label for=\"cardio\">cardio</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"field2\">\n\t\t\t\t\t\t<input type=\"checkbox\"\n\t\t\t\t\t\t\t   name=\"activities\"\n\t\t\t\t\t\t\t   id=\"meditation\"\n\t\t\t\t\t\t\t   value=\"meditation\"> <label for=\"meditation\">meditation</label>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\n\t\t\t\t<div class=\"buttons\">\n\t\t\t\t\t<button>Submit</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t<div class=\"data\">\n\t\t\t\t<h3>form data:</h3>\n\t\t\t\t<pre class=\"output\"></pre>\n\t\t\t</div>\n\t\t</section>\n\t\t<script>\n\t\t\tconst formElem = document.querySelector('form');\n\t\t\tconst outputElem = document.querySelector('.output');\n\n\t\t\tformElem.addEventListener('submit', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst formData = new FormData(e.target);\n\t\t\t\tconsole.log(formData);\n\t\t\t\tconst formDataObj = { };\n\t\t\t\tformData.forEach((value, key) => {\n\t\t\t\t\tformDataObj[key] = value;\n\t\t\t\t});\n\t\t\t\t\tformDataObj.activities = formData.getAll('activities')\n\t\t\t\toutputElem.innerText = JSON.stringify(formDataObj, null, 2);\n\t\t\t});\n\n\t\t</script>\n\t</body>\n\n\t</html>\n\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-17 01:20:49","systemWhoCreated":"systemUnknown"},{"id":747,"category":"JavaScript","title":"How to create a modular JavaScript website with CommonJS modules","body":"- **what we will do**\n\t- create a website that uses the old version of JavaScript modules **CommonJS**\n\t- note that you would learn this for **academic** or **legacy**, e.g. if you have to work on an old project that uses CommonJS modules\n\t- if you are creating a JavaScript modular site today (2023), use the newer [ES6 modules](https://tanguay-eu.vercel.app/howtos/742)\n- **final code is here**\n\t- https://github.com/edwardtanguay/et389-commonjs-site\n- **the final site is here**\n\t- https://et389-commonjs-site.vercel.app\n- **create base HTML site**\n\t- create directory for site, e.g. **et389-commonjs-site**\n\t\t- *if you are following along, don't use this name, but choose your own name, so you can have a unique url at Vercel later*\n\t- go into the directory and type `code .` which opens VSCode in the directory\n\t- create **index.html**\n\t\t--------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\">\n\t\t\t<meta name=\"viewport\"\n\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t<title>CommonJS Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>CommonJS Site</h1>\n\t\t\t<p>Welcome to this site.</p>\n\t\t</body>\n\n\t\t</html>\n\t\t--------------------------------------------\n\t- view it by right-clicking on the file name and selecting **Open with Live Server**##thedoandlookslive\n\t- site should look like this##thecommonjom\n- **create local Git repository**\n\t- `git init -b dev`\n\t- make initial commit\n- **add CSS**\n\t- **css/main.css**\n\t\t--------------------------------------------\n\t\tbody {\n\t\t\tpadding: 0 1rem;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\t\th1 {\n\t\t\tcolor: navy;\n\t\t}\n\t\t--------------------------------------------\n\t- **index.hml** add in head area\n\t\t----------------------------------------\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t----------------------------------------\n\t- site should look like this:##colorcommons\n- **add JavaScript without modules**\n\t- add button to **index.html**\n\t\t------------------------------------------\n\t\t<body>\n\t\t\t<h1>CommonJS Site</h1>\n\t\t\t<p>Welcome to this site.</p>\n\t\t\t<button class=\"btnInfo\">Info</button>\n\t\t</body>\n\t\t------------------------------------------\n\t- add in **js/main.js** an event handler\n\t\t---------------------------------------\n\t\tconst btnInfoElem = document.querySelector('.btnInfo');\n\n\t\tbtnInfoElem.addEventListener('click', () => {\n\t\t\talert('clicked');\n\t\t});\n\t\t---------------------------------------\n\t- PROBLEM: the button doesn't do anything when clicked\n\t\t- REASON: we have not referenced the JavaScript code from the **index.html** file yet\n\t\t- SOLUTION: in **index.html**, reference the JavaScript file from inside the HEAD section\n\t\t\t-----------------------------------------\n\t\t\t<title>Modular Site Test</title>\n\t\t\t<script src=\"js/main.js\"></script>\t\t\n\t\t\t-----------------------------------------\n\t- PROBLEM: the button still doesn't do anything when clicked\n\t\t- REASON: when the JavaScript is executed, the HTML button element doesn't exist yet\n\t\t- SOLUTION: in **index.html**, move the **script** line down to right before the **</body>** tag\n\t\t\t-----------------------------------------\n\t\t\t\t<script src=\"js/main.js\"></script>\n\t\t\t</body>\t\n\t\t\t-----------------------------------------\n\t- when you click the button, the attached event code is executed:##stilwokrjsoj\n\t- but since HTML 5, you can keep the **script** code block that references JavaScript files in the HEAD section by using the **defer** attribute\n\t\t-----------------------------------------------------------------\n\t\t<title>Modular Site Test</title>\n\t\t<script src=\"js/main.js\" defer></script>\n\t\t-----------------------------------------------------------------\n\t- the button continues to work\n\t- now let's change the text above the button when it is clicked\n\t\t- in **index.html** add a class to the **<p>** tag\n\t\t\t----------------------------------------------\n\t\t\t<p class=\"message\">Welcome to this site.</p>\n\t\t\t----------------------------------------------\n\t\t- **main.js**\n\t\t\t------------------------------------------------\n\t\t\tconst btnInfoElem = document.querySelector('.btnInfo');\n\t\t\tconst messageElem = document.querySelector('.message');\n\n\t\t\tbtnInfoElem.addEventListener('click', () => {\n\t\t\t\tmessageElem.innerText = 'the button has been clicked'\n\t\t\t});\t\t\t\n\t\t\t------------------------------------------------\n\t\t- now when you click on the button, the text above it changes:##thebuttonwrjsokuw\n- add JavaScript module \t\n\t- we will now add a JavaScript module file called **tools.js** which exports a function\n\t- we will then import that function into **main.js**\n\t- **js/tools.js**\n\t\t----------------------------------------------------\n\t\texports.sentencize = (text) => {\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1) + '.';\n\t\t};\t\t\n\t\t----------------------------------------------------\n\t- **notice the difference of syntax from ES6 modules:**\n\t\t------------------------------------------\n\t\texport const sentencize = (text) => {\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1) + '.';\n\t\t}\n\t\t------------------------------------------\n\t- **js/main.js**\n\t\t-----------------------------------\n\t\tconst tools = require('./tools.js');\n\n\t\tconst btnInfoElem = document.querySelector('.btnInfo');\n\t\tconst messageElem = document.querySelector('.message');\n\n\t\tbtnInfoElem.addEventListener('click', () => {\n\t\t\tconst sentence = tools.sentencize('the button has been clicked');\n\t\t\tmessageElem.innerText = sentence;\n\t\t});\n\t\t------------------------------------------\n\t- **notice the difference of syntax from ES6 modules:**\t\n\t\t-----------------------------------\n\t\timport * as tools from './tools.js';\n\t\t-----------------------------------\t\t\t\n\t- PROBLEM: the button doesn't work and the browser shows an error:##therroeisthere\n\t- PROBLEM: the deeper problem here is that **browsers do not support CommonJS modules**\n\t- SOLUTION: you need to use **[Browserify](https://browserify.org/#install)** to convert your CommonJS modules to JavaScript that browsers can use\n\t\t- **Browserify** \n\t\t\t- is an open-source JavaScript tool \n\t\t\t- created in 2011\n\t\t\t- it allows developers to use CommonJS modules in the browser\n\t\t\t- it bundles together CommonJS modules into a single JavaScript file typically called **bundle.js**\n\t\t\t- this JavaScript file can be loaded and executed in a web browser\n\t\t- install Browserify globally on your computer\n\t\t\t- `npm install -g browserify`\n\t\t- transpile your CommonJS JavaScript files into a file that your browser can read\n\t\t\t- `browserify js/main.js -o js/bundle.js`\n\t\t\t- you will now find a file called **js/bundle.js** in your project##thebundlesj\n\t- PROBLEM: the button on your site still doesn't work\n\t\t- SOLUTION: instead of **main.js**, you need to link **bundle.js**\n\t\t\t- **index.html** \n\t\t\t\t---------------------------------------------------\n\t\t\t\t<script src=\"js/bundle.js\" defer></script>\n\t\t\t\t---------------------------------------------------\n\t\t\t- your site now works:##sitenowkkkwork\n\t- set up build script\n\t\t- since you need to transpile your JavaScript code into **bundle.js** everytime you make a change\n\t\t- set up an npm script called **npm run bundle** which executes that command\n\t\t- create npm project\n\t\t\t- `npm init -y`\n\t\t- in **package.json** make the bundle script\n\t\t\t------------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"bundle\": \"browserify js/main.js -o js/bundle.js\"\n\t\t\t},\t\t\t\n\t\t\t------------------------------------------\n\t\t- test the script\n\t\t\t- make a small change in **main.js**\n\t\t\t\t------------------------------------------------\n\t\t\t\tmessageElem.innerText = tools.sentencize('the button has been clicked222');\n\t\t\t\t------------------------------------------------\n\t\t\t- note that the change is not yet in your site, since your site reads **bundle.js** now\n\t\t\t- run the script:\n\t\t\t\t- `npm run bundle`##againrunbundle\n\t\t\t- you now see the change:##nowthe222ok\n\t\t\t- revert the change in **main.js**\n\t\t\t\t------------------------------------------------\n\t\t\t\tmessageElem.innerText = tools.sentencize('the button has been clicked');\n\t\t\t\t------------------------------------------------\n\t\t\t- run the script again:\n\t\t\t\t- `npm run bundle`\n- publish to Vercel\n\t- push your code to GitHub\n\t- go to https://vercel.com\n\t- click **Add new...** and **Project**\n\t- click the **Import** button next to your repository\n\t- click **Deploy**\n\t- the site works online at Vercel:nnn\n\t- note that Vercel doesn't run **npm run bundle** as it runs **npm run build** for a Vite site\n\t\t- **npm run bundle** is a script we run manually to create **js/bundle.js**\n\t\t\t- this enables our site to work locally with **js/bundle.js**\n\t\t\t- then we upload this file with all our other files (**index.html** and **index.css**)\n\t\t\t- technically we don't need to upload **main.js** or **tools.js** since their code is contained in **bundle.js**\n\t\t\t- we could create a build process with e.g. WebPack, Gulp, Parcel, etc. which then copies all files to **/dist** much like Vite\n\t\t\t- if you have to work on a legacy CommonJS project, it will probably have some build workflow like this\n\t\t\t- but this Howto was merely to demonstrate how CommonJS modules work in general\n- CommonJS module sites in context\n\t- if you are creating a new JavaScript module site, then **do not use CommonJS**, since it is an outdated technology\n\t\t- use the newer [ES6 modules](https://tanguay-eu.vercel.app/howtos/742) instead\n\t- and unless you are creating an extremely simple site without TypeScript, Sass, Tailwind, unit testing, or any npm dependencies (axios, cors, marked, dayjs, lodash-es, etc.)\n\t\t- then you want to **use a JavaScript framework** such as \n\t\t\t- [Vite Vanilla JS-DOM](https://tanguay-eu.vercel.app/howtos/739)\n\t\t\t- [Vite Vanilla JS-DOM site with pages and router](https://starters.tanguay.eu/list/darkViteVanillaMenu)\n\t\t\t- Vite React\n\t\t\t- Angular\n\t\t\t- Vue.js\n\t\t\t- Next.js\n\t\t\t- Svelte\n\t\t\t- etc.\t\t\n\t- for an overview of the many ways to create JavaScript websites, see:\n\t\t- [An overview of the many ways to build websites from HTML/CSS to JS-DOM to SPA/SSR/SSG frameworks](https://tanguay-eu.vercel.app/howtos/740)","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-17 22:54:43","systemWhoCreated":"systemUnknown"},{"id":748,"category":"web bundling","title":"Use Parcel to create a JS-DOM website that uses Sass, TypeScript, Tailwind, JSON-loading, components, API-loading and publish at Vercel","body":"- **what we will do**\n\t- build a JS-DOM site that:\n\t\t- uses Sass and Tailwind \n\t\t- uses TypeScript\n\t\t- loads JSON files for data\n\t\t- fetches data from APIs via both fetch and axios\n\t\t- has React-style components\n\t\t- uses images (in /public folder)\n\t\t\t- using: parcel-reporter-static-files-copy\n\t\t- works like Vite React sites (`npm run dev` and `npm run build`)\n\t\t- can be easily published at Vercel\n- **code is here**\n\t- project 1: https://github.com/edwardtanguay/et811-parcel-site\n\t- project 2: https://github.com/edwardtanguay/et998-parcel-site\n- **live site is here**\n\t- project 1: https://et811-parcel-site.vercel.app\n\t- project 2: https://et998-parcel-site.vercel.app\n- rough notes\n\t- **setup npm project**\n\t\t- create directory\n\t\t- `npm init -y`\n\t- follow instructions on Parcel install page\n\t\t- https://parceljs.org/getting-started/webapp\n\t- **CSS**\n\t\t- remove link in index.html\n\t\t- import from main.js\n\t- **publish at Vercel**\n\t\t- **package.json**\n\t\t\t------------------------------------------------\n\t\t\t\"source\": \"index.html\",\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"npx parcel index.html\",\n\t\t\t\t\"build\": \"parcel build\"\n\t\t\t},\n\n\t\t\t(remove `\"main\": \"index.js\",`)\n\t\t\t------------------------------------------------\n\t- **structure**\n\t\t- index.html\n\t\t- src\n\t\t\t- main.js\n\t\t\t- style.css\n\t- **Sass**\n\t\t- just rename the extension from css to scss\n\t- **Tailwind**\n\t\t- we are setting this project up with the Vite structure so\n\t\t\t- follow instructions here: https://tailwindcss.com/docs/guides/vite\n\t- **TypeScript**\n\t\t- change the extensions from js to ts\n\t\t- index.html\n\t\t\t- change main.js to main.ts\n\t\t- **tsconfig.json**\n\t\t\t------------------------------------------------------\n\t\t\t{\n\t\t\t\t\"include\": [\n\t\t\t\t\t\"src/**/*\"\n\t\t\t\t],\n\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\"target\": \"es2022\",\n\t\t\t\t\t\"module\": \"es2022\",\n\t\t\t\t\t\"lib\": [\n\t\t\t\t\t\t\"ES2020\",\n\t\t\t\t\t\t\"DOM\",\n\t\t\t\t\t\t\"DOM.Iterable\"\n\t\t\t\t\t],\n\t\t\t\t\t\"strict\": true,\n\t\t\t\t\t\"moduleResolution\": \"bundler\",\n\t\t\t\t\t\"allowImportingTsExtensions\": true,\n\t\t\t\t\t\"resolveJsonModule\": true,\n\t\t\t\t\t\"isolatedModules\": true,\n\t\t\t\t\t\"noEmit\": true\n\t\t\t\t}\n\t\t\t}\n\t\t\t------------------------------------------------------\n\t- **images**\n\t\t- create image e.g. `public/images/test.png`\n\t\t- **main.ts**\n\t\t\t-----------------------------------------------\n\t\t\t<img class=\"rounded\" src=\"images/test.png\"/>\n\t\t\t-----------------------------------------------\n\t\t- set up directories and files in `public` to be copied to `dist` on build ([https://github.com/elwin013/parcel-reporter-static-files-copy](info))\n\t\t\t- `npm i -D parcel-reporter-static-files-copy`\n\t\t\t- create in root the file **.parcelrc**\n\t\t\t\t--------------------------------------------------------\n\t\t\t\t{\n\t\t\t\t  \"extends\": [\"@parcel/config-default\"],\n\t\t\t\t  \"reporters\":  [\"...\", \"parcel-reporter-static-files-copy\"]\n\t\t\t\t}\n\t\t\t\t--------------------------------------------------------\n\t\t\t- **package.json**\n\t\t\t\t------------------------------------------\n\t\t\t\t\"staticFiles\": {\n\t\t\t\t\t\"staticPath\": \"customStatic\"\n\t\t\t\t}\t\t\t\t\n\t\t\t\t------------------------------------------\n\t- **create components**\n\t\t- as in any JS-DOM ES6 module site\n\t- **JSON data**\n\t\t- **src/data/skills.json**\n\t\t\t- contents from [https://edwardtanguay.vercel.app/share/skills.json](https://edwardtanguay.vercel.app/share/skills.json)\n\t- **interfaces.ts**\n\t\t- export interfaces\n\t- API\n\t\t- fetch\n\t\t- axios","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-19 08:17:39","systemWhoCreated":"systemUnknown"},{"id":749,"category":"JSON","title":"Create a website that displays data from a JSON file","body":"- **what we will do**\n\t- since we want to create a website that reads a JSON file\n\t\t- and display specific employee information from the file on the website\n\t\t\t- specific **fields**: first name, last name, city\n\t\t\t- sorted in a specific **order**: sorted by last name\n\t\t\t- display **relationships** between the employees: who each employee reports to\n\t- creating a simple HTML/CSS/JavaScript site would not work\n\t\t- since websites cannot read data from the client's hard drive\n\t\t- this is a good thing, otherwise any website you visit could read any file on your computer (!)\n\t- therefore we need to create a site with a framework such as Vite JS-DOM\n\t\t- this framework has a backend which reads the file while we are developing\n\t\t- when the site is published e.g. at Vercel\n\t\t\t- the **npm run build** process converts the JSON file into a **JavaScript object**\n\t\t\t\t- which exists in the JavaScript code\n\t\t\t\t- which is sent to the browser along with the HTML and CSS\n- **code is here**\n\t- https://github.com/edwardtanguay/et558-json-data-site\n- **finished site is online here**\n\t- https://et558-json-data-site.vercel.app##toreportsok\n- **>>> 1. CREATE A MINIMAL JS-DOM SITE WITH VITE**\n\t- create base site\n\t\t- `npm create vite@latest`\n\t\t- name of project, e.g. **et558-json-data-site** (choose your own project name of course)\n\t\t- Vanilla\n\t\t- TypeScript\n\t- open site in VSCode and start\n\t\t- `code et558-json-data-site**`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- minimalize site\n\t\t- delete **counter.ts**\n\t\t- **main.ts**\n\t\t\t----------------------------------\n\t\t\timport './style.css'\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t\t<h1>Employees</h1>\n\t\t\t<p>testing</p>\n\t\t\t`;\t\t\t\n\t\t\t----------------------------------\n\t\t- empty **style.css**\n\t\t- delete **typescript.svg**\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<title>Employees</title>\t\t\t\n\t\t\t-------------------------------\n\t\t- **style.css**\n\t\t\t----------------------------------------\n\t\t\tbody {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- minimalized site looks like this:##theminforjson\n- **>>> 2. CREATE JSON FILE**\n\t- we will now create a JSON file that contains employee data \n\t- go to: https://edwardtanguay.vercel.app/share/employees.json\n\t- click on **raw data**##therawdatas\n\t- **CTRL-A**, **CTRL-C**\n\t- create a new file: **src/data/employees.json**\n\t- click inside the file and paste the copied data in with **CTRL-V**\n\t- you should have a file that looks like this:##thelookfiljson\n- **>>> 3. READ AND DISPLAY DATA FROM THE JSON FILE**\n\t- note that this file contains a **JSON array of objects**\n\t- we will now read this file into a **JavaScript array of objects**\n\t- **main.ts**\n\t\t------------------------------------------\n\t\timport './style.css';\n\t\timport employees from './data/employees.json';\n\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t<h1>Employees</h1>\n\t\t<p>There are ${employees.length} employees.</p>\n\t\t`;\n\t\t------------------------------------------\n\t- your site now shows that the **employees** array has 9 objects:##hasnineoks\n- **>>> 4. DISPLAY DETAILED DATA FROM THE EMPLOYEES ARRAY**\n\t- let's now display\n\t\t- the full name of each employee\n\t\t- the city they are from\n\t- **main.ts**\n\t\t--------------------------------------------\n\t\t<ul>\n\t\t\t${employees.map(employee => {\n\t\t\t\treturn /*html*/ `\n\t\t\t\t\t<li>${employee.firstName} <strong>${employee.lastName}</strong> - ${employee.address.city}</li>\t\n\t\t\t\t`\n\t\t\t}).join('')}\n\t\t</ul>\n\t\t`;\n\t\t--------------------------------------------\n\t- the employee list should look like this:##thefififemplist\n- **>>> 5. SORT THE LIST OF EMPLOYEES BY LAST NAME**\n\t- **main.ts**\n\t\t----------------------------------------------\n\t\temployees.sort((a, b) => a.lastName > b.lastName ? 1 : -1);\n\t\t----------------------------------------------\n\t- the employee list should look like this:##thefififemplist222\n- **>>> 6. ALSO LIST TO WHOM EACH EMPLOYEE REPORTS**\n\t- **main.ts**\n\t\t-------------------------------------------------\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t<h1>Employees</h1>\n\t\t<p>There are ${employees.length} employees.</p>\n\t\t<ul>\n\t\t\t${employees.map(employee => {\n\t\t\treturn /*html*/ `\n\t\t\t\t\t<li>${employee.firstName} <strong>${employee.lastName}</strong> - ${employee.address.city}\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>reports to: <span class=\"reportsTo\">${getManagerName(Number(employee.reportsTo))}</span></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n\t\t\t\t`\n\t\t}).join('')}\n\t\t</ul>\n\t\t`;\n\n\t\tfunction getManagerName(reportsTo: number) {\n\t\t\tif (isNaN(reportsTo)) {\n\t\t\t\treturn 'nobody';\n\t\t\t} else {\n\t\t\t\tconst employee = employees.find(m => m.employeeID === reportsTo);\n\t\t\t\tif (employee) {\n\t\t\t\t\treturn employee.firstName + ' ' + employee.lastName;\n\t\t\t\t} else {\n\t\t\t\t\treturn `(error: employee #${reportsTo} does not exist)`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t-------------------------------------------------\n\t- you should now see who each employee reports to:##toreportsok\n- **>>> 7. UNDERSTAND HOW THIS WEBSITE \"READS A JSON FILE\" FROM THE HARD DRIVE**\n\t- a Vite site has a **backend** (it runs in **Node**) which **generates the website** you see\n\t\t - and thus has access to the **JSON file**\n\t- everytime you make a **change** to the site as you developer\n\t\t- Vite **compiles** all your files into HTML/CSS/JavaScript which is then sent to your browser\n\t\t- this happens very fast since for this compilation, Vite uses the extremely fast **[esbuild](https://esbuild.github.io/)** bundler\n\t- when you build the website for **production**, you can see the files that it produces\n\t\t- type `npm run build` into the terminal\n\t\t- when building for production, Vite uses the **[Rollup](https://rollupjs.org)** which is slower but more sophisticated than esbuild\n\t\t- this process creates the files for production##lookintojs\n\t- look into the **index-(random-letters-numbers).js** file that was produced\n\t\t- you see that in it there is a variable \"**a**\" whose content is the entire employees array##readsafilefake\n\t- this JavaScript file will be **sent to the browser** along with the HTML and CSS files\n\t- so when your users visit your website, your JSON file **is not read from the hard drive** at all\n\t\t- rather, this **JavaScript array** that contains the content of your original JSON file is simply **sent down to the browser** with the rest of the HTML, CSS and JavaScript","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-22 08:02:31","systemWhoCreated":"systemUnknown"},{"id":750,"category":"localStorage","title":"Create a JS-DOM flashcard site that uses localStorage","body":"- **what we're going to build**\n\t- create a site that allows a user to practice flashcards\n\t- the flashcards have a front and a back property\n\t- the list of flashcard fronts are shown\n\t- clicking on the front of a flashcard shows and hides the back\n\t- a \"learned\" button marks the flaschard as learned\n\t- the user can test themselves on the flashcards, marking them \"test again\" or \"learned\"\n\t- all data that can change on the site is saved in **appData**\n\t\t- title\n\t\t- flashcards\n\t\t- (you could add more later)\n\t- any time the state changes on the flashcards, e.g. \n\t\t- 1. if they are **open/closed**\n\t\t- 2. if they are marked as **learned**\n\t\t- the **whole appData object** is saved to localStorage \n\t- when a user comes to the site, or when the site is reloaded\n\t\t- we check the localStorage to see if there is a variable called **appData**\n\t\t- if so, the appData is loaded and the application is refreshed with its data\n- **code is here**\n\t- https://github.com/edwardtanguay/et339-flashcard-localstorage-site\n- **live site is here**\n\t- https://et339-flashcard-localstorage-site.vercel.app\n\t- and works like this:#gif#thesitemaintainsteate\n- **>>> 1. CREATE A MINIMAL JS-DOM SITE WITH VITE**\n\t- create base site\n\t\t- `npm create vite@latest`\n\t\t- name of project, e.g. **et339-flashcard-localstorage-site** (choose your own project name of course)\n\t\t- Vanilla\n\t\t- TypeScript\n\t- open site in VSCode and start\n\t\t- `code et339-flashcard-localstorage-site**`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- minimalize site\n\t\t- delete **counter.ts**\n\t\t- **main.ts**\n\t\t\t----------------------------------\n\t\t\timport './style.css'\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n\t\t\t<h1>Flashcards</h1>\n\t\t\t<p>testing</p>\n\t\t\t`;\t\t\t\n\t\t\t----------------------------------\n\t\t- empty **style.css**\n\t\t- delete **typescript.svg**\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<title>Flashcards</title>\t\t\t\n\t\t\t-------------------------------\n\t\t- **style.css**\n\t\t\t----------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #ccc;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- install Git\n\t\t\t- `git init -b dev`\n\t\t\t- make initial commit\n\t\t- minimalized site looks like this:##tehfflfflash\n- **>>> 2. CREATE A WORKING FLASHCARD SITE WITH PREDEFINED CARDS**\n\t- define predefined cards\n\t\t- **main.ts**\n\t\t\t--------------------------------------------\n\t\t\tconst appData = {\n\t\t\t\ttitle: \"Flashcards\",\n\t\t\t\tflashcards: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfront: \"in view of the situation\",\n\t\t\t\t\t\tback: \"in Anbetracht der Situation\",\n\t\t\t\t\t\tshowingBack: false,\n\t\t\t\t\t\tstatus: \"testing\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfront: \"the negotiation\",\n\t\t\t\t\t\tback: \"die Verhandlung\",\n\t\t\t\t\t\tshowingBack: false,\n\t\t\t\t\t\tstatus: \"testing\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfront: \"comprehensive\",\n\t\t\t\t\t\tback: \"umfassend\",\n\t\t\t\t\t\tshowingBack: false,\n\t\t\t\t\t\tstatus: \"testing\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\t\t\n\t\t\t--------------------------------------------\n\t- display all appData including title and flashcards\n\t\t- **main.ts**\n\t\t\t--------------------------------------------\n\t\t\t<h1>${appData.title}</h1>\n\n\t\t\t<div class=\"flashcards\">\n\t\t\t\t${appData.flashcards.map(flashcard => {\n\t\t\t\treturn `\n\t\t\t\t\t\t<div class=\"flashcard\">\n\t\t\t\t\t\t\t<div class=\"front\">${flashcard.front}</div>\n\t\t\t\t\t\t\t<div class=\"back\">${flashcard.back}</div>\n\t\t\t\t\t\t</div>`\n\t\t\t}).join('')}\n\t\t\t</div>\n\t\t\t--------------------------------------------\n\t- site should look like this:##thethissiteflash\n\t- add styling\n\t\t- install Sass for easier styling of flashcards\n\t\t\t- `npm i -D sass`\n\t\t- rename **style.css** to **style.scss**\n\t\t- **main.ts**\n\t\t\t-------------------------------------------------------\n\t\t\timport './style.scss'\n\t\t\t-------------------------------------------------------\n\t\t- add styles to flashcards\n\t\t\t------------------------------------------------\n\t\t\t.flashcards {\n\t\t\t\t.flashcard {\n\t\t\t\t\tbackground-color: #444;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t\tpadding: 1rem;\n\t\t\t\t\twidth: fit-content;\n\t\t\t\t\tborder-radius: .5rem;\n\n\t\t\t\t\t.front {\n\t\t\t\t\t\tcolor: rgb(255, 255, 255);\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t}\n\n\t\t\t\t\t.back {\n\t\t\t\t\t\tcolor: yellow;\n\t\t\t\t\t\tfont-style: italic;\n\t\t\t\t\t\tmargin-top: .5rem;\n\t\t\t\t\t\tdisplay: none;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t------------------------------------------------\n\t\t- site should look like this:##thestylewithnoflick\n\t- enable user to reveal the back text by clicking the front text\n\t\t- **main.ts**\n\t\t\t------------------------------------------------------\n\t\t\tconst frontElems = document.querySelectorAll<HTMLDivElement>('.front');\n\t\t\tfor (const frontElem of frontElems) {\n\t\t\t\tfrontElem.addEventListener('click', () => {\n\t\t\t\t\tconst backElem = frontElem.nextElementSibling;\n\t\t\t\t\tif (backElem) {\n\t\t\t\t\t\t(backElem as HTMLDivElement).style.display = 'block';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\t------------------------------------------------------\n\t- site should work like this:#gif#worktheflashopen\n- **>>> 3. CREATE TOOLS MODULE AND ADD INTERACTIVE CODE TO IT**\n\t- before we start adding functionality to the site, let's put all interactive code in one place\n\t- this is an example of **separation of concerns** and **code organization**\n\t- create **tools.ts** and move current code in as a function\n\t\t-----------------------------------------------------\n\t\texport const addEventsToFlashcardFronts = () => {\n\t\t\tconst frontElems = document.querySelectorAll<HTMLDivElement>('.front');\n\t\t\tfor (const frontElem of frontElems) {\n\t\t\t\tfrontElem.addEventListener('click', () => {\n\t\t\t\t\tconst backElem = frontElem.nextElementSibling;\n\t\t\t\t\tif (backElem) {\n\t\t\t\t\t\t(backElem as HTMLDivElement).style.display = 'block';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t-----------------------------------------------------\n\t- **main.ts**\n\t\t---------------------------------------------------\n\t\taddEventsToFlashcardFronts();\n\t\t---------------------------------------------------\n\t- because in creating a function for this code, we have to name it\n\t\t- the name of the function becomes a kind of comment which makes the code easy to read and understand\n- **>>> 4. SAVE STATE CHANGE TO APPDATA WHEN CARDS ARE OPENED**\n\t- we now want to always **update appData** when any card is opened\n\t- we will **temporarily display the state on the screen** as well so that we can see how the state changes when we open flashcards\n\t- this is the **preparation for the next step** which will be to save the appData in localStore\n\t- create **interfaces.ts**\n\t\t-----------------------------------------------------\n\t\texport interface IFlashcard {\n\t\t\tfront: string;\n\t\t\tback: string;\n\t\t\tshowingBack: boolean;\n\t\t\tstatus: string;\n\t\t}\n\t\texport interface IAppData {\n\t\t\ttitle: string;\n\t\t\tflashcards: IFlashcard[];\n\t\t}\t\t\n\t\t-----------------------------------------------------\n\t- **main.ts**\n\t\t--------------------------------------------------\n\t\t<div class=\"debugArea\">\n\t\t<hr>\n\t\t<pre class=\"showAppData\"></pre>\n\t\t<hr>\n\t\t</div>\t\t\n\t\t--------------------------------------------------\n\t- **tools.ts**\n\t\t---------------------------------------------------\n\t\timport { IAppData } from \"./interfaces\";\n\t\timport * as tools from './tools';\n\n\t\texport const showAppData = (appData: IAppData) => {\n\t\t\tconst showAppDataElem = document.querySelector<HTMLPreElement>('.showAppData');\n\t\t\tif (showAppDataElem) {\n\t\t\t\tshowAppDataElem.innerText = JSON.stringify(appData, null, 2);\n\t\t\t}\n\t\t}\n\n\t\texport const addEventsToFlashcardFronts = (appData: IAppData) => {\n\t\t\tconst frontElems = document.querySelectorAll<HTMLDivElement>('.front');\n\t\t\tfor (const frontElem of frontElems) {\n\t\t\t\tfrontElem.addEventListener('click', () => {\n\t\t\t\t\tconst backElem = frontElem.nextElementSibling;\n\t\t\t\t\tif (backElem) {\n\t\t\t\t\t\t(backElem as HTMLDivElement).style.display = 'block';\n\t\t\t\t\t\tconst flashcard = appData.flashcards.find(m => m.front === frontElem.innerText);\n\t\t\t\t\t\tif (flashcard) {\n\t\t\t\t\t\t\tflashcard.showingBack = true;\n\t\t\t\t\t\t\ttools.showAppData(appData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\t---------------------------------------------------\n\t- site should now show the current state of the app:#gif#thesiteworkclicktrue\n- **>>> 5. ADD BUTTONS TO CHANGE STATE AND STATUS OF FLASHCARD**\n\t- this has to be completely refactored to emulate React-like state\n\t- **interfaces.ts**\n\t\t------------------------------------------------\n\t\texport interface IFlashcard {\n\t\t\tfront: string;\n\t\t\tback: string;\n\t\t\tshowingBack: boolean;\n\t\t\tstatus: string;\n\t\t}\n\t\texport interface IAppData {\n\t\t\ttitleTesting: string;\n\t\t\ttitleLearned: string;\n\t\t\tflashcards: IFlashcard[];\n\t\t}\n\t\t------------------------------------------------\n\t- **main.ts**\n\t\t-------------------------------------------------\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t<h1>${appData.titleTesting}</h1>\n\t\t<div class=\"testedFlashcards\"> </div>\n\t\t<div class=\"debugArea\">\n\t\t\t<hr>\n\t\t\t<pre class=\"showAppData\"></pre>\n\t\t\t<hr>\n\t\t</div>\n\t\t<h2>${appData.titleLearned}</h2>\n\t\t<div class=\"learnedFlashcards\"> </div>\n\t\t`;\n\n\t\ttools.redrawSite(appData);\t\t\n\t\t-------------------------------------------------\n\t- **tools.ts**\n\t\t-----------------------------------------------------\n\t\timport { IAppData } from \"./interfaces\";\n\t\timport * as tools from './tools';\n\n\t\texport const redrawSite = (appData: IAppData) => {\n\n\n\t\t\t// FLASHCARDS BEING TESTED\n\t\t\tconst testedFlashcardElems = document.querySelector('.testedFlashcards');\n\t\t\tif (testedFlashcardElems) {\n\t\t\t\ttestedFlashcardElems.innerHTML = `\n\t\t\t\t\t${appData.flashcards.map(flashcard => {\n\t\t\t\t\tif (flashcard.status === 'testing') {\n\t\t\t\t\t\treturn `\n\t\t\t\t\t\t<div class=\"flashcard\">\n\t\t\t\t\t\t\t<div class=\"front\">${flashcard.front}</div>\n\t\t\t\t\t\t\t<div class=\"back\" ${flashcard.showingBack ? 'style=\"display: block\"' : 'style=\"display: none\"'}><span class=\"text\">${flashcard.back}</span>\n\t\t\t\t\t\t\t\t<div class=\"buttonArea\">\n\t\t\t\t\t\t\t\t\t<button>test again</button>\n\t\t\t\t\t\t\t\t\t<button>learned</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>`\n\t\t\t\t\t}\n\t\t\t\t}).join('')}`\n\t\t\t}\n\n\t\t\t// APPDATA\n\t\t\tconst showAppDataElem = document.querySelector<HTMLPreElement>('.showAppData');\n\t\t\tif (showAppDataElem) {\n\t\t\t\tshowAppDataElem.innerText = JSON.stringify(appData, null, 2);\n\t\t\t}\n\n\t\t\t// FLASHCARDS LEARNED\n\t\t\tconst learnedFlashcards = document.querySelector('.learnedFlashcards');\n\t\t\tif (learnedFlashcards) {\n\t\t\t\tlearnedFlashcards.innerHTML = `\n\t\t\t\t<ol>\n\t\t\t\t\t${appData.flashcards.map(flashcard => {\n\t\t\t\t\tif (flashcard.status === 'learned') {\n\t\t\t\t\t\treturn `\n\t\t\t\t\t\t<li>${flashcard.front} = <strong>${flashcard.back}</strong></li>`\n\t\t\t\t\t}\n\t\t\t\t\t}).join('')}\n\t\t\t\t</ol>`\n\t\t\t}\n\t\t\ttools.addEventsToFlashcardFronts(appData);\n\t\t\ttools.addEventsToButtons(appData);\n\t\t}\n\n\t\texport const addEventsToFlashcardFronts = (appData: IAppData) => {\n\t\t\tconst frontElems = document.querySelectorAll<HTMLDivElement>('.front');\n\t\t\tfor (const frontElem of frontElems) {\n\t\t\t\tfrontElem.addEventListener('click', () => {\n\t\t\t\t\tconst backElem = frontElem.nextElementSibling;\n\t\t\t\t\tif (backElem) {\n\t\t\t\t\t\tconsole.log(backElem);\n\n\t\t\t\t\t\t(backElem as HTMLDivElement).innerHTML = 'nnn';\n\t\t\t\t\t\t(backElem as HTMLDivElement).style.display = 'block';\n\t\t\t\t\t\tconst flashcard = appData.flashcards.find(m => m.front === frontElem.innerText);\n\t\t\t\t\t\tif (flashcard) {\n\t\t\t\t\t\t\tflashcard.showingBack = true;\n\t\t\t\t\t\t\ttools.redrawSite(appData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\texport const addEventsToButtons = (appData: IAppData) => {\n\t\t\tconst backElems = document.querySelectorAll<HTMLDivElement>('.back');\n\t\t\tfor (const backElem of backElems) {\n\t\t\t\tconst backTextElem = backElem.querySelector<HTMLSpanElement>('.text');\n\t\t\t\tif (backTextElem) {\n\t\t\t\t\tconst backText = backTextElem.innerText;\n\t\t\t\t\tconst flashcard = appData.flashcards.find(m => m.back === backText);\n\t\t\t\t\tif (flashcard) {\n\t\t\t\t\t\tconst [takeAgainButtonElem, learnedButtonElem] = backElem.querySelectorAll<HTMLButtonElement>('button');\n\t\t\t\t\t\ttakeAgainButtonElem.addEventListener('click', () => {\n\t\t\t\t\t\t\tflashcard.showingBack = false;\n\t\t\t\t\t\t\t(backElem as HTMLDivElement).style.display = 'none';\n\t\t\t\t\t\t\ttools.redrawSite(appData);\n\t\t\t\t\t\t})\n\t\t\t\t\t\tlearnedButtonElem.addEventListener('click', () => {\n\t\t\t\t\t\t\tflashcard.showingBack = false;\n\t\t\t\t\t\t\tflashcard.status = 'learned';\n\t\t\t\t\t\t\t(backElem as HTMLDivElement).style.display = 'none';\n\t\t\t\t\t\t\ttools.redrawSite(appData);\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------------------\n- **>>> 6. SAVE APPSTATE IN LOCALSTORAGE AND LOAD IT ON PAGE RELOAD**\n\t- note that we have refactored the application to save application state on each change\n\t\t- it is just a small step to save this appState to localStorage and read it back out again on page reload\n\t- first put the appData JavaScript object in a JSON file and import it\n\t\t- you can convert [JavaScript to JSON here](https://www.convertsimple.com/convert-javascript-to-json)\n\t- **tools.ts**\n\t\t-----------------------------------------------\n\t\timport _appData from './data/appData.json';\n\n\t\texport const restoreSiteState = (): IAppData => {\n\t\t\tconst localStorageAppState = localStorage.getItem('appData');\n\t\t\tif (localStorageAppState) {\n\t\t\t\treturn JSON.parse(localStorageAppState);\n\t\t\t} else {\n\t\t\t\treturn _appData;\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **main.ts**\n\t\t--------------------------------------\n\t\tconst appData = tools.restoreSiteState();\n\t\t--------------------------------------\n\t- the site will now maintain state:#gif#thesitemaintainsteate","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-22 23:00:27","systemWhoCreated":"systemUnknown"},{"id":751,"category":"json-server","title":"Build a local CRUD web application that reads, edits and saves data to a json-server","body":"- **(1) what we will learn**\n\t- how to perform CRUD with fetch and axios\n\t\t- CRUD = **C**react, **R*ead, **U**pdate, **D**elete\n\t- for this we need to have a backend which responds to the main REST verbs:\n\t\t- **GET** = fetch data\n\t\t- **POST** = add data\n\t\t- **PUT** = replace data (usually an entire object)\n\t\t- **PATCH** = replace some data (e.g. only one property of an object)\n\t\t- **DELETE** = remove data\n\t- one way to demonstrate how to use REST verbs would be to\n\t\t- create our own local backend with **Node/Express**\n\t\t- but this would be take a lot of effort to create all REST routes to support CRUD actions\n\t- much easier for our purposes is to use **[json-server](https://www.npmjs.com/package/json-server)** which\n\t\t- runs on a dedicated local port just like a typical Node/Express backend\n\t\t- allows you to send requests with REST verbs to GET, POST, PUT, PATCH and DELETE objects in arrays contained in one JSON file\n\t\t- allows you to set up a **full REST backend API** in a few minutes\n\t\t- while json-server is not recommended for online production sites (since it lacks authentication/authorization rules)\n\t\t\t- it is an **good tool** to create **local web applications** to **display/add/edit/delete** data in a JSON file\n\t\t\t- it is a **good academic tool** to learn how to use a **REST API** from your frontend\n\t- **code is here**\n\t\t- https://github.com/edwardtanguay/et882-vite-rest-json-server\n\t- **site should look and work like this**\n\t\t- nnn\n- **(2) what we will build**\n\t- in order to learn and use REST verbs\n\t\t- we will set up a local web application in **one directory**\n\t\t- this will technically be our **first full-stack web application**\n\t\t\t- **frontend*: Vite-JSDOM site on port 5990\n\t\t\t- **backend**: json-server on port 5995\n\t\t\t- **database**: `src/data/db.json`\n\t\t\t\t- an object with two properties, each which contains an array of objects:\n\t\t\t\t\t----------------------------------------\n\t\t\t\t\t{\n\t\t\t\t\t\t\"jobs\": [...],\n\t\t\t\t\t\t\"skills\": [...]\n\t\t\t\t\t}\n\t\t\t\t\t----------------------------------------\n\t\t\t\t- via REST requests from the frontend, we will be able to **perform all CRUD operations** on this database\n\t\t- the application will display job posts along with the skills that job posts requires\n\t\t- on the frontend, for both jobs and skills, there will be **add**, **edit** and **delete** buttons\n\t\t\t- using these buttons will change the data in the JSON file via sending REST requests to the backend json-server\n\t\t- since the application will run locally, and there only needs to be one user\n\t\t\t- we don't need to set up anything for **authentication**, **authorization** or **security**\n\t- the next steps will be\n\t\t- set up the **basis** of this application\n\t\t\t- so that we can start both frontend and backend with **npm run dev**\n\t\t- from the frontend:\n\t\t\t- practice performing **CRUD with fetch**\n\t\t\t- practice performing **CRUD with axios**\n\t\t- develop the site using **axios**\n- **(3) create a minimized Vite JS-DOM site**\n\t- create base site\n\t\t- `npm create vite@latest`\n\t\t- name of project, e.g. **et882-vite-rest-json-server** (choose your own project name of course)\n\t\t- Vanilla\n\t\t- TypeScript\n\t- open site in VSCode and start\n\t\t- `code et882-vite-rest-json-server`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- set up Git\n\t\t- `git init -b dev`\n\t- minimalize site\n\t\t- delete **counter.ts**\n\t\t- **main.ts**\n\t\t\t----------------------------------\n\t\t\timport './style.css'\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t<h1>Job Postings</h1>\n\t\t\t<p>testing</p>\n\t\t\t`;\t\t\t\n\t\t\t----------------------------------\n\t\t- empty **style.css**\n\t\t- delete **typescript.svg**\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<title>Job Postings</title>\t\t\t\n\t\t\t-------------------------------\n\t\t- **style.css**\n\t\t\t----------------------------------------\n\t\t\tbody {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\t\t\t\tbackground-color: rgb(57, 75, 25);\n\t\t\t\tcolor: #eee;\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- install Sass\n\t\t\t- `npm i -D sass`\n\t\t\t- rename all *.css** to **.scss**\n\t\t- **style.scss**\n\t\t\t----------------------------------------\n\t\t\tbody {\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\t\t\t\tbackground-color: rgb(57, 75, 25);\n\t\t\t\tcolor: #eee;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: orange;\n\t\t\t\t}\t\t\t  \n\t\t\t}\n\t\t\t----------------------------------------\t\t\t\n\t\t- minimalized site looks like this:##thejobposjjji\n- **>>> 2. Create backend and database**\n\t- since our backend will simply be a json-server serving a json file named **db.json**\n\t\t- we will not need to set up a Node/Express backend at all\n\t\t- json-server will do all the work for us providing all the API routes we need for the two collections in our db.json file:\n\t\t\t- jobs\n\t\t\t- skills\n\t- **backend/data/db.json** \n\t\t- create empty collections\n\t\t\t-----------------------------------------\n\t\t\t{\n\t\t\t\t\"jobs\": [],\n\t\t\t\t\"skills\": []\n\t\t\t}\n\t\t\t-----------------------------------------\n\t\t- replace **jobs** array with https://edwardtanguay.vercel.app/share/jobs.json\n\t\t- replace **skills** array with https://edwardtanguay.vercel.app/share/skills_with_id.json\n\t\t\t- NOTE: be sure to download **skills_with_id.json** since json-server requires all array items to have an **id** property\n\t\t\t\t- **jobs.json** has an id property but **skills.json** does not\n\t- set up backend and npm scripts\n\t\t- install **json-server** which will serve our JSON file via a REST API\n\t\t\t- `npm i -D json-server`\n\t\t- install **npm-run-all** in order to start both backend and frontend with **npm run dev**\n\t\t\t- `npm i -D npm-run-all`\n\t\t- **package.json**\n\t\t\t--------------------------------------------\n\t\t\t\"dev\": \"run-p api frontend\",\n\t\t\t\"api\": \"json-server --watch ./backend/data/db.json --port 5995\",\n\t\t\t\"frontend\": \"vite --port 5990\",\t\t\t\n\t\t\t--------------------------------------------\n\t\t- now type `npm run dev`\n\t\t- your frontend and backend should start like this:##thefrback\n\t- start the front end to make sure it works\n\t\t- http://localhost:5990\n\t- test the backend in the browser: \n\t\t- http://localhost:5995/jobs - you should see all jobs\n\t\t- http://localhost:5995/skills - you should see all skills##theskillsksfile\n\t- test all REST verbs with the VSCode **Rest Client extension**\n\t\t- in VSCode, install the [Rest Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) extension\n\t\t- in the root directory, create **test.rest**\n\t\t\t------------------------------------------------------\n\t\t\t@url = http://localhost:5995\n\n\t\t\t### GET ALL JOBS\n\t\t\t{{url}}/jobs\n\n\t\t\t### GET SINGLE JOB\n\t\t\t{{url}}/jobs/2\n\n\t\t\t### GET ALL SKILLS\n\t\t\t{{url}}/skills\n\n\t\t\t### GET SINGLE SKILL\n\t\t\t{{url}}/skills/2\n\t\t\t------------------------------------------------------\n\t\t- click on the links that appear to test:##theteslinksclick\n\t\t- add tests for the rest of the REST verbs, and test each one\n\t\t\t- **test.rest**\n\t\t\t\t---------------------------------------------------\n\t\t\t\t@url = http://localhost:5995\n\n\t\t\t\t### GET ALL JOBS\n\t\t\t\t{{url}}/jobs\n\n\t\t\t\t### GET SINGLE JOB\n\t\t\t\t{{url}}/jobs/2\n\n\t\t\t\t### CREATE NEW JOB\n\t\t\t\tPOST {{url}}/jobs\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"Frontend Developer TEST\",\n\t\t\t\t\t\"company\": \"Company Name TEST\",\n\t\t\t\t\t\"url\": \"http://TEST\",\n\t\t\t\t\t\"description\": \"test\",\n\t\t\t\t\t\"skillList\": \"skills TEST\",\n\t\t\t\t\t\"publicationDate\": \"2022-11-17\"\n\t\t\t\t}\n\n\t\t\t\t### REPLACE A JOB\n\t\t\t\tPUT {{url}}/jobs/1\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"title\": \"111 TEST\",\n\t\t\t\t\t\"company\": \"Company Name TEST\",\n\t\t\t\t\t\"url\": \"http://TEST\",\n\t\t\t\t\t\"description\": \"test\",\n\t\t\t\t\t\"skillList\": \"skills TEST\",\n\t\t\t\t\t\"publicationDate\": \"2022-11-17\"\n\t\t\t\t}\n\n\t\t\t\t### CHANGE A PROPERTY ON A JOB\n\t\t\t\tPATCH {{url}}/jobs/2\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"222 TEST\"\n\t\t\t\t}\n\n\t\t\t\t### DELETE A JOB\n\t\t\t\tDELETE {{url}}/jobs/1\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t### GET ALL SKILLS\n\t\t\t\t{{url}}/skills\n\n\t\t\t\t### GET SINGLE SKILL\n\t\t\t\t{{url}}/skills/2\n\n\t\t\t\t### CREATE NEW SKILL\n\t\t\t\tPOST {{url}}/skills\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"testskill\",\n\t\t\t\t\t\"name\": \"TEST SKILL\",\n\t\t\t\t\t\"url\": \"https://testskill\",\n\t\t\t\t\t\"description\": \"description test\"\n\t\t\t\t}\n\n\t\t\t\t### REPLACE A SKILL\n\t\t\t\tPUT {{url}}/skills/1\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t{\n\t\t\t\t\t\"idCode\": \"TEST REPLACE SKILL\",\n\t\t\t\t\t\"name\": \"TEST REPLACE SKILL\",\n\t\t\t\t\t\"url\": \"https://testskill\",\n\t\t\t\t\t\"description\": \"description test\"\n\t\t\t\t}\n\n\t\t\t\t### CHANGE A PROPERTY ON A SKILL\n\t\t\t\tPATCH {{url}}/skills/2\n\t\t\t\tcontent-type: application/json\n\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"22222222222222222222222\"\n\t\t\t\t}\n\n\t\t\t\t### DELETE A SKILL\n\t\t\t\tDELETE {{url}}/skills/3\n\t\t\t\tcontent-type: application/json\n\t\t\t\t---------------------------------------------------\n\t\t- note you can of course use other tools to test APIs such as \n\t\t\t- [Postman](https://www.postman.com)\n\t\t\t- [Insomnia](https://insomnia.rest)\n\t\t\t- [Thunderclient](https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client) (VSCode extension)\n\t\t- but **Rest Client** is nice, since all of your tests stay in a file that is checked into your repository\n\t\t\t- anyone who clones your repository can click through the list of tests to understand how your API works, etc.\n- **>>> 3. Load jobs and skills in frontend and display**\n\t- we will now create a React-like **appContext** which loads all the data for the frontend and makes it available anywhere in the application\n\t- for demonstration purposes we will load\n\t\t- **jobs** with **fetch**\n\t\t- **skills** with **axios**\n\t- install axios\n\t\t- `npm i axios`\n\t- **interfaces.ts**\n\t\t--------------------------------------------\n\t\texport interface IJob {\n\t\t\tid: number,\n\t\t\ttitle: string,\n\t\t\tcompany: string,\n\t\t\turl: string,\n\t\t\tdescription: string,\n\t\t\tskillList: string,\n\t\t\tpublicationDate: string\n\t\t}\n\n\t\texport interface ISkill {\n\t\t\tid: number,\n\t\t\tidCode: string,\n\t\t\tname: string,\n\t\t\turl: string,\n\t\t\tdescription: string\n\t\t}\n\n\t\texport interface IAppData {\n\t\t\tjobs: IJob[],\n\t\t\tskills: ISkill[]\n\t\t}\n\t\t--------------------------------------------\t\t\n\t- **appContext.ts**\n\t\t-------------------------------------------------------\n\t\timport axios from 'axios';\n\t\timport { IAppData } from './interface';\n\n\t\tconst baseUrl = 'http://localhost:5995';\n\n\t\texport const appData: IAppData = {\n\t\t\tjobs: await (await fetch(`${baseUrl}/jobs`)).json(),\n\t\t\tskills: (await axios.get(`${baseUrl}/skills`)).data\n\t\t}\n\t\t-------------------------------------------------------\n\t- **main.ts**\n\t\t-----------------------------------------------\n\t\timport './style.scss'\n\t\timport { appData } from './appContext';\n\n\t\tconst { jobs, skills } = appData;\n\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t<h1>Job Postings</h1>\n\t\t\t<p>There are ${jobs.length} jobs.</p>\n\t\t\t<p>There are ${skills.length} skills.</p>\n\t\t`\t\t\n\t\t-----------------------------------------------\n\t- site should look like this##thesiteangrejnslook\n- **>>> 4. Create GetJob component**\n\t- we will now create a component that asks for an Job-ID and displays that job\n\t- **SearchJob.ts**\n\t\t-----------------------------------------------------\n\t\timport { appData } from \"../appContext\";\n\t\timport { IJob } from \"../interface\";\n\n\t\texport const GetJob = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst jobIdElem = document.querySelector<HTMLInputElement>('.getJob .jobId');\n\t\t\t\tconst buttonElem = document.querySelector<HTMLInputElement>('.getJob button');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.getJob .display');\n\n\t\t\t\tif (jobIdElem && buttonElem && displayElem) {\n\t\t\t\t\tbuttonElem.addEventListener('click', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst jobId = jobIdElem.value;\n\t\t\t\t\t\tconst response = await fetch(`${baseUrl}/jobs/${jobId}`);\n\t\t\t\t\t\tconst job:IJob = await response.json();\n\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"job\">\n\t\t\t\t\t\t\t\t\t<div>${job.title} (${job.company})</div>\t\n\t\t\t\t\t\t\t\t\t<div>${job.skillList}</div>\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">Job not found.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.getJob .jobId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t\t.getJob .job {\n\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"component getJob\">\n\t\t\t\t\t<legend>Search for individual job</legend>\n\t\t\t\t\t<form>\n\t\t\t\t\tJob ID: <input class=\"jobId\" value=\"0\"/><button>Search</button>\t\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\n\t\t-----------------------------------------------------\n\t- add baseUrl to **appContext.ts**\n\t\t-----------------------------------------------\n\t\tconst baseUrl = 'http://localhost:5995';\n\n\t\texport const appData: IAppData = {\n\t\t\tjobs: await (await fetch(`${baseUrl}/jobs`)).json(),\n\t\t\tskills: (await axios.get(`${baseUrl}/skills`)).data\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- add GetJob to **main.ts**\n\t\t----------------------------------------------\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t<h1>Job Postings</h1>\n\t\t\t<p>There are ${jobs.length} jobs.</p>\n\t\t\t<p>There are ${skills.length} skills.</p>\n\t\t\t${GetJob()}\n\t\t`\n\t\t----------------------------------------------\n\t- style this component and all others in **style.scss**\n\t\t------------------------------------------\n\t\t.component {\n\t\t\tbackground-color: rgb(35, 58, 35);\n\t\t\tpadding: 1rem;\n\t\t\tborder-radius: .5rem;\n\t\t\tborder: 1px solid  rgb(189, 189, 56);\n\t\t\tlegend {\n\t\t\t\tcolor: yellow;\n\t\t\t}\n\t\t}\t\t\n\t\t------------------------------------------\n\t- component works like this:#gif#thegolookse\n- **>>> 5. Create PostJob component**\n\t- **PostJob.ts**\n\t\t-------------------------------------------------------\n\t\timport { appData } from \"../appContext\";\n\n\t\texport const PostJob = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst formElem = document.querySelector<HTMLInputElement>('.postJob form');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.postJob .display');\n\n\t\t\t\tif (formElem && displayElem) {\n\t\t\t\t\tformElem.addEventListener('submit', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst formElem = e.target as HTMLFormElement;\n\t\t\t\t\t\tconst formData = new FormData(formElem);\n\n\t\t\t\t\t\tconst job: any = {};\n\t\t\t\t\t\tfor (const [key, value] of formData.entries()) {\n\t\t\t\t\t\t\tjob[key] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst response = await fetch(`${baseUrl}/jobs`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: JSON.stringify(job)\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\tconst newJob = await response.json();\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"job\">\n\t\t\t\t\t\t\t\t\t<div>Job with ID ${newJob.id} was created.</div>\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">Job could not be created.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.postJob .jobId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t\t.postJob input {\n\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"component postJob\">\n\t\t\t\t\t<legend>Post Job</legend>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div>Title: <input class=\"title\" name=\"title\"/></div>\n\t\t\t\t\t\t<div>Company: <input class=\"company\" name=\"company\"/></div>\n\t\t\t\t\t\t<div>URL: <input class=\"url\" name=\"url\"/></div>\n\t\t\t\t\t\t<div>Description: <input class=\"description\" name=\"description\"/></div>\n\t\t\t\t\t\t<div>Skill List: <input class=\"skillList\" name=\"skillList\"/></div>\n\t\t\t\t\t\t<div>Publication Date: <input class=\"publicationDate\" name=\"publicationDate\"/></div>\n\t\t\t\t\t\t<div><button>Create</button></div>\n\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\t\t\n\t\t-------------------------------------------------------\n\t- the site works like this:#gif#postjobdemo\n- **>>> 6. Make redraw function so main.ts updates its data based on changes components make**\n\t- **appContext.ts**\n\t\t-------------------------------------\n\t\texport const appData: IAppData = {\n\t\t\tbaseUrl,\n\t\t}\n\n\t\texport const redrawSite = async () => {\n\t\t\tconst jobs = await (await fetch(`${baseUrl}/jobs`)).json();\n\t\t\tconst skills = (await axios.get(`${baseUrl}/skills`)).data;\n\t\t\tconst jobInfoElem = document.querySelector('.jobInfo');\n\t\t\tconst skillInfoElem = document.querySelector('.skillInfo');\n\t\t\tif (jobInfoElem && skillInfoElem) {\n\t\t\t\tjobInfoElem.innerHTML = `There are ${jobs.length} jobs.`;\n\t\t\t\tskillInfoElem.innerHTML = `There are ${skills.length} skills.`;\n\t\t\t}\n\t\t}\t\t\n\t\t-------------------------------------\n\t- **interfaces.ts**\n\t\t------------------------------------\n\t\texport interface IAppData {\n\t\t\tbaseUrl: string,\n\t\t}\n\t\t------------------------------------\n\t- **main.ts**\n\t\t-------------------------------------\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t<h1>Job Postings</h1>\n\t\t\t<p class=\"jobInfo\"></p>\n\t\t\t<p class=\"skillInfo\"></p>\n\t\t\t${GetJob()}\n\t\t\t${PostJob()}\n\t\t\t${PatchJob()}\n\t\t`\n\t\tredrawSite();\t\t\n\t\t-------------------------------------\n\t- **PostJob.ts**\n\t\t-------------------------------------\n\t\timport { appData, redrawSite } from \"../appContext\";\n\n\t\texport const PostJob = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst formElem = document.querySelector<HTMLInputElement>('.postJob form');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.postJob .display');\n\n\t\t\t\tif (formElem && displayElem) {\n\t\t\t\t\tformElem.addEventListener('submit', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst formElem = e.target as HTMLFormElement;\n\t\t\t\t\t\tconst formData = new FormData(formElem);\n\n\t\t\t\t\t\tconst job: any = {};\n\t\t\t\t\t\tfor (const [key, value] of formData.entries()) {\n\t\t\t\t\t\t\tjob[key] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst response = await fetch(`${baseUrl}/jobs`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: JSON.stringify(job)\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\tconst newJob = await response.json();\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"job\">\n\t\t\t\t\t\t\t\t\t<div>Job with ID ${newJob.id} was created.</div>\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`;\n\t\t\t\t\t\t\tredrawSite();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">Job could not be created.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.postJob .jobId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t\t.postJob input {\n\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"component postJob\">\n\t\t\t\t\t<legend>Post Job</legend>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div>Title: <input class=\"title\" name=\"title\"/></div>\n\t\t\t\t\t\t<div>Company: <input class=\"company\" name=\"company\"/></div>\n\t\t\t\t\t\t<div>URL: <input class=\"url\" name=\"url\"/></div>\n\t\t\t\t\t\t<div>Description: <input class=\"description\" name=\"description\"/></div>\n\t\t\t\t\t\t<div>Skill List: <input class=\"skillList\" name=\"skillList\"/></div>\n\t\t\t\t\t\t<div>Publication Date: <input class=\"publicationDate\" name=\"publicationDate\"/></div>\n\t\t\t\t\t\t<div><button>Create</button></div>\n\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\t\t\n\t\t-------------------------------------\n\t- the site works like this:#gif#postredrawdemo\n- **>>> 7. Create PatchJob component**\n\t- **PatchJob.ts**\n\t\t--------------------------------------------------------\n\t\timport { appData } from \"../appContext\";\n\t\timport { IJob } from \"../interface\";\n\n\t\texport const PatchJob = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst jobIdElem = document.querySelector<HTMLInputElement>('.patchJob .jobId');\n\t\t\t\tconst formElem = document.querySelector<HTMLInputElement>('.patchJob form');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.patchJob .display');\n\n\t\t\t\tif (jobIdElem && formElem && displayElem) {\n\t\t\t\t\tformElem.addEventListener('submit', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst titleElem = document.querySelector<HTMLInputElement>('.patchJob .title');\n\t\t\t\t\t\tif (titleElem) {\n\t\t\t\t\t\t\tconst changeFields = {\n\t\t\t\t\t\t\t\ttitle: titleElem.value\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tconst jobId = jobIdElem.value;\n\n\t\t\t\t\t\t\tconst response = await fetch(`${baseUrl}/jobs/${jobId}`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmethod: 'PATCH',\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbody: JSON.stringify(changeFields)\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst job: IJob = await response.json();\n\t\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"job\">\n\t\t\t\t\t\t\t\t\t<div>${job.title} (${job.company})</div>\t\n\t\t\t\t\t\t\t\t\t<div>${job.skillList}</div>\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">Job with ID ${jobId} does not exist.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.patchJob .jobId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"component patchJob\">\n\t\t\t\t\t<legend>Patch Job</legend>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div>Job ID: <input class=\"jobId\" value=\"0\"/></div>\n\t\t\t\t\t\t<div>Title: <input class=\"title\"/><button>Search</button></div>\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\t\t\n\t\t--------------------------------------------------------\n\t- the site works like this:#gif#patchjobdemo22\n- **>>> 7. Create PutJob component**\n\t- give components access to jobs and skills data that was fetched on page load\n\t\t- **appContext.ts**\n\t\t\t-------------------------\n\t\t\texport const appData: IAppData = {\n\t\t\t\tbaseUrl,\n\t\t\t\tjobs: await (await fetch(`${baseUrl}/jobs`)).json(),\n\t\t\t\tskills: (await axios.get(`${baseUrl}/skills`)).data\n\t\t\t}\t\t\t\n\t\t\t-------------------------\n\t\t- **interfaces.ts**\n\t\t\t---------------------------------------\n\t\t\texport interface IAppData {\n\t\t\t\tbaseUrl: string,\n\t\t\t\tjobs: IJob[],\n\t\t\t\tskills: ISkill[]\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- **putJob.ts**\n\t\t\t--------------------------------\n\t\t\timport { appData, redrawSite } from \"../appContext\";\n\n\t\t\texport const PutJob = () => {\n\n\t\t\t\tconst { baseUrl, jobs } = appData;\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst formElem = document.querySelector<HTMLInputElement>('.putJob form');\n\t\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.putJob .display');\n\t\t\t\t\tconst titleElem = document.querySelector<HTMLInputElement>('.putJob .title');\n\t\t\t\t\tconst companyElem = document.querySelector<HTMLInputElement>('.putJob .company');\n\t\t\t\t\tconst urlElem = document.querySelector<HTMLInputElement>('.putJob .url');\n\t\t\t\t\tconst descriptionElem = document.querySelector<HTMLInputElement>('.putJob .description');\n\t\t\t\t\tconst skillListElem = document.querySelector<HTMLInputElement>('.putJob .skillList');\n\t\t\t\t\tconst publicationDateElem = document.querySelector<HTMLInputElement>('.putJob .publicationDate');\n\n\t\t\t\t\tconst job = jobs[0];\n\n\t\t\t\t\tif (formElem && displayElem && titleElem && companyElem && urlElem && descriptionElem && skillListElem && publicationDateElem) {\n\n\t\t\t\t\t\ttitleElem.value = job.title;\n\t\t\t\t\t\tcompanyElem.value = job.company;\n\t\t\t\t\t\turlElem.value = job.url;\n\t\t\t\t\t\tdescriptionElem.value = job.description;\n\t\t\t\t\t\tskillListElem.value = job.skillList;\n\t\t\t\t\t\tpublicationDateElem.value = job.publicationDate;\n\n\t\t\t\t\t\tformElem.addEventListener('submit', async (e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tconst formElem = e.target as HTMLFormElement;\n\t\t\t\t\t\t\tconst formData = new FormData(formElem);\n\n\t\t\t\t\t\t\tconst changedJob: any = {};\n\t\t\t\t\t\t\tfor (const [key, value] of formData.entries()) {\n\t\t\t\t\t\t\t\tchangedJob[key] = value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst response = await fetch(`${baseUrl}/jobs/${job.id}`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbody: JSON.stringify(changedJob)\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\t\tconst newJob = await response.json();\n\t\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t\t<div class=\"job\">\n\t\t\t\t\t\t\t\t\t\t<div>Job with ID ${newJob.id} was changed.</div>\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t`;\n\t\t\t\t\t\t\t\tredrawSite();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t\t<div class=\"error\">Job could not be changed.</div>\n\t\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\n\t\t\t\t})\n\n\t\t\t\treturn /*html*/ `\n\t\t\t\t\t<style>\n\t\t\t\t\t\t.putJob .jobId {\n\t\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.putJob input {\n\t\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t\t}\n\t\t\t\t\t</style>\n\t\t\t\t\t<fieldset class=\"component putJob\">\n\t\t\t\t\t\t<legend>Put Job</legend>\n\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t<div>Title: <input class=\"title\" name=\"title\"/></div>\n\t\t\t\t\t\t\t<div>Company: <input class=\"company\" name=\"company\"/></div>\n\t\t\t\t\t\t\t<div>URL: <input class=\"url\" name=\"url\"/></div>\n\t\t\t\t\t\t\t<div>Description: <input class=\"description\" name=\"description\"/></div>\n\t\t\t\t\t\t\t<div>Skill List: <input class=\"skillList\" name=\"skillList\"/></div>\n\t\t\t\t\t\t\t<div>Publication Date: <input class=\"publicationDate\" name=\"publicationDate\"/></div>\n\t\t\t\t\t\t\t<div><button>Change</button></div>\n\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t`\n\t\t\t}\n\t\t\t--------------------------------\n\t- site now works like this:#gif#demotheputjob\n\t- NOTE: our **redrawSite** function refreshes the data on main.ts but it doesn't refresh the data in all of our components\n\t\t- this would be a more difficult problem to solve\n\t\t- this is exactly one of the main problems that **React solves**\n\t\t\t- i.e. in React, you don't need to worry about this: just change your data and all your components refresh themselves automatically#gif#showwhatreactdoesdemo\n- **>>> 8. Create DeleteJob component**\n\t- **DeleteJob.ts**\n\t\t-----------------------------------------------------------\n\t\timport { appData } from \"../appContext\";\n\n\t\texport const DeleteJob = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst jobIdElem = document.querySelector<HTMLInputElement>('.deleteJob .jobId');\n\t\t\t\tconst formElem = document.querySelector<HTMLInputElement>('.deleteJob form');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.deleteJob .display');\n\n\t\t\t\tif (jobIdElem && formElem && displayElem) {\n\t\t\t\t\tformElem.addEventListener('submit', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst jobId = jobIdElem.value;\n\n\t\t\t\t\t\tconst response = await fetch(`${baseUrl}/jobs/${jobId}`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div>Job with ID ${jobId} was deleted.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">Job with ID ${jobId} does not exist.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.deleteJob .jobId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"component deleteJob\">\n\t\t\t\t\t<legend>Delete Job <span>(with fetch)</span></legend>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div>Job ID: <input class=\"jobId\" value=\"0\"/><button>Delete</button></div>\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\t\t\n\t\t-----------------------------------------------------------\n\t- site works like this:#gif#demodeletethejob\n- **>>> 9. Create GetSkill component**\n\t- **GetSkill.ts**\n\t\t-----------------------------------\n\t\timport { appData } from \"../appContext\";\n\t\timport { ISkill } from \"../interface\";\n\t\timport axios from 'axios';\n\n\t\texport const GetSkill = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst skillIdElem = document.querySelector<HTMLInputElement>('.getSkill .skillId');\n\t\t\t\tconst buttonElem = document.querySelector<HTMLInputElement>('.getSkill button');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.getSkill .display');\n\n\t\t\t\tif (skillIdElem && buttonElem && displayElem) {\n\t\t\t\t\tbuttonElem.addEventListener('click', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst skillId = skillIdElem.value;\n\t\t\t\t\t\tconst response = await axios.get(`${baseUrl}/skills/${skillId}`);\n\t\t\t\t\t\tconst skill: ISkill = await response.data;\n\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"skill\">\n\t\t\t\t\t\t\t\t\t<div>${skill.name} (${skill.idCode})</div>\t\n\t\t\t\t\t\t\t\t\t<div>${skill.description}</div>\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">skill not found.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.getSkill .skillId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t\t.getSkill .skill {\n\t\t\t\t\t\tmargin-top: 1rem;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"skillComponent getSkill\">\n\t\t\t\t\t<legend>Get Skill <span>(with axios)</span></legend>\n\t\t\t\t\t<form>\n\t\t\t\t\tSkill ID: <input class=\"skillId\" value=\"0\"/><button>Search</button>\t\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\n\t\t-----------------------------------\n\t- site works like this:#gif#gettheskilldemo\n- **>>> 10. Create PostSkill component**\n\t- **PostSkill.ts**\n\t\t-------------------------------------------\n\t\timport { appData, redrawSite } from \"../appContext\";\n\t\timport axios from 'axios';\n\n\t\texport const PostSkill = () => {\n\n\t\t\tconst { baseUrl } = appData;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst formElem = document.querySelector<HTMLInputElement>('.postSkill form');\n\t\t\t\tconst displayElem = document.querySelector<HTMLDivElement>('.postSkill .display');\n\n\t\t\t\tif (formElem && displayElem) {\n\t\t\t\t\tformElem.addEventListener('submit', async (e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst formElem = e.target as HTMLFormElement;\n\t\t\t\t\t\tconst formData = new FormData(formElem);\n\n\t\t\t\t\t\tconst skill: any = {};\n\t\t\t\t\t\tfor (const [key, value] of formData.entries()) {\n\t\t\t\t\t\t\tskill[key] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst response = await axios.post(`${baseUrl}/skills`,\n\t\t\t\t\t\t\tJSON.stringify(skill), { headers });\n\n\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\tconst newSkill = await response.data;\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"skill\">\n\t\t\t\t\t\t\t\t\t<div>skill with ID ${newSkill.id} was created.</div>\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t`;\n\t\t\t\t\t\t\tredrawSite();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisplayElem.innerHTML = `\n\t\t\t\t\t\t\t\t<div class=\"error\">skill could not be created.</div>\n\t\t\t\t\t\t\t`\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t})\n\n\t\t\treturn /*html*/ `\n\t\t\t\t<style>\n\t\t\t\t\t.postSkill .skillId {\n\t\t\t\t\t\twidth: 2rem;\n\t\t\t\t\t\tmargin-right: .3rem;\n\t\t\t\t\t\ttext-align: right;\n\t\t\t\t\t}\n\t\t\t\t\t.postSkill input {\n\t\t\t\t\t\twidth: 98%;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<fieldset class=\"skillComponent postSkill\">\n\t\t\t\t\t<legend>Post Skill <span>(with fetch)</span></legend>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<div>ID-Code: <input class=\"idCode\" name=\"idCode\"/></div>\n\t\t\t\t\t\t<div>Name: <input class=\"name\" name=\"name\"/></div>\n\t\t\t\t\t\t<div>URL: <input class=\"url\" name=\"url\"/></div>\n\t\t\t\t\t\t<div>Description: <input class=\"description\" name=\"description\"/></div>\n\t\t\t\t\t\t<div><button>Create</button></div>\n\n\t\t\t\t\t</form>\n\t\t\t\t\t<div class=\"display\"></div>\n\t\t\t\t</fieldset>\n\t\t\t`\n\t\t}\n\t\t-------------------------------------------\n\t- site works like this:#gif#postskilldemook\n- **>>> 11. Create PatchSkill component**\n\t- nnn\n- **>>> 12. Create PutSkill component**\n\t- nnn\n- **>>> 13. Create DeleteSkill component**\n\t- nnn","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-24 18:42:00","systemWhoCreated":"systemUnknown"},{"id":752,"category":"promises","title":"Returning asynchronous data from functions with callbacks and promises","body":"- **what we will do**\n\t- the main purpose of this howto is to demonstrate **how to use promises to return asynchronous data from functions**\n\t\t- note that promises were introduced into JavaScript in **2015**\n\t\t\t- and so are relatively new\n\t- to better understand the background of promises\n\t\t- we will first look how, before promises, we used to return asynchrous data from functions, namely with **callbacks**\n\t- code is here\n\t\t- https://github.com/edwardtanguay/et611-callback-promises\n\t- finished site looks like this\n\t\t- nnn\n- **(1) create a minimized Vite JS-DOM site**\n\t- create base site\n\t\t- `npm create vite@latest`\n\t\t- name of project, e.g. **et611-callback-promises** (choose your own project name of course)\n\t\t- Vanilla\n\t\t- TypeScript\n\t- open site in VSCode and start\n\t\t- `code et611-callback-promises`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- set up Git\n\t\t- `git init -b dev`\n\t- minimalize site\n\t\t- delete **counter.ts**\n\t\t- delete **typescript.svg**\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<title>Promises</title>\t\t\t\n\t\t\t-------------------------------\t\t\n\t\t- **main.ts**\n\t\t\t----------------------------------\n\t\t\timport './style.css'\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\t\t\t\t<h2>Asynchronous Functions with Callbacks and Promises</h2>\n<p>testing</p>\n\t\t\t`;\t\t\t\n\t\t\t----------------------------------\n\t\t- **style.css**\n\t\t\t----------------------------------------\n\t\t\tbody {\n\t\t\t\tmargin: 0;\n\t\t\t\tdisplay: flex;\n\t\t\t\tmin-width: 320px;\n\t\t\t\tmin-height: 100vh;\n\t\t\t\tbackground-color: beige;\n\t\t\t}\n\t\t\t----------------------------------------\t\t\n\t\t- minimalized site looks like this:##promisbegin\n- **(2) return data from a synchronous function**\n\t- if we have data in code or a local file that we can import\n\t\t- then we can return the data **synchronously** (immediately) instead of **asynchronously** (when it's available)\n\t\t- and therefore we don't need callbacks or promises\n\t- create the following asynchronous function\n\t\t- first store the data for this function locally so we can serve it synchronously\n\t\t\t- **data/employees.json**\n\t\t\t\t- copy raw data from: https://edwardtanguay.vercel.app/share/employees.json\n\t\t\t\t- and paste into file\n\t\t- **dataLoader.ts**\n\t\t\t-------------------------------------------\n\t\t\timport employees from './data/employees.json';\n\n\t\t\texport const getSynchronousEmployees = () => {\n\t\t\t\treturn employees;\n\t\t\t}\n\t\t\t-------------------------------------------\n\t\t- **main.ts**\n\t\t\t------------------------------------------\n\t\t\timport './style.css'\n\t\t\timport * as dataLoader from './dataLoader';\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\n\t\t\t  <h2>Asynchronous functions with callbacks and promises</h2>\n\n\t\t\t  <h3>Synchronous employees</h3>\n\t\t\t  ${dataLoader.getSynchronousEmployees().map(m => m.lastName).join(', ')}\n\t\t\t`\n\t\t\t------------------------------------------\n\t- site should look like this:##theasyncfifunc\n- **(3) try to synchronously get data that is asynchronously fetched in a function**\n\t- in order to understand the problem that callbacks and promises solve\n\t\t- we are going to unsuccessfully try to return asychrnous data from a synchronous function\n\t- install axios\n\t\t- `npm i axios`\n\t- **dataLoader.ts**\n\t\t----------------------------------------------\n\t\texport const getAsynchronousCallbackEmployees = () => {\n\t\t\tconst url = 'https://edwardtanguay.vercel.app/share/employees.json';\n\t\t\t(async () => {\n\t\t\t\tconst employees = (await axios.get(url)).data\n\t\t\t\tconsole.log('async', employees);\n\t\t\t\treturn employees;\n\t\t\t})();\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- **main.ts**\n\t\t------------------------------------------------\n\t\tconst asychronousCallbackEmloyees = dataLoader.getAsynchronousCallbackEmployees();\n\t\tconsole.log('main', asychronousCallbackEmloyees);\t\t\n\t\t------------------------------------------------\n\t- **PROBLEM:**\n\t\t- 1. the data is successfully loaded in the **dataLoader function**, but does not arrive in **main** where the function is called\n\t\t- 2. **first** main doesn't get data, **and then** the data arrives in the function\n\t\t- what is going on here?##tehtwofjthfin\n- **(4) pre-2015 solution: use a callback to asynchronously get data that is asynchronously fetched in a function**\n\t- the problem with the above solution is that\n\t\t- the funtion simply **begins** to fetch the data\n\t\t- immedately sends **nothing back** (undefined)\n\t\t- then **9 milliseconds later** it gets its data and returns it to nowhere (!)\n\t- change the function so it accepts a callback function which is called when the asynchronously fetched data is available\n\t\t- **dataLoader.ts**\n\t\t\t----------------------------------------------\n\t\t\texport const getAsynchronousCallbackEmployees = (callback) => {\n\t\t\t\tconst url = 'https://edwardtanguay.vercel.app/share/employees.json';\n\t\t\t\t(async () => {\n\t\t\t\t\tconst employees = (await axios.get(url)).data\n\t\t\t\t\tconsole.log('async', employees);\n\t\t\t\t\tcallback(employees);\n\t\t\t\t})();\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------------\n\t\t- don't worry about the TypeScript error for now\n\t\t\t- the JavaScript in the browser will still work, and there is enough to understand at the moment##tehtypesderr\n\t- now from main, send a callback function as a parameter, inside of which employees will be defined\n\t\t- **main.ts**\n\t\t\t-------------------------------------------\n\t\t\tdataLoader.getAsynchronousCallbackEmployees((asychronousCallbackEmloyees) => {\n\t\t\t  console.log('main', asychronousCallbackEmloyees);\n\t\t\t});\t\t\t\n\t\t\t-------------------------------------------\n\t\t- now when the page reloads, you will see that \n\t\t\t- 1. first the async data is available in the **function** \n\t\t\t- 2. **1 millisecond later** it is available in **main**##thenonesedss\n\t- now display the asynchronousCallbackEmployees on the page \n\t\t------------------------------------------------\n\t\t<h3>Asynchronous callback employees</h3>\n\t\t${asynchronousCallbackEmployees.map(m => m.lastName).join(', ')}\t\t\n\t\t------------------------------------------------\n\t- **PROBLEM**: the variable does not exist, why not?\n\t- **ANSWER**: because it only only exists inside the callback function\n\t- **SOLUTION**: move the HTML code inside the callback function\n\t\t---------------------------------------------------\n\t\tdataLoader.getAsynchronousCallbackEmployees((asynchronousCallbackEmployees) => {\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\n\t\t\t  <h2>Asynchronous functions with callbacks and promises</h2>\n\n\t\t\t  <h3>Synchronous employees</h3>\n\t\t\t  ${dataLoader.getSynchronousEmployees().map(m => m.lastName).join(', ')}\n\n\t\t\t  <h3>Asynchronous callback employees</h3>\n\t\t\t  ${asynchronousCallbackEmployees.map(m => m.lastName).join(', ')}\n\t\t\t`\n\t\t});\n\t\t---------------------------------------------------\n\t- now the data is being displayed:##thenowdataisndisy\n\t- so this solution works, but **what is the problem with this solution?**\n\t\t- 1. if we needed to use some data from employees and fetch some other data, then we would have to **call a callback inside a callback**\n\t\t\t- and if we needed to do that again, we would be three levels deep in callbacks, and so on\n\t\t\t- this is what is referred to as **callback hell**##referredascall\n\t\t- 2. if we needed to handle errors, we would have to send two callbacks to one function\n\t- so while this solution works, JavaScript was in need of a better way handle asynchronous data\n\t\t- this was solve with **promises** (2015) and **async/await** (2017) which we will see next\n\t- before we move onto promises, however, let's resolve our TypeScript errors which is good practice\n\t\t- **interfaces.ts**\n\t\t\t----------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **dataLoader.ts**\n\t\t\t------------------------------------------------\n\t\t\texport const getAsynchronousCallbackEmployees = (callback: (employees: IEmployee[]) => void) => {\n\t\t\t------------------------------------------------\n- **(5) use a promise and async/await to asynchronously get data that is asynchronously fetched in a function**\n\t- **dataLoader.ts**\n\t\t--------------------------------------------------\n\t\timport axios from 'axios';\n\t\timport employees from './data/employees.json';\n\t\timport { IEmployee } from './interfaces';\n\n\t\tconst employeesUrl = 'https://edwardtanguay.vercel.app/share/employees.json';\n\n\t\texport const getSynchronousEmployees = () => {\n\t\t\treturn employees;\n\t\t}\n\n\t\texport const getAsynchronousPromiseEmployees = () => {\n\t\t\treturn new Promise<IEmployee[]>((resolve) => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst employees: IEmployee[] = (await axios.get(employeesUrl)).data\n\t\t\t\t\tresolve(employees);\n\t\t\t\t})();\n\t\t\t});\n\t\t}\t\t\n\t\t--------------------------------------------------\n\t- **main.ts**\n\t\t--------------------------------------------------\n\t\timport './style.css'\n\t\timport * as dataLoader from './dataLoader';\n\n\t\tconst asynchronousPromiseEmployees = await dataLoader.getAsynchronousPromiseEmployees();\n\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\n\t\t  <h2>Asynchronous functions with callbacks and promises</h2>\n\n\t\t  <h3>Synchronous employees</h3>\n\t\t  ${dataLoader.getSynchronousEmployees().map(m => m.lastName).join(', ')}\n\n\t\t  <h3>Asynchronous promise employees</h3>\n\t\t  ${asynchronousPromiseEmployees.map(m => m.lastName).join(', ')}\n\t\t`\n\t\t--------------------------------------------------\n\t- the code is much more readable and extensible than the callback solution, and it works the same:##\n- **(6) Emulate a longer loading time and resolve the blocking nature of promises**\n\t- **PROBLEM**: emulate a 2-second wait in loading time in the function, and see that it blocks the site from loading for 2 seconds\n\t\t- **dataLoader.ts**\n\t\t\t---------------------------------------------\n\t\t\texport const getAsynchronousPromiseEmployees = () => {\n\t\t\t\treturn new Promise<IEmployee[]>((resolve) => {\n\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\tconst employees: IEmployee[] = (await axios.get(employeesUrl)).data\n\t\t\t\t\t\tresolve(employees);\n\t\t\t\t\t}, 2000)\n\t\t\t\t});\n\t\t\t}\n\t\t\t---------------------------------------------\n\t\t- the site now loads like this:#gif#these2secsd\n\t- **SOLUTION**: display the template HTML first, and then add the asynchronously data when it is availble\n\t\t- **main.ts**\n\t\t\t-------------------------------------------------------\n\t\t\timport './style.css'\n\t\t\timport * as dataLoader from './dataLoader';\n\n\t\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\n\t\t\t  <h2>Asynchronous functions with callbacks and promises</h2>\n\n\t\t\t  <h3>Synchronous employees</h3>\n\t\t\t  ${dataLoader.getSynchronousEmployees().map(m => m.lastName).join(', ')}\n\n\t\t\t  <h3>Asynchronous promise employees</h3>\n\t\t\t  <div class=\"asynchronousPromiseEmployees\"></div>\n\t\t\t`\n\n\t\t\tconst asynchronousPromiseEmployeesElem = document.querySelector<HTMLDivElement>('.asynchronousPromiseEmployees');\n\t\t\tif (asynchronousPromiseEmployeesElem) {\n\t\t\t  asynchronousPromiseEmployeesElem.innerText = 'loading...';\n\t\t\t  const asynchronousPromiseEmployees = await dataLoader.getAsynchronousPromiseEmployees();\n\t\t\t  asynchronousPromiseEmployeesElem.innerText = asynchronousPromiseEmployees.map(m => m.lastName).join(', ');\n\t\t\t}\n\t\t\t-------------------------------------------------------\n\t\t- the site now loads like this:#gif#likethisiteload\n- **(7) Organize your code better by creating an appLoader**\n\t- assuming we will be wanting to load more data asynchronously, let's set up a better code structure\n\t\t- by putting this code block in a function that is imported from a module called appLoader\n\t- **appLoader.ts**\n\t\t-------------------------------------------------\n\t\timport * as dataLoader from './dataLoader';\n\n\t\texport const loadEmployees = (elemIdentifier: string) => {\n\t\t\t(async () => {\n\t\t\t\tconst elem = document.querySelector<HTMLDivElement>(elemIdentifier);\n\t\t\t\tif (elem) {\n\t\t\t\t\telem.innerText = 'loading...';\n\t\t\t\t\tconst asynchronousPromiseEmployees = await dataLoader.getAsynchronousPromiseEmployees();\n\t\t\t\t\telem.innerText = asynchronousPromiseEmployees.map(m => m.lastName).join(', ');\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\t\t-------------------------------------------------\n\t- **main.ts** looks much cleaner and is more understandable now\n\t\t--------------------------------------------------\n\t\timport './style.css'\n\t\timport * as dataLoader from './dataLoader';\n\t\timport * as appLoader from './appLoader';\n\n\t\tdocument.querySelector<HTMLDivElement>('#app')!.innerHTML = /*html*/ `\n\n\t\t  <h2>Asynchronous functions with callbacks and promises</h2>\n\n\t\t  <h3>Synchronous employees</h3>\n\t\t  ${dataLoader.getSynchronousEmployees().map(m => m.lastName).join(', ')}\n\n\t\t  <h3>Asynchronous promise employees</h3>\n\t\t  <div class=\"employees\"></div>\n\t\t`\n\n\t\tappLoader.loadEmployees('.employees');\n\t\t--------------------------------------------------\n\t\t- the site loads the same way as before:#gif#likethisiteload\n- **(8) Emulate problems that can happen with loaded data and respond appropriately**\n\t- **appLoader.ts**\n\t\t----------------------------------------------\n\t\texport const loadEmployees = (elemIdentifier: string) => {\n\t\t\t(async () => {\n\t\t\t\tconst elem = document.querySelector<HTMLDivElement>(elemIdentifier);\n\t\t\t\tif (elem) {\n\t\t\t\t\telem.innerText = 'loading...';\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst asynchronousPromiseEmployees = await dataLoader.getAsynchronousPromiseEmployees();\n\t\t\t\t\t\telem.innerText = asynchronousPromiseEmployees.map(m => m.lastName).join(', ');\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err: any) {\n\t\t\t\t\t\telem.innerHTML = `<span class=\"error\">${err.message}</span>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- **dataLoader.ts**\n\t\t-----------------------------------------------\n\t\texport const getAsynchronousPromiseEmployees = () => {\n\t\t\treturn new Promise<IEmployee[]>((resolve, reject) => {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tconst rand = tools.getRandomNumber(5);\n\t\t\t\t\tswitch (rand) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\tmessage: 'Network error'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\tmessage: 'Internet access is currently down'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconst employees: IEmployee[] = (await axios.get(employeesUrl)).data\n\t\t\t\t\t\t\tresolve(employees);\n\t\t\t\t\t}\n\t\t\t\t}, 2000)\n\t\t\t});\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **tools.ts**\n\t\t---------------------------------------------\n\t\texport const getRandomNumber = (upperLimit: number) => {\n\t\t\tconst random = Math.random();\n\t\t\tconst randomNumber = Math.floor(random * upperLimit) + 1;\n\t\t\treturn randomNumber;\n\t\t};\t\t\n\t\t---------------------------------------------\n\t- **style.css**\n\t\t----------------------------------------\n\t\t.error {\n\t\t\tcolor: red;\n\t\t}\t\t\n\t\t----------------------------------------\n\t- the site now works like this:#gif#withtheerrrosshsow\n- **(9) CHALLENGE: Load and display customers as well**\n\t- complete this task in the same way we did for employees\n\t- fetch this external JSON file asynchronously: \n\t\t- https://raw.githubusercontent.com/graphql-compose/graphql-compose-examples/master/examples/northwind/data/json/customers.json\n- **(10) CHALLENGE: Load, combine and display other data as well**\n\t- more data that interrelates to customers and employees can be found here:\n\t\t- https://github.com/graphql-compose/graphql-compose-examples/tree/master/examples/northwind/data/json\n\t- for practice with promises\n\t\t- load data asychronously\n\t\t- combine it with other asychronously loaded data\n\t\t- display the combined data","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-26 00:19:57","systemWhoCreated":"systemUnknown"},{"id":753,"category":"Next.js","title":"Notes on Scott Moss's Next.js 13+, v3 course","body":"- my project repository I created during this tutorial: https://github.com/edwardtanguay/et823-nextjs-app\n- https://frontendmasters.com/courses/next-js-v3/introduction\n\t- covers foundation concepts\n\t- is only teaching the new concepts\n\t- requirements\n\t\t- Node.js\n\t\t- TypeScript\n\t\t- server/clients\n- https://frontendmasters.com/courses/next-js-v3/history-of-next-js\n\t- React site doesn't recommend only using React anymore\n\t- 2013 React created as library\n\t\t- has the biggest community\n\t- Next.js is a framework for the React library\n\t\t- for larger companyies that over everything out of the box, like Angular\n\t\t- you can render React on the server or client\n\t\t\t- but building the infrastruture to do that was difficult\n\t\t- Next.js now has the full package\n\t- Vercel is behind Next.js\n\t- [Qwik](https://qwik.builder.io) reminds me of the JQuery days but with a bit more structure //quote\n- https://frontendmasters.com/courses/next-js-v3/react-server-components\n\t- new paradigm\n\t- rendering modes\n\t\t- SPA\n\t\t\t- problem with crawlers\n\t\t- SSR\n\t\t\t- initial render happens on the server\n\t\t\t- while that is being shown, download the JavaScript\n\t\t\t\t- so site can be interactive\n\t\t- RSC\n\t\t\t- like SSR, but there is no JavaScript associated with the component sent to the browser\n\t\t\t- we don't download everything at one time anymore\n\t\t\t\t- we download parts that we need intelligently\n\t\t\t- if you haven't worked with a project that has client and server side code, it's confusing\n\t\t\t- makes client-side predictable and cacheable\n\t\t\t- if you have ever build something in [Elixir](https://elixir-lang.org/Elixir)/[Pheonix](https://elixir-lang.org) or [Ruby on Rails](https://rubyonrails.org), then [React Server Components](https://www.freecodecamp.org/news/how-to-use-react-server-components) is basically that, i.e. all logic is executing on the server, not on the client //quote\n\t\t\t- implements streaming of HTML to the browser\n- https://frontendmasters.com/courses/next-js-v3/setup-next-js/\n\t- [Routing](https://www.freecodecamp.org/news/routing-in-nextjs) is the number one feature in Next.js //quote\n\t- setup\n\t\t- `npx create-next-app@latest et822-nextjs-app`##withstssrc2\n\t\t- if you want a version, do:\n\t\t\t- `npx create-next-app@13.4.5 et822-nextjs-app`\n\t\t- I get \"next\": \"14.0.0\"\n\t\t- Is Tailwind becoming the styling standard in Next.js? / I hate to say it, but yeah. //quote\n\t\t- headless components are components that have functionality but no styling associated with them, you can get these functional components that look like crap, and had Tailwind to them, and it's great\n\t- we are using the app router, not the page router\n\t- when I start, it tells me I need another version of Node##thenewnodee\n\t- then **npm run dev** gets this##whenIrunitIgethis\n\t- switching npm version\n\t\t- **nvm list**, I don't have 18.17.0 or higher##nowwabove17\n\t\t- got it with **nvm install 18.17.0**##did1817\n\t\t- on Windows, you have to upgrade as administrator (in Git bash there is no sudo)##onwinyouhav\n\t\t- then it worked##thenit88works\n\t- \"I started learning Tailwind when I started learning [headless UI components](https://dev.to/verthon/headless-ui-libraries-the-key-to-flexible-and-accessible-user-interfaces-546p), which are components that look like crap, so you just add Tailwind to them and that solves your problem.\" //quote\n- https://frontendmasters.com/courses/next-js-v3/static-routing\n\t- React doesn't have any routing associated with it, you have to go find your own, so you usually end up using React Router, but there is another one called [Reach Router](https://reach.tech/router) but it got combined into React Router v6\n\t- \"A good router is supposed to do things for you automatically, it's supposed to feel magical. Some people like that magical feeling, some people don't like that magical feeling. I personally like that magical feeling because I know what the alternative is. In next you don't have to configure anything, you just make files in folders and it's done.\" //quote\n\t- the directory structure is your URL structure\n\t- but you have to have a file called **page.tsx**\n\t- I got rid of the page background style in **globals.css**\n\t- capitalize names of components to avoid conflicts\n\t\t- you can name a component the same name as an element, e.g. `<image>` --> `<Image>`\n\t- **route grouping**\n\t\t- e.g. (dashboard)/todos\n\t\t- pages use the nearest layout.tsx \n\t\t- you can nest layouts\n\t- note in the App router, you have to **export default**:##havetoedefaul\n- https://frontendmasters.com/courses/next-js-v3/static-routing-q-a\n\t- Next 13 routing is very different thatn Next 12 routing\n\t- these are by default server components\n\t\t- there is no JavaScript in these files\n\t\t- \"All components in Next.js are by default server components, so anything you can do in Node.js you can do in a React component.\"\n\t\t\t- it's true, you can create files in components##ittruecreatefile\n\t\t\t- but this will not work on a site published at Vercel##thefielsystemnowrite\n\t\t- checking if Vercel can read a text file\n\t\t- it doesn't seem like you can read files at Vercel, either:##doesntseemsread\n- https://frontendmasters.com/courses/next-js-v3/dynamic-routing\n\t- what if you don't know the URL before, e.g. /blogpost/2343\n\t- it works:##idwofrouterrow\n\t- multiple ids work like this:##mutlsisjiids\n\t- and you have use ellipses to read in any number of url segments as an array##themultiplskandwo\n- https://frontendmasters.com/courses/next-js-v3/parameter-q-a\n\t- you can prepare Next for dynamic params by giving it a list of all possible params\n\t- query parameters\n\t\t- for client side\n\t\t\t- `import {useRouter} from 'next/router'`\n\t\t- for server side\n- https://frontendmasters.com/courses/next-js-v3/rendering\n\t- Next.js has two render modes\n\t\t- static\n\t\t- dynamic\n\t- fetch is available in Next.js on server side and client side, and they've hijacked so that it gives hints that the page shouldn't be cached\n\t- the same with cookies() and headers()\n\t- Next.js 13 has set everything up to be performant by default, you have to opt out of performance\n- https://frontendmasters.com/courses/next-js-v3/layouts-templates\n\t- Layout.tsx is just a component that wraps other layouts and pages\n\t- in Next 13, layouts are first class citizens just like pages\n\t\t- they do data-fetching\n\t\t- and they allow you to share UI\n\t- you have to have a root layout\n\t- layouts don't rerender when you change their children\n\t- you can have nested layouts\n\t- but you **can't pass data down from a layout to its children**\n\t\t- because the layouts don't get rerendered\n\t- you can get rid of the root layout, but then every directory under root has to have a layout\n\t\t- you can have (dashboard) folders so they aren't part of the root\n\t\t- and then various pages have various layouts\n\t- if you have two route groups, you have to be aware of what is in the other directories since they would collide\n\t\t- (marketing)\n\t\t\t- docs = site/docs\n\t\t- (dashboard)\n\t\t\t- docs = site/docs\n\t\t- development\n\t\t\t- docs = site/development/docs\n\t- templates\n\t\t- light layouts but they rerender\n\t\t- use e.g. for animations\n\t\t- he rarely uses templates\n- https://frontendmasters.com/courses/next-js-v3/navigation\n\t- basic menu in a layout\n\t\t---------------------------------------------------\n\t\timport Link from \"next/link\";\n\n\t\tfunction DashboardLayout({ children }: { children: React.ReactNode }) {\n\n\t\t\tconst links = [\n\t\t\t\t{\n\t\t\t\t\thref: '/', title: 'Home'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thref: '/todos', title: 'Todos'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thref: '/docs', title: 'Docs'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\thref: '/products', title: 'Products'\n\t\t\t\t}\n\t\t\t]\n\t\t\treturn (\n\t\t\t\t<div className=\"bg-slate-500 h-screen\">\n\t\t\t\t\t<ul className=\"flex gap-3 bg-slate-700 text-gray-400 p-3\">\n\t\t\t\t\t\t{links.map((link, i) => (\n\t\t\t\t\t\t\t<li key={i}><Link href={link.href}>{link.title}</Link></li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t{children}\n\t\t\t\t\t<div>marketing footer</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\texport default DashboardLayout;\t\t\n\t\t---------------------------------------------------\n\t- the Link tag is pretty much the same as an anchor tag\n\t\t- it has some kind of prefetching capability\n\t- \"I personally try to make none of my layouts a client component, in fact, I try to make nothing a client component, unless there has to be JavaScript in order for the user to interact with it, and I'm very specific about that because not all interactions require JavaScript.\" //quote\n- https://frontendmasters.com/courses/next-js-v3/styling-overview\n\t- \"In programming there is never a right answer without trade-offs, it's just what trade-offs are you willing to deal with, and Tailwind just happens to give you quite a lot of value without that many trade-offs.\" //quote\n\t- simplest is creating a .css file and importing it\n\t\t- I found that if you import a .css file, the style is available everywhere, not just in the file that you import it\n\t\t\t- and it actually changed based on if you moved back in the browser\n\t\t- apparently CSS modules fixes that\n\t- Next.js is replacing Webpack as its bundler with a new Rust-based bundler called Turbopack, which is supposed to be 700 times faster than Webpack\n- https://frontendmasters.com/courses/next-js-v3/css-modules\n\t- trying to add Sass\n\t\t- nesting doesn't work as is, it asks me if I want to import CSS modules##itaskskforcss\n\t- ok doing the tutorial with CSS instead\n\t- CSS modules\n\t\t- they are encapsulated, will only work in the file where it is imported\n\t\t- I can't get it to load with the from syntax##cantfindthecss\n\t\t- he says that the community has moved away from using CSS modules\n\t\t- the majority of developers choose CSS in JavaScript\n- https://frontendmasters.com/courses/next-js-v3/css-in-js\n\t- \"There's a long list of ways to do CSS in JavaScript, but probably the most popular the [styled-components](https://styled-components.com) and [Emotion](https://emotion.sh/docs/introduction).\" //quote\n\t- styled-components\n\t\t- \"We're not going to use styled-components but I want to look at them because I think it's interesting to know all the work you have to do to get styled-components to work in Next.js with server-side components.\"##theteddsis\n\t\t- Styled-JSX is also not used much anymore##styledjsx\n\t\t- he uses Tailwind\n\t- testing question\n\t\t- he mentioned Jest and Vitest\n\t- he didn't mention Sass\n\t\t- installing Sass\n\t\t\t- `npm i -D sass`\n\t\t\t- renamed **globals.css** to **globals.sccs**\n\t\t\t- changed import names\n\t\t\t- works well targeting styles to pages with nested styles\n\t- CONCLUSION:\n\t\t- for Next.js, use a combination of **Tailwind** and **Sass**\n\t\t- they work well together\n- https://frontendmasters.com/courses/next-js-v3/server-components\n\t- when you call the setEmployee function, it rerenders the component\n\t- you can't make a React component async\n\t\t- tested it, he's right\n\t- and if you use async inside a component, your JSX of course doesn't have access to it:##andifyou\n\t- that's why we have hooks\n\t- if you call count() three times, then num is still 2\n\t\t- you have to tell React to keep track of it, that is why we have hooks##ifcallthen2\n\t- but in server components, none of this state in set variables matters, you can forget about it\n\t- server components are just regular functions that return HTML\n\t- this means that you can load all kinds of data and do what you want in server components\n\t- this is how you can call async functions from your server component:\n\t\t----------------------------------------------\n\t\timport { IEmployee } from '@/app/interfaces';\n\t\timport axios from 'axios';\n\n\t\tconst getEmployees = () => {\n\t\t\treturn new Promise<IEmployee[]>(async (resolve, reject) => {\n\t\t\t\tconst employees = (await axios.get('https://edwardtanguay.vercel.app/share/employees.json')).data\n\t\t\t\tresolve(employees);\n\t\t\t})\n\t\t}\n\n\t\texport default async function PageEmployees() {\n\t\t\tconst employees = await getEmployees();\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2 className=\"text-2xl mb-2\">Employees Page</h2>\n\t\t\t\t\t<p className=\"mb-2\">There are {employees.length} employees.</p>\n\t\t\t\t\t<ul className=\"list-disc ml-4\">\n\t\t\t\t\t\t{employees.map((emp, i) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={i}>{emp.firstName}</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\t\t\n\t\t----------------------------------------------\n\t- but the problem with this is if it takes e.g. 2 seconds to get the data\n\t\t- the page won't load for two seconds\n\t- if you use the built-in fetch, which is a modified version of the browser fetch, you get control over how it is cached##thefetchsdfjnext\n\t- but since we are on Node, you could hook up Redis and create your own caching\n- https://frontendmasters.com/courses/next-js-v3/client-components\n\t- you have to opt into client components\n\t- any component that has interactions is a good candidate for a client component\n\t- \"Even though we defined this as a client component with 'use client', it's still rendered on the server, which is why it doesn't have access to host objects like localStorage. What happens here is this component gets rendered on the server, then some JavaScript gets downloaded that is the exact replica of this component which then takes over in the browser, but we never get to this point because it was first rendered on the server which caused the error. Client components are rendered on the server and then executed on the client.\" //quote##clientonserver\n\t- \"You can use client components inside server components and vice versa, the only thing you can't do is pass non-serializable props between them, which means while you can pass e.g. objects, arrays, strings, numbers and booleans, you can't pass variables like a Date object or a function as a prop between a server and client component.\"##noseriousili\n- https://frontendmasters.com/courses/next-js-v3/prisma\n\t- \"We need a place to store our data and we could use a JSON file, but it's so free and easy to set up a database these days, that I thought we would just get started with [Prisma](https://www.prisma.io).\" //quote\n\t- \"[Prisma](https://www.prisma.io) is an ORM for many databases, so you can pick any database it supports and you get the same code experience no matter what database you picked. You don't need to know SQL or how to query Mongo, you just use Prisma and it works for every database, so it doesn't matter, it's pretty sick.\" //quote\n\t- install Prisma\n\t\t- `npm i -D prisma`\n\t\t- `npm i @prisma/client@latest`\n\t\t- `npx prisma init --datasource-provider sqlite`\n\t- write a schema for the Todo items\n\t\t- **schema.prisma**\n\t\t\t-------------------------------------------\n\t\t\tmodel Todo {\n\t\t\t\tid String @id @default(uuid())\n\t\t\t\tcreatedAt DateTime @default(now())\n\t\t\t\tcontent String\n\t\t\t\tcompleted Boolean @default(false)\n\t\t\t}\n\t\t\t-------------------------------------------\n\t- migrate database\n\t\t- **.env**\n\t\t\t-------------------------------------\n\t\t\tDATABASE_URL=\"file:./dev.db\"\n\t\t\t-------------------------------------\n\t\t- `npx prisma migrate dev --name init`\n- https://frontendmasters.com/courses/next-js-v3/fetching-data-with-prisma\n\t- cache the database connection\n\t\t- **utils/db.ts**\n\t\t\t-------------------------------------------------\n\t\t\tdeclare global {\n\t\t\t  var prisma: PrismaClient // must be a \"var\"\n\t\t\t}\n\n\t\t\timport { PrismaClient } from '@prisma/client'\n\n\t\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\t\tprisma = new PrismaClient()\n\t\t\t} else {\n\t\t\t\tif (!global.prisma) {\n\t\t\t\t\tglobal.prisma = new PrismaClient()\n\t\t\t\t}\n\t\t\t\tprisma = global.prisma\n\t\t\t}\n\n\t\t\texport default prisma\t\t\t\n\t\t\t-------------------------------------------------\n\t- RESOLVE: strange, if I go to http://localhost:3000/skjfskdjf, it goes to the Todo page\n\t\t- even after **app/not-found.tsx**\n\t\t\t---------------------------------------------\n\t\t\timport Link from \"next/link\";\n\n\t\t\texport default function NotFound() {\n\t\t\t  return (\n\t\t\t\t<div className=\"global\">\n\t\t\t\t  <h2>Not Found</h2>\n\t\t\t\t  <p>Could not find requested resource</p>\n\t\t\t\t  <Link href=\"/\">Return Home</Link>\n\t\t\t\t</div>\n\t\t\t  );\n\t\t\t}\n\t\t\t---------------------------------------------\n\t- display todos\n- https://frontendmasters.com/courses/next-js-v3/form-handling-with-server-actions\n\t- \"I'm going to try to create a form that submits data without using JavaScript. I know, when is the last time we've done that, this is like OG stuff. But we're actually going to do that, so I'm going to get rid of everything that has to do with the client and we're going to make a form that submits on the server side.\" //quote\n\t- \"What if you could just call a function from your client that gets executed on the server? That's basically what server actions are, which is what happens when you have an API, but here we don't even have to set up an API. And in the case of forms, you can trigger it without using JavaScript. That means you can have a pretty interactive app without any JavaScript on it, which brings us back to when HTML was first invented, but you won't get full-page loads either, so you get the best of both worlds.\" //quote\n\t- **utils/actions.ts**\n\t\t----------------------------------------------\n\t\t'use server'\n\t\timport db from './db'\n\n\t\texport const newTodo = async (content: string) => {\n\t\t\tconst todo = await db.todo.create({\n\t\t\t\tdata: {\n\t\t\t\t\tcontent\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t----------------------------------------------\n\t- **NewTodoForm.tsx**\n\t\t---------------------------------------------\n\t\timport { newTodo } from '@/utils/actions';\n\n\t\tconst NewTodoForm = ({}) => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<form action={newTodo}>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"content\" className=\"border border-gray-600\"/>\n\t\t\t\t\t\t\t<button type=\"submit\">new todo</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t</div>\n\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\n\t\texport default NewTodoForm\t\t\n\t\t---------------------------------------------\n\t- \"One problem with server actions is, unlike when using an API, you don't get any response. They are just side-effects. This is why our page is not updated after we add a todo. So in most cases, you should probably still just do API calls.\"\n\t- check the database\n\t\t- `npx prisma studio`##prismastudioss\n\t- we can force our list to revalidate\n\t\t- **actions.ts**\n\t\t\t---------------------------------------------\n\t\t\trevalidatePath('/todos');\n\t\t\t---------------------------------------------\n\t\t- this is a soft refresh, it expires the cache which triggers the page to refresh\n\t- note that while this SQLite solution works locally, it will not work at Vercel##thenoworkwslqver\n\t- this solution would work even with JavaScript off\n- https://frontendmasters.com/courses/next-js-v3/loading-error\n\t- with React Suspense, you can basically stream the data in from a component and show some kind of loading state while that's happening. In Next.js, we basically get this for free by creating two files, one called loading.tsx and one called error.tsx. You can think of this as a try/catch for a component, which is genius.\n\t- in **todos/page.tsx**, I added a promise\n\t\t------------------------------------------\n\t\tconst getData = async () => {\n\t\t\treturn new Promise<ITodo[]>(async (resolve) => {\n\t\t\t\tresolve(await db.todo.findMany({}));\n\t\t\t})\n\t\t}\t\t\n\t\t------------------------------------------\n\t- **todos/loading.tsx**\n\t\t--------------------------------------\n\t\tconst Loading = () => {\n\t\t\treturn (\n\t\t\t\t<div>loading...</div>\n\t\t\t)\n\t\t}\n\t\texport default Loading;\t\t\n\t\t--------------------------------------\n\t- it works#gif#theworkload\n\t- **but it doesn't work after you add an item**\n\t- note that this is by default a client component, it has to be\n\t- **todos/error.tsx** - you can't call the function \"Error\"\n\t\t--------------------------------------\n\t\tconst ErrorUI = () => {\n\t\t\treturn <div>There was an error.</div>\n\t\t}\n\t\texport default ErrorUI\t\n\t\t--------------------------------------\n\t- it worked, but there was an additional system error shown##itworkbutalsoerro\n\t- he got the same error but didn't say anything about it\n- https://frontendmasters.com/courses/next-js-v3/server-actions-q-a\n\t- for form validation, you need client side\n\t- \"In Next.js try to push client components as far down the tree as you can, so if you realize you need form validation, identify the part that of that form that needs validation, take it out, make it its own component, and make that a client component. Don't punish the whole page and force it to be a client just because you need some client functionality on one part.\" //quote \n\t- you can do authentication checks on server or client\n\t- middleware is a higher level, e.g. don't even show this route\n\t- \"when it comes to UI, I would probably use client-side forms\"\n\t- \"If you're not going to use Next.js routing, you should probably not use Next.js. In that case, just use React, or look at another framework like Remix or Gatsby.\" //quote\n\t- \"The 'use client' command basically opts you back into SPA land.\" //quote\n\t\t- but you have to realize that server-side rendering is happening\n\t\t- you are basically back to Next.js 12\n\t- state management like Redux you would only need on client components\n\t- in Next.js 13, you can develop on the client as you always have, but you just have to opt in to it\n\t- importing components into other components\n\t\t- you can import a server component into a server component\n\t\t- you can import a client component into a server component\n\t- \"In Next.js, use client components when you need them, but only when you need them. After awhile, you'll realize that you don't need them as much as you thought you did.\" //quote\n- https://frontendmasters.com/courses/next-js-v3/server-action-mutation\n\t- server action mutation is a new way of doing something, like when JSX came on the scene\n\t- he says he would use a client-side form for this, but wants to show it because it's a new feature\n\t- makes Todo.tsx 'use client'\n\t\t- import {useTransition } from 'react'\n\t\t\t- prevents blocking\n\t\t- const [isPending, startTransition] = useTransition()\n- https://frontendmasters.com/courses/next-js-v3/api-routes\n\t- \"In Next.js, to create an API you don't have to make another server or use body-parser or set anything up, you just create a folder called api, create route.ts files under it, and get API routing for free.\"\n\t- inside app, make folder api\n\t- uses a standard Request object\n\t\t- that's the direction of Next.js, to move toward standards\n\t- now you can compute on the edge\n\t\t- before the edge was read-only\n\t- **api/todo/route.ts**\n\t\t----------------------------------------\n\t\timport { NextResponse } from \"next/server\"\n\n\t\texport const GET = async (request: Request) => {\n\t\t\treturn NextResponse.json(\n\t\t\t\t{\n\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\"task\": \"Buy groceries\",\n\t\t\t\t\t\"completed\": false\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\n\t\texport const POST = async (request: Request) => {\n\t\t\tconst todo = await request.json();\n\t\t\treturn NextResponse.json({ message: `received todo: ${todo.task}` })\n\t\t}\t\t\n\t\t----------------------------------------\n\t- it works:##theworkapiok\n- https://frontendmasters.com/courses/next-js-v3/api-q-a\n\t- CORS - prevents browsers from accessing information from servers that aren't part of the same domain\n\t- set CORS like this:##howtosetcors\n\t- difference between API routes in pages directory and API routes in app directory\n\t\t- there was a time in Next.js 13 that you could use the app directory but had to use the api in the pages directory\n\t\t- and they changed it the same way they changed page, e.g. route.ts and page.tsx\n\t- he adds the database access to the api\n\t- \"If you ask the Next.js team, they really don't want you using Next.js API routes, they want you to use server actions and server-side data fetching, which is a good idea since it's faster since it happens on the server, but for that you need server-side components. But an API is good for when you need client components to fetch data, or if not only your app but other apps need to access your data, then set it up as an API.\" //quote\n- https://frontendmasters.com/courses/next-js-v3/middleware\n\t- middleware are functions that run before your last function runs\n\t- in root folder, **middleware.ts** - redirect all requests to /todos back to the root URL\n\t\t------------------------------------------\n\t\timport { NextResponse } from \"next/server\";\n\n\t\texport const middleware = (request:Request) => {\n\t\t\treturn NextResponse.redirect(new URL('/', request.url))\n\t\t}\n\n\t\texport default middleware\n\n\t\texport const config = {\n\t\t\tmatcher: ['/todos']\n\t\t}\n\t\t------------------------------------------\n- https://frontendmasters.com/courses/next-js-v3/building-for-deployment-to-vercel\n\t- during npm run build, it shows what is static and dynamic##therunuilsdfinfo\n\t- he deploys\n\t\t- fixed the Prisma error like this:##theprismerror\n\t\t- but SQLite database doesn't work\n\t- best place to public Next.js sites is Vercel, everything is up-to-date\n- https://frontendmasters.com/courses/next-js-v3/wrapping-up\n\t- to get more info\n\t\t- Next.js docs is very useful\n\t- you can use (..)directoryname\n\t- <Image> interesting\n\t- lazy loading\n\t- next.config.js very useful\n\t- design apps with [dribbble](https://dribbble.com)\n\t- use NextAuth.js, since auth is always the same","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-27 00:05:04","systemWhoCreated":"systemUnknown"},{"id":757,"category":"React","title":"Notes on Steve Kinney's React and TypeScript course","body":"- my project repository I created during this tutorial: https://github.com/edwardtanguay/et449-react-typescript\n- https://frontendmasters.com/courses/react-typescript-v2/introduction\n\t- \"I first tried out TypeScript in React in 2016 and found myself faced with a situation: I could either use a modern, responsible, strongly-typed language with React, or I could go back to JavaScript and do whatever I want all the time instead of having a compiler yell at me.\" //quote\n\t- goal of course\n\t\t- understand the philosophical underpinning of what we are doing with TypeScript\n\t\t- \"One of the best ways to learn TypeScript is to actually use it in real projects in VSCode and just hover over stuff and learn. It's like a positive feedback loop.\" //quote\n\t\t- this course is learning through doing with a React application\n\t- \"TypeScript in a lot of ways forces you to write simpler code and be a little less fancy which over time contributes to the quality of your code base.\" //quote\n- https://frontendmasters.com/courses/react-typescript-v2/react-component-with-typescript\n\t- TypeScript tries hard to stay out of your way. It just tries to be helpful\n\t- most of the errors in our application are type errors\n\t- \"When you are doing a big refactor of your application which can be really perilous especially if you don't have great unit tests, and you get all the TypeScript red squigglies to go away one after another, and after you've solved the last one, your refactor just works, that's when TypeScript really pays off.\" //quote\n\t- \"How many unit tests have you written that simply check: what happens if you send a parameter as undefined, null, string, number, boolean, etc. Using TypeScript will drastically cut down the number of unit tests you have to write.\" //quote\n\t- in tsconfig.json, there is a **\"allowJs\": false,** setting\n\t- he's using create-react-app \"because it's a common demominator\"\n- https://frontendmasters.com/courses/react-typescript-v2/typing-components-exercise\n\t- \"If you ever feel tempted to define a variable as type 'any', you should avoid that since 'any' is infectious. When you have one 'any', anything that 'any' touches turns into an 'any', and so you've signed up for life to do the work to get TypeScript into your app but now only get about 60% of the benefit.\" //quote\n\t- he uses types instead of interfaces##heusestypes\n\t- you can see what VSCode defines as types and just steel it##youcansteeltypes\n\t- \"Is there a reason why you are using type instead of interface here? / Yes, I'm spiritually prepared for this question. One moment please. There used to be more differences between types and interfaces, but in modern TypeScript, there are less differences. If you google this, about 80% of the advice is to use interfaces for public-facing code, which can then be extended, and types for internal code. My heuristic is to use types, but if I join your team and everyone is using interfaces, then I'll start using interfaces as well.\" //quotes\n\t- how to extend types##typesextended\n\t- generally speaking, you want to break out prop types into a defined type, not have it inline##genrealspeak\n- https://frontendmasters.com/courses/react-typescript-v2/typing-component-children-exercise\n\t- \"A common experience is to start using TypeScript in React and get to a point where you think this is great I'm never going back to JavaScript again, but then you have your first encounter with having to find a type for a React component or its children, and the red squigglies start to haunt you until you find React.ReactNode.\" //quote\n\t- what type do you give to other components or children##jsxelement\n\t- how to type children\n\t\t- it's not JSX.Element\n\t\t- it's not JSX.Element[]\n\t\t- since e.g. a string isn't a JSX.Element\n\t\t- it's not JSX.Element[] | string\n\t\t- it's not React.ReactChildren\n\t\t- it's not React.ReactChild[]\n\t\t- the answer is **React.ReactNode**\n\t\t- also try:\n\t\t\t-----------------------------------------------\n\t\t\timport { PropsWithChildren } from \"react\";\n\t\t\ttype BoxProps = PropsWithChildren<{}>;l\n\t\t\t-----------------------------------------------\n\t\t- this will also work\n\t\t\t-----------------------------\n\t\t\t{ children, style } : BoxProps\n\t\t\t-----------------------------\n\t- made a test to load a component based on a variable\n\t\t---------------------------------------------\n\t\timport { NormalHeader } from './components/NormalHeader'\n\t\timport { VipHeader } from './components/VipHeader'\n\n\t\tfunction App() {\n\t\t  const [count, setCount] = useState(0)\n\n\t\t  const fullName = 'Georg Taylor';\n\t\t  let customerKind = 'vip';\n\n\t\t  return (\n\t\t\t<>\n\t\t\t  <div>\n\t\t\t\t{customerKind === 'normal' ? (\n\t\t\t\t  <NormalHeader fullName={fullName} />\n\t\t\t\t) : (\n\t\t\t\t  <VipHeader fullName={fullName} />\n\t\t\t\t)}\t\t\n\t\t---------------------------------------------\n\t- here is an example of sending a component as a prop#gif#showthedyanmicheaders\n\t- example of sending children to a component\n\t\t- **BoxWrapper.tsx**\n\t\t\t----------------------------------------------------\n\t\t\tinterface IProps {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\texport const BoxWrapper = ({ children } : IProps) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"boxWrapper bg-slate-400 mt-3 rounded p-4 w-5/12 shadow-sm shadow-black\">\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------------------\n\t\t- **App.tsx**\n\t\t\t---------------------------------------------\n\t\t\t<BoxWrapper>\n\t\t\t\t<h2>Info Box</h2>\n\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum non repudiandae, magnam veritatis, cum in quidem eaque quasi fuga reprehenderit nisi perspiciatis amet hic, distinctio sed maiores quos vitae consequuntur.</p>\n\t\t\t</BoxWrapper>\t\t\t\n\t\t\t---------------------------------------------\n\t\t- it looks like this:##theboxesjshcil\n\t- also look at [React.ComponentPropsWithoutRef<'button'>](https://blog.bitsrc.io/react-with-typescript-cheatsheet-9dd891dc5bfe)\n- https://frontendmasters.com/courses/react-typescript-v2/typing-component-state\n\t- \"The useState hook is really just a wrapper around useReducer which is why it dispatches actions.\" //quote\n\t\t- looks like this##dispatchingactions\n\t- What is the difference between **setCount(count +1)** and **setCount(count => count + 1)?**#gif#thebuttonexamplesj\n- https://frontendmasters.com/courses/react-typescript-v2/typing-component-state-exercise\n\t- **setValueAsNumber** didn't work, I had to do this:\n\t\t---------------------------------------------------\n\t\t<input type=\"text\" onChange={(e) => setCount(Number(e.target.value))} />\n\t\t---------------------------------------------------\n- https://frontendmasters.com/courses/react-typescript-v2/fetching-api-data\n\t- uses https://miragejs.com\n\t- you could use a **skeleton loader** which gives you the shape of everything\n\t- \"the world in which it was undefined ended on line 29\"\n\t- \"Working with TypeScript is a symbiotic relationship: you help it by letting it know what types you intend to work with, and it will help you not make mistakes.\" //quote\n- https://frontendmasters.com/courses/react-typescript-v2/fetching-api-data-exercise\n\t- \"If there is one reason to use TypeScript, beyond all the safety and the good and the bugs you won't have, it's not having to remember what props you gave a component, particularly when you're live-coding, but also in your day-to-day life. I use TypeScript in every work project now, but even when I'm working on a course that is only JavaScript, I will write the app in TypeScript first. That is the person I've become over the last four years. I will write in TypeScript first and then reduce it to JavaScript because the benefits are that worth it to me.\" //quote\n\t- \"The type 'any' has two siblings that both seem scarier. There is 'unknown', which is almost always what you mean when you define something as 'any', and then there is the bottom which is 'never' which isn't anything and can't be anything. When TypeScript looks at an empty array, for example, it doesn't see an array of 'unknown' types or 'any' types, it sees an array of nothingness, an array of type 'never'.\" //quote\n\t- example of using **PropsWithChildren**##prospwithchild\n- https://frontendmasters.com/courses/react-typescript-v2/passing-state-methods-to-components\n\t- to get the exact type of a state variable set function, just copy it:##justcopyitititi\n- https://frontendmasters.com/courses/react-typescript-v2/typing-reducers\n\t- \"The useReducer hook is like Redux light, light, light, there's no middleware, no dev tools, not all the batteries are included. I'll occasionally reach for useReducer if I have a number of useStates in a component. If I only have to put one useState in a component, fine, two, ok, but five, no, then I'm using useReducer: I want to say \"here, something happened\" and here is the logic that is therefore supposed to happen, and everything is nice and testable.\" //quote\n\t- \"The way to think about useReducer is it is simply a JavaScript function that takes two arguments: the state of the world, and a thing that happened. It then takes those arguments into the function, and it returns the new state of the world.\" //quote\n\t- Q: if you are using Redux, it is still worth using useReducer? \n\t\t- use Redux for the application state, and useReducer for emphemerel state, e.g. if a toggle-box is open or not\n\t- his simplest reducer example##simpleestreducer\n- https://frontendmasters.com/courses/react-typescript-v2/reducers-with-explicit-any\n\t- my example of useReducer:\n\t\t- **AppReducer.ts**\n\t\t\t-------------------------------------\n\t\t\tinterface IAppData {\n\t\t\t\tfullName: string,\n\t\t\t\tnotes: string[],\n\t\t\t\tversion: number\n\t\t\t}\n\n\t\t\tinterface IAction {\n\t\t\t\ttype: string,\n\t\t\t\tpayload: unknown\n\t\t\t}\n\n\t\t\texport const initialState: IAppData = {\n\t\t\t\tfullName: 'Finn Richter',\n\t\t\t\tnotes: [\"Note 1\", \"Note 2\", \"Note 3\"],\n\t\t\t\tversion: 1\n\t\t\t}\n\n\t\t\texport const AppReducer = (state: IAppData, action: IAction) => {\n\t\t\t\tlet newState = structuredClone(state);\n\t\t\t\tlet payload: string | IAppData;\n\t\t\t\tswitch (action.type) {\n\t\t\t\t\tcase 'updateFullName':\n\t\t\t\t\t\tpayload = action.payload as string;\n\t\t\t\t\t\tnewState.fullName = payload;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'resetAllData':\n\t\t\t\t\t\tpayload = action.payload as IAppData;\n\t\t\t\t\t\tnewState = structuredClone(payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\t-------------------------------------\n\t\t- **DemoUseReducer.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport { useReducer } from 'react';\n\t\t\timport { initialState, AppReducer } from \"../AppReducer\"\n\n\t\t\texport const DemoUseReducer = () => {\n\t\t\t\tconst [state, dispatch] = useReducer(AppReducer, initialState);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>Demo of useReducer</h2>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>Full name: {state.fullName}</li>\n\t\t\t\t\t\t\t<li>Notes: {state.notes.join(', ')}</li>\n\t\t\t\t\t\t\t<li>Version: {state.version}</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<button className='mr-3' onClick={() => dispatch({type: 'updateFullName', payload: 'new name'})}>Change full name</button>\n\t\t\t\t\t\t<button onClick={() => dispatch({type: 'resetAllData', payload: {fullName: '-----', notes: ['---', '---', '---'], version: 0}})}>Change full name</button>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------------\n\t- reducer is easy to test\n\t- he turns the action to any and he had to look up everything\n- https://frontendmasters.com/courses/react-typescript-v2/adding-types-to-reducer-actions\n\t- he wants to give action a type instead of any\n\t- he defines his actions types like this##theactionsok\n\t- I took his ideas here and refactored my reducer code:##thereducrefactor\n\t- \"One of the criticims of useReducer and Redux is that they have a lot of boilerplate. TypeScript's union types can help reduce this by knowing which action types belong to which action payloads, plus you get intellisense dropdowns while you are coding of all the possible strings you need to make a case for. You won't even need a default case in your switch statement because TypeScript knows that you hit every case along the way. TypeScript will not allow you to forget payloads and will warn you if you use the wrong payload with an action type. You have complete type safety here.\" //quote\n- https://frontendmasters.com/courses/react-typescript-v2/creating-actions-for-colorreducer\n\t- this type expect not just an array of numbers, but an array of three numbers and three numbers only##thetypeethree\n- https://frontendmasters.com/courses/react-typescript-v2/passing-dispatch-as-a-prop\n\t- he uses a **global.d.ts** file\n- https://frontendmasters.com/courses/react-typescript-v2/template-literal-types\n\t- \"I use this all the time to create types for my actions, all of these types are made on the fly for me so I don't have to type them.\"##veryusefulwaytoamek\n- https://frontendmasters.com/courses/react-typescript-v2/typing-actions-reducers-exercise\n\t- solves a problem on the color reducer website\n- https://frontendmasters.com/courses/react-typescript-v2/context-api\n\t- makes a context api\n\t- he shows that it is difficult to get reducer and context to work together\n\t- he gets **dispatch** in like this##getsdesapathtin\n- https://frontendmasters.com/courses/react-typescript-v2/context-api-exercise/\n\t- creates the context by copying out from other files\n\t- \"If you have a value you need to use and also need the type of that value to use later, you can dynamically create a type from that value.\" //quote##createfromvalueju\n- https://frontendmasters.com/courses/react-typescript-v2/typescript-utilities-methods\n\t- he users partial, which is like adding a question mark to each property on an object##usespartialssdf\n- https://frontendmasters.com/courses/react-typescript-v2/generics-template-literals\n\t- goes to the [Typescript Playground](https://www.typescriptlang.org)\n\t- an example of dynamic types with Generics##exaemdaynmc\n\t\t- basically, this is very similar to [HOWTO: How to define a TypeScript type for object literal bracket notation](https://tanguay-eu.vercel.app/howtos/735)\n- https://frontendmasters.com/courses/react-typescript-v2/generic-type-systems\n\t- he mentioned **linked list**\n\t\t-  a linked list in JavaScript is a data structure that consists of a sequence of elements, where each element points to the next element in the list\n\t\t- \"Writing a generic <T> in TypeScript is like simply saying: I'm going to use the same type in numerous places, please store it somewhere.\" //quote##storetthree\n\t\t- \"There's occasional times you have to step in and tell TypeScript what types to expect, but generally speaking, you can write code so that TypeScript can figure out what types to use, for instance, in lines 19 and 20, I didn't even have to define the generic. TypeScript figures it out by the type of the variable I send as a parameter.\" //quote##didnthavetousegeneric\n- https://frontendmasters.com/courses/react-typescript-v2/create-context-with-generics\n\t- he's somehow creating his own custom context\n\t- there are three ways to get out of a function:\n\t\t- get to the end of it\n\t\t- return a value\n\t\t- throw an error\n\t- \"TypeScript doesn't have any power to do anything inside your code. When you run the build process, it's gone. It's all JavaScript at the end of the day. TypeScript is only like an emphemeral mass hovering around your JavaScript, it cannot meddle itself in the affairs of mortals. It just looks upon your code and makes sure everything is ok.\" //quote\n- https://frontendmasters.com/courses/react-typescript-v2/using-a-custom-createcontext\n\t- finishes his custom context\n\t- \"One of my favorite rules when making a large code base that I like to enforce in my teams is: sometimes you have to do dark things. Put that in a file and encapsulate it, and do not let it spread to our code base. Sometimes we have an API, it's not what we want, and we have to put an abstraction over it. That thing lives in one place, contained. It's like every horror movie you've ever seen. Just let it do its thing and don't let it out.\" //quote\n\t- \"as long as I adhere to the same contract, everything is going to work\"\n- https://frontendmasters.com/courses/react-typescript-v2/auto-complete\n\t- \"I tell everyone I use TypeScript for reliability and type safety, but what I really use it for is autocomplete.\" //quote\n\t- he imports the fields that are already on the element##heimportsskdjfs\n\t- \"HTML is not like JavaScript. You never see an HTML page crash. The browser will do everything it can to make it work.\" //quote\n- https://frontendmasters.com/courses/react-typescript-v2/polymorphic-components\n\t- talks about the foundational component being \"Box\"\n\t- he cautions us not to abstract out components too far\n- https://frontendmasters.com/courses/react-typescript-v2/wrapping-up\n\t- \"I find myself making hooks more often than making higher-order components.\" //quote\n\t- there is some flexibility in TypeScript that you don't get with other type systems, e.g. you can define a type based on only some of the properties of objects","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-29 12:11:57","systemWhoCreated":"systemUnknown"},{"id":758,"category":"JavaScript","title":"Why you should deep clone objects with structuredClone() not spread operator","body":"- this howto demonstrates that\n\t- using the **spread operator** to copy an object creates only a **shallow copy**\n\t- using **structuredClone()** to copy an object creates a **true deep clone**\n\t- example code can be run in Node and in the browser\n\t- **[structuredClone()](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone)** is available as of **17.0.0 (Released 2021-10-19)**\n- code is here:\n\t- https://github.com/edwardtanguay/et881-deep-clone-test\n- demonstration:#gif#thedemoofstructurdclone\n- **tools.js**\n\t-------------------------------------------\n\texport const getClone = (obj) => {\n\n\t\t// pointers to the same object\n\t\t// const obj2 = obj; \n\n\t\t// a shallow copy, deep values remain pointers to the original object\n\t\t// const obj2 = { ...obj };\n\n\t\t// A TRUE DEEP CLONE \n\t\tconst obj2 = structuredClone(obj);\t\n\n\t\treturn obj2;\n\t};\t\n\t-------------------------------------------\n- **main.js**\n\t----------------------------------------------\n\timport * as tools from './tools.js';\n\n\tconst appElem = document.querySelector('#app');\n\n\t// first object\n\tconst obj1 = {\n\t\tfirstName: 'Hans',\n\t\tage: 45,\n\t\tscores: [1, 2, 3],\n\t\tconfig: {\n\t\t\tlogin: 'hans',\n\t\t\tpasswords: {\n\t\t\t\tfirst: '111',\n\t\t\t\tsecond: '222',\n\t\t\t\tthird: '333'\n\t\t\t}\n\t\t}\n\t}\n\n\t// copy/clone object\n\tconst obj2 = tools.getClone(obj1);\n\n\t// change copy/clone\n\tobj2.firstName = 'nnn';\n\tobj2.age = 0;\n\tobj2.scores[0] = 0;\n\tobj2.scores[1] = 0;\n\tobj2.scores[2] = 0;\n\tobj2.config.login = 'new';\n\tobj2.config.passwords.first = 'new';\n\tobj2.config.passwords.second = 'new';\n\tobj2.config.passwords.third = 'new';\n\n\tappElem.innerHTML = `\n\t<div class=\"container\">\n\t\t<section>\n\t\t\t<h2>obj1</h2>\n\t\t\t<pre>${JSON.stringify(tools.getClone(obj1), null, 4)}\n\t\t\t</pre>\n\t\t</section>\n\t\t<section>\n\t\t\t<h2>obj2</h2>\n\t\t\t<pre>${JSON.stringify(tools.getClone(obj2), null, 4)}\n\t\t\t</pre>\n\t\t</section>\n\t</div>\n\t`;\t\n\t----------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-29 19:19:32","systemWhoCreated":"systemUnknown"},{"id":759,"category":"css","title":"Flexbox and grid basics","body":"- **what we will do**\n\t- explore the basics of Flex and Grid with examples\n- **code is here**\n\t- https://github.com/edwardtanguay/et284-jsdom-flex-grid\n- **site is live here**\n\t- https://et284-jsdom-flex-grid.vercel.app\n- **grid-template-columns**\n\t- https://www.youtube.com/watch?v=8QSqwbSztnA\n\t\t- fr means: take up the rest of the available space\n\t\t- grid-template-columns: 1fr 1fr 1fr 1fr;\n\t\t\t- \tgrid-template-columns: repeat(4, 1fr)\n- **go through basics of grid**\n\t- https://www.w3schools.com/cssref/pr_grid-area.php\n\t\t- not clear what this means\n\t\t\t-------------------------------------------\n\t\t\t.item1 {\n\t\t\t\tgrid-area: 1 / 1 / span 2 / span 3;\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t\t- it looks like this:##tehgridareasds\n\t\t- learning about grid-areas: https://www.youtube.com/watch?v=duH4DLq5yoo\n\t\t\t- \"Grid-areas make your life so easy, especially when it comes to media queries.\" //quote\n\t- https://www.w3schools.com/cssref/pr_grid-template-areas.php\n\t\t- \n- Flex\n\t- [https://www.w3schools.com flexbox](https://www.w3schools.com/css/css3_flexbox_container.asp)\n- Grid\n\t- https://www.w3schools.com/css/css_grid.asp\n- Videos\n\t- https://www.youtube.com/results?search_query=css+cookbook+grid","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-30 22:44:45","systemWhoCreated":"systemUnknown"},{"id":760,"category":"React","title":"Notes on Brian Holts's Complete Intro to React course","body":"- infos\n\t- **project repository** I created during this tutorial is here:\n\t\t- https://github.com/edwardtanguay/et719-react-from-scratch-with-vite\n\t- **online site** is here: \n\t\t- https://et719-react-from-scratch-with-vite.vercel.app\n- https://frontendmasters.com/courses/complete-react-v8/introduction\n\t- on React version 18\n\t- recorded Dec 2022\n\t- started in 2014\n\t- we're going to build our own create-react-app throughout the course\n\t- should be on Node 14\n\t- works at Stripe\n\t- React is nice, I still love it, but there are a lot of good frameworks out there: Solid.js, Angular, Vue, Svelte, they all have their merits.\" //quote\n\t- \"The last time I taught this course, I used Parcel to build the React site we create in this course, but this time I'll be using Vite. I still love Parcel, it's the best developer experience for build systems, but the React community has moved on to Vite.\" //quote\n\t- we'll be using React Query\n- https://frontendmasters.com/courses/complete-react-v8/pure-react-createelement\n\t- starts by creating a **src** folder\n\t- index.html file instead src\n\t\t- html:5\n\t\t- deletes IE=edge line\n\t\t- title\n\t\t- div\n\t\t\t- div id=\"root\"\n\t\t- then copies in CDN links (this is not how we will finish our app, just so we can get started)##thelinkscdndj\n\t- no css in this class\n\t- now two files##nowtwosfil\n\t- his first app##firstreactappp\n\t- \"Always capitalize your components. It's not just a good idea, it's required.\" //quote\n\t- it will create a tag with any name:##willcreateany\n\t- \"Most React developers don't know that React.createElement is a thing since React developers work with JSX and JSX calls createElement for you. But I just wanted to show you how this stuff works. JSX gets translated into JavaScript that looks like this. So if you're never going to write this again, why do I show you this? For one, I want to show you that React is not a black box. And two, when you are looking at your stack traces and see a bunch of createElement calls, I want you to know what's happening and why they're there.\" //quote##thejsxlikethis\n- https://frontendmasters.com/courses/complete-react-v8/pure-react-q-a\n\t- \"Is there a reason why you used const here? / The reason I used const here instead of let is just a force of habit. It's like whether or not to use semicolons, I really don't care. This is literally one of my least favorite things to argue about, these little syntactical things. Does it work? Does it compile? Can I read your code? If all those things are yes, I just don't care.\" //quote\n\t- `ReactDOM.render(container, <App/>);` is legacy mode\n\t\t- always use **createRoot** now\n\t- \"React is a very small libary to learn to render user interfaces, it's really great at handling lots of state. React basically says, I have some state and I want to render a view based on it. There are somewhere between 30 and 50 APIs that React ships now, which is knowable, you can know all of them. And there's a bunch of libraries and tools around it which enable you to do everything else.\" //quote\n- https://frontendmasters.com/courses/complete-react-v8/pure-react-components\n\t- a component must return markup which is a result of React.createElement\n\t- this is the simplest React app possible, the Hello World of React applications##helloreactworlsd\n\t- now creates App.js\n\t- makes a Pet component\n\t- **variable arity**, n.\n\t\t- a programming concept that allows a function to accept a variable number of arguments or parameters, i.e.  variadic function can take different numbers of arguments when it's called##variablarity\n\t- React app without JSX##baseisappareact\n\t- in React the concept **one-way data flow** is common\n\t\t- information generally flows from parent to child\n\t\t- makes debugging apps more straight-forward \n\t- JSX-less React app with props##nonjsxwithprops\n- https://frontendmasters.com/courses/complete-react-v8/npm-prettier-setup\n\t- we're switching to JSX now\n\t- `npm init -y`\n\t- prettier auto-formats your code\n\t\t- `npm i -D prettier@2.7.1`\n\t- **.prettierrc**\n\t\t------------------------------\n\t\t{\n\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\"tabWidth\": 4,\n\t\t\t\"semi\": true,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true,\n\t\t\t\"printWidth\": 80\n\t\t}\n\t\t------------------------------\n\t- check this##checkthisprettier\n\t- format whole document\n\t\t- **package.json**\n\t\t\t- `\"format\" : \"prettier --write \\\"src/**/*.{ts, scss}\\\"\"`\n\t\t- **npm run format**\n- https://frontendmasters.com/courses/complete-react-v8/eslint-git-setup\n\t- ESLint will catch simple JavaScript problems\n\t- `npm i -D eslint eslint-config-prettier`\n\t- **.eslintrc.json**\n\t\t---------------------------\n\t\t{\n\t\t\t\"extends\": [\n\t\t\t\t\"eslint:recommended\",\n\t\t\t\t\"prettier\"\n\t\t\t],\n\t\t\t\"plugins\": [],\n\t\t\t\"parserOptions\": {\n\t\t\t\t\"ecmaVersion\": 2022,\n\t\t\t\t\"sourceType\": \"module\",\n\t\t\t\t\"ecmaFeatures\": {\n\t\t\t\t\t\"jsx\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"env\": {\n\t\t\t\t\"es6\": true,\n\t\t\t\t\"browser\": true,\n\t\t\t\t\"node\": true\n\t\t\t}\n\t\t}\n\t\t---------------------------\n\t- in the Airbnb ESLint there are opinions you'll disagree with\n\t- in eslint:recommended is just common sense\n\t\t- e.g. don't use a variable you haven't created yet\n\t- \"prettier\" should be last\n\t- install ESLint from Microsoft##eslintmic\n\t- **package.json**\n\t\t-----------------------------------------------\n\t\t\"lint\": \"eslint \\\"src/**/*.{ts, scss}\\\" --quiet\"\n\t\t-----------------------------------------------\n\t- you can run\n\t\t--------------------------------\n\t\tnpm run lint -- --debug\n\t\t--------------------------------\n\t- creates *.gitignore**\n- https://frontendmasters.com/courses/complete-react-v8/vite-setup\n\t- Vite is put out by the Vue team\n\t- \"Previous tools we used in this place were Parcel, and before that, Webpack, I think that's it, I don't think I ever used Browserify in this class. I used to use Grunt and Gulp elsewhere.\" //quote\n\t- Parcel is zero config\n\t- Vite \n\t\t- is simlar, just create a very small file and everything works\n\t\t- uses esbuild and Rollup under the hood\n\t\t\t- Rollup created by Rich Harris who also created Svelte, now works for Vercel\n\t- `npm i -D vite @vitejs/plugin-react`\n\t- **vite.config.js**\n\t\t------------------------------------\n\t\timport { defineConfig } from \"vite\";\n\t\timport react from \"@vitejs/plugin-react\";\n\n\t\texport default defineConfig({\n\t\t\tplugins: [react()]\n\t\t});\n\t\t------------------------------------\n\t- install React\n\t\t- `npm i react react-dom`\n\t- my Vite site works, very minimal setup\n\t- installing Sass\n\t\t- `npm i -D sass`\n\t\t- renamed css to scss and it worked\n\t- installing TypeScript\n\t\t- `npm i -D typescript`\n\t- **tsconfig.json**\n\t\t-----------------------------------\n\t\t{\n\t\t  \"compilerOptions\": {\n\t\t\t\"target\": \"ES2020\",\n\t\t\t\"useDefineForClassFields\": true,\n\t\t\t\"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n\t\t\t\"module\": \"ESNext\",\n\t\t\t\"skipLibCheck\": true,\n\n\t\t\t/* Bundler mode */\n\t\t\t\"moduleResolution\": \"bundler\",\n\t\t\t\"allowImportingTsExtensions\": true,\n\t\t\t\"resolveJsonModule\": true,\n\t\t\t\"isolatedModules\": true,\n\t\t\t\"noEmit\": true,\n\t\t\t\"jsx\": \"react-jsx\",\n\n\t\t\t/* Linting */\n\t\t\t\"strict\": true,\n\t\t\t\"noUnusedLocals\": true,\n\t\t\t\"noUnusedParameters\": true,\n\t\t\t\"noFallthroughCasesInSwitch\": true\n\t\t  },\n\t\t  \"include\": [\"src\"],\n\t\t  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n\t\t}\t\t\n\t\t-----------------------------------\n\t- **tsconfig.node.json**\n\t\t------------------------------------------\n\t\t{\n\t\t  \"compilerOptions\": {\n\t\t\t\"composite\": true,\n\t\t\t\"skipLibCheck\": true,\n\t\t\t\"module\": \"ESNext\",\n\t\t\t\"moduleResolution\": \"bundler\",\n\t\t\t\"allowSyntheticDefaultImports\": true\n\t\t  },\n\t\t  \"include\": [\"vite.config.ts\"]\n\t\t}\n\t\t------------------------------------------\n\t- TypeScript works\n\t- now trying to install Tailwind: \n\t\t- https://tailwindcss.com/docs/guides/vite\n\t\t- works\n\t- now deploying at Vercel\n\t\t- works\n\t- created components\n\t\t- works as well\n- https://frontendmasters.com/courses/complete-react-v8/jsx\n\t- \"JSX was invented not because they thought people would like it, but to appease the PHP developers at Facebook: if we show them something that looks like the HTML they are already writing, they're going to be into it. I remember when JSX first came out and Pete Hunt was talking about it at some conference, everyone was laughing and wondering why they were making JavaScript look like HTML. It turned out to be a barrier of entry for React, this was still around 2013. Then Airbnb started using it, Netflix started using it, and larger companies like that adopted it. React eventually hit a critical mass, and overnight Ember was dropped, Angular was dropped, and React became extremely popular. In the end, I think everyone who uses JSX ends up liking it.\" //quote\n\t- these two blocks of code are the same, the second block will be transpiled into the first block:##thereactsdfsdf\n\t- the reason why we have to call it .tsx and not .ts is for Vite to understand it\n\t- ES6 modules are now called ESM - EcmaScript modules\n\t- if you use an uppercase letter, JSX knows it's a component that you created\n\t\t- it it's a lowercase letter, it will pass that on to the dom, even if it is not an HTML element, although TypeScript will notify you\n\t\t- if you use <H1>, JSX will think this is a component you created\n\t- in JSX, you are required to put a self-closing end tag\n- https://frontendmasters.com/courses/complete-react-v8/configuring-eslint-react\n\t- `npm i -D eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react`\n\t- **.eslintrc.json** - his standard ESLint file, \"fix errors, don't enforce arbitrary opinions\"\n\t\t--------------------------------------------------\n\t\t{\n\t\t\t\"extends\": [\n\t\t\t\t\"eslint:recommended\",\n\t\t\t\t\"plugin:import/errors\",\n\t\t\t\t\"plugin:react/recommended\",\n\t\t\t\t\"plugin:jsx-a11y/recommended\",\n\t\t\t\t\"prettier\"\n\t\t\t],\n\t\t\t\"rules\": {\n\t\t\t\t\"react/prop-types\": 0,\n\t\t\t\t\"react/react-in-jsx-scope\": 0\n\t\t\t},\n\t\t\t\"plugins\": [\"react\", \"import\", \"jsx-a11y\"],\n\t\t\t\"parserOptions\": {\n\t\t\t\t\"ecmaVersion\": 2022,\n\t\t\t\t\"sourceType\": \"module\",\n\t\t\t\t\"ecmaFeatures\": {\n\t\t\t\t\t\"jsx\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"env\": {\n\t\t\t\t\"es6\": true, \n\t\t\t\t\"browser\": true,\n\t\t\t\t\"node\": true\n\t\t\t},\n\t\t\t\"settings\": {\n\t\t\t\t\"react\": {\n\t\t\t\t\t\"version\": \"detect\"\n\t\t\t\t},\n\t\t\t\t\"import/resolver\": {\n\t\t\t\t\t\"node\": {\n\t\t\t\t\t\t\"extensions\": [\".js\", \".jsx\", \".ts\", \".tsx\"]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t--------------------------------------------------\n\t- \"Will we need ESLint once we move to TypeScript? / Yes, you basically have four levels of validation in your code: Prettier reformats basic syntax, ESLint enforces stylistic rules, TypeScript makes sure everything is what you said it is, and unit testing makes sure everything works the way you think it does. All four of these tools are enforcing a different facet of correctness on your code. They do have some areas of overlap but they're all necessary.\" //quote\n- https://frontendmasters.com/courses/complete-react-v8/usestate-hook\n\t- makes a form component and imports it\n\t- shows that input cannot change the value\n\t- so uses a useState hook\n\t- everytime an event happens in React, it rerenders everything, top to bottom\n\t\t- this shows that every time you type in an input box, the component rerenders##everytimeyoutyperender\n\t- don't use counter like that\n\t\t- the way you have state in components is you use **hooks**, e.g. like useState\n- https://frontendmasters.com/courses/complete-react-v8/hooks-q-a\n\t- why are state variables defined as const if they change? \n\t\t- because they are being redefined in the component everytime it rerenders\n\t\t- you keep getting new values for these variables each time the component is rerendered\n\t- all hooks start with **use** by convention\n\t- React made \"use hooks\" popular, now Vue and Svelte use them for instance\n\t\t- convention for useState is [name, setName], some people use updateName\n\t- useState returns an array\n\t\t- these three lines are the same as the one line##thresethreelines\n\t- also install this:\n\t\t- `npm i -D eslint-plugin-react-hooks`\n\t\t- then add to config file:##thenaddtoredom\n\t\t- although I don't get the ESLint notifications he does, although ESLint Microsoft is installed and enabled##dontekgetsame\n- https://frontendmasters.com/courses/complete-react-v8/mapping-through-data-with-hooks\n\t- we use map a lot in React##usmapalot\n- https://frontendmasters.com/courses/complete-react-v8/adding-animal-breed\n\t- you can put in multiple statements like this:##themultstate\n- https://frontendmasters.com/courses/complete-react-v8/effects\n\t- sets up useEffect\n- https://frontendmasters.com/courses/complete-react-v8/usebreedlist-custom-hook\n\t- making a custom hook\n\t\t- makes state variables\n\t\t- builds in cache##hisCustomHook\n\t- \"There are React developers who will tell you they never do effects directly in any of their components, they always make a custom hook for all of the effects they have. It's not the worst idea I've heard. I'm not that strict, but if I use an effect twice or three times, a custom hook is a good idea.\" //quote\n\t- having the hook return status makes it easier to test\n- https://frontendmasters.com/courses/complete-react-v8/handling-user-input-review\n\t- he uses onSubmit on the form##usesonsubmitform\n\t- the (e) is a fake DOM event but very similar to a DOM event\n\t- \"Notice I haven't said virtual DOM during this course. Why have I not said it, because it's the least important part of what you have to know to create applications with React. It's an implementation detail that you never have to know or care about. But the way that React works is it has the DOM, which is slow, and the virtual DOM, which is fast. It uses the virtual DOM to figure out how to make only the minimal amount of changes to the DOM. That's how React works under the hood, but generally you never have to care.\" //quote\n- https://frontendmasters.com/courses/complete-react-v8/component-composition\n\t- pull code out into its own component if\n\t\t- it makes it testable\n\t\t- it makes it reusable\n\t\t- it makes it more readable\n\t\t\t- even if it's not reusable, it's easier to understand\n\t\t- if your component is over 100 lines line\n\t- if you see something like this, you should pull it out into a component##somethliekthis\n\t- \"When should you pull out code into its own component? When it makes your code more testable, more reusable or more readable. Even if you are only going to use a component once, turning it into a component forces you to give it a descriptive name and puts its logic in a separate place, which makes your code easier to understand.\" //quote\n\t- don't do this, instead send only props which will be used:##dontdoddju\n- https://frontendmasters.com/courses/complete-react-v8/styling-the-pet-component\n\t- puts throttling on slow 3G and shows that it has some bad user experience as it loads#gif#theslow33\n\t\t- he'll fix that later\n\t- always make smaller components\n\t\t- you should always be thinking how you can do this as you problem in React\n- https://frontendmasters.com/courses/complete-react-v8/react-dev-tools\n\t- if you are using Webpack, you have to know what the NODE_ENV is set to\n\t- <React.StrictMode> has strict mode\n\t\t- it renders your app twice, which causes more problems than it helps\n\t- installs React Dev Tools\n\t\t- it shows up here:##thedevtools\n\t\t- profile shows you how long components take to load##youcanmodifyit\n\t\t- tried it, you can modify state variables works:##tooslworks\n\t\t- too bad you don't have the names of the state varialbes, only their number##notthenameskj\n\t\t- but apparently you can click on the **magic wand**, which is in both Firefox and Chrome, and the names will show because [the React team fixed this](https://stackoverflow.com/a/68450268/4639):#gif#itwillshowitwith\n- https://frontendmasters.com/courses/complete-react-v8/react-router\n\t- \"React Router is definitely a moving target, it has the habit of drastically changing between versions which makes it hard to keep up with, but what I applaud the React Router team for is when they think they can do something better, they just do it, and make everyone come along for the ride, which is usually to our benefit. Other frameworks do this differently, for example Ember keeps their cruft around forever. Which is better? Probably somewhere in the middle, but here we are.\"\n\t- going to make an app with two pages\n\t- `npm i react-router-dom`\n\t- **App.tsx**\n\t\t------------------------------------------------\n\t\timport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\t\t------------------------------------------------\n\t- image path trick\n\t\t- <img src={window.location.origin + `/images/keyboard.png`} />\n\t- details page\n\t\t- **Nav.tsx**\n\t\t\t--------------------------------------------------\n\t\t\t<Route path=\"/details\">\n\t\t\t\t<Route index element={<Details />} />\n\t\t\t\t<Route path=\":id\" element={<Details />} />\n\t\t\t</Route>\n\t\t\t--------------------------------------------------\n\t\t- **Details.tsx**\n\t\t\t-------------------------------------------------\n\t\t\timport { useParams } from \"react-router-dom\";\n\n\t\t\tconst { id } = useParams();\n\n\t\t\t{id ? <p>showing id={id}</p> : <p>main details page</p>}\n\t\t\t-------------------------------------------------\t\n\t- if you can avoid using the **HashRouter**, please do, you will have better SEO\n\t\t- you might have to use this if working with Django for instance\n\t- **StaticRouter**\n\t\t- for server-side rendering\n\t- React router is also very accessibility focused\n- https://frontendmasters.com/courses/complete-react-v8/useparams\n\t- shows **useParams**\n\t- that is 80% of what React Router is used for, basic client-side routing\n- https://frontendmasters.com/courses/complete-react-v8/react-query\n\t- React Query at first felt optional, not totally best case\n\t- \"The React community has moved far enough along that React Query is not really optional anymore, basically everybody uses it. React Query, now known as TanStack Query, basically says, \"here's a key, here's a URL, here's a fetch method\" and then it handles your API request for you. The useEffect hook is the hardest, most cognitively burdensome part of React, and React Query simplifies and streamlines it for you in order to accomplish data fetching.\" //quote\n\t- \"Let me share this wisdom with you: minimize useEffects in your code. If there is a library that can handle it for you, do that. Where you have effects, try to contain them to small, testable areas. This is the secret to a long, happy life with React.\" //quote\n\t- API data fetching is 95% of the use case for effects\n\t- `npm i @tanstack/react-query`\n\t- **App.tsx**\n\t\t--------------------------------------\n\t\timport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\n\t\tconst queryClient = new QueryClient({\n\t\t\tdefaultOptions: {\n\t\t\t\tqueries: {\n\t\t\t\t\tstaleTime: Infinity,\n\t\t\t\t\tcacheTime: Infinity\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t--------------------------------------\n\t- although it gives me an error:##theapperrorksjd\n\n\t- React Query cache is stored in memory\n\t- BrowserRouter and QueryClientProvider is a higher order component\n\t\t- it doesn't display anything\n\t\t- it just gives functionality to the underlying component\n\t- couldn't get fetchData to get the right type:\n\t\t- **fetchData.ts**\n\t\t\t------------------------------------------------\n\t\t\timport { QueryFunctionContext } from \"@tanstack/react-query\";\n\n\t\t\tinterface IProps {\n\t\t\t\tqueryKey: QueryFunctionContext<[number]>;\n\t\t\t}\n\t\t\texport const fetchData = async ({ queryKey } : IProps) => {\n\t\t\t\tconst id = queryKey[1];\n\t\t\t\tconst apiRes = await fetch(`http://...`);\n\n\t\t\t\tif (!apiRes.ok) {\n\t\t\t\t\tthrow new Error (`details...`) // for debugging\n\t\t\t\t}\n\n\t\t\t\treturn apiRes.json(); // returns a promise\n\t\t\t}\n\t\t\t------------------------------------------------\n- https://frontendmasters.com/courses/complete-react-v8/performance-optimization-with-react-query\n\t- he uses his fetchPet like this:##thereactquery\n\t- \"The fact that I get free caching with React Query is so compelling to me that I basically always use it when I use React.\" //quote\n- https://frontendmasters.com/courses/complete-react-v8/refactoring-fetchbreedlist\n\t- creating fetchBreedList.js\n\t- \"You could probably make some factory that generates endpoints for you, but I usually try to wait awhile before I make an abstraction. I'm more of a write-it-three-times-and-on-the-fourth-time-I'll-think-about-it person, but that's just personal experience. Abstraction is generally your enemy when it comes to good, maintainable code.\" //quote\n\t- refactors from 35 lines to 7\n\t- mentions [useMutations](https://tanstack.com/query/v4/docs/react/guides/mutations)\n- https://frontendmasters.com/courses/complete-react-v8/uncontrolled-forms\n\t- if you are just sending data to the API, you can use an **uncontrolled form**\n\t- is using React Query for this##fetchsearchfunc\n\t- adds **name** attributes so it works as a classic form\n\t- submit event:##thesubsubjjj\n\t- has now removed all useEffects from his code\n- https://frontendmasters.com/courses/complete-react-v8/class-components\n\t- creating a class components\n\t- the older way\n\t- \"I used to teach a lot of class components, my first class on React was only class components because there were no function components back then, but as time goes by, I teach class components less and less, and now it's just kind of a footnote.\" //quote\n\t- class components and hooks do not mix\n\t- every class has a render function\n\t- you have **this.state** and **this.props**##theclassstsaste\n\t- useEffect\n\t\t- componentDidMount()\n\t\t- componentDidUpdate()\n\t- it's not deprecated\n\t- it's rare to see new projects with classes anymore \n\t- you can use both in a project\n\t- it's a matter of taste, there is no distinct advantage of classes, except perhaps\n\t\t- shouldComponentUpdate() allows you to get very detailed about when the component should rerender\n- https://frontendmasters.com/courses/complete-react-v8/handling-events-in-class-components\n\t- a classic function method has **this** as undefined\n\t- an arrow function method has **this** as the component\n\t- \"this is just JavaScript weirdness\"\n\t- \"everything in the DOM is a string\"\n\t- they used to have **React.createClass()**\n\t\t- 2013-2017\n\t\t- code\t\n\t\t\t-------------------------------------------\n\t\t\tvar CodeExercises = React.createClass({\n\t\t\t\trender: function() {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h1>Testing</h1>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t\t-------------------------------------------\n\t\t- Brian liked it better than class components\n\t\t- they got rid of it to comform to the new JavaScript class syntax\n\t- with class components, instead of hooks, you use higher-order components##thehigherorddd\n- https://frontendmasters.com/courses/complete-react-v8/error-boundaries\n\t- error boundary\n\t\t- works [only with class component](https://stackoverflow.com/questions/48482619/how-can-i-make-use-of-error-boundaries-in-functional-react-components)\n\t\t- creates ErrorBoundary.jsx\n\t\t\t- if there is an error, this is what I want you to change the state to be\n\t\t- mentioned that \"you would want to send this to something like [track.js](https://trackjs.com/pricing)\", a paid service\n\t\t- if there is an error in any of its children, it sends the error, otherwise the children##eithererrojsor\n\t- you would want to catch errors in e.g. an online editor with user input\n- https://frontendmasters.com/courses/complete-react-v8/modals-with-portals\n\t- modals are a terrible interface\n\t- in the old day so React, modals were hard to create\n\t- Modal.jsx\n\t\t- is using useRef\n\t- has a <div id=\"modal\"></div>\n\t- Q: how to you do componentWillUnmount in a function component\n\t\t- in useEffect, return a function:##theusereffecfunc\n\t- everytime you do document dot something, it's slow\n- https://frontendmasters.com/courses/complete-react-v8/implementing-modals-with-portals\n\t- uses the modal\n\t- \"React Portals provides the ability for an element to render outside the default hierarchy without compromising the parent-child relationship between components\"\n\t\t- [Building a modal in React with React Portals](https://blog.logrocket.com/build-modal-with-react-portals)\n- https://frontendmasters.com/courses/complete-react-v8/context\n\t- context is global app level state\n\t- you could also use Redux or Mobx\n\t- you can also just pass in variables to prop\n\t- You shouldn't heavy-handedly apply appContext to everything and say: oh I have state, let's make state available everywhere. Bad idea. You really want to be judicious about where state goes. One of the benefits of React is how explicit data can flow throughout your app. If you have two components that share a specific state and no other component does, then just share it between them as a state##thecontesdkfjs\n- https://frontendmasters.com/courses/complete-react-v8/context-q-a\n\t- context is read and right, e.g. you can pass functions\n\t- \"I start by using context for little bits of state wherever I need them, and then when I start having too much app state, I move into a more robust solution like Redux Toolkit.\" //quote\n- https://frontendmasters.com/courses/complete-react-v8/wrapping-up\n\t- transitions are for problems Facebook has, not everyone has Facebook problems\n\t- the [intermediate course](https://frontendmasters.com/courses/intermediate-react-v5) is recommended to take after this one","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-10-31 19:13:07","systemWhoCreated":"systemUnknown"},{"id":761,"category":"CSS","title":"Notes on David Khourshid's CSS Animations and Transitions course","body":"- infos\n\t- **project repository** I created during this tutorial is here:\n\t\t- nnn\n\t- **online site** is here: \n\t\t- nnn\n\t- **his repo**\n\t\t- https://github.com/davidkpiano/frontend-masters-css\n- https://frontendmasters.com/courses/css-animations/introduction\n\t- he used to recreate dribbbles at: https://dribbble.com\n\t- mentions state machinees\n\t- has live-streaming YouTube channel called [keyframers](https://www.youtube.com/watch?v=nI-HjWuwppA)\n\t- will have no frameworks, just CSS or rather Sass\n\t- shows: https://www.superlist.com\n\t- mentions **lerp techniques**\n\t\t- Linear interpolation, or lerp for short, is a technique commonly used when programming things like games or GUIs, in principle, a lerp function eases the transition between two values over time, using some simple math\n\t- will be showing how to mix JavaScript and CSS\n- https://frontendmasters.com/courses/css-animations/course-overview\n\t- moving from no JavaScript to more JavaScript\n\t- will be building an inflight app for an airline\n\t- will be using a script tag in the index file to keep JavaScript concepts simple\n\t- it take a dribbble and recreate it together\n- https://frontendmasters.com/courses/css-animations/animation-fundamentals\n\t- why animate\n\t\t- guidance and clarification\n\t\t- style and branding\n\t\t\t- app should feel cohesive\n\t- duration\n\t- easing\n- https://frontendmasters.com/courses/css-animations/animation-easing\n\t- you can play with this in the web dev tools##thebezzzijsd\n\t- you have entry, movements, exits\n\t- Google: 200-500 milliseconds\n\t- when something is clicked off, it should disappear as soon as possible\n- https://frontendmasters.com/courses/css-animations/css-variables\n\t- CSS variables are inherited\n\t- Chrome dev tools gives you a way to change the value of the CSS variable, Firefox doesn't seem to have this:##youchandchacolor\n\t- you can set this in JavaScript as well:##youcansetthiseinj\n\t- made button that changes the CSS variable\n\t- best cubic-bezier is:\n\t\t- `cubic-bezier(0.5, 0, 0.5, 1)`\n\t- CSS variable inherit and they cascade\n- https://frontendmasters.com/courses/css-animations/what-to-animate\n\t- DOING","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-01 01:22:41","systemWhoCreated":"systemUnknown"},{"id":762,"category":"React","title":"Learn basics of React by creating an employee display page","body":"- **what we will learn**\n\t- create a site with **Vite React**\n\t- publish it at **Vercel**\n\t- use **JSX variables**\n\t- use **conditional rendering**\n\t- import and display **JSON**\n\t- use **map()**\n\t- install **Tailwind and Sass**\n\t- display images with **import** and **img**\n- **what we will create**\n\t- this will be a one-page React site (no components or React Router)\n\t- it will read a local JSON file which is an array of employee objects\n\t- we will display these employees on the page\n\t- each employee will have a pictures\n\t- depending on a config setting, less or more data will be shown for each employee\n- **code is here**\n\t- https://github.com/edwardtanguay/et358-vite-react-site\n- **live site is here**\n\t- https://et358-vite-react-site.vercel.app\n- **site works like this**\n\t- you can change a config variable to publish a site that shows less or more information#gif#seeitinsjdfkborw\n- **(1) CREATE A MINIMIZED VITE REACT SITE**\n\t- create base site\n\t\t- `npm create vite@latest`\n\t\t- project name, e.g. **et358-vite-react-site** (choose your own project name of course)\n\t\t- React\n\t\t- TypeScript\n\t- open site in VSCode and start\n\t\t- `code et358-vite-react-site`\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- you should see this##thevitereactiosdf\n\t- set up Git\n\t\t- `git init -b dev`\n\t- set up Prettier (e.g. to make tabs consistent)\n\t\t- **.prettierrc**\n\t\t\t---------------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t\t- install Prettier extension##theprettttt\n\t\t- make prettier format whever you save a file\n\t\t\t- settings: Format On Save##theformrmssave\n\t\t- `npm i -D prettier`\n\t\t- **packager.json** - in scripts\n\t\t\t-----------------------------------------------\n\t\t\t\"pretty\": \"prettier --write \\\"./**/*.{js,jsx,mjs,cjs,ts,tsx,json}\\\"\"\n\t\t\t-----------------------------------------------\n\t\t- format all files in project\n\t\t\t- `npm run pretty`\n\t- minimalize site\n\t\t- delete **assets** folder\n\t\t- delete **App.css**\t\n\t\t- **App.tsx**\n\t\t\t----------------------------------\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h1>Employee Site</h1>\n\t\t\t\t\t\t<p>this is a test</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\n\t\t\texport default App;\t\t\n\t\t\t----------------------------------\n\t\t- **index.css**\n\t\t\t- empty contents\n\t\t- **main.tsx**\n\t\t\t- delete `<React.StrictMode>` element because [it makes useEffect render twice in dev mode](https://stackoverflow.com/questions/61254372/my-react-component-is-rendering-twice-because-of-strict-mode)##delstridk\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t\t<title>Employee Site</title>\t\t\n\t\t\t-------------------------------\t\t\n\t\t- minimalized site looks like this:##theminminsssis\n- **(2) ADD STYLING**\n\t- style with CSS first\n\t\t- **index.css** - the only style file we have\n\t\t\t----------------------------------------------\n\t\t\tbody {\n\t\t\t\tpadding: 0 1rem;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tcolor: red;\n\t\t\t}\n\t\t\t----------------------------------------------\n\t\t- site looks like this:##thsieiwthcss\n\t- install Sass\n\t\t- `npm i -D sass`\n\t\t- change index.css file to **index.scss** \n\t\t- **main.tsx**\n\t\t\t------------------------------------------\n\t\t\timport \"./index.scss\";\n\t\t\t------------------------------------------\n\t\t- **index.scss**\n\t\t\t----------------------------------------\n\t\t\tbody {\n\t\t\t\tpadding: 0 1rem;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tbackground-color: beige;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: brown;\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- Sass works:##thesassworksjks\n\t- install Tailwind\n\t\t- Tailwind is a perfect styling tool for React since it enables you to style components in the component itself\n\t\t- Sass adds features such as indenting, variables, mixins and functions\n\t\t- Tailwind and Sass can coexist and work together in a React application\n\t\t- these are my default styling choices for React apps\n\t\t\t- I find myself using about 90% Sass and 10% Sass\n\t\t- go to [Install Tailwind CSS with Vite](https://tailwindcss.com/docs/guides/vite)\n\t\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t\t\t- `npx tailwindcss init -p`\n\t\t\t- **tailwind.config.js**\n\t\t\t\t--------------------------------------\n\t\t\t\t/** @type {import('tailwindcss').Config} */\n\t\t\t\texport default {\n\t\t\t\t  content: [\n\t\t\t\t\t\"./index.html\",\n\t\t\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t\t\t  ],\n\t\t\t\t  theme: {\n\t\t\t\t\textend: {},\n\t\t\t\t  },\n\t\t\t\t  plugins: [],\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t\t- erase all styling out of **index.scss** and replace with Tailwind only:\n\t\t\t\t-------------------------------\n\t\t\t\t@tailwind base;\n\t\t\t\t@tailwind components;\n\t\t\t\t@tailwind utilities;\t\t\t\t\n\t\t\t\t-------------------------------\n\t\t- restart site\n\t\t\t- `npm run dev`\n\t\t- you should see a Tailwind reset styling:##theblanktails\n\t\t- style with Tailwind\n\t\t\t- **index.html**\n\t\t\t\t--------------------------------------\n\t\t\t\t<body class=\"bg-slate-300 p-4\">\n\t\t\t\t--------------------------------------\n\t\t\t- **App.tsx**\n\t\t\t\t------------------------------------------\n\t\t\t\t<h1 className=\"text-3xl mb-3 text-blue-800\">Employee Site</h1>\n\t\t\t\t------------------------------------------\n\t\t- style with Sass\n\t\t\t- since Tailwind doesn't support small-caps, you can add it with Sass\n\t\t\t\t- **index.scss**\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\t@tailwind base;\n\t\t\t\t\t@tailwind components;\n\t\t\t\t\t@tailwind utilities;\n\n\t\t\t\t\t@layer base {\n\t\t\t\t\t\th1 {\n\t\t\t\t\t\t\tfont-variant: small-caps;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t--------------------------------------------\n\t\t- Tailwind/Sass styled site will now look like this:##sasstailskdfji\n- **(3) DISPLAY TEXT FROM VARIABLES**\n\t- **App.tsx**\n\t\t-------------------------------------------------------\n\t\tfunction App() {\n\n\t\t\tconst title = 'Employee Directory';\n\t\t\tconst introText = \"Welcome to our Employee Directory, your one-stop destination for discovering and connecting with the talented individuals who make our organization thrive.\";\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h1 className=\"text-3xl mb-3 text-blue-800\">{title}</h1>\n\t\t\t\t\t<p>{introText}</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t\t-------------------------------------------------------\n- **(4) LOAD AND DISPLAY DATA FROM LOCAL JSON FILE**\n\t- download employee data and images into site\n\t\t- create **src/data/employees.json**\n\t\t\t- fill it with this JSON array: https://edwardtanguay.vercel.app/share/employees.json\n\t\t- create folder **public/images/employees**\n\t\t\t- download and unpack these images: https://edwardtanguay.vercel.app/share/images/employees/employees.zip\n\t\t\t- copy them into the **public/images/employees** folder##theimasdfiarethere\n\t- display minimal employee data on page\n\t\t- **App.tsx**\n\t\t\t-----------------------------------\n\t\t\timport employees from './data/employees.json';\n\n\t\t\t<ul>\n\t\t\t\t{employees.map(employee => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li>{employee.firstName}</li>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</ul>\n\t\t\t-----------------------------------\n\t\t- now showing first names:##basicemplsd\n\t- display base information for each employee with styling\n\t\t- **App.tsx**\n\t\t\t------------------------------------------\n\t\t\t<div>\n\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"bg-slate-800 mt-3 text-slate-200 p-3 rounded\">\n\t\t\t\t\t\t\t<div>{employee.firstName} {employee.lastName}</div>\n\t\t\t\t\t\t\t<div className=\"text-yellow-200\">{employee.title}</div>\n\t\t\t\t\t\t\t<div className=\"mt-2 italic text-slate-400\">{employee.notes}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\t\t\t\n\t\t\t------------------------------------------\n\t\t- looks like this:##thesecondstylsijdf\n\t- add images of each employee\n\t\t- **App.tsx**\n\t\t\t-------------------------------------------------\n\t\t\t<div>\n\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"bg-slate-800 mt-3 text-slate-200 p-3 rounded\">\n\t\t\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tclassName=\"w-28 rounded\"\n\t\t\t\t\t\t\t\t\tsrc={`images/employees/employee_${employee.employeeID}.jpg`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{employee.firstName} {employee.lastName}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"text-yellow-200\">\n\t\t\t\t\t\t\t\t\t\t{employee.title}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"mt-2 italic text-slate-400\">\n\t\t\t\t\t\t\t\t{employee.notes}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- now looks like this:##theimaemepsalla\n\t- fix the \"Each child should have a unique key\" warning\n\t\t- you have to add a unique string for every item that is mapped\n\t\t- we happen to have a unique text, i.e. **employee.employeeID**\n\t\t- if you don't, then you have to use the **index** value from **map**##thefixforkeykey\n- **(5) ADD DATA BASED ON VARIABLE**\n\t- now we want to make a variable **accessGroup** that can be \"administrators\" or \"members\"\n\t- if the variable is **administrators**, then personal information for each employee is displayed\n\t- first show the information always:\n\t\t- **App.tsx**\n\t\t\t--------------------------------------\n\t\t\t<div className=\"text-orange-600\">\n\t\t\t\tTel: {employee.address.phone}\n\t\t\t</div>\n\t\t\t<div className=\"text-orange-600\">\n\t\t\t\tBirthday: {employee.birthDate}\n\t\t\t</div>\t\t\n\t\t\t--------------------------------------\n\t\t- note that date is not shown in a standard form:##notthestand\n\t\t- let's format the date with **day.js**\n\t\t\t- `npm i dayjs`\n\t\t\t- **App.tsx**\n\t\t\t\t----------------------------------------------\n\t\t\t\timport dayjs  from 'dayjs';\n\n\t\t\t\tBirthday: {dayjs(employee.birthDate).format('MMM DD, YYYY')}\n\t\t\t\t----------------------------------------------\n\t\t- dates now are shown formatted correctly:##twoformsfdates\n\t- create a config file that holds whether or not this site is for a user in the access group **administrators** or **members**\n\t\t- **type.ts** - will only allow two values for this variable\n\t\t\t--------------------------------\n\t\t\texport type UserAccessGroup = 'administrators' | 'members';\n\t\t\t--------------------------------\n\t\t- **config.ts** - a central file that contains all config information for the app\n\t\t\t-------------------------------------\n\t\t\timport { UserAccessGroup } from \"./types\";\n\n\t\t\texport const userAccessGroup: UserAccessGroup = 'members';\t\t\t\n\t\t\t-------------------------------------\n\t\t- **App.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport * as config from \"./config\";\n\n\t\t\t<p className=\"mb-3\">\n\t\t\t\tYou are in the group{\" \"}\n\t\t\t\t<span className=\"italic\">{config.userAccessGroup}</span>.\n\t\t\t</p>\n\n\t\t\t{config.userAccessGroup ===\n\t\t\t\t\"administrators\" && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"text-orange-600\">\n\t\t\t\t\t\tTel: {employee.address.phone}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-orange-600\">\n\t\t\t\t\t\tBirthday:{\" \"}\n\t\t\t\t\t\t{dayjs(\n\t\t\t\t\t\t\temployee.birthDate\n\t\t\t\t\t\t).format(\"MMM DD, YYYY\")}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\t\t\t\n\t\t\t-----------------------------------------------\n- **(6) ADD AN IMPORTED IMAGE**\n\t- the images we have of each employee are in a directory under public\n\t- this is ideal for images that change often e.g. images that correspond to arrays of objects as in this case\n\t\t- we access these with a simple JSX img tag which gets transpiled as a simple HTML img tag with a reference to the image in the **/public/images** folder\n\t- however, if you have images that are a more permanent part of the layout, it is common to import them as a variable\n\t- create a folder **/src/images**\n\t\t- save [this image](https://github.com/edwardtanguay/et358-vite-react-site/blob/dev/src/images/cityscape.jpg) into it\n\t- note that this image is not in the /publics folder and so won't be automatically copied to the /dist folder during **npm run build**\n\t\t- but it will (or can) be optimized, and it will copied to the **assets** folder with a different name\n\t- **App.tsx**\n\t\t-----------------------------------\n\t\timport cityscape from './images/cityscape.jpg';\n\n\t\t<img className=\"mb-3 rounded\" src={cityscape}/>\n\t\t-----------------------------------\n\t- the site will look like this##sitewithcityimas\n- ** (7) PUBLISH TO VERCEL\t\t\n\t- before we publish this site to Vercel, let's run **npm run build** on it locally\n\t\t- this is the command that Vercel will run to create the files that it will make accessible publically on its CDN\n\t\t- understanding what files the build process creates helps you debug errors later\n\t- first notice that there is no **/dist** directory yet##nodistkhere\n\t- `npm run build`\n\t- now there is a dist directory with the following content:##nowthedistsd\n\t- note the site has been converted to essentially an **index.html** file that references a **CSS file** and a **JavaScript file**\n\t\t- the **index.html** file is similar but not the same as the index.html file we have in root\n\t\t- the **CSS** file has a cryptic name, and all Tailwind and Sass has been convered to a minified block of CSS code##thecssokok\n\t\t- the **JavaScript** file also has a cryptic name, and in it you find a large block of minimized JavaScript transpiled from our TypeScript files##thejsjstransstej\n\t\t- all folders and files that are in the **public** directory was copied 1-to-1 into the **dist** directory\n\t\t- and our **imported image** has been renamed and is in the **assets** folder along with the CSS and JavaScript file##theimscity\n\t- a note about **security** on this site:\n\t\t- we only show the birthdays and telephone numbers if the variable **userAccessGroups** is **administrators**\n\t\t- we currently have it set to **members** so birthday and telephone number are not displayed\n\t\t- and indeed, in the JavaScript file, if we search for the word **Birthday**, we won't find it since this information is not in this transpiled text at all, since in this version of the site, that variable **userAccessGroups** will always be **members**\n\t\t- but if we **allow the user to change this variable** so that userAccessGroups **could be** \"administrators\", then all of the telephone numbers and birthdays would be able to be found in plain text in this JavaScript file (!)\n\t\t- the lesson here is to understand:\n\t\t\t- React sites run 100% on the client\n\t\t\t- all code that **could be** shown can be found in the compiled JavaScript file that is sent to the browser\n\t\t\t\t- even though on the site, one might have to click something or type in a password to see it\n\t- publishing to Vercel is simple\n\t\t- make a final commit and push to your GitHub repository\n\t\t- at Vercel **add a new project**##addnewprojojkdj\n\t\t- click on **Import**##clickonimposdf\n\t\t- click on **Deploy**##onthedeploys\n\t\t- and less than 20 seconds, you will see that your site has been published:##youtheconfjsdf\n\t\t- click on the screenshot and you will be taken to your published site##seeitinsjdfkborw","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-01 14:32:58","systemWhoCreated":"systemUnknown"},{"id":763,"category":"Tailwind","title":"Notes from Live Tailwind Workshop 2023-11-03 with Steve Kinney","body":"- project repo is here:\n\t- https://github.com/edwardtanguay/et378-react-tailwind\n- workshop notes:\n\t- https://tailwind-workshop.vercel.app/introduction\n- intro\n\t- by cheating CSS I mean PostCSS\n\t- Tailwind\n\t\t- now we use Tailwind for basically everything\n\t\t- flexible\n\t\t- makes media-queries simple and elegant\n\t- playground\n\t\t- https://play.tailwindcss.com\n\t- it's not a framework\n\t\t- it's a set of tooling that allows you to write utility-first classes\n\t- I'm not as staunch\n\t- running a big code base is like bartering with reality at all times\n\t- tailwind helps you bundle the smallest bundle of css at all times\n\t\t- one class does \"extra large text\"\n\t- separation of concerns is passe, I'm already writing JSX, Tailwind will be alright\n\t- once you get into the routine of it, the level of productivity is incredible and you don't want to go back\n\t- all your responsive design is in one place##thiwjplac\n\t- it's customizable\n\t- all CSS you know is going to benefit you learning Tailwind\n\t- this is going to be the practical \n\t- it is effectively a postcss plugin\n\t- uses purgeCSS\n\t\t- looks for what CSS classes you are actually using\n\t- shadcn/ui is getting popular\n\t- Monaco, the VSCode editor\n- basics\n\t- the ergonomics of being able to see it right then and there, is powerful\n\t- layers are not a Tailwind thing\n\t\t- ships with three layers\n\t\t\t- 1. base\n\t\t\t\t- CSS reset called preflight\n\t\t\t\t\t- it's aggressive, buttons don't look button-like##thenormaksjdf\n\t\t\t\t- for what you override in HTML elements, e.g. h1, p, etc. \n\t\t\t\t- e.g. h1\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t\th1 {\n\t\t\t\t\t\t@apply text-2xl;\n\t\t\t\t\t}\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t- @apply is provided by Tailwind\n\t\t\t\t- m-4 = 1rem\n\t\t\t\t- m-8 = 2rem\n\t\t\t\t- you can use a theme - this didn't work for me\n\t\t\t\t\t--------------------------------------\n\t\t\t\t\tbackground-color: theme(backgroundColor.red.700)\n\t\t\t\t\t--------------------------------------\n\t\t\t\t- theme is in tailwind.config.js\n\t\t\t\t\t- you can name the colors: light, medium, dark\n\t\t\t\t\t- you can generate a full color palette in Figma\n\t\t\t\t- can define colors\n\t\t\t\t\t--------------------------------------\n\t\t\t\t\ttheme: {\n\t\t\t\t\t\textend: {\n\t\t\t\t\t\t\tcolors: {\n\t\t\t\t\t\t\t\tprimary: {\n\t\t\t\t\t\t\t\t\tdark: '#CC00CC',\n\t\t\t\t\t\t\t\t\tDEFAULT: 'orange'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t},\t\t\t\t\t\n\t\t\t\t\t--------------------------------------\n\t\t\t\t- you can also do this:##canalskddothis\n\t\t\t- 2. components\n\t\t\t\t- basic components like buttons, cards, etc. \n\t\t\t\t- e.g. .btn, .card\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\t@layer components {\n\t\t\t\t\t\t.btn {\n\t\t\t\t\t\t\t@apply rounded bg-blue-500 px-4 py-2 text-white;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t--------------------------------------------\n\t\t\t- 3. utilities\n\t\t\t\t- just one-off classes\n\t\t\t\t\t- \"I just need to make this thing wider\"\n\t\t\t\t\t- come later so they have higher specificity\n\t\t\t\t- e.g. gap between two columns\n\t- you can write plugs for Tailwind\n\t\t- https://tailwindcss.com/docs/plugins\n\t- **colors**\n\t\t- TODO\n\t\t- https://uicolors.app/create\n\t\t- you can then just copy them in##youcanddoitsd\n\t- new styles\n\t\t- from-green-500\n\t\t- gradiants##thegradidaksj\n\t\t- TODO: current\n\t\t- **space-x-10**##thesdkjiok\n\t\t- **divide**##devidisjs\n\t\t- **space-y-4**##tehspacey\n\t\t- TODO:##todomaxw\n\t\t- mx-auto##themaxauto\n\t\t- negative value##negativevalue\n\t\t- TODO: important is an exclamation mark\n\t\t- divide##thedeivsd\n\t- hover\n\t\t- hover##thehovereskj\n\t\t- active##activefildsdf\n\t- disabled##disablskdjf\n\t- TODO: try these:##trythese\n\t- TODO: try these:##therasrange\n\t- TODO: curent##todowhatiscurrent\n\t- outline-none to take off the operating sytem styles##outlinenonene\n\t- placeholder##placeholderpurple\n\t- TODO: lookup##looksdtheir\n\t- TODO: try##invalidjsiditry\n\t- TODO: cursor:##cursorskdjfijij\n\t- `h-10 w-full`\n\t- empty##theempty\n\t- if the peer is invalid, you can only do forward-peer selections##ifthepeer\n\t- TODO: lookup has()##lookuphashas\n\t- has works like this:##haswouldworkdli\n\t- TODO: wavy exists:##trythiwavy\n\t- \"If there's only one thing you learn about the Tailwind docs, it's CTRL-K and you search.\" //quote\n\t- you get a lot of interaction for free with Tailwind\n\t- group-hover##thegroupsd\n\t- group and peer are similar\n\t\t- but peer only works on younger siblings in front of it\n\t- group-data##groupdata\n\t- container\n\t\t- a component for fixing an element's width to the current breakpoint\n\t- group and group-hover#gif#thegrouhoeverj\n\t- \"With Tailwind, there's a whole class of problems I don't have to write code for anymore.\" //quote##dropdowndetailsdemo2\n\t- dark-mode##darkmodisdfj\n\t- dark selection:##darkselectionsdkfj\n\t- for when user rotates their smartphone##forhandzsdf\n\t- Tailwind is best known for layout features\n\t\t- \"Discoverability is an delightful feature of Tailwind.\" //quote\n\t- with Tailwind you don't have to write media queries#gif#tehmediasdkjf\n\t- \"Yes, every part of me wants to abstract away styles into a stylesheet, but every part of me that has to look back and forth between two files to find out what a style is, hates me for doing that.\" - Steve Kinney\n\t- responsive##sresponsidvj\n\t- TODO: practice columns with media-queries\n\t- grid##thegridjskdjf\n\t- grid example##thegridok\n\t- animations##animapuls\n\t- select-all\n\t- class=\"sr-only\" = screen-reader only##scrjsehea\n\t- transitions and animations\n\t- TODO: check out plugins\n\t\t- e.g. container queries\n\t\t\t- the think you need that you didn't know you wanted\n\t- final questions\n\t\t- considerations for production\n\t\t\t- know what is created, e.g. what is minified\n\t\t\t- it only sends in the classes that are used\n\t\t- Do you have any resources for scrolling panels within a grid container? I'm looking to build a fullscreen app layout similar to Slack\n\t\t\t- Flowbites documentation is good for learning Tailwind\n\t\t\t\t- great examples\n\t\t\t- our designers have their own design language\n\t\t\t- I've looked at those and they look great\n\t\t\t- I get inspiration them\n\t\t- integration with Figma\n\t\t\t- mapping the design tokens to tailwind classes\n\t\t- Tailwind equivalent to using calc()##likethiscalc\n\t\t- tips for handling scrolling panels as in Slack\n\t\t\t- TODO: scroll snapping\n\t\t- how to you incorporate CSS variables\n\t\t\t- TODO: you can use the -- syntax in square brackets\n\t\t- what is your framework of choice\n\t\t\t- Svelte\n\t\t\t- rest in peace Ember\n- questions/answers\n\t- @Marc could you please ask Steve this question, he seemed to not see a need to use Sass with Tailwind but I get so much use out of sites that have both, would like to know why he doesn't use them both together: I use Tailwind and Sass together because Sass has features such as lists, @each, @for, mixins, maps, if/else, color functions. Does Tailwind have similar features or do I need to use Sass with Tailwind to get them?\n\t\t- Steve: It all depends, Tailwind effectively can have what Sass has via postcss plugins, and it's a closing gap. It has color filters, but doesn't have each, so yesish, noish. Tailwind uses postcss which has plugins for most of what one has in Sass: https://postcss.org/docs/postcss-plugins##thejensk\n\t- CSS has cascade, is that a good trade off?\n\t\t- theoretically Tailwind is just applying CSS classes, so you still get cascade\n\t- Is there anyway to dynamically change a color in Tailwind: e.g. class=\"text-${color}-300\"\n\t- I can type these apply classes outside a base/component/utilities block. Is there a reason not to do this?","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-03 17:25:04","systemWhoCreated":"systemUnknown"},{"id":764,"category":"React","title":"Learn to use state variables and events to change the state of React site","body":"- **purpose of this howto**\n\t- learn **useState** and **event handling** in a React application\n- **most important concepts and skills**\n\t- **concepts**\n\t\t- **Q:** how is a state variable different than a regular variable\n\t\t\t- **A:** when a state variable is changed\n\t\t\t\t- the current components are rerendered\n\t\t\t\t- your entire application will be updated based on the new value of the state variable\n\t\t- **Q:** how do you change the value of a state variable\n\t\t\t- **A:** with a set variable, e.g. `setCount(count + 1)`\n\t\t- **Q:** why for an **string**, **number** or **boolean**, can you simply save the changed state variable \n\t\t\t- **A:** because these kinds of variables are saved on the stack\n\t\t\t\t- when you update a string, number or boolean, you are actually creating a new string, number or boolean with the updated value\n\t\t\t\t- which means when you change them, React recognizes that they changed\n\t\t- **Q:** why for an **array** or **object**, do you have to save a **copy** of the state variable\n\t\t\t- **A:** because arrays and objects are saved on the **heap**\n\t\t\t\t- they only point to values\n\t\t\t\t- if you don't change the pointer to the value, React will not recognize that the variable changed\n\t\t\t\t\t- React compares the references of the old and new objects. If the references are the same, React assumes that nothing has changed and does not trigger a re-render\n\t\t\t\t- state variables are **internally immutable**\n\t\t\t\t- this means you have to send a **complete copy** of them into your set function so that your application is properly updated\n\t\t\t\t- this is a concept of **functional programming** as opposed to **object-oriented programming**\n\t\t- **Q:** why you should deep clone objects with structuredClone() not spread operator \n\t\t\t- **A:** using the spread operator to copy an object creates only a shallow copy\n\t\t\t\t- using structuredClone() to copy an object creates a true deep clone\n\t\t\t\t- see: [Why you should deep clone objects with structuredClone() not spread operator](https://tanguay-eu.vercel.app/howtos/758)\n\t\t- **Q:** what important thing happens when state changes\n\t\t\t- **A:** all of your components re-render\n\t- **skills**\n\t\t- create and change state variables with useState\n\t\t\t- string\n\t\t\t- number\n\t\t\t- boolean\n\t\t\t- array\n\t\t\t- object\n\t\t- create a button that uses onClick to change a state variable\n\t\t- create an input field that uses onChange to change a state variable\n- **code is here:**\n\t- https://github.com/edwardtanguay/et913-react-state-events\n- **online site is here:**\n\t- https://et913-react-state-events.vercel.app\n- **site works like this:**#gif#thestateeventstiedemo\n- **>>> 1. Create minimized React site**\n\t- go to my blank React site repository: https://github.com/edwardtanguay/vite-react-base\n\t- click **Use this template** and create your own repository from it##tehcreateit\n\t- clone this new repository locally\n\t- enter with VSCode\n\t- `npm i`\n\t- `npm run dev`\n\t- your base React site should be set up like this:##theinfositejksdjfkdjf\n- **>>> 2. Create and change a string state variable**\n\t- create and display state variable **firstName**\n\t\t- import useState\n\t\t- create state variable\n\t\t- display##thefirstnameok\n\t- add button to change the state variable\n\t\t- **index.scss**\n\t\t\t------------------------------------------\n\t\t\tbutton {\n\t\t\t\t@apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;\n\t\t\t}\n\t\t\t------------------------------------------\n\t\t- **App.tsx**\n\t\t\t------------------------------------------\n\t\t\t<div className=\"bg-slate-400 p-4 rounded flex gap-2\">\n\t\t\t\t<button onClick={() => setFirstName('Andy')}>Change</button>\n\t\t\t\t<p className=\"text-2xl\">FirstName: {firstName}</p>\n\t\t\t</div>\n\t\t\t------------------------------------------\n\t\t- button should work like this:#gif#shouldworkbuttonlik\n- **>>> 3. Create and change a number state variable**\n\t- **App.tsx**\n\t\t--------------------------------------------------\n\t\tconst [randomNumber, setRandomNumber] = useState(Math.random());\n\n\t\t<div className=\"bg-slate-400 p-4 rounded flex gap-2 mb-3\">\n\t\t\t<button onClick={() => setRandomNumber(Math.random())}>Change</button>\n\t\t\t<p className=\"text-2xl\">Random number: {randomNumber}</p>\n\t\t</div>\t\t\n\t\t--------------------------------------------------\n- **>>> 4. Create wrapper component to prevent Tailwind code repetition**\n\t- note that we are beginning to have code repetition with Tailwind styles##thecoderepp\n\t- one way to put this code in one place would be to create an **@apply* style in **index.scss**\n\t- but component-based programming can also take care of this, while giving us other advantage, e.g. a place to put other repetitive code, not only styles\n\t- **App.tsx**\n\t\t----------------------------------------------------------------\n\t\t<VariableWrapper>\n\t\t\t<button onClick={() => setFirstName('Andy')}>Change</button>\n\t\t\t<p className=\"text-2xl\">FirstName: {firstName}</p>\n\t\t</VariableWrapper>\n\n\t\t<VariableWrapper>\n\t\t\t<button onClick={() => setRandomNumber(Math.random())}>Change</button>\n\t\t\t<p className=\"text-2xl\">Random number: {randomNumber}</p>\n\t\t</VariableWrapper>\n\t\t----------------------------------------------------------------\n\t- **VariableWrapper.tsx**\n\t\t------------------------------------------------------\n\t\tinterface IProps {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\texport const VariableWrapper = ({ children }: IProps) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"bg-slate-400 p-4 rounded flex gap-2 mb-3\">\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\t\t\n\t\t------------------------------------------------------\n- **>>> 5. Understand that every time a state variable changes, all components are rerendered**\n\t- **App.tsx**\n\t\t---------------------------------------\n\t\tconsole.log('in app: ' + Math.random());\n\t\t---------------------------------------\n\t- **VariableWrapper.tsx**\n\t\t---------------------------------------\n\t\tconsole.log('in VariableWrapper: ' + Math.random());\t\t\n\t\t---------------------------------------\n\t- any time you click either of the buttons\n\t\t- the App component renders once\n\t\t- the VariableWrapper component renders twice#gif#therenderstwice\n- **>>> 6. Create and change a boolean state variable**\n\t- **App.tsx**\n\t\t------------------------------------------------\n\t\t const [isOnline, setIsOnline] = useState(false);\n\n\t\t<VariableWrapper>\n\t\t\t<button onClick={() => setIsOnline(!isOnline)}>Change</button>\n\t\t\t<p className=\"text-2xl\">{isOnline ? 'user is online' : 'user is OFFLINE'}</p>\n\t\t</VariableWrapper>\t\t\n\t\t------------------------------------------------\n- **>>> 7. Create and change an array state variable**\n\t- make state variable\n\t\t- **App.tsx**\n\t\t\t----------------------------------------------------------\n\t\t\timport * as tools from \"./tools\";\n\n\t\t\tconst [htmlColors, setHtmlColors] = useState<string[]>([]);\n\n\t\t\tconst handleColorRemove = () => {\n\t\t\t\tconst _htmlColors: string[] = structuredClone(htmlColors);\n\t\t\t\t_htmlColors.pop();\n\t\t\t\tsetHtmlColors(_htmlColors);\n\t\t\t};\n\n\t\t\tconst handleColorAdd = () => {\n\t\t\t\tconst _htmlColors: string[] = structuredClone(htmlColors);\n\t\t\t\t_htmlColors.push(tools.getRandomHtmlColor());\n\t\t\t\tsetHtmlColors(_htmlColors);\n\t\t\t};\t\n\n\t\t\t<VariableWrapper>\n\t\t\t\t<div className=\"flex flex-col justify-start\">\n\t\t\t\t\t<div className=\"flex justify-start gap-3\">\n\t\t\t\t\t\t<button className=\"self-start\" onClick={handleColorAdd}>\n\t\t\t\t\t\t\tAdd Color\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"self-start\"\n\t\t\t\t\t\t\tonClick={handleColorRemove}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRemove Color\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t{htmlColors.length > 0 && (\n\t\t\t\t\t\t<div className=\"text-2xl flex gap-2 flex-wrap mt-3\">\n\t\t\t\t\t\t\t{htmlColors.map((color, index) => (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tclassName=\"text-[.8rem] w-[5rem] font-bold flex justify-center rounded p-2\"\n\t\t\t\t\t\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{color}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</VariableWrapper>\t\t\t\n\t\t\t----------------------------------------------------------\n\t- **tools.ts**\n\t\t----------------------------------------------\n\t\texport const getRandomHtmlColor = () => {\n\t\t\tconst allHtmlColors: string[] = [\n\t\t\t\t\"red\",\n\t\t\t\t\"green\",\n\t\t\t\t\"blue\",\n\t\t\t\t\"purple\",\n\t\t\t\t\"orange\",\n\t\t\t\t\"pink\",\n\t\t\t\t\"brown\",\n\t\t\t\t\"gray\",\n\t\t\t];\n\t\t\tconst randomIndex = Math.floor(Math.random() * allHtmlColors.length);\n\t\t\tconst htmlColor = allHtmlColors[randomIndex];\n\t\t\treturn htmlColor;\n\t\t};\n\t\t----------------------------------------------\n\t- it works like this#gif#arraystateworkslikethis\n- **>>> 8. Create and change an object state variable**\n\t- create a form for the user to enter data on a person\n\t- **App.tsx**\n\t\t-------------------------------------------------------------------\n\t\tconst initialPerson = {\n\t\t\tfirstName: \"\",\n\t\t\tlastName: \"\",\n\t\t\tage: 0,\n\t\t};\n\n\t\tconst [person, setPerson] = useState(initialPerson);\n\n\t\tconst handleFirstNameChange = (value: string) => {\n\t\t\tconst _person = structuredClone(person);\n\t\t\t_person.firstName = value;\n\t\t\tsetPerson(_person);\n\t\t};\n\n\t\tconst handleLastNameChange = (value: string) => {\n\t\t\tconst _person = structuredClone(person);\n\t\t\t_person.lastName = value;\n\t\t\tsetPerson(_person);\n\t\t};\n\n\t\tconst handleAgeChange = (value: string) => {\n\t\t\tconst _person = structuredClone(person);\n\t\t\t_person.age = Number(value);\n\t\t\tsetPerson(_person);\n\t\t};\n\n\t\tconst formIsValid = () => {\n\t\t\treturn person.firstName.trim() != '' && person.lastName.trim() != '' && Number(person.age) > 0 \n\t\t}\n\n\t\t<VariableWrapper>\n\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t<form className=\"w-full\">\n\t\t\t\t\t<fieldset style={{border: formIsValid() ? '' : '1px solid red'}} className=\"border border-gray-500 p-4 w-full rounded\">\n\t\t\t\t\t\t<legend>Your contact details:</legend>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"firstName\">\n\t\t\t\t\t\t\t\tFirst name:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tautoFocus \n\t\t\t\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\thandleFirstNameChange(e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalue={person.firstName}\n\t\t\t\t\t\t\t\tid=\"firstName\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"lastName\">\n\t\t\t\t\t\t\t\tLast name:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"lastName\"\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\thandleLastNameChange(e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalue={person.lastName}\n\t\t\t\t\t\t\t\tid=\"lastName\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"age\">\n\t\t\t\t\t\t\t\tAge:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclassName=\"text-right w-[4rem]\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"age\"\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\thandleAgeChange(e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalue={person.age}\n\t\t\t\t\t\t\t\tid=\"age\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t\t<pre className=\"mt-4 font-mono text-xs text-gray-950 font-bold\">{JSON.stringify(person, null, 2)}</pre>\n\t\t\t</div>\n\t\t</VariableWrapper>\n\t\t-------------------------------------------------------------------\n\t- the form will work like this:#gif#formworkliksethis","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-06 23:24:50","systemWhoCreated":"systemUnknown"},{"id":765,"category":"React","title":"Create a site that loads and displays jobs/skills using useEffect","body":"- **purpose of this howto**\n\t- learn **useEffect** to fetch asynchronous data and react to state variable changes\n\t- **code is here:**\n\t\t- https://github.com/edwardtanguay/et779-react-useeffect-jobs-skills-site - live-coding version 2023-11-08 with Cookie-popup consent form and components\n\t\t\t- **live site:** https://et779-react-useeffect-jobs-skills-site.vercel.app\n\t\t- https://github.com/edwardtanguay/et552-useeffect-jobs-skills-site - first version\n\t\t\t- **live site:** https://et552-useeffect-jobs-skills-site.vercel.app\t\n\t- **site works like this**:#gif#workwiththecookieask\n- **most important skills, concepts and tools**\n\t- **skills**\n\t\t- **Q:** how can you fetch asychronous data into a React application when it first loads\n\t\t\t- **A:** create a useEffect function inside your component function\n\t\t\t\t- use fetch or axios to fetch the data\n\t\t\t\t- in your JSX, use **conditional rendering** to show a loader text or graphic until the data arrives\n\t\t\t\t- make sure for the second argument in the useEffect function, use an empty array **[]**\n\t\t\t\t- this means to run once when the application loads\n\t\t- **Q:** how can you respond to a change in one or more state variables\n\t\t\t- **A:** create a useEffect function inside your component function\n\t\t\t\t- for the second argument in the useEffect function, list the arrays you want to respond to in an array, e.g. **[department, searchText]**\n\t\t- **Q:** when you create a Vite React app, **what should you remove** to prevent your useEffect from running twice in developer mode\n\t\t\t- **A:** in main.tsx remove **<React.StrictMode>**\n\t\t\t\t- this is a tool that might be helpful in larger apps to debug certain performance issues\n\t\t\t\t- unfortunately to calculate performance issues, it **runs useEffect twice** in development mode\n\t\t\t\t- unfortunately it is enabled by default in Vite applications\n\t\t\t\t- unfortunately this can lead to odd behavior in one's app if one doesn't know it is happening\n\t\t\t\t- for small and medium-size apps, and until you learn how to use it, React.StrictMode is unnecessary\n\t\t\t\t- advice: simply remove it from your apps\n\t\t\t\t- see more details on this issue here: [How to stop useEffect from running twice on mount or first render in React](https://www.youtube.com/watch?v=81faZzp18NM)\n\t- **concepts**\n\t\t- **Q:** what kind of variables does useEffect fill with data e.g. from APIs\n\t\t\t- state variable\n\t\t\t- useEffect and useState are almost always used together\n\t\t\t\t---------------------------------------------------\n\t\t\t\timport { useEffect, useState } from 'react';\n\t\t\t\t---------------------------------------------------\n\t\t- **Q:** how many useEffects can you use in one component?\n\t\t\t- as many as you need, usually one per API call\n\t\t\t- so that each API call loads independently\n\t\t\t- but perhaps for some reason, you want to load two or more, then combine them into a new data structure\n\t\t\t\t- so it depends\n\t\t\t- but there is no limit to how many useEffects you can have in one component\n\t\t- **Q:** why would you do a functional update of a state variable\n\t\t\t- **A:** if you are updating a variable in a useEffect that is not being observed\n\t\t- **Q:** what is a good rule for the use of useEffect in React\n\t\t\t- **A:** *\"Let me share this wisdom with you: minimize useEffects in your code. If there is a library that can handle it for you, like React Query, do that. Where you have effects, try to contain them to small, testable areas. This is the secret to a long, happy life with React.\"* - Brian Holt, Frontend Masters\n\t- **tools**\n\t\t- useEffect\n\t\t- fetch\n\t\t- axios\n\t\t- conditional rendering\n\t\t- react-icons\n\t\t- axios\n\t\t- react-modal\n- **what we will build**\n\t- we will create an application that \n\t\t- asynchronously reads two json files from the Internet: jobs and skills\n\t- displays them in two lists on the page, jobs left, skills right\n\t- allows the user to search for a term that shown jobs and skills with that keyword\n\t- clicking on a job or a skill opens it for more information\n\t- the site registers information about use activity (with a useEffect observing state variables)\n\t- asks the user to accept or decline cookie use\n- **>>> 1. Create minimized React site**\n\t- go to my blank React site repository: https://github.com/edwardtanguay/vite-react-base\n\t- click **Use this template** and create your own repository from it##tehcreateit\n\t- clone this new repository locally\n\t- enter with VSCode\n\t- `npm i`\n\t- `npm run dev`\n\t- your base React site should be set up like this:##theinfositejksdjfkdjf\t\t\n- **>>> 2. Load jobs data and display on page**\n\t- install axios\n\t\t- `npm i axios`\n\t- **App.tsx**\n\t\t-----------------------------------\n\t\timport { useEffect, useState } from \"react\";\n\t\timport * as config from \"./config\";\n\t\timport { IJob } from \"./interfaces\";\n\t\timport axios from \"axios\";\n\n\t\tfunction App() {\n\t\t\tconst [jobs, setJobs] = useState<IJob[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst _jobs = (await axios.get(config.jobsUrl)).data;\n\t\t\t\t\tsetJobs(_jobs);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800\">Jobs/Skills Site</h1>\n\t\t\t\t\t<h2 className=\"text-xl mb-3\">There are {jobs.length} jobs.</h2>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{jobs.map(job => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<p className=\"bg-slate-300 p-2 mb-2 w-[20rem] rounded\">{job.title}</p>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\n\t\t-----------------------------------\n\t- **config.ts**\n\t\t---------------------------------\n\t\texport const jobsUrl = 'https://edwardtanguay.vercel.app/share/jobs.json';\n\t\t---------------------------------\n\t- **interfaces.ts**\n\t\t-----------------------------------\n\t\texport interface IJob {\n\t\t\tid: number;\n\t\t\ttitle: string;\n\t\t\tcompany: string;\n\t\t\turl: string;\n\t\t\tdescription: string;\n\t\t\tskillList: string;\n\t\t\tpublicationDate: string;\n\t\t}\n\t\t-----------------------------------\n\t- site looks like this:##thejobskilswithjobs\t\n- **>>> 3. Load skills data and display on page**\n\t- **App.tsx**\n\t\t-----------------------------------------------\n\t\timport { useEffect, useState } from \"react\";\n\t\timport * as config from \"./config\";\n\t\timport { IJob } from \"./interfaces\";\n\t\timport { ISkill } from \"./interfaces\";\n\t\timport axios from \"axios\";\n\n\t\tfunction App() {\n\t\t\tconst [jobs, setJobs] = useState<IJob[]>([]);\n\t\t\tconst [skills, setSkills] = useState<ISkill[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst _jobs = (await axios.get(config.jobsUrl)).data;\n\t\t\t\t\tsetJobs(_jobs);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst _skills = (await axios.get(config.skillsUrl)).data;\n\t\t\t\t\tsetSkills(_skills);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800 bg-slate-600 text-slate-200 p-4\">Jobs/Skills Site</h1>\n\t\t\t\t\t<main className=\"flex justify-around min-w-fit\">\n\t\t\t\t\t\t<section className=\"mx-6\">\n\t\t\t\t\t\t\t<h2 className=\"text-xl mb-3\">\n\t\t\t\t\t\t\t\tThere are {jobs.length} jobs.\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t{jobs.map((job) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<p className=\"bg-slate-300 p-2 mb-2 w-[20rem] rounded\">\n\t\t\t\t\t\t\t\t\t\t{job.title}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section className=\"mx-6\">\n\t\t\t\t\t\t\t<h2 className=\"text-xl mb-3\">\n\t\t\t\t\t\t\t\tThere are {skills.length} skills.\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t{skills.map((skill) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<p className=\"bg-gray-300 p-2 mb-2 w-[20rem] rounded\">\n\t\t\t\t\t\t\t\t\t\t{skill.name}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</main>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t-----------------------------------------------\n\t- **config.ts**\n\t\t---------------------------------------------------\n\t\texport const skillsUrl = 'https://edwardtanguay.vercel.app/share/skills_with_id.json';\n\t\t---------------------------------------------------\n\t- **interfaces.ts**\n\t\t--------------------------------------------\n\t\texport interface ISkill {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\tname: string;\n\t\t\turl: string;\n\t\t\tdescription: string;\n\t\t}\n\t\t--------------------------------------------\n\t- **index.html**\n\t\t---------------------------------------\n\t\t<body>\n\t\t---------------------------------------\n\t- site looks like this:##thejobsksilsks\n- **>>> 4. Make data-loading a smooth user experience**\n\t- (1) notice that when you reload the site, the page blinks\n\t\t- this is because for a few hundred milliseconds there is no data\n\t\t- then the data arrives and is displayed on the page\n\t- (2) notice also that if the user has a slow connection, the data may take multiple seconds to load\n\t\t- to see this, open your dev tools and switch the network throttling to **Regular 2G**, then reload the page#gif#tehdrossok\n\t- let's take care of both of these problems so the user always has a less jarring, more pleasant experience as the page loads\n\t\t- (1) first let's take care of the **blinking**\n\t\t\t- make sure your web dev tools is set back to no throttling\n\t\t\t- reload the page and notice the blink\n\t\t\t- **index.scss**\n\t\t\t\t------------------------------------------------\n\t\t\t\tbody {\n\t\t\t\t\tanimation: fadein .3s ease-in;\n\t\t\t\t}\n\n\t\t\t\t@keyframes fadein {\n\t\t\t\t\tfrom {\n\t\t\t\t\t\topacity: 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tto {\n\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t------------------------------------------------\n\t\t\t- when you now reload, the page should have a nice fade-in long enough to hide any blinking\n\t\t- (2) now let's take care of the slow loading issue by giving each area it's loading spinner until the data has arrived\n\t\t\t- first build in timers to emulate a random wait of 1 to 4 seconds for each area\n\t\t\t\t- **App.tsx**\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\tconst _jobs = (await axios.get(config.jobsUrl)).data;\n\t\t\t\t\t\t\t\t\tsetJobs(_jobs);\n\t\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tMath.floor(Math.random() * 3000 + 1000)\n\t\t\t\t\t\t);\n\t\t\t\t\t}, []);\n\n\t\t\t\t\tuseEffect(() => {\n\t\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\tconst _skills = (await axios.get(config.skillsUrl)).data;\n\t\t\t\t\t\t\t\t\tsetSkills(_skills);\n\t\t\t\t\t\t\t\t})();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tMath.floor(Math.random() * 3000 + 1000)\n\t\t\t\t\t\t);\n\t\t\t\t\t}, []);\t\t\t\t\t\n\t\t\t\t\t---------------------------------------------\n\t\t\t- site looks like this, still showing \"0 jobs\" and \"0 skills\" for seconds:#gif#thwaitofboth\n\t\t\t- so to fix this, first we will simply display a only the text \"loading...\" for each column until the data has arrived\n\t\t\t- **App.tsx**\n\t\t\t\t------------------------------------------------\n\t\t\t\t<main className=\"flex justify-around min-w-fit\">\n\t\t\t\t\t<section className=\"mx-6\">\n\t\t\t\t\t\t{jobs.length === 0 ? (\n\t\t\t\t\t\t\t<h2 className=\"text-xl mb-3 w-[20rem] text-center\">Loading...</h2>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl mb-3\">\n\t\t\t\t\t\t\t\t\tThere are {jobs.length} jobs.\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t{jobs.map((job) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<p className=\"bg-slate-300 p-2 mb-2 w-[20rem] rounded\">\n\t\t\t\t\t\t\t\t\t\t\t{job.title}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"mx-6\">\n\t\t\t\t\t\t{skills.length === 0 ? (\n\t\t\t\t\t\t\t<h2 className=\"text-xl mb-3 w-[20rem] text-center\">Loading...</h2>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<h2 className=\"text-xl mb-3\">\n\t\t\t\t\t\t\t\t\tThere are {skills.length} skills.\n\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t{skills.map((skill) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<p className=\"bg-gray-300 p-2 mb-2 w-[20rem] rounded\">\n\t\t\t\t\t\t\t\t\t\t\t{skill.name}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</section>\n\t\t\t\t</main>\t\t\t\t\n\t\t\t\t------------------------------------------------\n\t\t\t- the site now show the word \"Loading...\" while each column loads#gif#thesecondtwocols\n\t\t\t- now replace each with a loading spinner\n\t\t\t\t- `npm i react-icons`\n\t\t\t\t- **index.scss**\n\t\t\t\t\t---------------------------------------------------\n\t\t\t\t\t.spinner {\n\t\t\t\t\t\tfont-size: 6rem;\n\t\t\t\t\t\tmargin-left: .5rem;\n\t\t\t\t\t\tanimation: spin infinite 2s linear;\n\t\t\t\t\t}\n\n\t\t\t\t\t@keyframes spin {\n\t\t\t\t\t\tfrom {\n\t\t\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tto {\n\t\t\t\t\t\t\ttransform: rotate(360deg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t---------------------------------------------------\n\t\t\t\t- **App.tsx**\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\t<h2 className=\"text-xl mb-3 w-[20rem] flex justify-center\"><FaSpinner className=\"spinner mt-6 text-slate-300\"/></h2>\t\t\t\t\t\n\n\t\t\t\t\t<h2 className=\"text-xl mb-3 w-[20rem] flex justify-center\"><FaSpinner className=\"spinner mt-6 text-gray-300\"/></h2>\t\n\t\t\t\t\t-----------------------------------------------\n\t\t\t- the site now loads with a loading spinner for each column:#gif#forboththespinnn\n- **>>> 5. Make each job and skill clickable to display more information when clicked**\n\t- **App.tsx**\n\t\t------------------------------------------\n\t\t(async () => {\n\t\t\tconst _jobs: IJob[] = (await axios.get(config.jobsUrl)).data;\n\t\t\tfor (const _job of _jobs) {\n\t\t\t\t_job.isOpen = false;\n\t\t\t}\n\t\t\tsetJobs(_jobs);\n\t\t})();\n\n\t\t(async () => {\n\t\t\tconst _skills: ISkill[] = (await axios.get(config.skillsUrl)).data;\n\t\t\tfor (const _skill of _skills) {\n\t\t\t\t_skill.isOpen = false;\n\t\t\t}\n\t\t\tsetSkills(_skills);\n\t\t})();\n\n\t\t<div key={job.id} onClick={() => handleToggleJob(job)} className=\"bg-slate-300 cursor-pointer p-2 mb-2 w-[20rem] rounded\">\n\t\t\t<span style={{fontWeight: job.isOpen ? 'bold' : 'normal'}}>{job.title}</span>\n\t\t\t{job.isOpen && (\n\t\t\t\t<div className=\"text-orange-800 italic\">\n\t\t\t\t\t<p>{job.company}</p>\t\n\t\t\t\t\t<p>{job.publicationDate}</p>\t\n\t\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\n\t\t<div key={skill.id} onClick={() => handleToggleSkill(skill)} className=\"bg-gray-300 p-2 mb-2 w-[20rem] cursor-pointer rounded\">\n\t\t\t<span style={{fontWeight: skill.isOpen ? 'bold' : 'normal'}}>{skill.name}</span>\n\t\t\t{skill.isOpen && (\n\t\t\t\t<div className=\"text-blue-800 italic\">\n\t\t\t\t\t<p>{skill.description}</p>\t\n\t\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t\t------------------------------------------\n\t- **interfaces.ts**##theinterinterjj\n\t- site will now work like this:#gif#thethisworktwocolopen\n- **>>> 6. show skills on job**\n\t- we want to list the skills in the job information when a job is toggled open\n\t- but we only have the skill idCodes\n\t- therefore we need to look up the names in the skills array\n\t- and therefore we need to load the skills first, and then the jobs\n\t- this means we need to have only one useEffect and load them in that order\n\t- **App.tsx**\n\t\t------------------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst _skills: ISkill[] = (await axios.get(config.skillsUrl)).data;\n\t\t\t\tfor (const _skill of _skills) {\n\t\t\t\t\t_skill.isOpen = false;\n\t\t\t\t}\n\t\t\t\tsetSkills(_skills);\n\n\t\t\t\tconst _jobs: IJob[] = (await axios.get(config.jobsUrl)).data;\n\t\t\t\tfor (const _job of _jobs) {\n\t\t\t\t\t_job.isOpen = false;\n\t\t\t\t\tconst skillIdCodes = _job.skillList\n\t\t\t\t\t\t.split(\",\")\n\t\t\t\t\t\t.map((m) => m.trim());\n\t\t\t\t\tconst skillNames = [];\n\t\t\t\t\tfor (const skillIdCode of skillIdCodes) {\n\t\t\t\t\t\tconst skillName = _skills.find(\n\t\t\t\t\t\t\t(m) => m.idCode === skillIdCode\n\t\t\t\t\t\t)?.name;\n\t\t\t\t\t\tif (skillName) {\n\t\t\t\t\t\t\tskillNames.push(skillName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t_job.fullSkills = skillNames;\n\t\t\t\t}\n\n\t\t\t\tsetJobs(_jobs);\n\t\t\t})();\n\t\t}, []);\t\t\n\n\t\t<p>\n\t\t\t{job.fullSkills.join(\", \")}\n\t\t</p>\n\t\t------------------------------------------\n\t- **interfaces.ts**##\n\t- site now works like this:#gif#nowwiththeskillfull\n- **>>> 7. count how many times a job or skill is opened or closed**\n\t- **App.tsx**\n\t\t------------------------------------------------\n\t\tconst [numberOfToggles, setNumberOfToggles] = useState(-3);\n\n\t\t<h1 className=\"text-3xl mb-3 bg-slate-600 text-slate-200 p-4 flex justify-between\">\n\t\t\t<span>Jobs/Skills Site</span>\n\t\t\t<span className=\"text-xl text-yellow-300\">toggle actions: {numberOfToggles}</span>\n\t\t</h1>\n\t\t------------------------------------------------\n\t- site now works like this:#gif#withtheactiosoucnter\n- **>>> 8. add EU cookie-use compliance**\n\t- install model \n\t\t- `npm i react-modal`\n\t- look in localStorage, get **cookiesAllowed** if it exists\n\t\t- if no, \n\t\t\t- set **cookiesAsk** = true\n\t\t\t- set **cookiesAllowed** = false\n\t\t- if yes,\n\t\t\t- set **cookiesAsk** = false\n\t\t\t- set **cookiesAllowed** = (value from localStorage)\n\t\t- save to localStorage\n\t- if **cookiesAsk** then show modal\n\t\t- if **Decline** then set **cookiesAllowed** = false\n\t\t- if **Accept** then set **cookiesAllowed** = true\n\t\t- save to localStorage\t\n\t- **App.tsx**\n\t\t----------------------------------------------------\n\t\t// in useEffect\n\t\tconst localStorageCookiesAllowedString =\n\t\t\tlocalStorage.getItem(\"cookiesAllowed\");\n\t\tconst localStorageCookiesAllowed =\n\t\t\tlocalStorageCookiesAllowedString === \"true\";\n\t\tif (localStorageCookiesAllowedString === null) {\n\t\t\tsetModalIsOpen(true);\n\t\t} else {\n\t\t\tsetCookiesAllowed(localStorageCookiesAllowed);\n\t\t\tsetNumberOfToggles(-1);\n\t\t}\n\n\t\tuseEffect(() => {\n\t\t\tif (cookiesAllowed) {\n\t\t\t\tsetNumberOfToggles((n) => n + 1);\n\t\t\t}\n\t\t}, [jobs, skills]);\n\n\t\tconst handleCookiesClose = () => {\n\t\t\tsetModalIsOpen(false);\n\t\t\tsetCookiesAllowed(false);\n\t\t};\n\n\t\tconst handleCookiesDecline = () => {\n\t\t\tsetModalIsOpen(false);\n\t\t\tsetCookiesAllowed(false);\n\t\t\tlocalStorage.setItem(\"cookiesAllowed\", \"false\");\n\t\t};\n\n\t\tconst handleCookiesAccept = () => {\n\t\t\tsetModalIsOpen(false);\n\t\t\tsetCookiesAllowed(true);\n\t\t\tlocalStorage.setItem(\"cookiesAllowed\", \"true\");\n\t\t\tsetNumberOfToggles(0);\n\t\t};\n\n\t\t<ReactModal\n\t\t\tisOpen={modalIsOpen}\n\t\t\tonRequestClose={handleCookiesClose}\n\t\t\tclassName=\"p-4 mx-auto mt-20 w-1/2 bg-slate-400 flex flex-col\"\n\t\t>\n\t\t\t<section className=\"flex justify-end \">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex justify-center items-center cursor-pointer\"\n\t\t\t\t\tonClick={() => setModalIsOpen(false)}\n\t\t\t\t>\n\t\t\t\t\t<FaRegWindowClose />\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<h2 className=\"text-2xl mb-3\">Cookie Consent</h2>\n\t\t\t<p>\n\t\t\t\tThis website uses cookies to improve your experience while\n\t\t\t\tyou navigate through the website. Out of these cookies, the\n\t\t\t\tcookies that are categorized as necessary are stored on your\n\t\t\t\tbrowser as they are essential for the working of basic\n\t\t\t\tfunctionalities of the website. We also use third-party\n\t\t\t\tcookies that help us analyze and understand how you use this\n\t\t\t\twebsite. These cookies will be stored in your browser only\n\t\t\t\twith your consent. You also have the option to opt-out of\n\t\t\t\tthese cookies. But opting out of some of these cookies may\n\t\t\t\thave an effect on your browsing experience.\n\t\t\t</p>\n\t\t\t<div className=\"flex gap-3 mt-3\">\n\t\t\t\t<button onClick={handleCookiesAccept}>Accept</button>\n\t\t\t\t<button onClick={handleCookiesDecline}>Decline</button>\n\t\t\t</div>\n\t\t</ReactModal>\n\t\t----------------------------------------------------\n\t- the site should work like this:#gif#workwiththecookieask","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-07 20:16:07","systemWhoCreated":"systemUnknown"},{"id":766,"category":"React","title":"Build smartphone running app with React and practice how to use useRef to access the DOM","body":"- **purpose of this howto**\n\t- learn **useRef** to access DOM elements in React\n\t- **code is here:**\n\t\t- https://github.com/edwardtanguay/et529-useref-login-site\n\t\t\t- **live site:** https://et529-useref-login-site.vercel.app\n\t- app is targeted for smartphone use and looks like this:##thesamamartfphon\n- **most important skills, concepts and tools**\t\n\t- **concepts**\n\t\t- **Q:** what is useRef?\n\t\t\t- **A:** useRef is a **hook** in React that allows you to create a mutable reference to a DOM element or a mutable value that persists across renders of a functional component\n\t\t- **Q:** what is a hook?\n\t\t\t- **A:** React hooks are JavaScript functions that help you manage component logic in a more organized and reusable way\n\t\t\t\t- they bring the logic of a particular code area into one place, and give you, the developer, values and functions to use in order to interact with this logic\n\t\t\t\t- a **hook** in functional programming is similar to a **class** in object-oriented programming\n\t\t\t\t\t- **hooks** give you functions and values that you can call\n\t\t\t\t\t- **classes** give you methods and settter/getter properties you can call\n\t\t- **Q:** why would I use useRef?\n\t\t\t- **A:** if there is some kind of DOM interaction that you can't do in React, you can use useRef to do it\n\t\t\t\t- for instance, it is not possible to programmatically set focus on an input field in React\n\t\t\t\t- so to do this, you use use**Ref** to get a **ref**erence to the underlying DOM input field \n\t\t\t\t- then from React, you can use this **reference** just as you use the underlying DOM element, yet from the React context\n\t\t- **Q:** what security concerns should you have when you create a client-side login form in React\n\t\t\t- **A:** know that all of your code in your React site will be downloaded to the browser in the compiled .js file\n\t\t\t\t- so anyone who wanted to and had enough technical savvy, could find (1) your password and (2) your hidden content that you only shown when a correct password is entered\n\t\t\t\t- for high-profile company sites, this is of course a breach of security\n\t\t\t\t- for low-profile personal sites for which you want to (1) keep the content out of search machines and (2) make it near-impossible for non-technical people to view your content\n\t\t\t\t- for example, I often make a little website of our vacation itinerary with flight numbers, hotel, and later photos, etc. on a little website that my family and I can access with our phones, and we have to type in a 3-number pin to access it\n\t\t\t\t\t- this is super-easy to program\n\t\t\t\t\t- it keeps the site out of search machines\n\t\t\t\t\t- and if someone found the site, they would have to be quite technically skilled to find any of the information or photos that are shown when one knows the pin\n\t- **skills**\n\t\t- **Q:** how to reference and change a property on a DOM element with useRef\n\t\t\t- **A:** define a **ref** in the input element, then refer to it as <refName>.current\n\t\t\t\t- also make sure to tell TypeScript what type of element you expect it to be so you get code-completion and intellisense##thereftothsup\n\t\t- **Q:** when calling a function with onlick, what are the various ways to write the function\n\t\t\t- **A:** onClick={handleFormSubmit}\n\t\t\t\t- onClick={() => handleFormSubmit()}\n\t\t\t\t- onClick={(e) => handleFormSubmit(e)}\n\t\t\t\t- onChange={(e) => handleFormSubmit(e.target.value)}\n\t\t- **Q:** why is it when you create a React form that you sometimes can't type in the input box?\n\t\t\t- **A:** because you have connected the **value** attribute of the input box to the state variable for that field, but you haven't yet written the **onChange** event handler to change the text\n\t\t- **Q:** during debugging, how can you display an object in an alert\n\t\t\t- **A:** `alert(JSON.stringify(formData, null, 2));`\n\t\t- **Q:** what attribute can you add to an input box to make the cursor focus in it on page load\n\t\t\t- **A:** `autoFocus`\n\t- **tools**\n\t\t- useRef\n\t\t- autoFocus\n- **what we will build**\n\t- the site will be an info site for a running club that you and your friends will use on your smart phones\n\t\t- to identify each person and keep the site out of search engines, etc. you will create a login form\n\t- note that this site only has \"low-profile security\"\n\t\t- technically-savvy users can find the logins, passwords and hidden content of site in the downloaded JavaScript file\n\t\t- however, for low-profile sites, the content of which you simply want to keep out of search engines, and for which you want users to be authenticated and authorized\n\t\t\t- this is a relatively easy site to build\n\t\t\t- it serves as an academic exercise to build sites with authentication/authorization\n\t\t\t- it can be easily extended to have full-scale security with backend login via JWT tokens, etc.\n- **>>> 1. Create minimized React site**\n\t- go to my blank React site repository: https://github.com/edwardtanguay/vite-react-base\n\t- click **Use this template** and create your own repository from it##tehcreateit\n\t- clone this new repository locally\n\t- enter with VSCode\n\t- `npm i`\n\t- **package.json** - so that browser opens on command **npm run dev**\n\t\t------------------------------------------\n\t\t\"dev\": \"vite --open\",\n\t\t------------------------------------------\n\t- `npm run dev`\n\t- your base React site should be set up like this:##theinfositejksdjfkdjf\t\t\n- **>>> 2. Create login form**\n\t- since this will be primarily used on smartphones, create the site **mobile-first**\n\t\t- therefore, set in Dev Tools, set your browser to your target-smartphone size##dothesitemobildksj\n\t- and we will develop this site with component-based programming\n\t\t- this means for every logical unit of code, we will make a component\n\t\t- e.g. for Header, LoginForm, etc.\n\t- **index.html**\n\t\t-------------------------------------\n\t\t<title>Running Club</title>\n\t\t-------------------------------------\n\t- **components/Header.tsx**\n\t\t-----------------------------------------------------\n\t\texport const Header = () => {\n\t\t\treturn <h1 className=\"text-3xl mb-3 text-slate-800\">Running Club</h1>;\n\t\t};\n\t\t-----------------------------------------------------\n\t- **components/LoginForm.tsx**\n\t\t--------------------------------------------------------\n\t\texport const LoginForm = () => {\n\t\t\treturn (\n\t\t\t\t<fieldset\n\t\t\t\t\tclassName=\"border border-gray-500 p-4 w-full rounded\"\n\t\t\t\t>\n\t\t\t\t\t<legend>Welcome</legend>\n\n\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"login\">\n\t\t\t\t\t\tLogin:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tid=\"login\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"password\">\n\t\t\t\t\t\tPassword:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-5 flex justify-end pr-3\">\n\t\t\t\t\t\t<button>Time to run!</button>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t);\n\t\t};\n\n\t\t--------------------------------------------------------\n\t- **App.tsx**\n\t\t--------------------------------------------\n\t\timport { LoginForm } from \"./components/LoginForm\";\n\t\timport { Header } from \"./components/Header\";\n\n\t\tfunction App() {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<LoginForm />\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\n\t\texport default App;\t\t\n\t\t--------------------------------------------\n\t- your site now looks like this:##thefullrunnclub\n- **>>> 3. Publish at Vercel**\n\t- since we are developing for our smartphone, we want to see as soon as possible if everything looks right\n\t- make sure you commit and push your changes to your repository\n\t- go to: https://vercel.com\n\t- add new project:##addnewprojsksksk\n\t- import:##importitijsidj\n\t- deploy:##thedeplosjsjsj\n\t- in about 20 seconds, your site should be published\n\t- look at it on your smartphone, it should look like this:##thesamamartfphon\n- **>>> 4. Program form to collect data and show it when user clicks the button**\n\t- **LoginForm.tsx**\n\t\t----------------------------------------------------\n\t\timport { useState } from 'react';\n\n\t\tconst initialFormData = {\n\t\t\tlogin: '',\n\t\t\tpassword: ''\n\t\t}\n\n\t\texport const LoginForm = () => {\n\t\t\tconst [formData, setFormData] = useState(initialFormData);\n\n\t\t\tconst handleFieldLogin = (value: string) => {\n\t\t\t\tconst _formData = structuredClone(formData);\n\t\t\t\t_formData.login = value;\n\t\t\t\tsetFormData(_formData);\n\t\t\t}\n\n\t\t\tconst handleFieldPassword = (value: string) => {\n\t\t\t\tconst _formData = structuredClone(formData);\n\t\t\t\t_formData.password = value;\n\t\t\t\tsetFormData(_formData);\n\t\t\t}\n\n\t\t\tconst handleFormSubmit = () => {\n\t\t\t\talert(JSON.stringify(formData, null, 2));\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<fieldset\n\t\t\t\t\tclassName=\"border border-gray-500 p-4 w-full rounded\"\n\t\t\t\t>\n\t\t\t\t\t<legend>Welcome</legend>\n\n\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"login\">\n\t\t\t\t\t\tLogin:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={formData.login}\n\t\t\t\t\t\t\tonChange = {(e) => handleFieldLogin(e.target.value)}\n\t\t\t\t\t\t\tid=\"login\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"password\">\n\t\t\t\t\t\tPassword:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tvalue={formData.password}\n\t\t\t\t\t\t\tonChange = {(e) => handleFieldPassword(e.target.value)}\n\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-5 flex justify-end pr-3\">\n\t\t\t\t\t\t<button onClick={handleFormSubmit}>Time to run!</button>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t);\n\t\t};\n\t\t----------------------------------------------------\n\t- the form should work like this:#gif#theformdataisous\n- **>>> 5. Process form for one user on button click including smart-UX field focussing**\n\t- create dummy user as object\n\t- on page load\n\t\t- set cursor in login box\n\t- create event handler for the login button\n\t\t- if login is not correct\n\t\t\t- set red message in legend\n\t\t\t- set focus to login box\n\t\t- if login is correct but password is not correct\n\t\t\t- set red message in legend\n\t\t\t- set focus to password box\n\t\t- if login and password are correct\n\t\t\t- replace login form with content of site\n\t\t\t- tell user they are logged in\n- **>>> 6. When user successfully logs in, store user name in localStorage**\n\t- add **autoFocus** in the login field\n\t\t- **LoginForm**\n\t\t\t-----------------------------------------------------\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tautoFocus\n\t\t\t\tvalue={formData.login}\n\t\t\t\tonChange = {(e) => handleFieldLogin(e.target.value)}\n\t\t\t\tid=\"login\"\n\t\t\t/>\t\t\t\n\t\t\t-----------------------------------------------------\n\t- this solves the current problem\n\t\t- but later when we want to programmatically focus the either login or password based on whether we have already saved the login in localStorage or not\n\t\t- we will have to use **useRef**\n\t- **LoginForm.tsx**\n\t\t-----------------------------------------------------\n\t\timport { useRef, useState, useEffect } from \"react\";\n\n\t\tconst initialFormData = {\n\t\t\tlogin: \"\",\n\t\t\tpassword: \"\",\n\t\t};\n\t\tconst initialLegend = \"Welcome\";\n\n\t\tconst user = {\n\t\t\tlogin: \"jim\",\n\t\t\tpassword: \"111\",\n\t\t};\n\n\t\texport const LoginForm = () => {\n\t\t\tconst [formData, setFormData] = useState(initialFormData);\n\t\t\tconst [legend, setLegend] = useState(initialLegend);\n\t\t\tconst [legendColor, setLegendColor] = useState(\"black\");\n\t\t\tconst [errorMessage, setErrorMessage] = useState(\"\");\n\t\t\tconst loginElementRef = useRef(null);\n\n\t\t\tuseEffect(() => {\n\t\t\t\tlet _legendColor = \"\";\n\t\t\t\tif (legend === initialLegend) {\n\t\t\t\t\t_legendColor = \"black\";\n\t\t\t\t} else {\n\t\t\t\t\t_legendColor = \"red\";\n\t\t\t\t}\n\t\t\t\tif (errorMessage === \"\") {\n\t\t\t\t\tsetLegend(initialLegend);\n\t\t\t\t} else {\n\t\t\t\t\tsetLegend(errorMessage);\n\t\t\t\t}\n\t\t\t\tsetLegendColor(_legendColor);\n\t\t\t}, [errorMessage, legend]);\n\n\t\t\tconst handleFieldLogin = (value: string) => {\n\t\t\t\tconst _formData = structuredClone(formData);\n\t\t\t\t_formData.login = value;\n\t\t\t\tsetErrorMessage(\"\");\n\t\t\t\tsetFormData(_formData);\n\t\t\t};\n\n\t\t\tconst handleFieldPassword = (value: string) => {\n\t\t\t\tconst _formData = structuredClone(formData);\n\t\t\t\t_formData.password = value;\n\t\t\t\tsetErrorMessage(\"\");\n\t\t\t\tsetFormData(_formData);\n\t\t\t};\n\n\t\t\tconst handleFormSubmit = () => {\n\t\t\t\tif (formData.login != user.login) {\n\t\t\t\t\tsetErrorMessage(\"Login is not correct\");\n\t\t\t\t\tif (loginElementRef.current) {\n\t\t\t\t\t\t(loginElementRef.current as HTMLInputElement).focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<fieldset className=\"border border-gray-500 p-4 w-full rounded\">\n\t\t\t\t\t<legend style={{ color: legendColor }}>{legend}</legend>\n\n\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"login\">\n\t\t\t\t\t\t\tLogin:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tref={loginElementRef}\n\t\t\t\t\t\t\tvalue={formData.login}\n\t\t\t\t\t\t\tonChange={(e) => handleFieldLogin(e.target.value)}\n\t\t\t\t\t\t\tid=\"login\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t<label className=\"w-[5rem]\" htmlFor=\"password\">\n\t\t\t\t\t\t\tPassword:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tvalue={formData.password}\n\t\t\t\t\t\t\tonChange={(e) => handleFieldPassword(e.target.value)}\n\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mt-5 flex justify-end pr-3\">\n\t\t\t\t\t\t<button onClick={handleFormSubmit}>Time to run!</button>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t);\n\t\t};\n\t\t-----------------------------------------------------\n- **>>> CHALLENGE 7. On current log in, show a new page**\n\t- if login and password are correct\n\t\t- replace login form with content of site\n\t\t- personsally greet the person who signed in with name\n\t\t- show them their running information\n\t- **LoggedInPage.tsx**\n\t\t-----------------------------------\n\t\texport const LoggedInPage = () => {\n\t\t\treturn (\n\t\t\t\t<div>this is the logged in page, user has successfully logged in</div>\n\t\t\t)\n\t\t}\t\t\n\t\t-----------------------------------\n\t- **App.tsx**\n\t\t------------------------------------------\n\t\tfunction App() {\n\t\t\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t<div className=\"lg:mx-[10%]\">\n\t\t\t\t\t<Header isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\n\t\t\t\t\t{isLoggedIn ? (\n\t\t\t\t\t\t<LoggedInPage />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<LoginForm setIsLoggedIn={setIsLoggedIn} />\n\t\t\t\t\t)}</div>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\t\t\n\t\t------------------------------------------\n- **>>> CHALLENGE 8. Fix responsive view for computer wide screen**\n\t- LoginForm.tsx\n\t\t-----------------------------------------\n\t\t<fieldset className=\"flex flex-col md:flex-row gap-6 rounded-lg bg-slate-500/50 p-5 md:pb-10\">\n\n\t\t<div className=\"md:w-2/5\">\n\n\t\t<button className=\"place-self-end md:w-1/5\">Time to run!</button>\n\t\t-----------------------------------------\n\t- site should work like this in wide mode#gif#229respons\n- **>>> CHALLENGE 9. Add multiple users**\n\t- create JSON file of three users\n\t- if login and password are correct for one of them\n\t\t- personsally greet the person who signed in with name\n\t\t- show them their running information","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-09 03:17:12","systemWhoCreated":"systemUnknown"},{"id":767,"category":"React","title":"Notes on Brian Holts's Intermediate React course","body":"- infos\n\t- **my project** I created during this tutorial is here:\n\t\t- my repo: https://github.com/edwardtanguay/et672-course-notes-intermediate-react\n\t\t- live: \n\t- course website:\n\t\t- live: https://react-v8.holt.courses\n\t\t\t- open and free, can use code\n\t- course repo: \n\t\t- https://github.com/btholt/complete-intro-to-react-v8\n\t- course project files\n\t\t- https://github.com/btholt/citr-v8-project\n- https://frontendmasters.com/courses/intermediate-react-v5/introduction\n\t- Intro to React: build on application\n\t- Intermediate React: build little sub-modules\n\t\t- builds on the Intro to React course\n\t- Node 16 required, 18 would be perfect\n\t- assumes VSCode\n\t- uses [font ligatures](https://www.google.com/search?client=firefox-b-d&q=font+ligatures)\n\t- uses [Spaceship](https://spaceship-prompt.sh), a customizable Zsh prompt\n\t- modules in this course are more or less self-contained\n- https://frontendmasters.com/courses/intermediate-react-v5/useref\n\t- uses [StackBlitz](https://stackblitz.com)\n\t\t- runs Node.js inside your browser\n\t- **useRef**\n\t\t- allows you to grab specific DOM nodes\n\t\t\t- e.g. to use libraries like [three.js](https://threejs.org) which doesn't play well together with React \n\t\t- it has exactly one property exposed, which is **current**\n\t\t\t- it survives between render cycles\n\t\t- you don't want to rerender e.g. the three.js scene\n\t\t\twith useMemo, I can guarantee that if the props don't change, the useRef will not rerender\n- https://frontendmasters.com/courses/intermediate-react-v5/usereducer\n\t- \"Reducer is just a fancy way of saying: I have a function, that function takes in a bit of state and an action, and gives you back a new bit of state. That's really it. One main reason we change state this way is that when we change state, you can test that. It has no side-effects, all it does is take state and an action and gives you back a new state, and that's very testable. Most problems in user interfaces come from mismanaging state, so making your state testable is very valuable.\" //quote##thereduc33\n\t- \"Some developers say they don't use useState, just useReducer. That's because useReducer is simply a replacement for useState, they accomplish the same thing in different ways. The continuum is useState, useReducer, Redux, all of these tools manage application state, but with increasing complexity levels. If I have to track a single boolean, number or string variable, I'll just use useState. Above that I'll use useReducer, and for complex state management in large applications I'll use Redux.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/usememo\n\t- uses [requestAnimationFrame()](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)\n\t- useMemo makes the animation faster since the component is only recalculated when **count** changes##onlzwhencount\n- https://frontendmasters.com/courses/intermediate-react-v5/usecallback\n\t- with useCallback, you give the exact same function as a parameter every time so that your component doesn't rerender\n\t- \"useCallback is basically a permutation of useMemo, you can implement useCallback using useMemo. I've heard people in the React team say they wish they hadn't shipped useCallback because you can basically just use useMemo, but here we are.\" //quote\n\t- \"Only use useMemo and useCallback if you need them, e.g. if you find jank in your UI. Don't optimize for performance until you have a performance problem.\" //quote\n\t- **jank**, n. refers to any stuttering, juddering, or jerkiness in the user interface, it typically occurs when the performance of an application or website is not smooth, and there are delays or interruptions in the visual rendering#gif#thejankexample\n- https://frontendmasters.com/courses/intermediate-react-v5/uselayouteffect-useid\n\t- useLayoutEffect\n\t\t- useLayoutEffect happens immediately after your render function ends\n\t\t- \"You might ask yourself, how is useLayoutEffect ever useful, and the answer is almost never. It's only useful for when you can only measure something after it's been rendered, e.g. the size of a textarea element that the user has changed with their mouse. For everything else, just use useEffect. I'll be honest with you, I don't think I've ever professionally used useLayoutEffect.\"##uselayouteffect\n\t- useId\n\t\t- gives you a unique identifier that works in pairs##theuseidksksk\n\t\t- if you need an id that is per instantiation of a component is consistent\n\t\t- otherwise you would have to have some kind of counter that keeps track of the id externally\n\t\t- don't use useId twice in one component, instead, add some suffix to it:##dontusetwidj\n\t\t- useId is safe across server-side and client-side rendering\n- https://frontendmasters.com/courses/intermediate-react-v5/additional-hooks\n\t- useImperativeHandle\n\t\t- for your child to expose functionality to the parent\n\t\t- very rare, Brian has never used it\n\t\t- you would use it if you are making a form validation library\n\t\t- it's a wierd handshake because you have to use a ref\n\t- useDebugValue\n\t\t- if you want to expose a value in React Dev Tools\n\t\t- mostly for library authors, not app authors\n\t- useSyncExternalStores\n\t\t- for library authors\n\t- useInsertionEffect\n\t\t- useLayoutEffect happens after render\n\t\t- useInsertionEffect happens before render\n\t\t- used for when you are doing CSS in JavaScript e.g. with [Emotion](https://emotion.sh/docs/introduction)\n- https://frontendmasters.com/courses/intermediate-react-v5/adoptme-project-setup\n\t- he uses CSS modules which he \"imports into components\"\n\t- \"There are a lot of ways to do CSS in React: styled-components is great, Emotion is great, vanilla-extract is great, there are many interesting ways of doing CSS with JS, but I want you to see Tailwind because much of the React community has moved toward Tailwind. It's fun, I'm always torn at how much I like Tailwind, but I'll let you decide.\" //quote\n\t- Tailwind follows the idea of Atomic CSS, no stylesheets just inline classes\n\t- it generates only the styles that you need, so your styles will always be tiny\n- https://frontendmasters.com/courses/intermediate-react-v5/installing-tailwind-css\n\t- `npm i -D tailwindcss postcss autoprefixer`\n\t\t- **postcss** is like Babel for CSS, a transpiler for CSS, i.e. takes one CSS and transforms it into a different CSS\n\t\t- **autoprefixer** is transpiles modern CSS to CSS that works on all browsers\n\t- `npx tailwindcss init -p` which generates\n\t\t- **-p** means it creats a postcss.config.js file\n\t\t- **postcss.config.js**\n\t\t\t- you can ignore this unless you are adding postcss plugins\n\t\t- **tailwind.config.js**\n\t- how does Tailwind different from CSS libraries like Bootstrap\n\t\t- \"What is the difference between Tailwind and Bootstrap? / Bootstrap is a full design system. If you build something with Bootstrap, it's going to look like other Bootstrap sites, which can be good for internal web apps where you don't care how it looks as long as it's usable and looks nice. MaterialUI is similar, a pre-made design system. Tailwind is not that. Tailwind is a methodology for writing CSS. So Tailwind is not going to define how your website looks, it's going to define how you write your CSS. You can build design systems on top of Tailwind, but Tailwind itself doesn't have any opinions on how your site is going to look.\" //quote\n\t- this line is for auto-complete##lineisforsauto\n\t- **tailwind.config.js**\n\t\t-------------------------------------\n\t\t/** @type {import('tailwindcss').Config} */\n\t\texport default {\n\t\t\tcontent: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"],\n\t\t\ttheme: {\n\t\t\t\textend: {},\n\t\t\t},\n\t\t\tplugins: [],\n\t\t};\t\t\n\t\t-------------------------------------\n\t- **index.css**\n\t\t--------------------------------\n\t\t@tailwind base;\n\t\t@tailwind components;\n\t\t@tailwind utilities;\t\t\n\t\t--------------------------------\n\t- to get rid of these:##togetrideoftese\n\t\t- CTRL-,\n\t\t- preferences\n\t\t- **Edit in settings.json**##thepointosett\n\t\t- add **\"css.lint.unknownAtRules\": \"ignore\"**##addcsslint\n\t- install Tailwind CSS IntelliSense by Tailwind Labs##tailwindlabs\n\t- \"When people use Tailwind for the first time, they either think it's great or it's aweful, there's rarely much in between. On the one hand, Tailwind is very fast to write, there's no switching between components and stylesheets, no constantly thinking up names for styles, and no looking for what you named styles, etc. On there other hand, you're going to start having 20-30 class names on one element, which can get pretty ugly. So you're going to have to decide what to think about this. But if it's just the numerous class names that bothers you, Tailwind will probably end up being better than you think it is.\"\n\t- Tailwind Prettier plugin\n\t\t- https://github.com/tailwindlabs/prettier-plugin-tailwindcss\n\t\t- `npm install -D prettier prettier-plugin-tailwindcss`\n\t\t- **prettier.config.js**\n\t\t\t---------------------------------------------\n\t\t\tmodule.exports = {\n\t\t\t  plugins: ['prettier-plugin-tailwindcss'],\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t\t- I could get it to work, but I had to get ride of my prettierrc file, and those rules wouldn't work in the pretterier.config.js file\n- https://frontendmasters.com/courses/intermediate-react-v5/styling-with-tailwind-css\n\t- `-m-4` is a negative margin\n\t- does margin and padding\n\t- `w-full`\n\t- `bg-gradient-to-b from-slate-400 to-slate-500 p-4 h-screen`##thefadeskjdksjdf\n\t- `w-11/12` - eleven twelves of the page\n\t- `rounded`\n\t- flex\n\t- just start typing and the intellisense will inform you\n- https://frontendmasters.com/courses/intermediate-react-v5/adding-a-tailwind-css-form-plugin\n\t- use a plugin\n\t\t- `npm i -D @tailwindcss/forms`\n\t\t- **tailwind.config.js**\n\t\t\t----------------------------------------\n\t\t\t/* eslint-disable no-undef */\n\t\t\t/** @type {import('tailwindcss').Config} */\n\t\t\tmodule.exports = {\n\t\t\t\tcontent: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"],\n\t\t\t\ttheme: {\n\t\t\t\t\textend: {},\n\t\t\t\t},\n\t\t\t\tplugins: [require(\"@tailwindcss/forms\")],\n\t\t\t};\n\t\t\t----------------------------------------\n\t\t- what the plugin changes:##whatthsplugin\n\t\t- he added \"mb-5 block w-60\" which made it look better:##thebetterwithw66\n\t\t- disabled: opacity-50\n\t\t- focus\n\t- you can make your own plugins##thoragnpubtton\n- https://frontendmasters.com/courses/intermediate-react-v5/extending-tailwind-css\n\t- layers\n\t\t- base\n\t\t\t- reset for body, h1\n\t\t- components\n\t\t\t- pretty much describe components in React\n\t\t- utilities\n\t\t\t- active/inactive\n\t- utilities override components which override base\n\t\t- like specificity\n\t- **index.css**\n\t\t------------------------------------\n\t\t.search-input {\n\t\t\t@apply w-60 mb-5 block;\n\t\t}\n\t\t------------------------------------\n- https://frontendmasters.com/courses/intermediate-react-v5/layout-with-tailwind-css\n\t- grid\n\t\t- `grid grid-cols-2 gap-4`\n\t- responsive grid easy:\n\t\t- `grid sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3`#gif#thegridandrespon\n\t- \"I could write this responsive grid in CSS instead of Tailwind, but it would take me 5 minutes instead of 15 seconds, and the defaults in Tailwind are very good so I tend not to change them very much.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/code-splitting\n\t- code-splitting and server rendering used to not play together very well\n\t\t- this changed in React 18\n\t- React by itself is about 40ish kilobytes\n\t- \"It takes 42 kilobytes to get react-dom, react itself is 2.5 kilobytes, that's just under 45 kilobytes. If you are trying to get your initial page load under 100 kilobytes, you probably need to do code splitting, which means you enable the browser to load the bear minimum of code so that your user sees something immediately, then you load everything else in the background. Luckily for us, Vite and React work together well to make this happen.\" //quote\n\t- **App.jsx**\n\t\t- import lazy, Suspence from react\n\t\t- dynamic import for ES6 modules##dynamcforim\n\t\t- Vite is smart enough to say, \"this is not required on the initial page load, I'm not going to load it right away\"\n\t\t\t- they won't load until their component is needed\n\t\t- then use <Suspense>##suspendsj\n\t\t- actually very simple\n\t\t- it's hard to see in development with dev how things will be loaded in production\n\t\t\t- in production it loads chunks at a time\n\t\t- \"All of this code splitting that I've shown you so far is a massive waste. We've objectively made our app slower because none of these files are very big. Our bundle is going to be 80K at best, so splitting off a kilobyte is not worth it, right? You want to be splitting off 30K, 50K or 100K. Let's pretend that we split off a component that loaded all of moment.js. Great, go ahead and code-split that. But just to split something off for the sake of using code splitting, you are better off just leaving it in your bundle. Code splitting is not a silver bullet. Make sure you're making your user experience better rather than worse.\" //quote\n\t- you can use a service worker to load in the background\n\t\t- Remix takes care of this for you \n- https://frontendmasters.com/courses/intermediate-react-v5/server-side-rendering/\n\t- in server-side rendering, you send the client complete markup, a complete vision of the site\n\t\t- by the time they have made a decision what they want to do next, your site is ready to be interacted with\n\t\t- reduces the time of the first meaning paint\n\t\t- increase the time to interactivity\n\t- you can't do any DOM activity in Node\n\t- **ClientApp.jsx**\n\t\t- uses [hydrateRoot](https://react.dev/reference/react-dom/client/hydrateRoot)\n\t\t- changes index.html##changeshtml\n\t\t- now App can run in Node or the browser\n\t- **ServerApp.jsx**\n\t\t- [renderToPipeableStream](https://react.dev/reference/react-dom/server/renderToPipeableStream)\n\t\t- imports [StaticRouter](https://reactrouter.com/en/main/router-components/static-router)\n\t\t\t- used to render a React Router web app in node\n\t\t- Node can't read JSX\n\t\t- uses Vite\n\t\t- two different builds##theuil32\n\t\t- npm i express\n\t\t- \"I'm basically showing you how to build Next.js\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/node-streams-with-express/\n\t- creates server.js\n\t- installs express\n\t- to get directory you are in:\n\t\t- `const __direname = path.dirname(fileURLToPath(import.meta.url));`##nowtheessspre\n\t- everything else let React handle##everythesle\n\t- using streams##streams\n\t- `npm run build:client`\n\t- it's a kind of server-side rendering\n- https://frontendmasters.com/courses/intermediate-react-v5/server-side-fetching\n\t- you want to show everything on first load\n\t- he's setting up cache\n\t- he's using the experimental suspense in React Query\n\t- he also has build:server\n- https://frontendmasters.com/courses/intermediate-react-v5/usedeferredvalue\n\t- useDeferredValue\n\t\t- it's going to feel like it's doing nothing\n\t\t- it's going to solve a problem that our app doesn't have\n\t\t- used for low-priority rerendering\n\t\t- also imports useMemo\n\t\t- we only get a new value if it has cleared out its processing queue##ionlygoing\n- https://frontendmasters.com/courses/intermediate-react-v5/usetransition\n\t- useTransition\n\t\t- helps React apps stay responsive and gracefully adjust to the user's device capabilities and network speed\n\t\t- use it when you want to say, \"I have something to give you but it's low priority so feel free to do this at your own speed\"\n- https://frontendmasters.com/courses/intermediate-react-v5/setup-typescript\n\t- Brian just hired Mike North on Stripe team\n\t- `npm i -D typescript`\n\t- npx tsc --init\n\t\t- generates a typescript with everything commented out\n\t- his tsconfig.json##andhisconfig\n\t- `npm i -D @types/react @types/react-dom`\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-modal-component\n\t- he is converting his JavaScript project to TypeScript\n\t- importing MutableRefOjbect and [ReactElement](https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement)##therefeleme\n- https://frontendmasters.com/courses/intermediate-react-v5/setup-typescript-eslint\n\t- his .eslintrc.json file:##hisesling\n\t- `npm i -D esline-import-resolver-typescript @typescript-eslint/eslint-plugin @typescript-eslin/parser`\n\t- ESLint by itself can't understand types\n\t- my .eslintrc.cjs file\n\t\t--------------------------------------------\n\t\tmodule.exports = {\n\t\t\troot: true,\n\t\t\tenv: { browser: true, es2020: true },\n\t\t\textends: [\n\t\t\t\t\"eslint:recommended\",\n\t\t\t\t\"plugin:@typescript-eslint/recommended\",\n\t\t\t\t\"plugin:react-hooks/recommended\",\n\t\t\t],\n\t\t\tignorePatterns: [\"dist\", \".eslintrc.cjs\"],\n\t\t\tparser: \"@typescript-eslint/parser\",\n\t\t\tplugins: [\"react-refresh\"],\n\t\t\trules: {\n\t\t\t\t\"react-refresh/only-export-components\": [\n\t\t\t\t\t\"warn\",\n\t\t\t\t\t{ allowConstantExport: true },\n\t\t\t\t],\n\t\t\t},\n\t\t};\t\t\n\t\t--------------------------------------------\n\t- we have the same parser\n\t- he has a lot more entries\n\t- `npm run lint`\n\t- get [Brian's .eslinrc.json file](https://react-v8.holt.courses/lessons/typescript/typescript-and-eslint)\n\t- adds this, is very aggressive##addsthisbec\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-an-api-response\n\t- has a lot of TypeScript errors now\n\t- he has a mix of type and interface##theinterfatype\n\t- \"Some developers like to really get into it and preface their interface names with \"I\", for example IBook and ICustomer, I think it's a .NET thing, correct me if I'm wrong, I worked for Microsoft long enough, I should have adopted it but didn't because it looks ugly to me and not having an \"I\" on the front of your interface names is usually not a problem, but I'll tell you, there are lots of people who do it that way.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-details-context-components/\n\t- using useQuery\n\t- \"The more you use TypeScript in your project, the less you fight with the compiler. But I would say, going from 10% of your code in TypeScript to 60% of you code in TypeScript is misery because you're getting lots of errors and you don't know why--is it actually an error or is it just TypeScript finickiness? But once you're at like 80% TypeScript or 100% TypeScript, it's incredibly useful.\" //quote\n\t- doing useContext\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-carousel-component\n\t- he has IProps with a class component##hehasiprops\n\t- \"After resolving all TypeScript errors, you should ask yourself, is my code better now? It certainly is more safe. You might be thinking, it's a lot more code to do the exact same thing, but TypeScript forces you to be more defensive about your code, which is going to make your code more resilient, and it'll force you to understand your code in a deeper way, plus it gives you very nice intellisense.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-pet-component-error-boundary\n\t- he's changing files from .jsx to .tsx and then fixing the errors\n\t- uses ReactElement again\n\t- uses ErrorInfo\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-component-with-react-query\n\t- makes more interfaces\n\t- using a custom hook useBreedList\n\t- uses as\n- https://frontendmasters.com/courses/intermediate-react-v5/typing-component-with-a-form\n\t- an array of or types##arrayoforr\n\t- uses **?? \"\"**##usesqueue\n\t- null as Pet | null##nullaspetornull\n\t- we have an entirely types project\n\t- \"if you don't conform to prettier, I'm going to fail your build\"\n- https://frontendmasters.com/courses/intermediate-react-v5/setup-redux-toolkit\n\t- \"When core React caught up to not really needing Redux anymore, I got to the point in my React classes that I said: I'm going to teach you Redux so you don't end up using Redux later. But then Redux Toolkit took what was hard about Redux and made it easy, so I'm kind of coming back around from 'never use Redux' to 'maybe sometimes use Redux Toolkit so it can solve some of your problems for you'.\" //quote\n\t- Redux is a central store for your data\n\t\t- \"React used to not have Context at all so we had to use some third-party library to centrally store our data. We had Flex before, and then we ended up with Redux, which is the pinnacle of the Flex architecture. We also ended up with MobX and a few others but Redux has became the most popular state management solution. However, when we got Context, we didn't really need a third-party store anymore since Context gave us the ability to share state variables and functions across our app, which was good enough in most cases. And so the over-complicated Redux solution with its verbose, boilerplate setup ended up being quite superfluous at that point. But then came Redux Toolkit, which is basically a framework around Redux, which simplified Redux and made it useful again. So with Redux Toolkit, Redux is easier to use, and it's selling point over Context is that it is extremely testable. Redux takes all of your application state transition points and makes them testable, and 95% of your bugs are state management gone awry, right? So if you can make state transitions testable, you're going to eliminate entire classes of bugs that your app would otherwise have.\" //quote\n\t- `npm i @reduxjs/toolkit react-redux`\n\t\t- this is the same install command I used##thsamethat\n\t\t- Redux works with Angular and other frameworks as well\n\t- **store.js**\n\t\t- his is simpler, also JavaScript-only##thwtwosotre\n\t- \"When you use Redux, it's not like you don't use state anymore. You'll use state to show and hide modals and switch things to active and inactive, but Redux will maintain the core objects and collections of your application state along with the business logic.\" //quote\n\t- \"You can kind of think of Redux as a miniature frontend database for your application. It's an imperfect analogy, so don't run too far with it, but dispatching actions is similar to sending queries to your database.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/creating-a-slice\n\t- a slice is a place for reducers in one bundle\n\t- our slices are very similar##hismyslice\n- https://frontendmasters.com/courses/intermediate-react-v5/wiring-redux-to-components\n\t- same as mine##bothoksadfok\n\t- \"While Redux is straightforward to test, how would you test that Context works the way you intend? It's possible, but it takes a lot of introspection on your components to test Context, which is such a pain that we generally end up not testing Context.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/adding-search-params-to-redux\n\t- makes searchParamsSlice.jsx\n- https://frontendmasters.com/courses/intermediate-react-v5/redux-toolkit-query-middleware\n\t- \"If you're using Redux Toolkit, just go full into it and use [React Toolkit Query](https://redux-toolkit.js.org/rtk-query/overview).\" // quote\n\t- refactor React Query to React Toolkit Query\n\t- making petApiService.js##apipetis\n\t- notes where useGet...Query variable comes from##notewherecomes\n\t- Redux has a concept called middleware\n\t\t- he uses it to cache data\n\t- adding more endpoints is simple\n\t- entire API##entireapisisj\n\t- useSearchQuery is nice to use\n- https://frontendmasters.com/courses/intermediate-react-v5/redux-dev-tools\n\t- install [Redux Dev Tools](https://chromewebstore.google.com/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?pli=1)\n\t- show all changes, and go back in time##seeallactions\n\t- you can say, what would happen if this action didn't happen, click skip##cansayskip\n\t- it will generate a test that you can copy and paste into your code##generattestes\n\t- your user can send you the dump from this Redux Toolkit and you can time travel through to see what caused the crash\n\t- \"So, that was Redux, questions about Redux? I'm hoping the feeling you're having right now is mixed. Some of what we did with Redux was really cool, some of it was a lot of work, I have mixed feelings about it. If I imparted that to you, then I feel like I did my job. I feel like, if you either like Redux too much or not at all, I didn't do my job. It's a trade-off, there's definitely trade-offs to using Redux. That's really what I wanted you to see.\" //quote \n- https://frontendmasters.com/courses/intermediate-react-v5/setup-react-testing-library-vitest/\n\t- \"Every version of this course so far, I have used Jest. But today we're going to be using Vitest. The reason is that Vitest was made to go with Vite. It's made by the same people, it reads your Vite configuration, so we won't have to configure anything, it's just going to work out of the box for us, which seems pretty compelling to me. And Vite is meant to be a drop-in replacement for Jest. The two are API-compatible, so if you want to use Jest for some reason, no problem, everything I'm going to teach you about Vitest applies to Jest as well.\" //quote\n\t- `npm i -D vitest @testing-library/react`\n\t- Vitest was made by the creaters of Vite and so was made for Vue originally\n\t- \"To test our React application in this course, we'll be using testing-library, which was created to replace Enzyme. If you've been developing in React long enough, you've surely used Enzyme. It was made by Airbnb, it was a bunch of helpers for testing React projects, and it was a pain in the ass, and I'm very glad it's gone. Regardless, thank you to everyone who created Enzyme, it was better than nothing, which was what we had before it. But today we have testing-library, which is basically better in every way: it's less flaky, it's easier to use, and it's faster.\" //quote\n\t- `npm i happy-dom`\n\t- \"The testing tool happy-dom is like a minimalist version of jsdom, so we don't have to spin up a browser, we can just test everything inside of Node. My advice for you is, for most test, use happy-dom, it's small and fast, it's not a total, complete DOM like jsdom is, but it is much faster, so if happy-dom works, use happy-dom, otherwise use jsdom. And as far as the full-featured Puppeteer and Playwright, my suggestion is to have a few important tests that you write inside of those, and then that's it. Those end-to-end tests are expensive and flaky, so make sure you're testing really important things, don't just go willy-nilly on end-to-end testing.\" //quote\n\t- he has in package.json `\"test\": \"vitest\"`\n\t\t- I had `\"test\": \"vitest --ui\"`\n\t- `npm t` will run tests\n\t- he has this **vite.config.js**##hehastconfig\n\t\t- I have this\n\t\t\t------------------------------------\n\t\t\timport { defineConfig } from 'vitest/config'\n\n\t\t\texport default defineConfig({\n\t\t\t\ttest: {\n\t\t\t\t\tinclude: ['./src/tools/**/*.test.ts'],\n\t\t\t\t\tglobals: true\n\t\t\t\t},\n\t\t\t});\n\t\t\t------------------------------------\n\t- \"Try to test functionality, not implementation. Don't test that a hook has the correct value in it, test that the user interface is working the way the user would expect it to. Approach your tests like a user approaches your applications, if I click a button I see the thing that I want, try to tell these user stories through your tests. This is not always possible but generally, if I change the implementation to do something in a different way, I shouldn't have to write a new test to test the next implementation, since it still does what it did before on the level of the user interface. I don't care about the implementation details, I care if the user story breaks. UIs change all the time. If you changed colors or the position of a message on the screen, it doesn't mean that the UI is broke, it just means that it changed.\" //quote\n- https://frontendmasters.com/courses/intermediate-react-v5/testing-a-component\n\t- \"What's the deal with the double underscore, aka a dunder? That's what it's called, I didn't make that up. It's a python thing that means something is special or magical, as they say. In our case, our folder is special because anything inside of is is assumed to be a test. In order words, if you create that folder, Vitest will assume any file in it is a test and will run it as part of your test suite. You don't have to do it this way, you can also end the file name with '.test.jsx' and these files will also be assumed to be tests. I do both, and can always find all my tests quickly: either search for 'test.js' or look in the __tests__ directory. You can also define where your tests are in the vitest.config.ts file.\" //quote\n\t- makes Pet.test.jsx (not js)\n\t\t- \"So why am I using with this data-testid attribute instead of a CSS selector? What's nice about using a specific test-id attribute is that it expresses (1) that this element is being tested, and (2) later if I change how this UI works, I can just move the data attribute without changing my test. It makes your test work independently of HTML and CSS structure, which is good to decouple these wherever possible.\" //quote##hastestid\n\t\t- wraps with StaticRouter to use Link, since we are only in Node##routerstaticss\n\t\t- he tested if **none.jpg** would show up if no image was given##hetestsssnone\n\t\t- tests if an image is shown##testsif1jsp\n- https://frontendmasters.com/courses/intermediate-react-v5/testing-user-interaction\n\t- now testing the carousel\n\t- also checking if it gets the active class\n\t- the test##carouthetest\n\t- the component##thecarrararsj\n- https://frontendmasters.com/courses/intermediate-react-v5/testing-custom-hooks\n\t- doing useBreedList.tsx\n\t\t- we don't want React Query to test three times, we just want it to fail on the first time, therefore **retry: false**\n\t\t- \"Hooks only work inside a component. So how can we test our hook outside of a component? To answer the question, we cannot. Therefore, in our test, we're going to have to make a React component called TestComponent. It's a bit silly that we have to do this, we have to write 37 lines of code to test 8 lines. Note, however, that you can now use renderHook() from testing-library to do this with fewer lines and less complexity.\" //quote##lesscodetestinghooks \n- https://frontendmasters.com/courses/intermediate-react-v5/testing-mocks\n\t- we also want to test that it calls the right API and presents the correct information\n\t- \"In my test, I don't actually want to hit my API. You can imagine a case in which everyone is running tests and they are all hammering your API. Not a good idea. It would be better if we could mock the API. The easiest way to do this is to install: npm i -D vitest-fetch-mock\" //quote\n\t- setup fetch-mock##setupfetchmock\n\t- the test##uselikethisdj\n\t- actually you need JSON.stringify()##thestringjjj\n\t- vitest and jest mocking are 100% the same thing\n- https://frontendmasters.com/courses/intermediate-react-v5/snapshots\n\t- Snapshot testing is low-effort, low-confidence tests. They are very easy to write, but they inspire very little confidence.\n\t- compares HTML output\n\t- if you had something that you never expected to change, it might be useful\n\t- you can also have a snapshot for JSON\n\t\t- this is actually a better use-case for a snapshot test\n\t- you could also do shallow-rendering\n- https://frontendmasters.com/courses/intermediate-react-v5/testing-coverage\n\t- DOING","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-11 17:45:52","systemWhoCreated":"systemUnknown"},{"id":768,"category":"React","title":"Learn how to make an interactive form with FormData in React by creating a content management app that publishes at Vercel","body":"- **the purpose of this howto**\n\t- this howto is **part one of a two-part howto** in which we will create two types of forms in React\n\t\t- (1) a **simple form** with FormData \n\t\t- (2) a **complex form** with state variables\n- **what we will build**\n\t- this site will run as a **local React application** in which you can add data to a database (a JSON file) via forms\n\t- when you publish the site to **Vercel**, the pages which contain the forms will not be displayed\n\t\t- only the pages that display data will be displayed\n\t- this is a **practical and safe** way to create a content management system for an online website\n\t- so in the process of completing these two howtos, you will \n\t\t- build a simple **content management system** for yourself or others\n\t\t- learn the difference between **two kinds of forms** you can build\n\t\t\t- (1) an HTML form with **FormData** \n\t\t\t\t- simple and practical\n\t\t\t\t- this technique is also being used today in [Next.js server-only forms](https://nextjs.org/docs/pages/building-your-application/data-fetching/forms-and-mutations)\n\t\t\t- (2) a custom, feature-rich, client-side solution with **state variables** for more complex, interactive forms\n\t- in this howto we will build the first kind of form\n\t- there are many other tools and concepts will use to build this application such as\n\t\t- **json-server** to store our data\n\t\t- **environment variables** to determine if the app is in development or production mode\n\t\t- we use **Postman** briefly to test the json-server API\n\t\t- basic **React Router** to have multiple pages\n\t\t- how to create an **npm run dev** script that starts two applications listening on two ports\n\t\t\t- (1) a Vite React site\n\t\t\t- (2) a json-server API\n- **GitHub repository:**\n\t- https://github.com/edwardtanguay/et711-react-forms-site\n- **live site:** \n\t- https://et711-react-forms-site.vercel.app\n- **site will work like this:**\n\t- you add data to your JSON file locally with user-friendly forms\n\t- when you publish online, your site is read-only##theofandonline\n- **most important concepts, skills and tools**\t\n\t- **concepts**\n\t\t- **what are the two main different ways to create custom forms in React**\n\t\t\t- 1. use FormData which automatically collects data from fields based on their **name** attribute\n\t\t\t\t- the FormData API became a W3C Recommendation in 2015\n\t\t\t\t- today it is supported by all major browsers\n\t\t\t\t- use this if you do not need instant validation or if the standard HTML form validation is sufficient\n\t\t\t- 2. with an object state variable which has a property for each field which is itself an object\n\t\t\t\t- this is a bit more work in setting up\n\t\t\t\t- but it allows you to create custom, complex live validation\n\t\t\t\t\t- e.g. you could query an API and appropriately respond based on what the user is typing in a field\n\t\t\t\t- this method allows you to control every aspect of the user experience while using a form\n\t\t- **why don't you need to set up state variables for each field when using FormData?**\n\t\t\t- because FormData automatically reads the values of the form fields based on their **name** attribute\n\t\t- **what do environment variables do?**\n\t\t\t- these variables are outside of your website and store configuration settings for a particularly environemnt, usually for development, testing and production\n\t\t\t- an example might be \n\t\t\t- in Vite sites and Node backends, you save environment variables in an **.env** file\n\t\t\t- at Vercel, you can enter environment variables for a specific site##tehvensavercel\n\t\t- **what do you have to do after you change an environment variable locally**\n\t\t\t- restart your application with `npm run dev`\n\t\t- **what do you have to do after you change an environment variable at a provide like Vercel**\n\t\t\t- redeploy the site\n\t\t- **why is it that we can use json-server locally in this app, but not at Vercel**\n\t\t\t- because of the fact that Vercel does not have a backend in the sense that your local machine has a backend\n\t\t\t- Vercel does not have a file-system\n\t\t\t- it does have a **backend cloud-function area** where you can fetch data from an online database or API and send it to the browser, e.g. using Next.js\n\t\t\t\t- understanding this is key to understanding the direction React is moving with the SSR and SSG trends##thenosqlite\n\t- **skills**\n\t\t- **how do you read an environment variable in Vite**\n\t\t\t- put it in an .env file as e.g. `VITE_ENVIRONMENT = development`\n\t\t\t- then read it out in your Vite app with `const environment = import.meta.env.VITE_ENVIRONMENT;`\n\t\t- **how to you set up a site so that with \"npm run dev\" you start the frontend Vite site and the \"backend\" json-server?**\n\t\t\t- install **npm-run-all**\n\t\t\t- set up npm scripts in **package.json** e.g.\n\t\t\t\t----------------------------------------\n\t\t\t\t\"dev\": \"run-p api frontend\",\n\t\t\t\t\"api\": \"json-server --watch ./src/data/db.json --port 4801\",\n\t\t\t\t\"frontend\": \"vite --port 4800 --open\",\t\t\t\t\n\t\t\t\t----------------------------------------\n\t- **tools**\n\t\t- FormData\n\t\t- preventDefault()\n\t\t- json-server\n\t\t- .env file\n\t\t- import.meta.env\n- **>>> 1. set up React site with menu in order to have a form on each page**\n\t- go to: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t- use template to create new repostory on your GitHub, e.g. `et711-react-forms-site` (use your own name so you can publish it one-to-one at Vercel)\n\t- clone it locally\n\t- `npm i`\n\t- `npm run dev`\n\t- site should look like this:##thesitemenuup22\n- **>>> 2. customize site for simple page**\n\t- change title of site to **React Forms**\n\t\t- **index.html**\n\t\t\t------------------------------------------\n\t\t\t<title>React Forms</title>\n\t\t\t------------------------------------------\n\t\t- **Header.tsx**\n\t\t\t------------------------------------------\n\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800\">React Forms</h1>\n\t\t\t------------------------------------------\n\t- change **Welcome** page to **Simple Form**\n\t\t- change PageWelcome.tsx to **PageSimpleForm.tsx**\n\t\t\t----------------------------------------\n\t\t\texport const PageSimpleForm = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this will be the simple form</p>\n\t\t\t\t);\n\t\t\t};\n\t\t\t----------------------------------------\n\t\t- **Nav.tsx**\n\t\t\t----------------------------------------\n\t\t\t<li><NavLink to=\"/simple-form\">Simple Form</NavLink></li>\n\t\t\t----------------------------------------\n\t\t- **main.tsx**\n\t\t\t----------------------------------------\n\t\t\t{\n\t\t\t\tpath: \"/simple-form\",\n\t\t\t\telement: <PageSimpleForm />,\n\t\t\t},\n\n\t\t\t{\n\t\t\t\tpath: \"/\",\n\t\t\t\telement: <Navigate to=\"/simple-form\" replace />,\n\t\t\t},\n\t\t\t----------------------------------------\n\t- site should look like this:##siteshould2\n- **>>> 3. set up simple form to collect and display data**\n\t- **PageSimpleForm.tsx**\n\t\t------------------------------------------------\n\t\timport { FormEvent } from \"react\";\n\n\t\texport const PageSimpleForm = () => {\n\t\t\tconst handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tconst data = new FormData(event.target as HTMLFormElement);\n\t\t\t\tconsole.log(data);\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<form onSubmit={handleFormSubmit}>\n\t\t\t\t\t<fieldset className=\"border border-gray-500 p-4 w-full sm:w-40 rounded\">\n\t\t\t\t\t\t<legend>New Employee</legend>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"firstName\">\n\t\t\t\t\t\t\t\tFirst Name:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"firstName\"\n\t\t\t\t\t\t\t\tname=\"firstName\"\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"lastName\">\n\t\t\t\t\t\t\t\tLast Name:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input type=\"text\" id=\"lastName\" name=\"lastName\" required />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"age\">\n\t\t\t\t\t\t\t\tAge:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input type=\"number\" id=\"age\" name=\"age\" required />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"hireDate\" >\n\t\t\t\t\t\t\t\tHire Date:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input type=\"date\" id=\"hireDate\" name=\"hireDate\" required />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"employeeNumber\">\n\t\t\t\t\t\t\t\tEmployee Number:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tid=\"employeeNumber\"\n\t\t\t\t\t\t\t\t\tname=\"employeeNumber\"\n\t\t\t\t\t\t\t\t\tpattern=\"^[DSM]-\\d{4}$\"\n\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<p className=\"text-sm\">e.g. D-2832, S-7771, M-8123</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"notes\" >\n\t\t\t\t\t\t\t\tNotes:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<textarea id=\"notes\" name=\"notes\"></textarea>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-5 flex justify-end pr-3\">\n\t\t\t\t\t\t\t<button>Add Employee</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t);\n\t\t};\n\t\t------------------------------------------------\n\t- form works like this:#gif#theformdataformwok\n- **>>> 4. set up json-server and save data to \"backend\" JSON file**\n\t- since our backend will simply be a json-server serving a json file named **db.json**\n\t\t- we will not need to set up a Node/Express backend\n\t\t- json-server will do all the work for us providing all the read/write API routes we need for the one collection in our db.json file:\n\t\t\t- employees\n\t\t- note: if you want to extend this application later to edit and delete employees, json-server offers all the routes to do that\n\t- **NOTE:** \n\t\t- **locally** we will be able to **read/write** to our JSON file\n\t\t- at **Vercel** we will only be able to **read** our JSON file\n\t\t- consider why this is the case\n\t- **src/data/db.json**\n\t\t-----------------------------------------\n\t\t{\n\t\t\t\"employees\": []\n\t\t}\n\t\t-----------------------------------------\n\t- set up backend and npm scripts\n\t\t- install **json-server** which will serve our JSON file via a REST API\n\t\t\t- `npm i -D json-server`\n\t\t- install **npm-run-all** in order to start both backend and frontend with **npm run dev**\n\t\t\t- `npm i -D npm-run-all`\n\t\t- **package.json**\n\t\t\t--------------------------------------------\n\t\t\t\"dev\": \"run-p api frontend\",\n\t\t\t\"api\": \"json-server --watch ./src/data/db.json --port 4801\",\n\t\t\t\"frontend\": \"vite --port 4800 --open\",\t\t\t\n\t\t\t--------------------------------------------\n\t\t- now type `npm run dev`\n\t\t- your frontend and backend should start like it did before\n\t\t\t- but now running on two ports, frontend and backend:##bothparosjs\n\t- test if the backend is running\n\t\t- **test.rest**\n\t\t\t----------------------------------------\n\t\t\t@url = http://localhost:4801\n\n\t\t\t### GET ALL EMPLOYEES\n\t\t\t{{url}}/employees\n\n\t\t\t### ADD AN EMPLOYEE\n\t\t\tPOST {{url}}/employees\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"firstName\": \"James\",\n\t\t\t\t\"lastName\": \"Tester\",\n\t\t\t\t\"age\": 55,\n\t\t\t\t\"hireDate\": \"2020-01-01\",\n\t\t\t\t\"employeeNumber\": \"D-8811\"\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- clicking on the links should add and display employees in the **db.json** file\n\t\t\t- I got an ECONNREFUSED error with the REST Client extension\n\t\t\t- if **test.rest** doesn't work, use [Postman](https://www.postman.com)\n- **>>> 5. program form to save employee when button is clicked**\n\t- when the user clicks the submit button\n\t\t- instead of just printed out the form data in the console\n\t\t- we want to add it to our database\n\t\t- to do that, we need to send a **POST** request to our **json-server**\n\t- install axios\n\t\t- `npm i axios`\n\t- **PageSimpleForm.tsx**\n\t\t----------------------------------------------------------\n\t\timport { FormEvent } from \"react\";\n\t\timport axios, { AxiosResponse } from \"axios\";\n\t\timport { useNavigate } from \"react-router-dom\";\n\n\t\texport const PageSimpleForm = () => {\n\t\t\tconst navigate = useNavigate();\n\n\t\t\tconst handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tconst formData = new FormData(event.target as HTMLFormElement);\n\t\t\t\tconst employee = JSON.stringify(Object.fromEntries(formData));\n\t\t\t\t(async () => {\n\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response: AxiosResponse = await axios.post(\n\t\t\t\t\t\t\t\"http://localhost:4801/employees\",\n\t\t\t\t\t\t\temployee,\n\t\t\t\t\t\t\t{ headers }\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\tnavigate('/employees');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(`ERROR: ${response.status}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error: any) {\n\t\t\t\t\t\tconsole.log(`ERROR: ${error.message}`);\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t};\t\t\n\t\t----------------------------------------------------------\n\t- form will submit employees like this:#gif#submitemployees342\n- **>>> 6. display the employees on another page**\n\t- change page Info to **Employees**\n\t\t- **PageEmployees.tsx**\n\t\t\t-------------------------------------------\n\t\t\texport const PageEmployees = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>This is the employees page.</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **Nav.tsx**\n\t\t\t---------------------------------------\n\t\t\t<NavLink to=\"/employees\">Employees</NavLink>\n\t\t\t---------------------------------------\n\t\t- **main.tsx**\n\t\t\t---------------------------------\n\t\t\t{\n\t\t\t\tpath: \"employees\",\n\t\t\t\telement: <PageEmployees />,\n\t\t\t},\t\t\t\n\t\t\t---------------------------------\n\t\t- employees page looks like this:##nowempoeys\n\t- display employees on page\n\t\t- **interfaces.ts**\n\t\t\t---------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\tid: number;\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\tage: number;\n\t\t\t\thireDate: string;\n\t\t\t\temployeeNumber: string;\n\t\t\t\tnotes: string;\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------\n\t\t- **PageEmployees.tsx**\n\t\t\t---------------------------------------------\n\t\t\timport { useState, useEffect } from \"react\";\n\t\t\timport { IEmployee } from \"../interfaces\";\n\t\t\timport axios from \"axios\";\n\n\t\t\tconst url = \"http://localhost:4801\";\n\n\t\t\texport const PageEmployees = () => {\n\t\t\t\tconst [employees, setEmployees] = useState<IEmployee[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tsetEmployees((await axios.get(`${url}/employees`)).data);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{employees.length === 0 ? (\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>There are {employees.length} employees.</p>\n\n\t\t\t\t\t\t\t\t<div className=\"relative overflow-x-auto mt-4 rounded w-1/2\">\n\t\t\t\t\t\t\t\t\t<table className=\"w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\t\t<thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tID\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tFirst Name\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tLast Name\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tAge\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tHire Date\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tEmployee Number\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t\t<th scope=\"col\" className=\"px-6 py-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tNotes\n\t\t\t\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.id}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.firstName}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.lastName}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.age}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.hireDate}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.employeeNumber}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td className=\"px-6 py-4\">{employee.notes}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t---------------------------------------------\n\t- added employees now appear on the employees page#gif#theadedappear\n- **>>> 7. publish site to Vercel and make it read only**\n\t- make the employees page read from JSON instead of the backend\n\t\t- go to http://vercel.com and publish your site\n\t\t- when you go to it, the site seems to work\n\t\t\t- it seems that you are able to add employees and they appear on our online page\n\t\t\t\t- Q: what is happening?\n\t\t\t\t- A: you are using your online frontend but your local backend\n\t\t\t- to see that this is true, shut your local backend down and see that you can no longer read or write employees on your online site\n\t\t- we want to be able to edit with forms locally\n\t\t\t- yet have the site display data on the online site\n\t\t- so let's change the source of the employees on the PageEmployees page to an import of the JSON file instead of an axios call to the backend\n\t\t- **PageEmployees.tsx**\n\t\t\t------------------------------------------------\n\t\t\timport db from '../data/db.json';\n\n\t\t\tconst employees = db.employees;\t\t\n\t\t\t------------------------------------------------\n\t\t- push the site to your GitHub repository\n\t\t- turn off your backend json-server\n\t\t- visit your online page at Vercel\n\t\t\t- you will be able to see the the employees on the employees page\n\t\t\t\t- since they are now loading from the JSON file which has been turned into a JavaScript object on the Vercel site\n\t\t\t- but you will not be able to add employees, since your local server is off:##theerrconnjj\n\t\t\t- and if you turned on your backend server, then you could add employees from your online site into your local backend\n\t\t\t- but we don't want to do this\n\t\t\t- so we will now take the Simple Form page off the menu when the site is online\n\t- take the Simple Form page off the menu when the site is online\n\t\t- to do this, we need to create an **environment variable** which will be we will save in an **.env** file\n\t\t\t- if our app finds this variable, then it knows it is local\n\t\t\t- if our app cannot find this variable, then it knows it is online at Vercel\t\n\t\t- create **.env** in the root directory\n\t\t\t-----------------------------------------\n\t\t\tVITE_ENVIRONMENT = development\n\t\t\t-----------------------------------------\n\t\t- so that you don't upload your **.env** file to GitHub, add it to your **.gitignore** file\n\t\t\t------------------------------------------\n\t\t\t.env\n\t\t\t------------------------------------------\n\t\t- the **.env** file should now be the color gray just like **node_modules**##thecolorkjsgray\n\t\t- this means that both will not be ignored by Git and not uploaded to GitHub\n\t\t- now let's display the environment variable on the simple form page\n\t\t\t- **config.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\texport const environment = import.meta.env.VITE_ENVIRONMENT;\n\t\t\t\t---------------------------------------\n\t\t\t- **PageSimpleForm.tsx**\n\t\t\t\t--------------------------------------------------\n\t\t\t\timport * as config from \"../config\";\n\n\t\t\t\t<p>environment is: [{config.environment}]</p>\n\t\t\t\t--------------------------------------------------\n\t\t\t- it will look like this:##seeonemppagesimpl\n\t\t- now let's push it to GitHub and look at it on Vercel\n\t\t\t- we see that it is empty since we have set any environment variable at Vercel##athervercelnot\n\t\t\t- note that in this case, we don't have to, but we could even add a value at Vercel that explicitly tells the application that it is in production\n\t\t\t\t- let's do this for practice\n\t\t\t- after you change an environment variable, you **have to redeploy the site**\n\t\t\t\t- at Vercel: click on **Deployments**, click the three dots, and **Redeploy**##havetothereplaoy\n\t\t\t- the environment variable at Vercel now shows up on the page:##tehfirstreeploy\n\t- now let's hide the simple form page when the site is at Vercel, since that page cannot be used anyway online\n\t\t- to test locally, change the value in the **.env** file to something else because \"development\"\n\t\t\t--------------------------------------------\n\t\t\tVITE_ENVIRONMENT = nnn\n\t\t\t--------------------------------------------\n\t\t- check the page:##thecapajscheck\n\t\t- also take the menu item out of the menu\n\t\t\t**Nav.tsx**\n\t\t\t\t-------------------------------------------------\n\t\t\t\t{config.environment === \"development\" && (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to=\"/simple-form\">Simple Form</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t)}\n\t\t\t\t-------------------------------------------------\n\t\t- now even the menu item is not available when the environment is not \"development\"##thenopagebecause\n\t\t- switch variable back to \"development\"\n\t\t\t**.env**\n\t\t\t\t--------------------------------------\n\t\t\t\tVITE_ENVIRONMENT = development\n\t\t\t\t--------------------------------------\n\t\t- be sure to **restart** the application (always after you change environment variables)\n\t\t- we now see the page again:##wenowseejdi\n\t\t- now push your changes to GitHub again and check your Vercel site\n\t\t- when your site is online, you will not see the **Simple Form** page\n\t\t- note that the default page is no longer correct, change it in **main.tsx**\n\t\t\t-----------------------------------------------\n\t\t\telement: config.environment === 'development' ? <Navigate to=\"/simple-form\" replace /> : <Navigate to=\"/employees\" replace />,\n\t\t\t-----------------------------------------------\n- **>>> 8. local data-mangament / online read-only site**\t\t\n\t- you have created an application which enables you to edit data via a form locally\n\t\t- yet when you publish the site to Vercel, it shows only the data\n\t\t- this is a practical and safe way to create a content management system for an online website##theofandonline","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-12 21:34:20","systemWhoCreated":"systemUnknown"},{"id":769,"category":"React","title":"Learn how to make an interactive form with state variables in React in a content management app that publishes at Vercel","body":"- **the purpose of this howto**\n\t- this howto is **part two of a two-part howto** in which we create two types of forms in React\n\t\t- (1) a **simple form** with FormData \n\t\t- (2) a **complex form** with state variables\n\t- in this howto we will **add a complex form with state variables** to the site\n- **what we will build**\n\t- this site will run as a **local React application** in which you can add data to a database (a JSON file) via forms\n\t- when you publish the site to **Vercel**, the pages which contain the forms are not be displayed\n\t\t- only the pages that display data are displayed\n\t- this is a **practical and safe** way to create a content management system for an online website\n\t- and it is a good way to practice the React part of MERN-Fullstack skills e.g. \n\t\t- setting up REST-based communication between frontend and backend\n\t\t- creating forms that allow the user to create, edit and delete information from the database via the backend API\n\t- but without all of the complexity of MERN-Fullstack e.g. backend, online security, authorization/authentication\n- **if you haven't completed the first howto**\n\t- complete it first here: https://tanguay-eu.vercel.app/howtos/768\n\t- or get up to speed with the code\n\t\t- here is the code as it should be at the end of the first howto:\n\t\t\t- https://github.com/edwardtanguay/et711-react-forms-site/tree/howto-part1-status\n\t\t- here is what the online site looks like at the end of the first howto:\n\t\t\t- https://et711-react-forms-site.vercel.app\n- **GitHub repository:**\n\t- https://github.com/edwardtanguay/et223-react-forms-site-part2\n- **site looks like this:**\n\t- #gif#addthememem\n- **most important concepts, skills and tools**\n\t- **concepts**\n\t\t- **what is a reason why you would want a state-variable form instead of a formData form**\n\t\t\t- for more fine-grained control over the user experience\n\t\t\t- for more robust validation\n\t\t\t- in order to make forms dynamic, e.g. based on a config object that one sends into a form component\n\t\t- **why would you use a <form> element even if you are not going to classically submit a form with onSubmit?**\n\t\t\t- for accessibility reasons\n\t\t\t- **htmlFor** and **id** is also important\n\t- **skills**\n\t\t- **how to set up a state-variable form**\n\t\t\t- define state object **formInfo** that has properties called **fields** \n\t\t\t\t- property **fields** is an object of fields\n\t\t\t\t- each field is an object that has information about the field\n\t\t\t\t- every field is connected to this object that represents\n\t- **tools**\n\t\t- HTML form basics\n\t\t- state variables\n\t\t- axios\n\t\t- structuredclone()\n- **>>> 1. set up site that we built in the first howto**\n\t- go to: https://github.com/edwardtanguay/et873-vite-react-site-json-server\n\t- use **template** to create new repostory on your GitHub, e.g. `et223-react-forms-site-part2` (use your own name so you can publish it one-to-one at Vercel)\n\t- clone it locally\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site will look like this:##thebefroeenv\n\t- but this is how the site should look on **Vercel** i.e. without the first form we built\n\t- in order to get the **developer version** add the environment file\n\t\t- **.env**\n\t\t\t------------------------------------------------\n\t\t\tVITE_ENVIRONMENT = development\n\t\t\t------------------------------------------------\n\t- Vite will notice that you changed the **.env** file and automatically restart the server so that your app knows the new values (this wasn't always the case)##vieschange\n\t- now the site should look like this, with the **Simple Form** page, but the online Vercel version will still not have the Simple form page##withsimplsdform\n- **>>> 2. change \"About\" page to \"State Form\" page**\n\t- **PageStateForm.tsx**\n\t\t--------------------------------------\n\t\texport const PageStateForm = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the state form page.</p>\n\t\t\t)\n\t\t}\t\t\n\t\t--------------------------------------\n\t- **Nav.tsx**\n\t\t-------------------------------------\n\t\t<NavLink to=\"/state-form\">State Form</NavLink>\n\t\t-------------------------------------\n\t- **main.tsx**\n\t\t---------------------------------------\n\t\t{\n\t\t\tpath: \"/state-form\",\n\t\t\telement: <PageStateForm />,\n\t\t},\n\t\t---------------------------------------\n\t- site now looks like this:##nowstateks\n- **>>> 3. make simple form with state variables which saves first and last name of a member**\n\t- in the formData form we collected information about an **employee**\n\t- in this state form, we will collect information about a **member**, e.g. of a club\n\t- **PageStateForm.tsx**\n\t\t-----------------------------------------------------\n\t\timport { ChangeEvent, useState } from \"react\";\n\n\t\tconst initialFormInfo = {\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tidCode: \"firstName\",\n\t\t\t\t\tlabel: \"First Name\",\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tisRequired: true,\n\t\t\t\t\tisValid: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tidCode: \"lastName\",\n\t\t\t\t\tlabel: \"Last Name\",\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tisRequired: true,\n\t\t\t\t\tisValid: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tidCode: \"age\",\n\t\t\t\t\tlabel: \"Age\",\n\t\t\t\t\tvalue: 0,\n\t\t\t\t\tisRequired: true,\n\t\t\t\t\tisValid: false,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\texport const PageStateForm = () => {\n\t\t\tconst [formInfo, setFormInfo] = useState(initialFormInfo);\n\n\t\t\tconst handleFieldFirstName = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tconst _setFormInfo = structuredClone(formInfo);\n\t\t\t\tconst firstNameField = _setFormInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"firstName\"\n\t\t\t\t);\n\t\t\t\tif (firstNameField) {\n\t\t\t\t\tfirstNameField.value = value;\n\t\t\t\t}\n\t\t\t\tsetFormInfo(_setFormInfo);\n\t\t\t};\n\n\t\t\tconst handleFieldLastName = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tconst _setFormInfo = structuredClone(formInfo);\n\t\t\t\tconst lastNameField = _setFormInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"lastName\"\n\t\t\t\t);\n\t\t\t\tif (lastNameField) {\n\t\t\t\t\tlastNameField.value = value;\n\t\t\t\t}\n\t\t\t\tsetFormInfo(_setFormInfo);\n\t\t\t};\n\n\t\t\tconst handleFieldAge = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tconst _setFormInfo = structuredClone(formInfo);\n\t\t\t\tconst ageField = _setFormInfo.fields.find((m) => m.idCode === \"age\");\n\t\t\t\tif (ageField) {\n\t\t\t\t\tageField.value = value;\n\t\t\t\t}\n\t\t\t\tsetFormInfo(_setFormInfo);\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<form>\n\t\t\t\t\t<fieldset className=\"border border-slate-500 p-4 rounded max-w-[25rem]\">\n\t\t\t\t\t\t<legend>New Member</legend>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-40\" htmlFor=\"firstName\">\n\t\t\t\t\t\t\t\tFirst Name:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"firstName\"\n\t\t\t\t\t\t\t\tonChange={handleFieldFirstName}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"lastName\">\n\t\t\t\t\t\t\t\tLast Name:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"lastName\"\n\t\t\t\t\t\t\t\tonChange={handleFieldLastName}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t<label className=\"w-[10rem]\" htmlFor=\"age\">\n\t\t\t\t\t\t\t\tAge:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"age\"\n\t\t\t\t\t\t\t\tclassName=\"w-12 text-right\"\n\t\t\t\t\t\t\t\tonChange={handleFieldAge}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-5 flex justify-end pr-3\">\n\t\t\t\t\t\t\t<button>Add Member</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</form>\n\t\t\t);\n\t\t};\n\t\t-----------------------------------------------------\n\t- form should work and show values#gif#firsformworkok\n- **>>> 4. for development/debuging purposes display the formInfo object live as user types**\n\t- **config.ts**\n\t\t-----------------------------------\n\t\texport const debugging = true;\n\t\t-----------------------------------\n\t- **PageStateForm.tsx**\n\t\t-------------------------------------\n\t\timport * as config from \"../config\";\n\n\t\t<section className=\"flex gap-8\">\n\t\t\t...\n\t\t{config.debugging && (\n\t\t\t<section className=\"mt-4\">\n\t\t\t\t<pre className=\"text-orange-900 text-xs\">\n\t\t\t\t\t{JSON.stringify(formInfo, null, 2)}\n\t\t\t\t</pre>\n\t\t\t</section>\n\t\t)}\n\t\t</section>\n\t\t-------------------------------------\n\t- form now works like this:#gif#nowwithdibeugg\n- **>>> 5. refactor config for more fine-grained control of values**\n\t- we want to be able to set debugging to true locally\n\t- but even it is left on and we publish the site, we don't want our debugging information to show on the live site\n\t- so we will **refactor** config.ts so that all values are **functions** which can have logic\n\t- **config.ts**\n\t\t------------------------------------\n\t\timport * as config from './config';\n\n\t\tconst _debugging = true;\n\n\t\texport const environment = () => import.meta.env.VITE_ENVIRONMENT;\n\n\t\texport const debugging = () => config.environment() === 'development' && _debugging;\n\t\t------------------------------------\n- **>>> 6. enable form to submit and save data in JSON file**\n\t- **PageStateForm.tsx**\n\t\t-------------------------------------------------\n\t\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\t\timport { ChangeEvent, FormEvent, useState } from \"react\";\n\t\timport * as config from \"../config\";\n\t\timport axios from \"axios\";\n\t\timport { IFormInfo } from \"../interfaces\";\n\n\t\tconst initialFormInfo: IFormInfo = {\n\t\t\tstatus: \"active\",\n\t\t\tfields: [\n\t\t\t\t{\n\t\t\t\t\tidCode: \"firstName\",\n\t\t\t\t\tlabel: \"First Name\",\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tisRequired: true,\n\t\t\t\t\tisValid: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tidCode: \"lastName\",\n\t\t\t\t\tlabel: \"Last Name\",\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tisRequired: true,\n\t\t\t\t\tisValid: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tidCode: \"age\",\n\t\t\t\t\tlabel: \"Age\",\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tisRequired: true,\n\t\t\t\t\tisValid: false,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\texport const PageStateForm = () => {\n\t\t\tconst [formInfo, setFormInfo] = useState(initialFormInfo);\n\n\t\t\tconst handleFieldFirstName = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tconst _formInfo = structuredClone(formInfo);\n\t\t\t\tconst firstNameField = _formInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"firstName\"\n\t\t\t\t);\n\t\t\t\tif (firstNameField) {\n\t\t\t\t\tfirstNameField.value = value;\n\t\t\t\t}\n\t\t\t\tsetFormInfo(_formInfo);\n\t\t\t};\n\n\t\t\tconst handleFieldLastName = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tconst _formInfo = structuredClone(formInfo);\n\t\t\t\tconst lastNameField = _formInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"lastName\"\n\t\t\t\t);\n\t\t\t\tif (lastNameField) {\n\t\t\t\t\tlastNameField.value = value;\n\t\t\t\t}\n\t\t\t\tsetFormInfo(_formInfo);\n\t\t\t};\n\n\t\t\tconst handleFieldAge = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tconst _formInfo = structuredClone(formInfo);\n\t\t\t\tconst ageField = _formInfo.fields.find((m) => m.idCode === \"age\");\n\t\t\t\tif (ageField) {\n\t\t\t\t\tageField.value = value;\n\t\t\t\t}\n\t\t\t\tsetFormInfo(_formInfo);\n\t\t\t};\n\n\t\t\tconst blankOutForm = () => {\n\t\t\t\tconst _formInfo = structuredClone(formInfo);\n\t\t\t\tconst firstName = _formInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"firstName\"\n\t\t\t\t);\n\t\t\t\tconst lastName = _formInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"lastName\"\n\t\t\t\t);\n\t\t\t\tconst age = _formInfo.fields.find(\n\t\t\t\t\t(m) => m.idCode === \"age\"\n\t\t\t\t);\n\t\t\t\tif (firstName && lastName && age) {\n\t\t\t\t\tfirstName.value = \"\";\n\t\t\t\t\tlastName.value = \"\";\n\t\t\t\t\tage.value = \"\";\n\t\t\t\t}\n\t\t\t\t_formInfo.status = \"active\";\n\t\t\t\tsetFormInfo(_formInfo);\n\t\t\t};\n\n\t\t\tconst handleSubmitForm = (e: FormEvent<HTMLFormElement>) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst member = {\n\t\t\t\t\tfirstName: formInfo.fields.find((m) => m.idCode === \"firstName\")\n\t\t\t\t\t\t?.value,\n\t\t\t\t\tlastName: formInfo.fields.find((m) => m.idCode === \"lastName\")\n\t\t\t\t\t\t?.value,\n\t\t\t\t\tage: Number(formInfo.fields.find((m) => m.idCode === \"age\")?.value),\n\t\t\t\t};\n\n\t\t\t\tconst _formInfo = structuredClone(formInfo);\n\t\t\t\t_formInfo.status = \"saving\";\n\t\t\t\tsetFormInfo(_formInfo);\n\t\t\t\tconst headers = {\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t};\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await axios.post(\n\t\t\t\t\t\t\t\t\"http://localhost:3021/members\",\n\t\t\t\t\t\t\t\tmember,\n\t\t\t\t\t\t\t\t{ headers }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\t\tblankOutForm();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.log(`ERROR: ${response.status}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error: any) {\n\t\t\t\t\t\t\tconsole.log(`ERROR: ${error.message}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}, 1500);\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<section className=\"flex gap-8\">\n\t\t\t\t\t<form onSubmit={handleSubmitForm}>\n\t\t\t\t\t\t<fieldset className=\"border border-slate-500 p-4 rounded max-w-[25rem]\">\n\t\t\t\t\t\t\t<legend>New Member</legend>\n\n\t\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t\t<label className=\"w-32\" htmlFor=\"firstName\">\n\t\t\t\t\t\t\t\t\tFirst Name:\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tdisabled={formInfo.status === \"saving\"}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\tformInfo.fields.find(\n\t\t\t\t\t\t\t\t\t\t\t(m) => m.idCode === \"firstName\"\n\t\t\t\t\t\t\t\t\t\t)?.value\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tid=\"firstName\"\n\t\t\t\t\t\t\t\t\tonChange={handleFieldFirstName}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t\t<label className=\"w-32\" htmlFor=\"lastName\">\n\t\t\t\t\t\t\t\t\tLast Name:\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tdisabled={formInfo.status === \"saving\"}\n\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\tformInfo.fields.find(\n\t\t\t\t\t\t\t\t\t\t\t(m) => m.idCode === \"lastName\"\n\t\t\t\t\t\t\t\t\t\t)?.value\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tid=\"lastName\"\n\t\t\t\t\t\t\t\t\tonChange={handleFieldLastName}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"mb-4 flex gap-2\">\n\t\t\t\t\t\t\t\t<label className=\"w-32\" htmlFor=\"age\">\n\t\t\t\t\t\t\t\t\tAge:\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tdisabled={formInfo.status === \"saving\"}\n\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\tformInfo.fields.find(\n\t\t\t\t\t\t\t\t\t\t\t(m) => m.idCode === \"age\"\n\t\t\t\t\t\t\t\t\t\t)?.value\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tid=\"age\"\n\t\t\t\t\t\t\t\t\tclassName=\"w-12 text-right\"\n\t\t\t\t\t\t\t\t\tonChange={handleFieldAge}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"mt-5 flex justify-end pr-3\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tdisabled={formInfo.status === \"saving\"}\n\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\tformInfo.status === \"saving\" ? \"opacity-60\" : \"\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{formInfo.status === \"saving\"\n\t\t\t\t\t\t\t\t\t\t? \"Saving...\"\n\t\t\t\t\t\t\t\t\t\t: \"Add Member\"}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</form>\n\t\t\t\t\t{config.debugging() && (\n\t\t\t\t\t\t<section className=\"mt-4\">\n\t\t\t\t\t\t\t<pre className=\"text-orange-900 text-xs\">\n\t\t\t\t\t\t\t\t{JSON.stringify(formInfo, null, 2)}\n\t\t\t\t\t\t\t</pre>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- the form should work like this:#gif#addthememem\n- **>>> 7. create live validation of fields as user types**\n\t- names\n\t\t- required\n\t\t- max 20 characters\n\t- age\n\t\t- blank is ok\n\t\t- if filled, then must be number\n\t\t- if number, then > 0 < 120\n\t- submit\n\t\t- if name already exists\n- **>>> 8. create members page**\n\t- don't automatically go there after add\n\t- but add link in form\n\t- and an \"add member\" link back\n- **>>> 9. add more kinds of fields**\n\t- textbox\n\t- dropdown\n\t- checkboxes\n\t- radio buttons\n\t- slider\n- **>>> 10. add dynamic validation**\n\t- enable codes\n\t\t- city: /p = Paris, /b = Berlin\n\t- if field has certain value, then insert value in another field\n\t\t- if city Hannover then state = Niedersachsen, etc.\n\t- if field has a certain value, add another control \n\t\t- checkbox: interested in joining a club\n\t\t- then popup: dropdown of clubs\n- **>>> 11. look at third-party tools that solve the problem we were solving in this howto**\n\t- [Formik](https://formik.org)\n\t- [React Hook Form](https://react-hook-form.com)\n\t- [Final Form](https://final-form.org/docs/react-final-form/getting-started)","points":20,"extras":"","systemWhenCreated":"2023-11-14 00:50:10","systemWhoCreated":"systemUnknown"},{"id":770,"category":"JavaScript","title":"Notes from Live Blazingly Fast JavaScript Workshop 2023-11-14 with ThePrimeagen","body":"- **intro**\n\t- premature-optimization is the root of all evil\n\t- speed is relative\n\t- will JavaScript be as fast as Go or Rust?\n\t\t- probably not\n\t- will learn how JavaScript works under the hood\n\t- not talking about the DOM\n\t- not using\n\t\t- perf\n\t\t\t- not easy to use\n\t\t\t- using it on a Docker container\n\t\t- v8tracing\n\t\t- micro benchmarks\n\t\t\t- deceiving\n\t\t\t- you can make anything look fast with micro benchmarks\n\t\t- not the top of optimization like properties in order\n\t- install Rust\n\t- install Golang, v1.2.1 or higher\n\t- node - be v20+\n\t\t- in 18, several second difference\n\t- focused on Node\n\t- use Chrome tools to improve speed\n\t- setup\n\t\t------------------------------------------\n\t\tgit clone git@github.com:ThePrimeagen/js-perf-example.git \n\t\tcd js-perf-example \n\t\tcd shooter \n\t\tnpm i cargo build --release \n\t\t------------------------------------------\n\t- if you don't see the change in production, you really haven't made a change\n\t- available in branches\n- **the game**\n\t- shooter game:##thegamshooeter\n\t- over web sockets\n\t- raw dog and tcp //nnn\n\t- waits for 2 players##watitesfor\n\t- create an FPS amount of frames //nnn\n\t- \"I tend to reach for Maps and Sets instead of objects when I want speed.\" //quote\n- **speed**\n\t- what is slow\n\t\t- creating objects?\n\t\t\t- good answer\n\t\t- network?\n\t\t\t- we will pretend the network is unimprovable\n\t\t- promises\n\t\t\t- yes\n\t- you have to measure\n\t\t- change your **ulimit** //voc\n\t\t\t- so you can have lots of files open, to test\n\t\t\t- ulimit -n 100000\n\t- tsc log files:##thsjsiefor\n\t- we have 1.5 million ontime ticks //nnn\n\t- he is testing how long the game runs##ticksofjd\n\t- step ladder test //nnn\n\t\t- you can run nice for awhile, but then cross a threshhold and run bad\n- fixing speed problems\n\t- **hot spot optmizing**\n\t\t- he ran\n\t\t- someone used lodash deep merge (_.merge) (bad) instead of assign (good) //voc\n\t\t\t- _.merge is JavaScript\n\t\t\t- Object.assign is C++\n\t- total time vs. self time\n\t- dev tools, performance, bottom up##thebottomsup\n- are Sets slower than Maps\n\t- \"JSDoc is exiciting to use when you don't want a whole TypeScript thing.\" //quote\n\t- array took half the time as Set\n\t- there is a break point where you should use arrays\n\t\t- you shouldn't always use arrays or Sets\n\t\t- use arrays until you reach a certain size, and then switch to Sets\n\t- \"There is a break point where you should use arrays. You shouldn't always use arrays or Sets. Use arrays until you reach a certain size, and then switch to Sets.\" //docs\n\t- \"If you don't know the difference between slice and splice, it's not that hard.\" //docs\n\t- \"I know people don't like for loops, but I'm forloopin' here!\"\n\t- lsof //voc##thelsof\n\t- \"**total time** doesn't matter as much as **self time**\"//voc\n\t\t- Self-time is the time taken by a method for all the lines of code within it and excluding the time taken by any other methods which were called inside it. Total time is the time taken by a method for all the lines of code within it and including the time taken by any other methods called inside it.\n- garbage collecting\n\t- see: V8's Blog on garbage collector\n\t- two types\n\t\t- major\n\t\t\t- goes through all the steps\n\t\t\t- crawls through the objects\n\t\t- minors\n\t\t\t- checks for new objects\n\t\t\t- scavenge\n\t\t\t- \"most objects die young\"\n\t\t\t\t- immediately become##majorminor\n\t- in JS-DOM, variables are attached to window\n\t- \"b has been unmarked, added to the free list, and it can be cleaned up\"\n\t- \"Some of the best speed optimization changes I have made are less garbage collection on the server.\" //quote\n\t- \"Hopefully when you create an object from now on, you realize that you might be having a negative impact on the speed of your application.\" //quote\n\t- \"we can throw a **tracegc** at it\" //voc\n\t- devtools **memory**##thememorytab\n\t- we are creating 1200 promises per second\n\t\t- our goal is to go down to 60\n\t- \"JavaScript is not multi-threaded, it never was meant to be multi-threaded.\" //quote\n\t- Node has tools to help analyze it, e.g. Datadog\n\t\t- Nodes promises and async hooks are not that \n\t\t- no promise comes without a cost\n\t\t- bun doesn't have these \n\t\t- \"That delicious callback recursion, everybody loves callback hell.\" //quote\n\t- \"I love creating classes just to trigger JavaScript people.\" //quote\n\t- \"I don't know if promises can be generators or yields.\" //voc\n\t- moved promises to callbacks\n- websockets\n\t- slow\n\t- we will use a native socket from bun\n\t- compares the memory and performance graphs\n\t- he's replacing websockets with uNetworking\n\t\t- websockets\n\t\t- uNetworking is fully C++, uses JavaScript only to hand out frames\n\t\t- less JavaScript means more speed\n\t- uNetworking is complex##unetworksing\n\t- somebody adds lambda, someone adds lodash\n\t- everything you do should be done really well\n\t- always measure in production\n\t- bun is fast because it does as little with JavaScript as possible\n- project-specific solution\n\t- in the game, if there are two bullets, then you don't need to check if they will hit person, since they will eventually hit each other\n\t- only check the front bullets\n- keep making small changes\n\t- do we need to keep creating objects over and over again\n\t- do heap snapshots\n\t- everytime you do two curly braces, something has to go get memory, it's not free\n\t\t- use a memory pool\n\t\t- you have to know when an object is not being used anymore\n\t\t- decide which are us the most important##memorypoolskd\n\t- ring buffers\n\t\t- two pointers chasing each other\n\t- rely on as much C++ in JavaScript, e.g. push and pop \n\t\t- faster\n\t\t- will cause less garbage collection to happy\n\t\t- don't write your own leftPad, use padLeft\n\t- is adding to the ends of array and shifting out the front going to cause problems\n\t\t- probably\n\t- conditional logging\n\t- last points:##thesumup\n- questions\n\t- node async vs. bun async\n\t\t- node's async is slow, they are trying to fix it\n\t\t- but bun\n\t\t\t- not feature complete\n\t\t\t- not legacy friendly\n\t- JSC (JavaScriptCore)\n\t\t- JavaScriptCore (JSC) is the JavaScript engine used by Safari, Mail, App Store and many other apps in MacOs.\n\t\t- [differences between JSC and V8](https://bytes.dev/archives/109)\n\t- the creator of React wrote ReasonML\n\t\t- OCamlers are writing ReasonML\n\t\t- if you're a functional person, you have Elixir, you have OCaml\n\t- biggest optimization changes\n\t\t- get off of promises\n\t\t\t- not always possible\n\t\t- try to defer as much of the networking to C as opposed to JavaScript","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-14 16:29:40","systemWhoCreated":"systemUnknown"},{"id":771,"category":"styling","title":"Learn the basics of dynamic inline styling and styled-components in React","body":"- **the purpose of this howto**\n\t- in this howto we will learn example of using\n\t\t- (1) **dynamic inline styling** within a React site\n\t\t- (2) **styled-components** within a React site\n- **what we will build**\n\t- we will create a React site with the React Router BrowserRouter \n\t- there will be two pages, one for each of the methods of styling\n- **GitHub repository:**\n\t- https://github.com/edwardtanguay/et669-inline-styles-styled-components\n- **site is online here:**\n\t- https://et669-inline-styles-styled-components.vercel.app\n- **site looks like this:**#gif#demositeforstyljd \n- **most important concepts, skills and tools**\n\t- **concepts**\n\t\t- **with dynamic inline styles, what do you have to remember about style names with hyphens**\n\t\t\t- write them camel case, e.g. **font-weight** becomes `<p style={{ fontWeight: isOnline ? \"bold\" : \"normal\" }}>`\n\t\t- **with dynamic inline styles, what do you have to remember about the curly brackets**\n\t\t\t- use **two** paris of them\n\t\t- **how can styled-component styles have a backtick at the end of their name, what is that syntax**\n\t\t\t- those are **tagged template literals** introduced in 2015 with ES6\n\t\t\t- [The magic behind styled-components](https://mxstbr.blog/2016/11/styled-components-magic-explained)\n\t- **skills**\n\t\t- **how do you style an element with a dynamic inline style**\n\t\t\t- first create a state variable\n\t\t\t- then create a class attribute in an element which contains an object of style properties, e.g. `className={{color: currentColor}}`\n\t\t\t- now when you change the state variable **currentColor** the style will dynamically change\n\t\t- **how can you add numerous dynamic styles at once**\n\t\t\t- put them in an object\n\t\t\t- then use the name of the object in the style attribute##morestylsons\n\t- **tools**\n\t\t- inline styles \n\t\t- styled-components\n\t\t- useState\n\t\t- ternary operator\n\t\t- BrowserRouter\n- **>>> 1. set up base React Router site**\n\t- I have two React Router starter sites, one for the old **BrowserRouter**, and one for the new **createBrowserRouter**\n\t\t- in this workshop, we will use the old **BrowserRouter** for practice\n\t\t- this router is still widely used and so should be a web developer skill\n\t- go to: https://github.com/edwardtanguay/vite-react-menu-browserrouter\n\t- use template to create new repostory on your GitHub, e.g. `et669-inline-styles-styled-components` (use your own name so you can publish it one-to-one at Vercel)\n\t- clone it locally\n\t- `npm i`\n\t- `npm run dev`\n\t- site should look like this:##thesitemenuup22\n- **>>> 2. create pages for each style**\n\t- change PageWelcome.tsx to **PageInlineStyles.tsx**\n\t\t-----------------------------------------------\n\t\texport const PageInlineStyles = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the inline styles page.</p>\n\t\t\t)\n\t\t}\n\t\t-----------------------------------------------\n\t- change PageInfo.tsx to **PageStyledComponents.tsx**\n\t\t-----------------------------------------------\n\t\texport const PageStyledComponents = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the styled-components page.</p>\n\t\t\t)\n\t\t}\n\t\t-----------------------------------------------\n\t- **Nav.tsx**\n\t\t------------------------------\n\t\t<li><NavLink to=\"/inline-styles\">Inline Styles</NavLink></li>\n\t\t<li><NavLink to=\"/styled-components\">styled-components</NavLink></li>\n\t\t------------------------------\n\t- **App.tsx**\n\t\t-------------------------------------------------\n\t\t<Route path=\"/inline-styles\" element={<PageInlineStyles />} />\n\t\t<Route path=\"/styled-components\" element={<PageStyledComponents />} />\n\t\t<Route path=\"/about\" element={<PageAbout />} />\n\t\t<Route index element={<Navigate to=\"/inline-styles\" replace />}/>\t\n\t\t-------------------------------------------------\n\t- site now looks like this:#gif#thestylstemmenu\n- **>>> 3. button that toggles style**\n\t- we will create a button that toggles two styles\n\t- **InlineOnlineToggle.tsx**\n\t\t---------------------------------------------\n\t\timport { useState } from \"react\";\n\n\t\texport const InlineOnlineToggle = () => {\n\t\t\tconst [isOnline, setIsOnline] = useState(false);\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2 className=\"text-2xl mb-2\">Toggle Button</h2>\n\t\t\t\t\t{isOnline}\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"bg-slate-500 px-3 pt-1 pb-2 rounded hover:opacity-90\"\n\t\t\t\t\t\tonClick={() => setIsOnline(!isOnline)}\n\t\t\t\t\t>\n\t\t\t\t\t\tToggle\n\t\t\t\t\t</button>\n\t\t\t\t\t<p style={{ color: isOnline ? \"darkgreen\" : \"darkred\" }}>\n\t\t\t\t\t\tUser is now {isOnline ? \"online\" : \"offline\"}.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p style={{ fontWeight: isOnline ? \"bold\" : \"normal\" }}>\n\t\t\t\t\t\tHans Schmidt\n\t\t\t\t\t</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t---------------------------------------------\n\t- **PageInlineStyles.tsx**\n\t\t-------------------------------------\n\t\t<InlineOnlineToggle/>\n\t\t-------------------------------------\n\t- the button works like this:#gif#thetogglejsbut\n- **>>> 4. make a wrapper container and wrap the first component**\n\t- since we will be making many examples, let's create a wrapper component to style them more consistently\n\t- **components/Wrapper.tsx**\n\t\t---------------------------------------------------------------------------\n\t\tinterface IProps {\n\t\t\tchildren: React.ReactNode;\n\t\t\ttitle: string;\n\t\t}\n\t\texport const Wrapper = ({ children, title }: IProps) => {\n\t\t\treturn (\n\t\t\t\t<fieldset className=\"border border-slate-500 w-[40rem] p-4 rounded shadow-lg mb-4\">\n\t\t\t\t\t<legend className=\"font-semibold\">{title}</legend>\n\t\t\t\t\t{children}\n\t\t\t\t</fieldset>\n\t\t\t);\n\t\t};\n\t\t---------------------------------------------------------------------------\n\t- **PageInlineStyles.tsx**\n\t\t-------------------------------------------------------\n\t\t<Wrapper title=\"Toggle Button\">\n\t\t\t<InlineOnlineToggle />\n\t\t</Wrapper>\t\t\n\t\t-------------------------------------------------------\n\t- component now looks like this:##nowwiththewrapper\n- **>>> 5. slider that controls size of box**\n\t- **InlineResizeBox.tsx**\n\t\t-------------------------------------------\n\t\timport { useState } from \"react\";\n\n\t\texport const InlineResizeBox = () => {\n\t\t\tconst [sliderValue, setSliderValue] = useState(50);\n\n\t\t\tconst handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tsetSliderValue(Number(event.target.value));\n\t\t\t};\n\n\t\t\tconst boxStyle = {\n\t\t\t\tbackgroundColor: \"blue\",\n\t\t\t\twidth: `${sliderValue}%`,\n\t\t\t\theight: \"100px\",\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t\tmax=\"100\"\n\t\t\t\t\t\t\tvalue={sliderValue}\n\t\t\t\t\t\t\tonChange={handleSliderChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div style={boxStyle}></div>\n\t\t\t\t\t\t<p>Size: {sliderValue}%</p>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t-------------------------------------------\n\t- the slider works like this:#gif#thesecojsdemo\n- **>>> 6. CHALLENGE: Font Resizer**\n\t- display a paragraph of text\n\t- create two buttons, one with a **-** and one with a **+**\n\t- when user clicks the buttons, increase the size of the font\n- **>>> 7. set up styled-components**\n\t- `npm i styled-components`\n\t- **PageStyledComponents.tsx**\n\t\t-----------------------------------------\n\t\timport { StyledOnlineToggle } from \"../components/StyledOnlineToggle\";\n\t\timport { Wrapper } from \"../components/Wrapper\";\n\n\t\texport const PageStyledComponents = () => {\n\t\t\treturn (\n\t\t\t\t<Wrapper title=\"Toggle Button\">\n\t\t\t\t\t<StyledOnlineToggle />\n\t\t\t\t</Wrapper>\n\t\t\t);\n\t\t};\t\t\n\t\t-----------------------------------------\n\t- **StyledOnlineToggle.tsx**\n\t\t--------------------------------------------------\n\t\timport { useState } from \"react\";\n\t\timport styled from \"styled-components\";\n\n\t\tinterface StyledTextProps {\n\t\t\tisOnline: boolean;\n\t\t}\n\n\t\texport const StyledOnlineToggle = () => {\n\t\t\tconst [isOnline, setIsOnline] = useState(false);\n\n\t\t\tconst ToggleOnlineButton = styled.button`\n\t\t\t\tbackground-color: #64748b;\n\t\t\t\tpadding-right: 0.7rem;\n\t\t\t\tpadding-left: 0.7rem;\n\t\t\t\tpadding-top: 0.3rem;\n\t\t\t\tpadding-bottom: 0.5rem;\n\t\t\t\tborder-radius: 0.2rem;\n\t\t\t\tcursor: pointer;\n\t\t\t`;\n\n\t\t\tconst OnlineText = styled.p<StyledTextProps>`\n\t\t\t\tcolor: ${(props) => (props.isOnline ? \"darkgreen\" : \"darkred\")};\n\t\t\t`;\n\n\t\t\tconst UserText = styled.p<StyledTextProps>`\n\t\t\t\tfont-weight: ${(props) => (props.isOnline ? \"bold\" : \"normal\")};\n\t\t\t`;\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<ToggleOnlineButton onClick={() => setIsOnline(!isOnline)}>\n\t\t\t\t\t\tToggle\n\t\t\t\t\t</ToggleOnlineButton>\n\t\t\t\t\t<OnlineText isOnline={isOnline}>\n\t\t\t\t\t\tUser is now {isOnline ? \"online\" : \"offline\"}.\n\t\t\t\t\t</OnlineText>\n\t\t\t\t\t<UserText isOnline={isOnline}>Hans Schmidt</UserText>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t--------------------------------------------------","points":20,"extras":"","systemWhenCreated":"2023-11-14 22:05:37","systemWhoCreated":"systemUnknown"},{"id":772,"category":"htmx","title":"Notes from Live HTMX/Go Workshop 2023-11-15 with ThePrimeagen","body":"- intro\n\t- [HTMX books](https://hypermedia.systems/book/contents)\n\t- notes: https://frontendmasters.github.io/fem-htmx\n\t- repo: https://github.com/ThePrimeagen/fem-htmx-proj\n\t- engine of application state\n\t- 30 years history\n\t- memes come from one slightly-unhinged man in Montana\n\t- \"It's easier to reason about than an SPA.\" //quote\n- why do I like HTMX\n\t- 2009 movie, pumped up to make a website\n\t- the fetching problems of SPA\n\t- the glories of the n+1 query problem\n\t- it fit this weird place\n\t\t- I need something to reason about easilier\n\t- HTMX is extremely googleable\n\t\t- easy to learn how to use\n\t\t- help built the LSP\n- Go\n\t- I really wanted to use Rust or OCaml\n\t- go mod tidy\n\t- \"In today's world templates are not sexy, everybody wants that jsx that tsx.\" //quote\n\t- [templ](https://templ.guide)\n\t- \"Typically when I do a course, I don't try to make people follow along, I just go as fast as I can.\" //quote\n\t- `go mod tidy`\n\t- if you've never used templates or [echo](https://echo.labstack.com/docs/templates)\n\t- send back 200##sendback200\n\t- started Air##startedair\n\t- \"[Air](https://mainawycliffe.dev/blog/live-reloading-golang-using-air) is effectively nodemon, the webpack [devserver](https://webpack.js.org/configuration/dev-server), it's the Vite of Go.\" //quote\n\t- problem with Go: if you don't make a map, you get an error\n- HTMX\n\t- todo: try HTMX with CDN##thehtamxjs\n\t- your server is the truth, your client is the reflection of the truth\n\t- does that mean HTML is a programming language? Yes.\n\t- HTMX comes from [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS)\n\t- how it works:##innjsthml\n\t- you can add JavaScript if you need more interaction\n\t- htmx basics:##thesjisjs\n\t- your server produces a view, which is HTML\n\t- \"Isn't sending HTML to the client slow? / No, it's probably faster than crawling JSON for the data you want and creating the HTML on the client.\" //quote\n\t- \"Your gut feel is usually always wrong when it comes to performance. Always test, always measure.\" //quote\n\t- \"I have a problem with JSX-styling, I tend to overcomplicate it with logic.\" //quote\n\t- stack: tercel bun elisian\n\t- \"When it comes to performance, your gut feel is usually always wrong . Always test, always measure.\" //quote\n\t- if it receives the entire document, it will only select the body content\n\t- found the problem:##theproblmskdjf\n\t- target: ##htmxtarget\n\t- the template##thetemplsdifj\n\t- returns the button now##therespondk\n\t- targets the div##thecountcount\n\t- HTMX tends to be a declarative driver of your application\n\t- [turso](https://turso.tech) - The fastest, easiest, cheapest database in the world \n\t- \"If you're transferring less then 1500 bytes, it doesn't matter. The maximum transmission unit (MTU) is 1500 bytes. Everything from 0 to 1499 is the same amount of data transfer.\" //quote\n\t- ranges in Go templates##rangesingo\n\t- Go templating language: https://developer.hashicorp.com/nomad/tutorials/templates/go-template-syntax\n\t- \"Even if you don't know Go, you could probably google/gopilot your way into getting this done.\" //quote\n\t- \"You look distraught. Are you good?\" //quote\n\t- \"The form made the request, so the form got replaced.\"\n\t- you can specify how you swap out the content##youcandhow\n\t- out-of-bound updates: go update somewhere else as well\n\t- forms by the way are awful, they just turn into endless fields\n\t- **there is no error handling**\n\t\t- beforeSwap##befoerwsqp\n\t- swap yourself out at the top of the list##swapoutsdj\n\t- htmx.logAll()##htmxallsdf\n\t- in Go, interface{} is like any in TypeScript##interfaceany\n\t- this will only deleting the icon##needstidfs\n\t- handling delete##handlisjddele\n\t- added interactivity, but \"it's shockingly declaritive\"\n\t- or you can swap it##orswapjd\n\t- \"Does it make sense to mix HTMX and React? / Yes, I've seen it done, we call it is an React cocktail.\" //quote\n\t- great workshop##greaworksj","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-15 16:25:56","systemWhoCreated":"systemUnknown"},{"id":773,"category":"React Query","title":"Notes on Kyle's Learn React Query In 50 Minutes video","body":"- VIDEO: [Learn React Query In 50 Minutes](https://www.youtube.com/watch?v=r8Dg0KVnfMA) - Kyle, Web Dev Simplified\n- intro\n\t- recorded Jan 2023\n\t- \"you're never going to want to go back to the old way of doing fetch requests\"\n\t- handle caching and prefetching\n\t- says he will cover all these topics:##saywilcov\n\t- wondering if React Router 6.4 and React Query conflict, reading: [React Query meets React Router](https://tkdodo.eu/blog/react-query-meets-react-router)\n\t\t- they are a match made in heaven\n\t\t- React Router is not a cache\n\t\t- questions\n\t\t\t- Would we still want React Query now that we can fetch in the route? / yes\n\t\t\t- If we already use React Query, do we want to leverage the new React Router features? / yes##notachahd\n\t\t\t- set your loaders in main.tsx##themainsd\n\t\t\t- create a loader in the component##creatlaodkjsi\t\t\t\n- coding along\n\t- repo: https://github.com/edwardtanguay/et197-vite-react-router-react-query\n\t\t- set up loader in React Router 6.4\n\t- install react query\n\t\t- `npm i @tanstack/react-query`\n\t\t- `npm i #tanstack/react-query-devtools`\n\t- set up react query\n\t\t- code works so far, see repo\n\t- you can do a query and a mutation\n\t- TOPIC: wait\n\t\t- queryFn: () => wait(3000).then(() => appModel.getEmployees())\n\t- TOPIC: fade in on load\n\t\t------------------------------------------\n\t\t<div className={employeesQuery.data ? 'fadein' :''}>\n\n\t\tdiv.fadein {\n\t\t\tanimation: fadein 1s;\n\t\t}\n\n\t\t@keyframes fadein {\n\t\t\t0% {\n\t\t\t\topacity: 0;\n\t\t\t\ttransform: scale(.99);\n\t\t\t\tcolor: red;\n\t\t\t}\n\n\t\t\t50% {\n\t\t\t\tcolor: darkred;\n\t\t\t}\n\n\t\t\t100% {\n\t\t\t\topacity: 1;\n\t\t\t\ttransform: scale(1);\n\t\t\t\tcolor: black;\n\t\t\t}\n\t\t}\t\t\n\t\t------------------------------------------\n\t- TOPIC: error handling\n\t\t-----------------------------------------\n\t\t} catch (e) {\n\t\t\treject('Unknown error.');\n\t\t}\t\t\n\n\t\tand with navigate\n\n\t\tif (employeesQuery.isLoading) {\n\t\t\treturn <p>{employeesQuery.failureCount > 0 ? 'Retrying' + '...'.repeat(employeesQuery.failureCount * 3) : 'Loading...'}</p>;\n\t\t}\n\t\t-----------------------------------------\n\t- TOPIC: ReactQueryDevTools\n\t\t------------------------------------------\n\t\timport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\n\t\t<ReactQueryDevtools/>\n\t\t------------------------------------------\n\t- question: what is the relationship between React Query and state variables\n\t\t- https://javascript.plainenglish.io/react-query-you-may-not-need-state-management-%EF%B8%8F-15de0837a569\n\t\t\t- not very useful\n\t\t- ARTICLE: Managing state with React Query.\n\t\t\t- https://dev.to/franklin030601/managing-state-with-react-query-1842\n\t\t\t- TypeScript and createBrowserRouter\n\t\t\t- uses React Query Version 4, I have 5\n\t\t\t- did you know that you can use this library as a state manager, possibly an alternative to redux-toolkit, zustand, among others \n\t\t\t- queryClient\n\t\t\t\t- **App.tsx**\n\t\t\t\t\t------------------------------------------\n\t\t\t\t\tconst queryClient = new QueryClient({\n\t\t\t\t\t  defaultOptions: {\n\t\t\t\t\t\tqueries: {\n\t\t\t\t\t\t  refetchOnWindowFocus: false,\n\t\t\t\t\t\t  refetchOnMount: false,\n\t\t\t\t\t\t  retry: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t  },\n\t\t\t\t\t});\n\n\t\t\t\t\t------------------------------------------\n\t- adding json-server backend API\n\t\t- https://raw.githubusercontent.com/edwardtanguay/et882-vite-rest-json-server/dev/backend/data/db.json\n\t\t- HOWTO: https://tanguay-eu.vercel.app/howtos/751\n\t\t- `npm i -D json-server`\n\t\t- `npm i -D npm-run-all`","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-16 00:11:50","systemWhoCreated":"systemUnknown"},{"id":775,"category":"Sass","title":"Notes on Mike Norths's Sass Fundamentals course","body":"- infos\n\t- my repos:\n\t\t- Vite JS-DOM Sass @use/@forward\n\t\t\t- https://github.com/edwardtanguay/et839-frontendmasters-sass\n\t\t- Vite React Sass with @import\n\t\t\t- https://github.com/edwardtanguay/et777-react-sass-with-import\n\t- his repo: \n\t\t- https://github.com/mike-works/sass-fundamentals\n\t- good CSS to SCSS converter\n\t\t- https://jsonformatter.org/scss-to-css\n\t- course is from **May 2017** \n\t\t- yet he uses **float** instead of **flexbox** has been available in most modern browsers by **2013**##theflexisjis\n\t\t- and he uses **var** instead of **const** or **let** which were available in **2016**##constletkj\n- https://frontendmasters.com/courses/sass/introduction\n\t- does workshops at LinkedIn\n\t- teaches Sass, Ember, JavaScript fundamentals\n- https://frontendmasters.com/courses/sass/css-pitfalls\n\t- why do we not just use a think that the browser understands\n\t- in CSS, you're working in a world of globals\n\t- we need to keep things scope\n\t- traditionally CSS doesn't have variables\n\t- when CSS fetches another file it causes the browser to load another file\n\t- end up using negative margins\n- https://frontendmasters.com/courses/sass/preprocesser-benefits\n\t- preprocessor\n\t\t- compile to CSS\n\t\t- variables\n\t\t- composable\n\t- mentions [Stylus](https://stylus-lang.com)\n\t- Bootstrap 3 used Less\n\t\t- Bootstrap 4 used Sass\n\t- you can break your code up with Sass\n\t- you can get libraries of mixins\n- https://frontendmasters.com/courses/sass/course-agenda\n\t- the two variants\n\t- variables and mixins\n\t- control flow\n\t\t- ifs, for-loops, imperitive code\n\t\t- use cases and non use cases\n\t- CSS architecture\n\t\t- staying organized\n\t\t- BEM\n\t- defining functions\n\t- you can use Sass mixin libraries\n\t\t- https://github.com/Famolus/awesome-sass\n\t\t- https://gerillass.com\n- https://frontendmasters.com/courses/sass/syntax-nesting-selectors\n\t- Sass invented by Hampton Catlin\n\t\t- also invented HAML\n\t- HAML is at the root of Sass\n\t- the Sass syntax is old, when we say Sass, we mean Sass with the **.scss** extension##thedesassjd\n\t- uses float##usesfloatssf\n\t- in CSS, nesting is the > character##arrowsidf\n\t- this is a modifier //???##theismodifier\n\t- this is an underutilized use of the parent selector //???##underutil\n\t- Sass (scss syntax) is a superset of CSS\n- https://frontendmasters.com/courses/sass/challenge-1-parental-selectors\n\t- does `killall -9 node`\n- https://frontendmasters.com/courses/sass/challenge-1-solution\n\t- notice the difference##thediffjsodand\n\t- note how to do disabled with a pseudo selector##notdisaks\n\t- you can see how the parent selector works here:#gif //howto#theparentselector\n- https://frontendmasters.com/courses/sass/challenge-2-parental-selectors-2\n\t- describes challenge\n- https://frontendmasters.com/courses/sass/challenge-2-solution\n\t- shows how to test CSS##youcantestcss\n\t- another example##computdst\n\t- \"Sometimes a style gets boiled down to something other than what we specify in our stylesheet, for instance we may be getting a RGB color even though we specified a HEX color, but I have no control over how it eventually gets resolved, so getComputedStyle is a great way of computing what ultimately the style of the element is.\" //quote##thecompustyle\n\t- he explains that you wouldn't want to test like this, he did this only for the workshop\n\t- for actual testing of CSS, he recommends [Percy](https://percy.io)\n\t\t- integrate with GitHub\n\t\t- works with CircleCI\n\t\t- works with a headless version of Firefox\n\t\t- it's not free\n\t- \"The rule that you can't test CSS is false, and image based testing is the way you go about it.\" //quote\n\t\t- newspapers do this\n\t\t- testing CSS is a new idea\n\t- layout\n\t\t- recalculate the size of things\n\t\t- very expensive\n\t- painting is relatively cheap\n\t- compositing is the lowest layer\n\t- you can define other styles under a parent selector //howto##youcanunderthestylse\n- https://frontendmasters.com/courses/sass/sass-import-and-variables\n\t- partials are designed to be imported into other files and will not become CSS files themselves##histructure\n\t- but this doesn't matter anymore when you use e.g. Vite since it transpiles everything into on CSS even if you use imports##doesmatter\n\t- but import is not limited to partials\n\t\t- you can also import from other libraries##canalsofromother\n\t- **variables**\n\t\t- begin with dollar sign\n\t\t- default variable, \"will be used if $error_color has not been defined elsewhere\"\n\t\t\t- the ! is like !important, it does not mean \"not\"##defaulvars\n\t\t- \"Local variables are an underutilized feature of Sass because we don't have to namespace everything globally, we can just use short names since they are only pertinent in the context of the declaration block in which they are defined, so you can avoid all those long BEM names with multiple underlines.\" //quote //howto##underlusuli\n\t\t- you can use arithmetic with variables\n\t- variable types of Sass##typesofsasas\n\t- Sass variables##sassvarssss\n- https://frontendmasters.com/courses/sass/challenge-3-imports-and-variables\n\t- shows challenge\n- https://frontendmasters.com/courses/sass/challenge-3-solution\n\t- you can actually do an @import from inside a style block\n\t\t- e.g. you could import _variables inside container\n\t\t- another under-utilized feature of Sass\n\t- \"My Sass in terms of imports looks as follows: I'll have one file that is entirely comprised of imports, and that will usually be the only non-partial Sass file that I'll have. It'll be the only file that doesn't start with an underscore, and I'll usually call that app.scss. This means I don't have to import my variables into every single file. This also means that each of my files are not free-standing, but partials are not meant to be free-standing, so this is an important way to do it in my mind.\" //quote //howto\n\t- [BEM vs. SMACSS: Comparing CSS methodologies](https://blog.logrocket.com/bem-vs-smacss-comparing-css-methodologies)\n\t\t- BEM = Block, Element, Modifier\n\t\t- SMACSS = Scalable and Modular Architecture\n\t\t- it's merely a personal preference\n\t- saturate() is a CSS function:##thesaturcss\n\t- darken() is a Sass function:##thedarkdsjis\n- https://frontendmasters.com/courses/sass/sass-mixins-and-arguments\n\t- mixins \n\t\t- are the primary way of reusing styles in Sass\n\t\t- best practice: separate from styles, like variables\n\t\t- they don't do anything by themselves, they have to be used\n\t\t- usually you want to bring in variables first and then mixins after that\n\t\t- how mixins work:##howmixisjwork\n\t\t- if you have a mixin that takes in now parameters, there is a better way to do that\n- https://frontendmasters.com/courses/sass/challenge-4-mixins\n\t- rainbox buttons\n- https://frontendmasters.com/courses/sass/challenge-4-solution\n\t- removes properties and put them in mixin\n- https://frontendmasters.com/courses/sass/default-argument-values\n\t- you can assign a default color:##thedddddef\n\t- null will just ignore the property##nullwithsjius\n\t- you can also pass in content##passincontent\n- https://frontendmasters.com/courses/sass/challenge-5-mixins-2\n\t- not the least numer of lines but the smallest maintainable code\n- https://frontendmasters.com/courses/sass/challenge-5-solutions\n\t- if you find code duplication, you probably want a mixin##iffindfsj\n\t- you can wrap for various browsers with @content##youcanwrap\n\t- \"Code that repeats twice would not necessarily meet my threshold for factoring it out into a variable or function. Extracting too early in code is going to lead to unnecessarily complexity.\" //quote\n\t- autoprefixers wouldn't help us here\n- https://frontendmasters.com/courses/sass/introducing-sass-functions\n\t- we'll cover the ones I expect you to use\n\t\t- these are high performance since the Sass compiler is written in C\n\t\t- **rgb($red, $blue, $green)** and **rgba($red, $blue, $green, $alpha)**\n\t\t\t- can already do in CSS, although officially one uses spaces (although commas work as well)\n\t\t\t\t------------------------------------\n\t\t\t\tcolor: rgb(100 200 233);\n\t\t\t\tcolor: rgb(100, 200, 233);\n\t\t\t\tcolor: rgb(100, 200, 233, 20%);\n\t\t\t\tcolor: rgba(100 200 233);\n\t\t\t\tcolor: rgba(100, 200, 233);\n\t\t\t\tcolor: rgba(100, 200, 233, 20%);\n\t\t\t\t------------------------------------\n\t\t- see [Sass functions here](https://tutorialreference.com/sass/script/functions/sass-color-functions)\n\t\t\t- **red($color)**\n\t\t\t- **red($color)**\n\t\t\t- **red($color)**\n\t\t\t- **mix()**##thebrowjsidy\n\t\t\t- **adjust-hue**\n\t\t\t\t- you can think of it as rotating around the color wheel, always clockwise##adjusthue\n\t\t\t- **darken** and **lighten**##thecolofunct\n\t\t\t- **desaturate** and **saturate**\n\t\t\t\t- full saturation is very vivid colors\n\t\t\t\t- no saturation is a gray scale##satursdj\n- https://frontendmasters.com/courses/sass/challenge-6-color-functions\n\t- you define the angle as part of your theme##createmisxisj\n\t- \"I don't like to go for too long without something showing up on the screen so I can know that I'm on the right track and get some visual feedback.\"\n\t- you define theme mixin like this:##themeslike\n- https://frontendmasters.com/courses/sass/challenge-6-solutions\n\t- creates themes of buttons##createsvarias\n\t- using the color wheel is a way to pick colors that tend to go together\n\t\t- e.g. a company gives you their primary color and you generate a theme based on it\n- https://frontendmasters.com/courses/sass/if-sass-directive\n\t- use @if to change styles when you reach a threshold:##theifsis\n\t- [@if documentation](https://sass-lang.com/documentation/at-rules/control/if)\n- https://frontendmasters.com/courses/sass/challenge-7-control-flow\n\t- when the color on a button is too light, we want to change the text from white to black##fiblackwhi\n- https://frontendmasters.com/courses/sass/challenge-7-solution\n\t- you don't want to use brightness but lightness\n\t- this is basically how you solve the above challenge##basishowto\n- https://frontendmasters.com/courses/sass/data-structures\n\t- you can use for loops in Sass##thefortodoss\n\t- also lists##alsolists\n\t- also **nth**, starts with 1 not 0##plucksjdf\n\t- also **maps**\n\t\t- good for themes##tehmapsksjdf\n- TODO: 8 skipped videos (nudging classes, BEM)\n- https://frontendmasters.com/courses/sass/writing-sass-functions\n\t- good example of a potentionally useful custom function##goodemaplsfunc","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-18 00:00:13","systemWhoCreated":"systemUnknown"},{"id":776,"category":"Sass","title":"Learn the basics of using Sass in a React site with both @import and @use/@forward syntax","body":"- **the purpose of this howto**\n\t- in this howto we will learn how to set up a React site and use **Sass** as the main styling solution\n\t- we will cover both major syntax variations\n\t\t- (1) **@import** - marked for deprecation but still widely used\n\t\t- (2) **@use/@forward** - the officially recommended way to use Sass\n- **what we will build**\n\t- we will create two React sites using **npm create vite** and then set up the popular [7-1 Sass folder structure pattern](https://sass-guidelin.es/#architecture) in each of them:\n\t\t- the first site will use the older, soon-to-be-deprecated, but stil-widely-in-use **@import** syntax\n\t\t- the **second** site will use the newer and officially recommended **@use/@forward** syntax\n- **GitHub repositories:**\n\t- https://github.com/edwardtanguay/et900-sass-with-import\n\t- https://github.com/edwardtanguay/et900-sass-with-use-forward\n- **finished site looks like this:**##thefinishdssitesass\n- **===== MOST IMPORTANT CONCEPTS, SKILLS AND TOOLS =====**\n\t- **concepts**\n\t\t- **like many topics in web development, in what way is Sass a moving target?**\n\t\t\t- in most tutorials, classes and instruction videos you find, the older and soon-to-be-deprecated **@import** syntax is used\n\t\t\t- however, **@use/@forward** syntax has many advantages and will officially replace the older @import syntax\n\t\t\t- therefore, it is important to **know both** but **start new projects with @use/@forward**\n\t\t- **what is the 7-1 Sass folder structure pattern**\n\t\t\t- the official way to structure Sass files\n\t\t\t- the name come from **one** main.scss file and **seven** directories that contain various kinds of styling files##ohtheseven\n\t\t- **in what way could one say that Sass offers a \"full spectrum of use\"**\n\t\t\t- (1) Sass is often used as a **quick-and-easy solution** to improve on CSS\n\t\t\t\t- since Sass is easy to install (in Vite JS-DOM or Vite React sites, **npm i sass** and rename files to **.scss**) \n\t\t\t\t\t- it has a low bar to entry\n\t\t\t\t\t- it is often used as a quick solution to have\n\t\t\t\t\t\t- **variables** ($color) \n\t\t\t\t\t\t- **nested styles** (makes CSS much easier to read and manage)\n\t\t\t- (2) however, Sass is also used as a **professional solution** to create **custom, complex design systems** which includes\n\t\t\t\t- **modularity and organization**\n\t\t\t\t\t- splitting projects up into dozens of styling files\n\t\t\t\t\t- using @import or @use/@forward to manage how these files are included in the project\n\t\t\t\t- **code reuse** - @mixins and @functions to reuse code and dynamically create styles\n\t\t\t\t- **inheritance** - @extends to inherit styles\n\t\t\t\t- **built-in functions** - to build you rown themes and color and design palletes\n\t\t\t\t- **lists and maps** - to organized data in a programmatic way\n\t\t\t\t- **conditionals** - @if, @for, @each, @while to programmatically create styles\n\t\t- **when are Sass files prefixed by underscores**\n\t\t\t- when using @import syntax, files are prefixed with underscores in order to indicate that they are partials\n\t\t\t- this is not used with the @use/@forward syntax\n\t\t\t- note that even if you have a file name **_typography.scss**\n\t\t\t\t- you import it like this: `@import 'base/typography';`\n\t\t- **what advantages does the newer @use/@forward syntax have over the older @import syntax**\n\t\t\t- scoped variables\n\t\t\t- namespace management\n\t\t\t- improved performance\n\t\t\t- grouped importing with forwarding styles and index.scss\n\t- **skills**\n\t\t- **how to create numerous similar styles**\n\t\t\t- first define a list of e.g. colors\n\t\t\t- use @each to iterate through the colors and create a style based on each othem\n\t\t- **how to reduce code repetition**\n\t\t\t- use a @mixin which accepts parameters that return customized style chunks to use in other styles\n\t- **tools and commands**\n\t\t- Extension: SCSS Everywhere\n\t\t- 7-1 pattern\n\t\t- @mixin\n\t\t- @use\n\t\t- @use n\n\t\t- @use *\n\t\t- @forward\n\t\t- @mixin\n\t\t- @include\n\t\t- @content\n\t\t- index.scss\n\t\t- @function\n\t\t- @extend\n\t\t- @if, @for, @each, @while\n\t\t- Sass pseudo marker: &\n\t\t- mix()\n- **===== CREATE A REACT SITE WITH SASS THAT USES @IMPORT SYNTAX =====**\n- **>>> 1. Create minimizied Vite React site with Sass installed**\n\t- `npm create vite@latest et900-sass-with-import` (of course name your project differently, e.g. nn626--sass-with-import)\n\t- React / TypeScript\n\t- `code et900-sass-with-import`\n\t- `npm i`\n\t- `npm run dev`\n\t- minimize\n\t\t- delete **assets**\n\t\t- delete **App.css**\n\t\t- delete **index.css**\n\t\t- reduce **main.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport ReactDOM from 'react-dom/client'\n\t\t\timport App from './App.tsx'\n\n\t\t\tReactDOM.createRoot(document.getElementById('root')!).render(\n\t\t\t\t<App />\n\t\t\t)\t\t\t\n\t\t\t----------------------------------------------\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t    <title>Sass with @import</title>\n\t\t\t-------------------------------\n\t\t- minimize **App.tsx**\n\t\t\t----------------------------------\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t<h1>Sass with @import</h1>\n\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t\texport default App\t\t\t\n\t\t\t----------------------------------\n\t\t- site looks like this:##reactreductsdij\n\t- set up minimal Sass\n\t\t- `npm i sass`\n\t\t- **src/sass/main.scss**\n\t\t\t--------------------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #bbb;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 0 1rem;\n\n\t\t\t\th1 {\n\t\t\t\t\tcolor: darkslateblue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- **App.tsx**\n\t\t\t----------------------------------\n\t\t\timport './sass/main.scss';\n\t\t\t----------------------------------\n\t\t- site now looks like this:##withsassinjidjsk\n- **>>> 2. Set up Sass directory structure**\n\t- in VSCode, install [SCSS Everywhere](https://marketplace.visualstudio.com/items?itemName=gencer.html-slim-scss-css-class-completion)\n\t- we will structure our files according to the popular **7-1 pattern**##ohtheseven\n\t- **add reset**\n\t\t- **base/_reset.scss**\n\t\t\t----------------------------------\n\t\t\thtml, body, div, span, applet, object, iframe,\n\t\t\th1, h2, h3, h4, h5, h6, p, blockquote, pre,\n\t\t\ta, abbr, acronym, address, big, cite, code,\n\t\t\tdel, dfn, em, img, ins, kbd, q, s, samp,\n\t\t\tsmall, strike, strong, sub, sup, tt, var,\n\t\t\tb, u, i, center,\n\t\t\tdl, dt, dd, ol, ul, li,\n\t\t\tfieldset, form, label, legend,\n\t\t\ttable, caption, tbody, tfoot, thead, tr, th, td,\n\t\t\tarticle, aside, canvas, details, embed, \n\t\t\tfigure, figcaption, footer, header, hgroup, \n\t\t\tmenu, nav, output, ruby, section, summary,\n\t\t\ttime, mark, audio, video {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t\tborder: 0;\n\t\t\t\tfont-size: 100%;\n\t\t\t\tfont: inherit;\n\t\t\t\tvertical-align: baseline;\n\t\t\t}\n\t\t\t/* HTML5 display-role reset for older browsers */\n\t\t\tarticle, aside, details, figcaption, figure, \n\t\t\tfooter, header, hgroup, menu, nav, section {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t\tbody {\n\t\t\t\tline-height: 1;\n\t\t\t}\n\t\t\tol, ul {\n\t\t\t\tlist-style: none;\n\t\t\t}\n\t\t\tblockquote, q {\n\t\t\t\tquotes: none;\n\t\t\t}\n\t\t\tblockquote:before, blockquote:after,\n\t\t\tq:before, q:after {\n\t\t\t\tcontent: '';\n\t\t\t\tcontent: none;\n\t\t\t}\n\t\t\ttable {\n\t\t\t\tborder-collapse: collapse;\n\t\t\t\tborder-spacing: 0;\n\t\t\t}\t\t\n\t\t\t----------------------------------\n\t\t- delete contents of **main.scss** and replace with:\n\t\t\t-----------------------------------\n\t\t\t@import 'base/reset';\n\t\t\t-----------------------------------\n\t\t- site looks like this:##seehtireset\n\t- **add base styling of site**\n\t\t- **base/_typography.scss**\n\t\t\t--------------------------------------------\n\t\t\t@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200&display=swap');\n\n\t\t\tbody {\n\t\t\t\tbackground-color: #ccc;\n\t\t\t\tpadding: 2rem;\n\t\t\t\tfont-family: 'Poppins', sans-serif;\n\t\t\t}\n\n\t\t\th1 {\n\t\t\t\tfont-size: 2rem;\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t}\n\n\t\t\t.spacing {\n\t\t\t\tmargin-top: 1rem;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **main.scss**\n\t\t\t----------------------------------------\n\t\t\t@import 'base/typography';\n\t\t\t----------------------------------------\n\t\t- site looks like this:##nicestylskdfj\n- **>>> 3. @mixins, @content**\n\t- we want to now make **various styles** for messages that are displayed\n\t\t- but do it in a way that **repeats as little code as possible**\n\t\t- for this we will use a **mixin**\n\t- **App.tsx**\n\t\t--------------------------------------\n\t\t<p className=\"error-text spacing\">This is an error.</p>\n\t\t<p className=\"info-text spacing\">This is an info.</p>\n\t\t<p className=\"normal-text spacing\">This is a normal text.</p>\n\t\t<p className=\"faded-text spacing\">This is a faded text.</p>\t\t\n\t\t--------------------------------------\n\t- **abstracts/_mixins.scss**\n\t\t----------------------------------------\n\t\t@mixin alert-text($color: #555, $border: 2px solid #333) {\n\t\t\tbackground-color: $color;\n\t\t\tcolor: white;\n\t\t\tfont-variant: small-caps;\n\t\t\tpadding:.5rem;\n\t\t\twidth: fit-content;\n\t\t\tborder: $border;\n\t\t\t@content;\n\t\t}\t\t\n\t\t----------------------------------------\n\t- **components/_messages.scss**\n\t\t-----------------------------------------------\n\t\t.error-text {\n\t\t\t@include alert-text(darkred);\n\t\t}\n\n\t\t.info-text {\n\t\t\t@include alert-text(darkgreen, null);\n\t\t}\n\n\t\t.normal-text {\n\t\t\t@include alert-text();\n\t\t}\n\n\t\t.faded-text {\n\t\t\t@include alert-text() {\n\t\t\t\topacity: .5;\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **main.scss**\n\t\t------------------------------------------\n\t\t@import 'abstracts/mixins';\n\t\t@import 'components/messages';\t\t\n\t\t------------------------------------------\n\t- site now looks like this:##thesitewithmessmix\n- **>>> 4. conditionals, pseudo marker and functions**\n\t- we now want to create the ability to make **various size circles** with various features\n\t\t- but again do this in a way that **repeats as little code as possible**\n\t\t- for this we will use **mixins, @if, and the pseudo marker &, and the Sass function mix()***\n\t- **App.tsx**\n\t\t------------------------------------------\n\t\t<p className=\"ball-001 spacing\"></p>\n\t\t<p className=\"ball-002 shadow spacing\"></p>\n\t\t<p className=\"ball-003 spacing\"></p>\n\t\t<p className=\"ball-004 spacing\"></p>\t\t\n\t\t------------------------------------------\n\t- **_mixins.scss**\n\t\t--------------------------------------\n\t\t@mixin ball($bgcolor, $size) {\n\t\t\tbackground-color: $bgcolor;\n\t\t\twidth: $size;\n\t\t\theight: $size;\n\t\t\tborder-radius: 50%;\n\t\t\t@if $size >= 0rem {\n\t\t\t\tborder: 0px;\n\t\t\t}\n\t\t\t@if $size >= 2rem {\n\t\t\t\tborder: 2px solid black;\n\t\t\t}\n\t\t\t@if $size >= 4rem {\n\t\t\t\tborder: 4px solid black;\n\t\t\t}\n\t\t}\t\t\n\t\t--------------------------------------\n\t- **components/_shapes.scss**\n\t\t---------------------------------------\n\t\t.ball-001 {\n\t\t\t@include ball(navy, 3rem);\n\t\t}\n\n\t\t.ball-002 {\n\t\t\t@include ball(red, 4rem);\n\n\t\t\t&.shadow {\n\t\t\t\tbox-shadow: 8px 8px 8px #555;\n\t\t\t}\n\t\t}\n\n\t\t.ball-003 {\n\t\t\t@include ball(mix(red, yellow), 3rem);\n\t\t}\n\n\t\t.ball-004 {\n\t\t\t@include ball(mix(green, orange), 1rem);\n\t\t}\t\t\n\t\t---------------------------------------\n\t- **main.scss**\n\t\t--------------------------------------\n\t\t@import './components/shapes';\t\t\n\t\t--------------------------------------\n\t- site now looks like this:##thesitewithbasllls\n- **>>> 5. lists, @for and more functions**\n\t- we now want to **dynamically create multiple styles** to display colored boxes\n\t\t- and again do this in a way that **repeats as little code as possible**\n\t\t- for this we will use **lists, @for, and the functions length() and nth()***\n\t- **App.tsx**\n\t\t--------------------------------------\n\t\t<p className=\"box-1 spacing\"></p>\n\t\t<p className=\"box-2 spacing\"></p>\n\t\t<p className=\"box-3 spacing\"></p>\n\t\t<p className=\"box-4 spacing\"></p>\t\t\n\t\t--------------------------------------\n\t- **_shapes.scss**\n\t\t-------------------------------------\n\t\t$colors: red, blue, green, orange;\n\n\t\t@for $i from 1 through length($colors) {\n\t\t\t.box-#{$i} {\n\t\t\t\tbackground-color: nth($colors, $i);\n\t\t\t\twidth: 3rem;\n\t\t\t\theight: 3rem;\n\t\t\t\tborder: 1px solid black;\n\t\t\t}\n\t\t}\t\t\n\t\t-------------------------------------\n\t- site will look like this:##sietnowiwithboxes\n- **>>> 6. @each**\n\t- a simpler variation of @for is **@each**\n\t\t- use this to iterate through a list when you don't need to use the number\n\t- **App.tsx**\n\t\t----------------------------------------------\n\t\t<p className=\"rectangle-red spacing\"></p>\n\t\t<p className=\"rectangle-blue spacing\"></p>\n\t\t<p className=\"rectangle-green spacing\"></p>\n\t\t<p className=\"rectangle-orange spacing\"></p>\t\t\n\t\t----------------------------------------------\n\t- **_shapes.scss**\n\t\t--------------------------------------\n\t\t@each $color in $colors {\n\t\t\t.rectangle-#{$color} {\n\t\t\t\tbackground-color: $color;\n\t\t\t\twidth: 8rem;\n\t\t\t\theight: 3rem;\n\t\t\t\tborder: 1px solid black;\n\t\t\t}\n\t\t}\n\t\t--------------------------------------\n\t- rectangles appear as well:##therectsjjs\n- **>>> 7. More Sass features**\n\t- **darken()** and **lighten()**##thecolofunct\n\t- **desaturate()** and **saturate()**##satursdj\n\t- **adjust-hue()**##adjusthue\n\t- **maps**##tehmapsksjdf\n\t- **custom functions**##goodemaplsfunc\n\t- **[placeholders](https://sass-lang.com/documentation/style-rules/placeholder-selectors)\n- **===== CONVERT SITE WITH @IMPORT SYNTAX TO @USE/@FORWARD=====**\n- **>>> 8. make a copy of the above @import-syntax site in order to convert it to @use/@forward**\n\t- the above project used the **@import** command\n\t\t- although still widely used, this command will soon be deprecated\n\t\t- therefore for new projects we want to use the newer **@use and @forward** commands\n\t- make a new directory with a new name for the @use/@forward version\n\t\t- e.g. I called mine **et900-sass-with-use-forward**\n\t- go to the directory of the above project and copy all files and directories **except .git and node_modules**##copyallsjub\n\t\t- paste them in the new directory you just created\n\t- enter that directory with VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- `git init -b dev`\n\t\t- view site\n- **>>> 9. Convert main.scss from @import to @use**\n\t- change titles\n\t\t- **index.html**\n\t\t\t-------------------------------------------\n\t\t    <title>Sass with @use/@forward</title>\n\t\t\t-------------------------------------------\n\t\t- **App.tsx**\n\t\t\t----------------------------------------\n\t\t\t<h1>Sass with @use/@forward</h1>\t\t\t\n\t\t\t----------------------------------------\n\t- convert @import to @use\n\t\t- remove the prefix underscore from all files\n\t\t- **main.scss**\n\t\t\t- bulk replace **@import** with **@use**\n\t\t\t- move **@use 'abstracts/mixins'** to where it is used, in **messages.scss** and **shapes.scss**\n\t\t\t\t- prefix all mixins with \"mixins.\" e.g. **mixins.alert-text**##themisxisnow\n\t\t- your site should work again;##thesietwokrwokwosag\n\t- add variables\n\t\t- move from **shapes.scss** to **base/variables.scss**\n\t\t\t-----------------------------------------------\n\t\t\t$colors: red, blue, green, orange;\n\t\t\t-----------------------------------------------\n\t\t- **shapes.scss**\n\t\t\t--------------------------------------\n\t\t\t@use '../base/variables';\n\t\t\t--------------------------------------\n\t\t- just as with mixins, add the **variables.** prefix to all instances of **colors**##thevarrskjss\n\t\t\t- your site should work again\n\t\t- note, however, for variables, this is not the optimal solution since \"variables\" is so long, so give variables an alias\n\t\t- **shapes.scss**\n\t\t\t--------------------------------------\n\t\t\t@use '../base/variables' as v;\n\t\t\t--------------------------------------\n\t\t- and add the **v.** prefix to all instances of **colors**##onlythevvvv\n\t\t- but for variables, we can shorten it even further:\n\t\t- **shapes.scss**\n\t\t\t--------------------------------------\n\t\t\t@use '../base/variables' as *;\n\t\t\t--------------------------------------\n\t\t- remove the prefix from variables altogether##altothnoewvars\n\t\t- now in the same way, you can use variables from any file\n\t\t\t- **variables.scss**\n\t\t\t\t-------------------------------------------\n\t\t\t\t$errorColor: crimson;\n\t\t\t\t$infoColor: olive;\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t\t- **messages.scss**\n\t\t\t\t--------------------------------------\n\t\t\t\t@use '../base/variables' as *;\n\n\t\t\t\t.error-text {\n\t\t\t\t\t@include mixins.alert-text($errorColor);\n\t\t\t\t}\n\n\t\t\t\t.info-text {\n\t\t\t\t\t@include mixins.alert-text($infoColor, null);\n\t\t\t\t}\n\t\t\t\t--------------------------------------\n\t\t\t- the variable colors are now being used:##nowusevarcols\n\t- use **index.scss** and **@forward** to make it easier to organize styles into separate files\n\t\t- we will now reorganize mixins so that each has its own file\n\t\t\t- yet when we add new mixin files, we don't have to reimport each individual file\n\t\t\t- we do with with a combination of **index.scss** and **@forward**\n\t\t- reorganize the mixins into these files:##reordanindex\n\t\t- **index.scss**\n\t\t\t------------------------------------\n\t\t\t@forward 'shape-mixins';\n\t\t\t@forward 'text-mixins';\t\t\t\n\t\t\t------------------------------------\n\t\t- **shape-mixins.scss**\n\t\t\t-----------------------------------\n\t\t\t@mixin ball($bgcolor, $size) {\n\t\t\t\tbackground-color: $bgcolor;\n\t\t\t\twidth: $size;\n\t\t\t\theight: $size;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\t@if $size >= 0rem {\n\t\t\t\t\tborder: 0px;\n\t\t\t\t}\n\t\t\t\t@if $size >= 2rem {\n\t\t\t\t\tborder: 2px solid black;\n\t\t\t\t}\n\t\t\t\t@if $size >= 4rem {\n\t\t\t\t\tborder: 4px solid black;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------\n\t\t- **text-mixins.scss**\n\t\t\t--------------------------------------\n\t\t\t@mixin alert-text($color: #555, $border: 2px solid #333) {\n\t\t\t\tbackground-color: $color;\n\t\t\t\tcolor: white;\n\t\t\t\tfont-variant: small-caps;\n\t\t\t\tpadding:.5rem;\n\t\t\t\twidth: fit-content;\n\t\t\t\tborder: $border;\n\t\t\t\t@content;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t\t- your site will now look the same\n\t\t- but now when you add new mixin files, you only need to forward them in the **index.scss** file\n\t\t\t- and you won't have to reference the specific file elsewhere\n\t\t\t- **mixins** is now a namespace that contains all mixins that it forwards","points":20,"extras":"","systemWhenCreated":"2023-11-20 01:09:57","systemWhoCreated":"systemUnknown"},{"id":777,"category":"React Router","title":"Create travel website which uses the BrowserRouter variant of React Router v6","body":"- **the purpose of this howto**\n\t- we will learn how to use the **BrowserRouter** variant of React Router v6 to accomplish various features, e.g. an item-detail page and a multi-menu page\n\t- note we will be using the still popular yet older **BrowserRouter** variant of React Router v6\n\t\t- it is different than the newer **createBrowserRouter** variant of React Router v6\n- **what we will build**\n\t- we will create a realistic travel website with pages each that show a different feature of the browser:\n\t- **Welcome page**\n\t\t- has deep links to the other pages\n\t- **Team page**\n\t\t- lists out the employees of the company\n\t\t- this is an *overview/detail* page\n\t\t\t- `/team` shows all\n\t\t\t- `/team/5` shows employee with id 5\n\t- **Destination page**\n\t\t- shows nested menus of destinations\n\t\t- starts with a menu of countries\n\t\t- when you click on a country, you get a menu of cities\n\t\t- when you click on a city, you get a menu of areas of the city, etc.\n\t- **Trip Planner page**\n\t\t- shows a vertical menu in which you answer questions\n\t\t- you keep moving down to more detailed questions\n\t- here is a rough visual plan of the site:##tehplanfortravel\n- **code is here**\n\t- https://github.com/edwardtanguay/et118-browserrouter-travel-site\n- **live site is here**\n\t- https://et118-browserrouter-travel-site.vercel.app\n- **site works like this**#gif#themobilesiterouter\n- **===== MOST IMPORTANT CONCEPTS, SKILLS AND TOOLS =====**\n\t- **concepts**\n\t\t- **what is the difference between BrowserRouter and createBrowserRouter**\n\t\t\t- they are both variants of React Router v6\n\t\t\t- **BrowserRouter** is older but very widely used\n\t\t\t- **createBrowserRouter** is the newer version\n\t\t\t\t- supports data loading\n\t\t\t\t- used as the basis of the **Remix framework**\n\t\t\t\t\t- React Router is developed by the Remix team\n\t\t\t\t- has forward-looking features more compatible with server-side rendering\t\t\t\t\n\t- **skills**\n\t\t- **what are the three main steps of setting up a BrowserRouter?**\n\t\t\t- (1) **main.tsx** - wrap the app in BrowserRouter\n\t\t\t- (2) **AppRouter.tsx** - set up the routes\n\t\t\t- (3) **Nav.tsx** - set up the navigation\n\t\t- **how to define one of the pages as the landing page if use comes to the base URL**\n\t\t\t- `<Route index element={<Navigate to=\"/welcome\" replace />}/>`\n\t\t\t- this means that if the user comes to the base URL (\"index\"), they will be redirected (\"Navigate\") to the welcome page, and this step will not be added in the browser history (\"replace\")\n\t\t- **what do you have to use to make sure the Nav links have \"active\" classes in them when they are selected**\n\t\t\t- use **NavLink** instead of Link\n\t\t- **what do you have to remember to put on your route url for a page that has a submenu**\n\t\t\t- a star, e.g. `<Route path=\"germany/*\" element={<AreaGermany />} />`\n\t- **tools and commands**\n\t\t- npm i react-router-dom\n\t\t- BrowserRouter\n\t\t- Routes\n\t\t- Route\n\t\t- NavLink\n\t\t- Outlet\n- **===== STEP-BY-STEP INSTRUCTIONS =====**\n- **>>> 1. Create minimizied Vite React site with Tailwind**\n\t- `npm create vite@latest et118-browserrouter-travel-site` (of course name your project differently, e.g. nn626-browserrouter-travel-site)\n\t- React / TypeScript\n\t- `code et118-browserrouter-travel-site`\n\t- `npm i`\n\t- `npm run dev`\n\t- minimize\n\t\t- delete **assets**\n\t\t- delete **App.css**\n\t\t- clear content of **index.css**\n\t\t- reduce **main.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport ReactDOM from 'react-dom/client'\n\t\t\timport App from './App.tsx'\n\n\t\t\tReactDOM.createRoot(document.getElementById('root')!).render(\n\t\t\t\t<App />\n\t\t\t)\t\t\t\n\t\t\t----------------------------------------------\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t    <title>Travel Agency</title>\n\t\t\t-------------------------------\n\t\t- minimize **App.tsx**\n\t\t\t----------------------------------\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t<h1>Travel Agency</h1>\n\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t\texport default App\t\t\t\n\t\t\t----------------------------------\n\t\t- site looks like this:##thetravagesite\n\t- add prettier config file\n\t\t- **.prettierrc**\n\t\t\t--------------------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\t\t\n\t\t\t--------------------------------------------\n\t- install Tailwind\n\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init -p`\n\t\t- **tailwind.config.js**\n\t\t\t---------------------------------------------\n\t\t\t/** @type {import('tailwindcss').Config} */\n\t\t\texport default {\n\t\t\t  content: [\n\t\t\t\t\"./index.html\",\n\t\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t\t  ],\n\t\t\t  theme: {\n\t\t\t\textend: {},\n\t\t\t  },\n\t\t\t  plugins: [],\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t\t- **index.css**\n\t\t\t-----------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\n\t\t\t-----------------------------------------\n\t\t- restart site\n\t\t\t- `npm run dev`\n\t- basic styling\n\t\t- **index.html**\n\t\t\t----------------------------------\n\t\t\t<body class=\"bg-blue-200 p-4\">\n\t\t\t----------------------------------\n\t\t- **App.tsx**\n\t\t\t-------------------------------------\n\t\t\t<h1 className=\"text-2xl mb-4\">Travel Agency</h1>\t\t\t\n\t\t\t-------------------------------------\n\t- site looks like this:##theblueagency\n\t- set up git directory and push to repository\n\t\t- `git init -b dev`\n- **>>> 2. Install React Router and create menu**\n\t- install React Router\n\t\t- `npm i react-router-dom`\n\t- **main.tsx**\n\t\t--------------------------------------\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\t\t\n\t\t--------------------------------------\n\t- first create all pages \n\t\t- **pages/PageWelcome.tsx**\n\t\t\t------------------------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the welcome page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t\t- **pages/PageTeam.tsx**\n\t\t\t------------------------------------------\n\t\t\texport const PageTeam = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the team page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t\t- **pages/PageDestinations.tsx**\n\t\t\t------------------------------------------\n\t\t\texport const PageDestinations = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the destinations page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t\t- **pages/PagePlanner.tsx**\n\t\t\t------------------------------------------\n\t\t\texport const PagePlanner = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the planner page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t- **AppRouter.tsx**\n\t\t--------------------------------------\n\t\timport { PageDestinations } from \"./pages/PageDestinations\"\n\t\timport { PagePlanner } from \"./pages/PagePlanner\"\n\t\timport { PageTeam } from \"./pages/PageTeam\"\n\t\timport { PageWelcome } from \"./pages/PageWelcome\"\n\n\t\texport const AppRouter = () => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<PageWelcome/>\n\t\t\t\t\t<PageTeam/>\n\t\t\t\t\t<PageDestinations/>\n\t\t\t\t\t<PagePlanner/>\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **App.tsx**\n\t\t--------------------------------------\n\t\t<h1 className=\"text-2xl mb-4\">Travel Agency</h1>\n\t\t<AppRouter/>\t\t\n\t\t--------------------------------------\n\t- site shows all pages at once:##allatondjspages\n\t- implement React Router pages\n\t\t- **AppRouter.tsx**\n\t\t\t----------------------------------------------\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/welcome\" element={<PageWelcome />}/>\n\t\t\t\t<Route path=\"/team\" element={<PageTeam />}/>\n\t\t\t\t<Route path=\"/destinations\" element={<PageDestinations />}/>\n\t\t\t\t<Route path=\"/planner\" element={<PagePlanner />}/>\n\t\t\t</Routes>\t\t\t\n\t\t\t----------------------------------------------\n\t- you can now go to the routes and the appropriate page will appear#gif#themanypages\n\t- implement navigation menu\n\t\t- **Nav.tsx**\n\t\t\t-------------------------------------------------\n\t\t\timport { NavLink } from \"react-router-dom\"\n\n\t\t\texport const Nav = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<ul className=\"flex gap-3 bg-blue-300 mb-3 py-2 px-4 rounded\">\n\t\t\t\t\t\t<ul><NavLink to=\"welcome\">Welcome</NavLink></ul>\n\t\t\t\t\t\t<ul><NavLink to=\"team\">Team</NavLink></ul>\n\t\t\t\t\t\t<ul><NavLink to=\"destinations\">Destinations</NavLink></ul>\n\t\t\t\t\t\t<ul><NavLink to=\"planner\">Planner</NavLink></ul>\n\t\t\t\t\t</ul>\n\t\t\t\t)\n\t\t\t}\n\t\t\t-------------------------------------------------\n\t\t- **App.tsx**\n\t\t\t-------------------------------------------\n\t\t\t<h1 className=\"text-2xl mb-4\">Travel Agency</h1>\n\t\t\t<Nav/>\n\t\t\t<AppRouter/>\t\t\n\t\t\t-------------------------------------------\n\t\t- *index.scss**\n\t\t\t-------------------------------------\n\t\t\ta.active {\n\t\t\t\t$shadowColor:rgb(36, 36, 233);\n\t\t\t\tcolor: rgb(247, 255, 3);\n\t\t\t\tfont-weight: bold;\n\t\t\t\ttext-shadow: -2px 2px 2px $shadowColor, -2px -2px 2px $shadowColor, 2px 2px 2px $shadowColor, 2px -2px 2px $shadowColor;\n\t\t\t}\n\t\t\t-------------------------------------\n\t- menu now works:#gif#themenworkwokplages2\n- **>>> 3. Add internal links to Welcome page**\n\t- **PageWelcome.tsx**\n\t\t---------------------------------------\n\t\t<p className=\"p-1 leading-8\">\n\t\t\tWelcome to our travel agency! Get to know our <NavLink to=\"/team\">team</NavLink>, find your next travel <NavLink to=\"/destinations\">destination</NavLink> and <NavLink to=\"/planner\">plan</NavLink> your trip!\n\t\t</p>\t\t\n\t\t---------------------------------------\n\t- **index.scss**\n\t\t--------------------------------------\n\t\t@layer base {\n\t\t\ta {\n\t\t\t\t@apply underline;\n\t\t\t}\n\t\t}\n\n\t\tnav a {\n\t\t\ttext-decoration: none;\n\t\t}\n\t\t--------------------------------------\n\t- links work like this:#gif#nowtrytwithwlinke\n- **>>> 4. Create team page**\n\t- download [employee JSON file](https://edwardtanguay.vercel.app/share/employees.json) into **src/data/employees.json**\n\t- download [employee image ZIP file](http://edwardtanguay.vercel.app/share/images/employees/employees.zip) and put images in folder **public/images/employees**\n\t- display them on the team page\n\t\t- **PageTeam.tsx**\n\t\t\t---------------------------------------------\n\t\t\timport employees from \"../data/employees.json\";\n\n\t\t\texport const PageTeam = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>We have {employees.length} team members to serve you:</p>\n\t\t\t\t\t\t{employees.map((emp) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"flex gap-3 mt-4\">\n\t\t\t\t\t\t\t\t\t<img className=\"w-24 h-24 rounded\"\n\t\t\t\t\t\t\t\t\t\tsrc={`images/employees/employee_${emp.employeeID}.jpg`}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<p className=\"font-semibold\">{emp.firstName} {emp.lastName}</p>\n\t\t\t\t\t\t\t\t\t<p className=\"text-xs\">{emp.notes}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t---------------------------------------------\n\t- team is being displayed##theteamsssson\n\t- refactor code into Employee component\n\t\t- **src/interfaces.ts**\n\t\t\t------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\temployeeID: number;\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\tnotes: string;\n\t\t\t}\t\t\t\n\t\t\t------------------------------------\n\t\t- **components/Employee.tsx**\n\t\t\t----------------------------------------\n\t\t\timport { IEmployee } from \"../interfaces\";\n\n\t\t\tinterface IProps {\n\t\t\t\temployee: IEmployee;\n\t\t\t}\n\n\t\t\texport const Employee = ({ employee }: IProps) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"flex gap-3 mt-4\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"w-24 h-24 rounded\"\n\t\t\t\t\t\t\tsrc={`images/employees/employee_${employee.employeeID}.jpg`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p className=\"font-semibold\">\n\t\t\t\t\t\t\t\t{employee.firstName} {employee.lastName}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p className=\"text-xs\">{employee.notes}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\n\t\t\t----------------------------------------\n\t\t- **PageTeam.tsx**\n\t\t\t----------------------------------------\n\t\t\t{employees.map((employee) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Employee employee={employee}/>\n\t\t\t\t);\n\t\t\t})}\t\t\t\n\t\t\t----------------------------------------\n\t- team page should look the same##theteamsssson\n\t- enable team page to display specific employee with URL id\n\t\t- **PageTeam.tsx**\n\t\t\t--------------------------------------\n\t\t\timport { Employee } from \"../components/Employee\";\n\t\t\timport employees from \"../data/employees.json\";\n\t\t\timport { useParams } from \"react-router-dom\";\n\t\t\timport { IEmployee } from \"../interfaces\";\n\n\t\t\texport const PageTeam = () => {\n\t\t\t\tconst { id } = useParams();\n\t\t\t\tlet employee: IEmployee = {} as IEmployee;\n\t\t\t\tif (id) {\n\t\t\t\t\tconst tempEmployee = employees.find(m => m.employeeID === Number(id));\n\t\t\t\t\tif (tempEmployee) {\n\t\t\t\t\t\temployee = tempEmployee;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{!id ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>We have {employees.length} team members to serve you:</p>\n\t\t\t\t\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\t\t\t\t\treturn <Employee employee={employee} />;\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Employee employee={employee} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------\n\t\t- team page still works\n\t\t- individual page works but displays a broken image, because of the added path in the URL:##thebrokensok\n\t\t- fix the broken image issue\n\t\t\t- **PageTeam.tsx** - when calling Employee component for a single person, specify this in an attribute\n\t\t\t\t---------------------------------\n\t\t\t\t<Employee employee={employee} single={true} />\n\t\t\t\t---------------------------------\n\t\t\t- **Employee.tsx**\n\t\t\t\t-----------------------------------------------------\n\t\t\t\timport { IEmployee } from \"../interfaces\";\n\n\t\t\t\tinterface IProps {\n\t\t\t\t\temployee: IEmployee;\n\t\t\t\t\tsingle?: boolean;\n\t\t\t\t}\n\n\t\t\t\texport const Employee = ({ employee, single = false }: IProps) => {\n\t\t\t\t\tlet imagePath = `images/employees/employee_${employee.employeeID}.jpg`;\n\t\t\t\t\tif (single) {\n\t\t\t\t\t\timagePath = \"../\" + imagePath;\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div className=\"flex gap-3 mt-4\">\n\t\t\t\t\t\t\t<img className=\"w-24 h-24 rounded\" src={imagePath} />\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"font-semibold\">\n\t\t\t\t\t\t\t\t\t{employee.firstName} {employee.lastName}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"text-xs\">{employee.notes}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t-----------------------------------------------------\n\t\t- add links to individual team members on welcome page\n\t\t\t- **PageWelcome.tsx**\n\t\t\t\t-------------------------------------------\n\t\t\t\t<p className=\"p-1 leading-8 mt-2\">\n\tFor trips to Asia, please speak to our Asian expert <NavLink to=\"/team/1\">Nancy</NavLink>. For information about trips to Australia and New Zealand, contact <NavLink to=\"/team/7\">Robert</NavLink>.</p>\t\t\t\t\n\t\t\t\t-------------------------------------------\n\t\t- team page now works like this:#gif#withteamandslinks\n- **>>> 5. Publish to Vercel and check the site**\n\t- go to: https://vercel.com\n\t\t- Add New\n\t\t- Project\n\t\t- Import\n\t\t- Deploy\n\t- the site will work\n\t- but if you reload one of the pages, it shows a 404:##teh4040\n\t- to fix this, add this file to your root directory\n\t\t- vercel.json\n\t\t\t-------------------------------------------\n\t\t\t{\n\t\t\t\t\"rewrites\": [{ \"source\": \"/(.*)\", \"destination\": \"/\" }]\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t- test site again, it should work\n\t\t- ##nowroksjisjs\n- **>>> 6. Create destinations page**\n\t- create all files for every area that will be listed on the destinations page\n\t\t- copy or download them from the [project repository](https://github.com/edwardtanguay/et118-browserrouter-travel-site/tree/dev/src/areas)##theareasisj\n\t- **PageDestination.tsx**\n\t\t-----------------------------------------------------------\n\t\timport { NavLink, Routes, Route } from \"react-router-dom\";\n\t\timport { AreaFrance } from \"../areas/AreaFrance\";\n\t\timport { AreaGermany } from \"../areas/AreaGermany\";\n\t\timport { AreaSpain } from \"../areas/AreaSpain\";\n\n\t\texport const PageDestinations = () => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"submenu flex gap-3 mb-4\">\n\t\t\t\t\t\t<NavLink to=\"germany\">Germany</NavLink>\n\t\t\t\t\t\t<NavLink to=\"france\">France</NavLink>\n\t\t\t\t\t\t<NavLink to=\"spain\">Spain</NavLink>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Routes>\n\t\t\t\t\t\t<Route path=\"germany/*\" element={<AreaGermany />} />\n\t\t\t\t\t\t<Route path=\"france\" element={<AreaFrance />} />\n\t\t\t\t\t\t<Route path=\"spain\" element={<AreaSpain />} />\n\t\t\t\t\t</Routes>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t-----------------------------------------------------------\n\t- **PageWelcome.tsx**\n\t\t-----------------------------------------\n\t\t<p className=\"p-1 leading-8 mt-2\">\n\t\t\tWe currently have specials on events in <NavLink to=\"/destinations/germany/berlin\">Berlin</NavLink> including at the <NavLink to=\"/destinations/germany/berlin/mitte/brandenburgGate\">Brandenburg Gate</NavLink> and at <NavLink to=\"/destinations/germany/berlin/mitte/checkpointCharlie\">Checkpoint Charlie</NavLink>.\n\t\t</p>\n\t\t-----------------------------------------\t\n\t- fix the no-active-class-on-submenus bug##inorderupsonthepack\n\t- the destination page should work like this:#gif#destinlikethisji\n- **CHALLENGE: Add interconnecting deep links throughout the site**\n\t- e.g. from the welcome page to other pages\n\t- from individual team members to areas they specialize in on the destinations page\n\t\t- how would you solve the problem of creating links from the text inside the JSON file, e.g. in the \"notes\" field?\n- **CHALLENGE: Add 404 pages to every menu**\n\t- include a link back to the main page\n- **CHALLENGE: Add images to each of the destinations on the destination page**\n\t- you will probably have to deal with the variable path issue\n- **CHALLENGE: Implement the Planner page**\n\t- this page should be a vertical menu of questions that lead to each other##theplannermenu","points":20,"extras":"","systemWhenCreated":"2023-11-21 02:23:35","systemWhoCreated":"systemUnknown"},{"id":778,"category":"Remix","title":"Notes on Kent Dodds's Advanced Remix course","body":"- infos\n\t- course is from September 2022\n\t- Kent is the Diretor of Developer Experience at Remix\n\t- uses TypeScript throughout the course\n\t- the GitHub repo:\n\t\t- https://github.com/FrontendMasters/remix-fundamentals\n\t\t\t- 9 vulnerabilities (4 moderate, 3 high, 2 critical)##starteprism\n\t- my Indie stack site, added a page:\n\t\t- https://github.com/edwardtanguay/et800-remix-indie2\n- https://frontendmasters.com/courses/remix/introduction\n\t- created by Ryan Florance and Michael Jackson of React Router fame\n\t- \"Remix is basically an evolution of React Router and very soon it will just be a Router, a Remix Router. And because it's built on top of React Router, people who know React Router can move over to Remix very easily.\" //quote\n- https://frontendmasters.com/courses/remix/remix-overview\n\t- Remix is based on web standards\n\t- \"Remix is a remix of the fundamentals of the early web with the user experience of the modern web. That's why it's called Remix, we're remixing how simple it was to build apps years ago with how complex apps are today in terms of user interaction.\" //quote\n\t- Remix is a server-rendered web framework so there's no static site generation with Remix and that's extremely intentional. The best UX is impossible with SSG, that's it.\n\t- Remix is good at nested routing, it can have file-system routing like Nest.js and Gatsby\n\t\t- but Remix also has layout-nested routing\n\t\t- each file is a route (pronounces it [rowt])\n\t\t- each component says: I am responsible for this, and if I have any children, they go here\n\t\t- if you don't have layout UI routes, routes are responsible for the entire page\n\t\t\t- this is why you have a layout route in Next.js\n\t- with nested routing, you don't have the problem at all\n\t\t- the team that is reponsible for the left header is going to be in charge of route including loading the data for it\n\t\t\t- the child doesn't think anything about the parent, it's totally independent, if it needs to get data, it can\n\t\t\t- if the parent needs to know something about the children, e.g. to render a bread crumb area for them, they can find out about their children, but they don't have to know about their children\n\t\t- in Remix the team isolation is very nice\n\t\t- Remix solves the problem of spinners and bounce-around-jankiness\n\t- Remix is your bundler, your compiler, your data fetching library, and your router\n\t\t- we know all of your data requirements and your code requirements, just by looking at your URL\n\t\t\t- this helps us preload\n\t\t\t- we're using link tags with prefetch\n\t- \"In Remix, we just use forms the way the web was designed from the beginning, so in the same file you have a server-side action which handles the form for you. When you submit the form, you get a full page refresh so the HTML you get back is all up to date, like in the old days. There are ways to fine tune this if you need that optimization, but the point is the HTML on your page after a form submit is always correct.\"##formfrombeg //quote\n\t- the problem with React error boundaries is they don't work on server render\n\t\t- in Remix you can render another component something if an error occurs in the child component\n\t\t\t- so customers call and can say they have 80% of the page, but one component has an error in it##likerrthis\n- https://frontendmasters.com/courses/remix/remix-q-a\n\t- what does the tech stack of Remix look like\n\t\t- we consider Remix to be center stack, we'll take care of what is between the client and the server, which turns out to be the hardest part of a full stack web application\n\t- has stacks: https://remix.run/stacks\n\t\t- named after music genres\n\t\t- in the class he will use the Indie stack\n\t\t- you can make custom stacks\n\t- why is it not possible to achieve good UX with static site generation?\n\t- \"ISR, n. (Incremental Static Regeneration), a hybrid approach that combines the benefits of SSR (Server Side Rendering) and SSG (Static Site Generation). It allows for the partial regeneration of static pages at build time and runtime. During the build process, some pages are pre-rendered as static HTML, while others are marked as stale. When a user requests a stale page, the server regenerates it on-the-fly and caches the result for subsequent requests. ISR strikes a balance between performance and real-time data, making it suitable for dynamic but frequently visited pages.\"  //quote\n\t- \"How does Remix handle state management? / What is state management? No, just kidding, but only sort of, since I'm going to show you that you don't actually think about state management when you're using Remix. No Redux, no Apollo, no MobX, no React Query, no application state management. There are still use cases for useState such as dropdowns and autocomplete, but yeah, you can say goodbye to your application state management libraries, which is a big deal, since you probably spend half of your time on tasks related to state management. You can just take all that and throw it away when you're using Remix. Your state is simply the database.\" //quote\n- https://frontendmasters.com/courses/remix/getting-started-with-remix\n\t- can we install remix with vite?\n\t\t- no it's no in the list\n\t- Remix is on the React installation page as an option: https://react.dev/learn/start-a-new-react-project\n\t\t- `npx create-remix`\n\t\t- quick try of this##firstfisremix\n\t\t- just has three links##simplesiteremix\n\t\t- App() contains the whole HTML head##appcontains\n- https://frontendmasters.com/courses/remix/getting-started-with-remix\n\t- basically we are using the Indie-stack setup: https://github.com/FrontendMasters/remix-fundamentals/tree/main/exercise/01-routing\n\t- if you want to install this yourself\n\t\t- `npx create-remix@latest --template remix-run/indie-stack`\n\t\t\t- is taking 4-5 minutes so far to install\n\t\t- apparently it used to be like this (Sep 2022)##oldawaywuse\n- https://frontendmasters.com/courses/remix/your-first-route-exercise\n\t- mentions first route, quick\n- https://frontendmasters.com/courses/remix/your-first-route-exercise\n\t- he's showing file-based routing\n\t- made simple test, that was basically the exercise##madesimplsdtest\n- https://frontendmasters.com/courses/remix/data-loading-exercise\n\t- describes exercise\n- https://frontendmasters.com/courses/remix/data-loading-solution\n\t- he's talking about the loader##talkbaoustjloader\n\t- at this point I switched back to learning React Router which I understand Remix is based on\n\t\t- if I continue this course at some point, I will work in the same project that Kent is working in\n\t\t- starting from these stacks is a very large application and working in the exact application is probably the best way\n\t\t- CONTINUE","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-22 16:46:17","systemWhoCreated":"systemUnknown"},{"id":779,"category":"React Router","title":"Data-loading with React Router: createBrowserRouter, useEffect data-loading, React Query","body":"- **the purpose of this howto**\n\t- examine the topic of data-loading in React sites including\n\t\t- (1) the new **createBrowserRouter** which enables you to load data for each route\n\t\t- (2) conventional data-loading strategies using useEffect\n\t\t- (3) basic data-loading features of React Query\n\t- discover and discuss advantages and disadvantages of these approaches\n- **what we will build**\n\t- we will build a website with createBrowserRouter\n\t- each page will have a different data-loading strategy\n- **code is here**\n\t- https://github.com/edwardtanguay/et201-createbrowserrouter-site\n- **live site is here**\n\t- https://et201-createbrowserrouter-site.vercel.app\n- **===== MOST IMPORTANT CONCEPTS, SKILLS AND TOOLS =====**\n\t- **concepts**\n\t\t- **what is the difference between BrowserRouter and createBrowserRouter**\n\t\t\t- **BrowserRouter** \n\t\t\t\t- older and much more widely used\n\t\t\t\t- has more documentation, examples, tutorials and videos\n\t\t\t\t- is still a very useful solution to routing in React applications\n\t\t\t- **createBrowserRouter**\n\t\t\t\t- newer and so less widely used\n\t\t\t\t- has forward-looking paradigms particularly regarding data loading and form handling\n\t\t\t\t- documentation, examples and tutorials are sparse\n\t\t\t\t- has its own variations\n\t\t\t\t\t- e.g. most tutorials I found teach createBrowserRouter with [createRoutesFromElements](https://reactrouter.com/en/main/utils/create-routes-from-elements)\n\t\t\t\t- is not simple to learn\n\t\t\t\t\t- I could get data-loading to work, but it is blocking \n\t\t\t\t\t\t- can't get it to load asynchronously\n\t\t\t\t\t\t- I can implement suspense but it's still blocking\n\t\t- **which approach should you choose for new projects**\n\t\t\t- **BrowserRouter** is the **conversative** choice\n\t\t\t\t- use it for mission-critical, public-facing sites\n\t\t\t- **createBrowserRouter** is the **progressive** choice\n\t\t\t\t- start learning it now and use it when you can\n\t\t\t\t\t- the approaches that it uses are part of the server-side direction in which React is moving\n\t\t\t\t\t- it's not low-hanging fruit but rather a collection of new paradigms you learn over time and after multiple tries\n\t\t\t\t\t- learn other frameworks and pay attention to new data-loading approaches they are introducing\n\t\t\t\t\t\t- particularly Remix, which more or less uses createBrowserRouter at its core\n\t\t\t\t- perhaps even switch to it in public-facing sites\n\t\t\t\t\t- since using its data-loading features is optional\n\t\t\t\t\t- outside data-loading and actions, many concepts are similar or the same as with BrowserRouter\n\t\t- **what is the relationship between React Router and Remix**\n\t\t\t- both are made by the same team of developers\n\t\t\t- but there isn't a 1-to-1 correspondance that I could see\n\t\t- **where is a good place to learn more about createRouterBrowser and data-loading routes**\n\t\t\t- this extensive tutorial from the React Router team in which you create a CRUD site\n\t\t\t\t- https://reactrouter.com/en/main/start/tutorial\n\t\t\t- I completed the tutorial converting everything to TypeScript, all code here:\n\t\t\t\t- https://tanguay-eu.vercel.app/forays/276\n\t\t\t- Frontend Masters Remix course\n\t\t\t\t- https://frontendmasters.com/courses/remix\n\t\t\t- note that none of these options are simple\n\t\t\t- the best resource is the documentation: https://reactrouter.com/en/main/start/concepts\t\t\t\t\n\t- **skills**\n\t\t- **how to set up a basic site with createBrowserRouter**\n\t\t\t- (1) npm i react-router-dom\n\t\t\t- (2) make your page components\n\t\t\t- (3) in **main.tsx** set up the browser object with all routes and make main element `<App/>`\n\t\t\t- (4) also in **main.tsx** include `<RouterProvider router={router} />` in createRoot\n\t\t\t- (4) in **App.tsx** include `<Outlet/>` to determine where your pages will display\n\t- **tools and commands**\n\t\t- npm i react-router-dom\n\t\t- createBrowserRouter\n\t\t- RouterProvider\n\t\t- NavLink\n\t\t- Outlet\n- **===== STEP-BY-STEP INSTRUCTIONS =====**\n- **>>> 1. Create minimizied Vite React site with Tailwind**\n\t- `npm create vite@latest et201-createbrowserrouter-site` (of course name your project differently, e.g. nn882-createbrowserrouter-site)\n\t- React / TypeScript\n\t- `code et201-createbrowserrouter-site`\n\t- `npm i`\n\t- `npm run dev`\n\t- minimize\n\t\t- delete **assets**\n\t\t- delete **App.css**\n\t\t- clear content of **index.css**\n\t\t- reduce **main.tsx** - remove StrictMode (causes problems with useEffect)\n\t\t- **index.html**\n\t\t\t-------------------------------\n\t\t    <title>Advanced React Router Site</title>\n\t\t\t-------------------------------\n\t\t- minimize **App.tsx**\n\t\t\t----------------------------------\n\t\t\tfunction App() {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t<h1>Advanced React Router Site</h1>\n\t\t\t\t\t<p>testing</p>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t\texport default App\t\t\t\n\t\t\t----------------------------------\n\t\t- site looks like this:##likeisjtfit\n\t- add prettier config file\n\t\t- **.prettierrc**\n\t\t\t--------------------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\t\t\n\t\t\t--------------------------------------------\n\t- install Tailwind\n\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init -p`\n\t\t- **tailwind.config.js**\n\t\t\t---------------------------------------------\n\t\t\t/** @type {import('tailwindcss').Config} */\n\t\t\texport default {\n\t\t\t  content: [\n\t\t\t\t\"./index.html\",\n\t\t\t\t\"./src/**/*.{js,ts,jsx,tsx}\",\n\t\t\t  ],\n\t\t\t  theme: {\n\t\t\t\textend: {},\n\t\t\t  },\n\t\t\t  plugins: [],\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t\t- **index.css**\n\t\t\t-----------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\n\t\t\t-----------------------------------------\n\t\t- restart site\n\t\t\t- `npm run dev`\n\t- basic styling\n\t\t- **index.html**\n\t\t\t----------------------------------\n\t\t\t<body class=\"bg-red-200 p-4\">\n\t\t\t----------------------------------\n\t\t- **App.tsx**\n\t\t\t-------------------------------------\n\t\t\t<h1 className=\"text-2xl mb-4\">\t\t\n\t\t\t-------------------------------------\n\t- site looks like this:##startsisis\n\t- set up git directory and push to repository\n\t\t- `git init -b dev`\n- **>>> 2. Set up menu with createBrowserRouter**\n\t- `npm i react-router-dom`\n\t- make pages\n\t\t- **pages/PageWelcome.tsx**\n\t\t\t---------------------------------------------\n\t\t\texport const PageWelcome = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the welcome page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t\t- **pages/PageAbout.tsx**\n\t\t\t---------------------------------------------\n\t\t\texport const PageAbout = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the about page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------\n\t- set up routing\n\t\t- **main.tsx**\n\t\t\t----------------------------------------------\n\t\t\tconst router = createBrowserRouter([\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\telement: <App />,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/welcome\",\n\t\t\t\t\t\t\telement: <PageWelcome />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/about\",\n\t\t\t\t\t\t\telement: <PageAbout />,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tReactDOM.createRoot(document.getElementById(\"root\")!).render(\n\t\t\t\t<RouterProvider router={router} />\n\t\t\t);\t\t\t\n\t\t\t----------------------------------------------\n\t- create navigation\n\t\t- **components/Nav.tsx**\n\t\t\t---------------------------------------\n\t\t\texport const Nav = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<ul className=\"flex gap-3 bg-red-200 py-2 px-4 rounded\">\n\t\t\t\t\t\t\t<li><NavLink className={'[&.active]:text-red-800'} to=\"/welcome\">Welcome</NavLink></li>\n\t\t\t\t\t\t\t<li><NavLink className={'[&.active]:text-red-800'} to=\"/about\">About</NavLink></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\t\t\t\t);\n\t\t\t};\n\t\t\t---------------------------------------\n\t\t- **App.tsx**\n\t\t\t--------------------------------------\n\t\t\t<Nav/>\n\t\t\t<main className=\"p-2 mt-2\">\n\t\t\t\t<Outlet/>\n\t\t\t</main>\t\t\t\n\t\t\t--------------------------------------\n\t- site will look like this:#gif#simplesitemenured\n- **>>> 3. Set up default page and 404 page**\n\t- set up default page\n\t\t- **main.tsx**\n\t\t\t---------------------------------------\n\t\t\t{\n\t\t\t\tpath: \"/\",\n\t\t\t\telement: <Navigate to=\"/welcome\" />,\n\t\t\t},\t\t\t\n\t\t\t---------------------------------------\n\t- set up 404 page\n\t\t- **App.tsx**\n\t\t\t-------------------------------------------\n\t\t\terrorElement: <Page404 />,\n\t\t\t-------------------------------------------\n\t\t- **Page404.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { NavLink } from \"react-router-dom\";\n\n\t\t\texport const Page404 = () => {\n\t\t\t\treturn (\n\t\t\t\t<div className=\"px-5 -my-8 opacity-40\">\n\t\t\t\t\t<p className=\"text-[10rem] font-mono text-slate-500\">404</p>\n\t\t\t\t\t<p className=\"-my-8 text-2xl\">\n\t\t\t\t\t\tPlease{\" \"}\n\t\t\t\t\t\t<NavLink to=\"/\" className=\"underline\">\n\t\t\t\t\t\t\treturn to the site\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------\n- **===== ADD DATA-LOADING PAGES =====**\n\t- for the rest of this howto, see this code: https://github.com/edwardtanguay/et719-createbrowserrouter-foray\n- **>>> 4. Create a Todos page which uses a loader to load directly from an array**\n\t- TODO\n- **>>> 5. Create a Nouns page which uses a loader to load data from an API with mock wait**\n\t- TODO\n- **>>> 6. Create an Employees page which uses a loader to load data from an API with no mock wait**\n\t- TODO\n- **>>> 7. Create an Employees2 page which loads data with a mock wait but conventionally with useEffect and a spinner**\n\t- TODO\n- **>>> 8. Create an Employees3 page which loads data with a mock wait but with React Query**\n\t- TODO","points":20,"extras":"","systemWhenCreated":"2023-11-23 07:08:50","systemWhoCreated":"systemUnknown"},{"id":780,"category":"Redux","title":"Notes on Steve Kinneys's Redux Fundamental course","body":"- infos\n\t- URL: https://frontendmasters.com/courses/redux-fundamentals\n\t- course website: https://stevekinney.github.io/redux-fundamentals\n\t- course is from June 2021\n\t- my repo:\n\t\t- https://github.com/edwardtanguay/et773-redux-base\n- https://frontendmasters.com/courses/redux-fundamentals/introduction\n\t- commonly used with React\n\t- but can be used anywhere JavaScript is used\n\t\t- on backend\n\t\t- on frontend\n\t- will build bare Redux first, then look at React Toolkit\n\t\t- takes all the low-level stuff we are doing and bundles it up nicely\n\t\t- it reduces the amount of boilerplate and tedium \n\t\t- will also look how to do API calls\n\t- good news\n\t\t- the API service are for Redux is pretty reasonable, has five methods attached to it##hasfive\n\t\t- four of them are helper utility methods\n\t- first we will just master Redux\n\t- where is useReducer and dispatch? They're not in Redux, that' not in teh Redux library\n\t- \"So why use Redux, doesn't React today come with a useReducer that kind of basically does the same thing? Yes, it is similar, but it also lacks a lot of the bells and whistles that Redux has. Reducer is like a single speed bike which is useful for getting around town, but it's not a mountain bike or a racing bike like Redux is. Redux has things like middleware, bindings for higher order components, features that will take care of memorization, etc. In a large enough applciation, you're either going to use Redux or you'll find yourself putting so many plugins into useReducer that you'll effectively recreate Redux without the same level of support.\" //quote\n\t- \"Redux is very similar to the useReducer part of React, but the Context API is used by both of them to thread access to your store throughout the application. The React-Redux library uses the context API to give all your different components access to your Redux store from anywhere within the application.\" //quote\n\t\t- I have [an example](https://github.com/edwardtanguay/ej8-reducer-context/blob/master/src/components/GermanNounFormRow.jsx) of this with useReducer and useContext:##reduconte\n- https://frontendmasters.com/courses/redux-fundamentals/redux-api-s-compose\n\t- Redux has only five methods, but createStore creates four more\n\t\t- but nine methods is the entire surface area of Redux\n\t\t- we are going to master it itself, then tie it into buildng React applications\n\t- compose\n\t\t- similar to pipe or flow\n\t\t- has nothing to do with Redux per se\n\t\t- allows you to take a set of functions and create one function that will pass a value through each of them\n\t\t- you could accomlish this like this##basewaytodoit\n\t\t- or with compose##orwithcompsose\n\t\t- it's just a functional helper\n\t- making a store\n\t\t- \"What is a reducer? It's a pure function where stuff goes in and stuff comes out. Actually two things go in and one thing comes out. The first thing that goes in is a JavaScript object that describes the state of the world. The second thing that goes in is a JavaScript object which is a thing that happened. They both go in and what comes out? Another JavaScript object which represents the new state of the world.\" //quote\n\t\t\t- maybe not if a modal is open or closed\n- https://frontendmasters.com/courses/redux-fundamentals/redux-stores-reducers\n\t- simplest reducer##thesimplreduc\n\t- replaceReducer\n\t\t- used for code-splitting\n\t\t- having one reducer that handles the changes of all your app state is not going to scale\n\t\t\t- hence combineReducer\n\t\t- getState\n\t\t\t- simple gets the state to pass to components\n\t- interesting, two years after this video, Redux is now deprecated, Redux Toolkit is officially recommended##reduxdepsji\n\t- yes, it's official, [Redux is deprecated](https://thoughtbot.com/blog/getting-started-with-redux-toolkit)##itsoffidj\n- https://frontendmasters.com/courses/redux-fundamentals/redux-stores-dispatch\n\t- all capital letters for type\n\t\t- it should be a constant\n\t\t- this way you won't get an error##sonoerror\n- https://frontendmasters.com/courses/redux-fundamentals/action-creators\n\t- an action creator is just a fancy name for a function##heretheaction\n\t- a shocking amount of Redux is just JavaScript\n- https://frontendmasters.com/courses/redux-fundamentals/setting-initalstate\n\t- simplest Redux, `npm i redux`, works, value = 2\n\t\t------------------------------------------------\n\t\timport {\n\t\t\tcreateStore\n\t\t} from 'redux';\n\n\t\tconst initialState = { value: 0 };\n\n\t\tconst increment = () => ({ type: \"INCREMENT\"});\n\n\t\tconst reducer = (state, action) => {\n\t\t\tif (action.type === 'INCREMENT') {\n\t\t\t\treturn { value: state.value + 1 };\n\t\t\t}\n\t\t\treturn state;\n\t\t}\n\n\t\tconst store = createStore(reducer, initialState);\n\n\t\tstore.dispatch(increment());\n\t\tstore.dispatch(increment());\n\n\t\tconsole.log(store.getState());\t\t\n\t\t------------------------------------------------\n- https://frontendmasters.com/courses/redux-fundamentals/some-rules-for-reducers\n\t- \"The golden rule for reducers: No mutating objects. If you touch it, you replace it.\" //quote\n\t- having multiple stores is an anti-pattern\n\t- one store is important so you can e.g. get the whole application state as an object to debug it\n- https://frontendmasters.com/courses/redux-fundamentals/subscribe-binding-action-creators\n\t- subscribe\n\t\t- I care everytime the state changes, please call this function everytime the state changes\n\t\t- works like this##scribbework\n\t- bind action creators##bindactioncreators\n\t- could also do it like this##couldasksd\n- https://frontendmasters.com/courses/redux-fundamentals/combine-reducers\n\t- makes new reducer with initial state with users\n\t- multiple reducers##multreduc\n\t- the flatter you can keep the object, the easier it will be to store data and get data back out\n\t- reducers should not change the same data, each should have its data area of what it can change\n- https://frontendmasters.com/courses/redux-fundamentals/enhancers\n\t- creates a new example of reducer\n\t- an enhancer is a higher-order function that wraps around the store to add some extra functionality to it\n\t- monitorEnhancer##enahancer\n\t- enhancers are similar to middleware\n- https://frontendmasters.com/courses/redux-fundamentals/enhancers-exercise\n\t- gives exercise, it should log in the info\n- https://frontendmasters.com/courses/redux-fundamentals/enhancers-solution\n\t- shows logEnhancer##logenchajdjdjd\n\t- then uses compose\n- https://frontendmasters.com/courses/redux-fundamentals/middleware\n\t- middleware is an abstraction of enhancer\n\t- writes logMiddleware##themiddex\n\t- the most famous use case for middleware is a library that is used in Redux Toolkit called Redux Thunk. So let's say, hypothetically, you needed to make a fetch request, you have to change how actions flow through the pipeline\n- https://frontendmasters.com/courses/redux-fundamentals/middleware-exercise\n\t- gives exercise\n- https://frontendmasters.com/courses/redux-fundamentals/middleware-solution\n\t- \"You can't await a promise inside a reducer or anything along those lines, so middleware gives you a place where you can inspect the flow of actions, you can modify those actions, you can even replace and change those actions\"\n\t- we will now use Redux in a React application, we will use\n\t\t- hooks\n\t\t- higher-order components\n\t\t- Redux Toolkit\n- https://frontendmasters.com/courses/redux-fundamentals/connecting-redux-into-react\n\t- there are difference philosophies for folder structure\n\t\t- it really depends on the app","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-11-26 19:15:08","systemWhoCreated":"systemUnknown"},{"id":783,"category":"useContext","title":"Build a React bookstore website that uses Context for global state management","body":"- **the purpose of this howto**\n\t- to understand how Context can solve the problem of global state in React applications\n\t- to learn the technicals skills of implementing Context in a React app using TypeScript\n- **what we will build**\n\t- we will create a website which enables a user to \n\t\t- enter their name on one page\n\t\t- select items to buy on a second page\n\t\t- view and edit items in their cart on a third page \n\t- the data will be managed centrally by Context\n- **GitHub project repositories:**\n\t- original\n\t\t- https://github.com/edwardtanguay/et872-bookstore-with-context\n\t- from live-coding 2023-11-27\n\t\t- https://github.com/edwardtanguay/et873-bookstore-with-context\n- **finished site is live here**\n\t- https://et872-bookstore-with-context.vercel.app\n- **finished site works like this**#gif#thebooksorestoredemo\n- **===== MOST IMPORTANT CONCEPTS, SKILLS AND TOOLS =====**\n\t- **concepts**\n\t\t- **what problem does Context solve in a React application**\n\t\t\t- if we wanted to build this application without Context, we would face the problem of having to access data on one page from another##contextproglrrma\n\t\t\t- with Context, we are able to wrap our application with the Context Provider which gives all of our components access to our state variables, so when they change on one page, they change on all pages##contextafter\n\t- **skills**\n\t\t- **how to add state variable to context**\n\t\t\t- register in IAppContext\n\t\t\t- add state varaible \n\t\t\t- add to list of exported variables in AppContext.Provider\n\t- **tools and commands**\n\t\t- useContext\n\t\t- AppProvider\n\t\t- createContext\n- **>>> 1. Create minimizied Vite React site with menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et872-bookstore-with-context` (use your own initials and number)\n\t\t- enter a name and Create repository##choosejsjsname\n\t- clone locally, e.g.\n\t\t- `git clone et872-bookstore-with-context`\n\t- open in VSCode, e.g. \n\t\t- `code et872-bookstore-with-context`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n\t- change the pages\n\t\t- Welcome stays the same\n\t\t- Info becomes **Books**\n\t\t- About becomes **Checkout**\n\t- **PageBooks.tsx**\n\t\t--------------------------------------\n\t\texport const PageBooks = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the books page.</p>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **PageCheckout.tsx**\n\t\t----------------------------------------\n\t\texport const PageCheckout = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the checkout page.</p>\n\t\t\t)\n\t\t}\t\t\n\t\t----------------------------------------\n\t- **main.tsx**\n\t\t--------------------------------------\n\t\t{\n\t\t\tpath: \"books\",\n\t\t\telement: <PageBooks />,\n\t\t},\n\t\t{\n\t\t\tpath: \"checkout\",\n\t\t\telement: <PageCheckout />,\n\t\t},\t\t\n\t\t--------------------------------------\n\t- **Nav.tsx**\n\t\t---------------------------------\n\t\t<li><NavLink to=\"/books\">Books</NavLink></li>\n\t\t<li><NavLink to=\"/checkout\">Checkout</NavLink></li>\t\t\n\t\t---------------------------------\n\t- change the titles in **index.html** and **Header.tsx** to **Bookstore**\n\t- site looks like this:##thebbbbbooks\n- **>>> 2. Set up Context and make userName available on each page**\n\t- **AppContext.tsx**\n\t\t----------------------------------------------\n\t\timport { useState } from \"react\";\n\t\timport { createContext } from \"react\";\n\n\t\tinterface IAppContext {\n\t\t\tuserName: string;\n\t\t}\n\n\t\tinterface IAppProvider {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst [userName] = useState('Hans')\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tuserName\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\n\t\t----------------------------------------------\n\t- **main.tsx**\n\t\t-------------------------------------\n\t\tReactDOM.createRoot(document.getElementById(\"root\")!).render(\n\t\t\t<AppProvider>\n\t\t\t\t<RouterProvider router={router} />\n\t\t\t</AppProvider>\n\t\t);\t\t\n\t\t-------------------------------------\n\t- **PageWelcome.tsx**\n\t\t-------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\texport const PageWelcome = () => {\n\t\t\tconst { userName } = useContext(AppContext);\n\t\t\treturn (\n\t\t\t\t<p>Welcome, {userName}!</p>\n\t\t\t)\n\t\t}\t\t\n\t\t-------------------------------------\n\t- **PageBooks.tsx**\n\t\t-----------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\texport const PageBooks = () => {\n\t\t\tconst { userName } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<p>Hello, {userName}, which books would you like to buy?</p>\n\t\t\t)\n\t\t}\n\t\t-----------------------------------------\n\t- **PageCheckout.tsx**\n\t\t-----------------------------------------\n\t\timport { useContext } from 'react';\n\t\timport { AppContext } from '../AppContext';\n\n\t\texport const PageCheckout = () => {\n\t\t\tconst { userName } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<p>{userName}, you are one step away from your books being delivered!</p>\n\t\t\t)\n\t\t}\n\t\t-----------------------------------------\n\t- site works like this:#gif#thepageswithname\n- **>>> 3. Enable user to enter their name on Welcome page**\n\t- make it so if there is no name, no messages appear, if name then messages appear on all three pages\n\t\t- **PageWelcome.tsx**\n\t\t\t-------------------------------------\n\t\t\treturn <>{userName && <p>Welcome, {userName}!</p>}</>;\n\t\t\t-------------------------------------\n\t\t- **PageBooks.tsx**\n\t\t\t-----------------------------------------\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{userName && (\n\t\t\t\t\t\t<p>Hello, {userName}, which books would you like to buy?</p>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t\t-----------------------------------------\n\t\t- **PageCheckout.tsx**\n\t\t\t-----------------------------------------\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{userName && (\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{userName}, you are one step away from your books being\n\t\t\t\t\t\t\tdelivered!\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t\t-----------------------------------------\n\t- enable user to add their name\n\t\t- **AppContext.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { useState } from \"react\";\n\t\t\timport { createContext } from \"react\";\n\n\t\t\tinterface IAppContext {\n\t\t\t\tuserName: string;\n\t\t\t\tsetUserName: (userName: string) => void;\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\tconst [userName, setUserName] = useState(\"\");\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tuserName,\n\t\t\t\t\t\t\tsetUserName\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **index.scss**\n\t\t\t----------------------------------\n\t\t\tbutton {\n\t\t\t\t@apply inline-flex items-center px-1 py-0 text-gray-500 bg-gray-100 rounded hover:bg-gray-200 hover:text-gray-600;\n\t\t\t}\t\t\t\n\t\t\t----------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t-------------------------------------\n\t\t\t<form className=\"mt-3\">\n\t\t\t\tYour name:{\" \"}\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={userName}\n\t\t\t\t\tonChange={(e) => setUserName(e.target.value)}\n\t\t\t\t/>\n\t\t\t</form>\t\t\t\n\t\t\t-------------------------------------\n\t- the site works like this:#gif#sitelookksksk\n- **>>> 4. Display books on books page**\n\t- we will display all tech books form this URL: \n\t\t- https://edwardtanguay.vercel.app/share/techBooks.json\n\t- note that images are here based on the idCode of the book, e.g. for \"bashCookbook\"\n\t\t- https://edwardtanguay.vercel.app/share/images/techBooks/bashCookbook.jpg\n\t- install axios\n\t\t- `npm i axios`\n\t- **interfaces.ts**\n\t\t------------------------------------\n\t\texport interface ITechBook {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t}\t\t\n\t\t------------------------------------\n\t- **AppContext.tsx**\n\t\t-----------------------------------------\n\t\tconst techBooksUrl = 'https://edwardtanguay.vercel.app/share/techBooks.json';\t\t\n\n\t\ttechBooks: ITechBook[]\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst [userName, setUserName] = useState(\"\");\n\t\t\tconst [techBooks, setTechBooks] = useState<ITechBook[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await axios.get(techBooksUrl);\n\t\t\t\tconst _techBooks = response.data;\n\t\t\t\tsetTechBooks(_techBooks);\n\t\t\t})();\n\t\t})\n\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\tuserName,\n\t\t\t\tsetUserName,\n\t\t\t\ttechBooks\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AppContext.Provider>\t\t\n\t\t-----------------------------------------\n\t- **PageBooks.tsx**\n\t\t-------------------------------------------\n\t\t<div className=\"flex gap-3 flex-wrap\">\n\t\t\t{techBooks.map((techBook) => {\n\t\t\t\treturn (\n\t\t\t\t\t<img\n\t\t\t\t\tclassName=\"h-fit w-32\"\n\t\t\t\t\t\tkey={techBook.id}\n\t\t\t\t\t\tsrc={`https://edwardtanguay.vercel.app/share/images/techBooks/${techBook.idCode}.jpg`}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\t\t\n\t\t-------------------------------------------\n\t- site looks like this:##ghtsitjkbooks\n- **>>> 5. Create cart and enable books to be clicked and added/removed**\n\t- **AppContext.tsx**\n\t\t-----------------------------------------\n\t\tinterface IAppContext {\n\t\t\tuserName: string;\n\t\t\tsetUserName: (userName: string) => void;\n\t\t\ttechBooks: ITechBook[];\n\t\t\tcart: ICart;\n\t\t\tsetCart: (cart: ICart) => void;\n\t\t\taddTechBookToCart: (techBook: ITechBook) => void;\n\t\t}\t\t\n\t\t-----------------------------------------\n\t- **intefaces.ts**\n\t\t---------------------------------------\n\t\texport interface ICart {\n\t\t\titems: ITechBook[];\n\t\t}\t\t\n\t\t---------------------------------------\n\t- **PageBooks.tsx**\n\t\t----------------------------------------\n\t\t<div className=\"flex flex-col\">\n\t\t\t<img\n\t\t\t\tclassName=\"h-fit w-32 cursor-pointer\"\n\t\t\t\tkey={techBook.id}\n\t\t\t\tonClick={() => addTechBookToCart(techBook)}\n\t\t\t\tsrc={`https://edwardtanguay.vercel.app/share/images/techBooks/${techBook.idCode}.jpg`}\n\t\t\t/>\n\t\t\t{cart.items.filter(\n\t\t\t\t(m) => m.idCode === techBook.idCode\n\t\t\t).length > 0 && (\n\t\t\t\t<p className=\"text-center bg-green-800 text-yellow-300\">\n\t\t\t\t\tOrdered:{\" \"}\n\t\t\t\t\t{\n\t\t\t\t\t\tcart.items.filter(\n\t\t\t\t\t\t\t(m) => m.idCode === techBook.idCode\n\t\t\t\t\t\t).length\n\t\t\t\t\t}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</div>\t\t\n\t\t----------------------------------------\n\t- the site works like this:#gif#buyingthebooks\n- **>>> 6. Display selected books on checkout page**\n\t- **PageCheckout.tsx**\n\t\t----------------------------------------\n\t\t{cart.items.map(techBook => {\n\t\t\treturn (\n\t\t\t\t<div className=\"flex gap-3 mb-3 items-center\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"h-fit w-12 cursor-pointer\"\n\t\t\t\t\t\t\tkey={techBook.id}\n\t\t\t\t\t\t\tsrc={`https://edwardtanguay.vercel.app/share/images/techBooks/${techBook.idCode}.jpg`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t<p className=\"text-3xl\">{techBook.title}</p>\n\t\t\t\t</div>\n\t\t\t)\n\t\t})}\t\t\n\t\t----------------------------------------\n\t- site now works like this:#gif#thebooksorestoredemo\n- **>>> CHALLENGE: Make the name-entering process have a more professional feel and better user-experience**\n- **>>> CHALLENGE: Show waiting spinner on slow initial loading of site**\n- **>>> CHALLENGE: Enable user to not only add books to the cart, but remove books from the cart**\n- **>>> CHALLENGE: For books for which more than one copy is ordered, show them together in cart, e.g. \"2x title\"","points":20,"extras":"","systemWhenCreated":"2023-11-26 20:52:28","systemWhoCreated":"systemUnknown"},{"id":784,"category":"useReducer","title":"Learn the basics of useReducer and refactor a site from useState to useReducer","body":"- **the purpose of this howto**\n\t- to understand how useReducer works as a React state management solution\n- **what we will do**\n\t- we will start with this [bookstore site](https://et872-bookstore-with-context.vercel.app) build with useContext and useState\n\t- we will create a page called **Demo** which will be a disconnected demo of useReducer, in order to learn the basics\n\t- then we will piece-by-piece refactor the appContext **swapping out useState and replacing it with useReducer**\n- **GitHub project repository:**\n\t- https://github.com/edwardtanguay/et346-bookstore-with-usereducer\n- **finished site is live here**\n\t- https://et346-bookstore-with-usereducer.vercel.app\n- **finished site works like this**#gif#reducerdemosalll\n- **===== MOST IMPORTANT CONCEPTS, SKILLS AND TOOLS =====**\n\t- **concepts**\n\t\t- **what is a reducer?**\n\t\t\t- *\"What is a reducer? It's a **pure function** where stuff goes in and stuff comes out. Actually two things go in and one thing comes out. The first thing that goes in is **a JavaScript object that represents the state of the world**. The second thing that goes in is **a JavaScript object which represents a thing that happened**. They both go in and what comes out: **another JavaScript object which represents the new state of the world**.\"* - Steve Kinney, Frontend Masters##sthesutestable\n\t\t- **does useReducer replace useContext?**\n\t\t\t- no, useReducer replaces **useState**\n\t\t\t- a reducer can be seen as collections of state variables that you can change with single commands\n\t\t- **what is a pure function?**\n\t\t\t- a function that has no side-effects, i.e. no data fetching, no I/O operations such as file saving, and no non-deterministic behavior such as random numbers, and therefore it is very testable\n\t- **skills**\n\t\t- **what are the basic steps to implement a reducer?**\n\t\t\t- import useReducer\n\t\t\t- create IState\n\t\t\t- create initialState\n\t\t\t- create reducer\n\t\t\t- define state and dispatch with useReducer\n\t\t\t- use state and dispatch in components\n\t- **tools, commands, vocabulary**\n\t\t- useReducer\n\t\t- reducer\n\t\t- state\n\t\t- action\n\t\t- type\n\t\t- payload\n\t\t- dispatch\n- **>>> 1. Clone bookstore site**\n\t- go to: https://github.com/edwardtanguay/et873-bookstore-with-context\n\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et346-bookstore-with-usereducer` (use your own initials and number)\n\t\t- enter a name and Create repository##thebookerducer\n\t- clone locally, e.g.\n\t\t- `git clone et346-bookstore-with-usereducer`\n\t- open in VSCode, e.g. \n\t\t- `code et346-bookstore-with-usereducer`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##thebooksfotjstie\n- **>>> 2. Create Demo page and create a simple example of a reducer**\n\t- create Demo page\n\t\t- **PageDemo.tsx**\n\t\t\t--------------------------------------\n\t\t\texport const PageDemo = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>this is the demo page</p>\n\t\t\t\t)\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t\t- **main.tsx**\n\t\t\t----------------------------\n\t\t\t{\n\t\t\t\tpath: \"demo\",\n\t\t\t\telement: <PageDemo />\n\t\t\t},\n\t\t\t----------------------------\n\t\t- **Nav.tsx**\n\t\t\t-----------------------------------\n\t\t\t<li><NavLink to=\"/demo\">Demo</NavLink></li>\n\t\t\t-----------------------------------\n\t\t- site looks like this:##withdemopagijk\n\t- create simple reducer with useReducer\n\t\t- **PageDemo.tsx**\n\t\t\t----------------------------------------------\n\t\t\timport { useReducer } from \"react\";\n\n\t\t\tinterface IState {\n\t\t\t\tcount: number;\n\t\t\t}\n\n\t\t\tinterface IAction {\n\t\t\t\ttype: \"increment\" | \"decrement\";\n\t\t\t\tpayload: number;\n\t\t\t}\n\n\t\t\tconst initialState: IState = {\n\t\t\t\tcount: 0,\n\t\t\t};\n\n\t\t\tconst reducer = (state: IState, action: IAction) => {\n\t\t\t\tconst _state = structuredClone(state);\n\t\t\t\tswitch (action.type) {\n\t\t\t\t\tcase \"increment\":\n\t\t\t\t\t\t_state.count += action.payload;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"decrement\":\n\t\t\t\t\t\t_state.count -= action.payload;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn _state;\n\t\t\t};\n\n\t\t\texport const PageDemo = () => {\n\t\t\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"text-2xl mb-5 font-bold\">Demo of useReducer</h2>\n\t\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t\t<button onClick={() => dispatch({type: 'decrement', payload: 1})} className=\"text-4xl pt-0 w-10 h-10 flex items-center justify-center\">\n\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button onClick={() => dispatch({type: 'increment', payload: 1})} className=\"text-4xl pt-0 w-10 h-10 flex items-center justify-center\">\n\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<p className=\"text-2xl mb-3\">Count: {state.count}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t----------------------------------------------\n\t- the demo page now works like this:#gif#thedemoreducerjo\n- **>>> 3. Add another kind of action**\n\t- we will now add another action type that updates a string instead of a number\n\t- **PageDemo.tsx**\n\t\t-------------------------------------------------------\n\t\tinterface IState {\n\t\t\tcount: number;\n\t\t\ttitle: string;\n\t\t}\n\n\t\tinterface ICountAction {\n\t\t\ttype: \"increment\" | \"decrement\";\n\t\t\tpayload: number;\n\t\t}\n\n\t\tinterface ITitleAction {\n\t\t\ttype: \"changeTitle\"\n\t\t\tpayload: string;\n\t\t}\n\n\t\tconst initialState: IState = {\n\t\t\tcount: 0,\n\t\t\ttitle: \"The useReducer Demo\",\n\t\t};\n\n\t\tconst reducer = (state: IState, action: ICountAction | ITitleAction) => {\n\t\t\tconst _state = structuredClone(state);\n\t\t\tswitch (action.type) {\n\t\t\t\tcase \"increment\":\n\t\t\t\t\t_state.count += action.payload;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"decrement\":\n\t\t\t\t\t_state.count -= action.payload;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"changeTitle\":\n\t\t\t\t\t_state.title = action.payload;\n\t\t\t}\n\t\t\treturn _state;\n\t\t};\n\n\n\t\t<div className=\"text-xl\">\n\t\t\tTitle:{\" \"}\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tclassName=\"w-80 p-1 rounded\"\n\t\t\t\tvalue={state.title}\n\t\t\t\tonChange={(e) =>\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"changeTitle\",\n\t\t\t\t\t\tpayload: e.target.value,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t/>\n\t\t</div>\n\t\t-------------------------------------------------------\n\t- demo page now works like this:#gif#dempageso2\n- **>>> 4. Add business logic without changing the frontend interface to the reducer**\n\t- with a reducer, you can change the business logic without making the interface to your reducer more complicated\n\t- we will had a history logger\n\t- **PageDemo.tsx**\n\t\t------------------------------------------------\n\t\tinterface IState {\n\t\t\tcount: number;\n\t\t\ttitle: string;\n\t\t\thistory: string[]\n\t\t}\n\n\t\tswitch (action.type) {\n\t\t\tcase \"increment\":\n\t\t\t\t_state.count += action.payload;\n\t\t\t\t_state.history.push(`added ${action.payload}`)\n\t\t\t\tbreak;\n\t\t\tcase \"decrement\":\n\t\t\t\t_state.count -= action.payload;\n\t\t\t\t_state.history.push(`subtracted ${action.payload}`)\n\t\t\t\tbreak;\n\t\t\tcase \"changeTitle\":\n\t\t\t\t_state.title = action.payload;\n\t\t\t\t_state.history.push(`change title to \"${action.payload}\"`);\n\t\t}\n\n\t\t<div>\n\t\t\t<h3 className=\"text-xl mb-3\">History:</h3>\n\t\t\t{state.history.map((item, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<p key={index} className=\"font-mono text-orange-900\">{item}</p>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\t\t\n\t\t------------------------------------------------\n\t- demo page now works like this:#gif#demopagewithhistory\n- **>>> 5. Refactor bookstore by replacing useState with useReducer in AppContext**\n\t- first replace only **userName**\n\t\t- **AppContext.tsx**\n\t\t\t--------------------------------------------\n\t\t\timport { createContext, useEffect, useState, useReducer } from \"react\";\n\n\t\t\tinterface IState {\n\t\t\t\tuserName: string;\n\t\t\t}\n\n\t\t\tconst initialState: IState = {\n\t\t\t\tuserName: ''\n\t\t\t}\n\n\t\t\tinterface IUserNameAction {\n\t\t\t\ttype: \"changeUserName\"\n\t\t\t\tpayload: string;\n\t\t\t}\n\n\t\t\tconst reducer = (state: IState, action: IUserNameAction) => {\n\t\t\t\tconst _state = structuredClone(state);\n\t\t\t\tswitch (action.type) {\n\t\t\t\t\tcase \"changeUserName\":\n\t\t\t\t\t\t_state.userName = action.payload;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn _state;\n\t\t\t};\n\n\t\t\tstate: IState,\n\t\t\tdispatch: React.Dispatch<IUserNameAction>,\n\n\t\t\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\t\t\tstate,\n\t\t\tdispatch,\n\t\t\t--------------------------------------------\n\t\t- replace **userName** with **state** in the other two files\n\t- app will work the same as before\n- **>>> 6. Replace books with reducer**\n\t- **AppContext.tsx**\n\t\t----------------------------------------\n\t\tinterface IState {\n\t\t\tuserName: string;\n\t\t\tbooks: IBook[];\n\t\t}\n\n\t\tconst initialState: IState = {\n\t\t\tuserName: '',\n\t\t\tbooks: []\n\t\t}\t\t\n\n\t\tinterface IBooksAction {\n\t\t\ttype: \"setBooks\"\n\t\t\tpayload: IBook[];\n\t\t}\n\n\t\tconst reducer = (state: IState, action: IUserNameAction | IBooksAction) => {\n\n\t\tcase \"setBooks\":\n\t\t\t_state.books = action.payload;\n\t\t\tbreak;\n\n\t\tdispatch({type: 'setBooks', payload: _books})\n\t\t----------------------------------------\n\t- update **PageWelcome.tsx** and **PageBooks.tsx**\n- **>>> 7. Replace cart with reducer**\n\t- **AppContext.tsx**\n\t\t----------------------------------------\n\t\timport { createContext, useEffect, useReducer } from \"react\";\n\n\t\tinterface IState {\n\t\t\tuserName: string;\n\t\t\tbooks: IBook[];\n\t\t\tcart: ICart;\n\t\t}\n\n\t\tconst initialState: IState = {\n\t\t\tuserName: \"\",\n\t\t\tbooks: [],\n\t\t\tcart: { items: [] },\n\t\t};\n\n\t\tinterface ICartAction {\n\t\t\ttype: \"setCart\";\n\t\t\tpayload: ICart;\n\t\t}\n\n\t\tinterface IBookAction {\n\t\t\ttype: \"addBookToCart\";\n\t\t\tpayload: IBook;\n\t\t}\n\n\t\tconst reducer = (\n\t\t\tstate: IState,\n\t\t\taction: IUserNameAction | IBooksAction | ICartAction | IBookAction\n\t\t) => {\n\t\t\tconst _state = structuredClone(state);\n\t\t\tswitch (action.type) {\n\t\t\t\tcase \"changeUserName\":\n\t\t\t\t\t_state.userName = action.payload;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"setBooks\":\n\t\t\t\t\t_state.books = action.payload;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"setCart\":\n\t\t\t\t\t_state.cart = action.payload;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"addBookToCart\":\n\t\t\t\t\t_state.cart.items.push(action.payload);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn _state;\n\t\t};\n\n\t\tdispatch: React.Dispatch<IUserNameAction | IBookAction>;\n\t\t----------------------------------------\n\t- **PageBook.tsx**\n\t\t----------------------------------------\n\t\tonClick={() => dispatch({ type: 'addBookToCart', payload: book })}\t\t\n\t\t----------------------------------------","points":20,"extras":"","systemWhenCreated":"2023-11-27 20:55:56","systemWhoCreated":"systemUnknown"},{"id":785,"category":"Redux","title":"Set up a website that uses Redux Toolkit","body":"- **the purpose of this howto**\n\t- to get a site working that uses Redux Toolkit as a state management solution\n- **what we will do**\n\t- we will create a React site with menu (createBrowserRouter)\n\t- it will have a page to click on books which are added to a cart\n\t- on another page the cart will show the books you have clicked\n- **GitHub project repository:**\n\t- https://github.com/edwardtanguay/et334-redux-toolkit-book-site\n\t- from live-coding 2023-11-29, with AsyncThunk: https://github.com/edwardtanguay/et335-redux-toolkit-book-site\n- **finished site is live here**\n\t- https://et334-redux-toolkit-book-site.vercel.app\n- **finished site works like this**#gif#reduxsitedemo222\n- **===== MOST IMPORTANT CONCEPTS, SKILLS AND TOOLS =====**\n\t- **concepts**\n\t\t- **why is Redux so popular even though it is so complicated?**\n\t\t\t- from when it was created in 2015 to 2018, **it was the only realistic solution** for managing application state in React applications\n\t\t\t- in 2018, useContext and useReducer became available as a core feature of React, this was a much simpler solution and was adopted by small and medium-sized projects\n\t\t\t- in 2019, **Redux Toolkit** was created to simplify and give Redux standard conventions, which made it again more popular with smaller and medium-sized projects\n\t\t\t- in 2022, Redux was deprecated in favor of React Toolkit as the recommended solution when using Redux##reduxtimeline\n\t- **tools, commands, vocabulary**\n\t\t- configureStore\n\t\t- slices\n\t\t- useDispatch\n- **>>> 1. Create minimizied Vite React site with menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et334-redux-toolkit-book-site` (use your own initials and number)\n\t\t- enter a name and Create repository\n\t- clone locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et334-redux-toolkit-book-site.git`\n\t- open in VSCode, e.g. \n\t\t- `code et334-redux-toolkit-book-site`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n\t- change the pages\n\t\t- Welcome stays the same\n\t\t- Info becomes **Books**\n\t\t- About becomes **Checkout**\n\t- **PageBooks.tsx**\n\t\t--------------------------------------\n\t\texport const PageBooks = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the books page.</p>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **PageCheckout.tsx**\n\t\t----------------------------------------\n\t\texport const PageCheckout = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the checkout page.</p>\n\t\t\t)\n\t\t}\t\t\n\t\t----------------------------------------\n\t- **main.tsx**\n\t\t--------------------------------------\n\t\t{\n\t\t\tpath: \"books\",\n\t\t\telement: <PageBooks />,\n\t\t},\n\t\t{\n\t\t\tpath: \"checkout\",\n\t\t\telement: <PageCheckout />,\n\t\t},\t\t\n\t\t--------------------------------------\n\t- **Nav.tsx**\n\t\t---------------------------------\n\t\t<li><NavLink to=\"/books\">Books</NavLink></li>\n\t\t<li><NavLink to=\"/checkout\">Checkout</NavLink></li>\t\t\n\t\t---------------------------------\n\t- change the titles in **index.html** and **Header.tsx** to **Bookstore**\n\t- site looks like this:##reduxboobob\n- **>>> 2. Set up Redux Toolkit and make add/subtract buttons**\n\t- even with Redux Toolkit, you will find various recommended conventions to create your folder structure\n\t- I will use this recommended convention from the redux.js.org website: https://redux.js.org/tutorials/essentials/part-2-app-structure\n\t\t- **src/app**\n\t\t\t- (all core application files)\n\t\t\t- move **App.tsx** and **index.scss** here\n\t\t\t\t- fix all paths\n\t\t\t- (will also contain Redux store)\n\t\t- **src/common**\n\t\t\t- (all non-Redux \"common\" files of the app such as components and pages)\n\t\t\t- move entire \"pages\" folder here\n\t\t\t\t- fix all paths\n\t\t- **src/features**\n\t\t\t- (will contain the Redux state slices)\n\t\t\t\t- *a \"slice\" is a collection of Redux reducer logic and actions for a single feature in your app, typically defined together in a single file*\n\t- install Redux npm packages\n\t\t- `npm i @reduxjs/toolkit react-redux`\n\t- create Redux boiler plate\n\t\t- add Redux store\n\t\t\t- **/src/app/store.ts**\n\t\t\t\t-----------------------------------\n\t\t\t\timport { configureStore } from '@reduxjs/toolkit';\n\n\t\t\t\t// TODO: import slice\n\n\t\t\t\texport const store = configureStore({\n\t\t\t\t\t// TODO: add slice\n\t\t\t\t});\t\t\t\n\n\t\t\t\texport type RootState = ReturnType<typeof store.getState>\n\t\t\t\texport type AppDispatch = typeof store.dispatch\t\t\t\t\n\t\t\t\t-----------------------------------\n\t\t- wrap app in Redux provider\n\t\t\t- **/src/main.tsx**\n\t\t\t\t---------------------------------------\n\t\t\t\timport { store } from './app/store';\n\t\t\t\timport { Provider } from 'react-redux';\t\t\t\n\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<RouterProvider router={router} />\n\t\t\t\t</Provider>\n\t\t\t\t---------------------------------------\n\t\t- add slice of state called \"cart\"\n\t\t\t- **/src/features/cart/cartSlice.ts**\n\t\t\t\t----------------------------------\n\t\t\t\timport { createSlice } from '@reduxjs/toolkit';\n\n\t\t\t\tconst initialState = {\n\t\t\t\t\tcount: 0\n\t\t\t\t};\n\n\t\t\t\texport const cartSlice = createSlice({\n\t\t\t\t\tname: 'cart',\n\t\t\t\t\tinitialState,\n\t\t\t\t\treducers: {\n\t\t\t\t\t\tsubtract: (state) => {\n\t\t\t\t\t\t\tstate.count--;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tadd: (state) => {\n\t\t\t\t\t\t\tstate.count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\texport const { subtract, add } = cartSlice.actions;\n\t\t\t\texport default cartSlice.reducer;\n\t\t\t\t----------------------------------\n\t\t- now that we have our slice built, add it to the store\n\t\t\t- **/src/app/store.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport cartReducer from '../features/cart/cartSlice';\n\n\t\t\t\texport const store = configureStore({\n\t\t\t\t\treducer: {\n\t\t\t\t\t\tcart: cartReducer,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\t---------------------------------------------\n\t- use Redux state on welcome page\n\t\t- **/src/pages/PageWelcome.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { useDispatch, useSelector } from \"react-redux\";\n\t\t\timport { add, subtract } from \"../../features/cart/cartSlice\";\n\t\t\timport { RootState } from '../../app/store';\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst dispatch = useDispatch();\n\t\t\t\tconst selectCart= (state: RootState) => state.cart;\n\t\t\t\tconst { count } = useSelector(selectCart);\n\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t<button onClick={() => dispatch(subtract())}>Subtract</button>\n\t\t\t\t\t\t<button onClick={() => dispatch(add())}>Add</button>\n\t\t\t\t\t\t<div className=\"text-3xl\">count = {count}</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------------\n\t- site works like this:#gif#thecountonwelcom\n- **==> STEP 3. Set up books page so you can add items to the cart <==**\n\t- change from changing a counter to adding books and showing on cart page\n\t- **cartSlice.ts**\n\t\t---------------------------------------\n\t\timport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n\t\tconst books = [\n\t\t\t{\n\t\t\t\t\"id\": 1,\n\t\t\t\t\"idCode\": \"buildingMicroservices\",\n\t\t\t\t\"title\": \"Building Microservices\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 2,\n\t\t\t\t\"idCode\": \"gatsbyEcommerce\",\n\t\t\t\t\"title\": \"Gatsby E-Commerce\",\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 3,\n\t\t\t\t\"idCode\": \"rustWeb\",\n\t\t\t\t\"title\": \"Rust Web Programming\",\n\t\t\t}\n\t\t];\n\n\t\tinterface IBook {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t}\n\n\t\tinterface ICartItem {\n\t\t\tbook: IBook;\n\t\t}\n\n\t\tinterface IState {\n\t\t\tbooks: IBook[];\n\t\t\tcartItems: ICartItem[]\n\t\t}\n\n\t\tconst initialState: IState = {\n\t\t\tcartItems: [],\n\t\t\tbooks\n\t\t};\n\n\t\texport const cartSlice = createSlice({\n\t\t\tname: 'cart',\n\t\t\tinitialState,\n\t\t\treducers: {\n\t\t\t\taddCartItem: (state, action: PayloadAction<ICartItem>) => {\n\t\t\t\t\tstate.cartItems.push(action.payload);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\texport const { addCartItem } = cartSlice.actions;\n\t\texport default cartSlice.reducer;\n\t\t---------------------------------------\n\t- **PageBooks.tsx**\n\t\t--------------------------------------\n\t\timport { useDispatch, useSelector } from \"react-redux\";\n\t\timport { RootState } from \"../../app/store\";\n\t\timport { NavLink } from \"react-router-dom\";\n\n\t\texport const PageBooks = () => {\n\t\t\tconst dispatch = useDispatch();\n\t\t\tconst selectCart = (state: RootState) => state.cart;\n\t\t\tconst { books, cartItems } = useSelector(selectCart);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex gap-3 mb-4\">\n\t\t\t\t\t\t{books.map((book) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tclassName=\"w-40 cursor-pointer\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\t\t\t\t\ttype: \"cart/addCartItem\",\n\t\t\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\t\t\tbook,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsrc={`https://edwardtanguay.vercel.app/share/images/techBooks/${book.idCode}.jpg`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<p className=\"text-xl\">\n\t\t\t\t\t\tYou have {cartItems.length} items in your{\" \"}\n\t\t\t\t\t\t<NavLink to=\"/checkout\">cart</NavLink>.\n\t\t\t\t\t</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\n\t\t--------------------------------------\n\t- site works like this:#gif#theboksredux\n- **==> STEP 4. Create the checkout page <==**\n\t- **PageCheckout.tsx**\n\t\t-------------------------------------------------\n\t\timport { useSelector } from \"react-redux\";\n\t\timport { RootState } from \"../../app/store\";\n\n\t\texport const PageCheckout = () => {\n\t\t\tconst selectCart = (state: RootState) => state.cart;\n\t\t\tconst { cartItems } = useSelector(selectCart);\n\n\t\t\treturn (\n\t\t\t\t<div className=\"\">\n\t\t\t\t\t{cartItems.map((cartItem) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"flex gap-5 items-center mb-3 bg-slate-600 text-slate-300 p-3 w-[30rem]\">\n\t\t\t\t\t\t\t\t<img className=\"w-10\"\n\t\t\t\t\t\t\t\t\tsrc={`https://edwardtanguay.vercel.app/share/images/techBooks/${cartItem.book.idCode}.jpg`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<p className=\"text-3xl\">{cartItem.book.title}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- site should work like this:#gif#reduxsitedemo222","points":20,"extras":"","systemWhenCreated":"2023-11-29 00:14:42","systemWhoCreated":"systemUnknown"},{"id":786,"category":"React Query","title":"Set up a website that uses React Query and json-server to get and post data via axios","body":"- **the purpose of this howto**\n\t- to get a site working that uses React Query to\n\t\t- explore its features\n\t\t- have a site up which makes it easier to understand tutorials, videos and documentation\n\t\t- since React Query can be a complex topic with concepts you need to get used to\n\t- to consider to what extent React Query can be used work with or replace a state management solution\n- **what we will create**\n\t- create a site that has a backend json-server API\n\t\t- the backend and frontend will both start with one command \"npm run dev\"\n\t\t- note, the backend json-server will not be able to run at Vercel\n\t- it has a page called flashcard on which you can view and add flashcards via a form\n\t\t- it will fetch the data via axios from the json-server API via React Query\n\t\t- it will also post data via a from to the json-server via axios\n- **GitHub project repository:**\n\t- https://github.com/edwardtanguay/et411-react-query-flashcard-site\n\t- from 2023-11-30 live-coding, fixed invalidate cache, added blog crud page: \n\t\t- https://github.com/edwardtanguay/et412-react-query-flashcard-site\n- **finished site works like this**#gif#finalreactquerynn\n- **===== GOOD TO KNOW =====**\n\t- **what is the difference between React Query and Tanstack**\n\t\t- Tanstack was formerly known as React Query\n\t\t- Tanstack aims to make the React Query async state manager available to frameworks beyond React\n\t\t- the following now exist\t\t\t\n\t\t\t- React @tanstack/react-query\n\t\t\t- Svelte @tanstack/svelte-query\n\t\t\t- Solid @tanstack/solid-query\n\t\t\t- Vue @tanstack/vue-query\n- **>>> 1. Create minimizied Vite React site with menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et411-react-query-flashcard-site` (use your own initials and number)\n\t\t- enter a name and Create repository\n\t- clone locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et411-react-query-flashcard-site.git`\n\t- open in VSCode, e.g. \n\t\t- `code et411-react-query-flashcard-site`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n\t- change the pages\n\t\t- Welcome stays the same\n\t\t- Info becomes **Flashcards**\n\t\t- About stays the same\n\t- **PageFlashcards.tsx**\n\t\t--------------------------------------\n\t\texport const PageFlashcards = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the flashcards page.</p>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **Nav.tsx**\n\t\t---------------------------------\n\t\t<li><NavLink to=\"/flashcards\">Flashcards</NavLink></li>\n\t\t---------------------------------\n\t- let's move the router to its own file\n\t\t- this separates concerns: \n\t\t\t- main.tsx is the main page of the application\n\t\t\t- Approuter.tsx is the router of the application\n\t\t- **AppRouter.tsx**\n\t\t\t----------------------------------------\n\t\t\timport App from \"./App.tsx\";\n\t\t\timport { createBrowserRouter, Navigate } from \"react-router-dom\";\n\t\t\timport \"./index.scss\";\n\t\t\timport { PageWelcome } from \"./pages/PageWelcome.tsx\";\n\t\t\timport { PageAbout } from \"./pages/PageAbout.tsx\";\n\t\t\timport { Page404 } from \"./pages/Page404.tsx\";\n\t\t\timport { PageFlashcards } from \"./pages/PageFlashcards.tsx\";\n\n\t\t\texport const router = createBrowserRouter([\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\terrorElement: <Page404 />,\n\t\t\t\t\telement: <App />,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/welcome\",\n\t\t\t\t\t\t\telement: <PageWelcome />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"flashcards\",\n\t\t\t\t\t\t\telement: <PageFlashcards />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"about\",\n\t\t\t\t\t\t\telement: <PageAbout />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/\",\n\t\t\t\t\t\t\telement: <Navigate to=\"/welcome\" replace />,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]);\n\t\t\t----------------------------------------\n\t\t- **main.tsx**\n\t\t\t--------------------------------------\n\t\t\timport ReactDOM from \"react-dom/client\";\n\t\t\timport { RouterProvider } from \"react-router-dom\";\n\t\t\timport \"./index.scss\";\n\t\t\timport { router } from \"./AppRouter\";\n\n\t\t\tReactDOM.createRoot(document.getElementById(\"root\")!).render(\n\t\t\t\t<RouterProvider router={router} />\n\t\t\t);\t\t\n\t\t\t--------------------------------------\n\t- change the titles in **index.html** and **Header.tsx** to **Flashcard Site**\n\t- site looks like this:##theflashsitesdfsd\n- **>>> 2. Set up json-server and set up npm scripts to start both front end and backend**\n\t- set up backend json-server and data\n\t\t- install **json-server** which will serve our JSON file via a REST API\n\t\t\t- `npm i -D json-server`\n\t\t\t- **backend/data/db.json**\n\t\t\t\t-----------------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"flashcards\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": 1,\n\t\t\t\t\t\t\t\"front\": \"the permission\",\n\t\t\t\t\t\t\t\"back\": \"die Erlaubnis\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\t\t\"front\": \"the design\",\n\t\t\t\t\t\t\t\"back\": \"der Entwurf\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t- set up **frontend React site** and **backend json-server API** to run together\n\t\t\t- install **npm-run-all** in order to start both backend and frontend with **npm run dev**\n\t\t\t\t- `npm i -D npm-run-all`\n\t\t\t- **package.json**\n\t\t\t\t--------------------------------------------\n\t\t\t\t\"dev\": \"run-p api frontend\",\n\t\t\t\t\"api\": \"json-server --watch ./backend/data/db.json --port 4995\",\n\t\t\t\t\"frontend\": \"vite --port 3020 --open\",\t\t\n\t\t\t\t--------------------------------------------\n\t\t\t- now type `npm run dev`\n\t\t\t- your frontend and backend should start like this:##thebackfrontjskd\n\t\t- test your backend\n\t\t\t- in browser, test displaying flashcards by sending a GET request to the API by going to: http://localhost:4995/flashcards\n\t\t\t\t- you should see your flashcards:##sesyourflas\n\t\t\t- in Postman, test adding a flashcard by sending a POST request to the API:##postmankksisj\n\t\t\t\t- you should see the added flashcard in the **db.json** file:##seeintedbad\n- **>>> 3. display flashcards from API on flashcard page**\n\t- in order to see the difference\n\t\t- first let's fetch the flashcards on the flashcard page **with normal useEffect and a state variable**\n\t\t- then in the next step we will change this to **React Query and a data model**\n\t- install axios\n\t\t- `npm i axios`\n\t- **interfaces.ts**\n\t\t--------------------------------\n\t\texport interface IFlashcard {\n\t\t\tid: number;\n\t\t\tfront: string;\n\t\t\tback: string;\n\t\t}\t\t\n\t\t--------------------------------\n\t- **PageFlashcards.tsx**\n\t\t-------------------------------------------------\n\t\timport axios from \"axios\";\n\t\timport { useState, useEffect } from \"react\";\n\t\timport { IFlashcard } from \"./interfaces\";\n\n\t\texport const PageFlashcards = () => {\n\t\t\tconst [flashcards, setFlashcards] = useState<IFlashcard[]>([]);\n\n\t\t\tconst flashcardUrl = \"http://localhost:4995/flashcards\";\n\n\t\t\tconst loadFlashcards = async () => {\n\t\t\t\tconst response = await axios.get(flashcardUrl);\n\t\t\t\tconst _flashcards = response.data;\n\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t};\n\n\t\t\tuseEffect(() => {\n\t\t\t\tloadFlashcards();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2 className=\"text-xl mb-4\">\n\t\t\t\t\t\tThere are {flashcards.length} flashcards:\n\t\t\t\t\t</h2>\n\t\t\t\t\t{flashcards.map((flashcard) => {\n\t\t\t\t\t\treturn <div key={flashcard.id} className=\"bg-gray-300 p-4 rounded w-60 mb-4\">\n\t\t\t\t\t\t\t<p className=\"font-bold\">{flashcard.front}</p>\n\t\t\t\t\t\t\t<p className=\"italic\">{flashcard.back}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t})}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- page will look like this:##theflashfcardin\n- **>>> 4. create data model for flashcards**\n\t- in order to prepare for React Query with which we will retrieve data asynchronously from a data model, let's create and use the data model now\n\t- **src/dataModel/flashcardModel.ts**\n\t\t-------------------------------------------------\n\t\timport axios from \"axios\";\n\t\timport { IFlashcard } from \"../interfaces\";\n\n\t\tconst flashcardUrl = \"http://localhost:4995/flashcards\";\n\n\t\texport const getFlashcards = async () => {\n\t\t\treturn new Promise<IFlashcard[]>((resolve, reject) => {\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst _flashcards = (await axios.get(flashcardUrl))\n\t\t\t\t\t\t\t.data as IFlashcard[];\n\t\t\t\t\t\tresolve(_flashcards);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(\"Unknown error.\");\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t});\n\t\t};\t\t\n\t\t-------------------------------------------------\n\t- **PageFlashcards.tsx**\n\t\t----------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst _flashcards = await getFlashcards();\n\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t})();\n\t\t}, []);\t\t\n\t\t----------------------------------\n\t- the site will work the same:##theflashfcardin\n- **>>> 5. load flashcards with React Query**\n\t- install React Query and its dev tools\n\t\t- `npm i @tanstack/react-query`\n\t\t- `npm i @tanstack/react-query-devtools`\n\t- **main.tsx**\n\t\t----------------------------------------\n\t\tconst queryClient = new QueryClient({\n\t\t\tdefaultOptions: {\n\t\t\t\tqueries: {\n\t\t\t\t\trefetchOnWindowFocus: false,\n\t\t\t\t\trefetchOnMount: false,\n\t\t\t\t\tretry: 2,\n\t\t\t\t},\n\t\t\t},\n\t\t});\t\t\n\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<ReactQueryDevtools />\n\t\t\t<RouterProvider router={router} />\n\t\t</QueryClientProvider>\t\t\n\t\t----------------------------------------\n\t- **tools.ts**\n\t\t-----------------------------------\n\t\texport const wait = (milliseconds: number) => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, milliseconds));\n\t\t}\t\t\n\t\t-----------------------------------\n\t- **PageFlashcards.tsx**\n\t\t------------------------------------------\n\t\timport { useQuery } from \"@tanstack/react-query\";\n\t\timport { IFlashcard } from \"../interfaces\";\n\t\timport { getFlashcards } from \"../dataModel/flashcardModel\";\n\t\timport { wait } from \"../tools\";\n\n\t\texport const PageFlashcards = () => {\n\n\t\t\tconst flashcardsQuery = useQuery<IFlashcard[]>({\n\t\t\t\tqueryKey: [\"flashcards\"],\n\t\t\t\tqueryFn: () => wait(1000).then(() => getFlashcards()),\n\t\t\t});\n\n\t\t\tif (flashcardsQuery.isLoading) {\n\t\t\t\treturn <p>Loading...</p>;\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{flashcardsQuery.data && flashcardsQuery.data.length > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<h2 className=\"text-xl mb-4\">\n\t\t\t\t\t\t\t\tThere are {flashcardsQuery.data.length} flashcards:\n\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t{flashcardsQuery.data.map((flashcard) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={flashcard.id}\n\t\t\t\t\t\t\t\t\t\tclassName=\"bg-gray-300 p-4 rounded w-60 mb-4\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<p className=\"font-bold\">{flashcard.front}</p>\n\t\t\t\t\t\t\t\t\t\t<p className=\"italic\">{flashcard.back}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t------------------------------------------\n\t- site works the same##theflashfcardin\n- **>>> 6. Enable user to add a flashcard via a form**\n\t- **interfaces.ts**\n\t\t----------------------------------------\n\t\texport interface INewFlashcard {\n\t\t\tfront: string;\n\t\t\tback: string;\n\t\t}\n\n\t\texport interface IFlashcard extends INewFlashcard {\n\t\t\tid: number;\n\t\t}\t\t\n\t\t----------------------------------------\n\t- **index.scss**\n\t\t-------------------------------------\n\t\tbutton {\n\t\t\t@apply h-8 px-4 text-sm text-indigo-100 transition-colors duration-150 bg-indigo-700 rounded-lg hover:bg-indigo-800;\n\t\t}\t\t\n\t\t-------------------------------------\n\t- **flashcardModel.ts**\n\t\t------------------------------------\n\t\texport const addFlashcard = async (flashcard: INewFlashcard) => {\n\t\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst response = await axios.post(flashcardUrl, flashcard, {\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\tresolve(\"ok\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(\"Error status \" + response.status);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(\"Unknown error.\");\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t});\n\t\t};\t\t\n\t\t------------------------------------\n\t- **PageFlashcards.tsx**\n\t\t------------------------------------------\n\t\tconst newFlashcardMutation = useMutation({\n\t\t\tmutationFn: async (newFlashcard: INewFlashcard) => {\n\t\t\t\taddFlashcard(newFlashcard);\n\t\t\t},\n\t\t\tonSuccess: async () => {\n\t\t\t\tawait queryClient.invalidateQueries({ queryKey: [\"flashcards\"] });\n\t\t\t\tawait queryClient.invalidateQueries({ queryKey: [\"flashcards\"] });\n\t\t\t},\n\t\t});\n\n\t\tconst handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst form = event.target as HTMLFormElement;\n\t\t\tconst data = Object.fromEntries(\n\t\t\t\tnew FormData(event.target as HTMLFormElement)\n\t\t\t);\n\n\t\t\tconst _newFlashcard: INewFlashcard = {\n\t\t\t\tfront: String(data.front),\n\t\t\t\tback: String(data.back),\n\t\t\t};\n\n\t\t\tnewFlashcardMutation.mutate(_newFlashcard);\n\t\t\tqueryClient.invalidateQueries({ queryKey: [\"flashcards\"] });\n\t\t\tform.reset();\n\t\t};\t\t\n\n\t\t<form\n\t\t\tonSubmit={handleSubmit}\n\t\t\tclassName=\"mt border p-4 rounded w-80 mb-4 pb-0\"\n\t\t>\n\t\t\t<div className=\"mb-4 flex gap-2 items-center\">\n\t\t\t\t<label htmlFor=\"front\" className=\"text-xl pb-1\">\n\t\t\t\t\tFront:\n\t\t\t\t</label>\n\t\t\t\t<input name=\"front\" id=\"front\" type=\"text\" />\n\t\t\t</div>\n\t\t\t<div className=\"mb-4 flex gap-2 items-center\">\n\t\t\t\t<label htmlFor=\"back\" className=\"text-xl pb-1\">\n\t\t\t\t\tBack:\n\t\t\t\t</label>\n\t\t\t\t<input name=\"back\" id=\"back\" type=\"text\" />\n\t\t\t</div>\n\t\t\t<button className=\"mb-4\">Add new flashcard</button>\n\t\t</form>\t\t\n\t\t------------------------------------------\n\t- site now works like this:#gif#finalreactquerynn","points":20,"extras":"","systemWhenCreated":"2023-11-30 00:48:18","systemWhoCreated":"systemUnknown"},{"id":787,"category":"React","title":"How to create custom React hooks","body":"- **the purpose of this howto**\n\t- to understand how to make custom hooks\n- **what we will create**\n\t- a site that has three pages which demonstrate three custom hooks: **useToggle**, **useFetch** and **useLocalStorage**\n- **GitHub project repository:**\n\t- original site: https://github.com/edwardtanguay/et770-react-custom-hooks\n\t- site created with this howto: https://github.com/edwardtanguay/et892-custom-hooks-basics\n\t- from live-coding 2023-12-04, slight variations: https://github.com/edwardtanguay/et893-custom-hooks-basics\n- **site is live here**\n\t- https://et892-custom-hooks-basics.vercel.app\n- **finished site works like this**#gif#showthesitehooks\n- **===== GOOD TO KNOW =====**\n\t- **what word do custom hooks customarily start with**\t\n\t\t- **use** as in **useToggle**\n\t- **what are three advantages of using hooks**\n\t\t- code reusability\n\t\t- abstraction of complex logic\n\t\t- testing isolation\n- **>>> 1. Create minimizied Vite React site with menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et892-custom-hooks-basics` (use your own initials and number)\n\t\t- enter a name and Create repository\n\t- clone locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et892-custom-hooks-basics.git`\n\t- open in VSCode, e.g. \n\t\t- `code et892-custom-hooks-basics`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n\t- change the pages\n\t\t- Welcome becomes **Toggle**\n\t\t- Info becomes **Fetch**\n\t\t- About becomes **LocalStorage**\n\t- **PageToggle.tsx**\n\t\t--------------------------------------\n\t\texport const PageToggle = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the toggle page.</p>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **PageFetch.tsx**\n\t\t--------------------------------------\n\t\texport const PageFetch = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the fetch page.</p>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **PageLocalStorage.tsx**\n\t\t--------------------------------------\n\t\texport const PageLocalStorage = () => {\n\t\t\treturn (\n\t\t\t\t<p>This is the local storage page.</p>\n\t\t\t)\n\t\t}\n\t\t--------------------------------------\n\t- **Nav.tsx**\n\t\t---------------------------------\n\t\t<li><NavLink to=\"/toggle\">Toggle</NavLink></li>\n\t\t<li><NavLink to=\"/fetch\">Fetch</NavLink></li>\n\t\t<li><NavLink to=\"/localstorage\">Local Storage</NavLink></li>\n\t\t---------------------------------\n\t- let's move the router to its own file\n\t\t- this separates concerns: \n\t\t\t- main.tsx is the main page of the application\n\t\t\t- Approuter.tsx is the router of the application\n\t\t- **AppRouter.tsx**\n\t\t\t----------------------------------------\n\t\t\timport { Navigate, createBrowserRouter } from \"react-router-dom\";\n\t\t\timport App from \"./App\";\n\t\t\timport { Page404 } from \"./pages/Page404\";\n\t\t\timport { PageToggle } from \"./pages/PageToggle\";\n\t\t\timport { PageFetch } from \"./pages/PageFetch\";\n\t\t\timport { PageLocalStorage } from \"./pages/PageLocalStorage\";\n\n\t\t\texport const router = createBrowserRouter([\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\terrorElement: <Page404 />,\n\t\t\t\t\telement: <App />,\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/toggle\",\n\t\t\t\t\t\t\telement: <PageToggle />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/fetch\",\n\t\t\t\t\t\t\telement: <PageFetch />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"localstorage\",\n\t\t\t\t\t\t\telement: <PageLocalStorage />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: \"/\",\n\t\t\t\t\t\t\telement: <Navigate to=\"/toggle\" replace />,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t]);\n\t\t\t----------------------------------------\n\t\t- **main.tsx**\n\t\t\t--------------------------------------\n\t\t\timport ReactDOM from \"react-dom/client\";\n\t\t\timport { RouterProvider } from \"react-router-dom\";\n\t\t\timport \"./index.scss\";\n\t\t\timport { router } from \"./AppRouter\";\n\n\t\t\tReactDOM.createRoot(document.getElementById(\"root\")!).render(\n\t\t\t\t<RouterProvider router={router} />\n\t\t\t);\t\t\n\t\t\t--------------------------------------\n\t- change the titles in **index.html** and **Header.tsx** to **Custom Hooks**\n\t- site looks like this:##thealllocl\n- **>>> 2. Create useToggle hook and use from its corresponding page**\n\t- create a global Tailwind button\n\t\t- **index.scss**\n\t\t\t--------------------------------------------------------\n\t\t\tbutton {\n\t\t\t\t@apply rounded bg-blue-500 hover:bg-blue-700 py-2 px-4 text-white;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------------\n\t- let's first create a toggle in the classic way with useState and useEffect, then we will refactor it\n\t\t- **PageToggle.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { useState } from \"react\";\n\n\t\t\texport const PageToggle = () => {\n\t\t\t\tconst [isOnline, setIsOnline] = useState(false);\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"flex gap-3 items-center\">\n\t\t\t\t\t\t\t<button onClick={() => setIsOnline(!isOnline)}>\n\t\t\t\t\t\t\t\tsign in/out\n\t\t\t\t\t\t\t</button>{\" \"}\n\t\t\t\t\t\t\t<span className=\"text-2xl\">\n\t\t\t\t\t\t\t\t{isOnline ? \"online\" : \"offline\"}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------\n\t\t- it works:#gif#theclickworksdf\n\t- now convert it step-by-step so that it uses a hook, and use the hook twice from the PageToggle page\n\t\t- **src/hooks/useToggle.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport { useState } from \"react\";\n\n\t\t\texport const useToggle = (defaultValue: boolean = false): [boolean, () => void] => {\n\t\t\t\tconst [value, setValue] = useState(defaultValue);\n\n\t\t\t\tconst toggle = () => {\n\t\t\t\t\tsetValue(!value);\n\t\t\t\t}\n\n\t\t\t\treturn [value, toggle];\n\t\t\t}\t\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **PageToggle.tsx**\n\t\t\t------------------------------------------------\n\t\t\timport { useToggle } from \"../hooks/useToggle\";\n\n\t\t\texport const PageToggle = () => {\n\t\t\t\tconst [isOnline, toggleIsOnline] = useToggle();\n\t\t\t\tconst [isProcessing, toggleIsProcessing] = useToggle();\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex gap-3 items-center mb-3\"><button onClick={() => toggleIsOnline()}>sign in/out</button> <span className=\"text-2xl\">{isOnline ? 'online' : 'offline'}</span></div>\n\t\t\t\t\t<div className=\"flex gap-3 items-center mb-3\"><button onClick={() => toggleIsProcessing()}>change processing status</button> <span className=\"text-2xl\">{isProcessing ? 'processing...' : 'finished.'}</span></div>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t\t------------------------------------------------\n\t- toggle page now works like this:#gif#thenowworksjtoglee\n- **>>> 3. Create useFetch hook and use from its corresponding page**\n\t- first let's fetch data the simplest way with useState and useEffect on one page, and then refactor this into a hook\n\t- import axios to be able to fetch data\n\t\t- `npm i axios`\n\t- create interfaces for the jobs and skills we will import\n\t\t- **interfaces.ts**\n\t\t\t--------------------------------------\n\t\t\texport interface ISkill {\n\t\t\t\tid: number;\n\t\t\t\tidCode: string;\n\t\t\t\tname: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\n\t\t\texport interface IJob {\n\t\t\t\tid: number;\n\t\t\t\ttitle: string;\n\t\t\t\tcompany: string;\n\t\t\t\tdescription: string;\n\t\t\t\tskillLlist: string;\n\t\t\t\tpublicationDate: string;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t- **PageFetch.tsx**\n\t\t------------------------------------------------\n\t\timport axios from \"axios\";\n\t\timport { useState, useEffect } from \"react\";\n\n\t\texport const PageFetch = () => {\n\t\t\tconst [skills, setSkills] = useState([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(\n\t\t\t\t\t\t\"https://edwardtanguay.vercel.app/share/skills_with_id.json\"\n\t\t\t\t\t);\n\t\t\t\t\tconst _skills = response.data;\n\t\t\t\t\tsetSkills(_skills);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn <p>There are {skills.length} skills.</p>;\n\t\t};\n\t\t------------------------------------------------\n\t- the site will show that fetch is working:##thefetch25\n\t- now create the useFetch hook and use it twice from the PageFetch page\n\t\t- **useFetch.tsx**\n\t\t\t--------------------------------------------------\n\t\t\t/* eslint-disable react-hooks/exhaustive-deps */\n\t\t\timport axios from \"axios\";\n\t\t\timport { useState, useEffect } from \"react\";\n\n\t\t\texport const useFetch = <T = unknown>(url: string, mockWait = false) => {\n\t\t\t\tconst [items, setItems] = useState<T>([] as T);\n\t\t\t\tconst [isLoading, setIsLoading] = useState(true);\n\t\t\t\tconst [timesItemsChanged, setTimesItemsChanged] = useState(0);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\tif (timesItemsChanged === 0) {\n\t\t\t\t\t\tsetTimesItemsChanged(1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t\t}\n\t\t\t\t}, [items]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(url);\n\t\t\t\t\t\tconst _items = response.data;\n\t\t\t\t\t\tif (mockWait) {\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tsetItems(_items);\n\t\t\t\t\t\t\t}, Math.floor(Math.random() * 2000) + 1000)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetItems(_items);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn { items, isLoading };\n\t\t\t};\t\n\t\t\t--------------------------------------------------\n\t\t- refactored **PageFetch.tsx**\n\t\t\t-----------------------------------------------------\n\t\t\timport { IJob, ISkill } from \"../components/interfaces\";\n\t\t\timport { useFetch } from \"../hooks/useFetch\";\n\n\t\t\texport const PageFetch = () => {\n\t\t\t\tconst { items: skills, isLoading: isLoadingSkills } = useFetch<ISkill[]>(\n\t\t\t\t\t\"https://edwardtanguay.vercel.app/share/skills_with_id.json\",\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tconst { items: jobs, isLoading: isLoadingJobs } = useFetch<IJob[]>(\n\t\t\t\t\t\"https://edwardtanguay.vercel.app/share/jobs.json\",\n\t\t\t\t\ttrue\n\t\t\t\t);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>There are {isLoadingSkills ? \"...\" : skills.length} skills.</p>\n\t\t\t\t\t\t{isLoadingJobs ? (\n\t\t\t\t\t\t\t<p>Jobs are loading...</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p>There are {jobs.length} jobs.</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------------------\n\t- the fetch page will now load like this:#gif#thefetchlaodjoa\n- **>>> 4. Create useLocalStorage hook and use from its corresponding page**\n\t- for this example, we will create the hook from the beginning\n\t- **useLocalStorage.tsx**\n\t\t----------------------------------------\n\t\t/* eslint-disable react-hooks/exhaustive-deps */\n\t\timport { useEffect, useState } from \"react\";\n\n\t\texport const useLocalStorage = (idCode: string, initialValue = \"\") => {\n\t\t\tconst [value, setValue] = useState(initialValue);\n\n\t\t\tuseEffect(() => {\n\t\t\t\tconst _value = localStorage.getItem(idCode);\n\t\t\t\tif (_value !== null) {\n\t\t\t\t\tsetValue(_value);\n\t\t\t\t}\n\t\t\t}, []);\n\n\t\t\tconst save = (value: string) => {\n\t\t\t\tsetValue(value);\n\t\t\t\tlocalStorage.setItem(idCode, value);\n\t\t\t};\n\n\t\t\treturn { value, save };\n\t\t};\n\t\t----------------------------------------\n\t- **PageLocalStorage.tsx**\n\t\t-------------------------------------------------\n\t\timport { useLocalStorage } from \"../hooks/useLocalStorage\";\n\n\t\texport const PageLocalStorage = () => {\n\t\t\tconst { value: firstName, save: saveFirstName } = useLocalStorage(\"firstName\");\n\t\t\tconst { value: status, save: saveStatus } = useLocalStorage(\"status\", 'not-available');\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"flex gap-2 mb-3\">\n\t\t\t\t\t\t<p>First Name:</p>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={firstName}\n\t\t\t\t\t\t\tonChange={(e) => saveFirstName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex mb-3\">\n\t\t\t\t\t\t<p className=\"underline cursor-pointer\" onClick={() => saveStatus(status === 'available' ? 'not-available' : 'available')}>Status</p>\n\t\t\t\t\t\t<p>: {status}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr className=\"mb-3\" />\n\t\t\t\t\t{firstName && <p>Hello, {firstName}, you are currently marked as {status === 'available' ? 'available' : 'not available'} </p>}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- localStorage page now maintains the data as show here:#gif#localsforotfage","points":20,"extras":"","systemWhenCreated":"2023-12-03 23:47:37","systemWhoCreated":"systemUnknown"},{"id":788,"category":"Testing","title":"Setup up Vitest unit-testing in a React site","body":"- **what we are going to do** \n\t- we will set up a React site which has a function library called **tool.ts** which we will test with Vitest\n\t- this is the simplest example of unit-testing in a React application\n- **code is here**\n\t- https://github.com/edwardtanguay/et119-react-site-with-vitest\n- **GOOD TO KNOW**\n\t- **why do we need unit testing at all?**\n\t\t- so we know that our functions work the way we expect them to work\n\t\t- so our site will not be published if tests don't pass\n\t- **what does unit testing test?**\n\t\t- unit testing tests the **smallest units** of an application, in most cases: **functions**\n\t- **when does one know one has written enough tests for a function to test it properly?**\n\t\t- this is in many cases a nuanced and debated issue\n\t\t\t- one can in most cases only approach 100% tested code\n\t\t- you want to test likely mistakes and edge cases: common issues, very large, very small amounts of data\n\t- **besides making your application more stable, what benefits does unit testing have?**\t\t\n\t\t- enables you to make changes quickly regardless how large your code base is\n\t\t\t- change what you want to fix a bug or get a new feature to work\n\t\t\t- your tests will inform you if your changes cause anything to break in any other part of the application\n\t\t- helps new developers more quickly get up to speed in the project\n\t\t\t- if you want to know what the application is requied to do and not do, read the tests\n\t\t\t- this is even more true for end-to-end testing, which tests the entire application programmatically from the user's point of view\n\t- **what is the difference between Vitest and Jest**\n\t\t- \"The two are API-compatible, so if you want to use Jest for some reason, no problem, everything I'm going to teach you about Vitest applies to Jest as well. But Vitest was made to go with Vite. It's made by the same people, it reads your Vite configuration, so we won't have to configure anything, it's just going to work out of the box for us, which seems pretty compelling to me. And Vite is meant to be a drop-in replacement for Jest. \" - Brian Holt, Frontend Masters\n- **>>> 1. Create React site with simple menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et119-react-site-with-vitest` (use your own initials and number)\n\t\t- enter a name and Create repository\n\t- clone locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et119-react-site-with-vitest.git`\n\t- open in VSCode, e.g. \n\t\t- `code et119-react-site-with-vitest`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n- **>>> 2. Create and use a function**\n\t- **/src/tools.ts**\n\t\t--------------------------------------------\n\t\t/**\n\t\t * capitalizeFirstLetter()\n\t\t * \n\t\t * capitalizeFirstLetter('this is a test')\n\t\t * \n\t\t * \"This is a test\"\n\t\t */\n\t\texport const capitalizeFirstLetter = (text: string) => {\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1);\n\t\t}\n\t\t--------------------------------------------\n\t- **PageWelcome.tsx**\n\t\t-----------------------------------------\n\t\timport * as tools from '../tools';\n\n\t\texport const PageWelcome = () => {\n\n\t\t\tconst message = 'welcome to this site';\n\n\t\t\treturn (\n\t\t\t\t<p>{tools.capitalizeFirstLetter(message)}</p>\n\t\t\t)\n\t\t}\t\n\t\t-----------------------------------------\n\t- note that because we `/**...*/` comment above the function, it appears when we use the function as a kind of in-place documentation##notethehelpsdj2222\n- **>>> 3. Set up Vitest testing and create test for first function**\n\t- set up Vitest\n\t\t- `npm i -D vitest`\n\t\t- `npm i -D @vitest/ui`\n\t\t- **package.json**\n\t\t\t----------------------------------------\n\t\t\t\"test\": \"vitest --ui\"\n\t\t\t----------------------------------------\n\t\t- `npm test`\n\t\t- vitest runs but finds no tests, since we haven't written any yet##thenotestjsi\n\t- write a test for capializeFirstLetter()\n\t\t- **/tools.test.ts**\n\t\t\t---------------------------------------------------\n\t\t\timport { capitalizeFirstLetter } from \"./tools\";\n\n\t\t\tdescribe('capitalizeFirstLetter', () => {\n\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------------------\n\t\t- note that it is telling us we need to install the TypeSript types for **jest** which vitest will use##isntalltypesjest\n\t\t\t- `npm i -D @types/jest`\n\t\t\t- the error will disappear\n\t\t- **tools.test.ts**\n\t\t\t-------------------------------------\n\t\t\tdescribe('capitalizeFirstLetter', () => {\n\t\t\t\tit('uppercases and lowercases correct letters', () => {\n\t\t\t\t\texpect(capitalizeFirstLetter('test')).toBe('Test');\n\t\t\t\t})\n\t\t\t});\n\t\t\t-------------------------------------\n\t- now run the tests again\n\t\t- `npm test`\n\t\t- it will tell you **describe** is not defined##testtthatnot\n\t\t- you have to add all of the commands it uses:\n\t\t\t- **tools.test.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\timport { describe, it, expect } from 'vitest';\n\t\t\t\t---------------------------------------\n\t\t- again run `npm test`\n\t\t- your terminal will show that the test passed:##thegreensidftest\n\t\t- note because we specified **--ui** in our test script, our browser opened with the following page:##theuitests\n\t- write more expectations for the test \"uppercases and lowercases correct letters\"\n\t\t- **tools.test.ts**\n\t\t\t-------------------------------------\n\t\t\texpect(capitalizeFirstLetter('Test')).toBe('Test');\n\t\t\t-------------------------------------\n\t\t- note is still shows that one tests passes\n\t\t- now add in **tools.test.ts**\n\t\t\t-------------------------------------\n\t\t\texpect(capitalizeFirstLetter('TEST')).toBe('Test');\n\t\t\t-------------------------------------\n\t\t- and you see that it fails\n\t\t\t- so we need to update our function to be able to pass this test##theitfailsjd\n\t\t- **tools.ts** - add `.toLowerCase()` to the end\n\t\t\t-----------------------------------------\n\t\t\treturn text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n\t\t\t-----------------------------------------\n\t\t- all three expectations of the one test will immediately run again and this time succeed:##allagainsucc\n\t\t- also tests multiple words \n\t\t\t- **tools.test.ts**\n\t\t\t\t------------------------------------------\n\t\t\t\texpect(capitalizeFirstLetter('two words')).toBe('Two words');\t\t\t\n\t\t\t\t------------------------------------------\n\t\t\t- the test still passes\n\t- now write another test to handle edge cases\n\t\t- **tools.test.ts**\n\t\t\t--------------------------------------\n\t\t\tit('handles all edge cases', () => {\n\t\t\t\texpect(capitalizeFirstLetter('')).toBe('');\n\t\t\t\texpect(capitalizeFirstLetter('  ')).toBe('  ');\n\t\t\t\texpect(capitalizeFirstLetter('!@#$%^&*()')).toBe('!@#$%^&*()');\n\t\t\t});\t\t\n\t\t\t--------------------------------------\n\t\t- note two tests pass now##thetwoedgespass\n\t- now write another test to handle German characters\n\t\t- **tools.test.ts**\n\t\t\t-----------------------------------------\n\t\t\tit('handles German characters', () => {\n\t\t\t\texpect(capitalizeFirstLetter('äpfel')).toBe('Äpfel');\n\t\t\t\texpect(capitalizeFirstLetter('öfter')).toBe('Öfter');\n\t\t\t\texpect(capitalizeFirstLetter('über')).toBe('Über');\n\t\t\t\texpect(capitalizeFirstLetter('ÄÄÄÄ')).toBe('Ääää');\n\t\t\t\texpect(capitalizeFirstLetter('ÖÖÖÖ')).toBe('Öööö');\n\t\t\t\texpect(capitalizeFirstLetter('ÜÜÜÜ')).toBe('Üüüü');\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------------\n\t\t- it now shows all three that pass##thethreepassss\n- **>>> 4. Set up test coverage**\n\t- Vitest has a feature to see how much of your code you are testing\n\t- `npm i -D @vitest/coverage-v8`\n\t- **package.json**\n\t\t-----------------------------------\n\t\t\"testcov\": \"vitest --coverage\"\n\t\t-----------------------------------\n\t- `npm run testcov`\n\t\t- on Windows you may get a warning that you have to allow your firewall to permit access, answer yes\n\t- we get a report showing\n\t\t- the files that we test\n\t\t- the files that we don't test\n\t\t- those that we do test, what percentage of the file we are testing\n\t\t\t- currently for tools.ts, we are at 100% coverage for that file##thatwhattest\n\t- but now let's create a new function in **tools.ts** without testing it\n\t\t-----------------------------------------------------\n\t\texport const sentencize = (text: string) => {\n\t\t\treturn 'nnn';\n\t\t}\n\t\t-----------------------------------------------------\n\t- run again: `npm run testcov`\n\t\t- you will see that you now have less than 100%\n\t\t- and it tells you which lines are not yet tested:##nowos90\n\t- commit your changes to Git\n\t\t- notice that there are now numerous files to check in because our test coverage has created a /coverage directory##thecoverrrjs\n\t\t- we don't want to check this in so add it to **.gitignore**##theaddgicov\n- **>>> 5. create and test the second function**\n\t- we will now add a second function to our tools\n\t- we will practice **Test-Driven Development (TDD)**\n\t\t- we will first write our test for this function\n\t\t- we will write as many expectations necessary to make sure \n\t\t\t- when all expectations are fulfilled, the function does what it is supposed to do\n\t\t- we will then run the tests and see that the test for this function fails of course\n\t\t- we will then write our function until all tests pass\n\t\t- when all tests pass, we know we are finished\n\t- we want to test a function that will be called **sentencize()**\n\t\t- it should **take a string of text and convert it to a sentence**\n\t\t\t- note that this is a quite vague statement, e.g.\n\t\t\t- what exactly is considered a sentence?\n\t\t\t- does it have to have period at the end?\n\t\t\t- what about a question mark or exclamation mark?\n\t\t\t- what if it ends with a colon or semi-colon, is it still a sentence?\n\t\t\t- does it need to start with a capital letter?\n\t\t\t- what if it is a Spanish question that starts with a \"¿\"?\n\t\t\t- is a text that is only one character long considered a sentence?\n\t\t\t- is a text of all numbers considered a sentence?\n\t\t\t- what does the function return if e.g. one character is not considered a sentence?\n\t\t\t\t- return that character?\n\t\t\t\t- return a blank string?\n\t\t\t\t- return a text that shows some kind of error message?\n\t\t\t\t- throw an error from the function?\n\t\t\t\t- ignore it but write in a log file what text was sent leave it\n\t\t\t- and does the application allow right-to-left languages such as Arabic or extended UTF-8 languages such as Mandarin? if so, what rules do these languages have for a string being a sentence?\n\t\t- all of these questions depend on the context and goals of the application\n\t\t\t- in many cases in a work context, what you need to test is decided: \n\t\t\t\t- by **program management** who determines the business logic of the application\n\t\t\t\t- together with the **developer team** when creating and discussing tasks for a sprint\n\t\t\t- in addition, a developer/tester should test edge cases such as\n\t\t\t\t- what happens when an **empty string**, an **extremely long string**, etc.\n\t\t\t- note also that **TypeScript** covers the basic tests, e.g.\n\t\t\t\t- you don't have to test what happens when you send e.g. a **number** or **boolean**\n\t\t\t\t- since TypeScript won't compile if you don't send a **string**\n\t\t\t\t- but realize that this only applies if you know that parameters are coming from inside the application\n\t\t\t\t\t- if parameters are coming directly from an external source such as an API, then you need to validate them with tests\n\t\t\t\t\t- but in general, you should have one point in your application where external data is cleaned and validated\n\t\t\t\t\t\t- once data gets through that entrance, it is considered trusted\n\t- let's say that program management and your developer team decide on the following functionality for the function **sentencize**:\n\t\t- (1) it receives a string as parameter\n\t\t- (2) if the first character is not capitalized, then capitalize it\n\t\t- (3) if the last character is not a period, question mark or exclamation mark, then add a period\n\t\t- (4) if the last character is a comma, semi-colon or colon, then remove it before added a period\n\t\t- (5) even if the string is one character or all numbers, treat it as a sentence, e.g. \n\t\t\t- e.g. \"who was it?\" / \"i\" --> \"Who was it?\" / \"I.\"\n\t\t\t- e.g. \"how many?\" / \"23\" -->  \"How many?\" / \"23.\"\n\t\t- (6) if it begins with \"¿\", then capitalize the second character\n\t\t\t- e.g. \"¿por qué?\" --> \"¿Por qué?\"\n\t- here are is the test you could write that would arguable fulfill the above specifications:\n\t\t- **spec 1** is covered by TypeScript\n\t\t- **specs 2-5** might be something like this:\n\t\t\t- **tools.test.ts**\n\t\t\t\t----------------------------------------------------\n\t\t\t\tdescribe('sentencize', () => {\n\t\t\t\t\tit('handles no capital and no punctuation mark', () => {\n\t\t\t\t\t\texpect(sentencize('this is a text')).toBe('This is a text.');\n\t\t\t\t\t\texpect(sentencize('hello')).toBe('Hello.');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles no capital and punctuation mark', () => {\n\t\t\t\t\t\texpect(sentencize('hello!')).toBe('Hello!');\n\t\t\t\t\t\texpect(sentencize('hello?')).toBe('Hello?');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles no capital and bad punctuation mark', () => {\n\t\t\t\t\t\texpect(sentencize('hello,')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('hello:')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('hello;')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('hello/')).toBe('Hello/.');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles capital', () => {\n\t\t\t\t\t\texpect(sentencize('Hello')).toBe('Hello.');\n\t\t\t\t\t\texpect(sentencize('Hello///')).toBe('Hello///.');\n\t\t\t\t\t\texpect(sentencize('This is a test.')).toBe('This is a test.');\n\t\t\t\t\t\texpect(sentencize('AAA')).toBe('AAA.');\n\t\t\t\t\t});\n\t\t\t\t\tit('handles task examples', () => {\n\t\t\t\t\t\texpect(sentencize('who was it?')).toBe('Who was it?');\n\t\t\t\t\t\texpect(sentencize('i')).toBe('I.');\n\t\t\t\t\t\texpect(sentencize('how many?')).toBe('How many?');\n\t\t\t\t\t\texpect(sentencize('23')).toBe('23.');\n\t\t\t\t\t});\n\t\t\t\t});\t\t\t\n\t\t\t\t----------------------------------------------------\n\t\t\t- **tests.ts**\n\t\t\t\t----------------------------------------------\n\t\t\t\t/**\n\t\t\t\t * sentencize()\n\t\t\t\t * \n\t\t\t\t * sentencize('this is a test')\n\t\t\t\t * \n\t\t\t\t * \"This is a test.\"\n\t\t\t\t */\n\t\t\t\texport const sentencize = (text: string) => {\n\t\t\t\t\tlet r = text;\n\n\t\t\t\t\tr = text.charAt(0).toUpperCase() + text.slice(1);\n\n\t\t\t\t\tif (',:;'.includes(text.slice(-1))) {\n\t\t\t\t\t\tr = r.slice(0,-1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!'.!?'.includes(text.slice(-1))) {\n\t\t\t\t\t\tr += '.'\n\t\t\t\t\t}\n\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t\t----------------------------------------------\n\t\t\t- reuse **capitalizeFirstLetter()** \n\t\t\t\t- first move capitalize-first-letter code down to bottom since we will want to do other checks first\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t\texport const sentencize = (text: string) => {\n\t\t\t\t\t\tlet r = text;\n\n\t\t\t\t\t\tif (',:;'.includes(text.slice(-1))) {\n\t\t\t\t\t\t\tr = r.slice(0,-1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!'.!?'.includes(text.slice(-1))) {\n\t\t\t\t\t\t\tr += '.'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tr = text.charAt(0).toUpperCase() + text.slice(1);\n\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t- note that you get an error\n\t\t\t\t- fix it\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\tr = r.charAt(0).toUpperCase() + r.slice(1);\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t- now reuse capitalizeFirstLetter()\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t\tr = tools.capitalizeFirstLetter(r);\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t- note we get error\n\t\t\t\t\t- it turns our our test was wrong (remember to test the tester!)\n\t\t\t\t\t\t- **tools.test.ts**\n\t\t\t\t\t\t\t---------------------------------------\n\t\t\t\t\t\t\texpect(sentencize(\"AAA\")).toBe(\"Aaa.\");\n\t\t\t\t\t\t\t---------------------------------------\n\t\t- complete **spec 6**, might be something like this:\n\t\t\t- **tools.test.ts**\n\t\t\t\t----------------------------------------------------\n\t\t\t\tit(\"handles Spanish question\", () => {\n\t\t\t\t\texpect(sentencize(\"¿por qué?\")).toBe(\"¿Por qué?\");\n\t\t\t\t});\n\t\t\t\t----------------------------------------------------\n\t\t\t- we get error##theporque\n\t\t\t- change code to pass test\n\t\t\t- however, we realize that this test should actually be in capitalizeFirstLetter()\n\t\t\t- add above test to **capiatlizeFirstLetter** as well, not it fails now\n\t\t\t- now fix the **capitalizeFirstLetter** function so it passes the test\n\t\t\t\t- **tools.ts** \n\t\t\t\t\t----------------------------------------------\n\t\t\t\t\texport const capitalizeFirstLetter = (text: string) => {\n\t\t\t\t\t\tlet tempFirstLetter = '';\n\t\t\t\t\t\tlet r = text;\n\n\t\t\t\t\t\tif (r.startsWith('¿')) {\n\t\t\t\t\t\t\ttempFirstLetter = '¿';\n\t\t\t\t\t\t\tr = r.slice(1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tr = r.charAt(0).toUpperCase() + r.slice(1).toLowerCase();\n\n\t\t\t\t\t\tif (tempFirstLetter !== '') {\n\t\t\t\t\t\t\tr = tempFirstLetter + r;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t};\n\t\t\t\t\t----------------------------------------------\n\t\t- all tests pass again:##soalltestpass\n- **>>> 6. SET UP VITEST SUCH THAT VERCEL WILL NOT PUBLISH IF ALL TESTS DO NOT PASS**\n\t- now we want to demonstrate an important reason why we write tests\n\t\t- we will set up our site so that if our tests do not pass, then our site will not build\n\t\t- we will show that e.g. if a developer makes a change that breaks the tests, but they do not run the tests themselves, yet push the broken application to GitHub, Vercel will not publish it since the tests don't pass\n\t- so first we notice that on our site we do not use our new function **sentencize()** yet:##sonotyet\n\t\t- fix this:##sosentend\n\t- let's publish to GitHub\n\t\t- first run the tests: `npm t`\n\t\t- commit change and push to GitHub\n\t- publish at Vercel\n\t\t- Add New > Project\n\t\t- Import\n\t\t- Deploy\n\t- it's online##soitsonlinekk\n\t- now let's say a developer gets the task to change **Welcome to this site.** to **Welcome to this site!**\n\t\t- they open the project, don't start any tests, and make this change:##soitwokrbut\n\t\t- they see that it worked (for them)##workedoksbformthem\n\t\t- what they don't see is that--unbeknownst to them--their change broke all the tests in **sentencize**##soalltestsbrokejks\n\t\t- if they pushed their code to GitHub, it would work, Vercel would publish it, their page on Vercel would work, but other parts of the application may not work correctly\n\t\t\t- the reason is that we can still build the application##sostillbuildj\n\t\t- now let's change the build script so that it first runs the tests, and if they fail it won't build\n\t\t\t- **package.json**\n\t\t\t\t-----------------------------------\n\t\t\t\t\"build\": \"tsc && vitest && vite build\",\n\t\t\t\t-----------------------------------\n\t\t\t- delete **/dist**\n\t\t\t- `npm run build`\n\t\t\t\t- now it won't build since the tests don't pass##sonownotest\n\t\t- commit and publish anyway, to see that Vercel will now not publish these changes\n\t\t\t- at GitHub you see that Vercel won't publish it##soallcheckss\n\t\t\t- click on **details** and Vercel will show you all the tests that failed##soseeallthatfial\n- **>>> 7. Test components**\n\t- testing components is different but similar\n\t\t- tip from Brian Holt at Frontend Masters\n\t\t\t- use [testing-library](https://www.npmjs.com/package/@testing-library/react) instead of the older [Enzyme](https://www.npmjs.com/package/enzyme)\n\t\t- watch Brian's full course here: [Intermediate React](https://frontendmasters.com/courses/intermediate-react-v5) - from December 2022\n\t\t\t- here are [my notes](https://tanguay-eu.vercel.app/howtos/767) on the course","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-05 23:52:23","systemWhoCreated":"systemUnknown"},{"id":789,"category":"Next.js","title":"Notes on Scott Moss's \"Build an AI-Powered Fullstack Next.js App\" course","body":"- info\n\t- course is from August 2023\n\t\t- using Next.js 13\n\t- code for the course project\n\t\t- https://github.com/Hendrixer/fullstack-ai-nextjs\n- https://frontendmasters.com/courses/fullstack-app-next-v3/introduction\n\t- he's now an investor\n\t- programs for himself now\n\t\t- doesn't have to work about scaling issues, just work on fun stuff\n\t- will build a larger app, like a pair programming project\n\t- project\n\t\t- blog project called \"Mood\"\n\t\t- AI will determine the mood of each post\n\t\t- signs in as Google\n\t\t- shows a graph of moods\n\t\t- can ask AI question about mood\n- https://frontendmasters.com/courses/fullstack-app-next-v3/setup-app-homepage\n\t- `npx create-next-app@latest et782-nextjs-blog-app`\n\t- his choices, not no /src directory##hischoicksjid\n\t- does quite a bit of clean up\n\t- added a .prettier\n\t\t- only uses double quotes for HTML attributes and JSON files\n- https://frontendmasters.com/courses/fullstack-app-next-v3/homepage-with-tailwind-css-link\n\t- makes all folders\n\t\t- (dashboard)\n\t- page.tsx - Home\n\t\t- <div className=\"w-screen h-screen\">##inthemiddle\n\t- `text-white/60`##the60opac\n\t- container\n\t\t- `w-full max-w-[600px] mx-auto`\n\t- button\n\t\t- `bg-blue-600 px-4 py-2 rounded-lg text-xl`\n\t\t- put it in Link tag##thelandjsp\n- https://frontendmasters.com/courses/fullstack-app-next-v3/authentication-with-clerk\n\t- \"I'm now in the boat of like never rolling your own authentication anymore unless you have a really good reason, or unless you have the best authentication engineers on the planet in your company and that's just what they like to do. Other than that, I don't think you should roll your own auth because who wants to be a security expert. So, we're going to use a service called Clerk. I don't know if anybody has heard of Clerk, but I think it's actually pretty dope, it's like Auth0 in the early days but even better than that. Auth0 took like an hour to set up, Clerk only takes about 5 minutes, it's kind of crazy.\" //quote\n\t\t- https://clerk.com##allowsthefaasb\n\t\t- uses Google and email\n\t- these are the frameworks it targets##arthtesearethe\n\t- `env.local`\n\t\t- loads automatically because local\n\t- wraps the ClerkProvider around##thelayoutindj\n\t\t- won't change children to client component\n\t- catch-all route\n\t\t- sign-up/[id]\n\t\t\t- e.g. sign-up/343\n\t\t- sign-up/[...id]\n\t\t\t- e.g. sign-up/asdf/asfwe/sfsfd\n\t\t- sign-up/[[...id]]\n\t\t\t- includes anyone who goes to sign-up\n\t- now has: sign-up/[[...sign-up]]\n\t\t- page.tsx##signupsignup\n- https://frontendmasters.com/courses/fullstack-app-next-v3/authentication-middleware\n\t- now going to protect routes\n\t- uses middleware\n\t- \"If you don't know what Middleware is in Next.js, it's basically just a function that you can run on the edge, in front of your Next.js deployment that will basically protect any routes that you have and run some kind of check, in this case we can see if someone is authenticated. So it's just a function that runs in front of any route that is navigated to.\" //quote\n\t- in root: **middleware.ts**\n\t\t- https://clerk.com/docs/references/nextjs/auth-middleware\n\t- any variable that you prefix NEXT_PUBLIC is available to you on the frontend##nextpublijds\n\t- if he goes to /journal he gets redirected##ifhegoestojournal\n\t- user is in Clerk online now\n\t- to sign out, delete cookies and localStorage\n\t- Clerk remembers where you were trying to go to\n- https://frontendmasters.com/courses/fullstack-app-next-v3/understanding-webhooks\n\t- Clerks keeps track of all users\n\t\t- so he wants to sync\n\t\t- does it through a webhook\n\t\t- but its async\n\t\t- otherwise I would have to pull\n\t\t- webhook\n\t\t\t- if you create a webhook on GitHub\n\t\t\t- I want to subscribe to someone making a comment\n\t\t\t- you get notified when something happens\n- https://frontendmasters.com/courses/fullstack-app-next-v3/serverless-database-with-planetscale\n\t- PlanetScale\n\t\t- a server SQL [SEE-kwell] database\n\t\t- \"[PlanetScale](https://planetscale.com) is a server SQL database, which means it's a database that runs on a web server. But databases are expected to maintain long, constant connections, so if it is running on a server that spins up and shuts down every time you talk to it, how can you maintain a connection to it. So to avoid that, they created server databases, which at the end of the day just means an http database. PlanetScale also uses [Vitess](https://vitess.io), which helps you scale MySQL databases in the cloud. But that's not the really cool thing about PlanetScale. The really cool thing is it treats your database like a repository. You can make branches on your database. It will determine what conflicts a change will make and write the database migrations for you. It's one of the most impressive databases I've seen. And there's a lot of databases like this now, [Neon](https://neon.tech) is like this for Postgres. And the last thing we're going to use for our database is Prisma, which is an ORM that is compatible with pretty much every database that has come out in the last 15-20 years.\" //quote\n\t\t- make account, no credit card\n\t\t- create organization\n\t\t- you can do a pull request\n\t\t- mac: brew install planetscale/tap/pscale\n\t\t- don't do the docker stuff here, too much work\n\t\t- then have database##thenhavedatabase\n\t\t- Prisma is an ORM like Mongoose for MongoDB\n\t\t- you can connect to the hosted version\n\t\t- `pscale auth login`\n\t\t- `pscale --help`\n\t\t- `pscale org switch <orgname>`\n\t\t- `pscale branch create <dbname> dev`\n\t\t- `pscale connect <dbname> dev --port 3309`\n- https://frontendmasters.com/courses/fullstack-app-next-v3/setup-prisma-orm\n\t- `npm i @prisma/client`\n\t- `npm i prisma -D`\n\t- `npx prisma init`\n\t\t- created folder prisma\n\t\t- install Prisma extension\n\t- change##psrismasch\n\t- database connection##thineenv\n\t- Prisma opts out of migrations since it knows PlanetScale\n\t- schema##uuidkjsdkfj\n\t- `npm prisma db push`\n\t- generated SDK with the same schema that you push to PlanetScale\n- https://frontendmasters.com/courses/fullstack-app-next-v3/user-journalentry-schemas\n\t- only has clerkId in User##madeusersj\n\t- @db.Text full text, very long string##thejournjdlsjdkkj\n\t- the journal entry##thejournjdlsjdkkj\n- https://frontendmasters.com/courses/fullstack-app-next-v3/analysis-schema\n\t- (skipped for now)\n- https://frontendmasters.com/courses/fullstack-app-next-v3/database-utility-methods\n\t- (skipped for now)\n- https://frontendmasters.com/courses/fullstack-app-next-v3/creating-a-new-entry\n\t- how do we set up an onClick on a server file? You can't, you have to make it a client file.\n\t\t- `'use client'` means it is like any other React component\n\t- DOING...\n\t- **api/journal/route.ts**\n\t\t---------------------------------------------\n\t\texport const POST = async () => {\n\t\t\tconst user = await getUserByClerkID()\n\t\t}\n\t\t---------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-06 23:01:18","systemWhoCreated":"systemUnknown"},{"id":790,"category":"Vue.js","title":"Add Vue.js 3 to a HTML template site that fetches data from API and enables user interactivity","body":"- **background**\n\t- Vue.js has two implementations\n\t\t- 1. a robust JavaScript framework like Angular with a rich ecosystem capable of building enterprise web applications\n\t\t- 2. a lightweight tool to add interactivity to any HTML-based site, e.g. HTML/DOM/JS sites and server-rendered sites such as PHP, ASP.NET, Django, Ruby-on-Rails, or any site that in which you have control of the HTML you send out\n- **what we will build**\n\t- we will start with a free, responsive, HTML/CSS template site from [html5up](https://html5up.net)\n\t- and add interactivity by adding Vue.js to the site via a CDN\n- **code is here**\n\t- https://github.com/edwardtanguay/et792-html-template-with-vuejs\n- **site works like this**#gif#sithsitejwithall\n- **>>> 1. Create a professional-looking HTML/CSS website from a template**\n\t- goto \n\t\t- https://html5up.net\n\t- select a template site\n\t\t- view each in Desktop, Tablet, Tablet (Portrait), and Mobile\n\t- for this howto, I will use this site:\n\t\t- https://html5up.net/directive\n\t\t- click download\n\t\t- click into the zip file\n\t\t- copy all the files to a folder in your projects file, e.g.\n\t\t\t- et792-html-template-with-vuejs\n\t- open code in VSCode\n\t\t- `code .`\n\t- create Git repository\n\t\t- `git init -b dev`\n\t\t- commit as \"initial commit\"\n\t- setup better developer experience\n\t\t- **.prettierrc**\n\t\t\t--------------------------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t\t- install Tailwind\n\t\t\t- **index.html** in <head>\n\t\t\t\t-----------------------------------------\n\t\t\t\t<script src=\"https://cdn.tailwindcss.com\"></script>\n\t\t\t\t-----------------------------------------\n\t- customize\n\t\t- let's build this responsive-first\n\t\t- change title to \"The Tech Company\"\n\t\t- h1 to \"The Tech Company\"\n\t\t- and add a ChatGPT two-sentence description\n\t- site should look like this:##htm5sitekj\n- **>>> 2. Set up Vue.js and make HTML page dynamic**\n\t- see [Vue.js 3 boilerplate text here](https://github.com/edwardtanguay/howto-html-and-vuejs-cdn/blob/master/index.html)\n\t- add Vue CDN link to head\n\t\t-----------------------------\n\t\t<script src=\"https://unpkg.com/vue@next\"></script>\n\t\t-----------------------------\n\t- wrap the HTML that Vue.js should have access to on the page in, from right after `<body>` to right before the bottom `<script>` tags\n\t\t-------------------------------------------\n\t\t<div id=\"vueapp\">\n\t\t\t...\n\t\t</div>\n\t\t-------------------------------------------\n\t- add the main Vue script right before the other `<script>` tags:\n\t\t----------------------------\n\t\t<script>\n\t\t\tVue.createApp({\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tquote: \"this is a test quote\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).mount('#vueapp').initialize();\n\t\t</script>\t\n\t\t----------------------------\n\t- note the above code defines a **state variable** named `quote` that can be used anywhere in the **vueapp** block\n\t- replace the \"we conduct experiments\" text with the quote variable:\n\t\t------------------------------------------\n\t\t<h2>{{quote}}</h2>\n\t\t------------------------------------------\n\t- you should see the test text appear here:##thetesttesxtoksu\n- **>>> 3. Replace test quote with a random quote that changes each time page is reloaded**\n\t- first add an initilize() method (works like a constructor) and define a new text quote inside of it:\n\t\t--------------------------------------------\n\t\tVue.createApp({\n\t\t\tdata() {\n\t\t\t\treturn {\n\t\t\t\t\tquote: \"\",\n\t\t\t\t};\n\t\t\t},\n\t\t\tmethods: {\n\t\t\t\tinitialize() {\n\t\t\t\t\tthis.quote = \"test quote created in initialize()\";\n\t\t\t\t},\n\t\t\t},\n\t\t}).mount(\"#vueapp\").initialize();\n\t\t--------------------------------------------\n\t\t- you will see this new test quote appear:##snewtextsuiq\n\t- now generate a random test quote\n\t\t- first create a random number function and use it in a test\n\t\t------------------------------------------------\n\t\tmethods: {\n\t\t\tinitialize() {\n\t\t\t\tthis.quote = \"quote #\" + this.getRandomNumberBetween(1,10)\n\t\t\t},\n\t\t\tgetRandomNumberBetween(min, max) {\n\t\t\t\treturn (\n\t\t\t\t\tMath.floor(Math.random() * (max - min + 1)) + min\n\t\t\t\t);\n\t\t\t},\n\t\t},\t\t\n\t\t------------------------------------------------\n\t\t- site will work like this:#gif#therranrannum\n\t- define random test quotes as array and get quotes from a function **getRandomQuote()**\n\t\t-------------------------------------------------\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tquote: \"\",\n\t\t\t\tquotes: [\n\t\t\t\t\t'quote 1',\n\t\t\t\t\t'quote 2',\n\t\t\t\t\t'quote 3',\n\t\t\t\t\t'quote 4',\n\t\t\t\t\t'quote 5',\n\t\t\t\t]\n\t\t\t};\n\t\t},\n\t\tmethods: {\n\t\t\tinitialize() {\n\t\t\t\tthis.quote = this.getRandomQuote();\n\t\t\t},\n\t\t\tgetRandomNumberBetween(min, max) {\n\t\t\t\treturn (\n\t\t\t\t\tMath.floor(Math.random() * (max - min + 1)) + min\n\t\t\t\t);\n\t\t\t},\n\t\t\tgetRandomQuote() {\n\t\t\t\tconst randomIndex = this.getRandomNumberBetween(0,this.quotes.length - 1);\n\t\t\t\treturn this.quotes[randomIndex];\n\t\t\t}\n\t\t},\t\t\n\t\t-------------------------------------------------\n\t- replace test quote array with an array of quotes generated with ChatGPT: \n\t\t- `\"js array of 5 motivational quotes\"`\n\t\t- e.g. something like this:\n\t\t\t-----------------------------------------\n\t\t\tquotes: [\n\t\t\t\t\"The only way to achieve the impossible is to believe it is possible. - Charles Kingsleigh\",\n\t\t\t\t\"Don't watch the clock; do what it does. Keep going. - Sam Levenson\",\n\t\t\t\t\"Success is not in what you have, but who you are. - Bo Bennett\",\n\t\t\t\t\"You are never too old to set another goal or to dream a new dream. - C.S. Lewis\",\n\t\t\t\t\"The only limit to our realization of tomorrow will be our doubts of today. - Franklin D. Roosevelt\",\n\t\t\t],\t\t\t\n\t\t\t-----------------------------------------\n\t- refreshing page will now show something like this:#gif#thenmamnyquotes\n- **>>> 4. Load employees via API and display on site in a list**\n\t- replace \"the first thing\" text with \"Our nnn Employees:\" \n\t\t- in the next step, we will replace \"nnn\" with the number of employees we fetch\n\t\t\t------------------------------------\n\t\t\t<h3>{{employeeTitle}}</h3>\n\n\t\t\temployeeTitle: \"\"\n\n\t\t\tthis.employeeTitle = \"Our nnn Employees:\"\n\t\t\t------------------------------------\n\t\t\t- site looks like this:##thennnemplshs\n\t- now load mock employees and display number of them in title\n\t\t---------------------------------------\n\t\temployees: []\n\n\t\tinitialize() {\n\t\t\tthis.quote = this.getRandomQuote();\n\t\t\tthis.loadEmployees();\n\t\t\tthis.employeeTitle = `Our ${this.employees.length} Employees:`\n\t\t},\n\t\tloadEmployees() {\n\t\t\tthis.employees = ['one', 'two', 'three'];\n\t\t},\n\t\tgetRandomNumberBetween(min, max) {\n\t\t\treturn (\n\t\t\t\tMath.floor(Math.random() * (max - min + 1)) + min\n\t\t\t);\n\t\t},\n\t\t---------------------------------------\n\t\t- site looks like this:##thnow3smkdemple\n\t- now load the employees asynchronously from an API\n\t\t-------------------------------------------------------\n\t\tinitialize() {\n\t\t\tthis.quote = this.getRandomQuote();\n\t\t\tthis.loadEmployees();\n\t\t},\n\t\tloadEmployees() {\n\t\t\t(async () => {\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t\"https://edwardtanguay.vercel.app/share/employees.json\"\n\t\t\t\t);\n\t\t\t\tthis.employees = await response.json();\n\t\t\t\tthis.employeeTitle = `Our ${this.employees.length} Employees:`;\n\t\t\t})();\n\t\t},\t\t\n\t\t-------------------------------------------------------\n\t\t- notes that we had to move **this.employeeTitle** into the async block, otherwise it is defined a few milliseconds after our employee array arrives\n\t\t- site looks like this:##nowith9emplsd\n\t- now display the employees\n\t\t- first display the first names only to see that they list out\n\t\t\t---------------------------------------------\n\t\t\t<div class=\"content\">\n\t\t\t\t<h3>{{employeeTitle}}</h3>\n\t\t\t\t<div v-for=\"employee in employees\">\n\t\t\t\t\t<p>{{employee.firstName}}</p>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\t\n\t\t\t---------------------------------------------\n\t\t\t- employee section will look like this:##thempleosec\n\t- now list out employees with images and styled info boxes\n\t\t--------------------------------------------------\n\t\t<div class=\"content\">\n\t\t\t<h3>{{employeeTitle}}</h3>\n\t\t\t<div\n\t\t\t\tclass=\"flex mb-4 items-center bg-gray-600 text-gray-300 rounded\"\n\t\t\t\tv-for=\"employee in employees\"\n\t\t\t>\n\t\t\t\t<img\n\t\t\t\t\tclass=\"w-20 rounded-l\"\n\t\t\t\t\t:src=\"`https://edwardtanguay.vercel.app/share/images/employees/employee_${employee.employeeID}.jpg`\"\n\t\t\t\t/>\n\t\t\t\t<div class=\"w-full\">\n\t\t\t\t\t<p class=\"font-bold text-yellow-400\">{{employee.firstName}} {{employee.lastName}}</p>\n\t\t\t\t\t<p class=\"italic opacity-80\">{{employee.title}}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t--------------------------------------------------\n\t\t- employee section will look like this:##thelistjemployeokut\n- **>>> 5. Make employee images clickable which toggles title and telephone info**\n\t- decorate the employees with a status field `showContactInfo`\n\t\t-------------------------------\n\t\tfor (const employee of this.employees) {\n\t\t\temployee.showContactInfo = true;\n\t\t}\t\t\t\n\t\t-------------------------------\n\t- show notes if employee.showNotes is true\n\t\t--------------------------------\n\t\t<div class=\"w-full\">\n\t\t\t<p class=\"font-bold text-yellow-400\">\n\t\t\t\t{{employee.firstName}}\n\t\t\t\t{{employee.lastName}}\n\t\t\t</p>\n\t\t\t<div v-if=\"employee.showContactInfo\">\n\t\t\t\t<p>{{employee.address.phone}}</p>\n\t\t\t</div>\n\t\t\t<div v-if=\"!employee.showContactInfo\">\n\t\t\t\t<p class=\"italic opacity-80\">\n\t\t\t\t\t{{employee.title}}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\t\n\t\t--------------------------------\n\t\t- you can now switch back and forth#gif#showContactInfo222\n\t- now make it so when image is clicked, notes and title are toggled\n\t\t----------------------------------------------\n\t\t<img\n\t\t\tclass=\"w-20 rounded-l cursor-pointer\"\n\t\t\t@click=\"employee.showContactInfo = !employee.showContactInfo\"\n\t\t----------------------------------------------\n\t- toggling will work like this:#gif#thetogleclick","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-06 23:44:46","systemWhoCreated":"systemUnknown"},{"id":791,"category":"Angular","title":"Create Angular 17 site with components, directives, pipes, and a component that loads external data, and publish to Vercel","body":"- **what you will learn**\n\t- we're going to build a simple site with Angular 17 (released November 2023) that uses many of the basic concepts that are unique to Angular including CLI-created, 4-file components, ng-directives, pipes, plus learn to use Angular's class structure such as constructors and decorators like @Component, how to use props, and set up user interactivity such as button clicking, etc. and practical skills such as how to set up a routing menu and fetch and display API data on the page, build a search box that responds instantly, reference images with img tags and make sure they work both locally and when published at Vercel\n- **finished project**\n\t- full code is here:\n\t\t- from Dec 2023: https://github.com/edwardtanguay/et673-angular-site (Angular 17, live-coding)\n\t\t- from Dec 2023: https://github.com/edwardtanguay/et672-angular-site (Angular 17)\n\t\t- from Feb 2023: https://github.com/edwardtanguay/et111-angular-site (Angular 15)\n\t- live site here:\n\t\t- https://et673-angular-site.vercel.app\n\t- finished site works like this:#gif#theangularsdemo\n- **background**\n\t- this howto is useful for **React developers** to get up to speed with **Angular**\n\t- we will build **a simple but useful site** with Angular which has basic features such as:\n\t\t- **multiple pages** with navbar and URL routes\n\t\t- **user interaction** with checkboxes and buttons\n\t\t- fetched data using axios from an **external API**\n\t\t- a **search box** that filters the API-fetched data that is displayed as one types\n\t\t- **component-based organization** to keep the code organized\n\t\t- you'll learn where to **save and access images** within the site\n\t\t- you will also publish this site at **Vercel**\n\t- in building this site, you will also learn Angular concepts that are not familiar to React\n\t\t- **command-line creation** of components\n\t\t- each component consists of four files\n\t\t\t- **template file** (HTML with directives/pipes etc.)\n\t\t\t- **class file** (TypeScript)\n\t\t\t- **style file** (SCSS)\n\t\t\t- **test file** (default Karma)\n\t\t- **directives** to facilitate user interaction\n\t\t\t- creating custom directives\n\t\t- **pipes** to alter data in the template\n\t\t\t- creating custom pipes\n\t\t- **decorators** to attach meta-data to classes\n\t\t- working in an **object-oriented programming** paradigm with classes/methods instead of functional programming functions/hooks\n\t\t- Angular uses **TypeScript** by default\n- **overview of Angular concepts**\n\t- intro\n\t\t- learning Angular is in large part learning new concepts\n\t\t- coming from a React background, many of these concepts are new\n\t\t- the following are a list of concepts that one learns as one learns Angular\n\t\t- in this tutorial we will not do an example of every concept\n\t\t- we will create an example of many of them\n\t\t- but we also want to get an understanding of every concept in terms of this howto example\n\t- concepts we will cover in this howto\n\t\t- **components**\n\t\t\t- in Angular you create components as you do in React\n\t\t\t- however, in Angular, to create a component you use the CLI, e.g.\n\t\t\t\t- `ng generate component employees`\n\t\t\t- this will create a directory called **employees** and four files:##directandfiles\n\t\t\t- the four files are\n\t\t\t\t- **template** file (`.html`)\n\t\t\t\t- **style sheet** file (`.scss`)\n\t\t\t\t- **test** file (`.spec.ts`)\n\t\t\t\t- **class** file (`.ts`)\n\t\t- **templates**\n\t\t\t- a template is the HTML that builds the struture of the component\n\t\t\t- this file has an .html extension\n\t\t\t- but the HTML in the file has other capabilities such as directives (e.g. `ngIf`, `ngSwitch`, `ngFor`, etc.)\n\t\t\t\t------------------------------------------\n\t\t\t\t<div><button (click)=\"handleDevInfoButtonClick()\">Toggle dev info</button></div>\n\t\t\t\t<div *ngIf=\"showDevInfo\">\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div [ngSwitch]=\"status\">\n\t\t\t\t\t\t<span *ngSwitchCase=\"'danger'\">This info-box warns a user.</span>\n\t\t\t\t\t\t<span *ngSwitchCase=\"'success'\">Success is displayed when no action is required.</span>\n\t\t\t\t\t\t<span *ngSwitchDefault>Unknown status code: {{status}}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t------------------------------------------\n\t\t- **OOP**\n\t\t\t- where React (since 2019) is based on **functional programming** with **functions** and **hooks** as the main structural components\n\t\t\t\t- Angular is based on **object-oriented programming** with **classes** and **methods** as the main structural components\n\t\t\t- one of the four files in every component is a class file, e.g. **info-box.component.ts**\n\t\t\t\t----------------------------------------------\n\t\t\t\timport { Component } from '@angular/core';\n\t\t\t\timport { IEmployee } from 'src/shared/interfaces';\n\t\t\t\timport axios from 'axios';\n\n\t\t\t\t@Component({\n\t\t\t\t\tselector: 'app-employees',\n\t\t\t\t\ttemplateUrl: './employees.component.html',\n\t\t\t\t\tstyleUrls: ['./employees.component.scss']\n\t\t\t\t})\n\t\t\t\texport class EmployeesComponent {\n\n\t\t\t\t\temployees: IEmployee[] = [];\n\t\t\t\t\tsearchText: string = '';\n\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tconst rawEmployees = (await axios.get('https://edwardtanguay.vercel.app/share/employees.json')).data;\n\n\t\t\t\t\t\t\trawEmployees.forEach((rawEmployee: any) => {\n\t\t\t\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\t\t\t\tfirstName: rawEmployee.firstName,\n\t\t\t\t\t\t\t\t\tlastName: rawEmployee.lastName,\n\t\t\t\t\t\t\t\t\tnotes: rawEmployee.notes\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t})();\n\t\t\t\t\t}\n\n\t\t\t\t\temployeeHasSearchText(emp: IEmployee): boolean {\n\t\t\t\t\t\tconst bulkText = emp.firstName + '|' + emp.lastName + '|' + emp.notes;\n\t\t\t\t\t\treturn bulkText.toLowerCase().includes(this.searchText.toLowerCase());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t----------------------------------------------\n\t\t\t- note:\n\t\t\t\t- **employees** and **searchText** are class variables\n\t\t\t\t\t- they are referenced with the `this.` prefix, i.e. a variable in *this* class\n\t\t\t\t\t- props that are sent to components (none in this example) are also class variables\n\t\t\t\t- **employeeHasSearchText** is a class method (function that belongs to a class)\n\t\t\t\t- there is a constructor which runs when the class is created\n\t\t- **directives**\n\t\t\t- commands that add additional behavior to elements in Angular templates\n\t\t\t- two types\n\t\t\t\t- structural\n\t\t\t\t\t- e.g. **ngIf**##ngifjfidj\n\t\t\t\t- attribute\n\t\t\t\t\t- e.g. **ngStyle**##thengstyle\t\n\t\t\t- these typically perform similar functionality as conditional rendering and e.g. .map() in JSX\n\t\t- **decorators**\n\t\t\t- used to attach metadata to a class, method, accessor, property, or parameter\n\t\t\t- we apply the decorator using the form @expression, where expression is the name of the decorator\n\t\t\t- decorators are **Typescript features** and still not part of the Javascript\n\t\t\t- e.g. this is a decorator called **@Component** that is included in every class file\n\t\t\t\t- it associates a component with particular template and style files\n\t\t\t\t------------------------------------------\n\t\t\t\t@Component({\n\t\t\t\t\tselector: 'app-info-box',\n\t\t\t\t\ttemplateUrl: './info-box.component.html',\n\t\t\t\t\tstyleUrls: ['./info-box.component.scss']\n\t\t\t\t})\n\t\t\t\t------------------------------------------\n\t\t\t- e.g. @Input is a decorator for a property of a component, the equivalent of props in React##antheinputprops\n\t\t- **bindings**\n\t\t\t- allow data to flow between a component's class and its template\n\t\t\t- there are four kinds of bindings\n\t\t\t\t- **interpolation**\n\t\t\t\t\t- e.g. `{{title}}`\n\t\t\t\t- **property binding**\n\t\t\t\t\t- `[disabled]=\"isDisabled\"`\n\t\t\t\t- **event binding**\n\t\t\t\t\t- `<button (click)=\"handleDevInfoButtonClick()\">Toggle dev info</button>`\n\t\t\t\t- **two-way binding**\n\t\t\t\t\t- `<input [(ngModel)]=\"name\" />`\n\t\t- **pipes**\n\t\t\t- take in data as input and transforms it into an output\n\t\t\t- e.g. `<div>{{title | uppercase}}</div>`\t\t\n\t\t- **forms**\n\t\t\t- reactive and template-driven\n\t- concepts we won't cover in this howto but which one should know about and eventually learn as an Angular developer\n\t\t- **services**\n\t\t\t- objects that get **instantiated just once** during the lifetime of an application\n\t\t\t- they are similar to components but don't have HTML \n\t\t\t- they enable components to load and change a data source, somewhat similar to useContext\n\t\t\t- you can see an example of a service [in this howto](https://tanguay-eu.vercel.app/howtos/690) which is Angular 16, but in Angular 17 they changed to a \"standalone\" approach and so services are implemented differently \t\n\t\t- **built-in testing**\n\t\t\t- note that when components are created, they automatically create a test file\n\t\t- **the observable type with RxJS**\n\t\t\t- RxJS is a library for reactive programming using observables that makes it easier to compose asynchronous or callback-based code\n\t\t- **dependency injection**\n\t\t\t- [Dependency Injection](https://www.youtube.com/watch?v=GUcWjYHmYhY) (deutsch)\t\t\n\t\t- **animations**\n\t\t\t- Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable\n\t\t\t- this includes positions, sizes, transforms, colors, borders, and more\n- **>>> 1. Create basic Angular site**\n\t- in terminal, go to projects folder\n\t- install the Angular CLI\n\t\t- when you develop in Angular, you use the CLI (Command Line Interface)\n\t\t- check if it is installed and what version you have:\n\t\t\t- `ng version`\n\t\t\t- if it shows an error, then install the CLI like this:\n\t\t\t\t- `npm install -g @angular/cli@latest`\n\t\t\t\t- then try `ng version` again##theangnpm\n\t- create Angular site\n\t\t- to create an Angular site, type `ng new` followed by the name of the directory you want the site to have\n\t\t\t- `ng new et672-angular-site`\n\t\t\t- choose SCSS\n\t\t\t- choose no SSR or SSG for now\n\t\t\t- it installs in about 40 seconds##choosesasskjkj\n\t\t- open the project in VSCode e.g.\n\t\t\t- `code et672-angular-site`\n\t\t- note that \n\t\t\t- node_modules have been created\n\t\t\t- Git repository is installed\n\t\t- look at **package.json**##thengstart\n\t\t- to start the site\n\t\t\t- `npm start`\n\t\t\t- to start the site in your browser, ctrl-click the link##click4200222\n\t\t- the site will look like this:##angsitelikethis\n\t- note just as with Vite, to change the local port the site runs on, you use with the same syntax\n\t\t- change from 4200 to 4300\n\t\t\t- **package.json**\n\t\t\t\t--------------------------------\n\t\t\t\t\"start\": \"ng serve --port 4300\",\n\t\t\t\t--------------------------------\n\t\t- restart and the site now runs on port 4300\n\t- install VSCode Extension for Angular##angularextensions\t\t\t\n\t- publish at Vercel\n\t\t- let's publish this base site at Vercel and make sure it continues to work online as we develop\n\t\t- push to a repository on GitHub##publisbrjj222\n\t\t- publish it as private or public (either way it will publish at Vercel)\n\t\t- go to [Vercel](https://vercel.com)\n\t\t- Add New\n\t\t- Project\n\t\t- Import##thajwangverc\n\t\t- Deploy\n\t\t- Angular start site publishes without problems:##onlinejsoverc\n- **>>> 2. Examine and minimize site**\n\t- \"in Angular, you basically have an src directory and outside that a bunch of config files\"\n\t- index.html\n\t\t- note that an Angular site has an index.html like a Vite React site\n\t\t- note that `<app-root></app-root>` is similar to `<div id=\"root\"></div>` where the entire app will be injected into the div element\n\t\t- change title to \"Angular Site\"\n\t\t- note for index.html, you have to stop and restart, it's not watched\n\t- like Vite-React, has **app** component but it is a directory of files\n\t\t- every Angular component has four aspects to it, each aspect has its own file:\n\t\t\t- app.component.**html** - the view\n\t\t\t- app.component.**ts** - \"code behind\"\n\t\t\t- app.component.**scss** - specific styles for this component\n\t\t\t- app.component.**spec.ts** - testing file\n\t- **app.component.html**\n\t\t--------------------------------------\n\t\t<h1>Info Site</h1>\n\t\t<p>This is a test.</p>\t\t\t\n\t\t--------------------------------------\n\t- **app.component.scss** (only for this component)\n\t\t-----------------------------------\n\t\th1 {\n\t\t  color: green;\n\t\t}\n\t\t-----------------------------------\t\t\n\t- **src/styles.scss** (for global styles)\n\t\t--------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #333;\n\t\t\tpadding: 0 1rem;\n\t\t\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n\t\t\tfont-size: 1.4rem;\n\t\t\tcolor: #ccc;\n\t\t}\t\t\t\n\t\t--------------------------------------\n\t- site is completely restyled##sitestylejd\n\t- note that Angular has a built-in developer config file: **.editorconfig**\n\t\t- change `space` to `tab`##sitestylejdsdsf\n\t\t- note that when you save now, indentations are tabs\n\t- let's now add variables in our **code-behind file** which will be displayed in our view\n\t\t- **app.component.ts**\n\t\t\t--------------------------------------\n\t\t\texport class AppComponent {\n\t\t\t\ttitle = \"The Angular Site\";\n\t\t\t\tmessage = \"Welcome to this site.\";\n\t\t\t}\t\n\t\t\t--------------------------------------\n\t- now replace text with these variables in the view\n\t\t- **app.component.html**\n\t\t\t--------------------------------------\n\t\t\t<h2>{{title}}</h2>\n\t\t\t<p>{{message}}</p>\t\t\t\n\t\t\t--------------------------------------\n\t\t- note the double braces is the same syntax as in Vue.js\n\t- site looks like this now:##anglik222this\n\t- push to GitHub and check **Vercel**, in 20 seconds is the same##theanddoosnverc\n- **>>> 3. Install Tailwind**\n\t- we could continue styling with Sass\n\t\t- and Angular makes it a bit easier to style components with Sass since every component has a dedicated .scss style file \n\t- but Tailwind can be used in Angular just as easily as it can be used in other frameworks, so let's use it\n\t- the full instructions are here (https://tailwindcss.com/docs/guides/angular) and are very similar to installing Tailwind for Vite sites\n\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init`\n\t\t- **tailwind.config.js**\n\t\t\t------------------------------------------\n\t\t\t/** @type {import('tailwindcss').Config} */\n\t\t\texport const content = [\n\t\t\t\t\"./src/**/*.{html,ts}\",\n\t\t\t];\n\t\t\texport const theme = {\n\t\t\t\textend: {},\n\t\t\t};\n\t\t\texport const plugins = [];\t\t\n\t\t\t------------------------------------------\n\t\t- **styles.scss** - replace content with:\n\t\t\t---------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\n\t\t\t---------------------------------------\n\t\t- **app.component.scss** - also delete this components styles\n\t\t- restart site with `npm start`\n\t- site will be completely reset:##theseresangtailsite\n\t- style with Tailwind\n\t\t- **index.html**\n\t\t\t-----------------------------------\n\t\t\t<body class=\"bg-gray-400 p-4\">\n\t\t\t-----------------------------------\n\t\t- **app.component.html**\n\t\t\t-------------------------------------\n\t\t\t<h1 class=\"text-4xl mb-4\">{{title}}</h1>\n\t\t\t-------------------------------------\n\t\t- note that Angular uses **class** instead of **className** like React\n\t- site now looks like this:##thenewsiteteilas\n- **>>> 4. Create new component with props**\n\t- leave site running in one terminal\n\t\t- in new terminal, create component\n\t\t\t- `ng generate component info-box`\n\t- note that it creates a directory and four files\n\t- in the main component, add the new component\n\t\t- **app.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<app-info-box></app-info-box>\t\t\n\t\t\t-----------------------------------------\n\t\t- just as with importing components in React, you can **quick fix* it to add the import statement##createianinfo\n\t\t- note that the import statement is added not in the app.component.html file but in the **app.component.ts** file:##theimporauto\n\t\t- the content of the new component will appear now##infoboxworksjdf\n\t- **info-box.component.html**\n\t\t----------------------------\n\t\t<div class=\"mt-3 bg-green-800 p-3 w-64 rounded shadow-lg shadow-gray-700\">\n\t\t\t<h2 class=\"text-3xl text-yellow-400\">Info</h2>\n\t\t\t<p class=\"text-xl italic text-gray-300\">This is the info</p>\n\t\t</div>\t\n\t\t----------------------------\n\t- you should now see the styled component##withsadhdcomp\n\t- **add component props**\t\n\t\t- **info-box.component.ts**\n\t\t\t----------------------------------------\n\t\t\timport { Component, Input } from '@angular/core';\n\n\t\t\texport class InfoBoxComponent {\n\t\t\t  @Input() title = 'Info Box';\n\t\t\t  @Input() body = '(watch this space...)';\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **info-box.component.html**\n\t\t\t- replace texts with `{{title}}` and `{{body}}`##thesidjonejtievars\n\t\t- **app.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" body=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" body=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\t\t\n\t\t\t-----------------------------------------\n\t- site looks like this:##sitewithcompon222\n\t- push to GitHub and check at Vercel\n- **>>> 5. Use directives and bindings to make site dynamic and interactive**\n\t- note that Angular directives resemble **Vue.js** more than React\n\t- **ngStyle**\n\t\t- **app.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" status=\"danger\"\n\t\t\t\tbody=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" status=\"success\"\n\t\t\t\tbody=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\t\t\t\n\t\t\t------------------------------------------------\n\t\t- **info-box.component.ts**\n\t\t\t- note values of input variables aren't available in the constructor but only in **ngOnInit**\n\t\t\t\t--------------------------------------------\n\t\t\t\t@Input() status = '';\n\n\t\t\t\tcolor = '';\n\n\t\t\t\tngOnInit() {\n\t\t\t\t\tthis.color = this.status === 'danger' ? 'tomato' : 'lightgreen';\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t- **info-box.component.html**\n\t\t\t----------------------------------------\n\t\t\t<div [ngStyle]=\"{'color': color, 'border': '1px solid ' + color}\">\t\t\t\n\t\t\t----------------------------------------\n\t\t- if you get this error##ifgetsjdidfj\n\t\t\t- you have to add **CommonModule**##addthecommonsdf\n\t\t- site looks like this:##lthelikethisnow\n\t- **ngIf**\n\t\t- if status is \"danger\" we will include the text \"Please read:\"\n\t\t- **info-box.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<div *ngIf=\"status === 'danger'\">please read</div>\n\t\t\t-----------------------------------------\n\t\t- should look like this:##nowlookslislikethis222\n\t- **ngSwitchCase**\n\t\t- report status at bottom of info-box\n\t\t- **info-box.component.html**\n\t\t\t------------------------------------------\n\t\t\t<div [ngSwitch]=\"status\" class=\"border-t border-green-900 mt-5 pt-2 text-black\">\n\t\t\t\t<span *ngSwitchCase=\"'danger'\">This info-box warns a user.</span>\n\t\t\t\t<span *ngSwitchCase=\"'success'\">Success is displayed when no action is required.</span>\n\t\t\t\t<span *ngSwitchDefault>Unknown status code: {{ status }}</span>\n\t\t\t</div>\n\t\t\t------------------------------------------\t\t\n\t\t- **app.component.html**\n\t\t\t-------------------------------------------\n\t\t\t<app-info-box title=\"Section 2\" status=\"unfinished\"\n\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\t\t\t\n\t\t\t-------------------------------------------\n\t\t- update color definition: \n\t\t\t- **info-box.component.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\tthis.color = this.status === 'danger' ? 'tomato' : this.status === 'success' ? 'lightgreen' : '#222';\n\t\t\t\t-----------------------------------------\n\t\t- should look like this:##tehngswithwithtes222\n\t- **(click)**\n\t\t- create a button to toggle the developer info\n\t\t- first make appearance of developer info based on a component class variable\n\t\t\t- **info-box.component.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tshowDevInfo = true;\n\t\t\t\t--------------------------------------------\n\t\t\t- **info-box.component.html**\n\t\t\t\t--------------------------------------------\n\t\t\t\t<div *ngIf=\"showDevInfo\">\n\t\t\t\t\t<div [ngSwitch]=\"status\" class=\"border-t border-green-900 mt-5 pt-2 text-black\">\n\t\t\t\t\t\t<span *ngSwitchCase=\"'danger'\">This info-box warns a user.</span>\n\t\t\t\t\t\t<span *ngSwitchCase=\"'success'\">Success is displayed when no action is required.</span>\n\t\t\t\t\t\t<span *ngSwitchDefault>Unknown status code: {{ status }}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t--------------------------------------------\n\t\t\t- changing **showDevInfo** to true and false will now toggle the text\n\t\t- now add the button\n\t\t- add a global Tailwind button style\n\t\t\t- **styles.scss**\n\t\t\t\t---------------------------------------------\n\t\t\t\t@layer base {\n\t\t\t\t\tbutton {\n\t\t\t\t\t\t@apply bg-blue-500 hover:bg-blue-700 text-white py-1 px-2 rounded\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t- **info-box.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<div><button class=\"mt-3\" (click)=\"showDevInfo = !showDevInfo\">Toggle dev info</button></div>\n\t\t\t--------------------------------------------\n\t\t- the button should work like this:#gif#thethresthatgo\n\t\t- you can also call a function e.g. if you need to execute more than one command\n\t\t\t- **info-box.component.html**\n\t\t\t\t--------------------------------------------\n\t\t\t\t<div><button (click)=\"handleDevInfoButtonClick()\">Toggle dev info</button></div>\n\t\t\t\t--------------------------------------------\n\t\t\t- **info-box.component.ts**\n\t\t\t\t---------------------------------\n\t\t\t\thandleDevInfoButtonClick = () => {\n\t\t\t\t\tthis.showDevInfo = !this.showDevInfo;\n\t\t\t\t\tconsole.log(`button for info-box \"${this.title}\" clicked`);\n\t\t\t\t}\t\t\t\t\n\t\t\t\t---------------------------------\n\t\t- which should work like this:#gif#anothertehree\n\t- **ngClass**\n\t\t- enable an info-box to be highlighted\n\t\t- **app.component.html**\n\t\t\t-------------------------------------------\n\t\t\t<app-info-box title=\"Introduction\" status=\"danger\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This is the introduction section which will explain some topics.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 1\" status=\"success\" highlight=\"true\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This will deal with the rules we have to follow on the first section.\"></app-info-box>\n\t\t\t<app-info-box title=\"Section 2\" status=\"unfinished\" highlight=\"false\"\n\t\t\t\t\t\t\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **info-box.component.ts**\n\t\t\t------------------------------\n\t\t\t@Input() highlight = '';\n\n\t\t\tisHighlighted = false;\n\n\t\t\tthis.isHighlighted = this.highlight === 'true';\n\t\t\t------------------------------\n\t\t- **info-box.component.html**\n\t\t\t----------------------------------\n\t\t\t<div\n\t\t\t\tclass=\"mt-4 bg-green-800 p-3 w-80 rounded shadow-lg shadow-gray-700\"\n\t\t\t\t[ngClass]=\"{'highlighted' : isHighlighted}\"\n\t\t\t\t[ngStyle]=\"{ color: color, border: '3px solid ' + color }\"\n\t\t\t>\n\t\t\t----------------------------------\t\t\n\t\t- **info-box.component.scss**\n\t\t\t----------------------------------\n\t\t\t.highlighted {\n\t\t\t\tbox-shadow: 1px 1px 10px yellow;\n\t\t\t}\n\t\t\t----------------------------------\n\t\t- site should look like this:##onehighighsd222\n- **>>> 6. Create three pages, a navigation menu and routes**\n\t- create menu component\n\t\t- `ng generate component top-menu`\n\t\t- **top-menu.component.html**\n\t\t\t---------------------------------------------\n\t\t\t<nav>\n\t\t\t\t<ul routerLinkActive=\"active\">\n\t\t\t\t\t<li><a routerLink=\"home\">Home</a></li>\n\t\t\t\t\t<li><a routerLink=\"info\">Info</a></li>\n\t\t\t\t\t<li><a routerLink=\"employees\">Employees</a></li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\n\t\t\t<router-outlet></router-outlet>\t\n\t\t\t---------------------------------------------\n\t\t- style the menu\n\t\t\t- **app.component.html**\n\t\t\t\t---------------------------------------\n\t\t\t\t<app-top-menu></app-top-menu>\n\t\t\t\t---------------------------------------\n\t\t\t- you will see this error:##fixrouterejs\n\t\t\t- to fix it\n\t\t\t\t- **top-menu.component.ts**\n\t\t\t\t\t------------------------------------------------\n\t\t\t\t\timport { RouterModule } from '@angular/router';\n\n\t\t\t\t\timports: [ RouterModule],\n\t\t\t\t\t------------------------------------------------\n\t\t- menu looks like this:##thesimplemenujjj\n\t\t- style menu\n\t\t\t- **top-menu.component.html**\n\t\t\t----------------------------------------\n\t\t\t<ul routerLinkActive=\"active\" class=\"flex gap-3 bg-gray-700 text-gray-300 p-3\">\n\t\t\t----------------------------------------\n\t\t- set up interactive menu\n\t\t\t- create all pages\n\t\t\t\t- `ng generate component home`\n\t\t\t\t- `ng generate component info`\n\t\t\t\t- `ng generate component employees`\n\t\t\t- **app.routes.ts**\n\t\t\t\t-----------------------------------------------\n\t\t\t\t{ path: '', redirectTo: 'home', pathMatch: 'full' },\t\t\t\n\t\t\t\t{ path: 'home', component: HomeComponent },\n\t\t\t\t{ path: 'info', component: InfoComponent },\n\t\t\t\t{ path: 'employees', component: EmployeesComponent }\n\t\t\t\t-----------------------------------------------\n\t\t\t- the menu now brings up contents of the created pages#gif#thesimplsmenu\n\t- integrate site into menu\n\t\t- **home.component.html**\n\t\t\t----------------------------------------\n\t\t\t<p class=\"mt-4\">Welcome to this site.</p>\n\t\t\t----------------------------------------\n\t\t- move from home page to **info.component.html**\n\t\t\t----------------------------------------\n\t\t\t<div class=\"mt-6\">\n\t\t\t\t<app-info-box\n\t\t\t\t\ttitle=\"Introduction\"\n\t\t\t\t\tbody=\"This is the introduction section which will explain some topics.\"\n\t\t\t\t\tstatus=\"danger\"\n\t\t\t\t></app-info-box>\n\n\t\t\t\t<app-info-box\n\t\t\t\t\ttitle=\"Section 1\"\n\t\t\t\t\tbody=\"This will deal with the rules we have to follow on the first section.\"\n\t\t\t\t\thighlight=\"true\"\n\t\t\t\t\tstatus=\"success\"\n\t\t\t\t></app-info-box>\n\n\t\t\t\t<app-info-box\n\t\t\t\t\ttitle=\"Section 2\"\n\t\t\t\t\tstatus=\"unfinished\"\n\t\t\t\t\thighlight=\"false\"\n\t\t\t\t\tbody=\"This is still unfinished.\"\n\t\t\t\t></app-info-box>\n\t\t\t</div>\n\t\t\t----------------------------------------\n\t\t- **employees.component.html**\n\t\t\t----------------------------------------\n\t\t\t<p class=\"mt-4\">This is the employees page.</p>\n\t\t\t----------------------------------------\n\t\t- site looks like this:#gif#thelifjsitenow\n\t- make menu item of selected page highlighted\n\t\t- **top-menumenu.component.html**\n\t\t\t- add `routerLinkActive=\"active-link\"` to each `<a>` tag\n\t\t- **top-menumenu.component.scss**\n\t\t\t-----------------------------------------\n\t\t\ta.active-link {\n\t\t\t\tcolor: rgb(216, 165, 56);\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------------\n\t- menu now works like this:#gif#nwotijsthebhigh\n- **>>> 7. Pipes**\n\t- pipes enable you to easily tranform data in the template\n\t- make the titles uppercase\n\t\t- **info-box.component.html**\n\t\t\t-----------------------------------------------\n\t\t\t<div>{{title | uppercase}}</div>\n\t\t\t-----------------------------------------------\n\t\t- looks like this:##thecapskdjf\n\t- display date in various formats on home page\n\t\t- **home.component.ts**\n\t\t\t------------------------------------------------\n\t\t\tnow = '2023-02-23 13:21:01';\n\t\t\t------------------------------------------------\n\t\t- **home.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<p>Current time is {{now}}.</p>\n\t\t\t<p>Today is {{now | date}}.</p>\n\t\t\t<p>Today is {{now | date | uppercase}}.</p>\n\t\t\t<p>Today is {{now | date : 'longDate' | uppercase}}.</p>\n\t\t\t------------------------------------------------\n\t\t- you should get errors on the pipes##thedateerorr\n\t\t- to fix this, also add the common module to **home.component.ts**\n\t\t\t-----------------------------------------\n\t\t\timport { CommonModule } from '@angular/common';\n\n\t\t\timports: [ CommonModule],\t\t\t\n\t\t\t-----------------------------------------\n\t\t- looks like this:##thedatesnowjdfi\n\t- custom date formats\n\t\t- **home.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<p>The file name is <code class=\"text-yellow-300 bg-black p-1 rounded\">{{ now | date : \"logfile-yyyy-MM-dd-HH-mm-ss.txt\" }}</code>.</p>\n\t\t\t------------------------------------------------\t\n\t\t- looks like this:##thecodesfile\n\t- display German dates\n\t\t- **home.component.ts**\n\t\t\t------------------------------------------------\n\t\t\timport { registerLocaleData } from '@angular/common';\n\t\t\timport localeDe from '@angular/common/locales/de';\n\n\t\t\tregisterLocaleData(localeDe);\n\t\t\t------------------------------------------------\n\t\t- **home.component.html**\n\t\t\t------------------------------------------------\n\t\t\t<p>Heute ist der {{now | date : 'longDate' : '+02:00' : 'de'}}.</p>\n\t\t\t------------------------------------------------\n\t\t- looks like this:##withtjgemsdate\n\t- custom pipes\n\t\t- on the info page, we want to create a pipe to convert the titles from **Section 1** to **Section One**, etc.\n\t\t- this pipe will be called **numtoname**\n\t\t- create **src\\shared\\numtoname.pipe.ts**\n\t\t\t----------------------------------------\n\t\t\timport { Pipe, PipeTransform } from '@angular/core';\n\n\t\t\tPipe({ name: 'numtoname', standalone: true })\n\n\t\t\texport class NumtonamePipe implements PipeTransform {\n\t\t\t\ttransform(text: string): string {\n\t\t\t\t\tlet newText = text;\n\t\t\t\t\tnewText = newText.replace('1', 'one');\n\t\t\t\t\tnewText = newText.replace('2', 'two');\n\t\t\t\t\tnewText = newText.replace('3', 'three');\n\t\t\t\t\treturn newText;\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- make the new pipe available throughout your application\n\t\t\t- **info-box.component.ts**\n\t\t\t\t-------------------------------------------------\n\t\t\t\timport { NumtonamePipe } from '../shared/numtoname.pipe';\n\n\t\t\t\timports: [CommonModule, NumtonamePipe],\n\t\t\t\t-------------------------------------------------\n\t\t- use the pipe in **info-box.component.html**\n\t\t\t-----------------------------------------\n\t\t\t<div>{{title | numtoname | uppercase}}</div>\n\t\t\t-----------------------------------------\n\t\t- now add another info box that has a 3 in the title\n\t\t\t- **info.component.html**\n\t\t\t\t------------------------------------------\n\t\t\t\t<app-info-box title=\"Section 3\" status=\"unfinished\" highlight=\"false\"\n\t\t\t\t\t\t\tbody=\"This is still unfinished.\"></app-info-box>\n\t\t\t\t------------------------------------------\n\t\t- the info looks like this now:##liekaddedthreek\n- **>>> 8. Fetch data from external API and display on page**\n\t- on the Employees page, we want to display employee data that we fetch from an external API\n\t- for the first step, let's display data that comes from a mock JavaScript array of objects\n\t\t- create interface for employees\n\t\t\t**src\\shared\\interfaces.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\texport interface IEmployee {\n\t\t\t\t\tfirstName: string;\n\t\t\t\t\tlastName: string;\n\t\t\t\t\tnotes: string;\n\t\t\t\t}\n\t\t\t\t---------------------------------------\n\t\t- load employees in Employees page constructor\n\t\t\t- **employees.component.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport { IEmployee } from 'src/shared/interfaces';\n\n\t\t\t\temployees: IEmployee[] = [];\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tthis.employees = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstName: \"Frank\",\n\t\t\t\t\t\t\tlastName: \"Holander\",\n\t\t\t\t\t\t\tnotes: \"These are Frank's notes.\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfirstName: \"Selma\",\n\t\t\t\t\t\t\tlastName: \"Schmidt\",\n\t\t\t\t\t\t\tnotes: \"These are Selma's notes.\"\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t---------------------------------------------\n\t\t- display the employees in the template\n\t\t\t- **employees.component.html**\n\t\t\t\t----------------------------------------------\n\t\t\t\t<p>This is the employees page.</p>\n\t\t\t\t<div *ngFor=\"let emp of employees\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>{{emp.firstName}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t----------------------------------------------\n\t\t\t- note you have to import **CommonModule** again\n\t\t\t- page looks like this:##thetwoempeoe\n\t\t- complete the template with full info\n\t\t\t- **employees.component.html**\n\t\t\t\t----------------------------------------------\n\t\t\t\t<p>There are {{employees.length}} employees:</p>\n\t\t\t\t<div *ngFor=\"let emp of employees\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>{{emp.firstName}} {{emp.lastName}}</div>\n\t\t\t\t\t\t<div>{{emp.notes}}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t----------------------------------------------\n\t\t- Employees page with **mock data** looks like this:##thenotesfins\n\t- now let's load the employees data from the external API\n\t\t- `npm i axios`\n\t\t- **employees.component.ts**\n\t\t\t-------------------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\t(async () => {\n\t\t\t\tconst rawEmployees = (await axios.get('https://edwardtanguay.vercel.app/share/employees.json')).data;\n\n\t\t\t\trawEmployees.forEach((rawEmployee: any) => {\n\t\t\t\t\tthis.employees.push({\n\t\t\t\t\t\tfirstName: rawEmployee.firstName,\n\t\t\t\t\t\tlastName: rawEmployee.lastName,\n\t\t\t\t\t\tnotes: rawEmployee.notes\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t})();\t\t\t\n\t\t\t-------------------------------------------\n\t\t- page now looks like this:##thefulempldoy\n- **>>> 9. Use ngModel directive to create a search box**\n\t- **employees.component.ts**\n\t\t--------------------------------------------\n\t\tsearchText: string = '';\n\t\t--------------------------------------------\n\t- **employees.component.html**\n\t\t--------------------------------------------\n\t\t<input type=\"text\" class=\"mt-2 text-2xl rounded\" [(ngModel)]=\"searchText\"/>\n\t\t--------------------------------------------\n\t- register to use forms so that we get the bi-directional binding (as with React's change-state-variable-with-e-target-value solution)\n\t\t- **app.module.ts**\n\t\t\t--------------------------------------------\n\t\t\timport { FormsModule } from '@angular/forms';\n\n\t\t\timports: [CommonModule, FormsModule],\n\t\t\t--------------------------------------------\n\t- when searching, replace the info line informing the user of the text it is searching\n\t\t- **employees.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<p *ngIf=\"searchText === ''\">There are {{employees.length}} employees:</p>\n\t\t\t<p *ngIf=\"searchText !== ''\">Searching for \"{{searchText}}\"...</p>\n\t\t\t--------------------------------------------\n\t\t- works like this:#gif#worksswitchfittl\n\t- now only display the employees which contain the search text\n\t\t- **employees.component.html**\n\t\t\t--------------------------------------------\n\t\t\t<div *ngFor=\"let emp of employees\">\n\t\t\t\t<div class=\"mt-3 bg-blue-950 w-5/12 rounded p-3\" *ngIf=\"employeeHasSearchText(emp)\">\n\t\t\t\t\t<p class=\"text-yellow-300 text-2xl\">\n\t\t\t\t\t\t{{ emp.firstName }} {{ emp.lastName }}\n\t\t\t\t\t</p>\n\t\t\t\t\t<p class=\"text-gray-300 italic\">{{ emp.notes }}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t--------------------------------------------\n\t\t- **employees.component.ts**\n\t\t\t--------------------------------------------\n\t\t\temployeeHasSearchText(emp: IEmployee): boolean {\n\t\t\t\tconst bulkText = emp.firstName + '|' + emp.lastName + '|' + emp.notes;\n\t\t\t\treturn bulkText.toLowerCase().includes(this.searchText.toLowerCase());\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- search works like this:#gif#thebasicaseserch\n- **>>> 10. Display local images from the site in image tags**\n\t- we want to display a simple image from an img tag\n\t- in Vite and create-react-app **React** sites, one has to save the images in the /public directory, e.g. under **/public/images**\n\t- in **Angular** apps, the **/src/assets** directory is used, e.g. save images under **/src/assets/images**\n\t- save an image here: **/src/assets/images/angular.png**\n\t- **home.component.html**\n\t\t---------------------------------------\n\t\t<img class=\"mt-3 rounded-lg shadow-lg shadow-gray-800\" src=\"assets/images/angular.png\"/>\n\t\t---------------------------------------\n\t- your home page will look like this:##withtheanguks\n\t- note that images displayed in this way will also work when published at **Vercel**##tehansonline","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-10 13:18:02","systemWhoCreated":"systemUnknown"},{"id":793,"category":"Next.js","title":"Build a Next.js 14 site with app router, TypeScript, Sass, Tailwind, useContext and API fetching","body":"- **purpose of this howto**\n\t- the **target audience** of this howto are people who **use Vite React but have never used Next.js**\n\t- this howto will get you to the point where you can **chose Next.js instead of Vite** to build your next React website\n\t\t- this is a smart, future-oriented decision since when starting a new project, [the React team recommends you use Next.js](https://react.dev/learn/start-a-new-react-project) or some other **server-side** framework such as Remix or Gatsby, but doesn't mention Vite at all\n\t\t- it is particularly a good decision to learn Next.js, since Next.js is produced by **Vercel** \n\t\t\t- **Vercel** provides a hosting platform for Next.js sites with a generous free tier that allows you to learn and take advantage of **server-side features** of Next.js\n\t\t- this trend toward using **server-side features** is not only the direction of React, but of the other major frameworks:\n\t\t\t- Vue --> [Nuxt](https://cubettech.com/resources/blog/why-might-you-consider-nuxt-for-your-next-vue-project)\n\t\t\t- Angular --> [Angular 17](https://dev.to/this-is-learning/exploring-angular-17-a-glimpse-into-the-future-of-web-development-part-3-2n4c)\n\t\t\t- Svelte --> [Svelte Kit](https://www.okupter.com/blog/svelte-vs-sveltekit-the-difference)\n\t\t\t- React --> [Next.js](https://radixweb.com/blog/nextjs-vs-react)\n\t- but **server-side** features\n\t\t- while they have their **advantages**\n\t\t\t- better **SEO**\n\t\t\t- **faster** load times\n\t\t\t- **progressive** loading experience\n\t\t\t- better **authorization** options (server-side middleware)\n\t\t- are also **not uncomplicated** and **require new ways of understanding** how website content is most efficiently delivered to the user\n\t\t\t- knowing **what is rendered on the server**, what is rendered on the client\n\t\t\t- being how to decide **what should be rendered on the server** vs. the client to improve user experience\n\t\t\t- understanding what kind of **backend environment** exists for the server-side features, e.g. file-system vs. [the edge](https://upstash.com/blog/vercel-edge)\n\t\t\t- understanding how **data-fetching** changes in a server-side environment and its increasingly close relationship to **page routing**\n\t\t\t- understanding how the **hydration process** works\n\t\t\t- understanding how **wrongly applying client-side paradigms** to server-side frameworks can cause problems\n\t- therefore \n\t\t- this howto is **not about teaching you the server-side features** of Next.js\n\t\t- this howto is about \n\t\t\t- showing you how to **do everything in Next.js that you know how to do in Vite React**\n\t\t\t- and hence, giving you the option to **choose Next.js instead of Vite React** for your future projects\n\t\t\t- which will give you the opportunity to **begin learning and using server-side features** in your future projects\n- **what we will do in this howto**\n\t- as mentioned above, we will learn how to **do everything in Next.js that you know how to do in Vite React** including setting up a site the following features:\n\t\t- TypeScript\n\t\t- Tailwind\n\t\t- Sass\n\t\t- clickable menu that displays pages\n\t\t- items pages with an id in the URL\n\t\t- useContext\n\t\t- fetch API data with useEffect, useState, axios\n\t\t- button clicks and events\n\t- unlike Angular, Vue or Svelte, **Next.js uses the React library** and hence **much of Next.js is very familiar** to Vite React developers, e.g.\n\t\t- **components and props**\n\t\t- **JSX** with all its features such as **conditional rendering**, using **.map to display arrays**, **event handling**, etc.\n\t\t- **hooks** such as useState, useEffect, useContext, useReducer\n\t- however, with **Next.js** some aspects are completely different, e.g.\n\t\t- for routing, you don't use React Router but the **Next.js App Router**\n\t- and even if you only want to use client-side features, as is our goal in this howto, there are concepts you have to be aware of, e.g.\n\t\t- Next.js **components are server-side by default**, so if you want to use client-side functionality such as useState and useEffect, you have to explicitly define the component as client-side with `\"use client\"` on the first line##reactgraphic##thereactgraphiclibrary\n- **final code is here**\n\t- ORIGINAL: https://github.com/edwardtanguay/et453-nextjs-site\n\t- FROM LIVE-CODING 2023-12-12: https://github.com/edwardtanguay/et454-nextjs-site\n\t\t- used /src folder\n\t\t- used Image element instead of img\n- **final app is online here**\n\t- https://et453-nextjs-site.vercel.app\n- **final app works like this**#gif#demonextjsbookssite\n- **>>> 1. Install basic Next.js site**\n\t- `npx create-next-app@latest et453-nextjs-site` (of course choose your own unique name, e.g. **nn728-nextjs-site**)\n\t\t- accept all defaults\n\t\t- note that with Next.js it seems not to be customary anymore to have a **/src** directory as with Vite and other frameworks##noticanosrc\n\t- enter VSCode\n\t\t- `code et453-nextjs-site`\n\t\t- note that \n\t\t\t- **node_modules** are pre-instaled \n\t\t\t- **git** is setup\n\t- start site\n\t\t- `npm run dev`\n\t\t- it starts on port 3000 by default\n\t\t- to start it on another port, in **package.json**: `\"dev\": \"next dev -p 3050\"`##the303030\n\t- site looks like this:##the823start\n- **>>> 2. Explore and minimize site**\n\t- explore\n\t\t- all important files are in **/app**\n\t\t- you have three main files here that build your site:\n\t\t\t- **layout.tsx** - where it all begins: here you find the **html** and **body** elements\n\t\t\t- **page.tsx** - the page your see\n\t\t\t- **globals.css** - where your CSS/Tailwind is##the8layout\n\t\t- note you don't have a **index.html** file as with Vite JS-DOM, Vite React, Angular\n\t- minimize\n\t\t- add **.prettierrc**\n\t\t\t--------------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\t\t\n\t\t\t--------------------------------------\n\t\t- **layout.tsx**\n\t\t\t----------------------------------\n\t\t\texport const metadata: Metadata = {\n\t\t\t\ttitle: \"Tech Site\",\n\t\t\t};\n\t\t\t----------------------------------\n\t\t- **page.tsx**\n\t\t\t--------------------------------------\n\t\t\texport default function Home() {\n\t\t\t\treturn (\n\t\t\t\t\t<main>\n\t\t\t\t\t\t<h1>Tech Site</h1>\n\t\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t</main>\n\t\t\t\t);\n\t\t\t}\n\t\t\t--------------------------------------\n\t\t- **globals.scss**\n\t\t\t------------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\n\t\t\t------------------------------------------\n\t\t- site looks like this:##thesimpletechsite\n- **>>> 3. Style the site**\n\t- since we choose this when installing our site, Tailwind is already installed, so let's use it\n\t- style body\n\t\t- **layout.tsx**\n\t\t\t-----------------------------------------\n\t\t\t<body className={`${inter.className} bg-green-100 p-6`}>{children}</body>\t\t\t\n\t\t\t-----------------------------------------\n\t- style main page\n\t\t- **page.tsx**\n\t\t\t--------------------------------------\n\t\t\t<h1 className=\"text-4xl mb-4\">Tech Site</h1>\n\t\t\t--------------------------------------\n\t- site looks like this:##backtehdsc\n\t- set up Sass\n\t\t- if you want to use Sass instead of Tailwind\n\t\t\t- or if you just want to have Sass as a backup when you can't figure something out with Tailwind\n\t\t\t- it is easy to install, the same as with Vite React\n\t\t- install Sass\n\t\t\t- `npm i sass`\n\t\t- rename **globals.css** to **globals.scss**\n\t\t- **layout.tsx**\n\t\t\t-----------------------------------\n\t\t\timport \"./globals.scss\";\n\t\t\t-----------------------------------\n\t\t- **globals.scss**\n\t\t\t---------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\n\n\t\t\t$mainColor: green;\n\n\t\t\tmain {\n\t\t\t\th1 {\n\t\t\t\t\tcolor: $mainColor;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------------------\n\t\t- site looks like this:##greentechsis\n**>>> 4. Publish at Vercel**\n\t- push to GitHub Repository\n\t- go to http://vercel.com\n\t- log in\n\t- **Add New...**\n\t- **Project**\n\t- **Import**\n\t- **Deploy**\n\t- online site will look the same as the local site##sameaslonlinslc\n**>>> 5. Set up menu**\n\t- we will now set up a menu and three pages: \n\t\t- **Welcome** - shows basic info\n\t\t- **Tech Skills** - displays fetched API data with button interaction\n\t\t- **Tech Books** - displays fetched API data with local images\n\t- since in Next.js we use **App Router** to create pages, routing is completely different than with React Router in Vite React sites\n\t\t- in fact, **there is no router** to install or use\n\t\t- to create pages in Next.js, you simply **create directories and pages** under the **/app** directory, and they automatically appear and work as routed pages in your website\n\t\t- for consistency, we can call this page's component `PageWelcome`\n\t\t\t- **app/page.tsx**\n\t\t\t\t------------------------------------------------\n\t\t\t\texport default function PageWelcome() {\n\t\t\t\t------------------------------------------------\n\t- create all three pages\n\t\t- the **Welcome** page \n\t\t\t- this is simply the **/app/page.tsx** file, which is already finished and available at the **/** route##thestartechpage\n\t\t- the **Tech Skills** page\n\t\t\t- **app/techskills/page.tsx**\n\t\t\t\t------------------------------------------\n\t\t\t\texport default function PageTechSkills() {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>This is the tech skills page.</p>\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t}\t\t\t\t\n\t\t\t\t------------------------------------------\n\t\t\t- the page is immediately accessible at: `localhost:3050/techskills`\n\t\t\t\t- note that **techskills** is the name of the directory, which means the page is accessible at **/techskills**\n\t\t\t\t- note that the file needs to be called **page.tsx**\n\t\t\t\t- note the **classic function syntax** of the component and the **default** keyword\n\t\t\t\t- these are all **necessary conventions** for the app routing to automatically work##thetechpageavail\n\t\t- the **Tech Books** page\n\t\t\t- **app/techbooks/page.tsx**\n\t\t\t\t------------------------------------------\n\t\t\t\texport default function PageTechBooks() {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p>This is the tech books page.</p>\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t}\t\t\t\t\n\t\t\t\t------------------------------------------\n\t\t\t- the page is immediately accessible at: `localhost:3050/techbooks`##thetechbookspagekj\n\t- make it so the application header \"Tech Site\" appears on each page\n\t\t- create **components/Header.tsx**\n\t\t\t- take the **h1** element from **app/page.tsx** and put it in this new file\n\t\t\t\t--------------------------------------------\n\t\t\t\texport const Header = () => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<h1 className=\"text-4xl mb-4\">Tech Site</h1>\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t--------------------------------------------\n\t\t- now include Header in the **app/layout.tsx** page, which is the layout frame page for all pages of the app\n\t\t\t--------------------------------------------------\n\t\t\t<body className={`${inter.className} bg-green-100 p-6`}>\n\t\t\t\t<>\n\t\t\t\t\t<Header />\n\t\t\t\t\t{children}\n\t\t\t\t</>\n\t\t\t</body>\n\t\t\t--------------------------------------------------\n\t\t- each pages shows the header now:##allthrebpaapge\n\t- now add the navigation to the head so that the use can click on the page they want\n\t\t- **components/Nav.tsx**\n\t\t\t--------------------------------------\n\t\t\timport Link from \"next/link\";\n\n\t\t\texport const Nav = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<nav className=\"bg-slate-600 text-white mb-4 rounded p-2 mainnav\">\n\t\t\t\t\t\t<ul className=\"flex gap-4 ml-1\">\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link href=\"/\">Welcome</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link href=\"/techskills\">Tech Skills</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link href=\"/techbooks\">Tech Books</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------\n\t\t- **Header.tsx**\n\t\t\t-----------------------------------\n\t\t\t<h1 className=\"text-4xl mb-4\">Tech Site</h1>\n\t\t\t<Nav/>\n\t\t\t-----------------------------------\n\t\t- menu now works:#gif#themenunextworks\n\t- style selected menu item\n\t\t- **Nav.tsx**\n\t\t\t- add activeSegment\n\t\t\t\t-------------------------------------------\n\t\t\t\timport Link from \"next/link\";\n\t\t\t\timport { useSelectedLayoutSegment } from \"next/navigation\";\n\n\t\t\t\texport const Nav = () => {\n\t\t\t\t\tconst activeSegment = useSelectedLayoutSegment();\n\t\t\t\t-------------------------------------------\n\t\t\t- add className in Link\n\t\t\t\t----------------------------------------\n\t\t\t\t<Link\n\t\t\t\t\thref=\"/\"\n\t\t\t\t\tclassName={activeSegment === null ? \"text-yellow-200\" : \"\"}>\n\t\t\t\t\tWelcome\n\t\t\t\t</Link>\t\t\t\t\t\n\t\t\t\t----------------------------------------\n\t\t- site now shows error:##thesiteerrorjforji\n\t\t- the reason for this is that pages in Next.js are **server-side by default**\n\t\t\t- but we are using a feature in our component that is **client-side**\n\t\t\t- therefore, we need to convert our component to **client-side**\n\t\t\t- to do this, simply put `\"use client\";` on the first line\n\t\t\t\t- **Nav.tsx**\n\t\t\t\t\t----------------------------------------\n\t\t\t\t\t\"use client\";\n\t\t\t\t\timport Link from \"next/link\";\n\t\t\t\t\timport { useSelectedLayoutSegment } from \"next/navigation\";\n\t\t\t\t\t----------------------------------------\n\t\t- you will see that **Welcome** now is colored when selected\n\t\t- add same className code to each of the other links\n\t\t\t- **Nav.tsx**\n\t\t\t\t------------------------------------------------\n\t\t\t\t<Link\n\t\t\t\t\thref=\"/techskills\"\n\t\t\t\t\tclassName={\n\t\t\t\t\t\tactiveSegment === 'techskills' ? \"text-yellow-200\" : \"\"\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tTech Skills\n\t\t\t\t</Link>\t\t\t\n\n\t\t\t\t<Link\n\t\t\t\t\thref=\"/techbooks\"\n\t\t\t\t\tclassName={\n\t\t\t\t\t\tactiveSegment === 'techbooks' ? \"text-yellow-200\" : \"\"\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tTech Books\n\t\t\t\t</Link>\t\t\t\t\n\t\t\t\t------------------------------------------------\n\t\t- menu now works with highlighted selected menu items#gif#highselitemsj\n\t- note there is a warning in the console##haveterorrj\n\t\t- to fix this, add **suppressHydrationWarning={true}** to the body tag in the layout\n\t\t\t- **layout.tsx**\n\t\t\t\t---------------------------------------\n\t\t\t\t<body\n\t\t\t\t\tsuppressHydrationWarning={true}\n\t\t\t\t\tclassName={`${inter.className} bg-green-100 p-6`}\n\t\t\t\t>\t\t\t\t\n\t\t\t\t---------------------------------------\n**>>> 6. Set up AppContext**\n\t- create **AppContext.tsx** with welcomeMessage to use on welcome page as test\n\t\t----------------------------------------------\n\t\t\"use client\";\n\t\timport { createContext } from \"react\";\n\n\t\tinterface IAppContext {\n\t\t\twelcomeMessage: string;\n\t\t}\n\n\t\tinterface IAppProvider {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst welcomeMessage = \"Welcome to this tech site.\";\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\twelcomeMessage,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\t\t\n\t\t----------------------------------------------\n\t- **layout.tsx** - wrap application in AppContext\n\t\t------------------------------------------------\n\t\t<AppProvider>\n\t\t\t<Header />\n\t\t\t{children}\n\t\t</AppProvider>\n\t\t------------------------------------------------\n\t- **app/page.tsx** - import and use welcomeMessage from AppContext\n\t\t------------------------------------------------\n\t\t\"use client\";\n\t\timport { AppContext } from \"@/AppContext\";\n\t\timport { useContext } from \"react\";\n\n\t\texport default function PageWelcome() {\n\t\t\tconst { welcomeMessage } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<main>\n\t\t\t\t\t<p>{welcomeMessage}</p>\n\t\t\t\t</main>\n\t\t\t);\n\t\t}\n\t\t------------------------------------------------\n\t\t- note that to use AppContext, you also have to mark this component as a client-component\n\t- welcome page now displays welcome message from the context:##displayshtemwewel\n**>>> 7. Fetch API data in AppContext and display on Tech Skills page**\n\t- `npm i axios`\n\t- **interfaces.ts**\n\t\t-----------------------------------------------\n\t\texport interface ITechSkill {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\tname: string;\n\t\t\turl: string;\n\t\t\tdescription: string;\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **AppContext.tsx** - fetch techSkills and make available from context\n\t\t--------------------------------------------\n\t\t\"use client\";\n\t\timport { createContext, useEffect, useState } from \"react\";\n\t\timport { ITechSkill } from \"./interfaces\";\n\t\timport axios from \"axios\";\n\n\t\tinterface IAppContext {\n\t\t\twelcomeMessage: string;\n\t\t\ttechSkills: ITechSkill[];\n\t\t}\n\n\t\tinterface IAppProvider {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\tconst techSkillsUrl =\n\t\t\t\"https://edwardtanguay.vercel.app/share/skills_with_id.json\";\n\t\tconst welcomeMessage = \"Welcome to this tech site.\";\n\n\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst [techSkills, setTechSkills] = useState<ITechSkill[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(techSkillsUrl);\n\t\t\t\t\tconst _techSkills = response.data;\n\t\t\t\t\tsetTechSkills(_techSkills);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\twelcomeMessage,\n\t\t\t\t\t\ttechSkills\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\n\t\t--------------------------------------------\n\t- **techskills/page.tsx** - use on tech skills page\n\t\t-----------------------------------------\n\t\t\"use client\";\n\t\timport { AppContext } from \"@/AppContext\";\n\t\timport { useContext } from \"react\";\n\n\t\texport default function PageTechSkills() {\n\t\t\tconst { techSkills } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>There are {techSkills.length} tech skills:</p>\n\t\t\t\t\t<ul className=\"list-disc ml-6 mt-3\">\n\t\t\t\t\t\t{techSkills.map(techSkill => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={techSkill.id}>{techSkill.name}</li>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\t\n\t\t-----------------------------------------\n\t\t- note also here we need to make the component **client-side** since we used useContext\n\t- the page now shows the tech skills:##shows98techskills\n**>>> 8. Display individual tech skill at URL with idCode**\n\t- we will now make each skill clickable which will display that skill along on a separate page\n\t- create **techskills/[id]/page.tsx**\n\t\t---------------------------------------------------\n\t\texport default function HowtoId({ params }: { params: { id: string } }) {\n\t\t\t\tconst { id } = params;\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>showing id: {id}</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\t\t\n\t\t---------------------------------------------------\n\t- page now shows the id in the URL:#gif#showsid88jsd\n\t- look up the skill and display it\n\t\t- **techskills/[id]/page.tsx**\n\t\t\t------------------------------------------\n\t\t\t\"use client\";\n\t\t\timport { AppContext } from \"@/AppContext\";\n\t\t\timport { useContext } from \"react\";\n\n\t\t\texport default function HowtoId({ params }: { params: { id: string } }) {\n\t\t\t\tconst { id } = params;\n\t\t\t\tconst { techSkills } = useContext(AppContext);\n\t\t\t\tconst techSkill = techSkills.find((m) => String(m.id) === id);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{techSkill && (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"text-xl\">{techSkill.name}</p>\n\t\t\t\t\t\t\t\t<p className=\"italic\">{techSkill.description}</p>\n\t\t\t\t\t\t\t\t<p><a className=\"underline\" target=\"_blank\" href={techSkill.url}>more info</a></p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t\t------------------------------------------\n\t- **techskills/page.tsx** - add link to individual tech skills\n\t\t------------------------------------\n\t\t<li key={techSkill.id}><Link href={`techskills/${techSkill.id}`}>{techSkill.name}</Link></li>\n\t\t------------------------------------\n\t- tech skills page now works like this:#gif#clickalljtech\n**>>> 9. Fetch techbook data from API and display with local images on tech books page**\n\t- we will now fetch tech books in the AppContext \n\t\t- and display these on the tech books page\n\t\t- for each book an image will be displayed\n\t\t- the images will be saved localling in the site\n\t\t- we will then make sure that the paths to the images work so they are displayed, both locally and online at Vercel\n\t- **interfaces.ts**\n\t\t-----------------------------------------------\n\t\texport interface ITechBook {\n\t\t\tid: number;\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **AppContext.tsx**\n\t\t-------------------------------------------------\n\t\t\"use client\";\n\t\timport { createContext, useEffect, useState } from \"react\";\n\t\timport { ITechBook, ITechSkill } from \"./interfaces\";\n\t\timport axios from \"axios\";\n\n\t\tinterface IAppContext {\n\t\t\twelcomeMessage: string;\n\t\t\ttechSkills: ITechSkill[];\n\t\t\ttechBooks: ITechBook[];\n\t\t}\n\n\t\tinterface IAppProvider {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\tconst techSkillsUrl =\n\t\t\t\"https://edwardtanguay.vercel.app/share/skills_with_id.json\";\n\t\tconst techBooksUrl = 'https://edwardtanguay.vercel.app/share/techBooks.json';\n\t\tconst welcomeMessage = \"Welcome to this tech site.\";\n\n\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst [techSkills, setTechSkills] = useState<ITechSkill[]>([]);\n\t\t\tconst [techBooks, setTechBooks] = useState<ITechBook[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(techSkillsUrl);\n\t\t\t\t\tconst _techSkills = response.data;\n\t\t\t\t\tsetTechSkills(_techSkills);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(techBooksUrl);\n\t\t\t\t\tconst _techBooks = response.data;\n\t\t\t\t\tsetTechBooks(_techBooks);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\twelcomeMessage,\n\t\t\t\t\t\ttechSkills,\n\t\t\t\t\t\ttechBooks\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------\n\t- **techBooks/page.tsx**\n\t\t-------------------------------------------\n\t\t\"use client\";\n\t\timport { AppContext } from \"@/AppContext\";\n\t\timport { useContext } from \"react\";\n\n\t\texport default function PageTechBooks() {\n\t\t\tconst { techBooks } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p className=\"mb-4\">There are {techBooks.length} tech books:</p>\n\t\t\t\t\t{techBooks.map((techBook) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"mb-3 flex gap-3 w-1/3\" key={techBook.id}>\n\t\t\t\t\t\t\t\t<p>IMAGE</p>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<p className=\"font-bold text-xl\">{techBook.title}</p>\n\t\t\t\t\t\t\t\t\t<p className=\"italic\">{techBook.description}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t\t-------------------------------------------\n\t- page now looks like this, without the images yet:##withousim8jdkj\n\t- now download the images locally and reference them in the image tag\n\t\t- download from here: https://edwardtanguay.vercel.app/share\n\t\t- download zip file:##thezipjdf88down\n\t\t- put the files in **public/images/techBooks**\n\t- **techbooks/page.tsx** - replace p element with image which displays appropriate dynamically\n\t\t------------------------------------------------\n\t\t<img className=\"w-32 h-fit\" src={`images/techBooks/${techBook.idCode}.jpg`} alt=\"book\"/>\n\t\t------------------------------------------------\n\t- tech books page now looks like this:##thepage88andjthbook\n**>>> 10. Make sure book images display on the online site as well**\n\t- commit and push changes to GitHub\n\t- image paths work online as well: online site looks like the local site##looksliksjonej8pagesbooks","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-11 22:55:17","systemWhoCreated":"systemUnknown"},{"id":794,"category":"ORMs","title":"Notes on Video: \"Prisma Vs. TypeORM Vs. Sequelize | Which is Better?\"","body":"- VIDEO is here: https://www.youtube.com/watch?v=8WoeGcJ_nNM\n- recorded Jun 2023\n- summary\n\t- Prisma and TypeORM are similar\n\t\t- the larger the project, and particulary if TypeScript is important, choose Prisma\n\t\t- smaller projects, even with Typescript, you can choose TypeORM\n\t- only use Sequelize if you are working on a project that already uses Sequalize\n\t- his choice is: **Prisma**\n\t\t- using for 2 years\n\t\t- it's 100% TypeScript support is future-oriented\n\t\t- works well with PlanetScale\n- **Prisma (2016)**\n\t- the ORM that seems like everyone is talking about nowadays\n\t- modern and lightweight\n\t- supports TypeScript out of the box\n\t- pros\n\t\t- good support for TypeScript\n\t\t- good [documentation](https://www.prisma.io/docs/orm/overview/introduction)\n\t\t- good developer experience\n\t\t\t- Prisma studio##theprismdfstudio\n\t\t- it's popular and gaining notoriety and hence has a lot support in the community\n\t\t- works will with PlanetScale\n- **TypeORM (2016)**\n\t- supports a wide variety of databases\n\t- support for transactions\n\t- cons\n\t\t- learning curve can be harder, not a quick and simple solution\n\t\t- although it has support for TypeScript, not even close to Prism's full support\n- **Sequelize (2010)**\n\t- the oldest of the three\n\t- probably the easiest to learn\n\t- a promise-based ORM that works in Node.js\n\t- he doesn't use it anymore\n\t- pros\n\t\t- has the bigger variety of database compatibility\n\t\t- easy to get answers to problems since it has been around for so long\n\t- cons\n\t\t- the syntax is very verbose\n\t\t\t- not as \n\t\t- not good support for TypeScript\n\t\t\t- people are steering away from Sequalize because of this\n- others\n\t- not as popular as the above three:\n\t\t- [MicroORM](https://mikro-orm.io)\n\t\t- [ObjectionJS](https://vincit.github.io/objection.js)\n\t- Mongoose\n\t\t- not an ORM for SQL databases as all the aboe are\n\t\t- it's an ODM (Object Document Mapper) for Mongoose","points":20,"extras":"","systemWhenCreated":"2023-12-13 14:37:37","systemWhoCreated":"systemUnknown"},{"id":795,"category":"APIs","title":"Notes on Scott Moss's \"API Design in Node.js\" course","body":"- info \n\t- course videos\n\t\t- https://frontendmasters.com/courses/api-design-nodejs-v4\n\t- course website\n\t\t- https://hendrixer.github.io/API-design-v4\n\t- course repo\n\t\t- https://github.com/Hendrixer/API-design-v4-course\n\t- my project for this course\n\t\t- https://github.com/edwardtanguay/et973-api-design-course\n- https://frontendmasters.com/courses/api-design-nodejs-v4/introduction\n\t- will cover\n\t\t- vanilla API without a framework\n\t\t- Express\n\t\t- Prisma\n\t\t- data modeling\n\t\t\t- schemas\n\t\t- routes and middleware\n\t\t- authentication, authorization\n\t\t- error handlers\n\t\t- global config and environment variables\n\t\t- performance\n\t\t- testing\n\t\t- deployment\n- https://frontendmasters.com/courses/api-design-nodejs-v4/tooling-overview\n\t- tools used \n\t\t- Node\n\t\t\t- environment that allows you to run JavaScript\n\t\t- Express\n\t\t\t- often used with Node\n\t\t- Postgres\n\t\t\t- used to use MongoDB\n\t\t\t- one of the most popular database\n\t\t- Prisma\n\t\t- Render\n\t\t\t- kind of gives me the Heroku vibe\n\t\t- ES6 modules\n\t\t- TypeScript \n\t- we'll be building\n\t\t- a change log app\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-an-http-server\n\t- Express builds on top of http module\n\t- we will later switch this to TypeScript\n\t- he codes with require \n\t- recommends Node 14, \"you can probably get away with 10\"\n\t- he recommends [nvm](https://github.com/nvm-sh/nvm)\n\t- simplest server with http\n\t\t**index.js**\n\t\t\t-----------------------------------------\n\t\t\timport http from 'http';\n\n\t\t\tconst port = 3002;\n\n\t\t\tconst server = http.createServer((req, res) => {\n\t\t\t\tif (req.method === 'GET' && req.url === '/') {\n\t\t\t\t\tres.statusCode = 200;\n\t\t\t\t\tres.end();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tserver.listen(port, () => {\n\t\t\t\tconsole.log(`server listening on http://localhost:${port}`);\n\t\t\t});\t\t\n\t\t\t-----------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/requests-responses\n\t- why doesn't this http approach scale\n\t\t- you have to do the grunt work that a framework like Express takes care for you\n\t- looks at req and res\n\t- there are companies that produce software that just log requests\n\t- the res objects is scoped to the res\n\t- XMLHttpRequest (XHR) is a JavaScript class containing methods to asynchronously transmit HTTP requests from a web browser to a web server.\n- https://frontendmasters.com/courses/api-design-nodejs-v4/anatomy-of-an-api\n\t- APIs don't care what language it is written in\n\t- an API and a Server are two different things\n\t\t- API\n\t\t\t- is a server\n\t\t- Server\n\t\t\t- an app that doesn't have visual representation and is always running\n\t\t\t- connected to network\n\t\t\t- shared by many clients\n\t\t\t- usually sits in front of a database\n\t\t\t\t- the most common use case\n\t\t\t\t- like a bouncer in front of a club\n\t\t\t- must have an IP address\n\t\t\t- must operate on a port\n\t\t\t\t- ports assist computers to sort their network traffic\n\t\t\t- \"A server is an app that has no visual output, or perhaps one could say a server's visual output is the content of the log files that are generated when the server runs.\" //quote\n\t- you can't interface with anything on a network without it being attached to a port\n\t\t- the default HTTP port is 80\n\t- HTTP verbs\n\t\t- most common, the ones you will probably ever use\n\t\t\t- GET - retrieves\n\t\t\t- POST - creates\n\t\t\t- PUT - replaces\n\t\t\t- PATCH - changes\n\t\t\t- DELETE - removes\n\t\t- others\n\t\t\t- OPTIONS - checks, used by CORS\n\t- **REST**\n\t\t- an architectural style for designing networked applications\n\t\t- \"REST is not a set of strict rules that you have to obey otherwise your API will not work, but rather it's more of a set of loose conventions. We're going to talk about how loose REST is because it is very loose. I don't think anyone does REST the way you're supposed to, I don't think it's even possible. But we're going to try.\" //quote\n\t\t- others are\n\t\t\t- **gRPC** - https://grpc.io\n\t\t\t\t- efficiently connects services across data centers with pluggable support for load balancing, tracing, health checking and authentication\n\t\t\t- **graphql**\n\t\t\t\t- a query language for APIs \n\t\t\t\t- allows clients to request only the data they need and defines a more flexible and efficient way to interact with data from a server\n\t\t\t- **protobuf**\n\t\t\t\t- Protocol Buffers\n\t\t\t\t- a method developed by Google for serializing structured data\n\t\t\t\t- similar to XML or JSON but is binary and more compact\n\t- a route handler is the function which has req/res as parameters\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-a-server-with-express\n\t- Express (2010) basically came out when Node did (2009) and so it became the default framework for building APIs with Node\n\t\t- built on something called Connect which no longer exists\n\t- making API with Express\n\t\t- `npm i express`\n\t\t- **server.js**\n\t\t\t---------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\texport const app = express();\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.status(200);\n\t\t\t\tres.json({ message: 'info' });\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------\n\t\t- **index.js**\n\t\t\t----------------------------------------\n\t\t\timport { app } from './server.js';\n\n\t\t\tconst port = 4044;\n\n\t\t\tapp.listen(port, () => {\n\t\t\t\tconsole.log(`listening on http://localhost:${port}`);\n\t\t\t}); \t\t\t\n\t\t\t----------------------------------------\n\t- `node index.js`##apiinfo\n- https://frontendmasters.com/courses/api-design-nodejs-v4/object-relational-mapper-orm\n\t- an ORM is the library you install that allows you to interact with the database so you don't have to deal with the lower-level operations of any particular database\n\t- everything we do with the database, we'll do through the ORM\n\t- \"We should call ORMs SDKs, because that's what they are.\" //quote\n- https://frontendmasters.com/courses/api-design-nodejs-v4/prisma-render-setup\n\t- \"Prisma is a database-agnostic, type-safe ORM, or Object Relational Mapper. An ORM is a library you install that allows you to interact with databases so you don't have to deal with the lower-level operations of any particular database, because who wants to write SQL by hand when you can simply use a function call that sends an object? And type-safe means that the ORM is aware of the shape of the data you describe. Prisma is becoming slowly but surely the ORM of choice for Node.js projects now, I think most people just start a project and use Prisma at this point, and they also have really good documentation. I swear they're not paying me to say this, I just like the product. It's really cool.\" //quote\n\t- we'll be using postgres database\n\t\t- the recommended way is to go to Render and spin up a Postgres database for free\n\t\t- or if you have a postgres installed on your computer, you can use that as well\n\t\t- he is going to use Render for his postgres database\n\t- I created database at render.com\n\t\t- Name: main-data\n\t\t- Region: Frankfurt\n\t\t- Version: 15\n\t\t- Type: Free\n\t\t- it says: \n\t\t\t- \"Your database will expire on March 13, 2024. The database will be deleted unless you upgrade to a paid instance type.\"\n\t\t\t- \"A credit card is required to change instance types.\"\n\t- he copies external database URL\n\t- `npm i -D typescript ts-node @types/node prisma`\n\t- installed Git repository\n\t- **.tsconfig.json**\n\t\t-------------------------------------------------\n\t\t{\n\t\t\t\"compilerOptions\": {\n\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\"outDir\": \"dist\",\n\t\t\t\t\"strict\": true, // he recommends deleting this\n\t\t\t\t\"lib\": [\"esnext\"],\n\t\t\t\t\"esModuleInterop\": true\n\t\t\t}\n\t\t}\n\t\t-------------------------------------------------\n\t- the **.tsconfig.json** file that I usually use it this\n\t\t-----------------------------------------------------\n\t\t{\n\t\t\t\"compilerOptions\": {\n\t\t\t\t\"module\": \"NodeNext\",\n\t\t\t\t\"moduleResolution\": \"NodeNext\",\n\t\t\t\t\"target\": \"ES2020\",\n\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\"outDir\": \"dist\",\n\t\t\t},\n\t\t\t\"include\": [\"src/**/*\"]\n\t\t}\t\t\n\t\t-----------------------------------------------------\n\t- here's another version I have that works\n\t\t------------------------------------------------\n\t\t{\n\t\t\t\"compilerOptions\": {\n\t\t\t\t\"module\": \"NodeNext\",\n\t\t\t\t\"moduleResolution\": \"Node\",\n\t\t\t\t\"target\": \"es2022\",\n\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\"outDir\": \"../dist\",\n\t\t\t\t\"resolveJsonModule\": true\n\t\t\t},\n\t\t\t\"include\": [\"../backend\", \"../share\"]\n\t\t}\t\t\n\t\t------------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/prisma-overview/\n\t- going to initialize Prisma\n\t- `npx prisma init`##prismagetthis\n\t- install Prisma extension\n\t\t- https://marketplace.visualstudio.com/items?itemName=Prisma.prisma\n\t- paste in Render External Database URL into .env file as **DATABASE_URL**\n\t- converts to ts\n\t- `npm i -D @types/express`\n\t- **package.json**\n\t\t---------------------------------\n\t\t\"dev\": \"ts-node src/index.ts\"\t\t\n\t\t---------------------------------\n\t- in my other projects in **project.json**, I ran TypeScript like this:\n\t\t------------------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"nodemon\",\n\t\t\t\"build\": \"tsc\",\n\t\t\t\"setup\": \"pm2 start --name et-mern-crud-site-backend npm -- start\",\n\t\t\t\"start\": \"node dist/server.js\",\n\t\t\t\"deploy\": \"git pull --no-rebase && npm i && npm run build && pm2 restart et-mern-crud-site-backend --update-env --time && pm2 save\",\n\t\t\t\"bcrypt\": \"node cli/bcrypt.mjs\"\n\t\t},\n\t\t\"nodemonConfig\": {\n\t\t\t\"watch\": [\n\t\t\t\t\"src\"\n\t\t\t],\n\t\t\t\"ext\": \"ts\",\n\t\t\t\"exec\": \"npm run build && node dist/server.js\"\n\t\t},\t\t\n\t\t------------------------------------------------\n\t- because we have TypeScript, we can take out `\"type\": \"module\"\n- https://frontendmasters.com/courses/api-design-nodejs-v4/designing-a-schema\n\t- Prisma schema syntax is similar to GraphQL schema syntax\n\t- he says the extension will help you with building relationships between the schemas\n\t- **schema.prisma**\n\t\t------------------------------------------\n\t\tmodel User {\n\t\t\tid String @id @default(uuid())\n\t\t\tcreatedAt DateTime @default(now())\n\t\t\tusername String @unique\n\t\t\tpassword String\n\t\t}\t\t\n\t\t------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/product-model/\n\t- **schema.prisma**\n\t\t--------------------------------------------------\n\t\tmodel Product {\n\t\t\tid          String   @id @default(uuid())\n\t\t\tcreatedAt   DateTime @default(now())\n\t\t\tname        String   @db.VarChar(255)\n\t\t\tbelongsToId String\n\t\t\tbelongsTo   User     @relation(fields: [belongsToId], references: [id])\n\t\t}\t\t\n\t\t--------------------------------------------------\n\t- then `npx prisma format`\n\t\t- it then adds `Product Product[]` to User\n\t\t- then he changed it to `products Product[]`##nowthetwokdkdk\n- https://frontendmasters.com/courses/api-design-nodejs-v4/update-updatepoint-models/\n\t- users can have products and products can have updates\n\t- final models in **schema.prisma**\n\t\t------------------------------------------------------------------\n\t\tmodel User {\n\t\t  id        String    @id @default(uuid())\n\t\t  createdAt DateTime  @default(now())\n\t\t  username  String    @unique\n\t\t  password  String\n\t\t  products  Product[]\n\t\t}\n\n\t\tmodel Product {\n\t\t  id          String   @id @default(uuid())\n\t\t  createdAt   DateTime @default(now())\n\t\t  name        String   @db.VarChar(255)\n\t\t  belongsToId String\n\t\t  belongsTo   User     @relation(fields: [belongsToId], references: [id])\n\t\t  updates     Update[]\n\t\t}\n\n\t\tenum UPDATE_STATUS {\n\t\t  IN_PROCESS\n\t\t  SHIPPED\n\t\t  DEPRECATED\n\t\t}\n\n\t\tmodel Update {\n\t\t  id        String   @id @default(uuid())\n\t\t  createdAt DateTime @default(now())\n\t\t  updatedAt DateTime\n\n\t\t  title   String\n\t\t  body    String\n\t\t  status  UPDATE_STATUS @default(IN_PROCESS)\n\t\t  version String?\n\t\t  asset   String?\n\n\t\t  productId   String\n\t\t  product     Product       @relation(fields: [productId], references: [id])\n\t\t  UpdatePoint UpdatePoint[]\n\t\t}\n\n\t\tmodel UpdatePoint {\n\t\t  id        String   @id @default(uuid())\n\t\t  createdAt DateTime @default(now())\n\t\t  updatedAt DateTime\n\n\t\t  name        String @db.VarChar(255)\n\t\t  description String\n\n\t\t  updateId String\n\t\t  update   Update @relation(fields: [updateId], references: [id])\n\t\t}\t\t\n\t\t------------------------------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/migrations/\n\t- migrations server two purposes\n\t\t- it teaches the database about the shape of the schema\n\t\t- if you have to make a change to the schema where you have to update the tables\n\t\t\t- the data has to be migrated out and then migrate it back in fitting it into the new schema\n\t- migrations are painful\n\t\t- cause the most downtime\n\t\t- if you use a NoSQL database you don't need a migration anyway\n\t- we have to now run the initial migration\n\t- we now have to install the Prisma client\n\t\t- `npm i @prisma/client`\n\t- now migrate\n\t\t- migrations need to have names \n\t\t- so we can check them into Git and use them to migrate database in local, staging, production, etc.\n\t\t- he had something in his database, so he did a reset\n\t\t\t- `npx prisma migrate reset`\n\t\t\t- I ran it and it warned me first:##thenpmareste\n\t\t\t- it reset the database##anditgonejks\n\t\t- now migrate your database\n\t\t\t- `npx prisma migrate dev --name init`\n\t\t\t- it's now in sync##nowinsiyndjdjc\n\t- this is what we would have had to write:##wouldhadtowrite\n\t- `npx prisma studio`##studiosdj\n- https://frontendmasters.com/courses/api-design-nodejs-v4/defining-routes/\n\t- will start from routes and move to handlers\n\t- CRUD: create, read, update, delete\n\t\t- pretty much every software you use does these things\n\t\t- this is what APIs do\n\t- these he will create##willcreatesd\n\t- \"That's what REST is, you have these resources that are accessed by using CRUD, so if someone wants one of your resources, for instance a product with ID 1, then they know to send a GET request to /products/1. But it's never that simple, because relationships kill this simplicity. As soon as you have one resource that needs another resource, as we do in our app, it gets complicated. If someone asks for a product, and product has a relationship with product details, we have to ask ourselves, do we send them product details as well? And you say, well let them ask for it in the query string. But then you're just creating your own query language. So REST works up until about 2005 and then it doesn't work anymore. But we're still going to use it because mostly everything is based on REST anyway. So let's create some routes.\" //quote \n\t- **app** is the entire API\n\t\t- **router** is just a subpart of it\n\t- \"I typically don't like camelcase in URLs.\"\n\t- \"What's the difference between put and patch? First of all, nothing is technically stopping you from using get for every CRUD acction when you create a REST API, these verbs are just suggested conventions if you're following REST guidelines. But according to the guidelines, when you put an object, you should replace everything in an object except the id, and when you use patch, you should only update the properties you send up.\" //quote\n\t- \"Hmm, do I prefer gRPC over REST? I would recommend using gRPC if you are creating an API for an application that you use internally by a client that you also work on, for example if you are making an API only for a frontend app you are creating. Yeah, then gRPC all the way, since you don't need your API broken up per resource like you typically do in REST, since you are often going to need to update more than one resource, which can be four or five different API calls. In gRPC, you just call one function that makes all the updates that you need when you call it from your frontend. But gRPC is not great for external APIs that other developers are going to use, because it's too specialized, you don't know what their use cases are for consuming your API. And, of course, if you're going to monatize your API, it's in your interest to require your users to make more API calls.\" //quote\n\t- tRPC\n\t\t- basically does what Prisma does with generation of the client except it doesn't have to generate it \n\t\t\t- it's automatica but harder to use, not the best developer experience\n\t\t- GraphQL is similar but you have to generate your schema\n- https://frontendmasters.com/courses/api-design-nodejs-v4/importing-the-application-router\n\t- we have to mount the router to the app\n\t- the order you register a listener matters, the first will be executed\n\t- **src/router.ts**\n\t\t-------------------------------\n\t\timport { Router } from 'express';\n\n\t\tconst router = Router();\n\n\t\trouter.get('/product', () => {});\n\t\trouter.get('/product/:id', () => {});\n\t\trouter.put('/product/:id', () => {});\n\t\trouter.post('/product', () => {});\n\t\trouter.delete('/product/:id', () => {});\n\n\t\trouter.get('/update', () => {});\n\t\trouter.get('/update/:id', () => {});\n\t\trouter.put('/update/:id', () => {});\n\t\trouter.post('/update', () => {});\n\t\trouter.delete('/update/:id', () => {});\n\n\t\trouter.get('/update', () => {});\n\t\trouter.get('/update/:id', () => {});\n\t\trouter.put('/update/:id', () => {});\n\t\trouter.post('/update', () => {});\n\t\trouter.delete('/update/:id', () => {});\n\n\t\texport default router;\n\t\t-------------------------------\n\t- **server.ts**\n\t\t--------------------------------------\n\t\timport express from 'express';\n\t\timport router from './router';\n\n\t\texport const app = express();\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.status(200);\n\t\t\tres.json({ message: 'info' });\n\t\t});\n\n\t\tapp.use('/api', router);\n\t\t--------------------------------------\n\t- the routes don't know they belong to /api\n- https://frontendmasters.com/courses/api-design-nodejs-v4/testing-the-api-with-thunder-client\n\t- mentioned https://www.npmjs.com/package/sails\n- https://frontendmasters.com/courses/api-design-nodejs-v4/middleware\t\n\t- middleware is a list of functions that run right before your route handlers run, e.g.\n\t\t- Redux thunks\n\t\t- handle errors\n\t\t- log use\n\t\t- authentication\n\t\t- enhance or agument the request\n\t- middleware looks like a handler but has a next parameter as well\n\t\t- next means \"we are done here so go to the next thing in the stack\" which could be\n\t\t\t- another middleware function\n\t\t\t- or a route handler\n\t- logging\n\t\t- `npm i morgan`\n\t\t- morgan is a middleware than logs requests\n\t- DataDog or sentry are also probably middleware\n\t\t- or [Segment](https://segment.com) for analytics\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-a-custom-middleware\n\t- another middleware\n\t- `app.use(express.json())`\n\t- `app.use(express.urlencoded({ extended: true }));`\n\t\t- enables `google.com?a=3` etc.\n\t- you can add properties to the request object\n\t\t- for doing this in TypeScript, see: https://blog.logrocket.com/extend-express-request-object-typescript\n\t- to attach a property to a request object in TypeScript, you need [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html)\n\t\t- this means that at compilation the typescript compiler will merge separate type declarations into a single definition\n\t- note that you can compose middleware:\n\t\t- https://www.npmjs.com/package/compose-middleware\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-a-jwt\n\t- our database is multi-tenant\n\t\t- so we need authentication\n\t\t- how do we make sure user 1 only sees user 1's data and not user 2's data\n\t- what is a JWT\n\t\t- \"JWT is basically this: you take a JavaScript object, and that JavaScript object, given a secret, which is a string, can deterministically be converted to a random string, and that string can be converted back to the same object given that secret, it's similar to hashing. The reason we use JWTs is so we don't have to store anything on the server. The alternative would be a session where you have to keep track of who is logged into your API at any time, which eats up resources with session management. With a JWT, it's the client, not the server, who has to store the token and has to send it along with every subsequent request to the server because the server is going to check it every single request to make sure it is the token the client originally was issued after they successfully identified themselves.\" //quote\n\t- installation for JWT\n\t\t- `npm i jsonwebtoken bcrypt dotenv`\n\t- create `src/modules/auth.ts`\n\t\t- I like to keep all my auth stuff in one file, e.g. auth.ts\n\t\t- function to create a JWT\n\t\t- whatever you put in the token should be useful to identifying them later\n\t- **auth.ts**\n\t\t---------------------------------------\n\t\timport jwt from 'jsonwebtoken';\n\n\t\texport const createJWT = (user) => {\n\t\t\tconst token = jwt.sign({ id: user.id, username: user.username }, process.env.JWT_SECRET as string);\n\t\t\treturn token;\n\t\t}\n\t\t---------------------------------------\n\t- \"What's the preferred me thod for storing the JWT on the client side? I've tried many different places, what I landed on eventually was just storing it in the cookie. I think storing it in a cookie is ideal because cookies are automatically sent up. It just saves you time on the front end. It gets kind of tedious having to access localStorage every time you want to grab your JSON web token and attach it to the header, or come up with some interceptor on the frontend that does it for you automatically, whereas cookies get automatically sent to the server so the server can just check them. But on the server, I actually prefer the token to be on the authorization header, which makes more sense. So from the client perspective, I like having the JWT in the cookie, but from the server perspective, I prefer to have it in the authorization header. So I guess it depends on what side of the project I'm working on. But today, we're on the server side, so it's going in the authorization header, which means it will probably be in localStorage.\" //quote\n- https://frontendmasters.com/courses/api-design-nodejs-v4/protecting-routes\n\t- a middleware that will sit in front of any route that we want to protect\n\t- **auth.ts**\n\t\t------------------------------------------\n\t\texport const protect = (req: any, res: any) => {\n\t\t\tconst bearer = req.headers.authorization;\n\t\t\tif (!bearer) {\n\t\t\t\tres.status(401);\n\t\t\t\tres.json({ message: \"not authorized\" });\n\t\t\t}\n\t\t};\t\t\n\t\t------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/validating-a-bearer-token\n\t- API rate limiting\n\t\t- \"Yes, you could do implement rate limiting in your Express middleware, but in general, you don't even want these kinds of requests reaching your server, you want to identify them and sort them out before they get to your server. Yes, with Express middleware, you could stop them before they hit your handlers, but they are still on your server and taking up resources there. So typically rate limiting for a more sophisticated API would be implemented in front of the API. That software is similar to Express middleware, but it's middleware on the network layer, not on the code layer. This would be a proxy or an API gateway, or something like that, which is another server which sits in front of your server. It's that server that does the rate limiting. But that's a completely different thing, there are products which do only that.\" //quote\n- https://frontendmasters.com/courses/api-design-nodejs-v4/authorization-headers\n\t- headers are key/values\n\t\t- they are like the metadata of the request\n\t\t- they are not the data, but the information about the data\n\t\t- one of the headers is called `authorization`\n- https://frontendmasters.com/courses/api-design-nodejs-v4/comparing-hashing-passwords\n\t- \"Storing your users' passwords in the database as plain text is a practice that, well, it's no longer a practice because if someone gets access to your database, then they have access to all of your users' passwords, and then that's it for you, you're just done. You're better off not knowing your users' passwords at all, and we do that by hashing them, which means you can check if a password is correct, but you can never find out what it is.\" //quote\n\t- `npm i bcrypt`\n\t- adding a salt makes it exponentially hard to guess a password\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-users\n\t- **handlers/users.ts**\n\t\t------------------------------------\n\t\timport prisma from '../db';\n\t\timport { createJWT, hashPassword } from '../modules/auth';\n\n\t\texport const createNewUser = async (req: any, res: any) => {\n\t\t\tconst user = await prisma.user.create({\n\t\t\t\tdata: {\n\t\t\t\t\tusername: req.body.username,\n\t\t\t\t\tpassword: await hashPassword(req.body.password)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst token = createJWT(user);\n\t\t\tres.json({ token });\n\t\t}\n\t\t------------------------------------\n\t- **db.ts**\n\t\t-------------------------------\n\t\timport { PrismaClient } from '@prisma/client';\n\n\t\tconst prisma = new PrismaClient();\n\n\t\texport default prisma;\n\t\t-------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/authenticating-a-user\n\t- \"We don't need to validate our inputs here in our handlers because we validate them in our middleware. You want to validate your inputs before they get to the handler. My philosophy is: I don't want my handlers to have to think about auth, or validations, or inputs. By the time they execute they can assume everything is right, because all the middleware before them did all the necessary validation, verification and data cleansing. You want to protect your handlers and shield them from all the messy, data cleansing work.\" //quote\n- https://frontendmasters.com/courses/api-design-nodejs-v4/adding-user-routes\n\t- we use the POST /user now and get this##gothteotoknen\n\t- `npm prisma studio`\n\t- we can now get the product with our token##cannowgetproduct\n\t- now trying to sign in\n- https://frontendmasters.com/courses/api-design-nodejs-v4/validation-overview\n\t- \"Rule number one when you build an API is: never trust the user. Even after they have logged in, don't trust them. Users have to be able to create, read, update, and delete, so they have to provide data to do this, and that can be dangerous, because depending on how you built your system, particularly if you built it with a lot of assumptions, it's not like the whole world was looking over your shoulder watching you build this and know how your API works. So things will go wrong. Even if you built the client that uses your API, things are still going to go wrong. Things are just complicated, so you can never trust the user, not even yourself. And this means that in your API, you have to validate, verify and cleanse all your inputs all the time.\" //quote\n\t- handlers should not have to deal with data validation\n- https://frontendmasters.com/courses/api-design-nodejs-v4/adding-validation-to-routes/\n\t- he users express-validator instead of Zod\n\t- `npm i express-validator`\n\t- product has one field that we allow to change##produhason\n\t- req.body should have a field on it called \"name\"##regasdshould\n\t- **router.ts** - note that you have to use **.isString()**\n\t\t-------------------------------------------\n\t\trouter.put(\"/product/:id\", body(\"name\").isString(), (req: Request, res: Response) => {\n\t\t\tconst errors = validationResult(req);\n\t\t\tconsole.log(\"errors\", errors);\n\t\t\tif (!errors.isEmpty()) {\n\t\t\t\tres.status(400);\n\t\t\t\tres.json({ errors: errors.array() });\n\t\t\t} else {\n\t\t\tres.status(200);\n\t\t\tres.json({ message: `no errors, inside put product` });\n\t\t\t}\n\t\t});\t\t\n\t\t-------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/route-validation-exercise-solution\n\t- **modules/middleware.ts**\n\t\t----------------------------------------------------\n\t\timport { Request, Response, NextFunction } from \"express\";\n\t\timport { validationResult } from \"express-validator\";\n\n\t\texport const handleInputErrors = (\n\t\t\treq: Request,\n\t\t\tres: Response,\n\t\t\tnext: NextFunction\n\t\t) => {\n\t\t\tconst errors = validationResult(req);\n\t\t\tif (!errors.isEmpty()) {\n\t\t\t\tres.status(400);\n\t\t\t\tres.json({ errors: errors.array() });\n\t\t\t} else {\n\t\t\t\tnext();\n\t\t\t}\n\t\t};\t\t\n\t\t----------------------------------------------------\n\t- **router.ts**\n\t\t-------------------------------------------------\n\t\trouter.put(\n\t\t\t\"/product/:id\",\n\t\t\tbody(\"name\").isString(),\n\t\t\thandleInputErrors,\n\t\t\t(req: Request, res: Response) => {\n\t\t\t\tres.status(200);\n\t\t\t\tres.json({ message: `inside put product now and works` });\n\t\t\t}\n\t\t);\t\t\n\t\t-------------------------------------------------\n\t- now doing **post for a product**\n\t\t- **router.ts** - note **isIn** instead of **oneOf**\n\t\t\t---------------------------------------------------\n\t\t\trouter.post(\n\t\t\t\t\"/update\",\n\t\t\t\tbody(\"title\").exists().isString(),\n\t\t\t\tbody(\"body\").exists().isString(),\n\t\t\t\t// oneOf([body(\"IN_PROGRESS\"), body(\"SHIPPED\"), body(\"DEPRECATED\")]),\n\t\t\t\tbody('status').isIn([\"IN_PROGRESS\", \"SHIPPED\", \"DEPRECATED\"]),\n\t\t\t\tbody(\"status\").optional(),\n\t\t\t\tbody(\"version\").optional(),\n\t\t\t\t() => {}\n\t\t\t);\n\t\t\t---------------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/get-product-handlers\n\t- **handlers/product.ts**\n\t\t-------------------------------------------\n\t\texport const getOneProduct = async (req: any, res: Response) => {\n\t\t\tconst id = req.params.id;\n\t\t\tconst product = await prisma.product.findUnique({\n\t\t\t\twhere: {\n\t\t\t\t\tid,\n\t\t\t\t\tbelongsToId: req.user.id\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\t-------------------------------------------\n\t- \"Regardless of what kind of data I'm sending back with res.json(), I always send it back inside an object. Otherwise on the client side, the data you receive is always a different shape, sometimes an array, sometimes a string, sometimes an object. When the main variable that is sent back is always an object, this is more consistent, and in addition, you can always add extra properties to it such as errors or any kind of meta information about the response.\" //quote\n\t- difference between findFirst and findUnique\n\t\t- pretty much the same, it just writes the query differently and uses different indexes\n- https://frontendmasters.com/courses/api-design-nodejs-v4/create-update-product-handlers\n\t- **handlers/product.ts**\n\t\t---------------------------------------------------\n\t\texport const createProduct = async (req: any, res: Response) => {\n\t\t\tconst product = await prisma.product.create({\n\t\t\t\tdata: {\n\t\t\t\t\tname: req.body.name,\n\t\t\t\t\tbelongsTo: req.user.id\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.json({ data: product });\n\t\t}\n\n\t\texport const updateProduct = async (req: any, res: Response) => {\n\t\t\tconst updated = await prisma.product.update({\n\t\t\t\twhere: {\n\t\t\t\t\tid: req.params.id,\n\t\t\t\t\tbelongsToId: req.user.id\n\t\t\t\t},\n\t\t\t\tdata: {\n\t\t\t\t\tname: req.body.name\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.json({data: updated})\n\t\t}\n\n\t\texport const deleteProduct = async (req: any, res: Response) => {\n\t\t\tconst deleted = await prisma.product.delete({\n\t\t\t\twhere: {\n\t\t\t\t\tid: req.params.id,\n\t\t\t\t\tbelongsToId: req.user.id\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tres.json({data: deleted})\n\t\t}\n\t\t---------------------------------------------------\n\t- \"As an API programmer, it's kind of you on an update to send back the full object that was updated, otherwise the client is going to have to send another request to the server to get that updated thing. So just be nice and send them the updated thing, to save them some time.\" //quote\n- https://frontendmasters.com/courses/api-design-nodejs-v4/applying-product-route-handlers\n\t- **router.ts**\n\t\t--------------------------------------------\n\t\trouter.post(\"/product\", body('name').isString(), handleInputErrors, createProduct);\t\t\n\t\t--------------------------------------------\n\t- **products.ts** - changed to belongsToId\n\t\t---------------------------------------------------\n\t\texport const createProduct = async (req: any, res: Response) => {\n\t\t\ttry {\n\t\t\t\tconst product = await prisma.product.create({\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tname: req.body.name,\n\t\t\t\t\t\tbelongsToId: req.user.id,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tres.json({ data: product });\n\t\t\t} catch (e) {\n\t\t\t\tres.status(400);\n\t\t\t\tres.json({ message: \"\" + e });\n\t\t\t}\n\t\t};\t\t\n\t\t---------------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/update-handlers-exercise-solution\n\t- creative way to get all updates from all products, but typically you want to let the database do the heavy work for you so you don't have to do it here like this##allupuprrom\n- https://frontendmasters.com/courses/api-design-nodejs-v4/create-delete-handlers-solution\n\t- \"Relations are what make database queries complex. Without relations, you can get any data you need with just one query. But as soon as you have relations, you have to do what's called a [query plan](https://en.wikipedia.org/wiki/Query_plan) to work out how you're going to navigate to the various groups of data you need with optimal queries. It gets complicated when you have numerous relations. That's why we have other kinds of databases like graph databases to help with problems like that. For instance, if you have a social network where everyone has relations with everyone else, then maybe a relational database is not the best because imagine trying to find a friend of a friend of a friend of friend with an SQL database, that would be crazy. So in that case you might want to use a graph database like Neo4j. There are pros and cons to every kind of database.\" //quote\n- https://frontendmasters.com/courses/api-design-nodejs-v4/debugging-routes\n\t- he adds @updatedAt##theupdjsat\n\t- he is also uses **connect**##theconjsuse\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-error-handlers\n\t- Express will catch synchronous errors for you##throsjwerrrors\n\t- but you don't want to be showing this to your users\n\t- so you can add a route at the end that handles errors like this##canhandleatenderrors\n- https://frontendmasters.com/courses/api-design-nodejs-v4/async-error-handlers\n\t- for asynchronous errors like this:##asyncerrorsk\n\t- server crashes##servercrashsje\n\t- but you can catch an asynchonous error like this:##butcatchlikethiss\n\t- these work for instance:\n\t\t----------------------------------------------------------\n\t\t// Express catches synchronous errors\n\t\tapp.get(\"/test001\", (req, res) => {\n\t\t\tthrow new Error(\"test001\");\n\t\t});\n\n\t\t// but asynchronous errors crash Express\n\t\tapp.get(\"/test002\", (req, res) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthrow new Error(\"test002\");\n\t\t\t});\n\t\t});\n\n\t\t// but asynchronous errors crash Express\n\t\tapp.get(\"/test003\", (req, res, next) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tnext(new Error(\"test003\"));\n\t\t\t});\n\t\t});\n\n\t\t// override Express error handling\n\t\tapp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n\t\t\tres.json({ message: 'override of Express error handling' });\n\t\t});\t\t\n\t\t----------------------------------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/error-handlers-exercise-solution\n\t- you can also chain status and json##youcanalsochains\n\t- how to add information and then pass onto to error being handled##howtoaddinsdf\n\t- some teams have developers dedicated to handling errors##canalsoextend\n\t- transactions make APIs complicated and make error handling very important\n\t\t- it's imperative to know what threw and why it threw\n\t- you have to have an error handler for each route file\n- https://frontendmasters.com/courses/api-design-nodejs-v4/handling-errors-with-process-on\n\t- this doesn't have anything to do with APIs but with Node\n\t- you can catch Node errors with **process.on()**##theprocesosnsjd\n- https://frontendmasters.com/courses/api-design-nodejs-v4/environment-variables\n\t- \"Environment is where your code is running, e.g. in development, staging, testing or production. It may even be on the same machine, an environment is really just a set of conditions in which your code operates in.\"\n\t- `NODE_ENV` is standard\n\t\t- React \n\t- whereever your hosting your app, you can set the environment variable so that your code responds differently\n\t- you can access this on `process.env`\n\t- \"Often when a website gets hacked its because someone pushed the environment variables to GitHub.\"\n- https://frontendmasters.com/courses/api-design-nodejs-v4/creating-environment-configurations\n\t- your API should be environment-driven so it can adapt and change based on the NODE_ENV variable \n\t\t- for instance, you want to do analytics in production but not in development\n\t- \"We also need to install this package here called lodash.merge. If you've never used lodash before, it's pretty cool. It's a package that has a bunch of utility functions in it that people don't really need anymore because in the ES6 version of JavaScript in 2015, most of the lodash functions were built into JavaScript itself. But before that lodash was really cool. And this particular function, merge, actually wasn't built into JavaScript, so we're going to import it from lodash now. What merge does is simply combine to JavaScript objects into one, which can be really useful.\" //quote##lodashmergejs\n\t- install lodash merge\n\t\t---------------------------------\n\t\tnpm i lodash.merge\n\t\tnpm i -D @types/lodash.merge\n\t\t---------------------------------\n\t- **src/config/index.ts**\n\t\t------------------------------------------\n\t\timport merge from \"lodash.merge\";\n\n\t\tprocess.env.NODE_ENV = process.env.NODE_ENV || \"development\";\n\t\tconst stage = process.env.STAGE || 'local';\n\n\t\tlet envConfig: any;\n\n\t\tif (stage === 'production') {\n\t\t\tenvConfig = require('./production').default;\n\t\t} else if (stage === 'testing') {\n\t\t\tenvConfig = require('./testing').default;\n\t\t} else {\n\t\t\tenvConfig = require('./local').default;\n\t\t}\n\n\t\texport default merge({\n\t\t\tstage,\n\t\t\tenv: process.env.NODE_ENV,\n\t\t\tport: 3001,\n\t\t\tsecrets: {\n\t\t\t\tjwt: process.env.JWT_SECRET,\n\t\t\t\tdbUrl: process.env.DATABASE_URL\n\t\t\t}\n\t\t}, envConfig);\n\t\t------------------------------------------\n\t- you can start production like this: `STAGE=production npm run dev`\n\t- \"I highly recommend that your API is driven by some kind of configuration that's bound to environment variables so that it remains dynamic. This is extremely useful particularly for debugging, for instance without changing any code, you can dynamically change the port, the database connection string, or the amount of logging you get in particular environments.\" //quote \n\t- it's unclear why he uses the variable \"stage\" here\n- https://frontendmasters.com/courses/api-design-nodejs-v4/performance-management-with-async\n\t- there's something called blocking code and non-blocking code\n\t\t- a JavaScript topic\n\t\t- blocking code is code that needs to be completed before the code processing can continue\n\t- so how do you make non-blocking code, there are two ways\n\t\t- (1) make it async\n\t\t\t- make sure you're not doing CPU-intensive things synchronously\n\t\t\t- example of non-blocking code when reading a file##nonblkkkcode\n\t\t- (2) use a child process\n\t\t\t- it's like a web worker in the browser\n\t\t\t- you can spin up a different process and tell that process to go to the work, and that process won't block your current process\n\t\t\t- but you can only do an infinite amount of child processes\n\t\t\t- you can throw money at your server and get more cores, but eventually you'll be limited \n- https://frontendmasters.com/courses/api-design-nodejs-v4/unit-testing-overview\n\t- \"Some of the tools we'll be using to run tests is Jest, if you've never heard of Jest, it's basically a ripoff of Mocha and Jasmine but does a really good job. And we'll be using Supertest, too.\"\n\t- install all testing tools\n\t\t- `npm i supertest @types/supertest jest @types/jest ts-jest`\n\t\t- `npx ts-jest config:init`\n\t- unit tests\n\t\t- testing the individual logic bits but not how they work together\n\t\t- \"In order to write unit tests you need to have testable code. So when you're writing code, you should to be constantly thinking, can I even test this? Is this code I'm writing testable? This is something you should always be asking yourself. One of the things I think about when I look at other people's code is: how are you going to test this? I mean, this is brilliant what you did, but how are you going to test it? We need to be able to test it in order to keep it brilliant as the environment around it changes.\" //quote\n\t- make sure you code is testable\n\t\t- export it so you can test it\n\t\t- make sure it has no dependencies##thetestableksjf\n- https://frontendmasters.com/courses/api-design-nodejs-v4/unit-testing-with-jest\n\t- he just does a fake test\n\t- **handlers/__tests__/user.test.ts**\n\t\t----------------------------------------\n\t\tdescribe('user handler', () => {\n\t\t\tit('should do something when something happens', () => {\n\t\t\t\texpect(1).toBe(1);\n\t\t\t})\n\t\t})\t\t\n\t\t----------------------------------------\n\t- start it with `npm t`\n- https://frontendmasters.com/courses/api-design-nodejs-v4/integration-testing-with-supertest\n\t- we can use jest plus supertest to run integration tests\n\t- my test didn't run##didnotrunsdkfj\n- https://frontendmasters.com/courses/api-design-nodejs-v4/testing-the-create-user-route\n\t- he just mocks out Request and Response\n\t- you can use spy##thspysdkjf\n\t- you should be using a different database when testing\n\t\t- otherwise you definitely need to delete anything you create, etc.\n\t- every test should be stateless and non-reliant on every other test\n- https://frontendmasters.com/courses/api-design-nodejs-v4/deployment-setup\n\t- you generally don't want to host your own sites, you rent servers online\n\t- \"You could run ts-node in production, but there is no good reason to, there's no reason to have the memory overhead keeping track of process cache files, so we're going to convert our project from TypeScript to JavaScript ahead of time, and then were going to run that JavaScript on render.com.\" \n\t- **package.json**\n\t\t---------------------------------\n\t\t\"build\": \"tsc -p .tsconfig.json\",\n\t\t\"start\": \"node dist/index.js\"\t\t\n\t\t---------------------------------\n\t- add to **.tsconfig.json**\n\t\t-------------------------------\n\t\t\"include\": [\"src/**/*.ts\"]\n\t\t-------------------------------\n- https://frontendmasters.com/courses/api-design-nodejs-v4/deploying-to-render\n\t- add \"dist\" to **.gitignore**\n\t\t-------------------------\n\t\tnode_modules\n\t\t.vscode\n\t\t.env\n\t\tdist\n\t\t-------------------------\n\t- do `npm start` and the JavaScript version of your site will run\n\t- go to render.com\n\t- choose Web Service##choosewebserv\n\t\t- Private service is like a localhost, not connected to the external world\n\t\t- Background Worker is like a child process\n\t\t- cron job is work you can do on an interval\n\t- type in url\n\t\t- name: et973-api-design-course\n\t\t- root directory: (leave)\n\t\t- build command: `npm i && npm run build`\n\t\t- start command: `npm start`\n\t\t- choose free plan\n\t\t- button: Create Web Service\n\t\t- before finished, add environmental variables\n\t\t\t- STAGE: production\n\t\t\t- JWT_SECRET: nnnnn\n\t\t\t- DATABASE: (get internal database URL)\n\t- it works:##itwoksjdkfjs\n\t- was able to set up a user as well##setupthewuseru\n- https://frontendmasters.com/courses/api-design-nodejs-v4/wrapping-up\n\t- just a foundational course\n\t- but now you have a context\n\t- \"Congratulations on completing this Node API course. The next time you reach for a backend-as-a-service like Supabase or Firebase, or any backend service you typically use, don't. Instead, challenge yourself and build t\the API yourself. Do that until you're so bored with building APIs that you go back to using a service. Not because you don't know how to build an API, but because you've done it so many times. And teach other people. When you teach other people, that's when you start to really solidify the things that were a little blurry before.\" //quote\n\t- APIs can also have\n\t\t- image uploads\n\t\t- background jobs\n\t\t- you can also use\n\t\t\t- GraphQL\n\t\t\t- tRPC\n\t\t\t- Prisma with Mongo\n\t\t- go to Dribble and try to remake the sites: https://dribbble.com\n\t- check out Nest.js for MVC\n\t\t- he's not into MVC, it's too heavy","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-13 15:53:51","systemWhoCreated":"systemUnknown"},{"id":796,"category":"databases","title":"Notes on Brian Holt's Complete Intro to Databases course","body":"- info\n\t- the course website: \n\t\t- https://btholt.github.io/complete-intro-to-databases\n- https://frontendmasters.com/courses/databases/introduction\n\t- learn when to choose what databases\n\t- we'll be running docker commands\n\t- works for Microsoft on VSCode project\n\t- was a very early MongoDB (released 2009) user, already in 2011, it was back when people thought Mongo was a good idea\n- https://frontendmasters.com/courses/databases/installation-notes\n\t- four databases: MongoDB, PostgreSQL, Neo4j, Redis\n\t\t- the most common options in the silos\n\t- we will be using Docker, can use on Windows\n\t- install Docker desktop\n\t- \"If you're on Linux, I assume you probably already know how to operate Docker.\"\n\t- if not Docker, you can also use Homebrew (Mac), winget (also known as [Windows Package Manager](https://en.wikipedia.org/wiki/Windows_Package_Manager), or [Chocolately](https://chocolatey.org)\n\t- they all probably have their own individual desktop clients\n\t- you could also use a cloud version e.g. MongoDB Atlas\n\t- Node.js, he's on 12.18.4\n\t- he uses nvm\n- https://frontendmasters.com/courses/databases/terminology\n\t- a database is a repository of data\n\t- there's a variety of ways they can work\n\t- one is going to be significantly better for the problem you have\n\t- each has query languages\n\t\t- four different query languages\n\t- schemas\n\t\t- the shape of your data\n\t\t- in Excel, columns would be your schema\n\t- MongoDB is schemaless\n\t- search engines\n\t\t- [Solr](https://solr.apache.org)\n\t\t- [Sphinx](http://sphinxsearch.com)\n\t- wide column databases\n\t\t- Google Bigtable\n\t\t- Apache Cassandra\n\t\t- it's a two-dimensional key-value store\n\t- message broker\n\t\t- Kafka\n\t\t- RabbitMQ\n\t- multi model databases \n\t\t- [Azure Cosmos DB](https://learn.microsoft.com/en-us/azure/cosmos-db/introduction)\n\t\t- [ArangoDB](https://arangodb.com)\n\t- ACID\n\t\t- atomicity\n\t\t\t- does this query happen all at once\n\t\t\t- i.e. transactions: if I subtract 10 euros from your account and add 10 to mine, we want both to happen or neither to happen\n\t\t- consistency\n\t\t\t- always have multiple databases running at the same time, so if one goes down, the others fill in \n\t\t- isolation\n\t\t\t- you can run pieces of a query concurrently\n\t\t- durability\n\t\t\t- if your server crashes, you can restore it to the state it was previously\n\t\t- ACID is safe, but it's slow\n\t\t- transactions\n\t\t\t- many queries you can't break up\n\t\t\t- either all of these queries happen, or none\n- https://frontendmasters.com/courses/databases/nosql\n\t- \"The first of the four types of databases we'll be looking at today are NoSQL databases, which is a dumb marketing term, just like serverless. It was a really hot marketing term in, like, 2010 and just stuck. It's a meaningless term, but I'm using it because you'll be seeing it everywhere in the documentation and marketing material. What we'll really be talking about today is a document-based database. One of the biggest advantages of a document database is that it is schemaless so you can actually be defining a data schema on the fly. It makes it really easy to get up and running with one of these, and it is very conducive to the dynamic scripting kind of thinking that you would get from a JavaScript or Python type language. Document databases are a double-edged sword where while you never have to define your databases up front, if you misspell a field name, then your database will say oh you're creating a new field, here you go, so you have to be careful. With great power comes great responsibility.\" //quote\n- https://frontendmasters.com/courses/databases/mongodb\n\t- I very frequently choose MongoDB because it's easy to get up and running with\n\t- `docker run --name test-mongo -dit -p 27017:27017 --rm mongo:4.4.1`##theinstalkskjs\n\t- dit = detach interactive tty\n\t- `docker ps`##theodkcjsdfps\n\t- `docker exec -it test-mongo mongo`##theandokfjviej\n\t- a database is a group of collections and a collection is a grab bag of documents\n\t- you can think of it as JavaScript objects, in fact, the query language for MongoDB is just JavaScript, so if you already know JavaScript, you already know how to query in MongoDB \n\t- everything works:##alleworks\n\t- db.stats()\n\t- `use socialflashcards`\n\t- `db.flashcards.insertOne({front: \"the house\", back: \"das Haus\"})`\n\t- `db.flashcards.find()`\n- https://frontendmasters.com/courses/databases/querying-mongodb\n\t- DOING","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-19 15:43:03","systemWhoCreated":"systemUnknown"},{"id":798,"category":"VSCode","title":"Useful VSCode configuration files","body":"- **purpose of this howto**\n\t- my Peacock extension stopped working in my Windows VSCode so I can't set colors of VSCode anymore\n\t- therefore I save various color schemes I use here to copy and paste\n\t- I also keep other copy-and-paste code for VSCode here, e.g. configurations for TypeScript and Prettier, etc.\n- **.prettierrc**\n\t----------------------------------------\n\t{\n\t\t\"trailingComma\": \"es5\",\n\t\t\"tabWidth\": 4,\n\t\t\"semi\": true,\n\t\t\"useTabs\": true,\n\t\t\"singleQuote\": false\n\t}\n\t----------------------------------------\n- **test.rest**\n\t------------------------------------------------\n\t@url = http://localhost:4211\n\n\t### ADD SINGLE BOOK\n\tPOST {{url}}/books\n\tcontent-type: application/json\n\t\t\n\t{\n\t\t\"title\": \"Book 005\",\n\t\t\"authors\": [\n\t\t\t\"John Granger\",\n\t\t\t\"Jines Hooplaton\"\n\t\t],\n\t\t\"pages\": 812,\n\t\t\"available\": true\n\t}\n\n\t### GET ALL BOOKS\n\tGET {{url}}/books\n\t------------------------------------------------\n- **backend blue**##navyblueback2\n\t-----------------------------------------------------------\n\t{\n\t\t\"workbench.colorCustomizations\": {\n\t\t\t\"activityBar.activeBackground\": \"#000080\",\n\t\t\t\"activityBar.background\": \"#000080\",\n\t\t\t\"activityBar.foreground\": \"#cccccc\",\n\t\t\t\"activityBar.inactiveForeground\": \"#cccccc\",\n\t\t\t\"activityBarBadge.background\": \"#333333\",\n\t\t\t\"activityBarBadge.foreground\": \"#cccccc\",\n\t\t\t\"commandCenter.border\": \"#333333\",\n\t\t\t\"sash.hoverBorder\": \"#000080\",\n\t\t\t\"statusBar.background\": \"#000080\",\n\t\t\t\"statusBar.foreground\": \"#cccccc\",\n\t\t\t\"statusBarItem.hoverBackground\": \"#000080\",\n\t\t\t\"statusBarItem.remoteBackground\": \"#000080\",\n\t\t\t\"statusBarItem.remoteForeground\": \"#cccccc\",\n\t\t\t\"titleBar.activeBackground\": \"#000080\",\n\t\t\t\"titleBar.activeForeground\": \"#cccccc\",\n\t\t\t\"titleBar.inactiveBackground\": \"#000080\",\n\t\t\t\"titleBar.inactiveForeground\": \"#cccccc\"\n\t\t},\n\t\t\"peacock.color\": \"#888\"\n\t}\n\t-----------------------------------------------------------\n- **frontend fuchsia**##ffrontfuch\n\t--------------------------------------------------\n\t{\n\t\t\"workbench.colorCustomizations\": {\n\t\t\t\"activityBar.activeBackground\": \"#9b18c7\",\n\t\t\t\"activityBar.background\": \"#9b18c7\",\n\t\t\t\"activityBar.foreground\": \"#cccccc\",\n\t\t\t\"activityBar.inactiveForeground\": \"#cccccc\",\n\t\t\t\"activityBarBadge.background\": \"#333333\",\n\t\t\t\"activityBarBadge.foreground\": \"#cccccc\",\n\t\t\t\"commandCenter.border\": \"#333333\",\n\t\t\t\"sash.hoverBorder\": \"#9b18c7\",\n\t\t\t\"statusBar.background\": \"#9b18c7\",\n\t\t\t\"statusBar.foreground\": \"#cccccc\",\n\t\t\t\"statusBarItem.hoverBackground\": \"#9b18c7\",\n\t\t\t\"statusBarItem.remoteBackground\": \"#9b18c7\",\n\t\t\t\"statusBarItem.remoteForeground\": \"#cccccc\",\n\t\t\t\"titleBar.activeBackground\": \"#9b18c7\",\n\t\t\t\"titleBar.activeForeground\": \"#cccccc\",\n\t\t\t\"titleBar.inactiveBackground\": \"#9b18c7\",\n\t\t\t\"titleBar.inactiveForeground\": \"#cccccc\"\n\t\t},\n\t\t\"peacock.color\": \"#888\"\n\t}\t\n\t--------------------------------------------------\n- **general gray**##generalgray\n\t-----------------------------------------------------------\n\t{\n\t\t\"workbench.colorCustomizations\": {\n\t\t\t\"activityBar.activeBackground\": \"#777777\",\n\t\t\t\"activityBar.background\": \"#777777\",\n\t\t\t\"activityBar.foreground\": \"#cccccc\",\n\t\t\t\"activityBar.inactiveForeground\": \"#cccccc\",\n\t\t\t\"activityBarBadge.background\": \"#333333\",\n\t\t\t\"activityBarBadge.foreground\": \"#cccccc\",\n\t\t\t\"commandCenter.border\": \"#333333\",\n\t\t\t\"sash.hoverBorder\": \"#777777\",\n\t\t\t\"statusBar.background\": \"#777777\",\n\t\t\t\"statusBar.foreground\": \"#cccccc\",\n\t\t\t\"statusBarItem.hoverBackground\": \"#777777\",\n\t\t\t\"statusBarItem.remoteBackground\": \"#777777\",\n\t\t\t\"statusBarItem.remoteForeground\": \"#cccccc\",\n\t\t\t\"titleBar.activeBackground\": \"#777777\",\n\t\t\t\"titleBar.activeForeground\": \"#cccccc\",\n\t\t\t\"titleBar.inactiveBackground\": \"#777777\",\n\t\t\t\"titleBar.inactiveForeground\": \"#cccccc\"\n\t\t},\n\t\t\"peacock.color\": \"#888\"\n\t}\n\t-----------------------------------------------------------\n- **general gray light**##generalgraylight2\n\t-----------------------------------------------------------\n\t{\n\t\t\"workbench.colorCustomizations\": {\n\t\t\t\"activityBar.activeBackground\": \"#aaaaaa\",\n\t\t\t\"activityBar.background\": \"#aaaaaa\",\n\t\t\t\"activityBar.foreground\": \"#cccccc\",\n\t\t\t\"activityBar.inactiveForeground\": \"#cccccc\",\n\t\t\t\"activityBarBadge.background\": \"#333333\",\n\t\t\t\"activityBarBadge.foreground\": \"#cccccc\",\n\t\t\t\"commandCenter.border\": \"#333333\",\n\t\t\t\"sash.hoverBorder\": \"#aaaaaa\",\n\t\t\t\"statusBar.background\": \"#aaaaaa\",\n\t\t\t\"statusBar.foreground\": \"#cccccc\",\n\t\t\t\"statusBarItem.hoverBackground\": \"#aaaaaa\",\n\t\t\t\"statusBarItem.remoteBackground\": \"#aaaaaa\",\n\t\t\t\"statusBarItem.remoteForeground\": \"#cccccc\",\n\t\t\t\"titleBar.activeBackground\": \"#aaaaaa\",\n\t\t\t\"titleBar.activeForeground\": \"#cccccc\",\n\t\t\t\"titleBar.inactiveBackground\": \"#aaaaaa\",\n\t\t\t\"titleBar.inactiveForeground\": \"#cccccc\"\n\t\t}\n\t}\n\t-----------------------------------------------------------\n- **salmon dark lettering**##salmon22\n\t-----------------------------------------------------------\n\t{\n\t\t\"workbench.colorCustomizations\": {\n\t\t\t\"activityBar.activeBackground\": \"#ff9078\",\n\t\t\t\"activityBar.background\": \"#ff9078\",\n\t\t\t\"activityBar.foreground\": \"#000000\",\n\t\t\t\"activityBar.inactiveForeground\": \"#000000\",\n\t\t\t\"activityBarBadge.background\": \"#333333\",\n\t\t\"activityBarBadge.foreground\": \"#ffffff\",\n\t\t\t\"commandCenter.border\": \"#333333\",\n\t\t\t\"sash.hoverBorder\": \"#ff9078\",\n\t\t\t\"statusBar.background\": \"#ff9078\",\n\t\t\t\"statusBar.foreground\": \"#000000\",\n\t\t\t\"statusBarItem.hoverBackground\": \"#ff9078\",\n\t\t\t\"statusBarItem.remoteBackground\": \"#ff9078\",\n\t\t\t\"statusBarItem.remoteForeground\": \"#000000\",\n\t\t\t\"titleBar.activeBackground\": \"#ff9078\",\n\t\t\t\"titleBar.activeForeground\": \"#000000\",\n\t\t\t\"titleBar.inactiveBackground\": \"#ff9078\",\n\t\t\t\"titleBar.inactiveForeground\": \"#000000\"\n\t\t},\n\t\t\"peacock.color\": \"#888\"\n\t}\n\t-----------------------------------------------------------\n- **PINK**\n\t-------------------------------------------------------------\n\t{\n\t\t\"workbench.colorCustomizations\": {\n\t\t\"activityBar.activeBackground\": \"#FFC0CB\",\n\t\t\"activityBar.background\": \"#FFC0CB\",\n\t\t\"activityBar.foreground\": \"#000000\",\n\t\t\"activityBar.inactiveForeground\": \"#000000\",\n\t\t\"activityBarBadge.background\": \"#333333\",\n\t\t\"activityBarBadge.foreground\": \"#ffffff\",\n\t\t\"commandCenter.border\": \"#333333\",\n\t\t\"sash.hoverBorder\": \"#FFC0CB\",\n\t\t\"statusBar.background\": \"#FFC0CB\",\n\t\t\"statusBar.foreground\": \"#000000\",\n\t\t\"statusBarItem.hoverBackground\": \"#FFC0CB\",\n\t\t\"statusBarItem.remoteBackground\": \"#FFC0CB\",\n\t\t\"statusBarItem.remoteForeground\": \"#000000\",\n\t\t\"titleBar.activeBackground\": \"#FFC0CB\",\n\t\t\"titleBar.activeForeground\": \"#000000\",\n\t\t\"titleBar.inactiveBackground\": \"#FFC0CB\",\n\t\t\"titleBar.inactiveForeground\": \"#000000\"\n\t},\n\t\t\"peacock.color\": \"#888\"\n\t}\n\t-------------------------------------------------------------","points":20,"extras":"","systemWhenCreated":"2023-12-19 16:17:40","systemWhoCreated":"systemUnknown"},{"id":799,"category":"TypeScript","title":"Notes on Mike North's TypeScript 5+ Fundamentals course","body":"- info\n\t- course given \n\t\t- December 2023\n\t- course notes\n\t\t- https://www.typescript-training.com/course/fundamentals-v4\n\t- course repo\n\t\t- https://github.com/mike-north/typescript-courses\n\t- my project during this course\n\t\t- et892-typescript-course-001\n- https://frontendmasters.com/courses/typescript-v4/introduction\n\t- at Stripe\n\t- \"we use TypeScript to discuss the semantics of the project\"\n\t- goal\n\t\t- you should have a mental model about how TypeScript works\n\t- TypeScript\n\t\t- a syntactic superset of JavaScript\n\t\t- three parts of TypeScript\n\t\t\t- the language itself\n\t\t\t- compiler \n\t\t\t\t- turns TypeScript into JavaScript\n\t\t\t- language server\n\t\t\t\t- works in e.g. VSCode to help validate code as you're writing it\n\t\t- \"You can think of TypeScript as a sophisticated linter. The reason why I encourage you to use this mental model is that TypeScript only does things for you during development and build time, not a run time. Using TypeScript is not the same as using C# or Java which have type validation at run time. So think of TypeScript as something that helps you while you're building your project, and then sort of melts away when your project gets compiled and pushed to the production server as regular JavaScript with no type checking.\" //quote\n\t\t- starting to become a ubiquitous part of a modern frontend stak\n\t\t- \"Why are types such a big deal? Why is TypeScript so popular? Well, first of all, it lets you leave more of your intent on the page. If you mean something to be a number, then specify it as a number. If you mean something to be a string, then specify it as a string. Later when a developer, including you, tries to use a string where you meant it to be a number, TypeScript will let you know that this was not your original intent. And this will prevent errors later at runtime. So TypeScript removes things that typically would be problems at runtime into development time so that you get this feedback earlier.\" //quote\n\t\t- \"In larger applications, JavaScript gets to a point where you start tripping over your own shoelaces. You begin to not be able to hold the conventions that you established in your own mind, and TypeScript helps you put that into source code.\" //quote\n- https://frontendmasters.com/courses/typescript-v4/workshop-setup\n\t- you want to install [Volta](nnn)\n\t\t- similar to nvm\n\t\t- installed on Windows and now get this##instvolta\n\t- `volta install node@lts yarn@^3`##volnpmsdkf\n\t- he uses **yarn**\n\t- `yarn` is taking many minutes, finally stopped it\n\t- `npm i` got an error##npmgotaskdjf\n\t- using `yarn` again, taking 3-4 minutes so far##finijsdflsk\n\t- finally finished##finallkjsfin\n\t- [Protocol Buffers](https://protobuf.dev), or protobufs, are language-neutral, platform-neutral extensible mechanisms for serializing structured data\n- https://frontendmasters.com/courses/typescript-v4/compiling-typescript-with-tsc\n\t- his await trick doesn't seem to work##codeodsdseem\n\t- he's changing **target** and shows that the code that is produced is changing##changisjdftarget\n\t- in **tsconfig.json** he added `\"declaration\": true`##addedcedeclar\n\t- a **declaration file** then appears: **index.d.ts**##anewfilesdkj\n\t\t- the purpose of this file is to allow TypeScript to understand the types and interfaces of the non-TypeScript code when you are using TypeScript alongside JavaScript or other languages\n- https://frontendmasters.com/courses/typescript-v4/variable-declarations-inference\n\t- TypeScript infers types\n\t- a set is a group of values where there are not duplicates in the list of values, so you can think of types as describing a set of allowed values\n\t- \"What TypeScript generally tries to do is make the most reasonsable assumption it can make without getting in your way.\"\n- https://frontendmasters.com/courses/typescript-v4/any-type-casting\n\t- you can cast up, then down##upthendown\n\t- `unknown` and `any` are top types\n- https://frontendmasters.com/courses/typescript-v4/functions-return-types\n\t- ESLint and TypeScript work really well together. \n\t- [typescript-eslint](https://typescript-eslint.io) - tooling that enables ESLint and Prettier to support TypeScript\n\t- it's better to specify the return times of functions, which will catch if you don't send a value##whatshap\n\t- \"I would prefer to be very explicit about what I intend to return from a function. It's a contract I have to live up to. If you don't define what return value types you expect, you can easily return an undefined which won't be caught immediately, but rather when you later try to use it. You then get your errors late, like when you would expect a duck-typing error to pop up. I prefer to catch return errors earlier immediately as they are returned out of my function.\" //quote##prefertypesasreturns\n- https://frontendmasters.com/courses/typescript-v4/functions-return-types\n\t- in interfaces, semicolons are optional##okwithout\n\t- makes optional property with question mark\n- https://frontendmasters.com/courses/typescript-v4/functions-return-types\n\t- index signature##indexsig\n\t- writing keys as strings can indicate that the property is not predefined##accountsfor\n\t\t- dot notation for known properties, bracket notation for index field access\n\t- this basically just means \"type string\"##stringmobile\n\t- how do we handle JSON texts that come with an API call\n\t\t- he'll cover this later and in the [Fullstack TypeScript](https://frontendmasters.com/courses/fullstack-typescript) course (2022) where he has strongly typed contracts between frontend and backend\n\t- TypeScript gets a little noisy but everything is sure of what it is\n\t- anys are bugs waiting to happen\nhttps://frontendmasters.com/courses/typescript-v4/objects-property-types\n\t- your auto-complete tells you that properties are available on the object\n\t- `chargeVoltage?: number` for optional property\n\t- after a type guard, the variable is known as a number\n\t- excess property checking\n\t\t- excess properties are properties that are not defined in the type or interface\n\t- it's possible to defeat the helpfulness of TypeScript\n- https://frontendmasters.com/courses/typescript-v4/index-signatures\n\t- example of index signature:\n\t\t---------------------------------------------\n\t\tinterface IEmployeePhones {\n\t\t\t[k: string]: {\n\t\t\t\thome: string;\n\t\t\t\toffice: string;\n\t\t\t\tmobile: string;\n\t\t\t}\n\t\t}\n\n\t\tconst phones: IEmployeePhones = {\n\t\t\t\"johntaylor\": {\n\t\t\t\t\"home\": \"123\",\n\t\t\t\t\"office\": \"456\",\n\t\t\t\t\"mobile\": \"789\"\n\t\t\t}\n\t\t}\n\n\t\texport const PageWelcome = () => {\n\t\t\treturn (\n\t\t\t\t<p>John's home phone: {phones.johntaylor.home}</p>\n\t\t\t)\n\t\t}\t\t\n\t\t---------------------------------------------\n\t- and for a count object\n\t\t--------------------------------------------\n\t\tinterface ICountObject {\n\t\t\t[k: string]: number;\n\t\t}\n\n\t\tconst categoryCounter: ICountObject = {\n\t\t\tlinux: 54,\n\t\t\treact: 44,\n\t\t\ttypescript: 34,\n\t\t};\n\n\t\tconst category = 'vue';\n\t\tcategoryCounter[category] = 99;\n\n\t\texport const PageWelcome = () => {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>React: {categoryCounter.react}</p>\n\t\t\t\t\t<p>Vue: {categoryCounter.vue}</p>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t--------------------------------------------\n\t- when accessing a known property, use `phones.home`, but when reaching into a dictionary, use `phones[\"special\"}`\n- https://frontendmasters.com/courses/typescript-v4/array-types-tuples-readonly\n\t- you can define arrays of objects like this##candefinelik\n\t- tuples\n\t\t- \"When you use readonly on a TypeScript array, push and pop don't even exist anymore, look, we're not allowed to even mess with this array now. So the readonly keyword when used with tuples is pretty cool. You get very close to a degree of safety for array types.\" //quote##tuplesdefined\n- https://frontendmasters.com/courses/typescript-v4/structural-vs-nominal-typing\n\t- type checking: how does what you are returning compare to what you stated you will return\n\t\t- it's a question of subsets\n\t- static vs dynamic\n\t\t- static\n\t\t\t- TypeScript, C#, C++, Java\n\t\t- dynamic\n\t\t\t- JavaScript, Python, Ruby, Perl, PHP\n\t- strong vs weak\n\t\t- has to do with coercing and converting types\n\t\t- but not very well defined what these are\n\t-","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2023-12-20 02:05:30","systemWhoCreated":"systemUnknown"},{"id":800,"category":"Software Development","title":"Notes on Kevlin Henney talk \"Old is the New New\"","body":"- https://www.youtube.com/watch?v=AbgsfeGvg3E\n- the premise: \"underneath constant change there is a very constant and steady continuity and constant lack of change\"\n- even though so much changes, I can have a surprising amount of informed conversation about things by asking, \"what is this like and what are the differences\"\n- and you take pass on words of wisdom from 1972 that have to do with modern technologies\n- \"Toutes chose sont dites déjà, mais comme personne n'écoute, il faut toujours recommencer.\" - [André Gide](https://fr.wikipedia.org/wiki/Andr%C3%A9_Gide)\n- in the software industry, we have a poor since of history, so we have a constant habit of rediscover\n- Shakespeare\n\t- the first programmer\n\t- the lack of appropriate hardward was a little awkward\n\t- Hamlet, a play about memory management:##themeroms\n\t- and garbage collection:##hamlegarb\n- [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language))\n\t- first implementation in the 60s\n\t- one of the earliest programming languages, Lisp pioneered many ideas in computer science, including \n\t\t- tree data structures\n\t\t- automatic storage management\n\t\t- dynamic typing\n\t\t- conditionals\n\t\t- higher-order functions\n\t\t- recursion\n\t\t- the self-hosting compiler\n\t\t- read–eval–print loop\n\t\t- also had a concept of had garbage collection\n- [Algol 68](https://en.wikipedia.org/wiki/ALGOL_68) \n\t- C was directly influenced by ALGOL 68, especially by its strong typing and structures, most modern languages trace at least some of their syntax to either C or Pascal, and thus directly or indirectly to ALGOL 68\n\t- considered to be too complex to be implemented\n\t- gave us the abbreviation of \"int\" for integer\n\t- procedural language\n\t- expression instead of statement oriented, everything yielded a value\n\t- had something like lambda expressions\n\t- was also garbage collected\n- patterns\n\t- what are your patterns, what is your vernacular architecture\n\t- \"patterns rae an aggressive disregard of originality\"\n\t- \"worse is better\" \n\t\t- 1990\n\t\t- Richard P. Gabriel\n\t\t- the less features, the easier to use\n\t\t- it's far better to have an underfeatured product that is rock solid, fast and small\n\t- characteristics\n\t\t- simplicity \n\t\t\t- design should be sufficient but not awesome\n\t\t\t- [John Lions]\n\t\t\t\t- https://en.wikipedia.org/wiki/John_Lions\n\t\t\t\t- \"Lions' Commentary on UNIX\"\n\t\t\t\t\t- 9,500 lines will give you an operating system\n\t\t\t\t- size constraints lead to an elegancy of design\t\t\t\n\t\t\t- commands should do one thing and do it well\n\t\t- completeness \n\t\t\t- covers only necessary situations\n\t\t\t- the first Wiki was 150 lines of Perl code\n\t\t\t- similar to the [c2.com wiki](https://wiki.c2.com)\n\t\t\t\t- it's so small, you can rewrite it\n\t\t- correctness\n\t\t\t- what you do, do it right\n\t\t- consistency\n\t\t\t- the smaller, the more consistent by default\n- software needs to develop incremental\n\t- Software Engineering conference\n\t\t- Garmisch, 1968\n\t\t- [Margaret Hamilton](https://en.wikipedia.org/wiki/Margaret_Hamilton_(software_engineer))\n\t\t\t- directory of team that developed on-board flight software for NASA's Apollo program\n\t\t\t- created ideas like fault tolerance\n\t\t\t- software engineering - everyone is at the table\n- the fastest I/O is no I/O\n- your assumptions are a moving target\n\t- if you go back to someone in the 90s and tell them you have 2GB free on your laptop and extra space to continue working, they wouldn't believe you\n\t- if anyone gives you the option of not putting something out on the network, take it\n\t- the speed of light is no in a config file, you don't get to change it\n- every decade there is a cycle of concepts\n\t- e.g. services and then came microservices\n\t- \"write programs that work together\"\n- testing\n\t- software should be bug free\n\t- unit tests - mentioned in the 60s\n\t- AWK was replaced by a language called Perl, or a friend of mine descripes it, executable line noise\n\t- test-driven development, 1970s\n\t\t- therefore we should understand a history of these ideas\n- shipping first time code is like going into debt\n\t- debt is not bad, as long as its structured debt, e.g. mortgage\n\t- the danger occurs when the debt is not repaid\n- \"in the long run, every program becomes rococo, then rubble\" - [Alan Perlis](https://en.wikipedia.org/wiki/Alan_Perlis)\n- \"programming is a design activity\" \n- \"Lambda-calculus (1930s) was the first object-oriented langauge\"\n- \"Excel is the world's most popular functional language.\"\n- 1964, the idea of the UNIX pipe found in an essay\n\t- implemented by Ken Thompson in 1970\n- you can see these patterns everywhere, this is why it is useful to understand software engineering history","points":20,"extras":"","systemWhenCreated":"2023-12-21 13:32:14","systemWhoCreated":"systemUnknown"},{"id":801,"category":"Fullstack App","title":"Build online app with Node/Express backend at Render and Vite-React frontend at Vercel","body":"- **what we will build**\n\t- an info-app that is full stack\n\t\t- backend: \n\t\t\t- an API that has routes that provide various kinds of information (links, flashcards, skills)\n\t\t\t- also has routes to edit, delete and add these items\n\t\t- frontend: \n\t\t\t- fetches data from backend API various routes and displays this information\n\t\t\t- enables a use to login, a JWT is set which keeps him logged in\n\t\t\t- logged in users can edit, add and delete data\n\t- backend \n\t\t- will be a Node/Express API that runs at Render\n\t\t- will access a Postgres database that runs at Render\n\t\t- will use Prisma to access Postgres\n\t\t- produces JWT tokens for authentication\n\t\t- will use TypeScript and ES6 modules\n\t- frontend\n\t\t- will be a Vite-React app that runs at Vercel\n\t\t- will access backend data\n\t\t- will take into account that the Render app can take up to 60 seconds to spin up after not being used for a certain time\n\t\t\t- will show a message explaining this\n\t\t- will use TypeScript and ES6 modules\n- **directory structure and names**\n\t- let's spend some time organizing the naming of the directories, etc. \n\t\t- otherwise when you have numerous fullstack projects, you can easily lose track of what frontends belong to what backends, etc.\n\t- idCode for app: **et488-info-app**\n\t- local directory structure\n\t\t- **et488-info-app-fullstack**\n\t\t\t- **et488-info-app-backend**\n\t\t\t- **et488-info-app** (frontend)\n\t- git repositories\n\t\t- **et488-info-app-backend**\n\t\t- **et488-info-app** (frontend)\n\t- application URLs\n\t\t- **et488-info-app-backend**\n\t\t- **et488-info-app** (frontend)\n- **code is here**\n\t- backend: https://github.com/edwardtanguay/et488-info-app-backend\n\t- frontend: https://github.com/edwardtanguay/et488-info-app\n- **site is live here**\n\t- note that the backend can take **up to 90 seconds** to spin up if it hasn't been accessed in the **past 15 minutes**##theuptospin\n\t- backend: https://et488-info-app-backend.onrender.com \n\t- frontend: https://et488-info-app.vercel.app\n- **site will look like this:**\n\t- backend:##thebackendfrrrr2\n\t- frontend:##nowthdataappear2\n- **>>> 1. Build local TypeScript/ES6-modules Node/Express API that has a test route**\n\t- create local directory structure for fullstack app\n\t\t- **et488-info-app-fullstack**\n\t\t\t- **et488-info-app-backend**\n\t\t\t- **et488-info-app** (frontend, we'll use this in the next step)\n\t- set up test script with JavaScript\n\t\t- open VSCode inside backend directory\n\t\t- **src/index.js**\n\t\t\t---------------------------------\n\t\t\tconsole.log('it works');\n\t\t\t---------------------------------\n\t\t- note you can run the file like this\n\t\t\t- `node src/index.js`##thetasafstart\n\t- but we want our backend to be an **npm project** in order to (1) use npm packages and (2) have more organization in the project\n\t\t- `npm init -y`\n\t\t- **package.json** - replace **test** with **dev** \n\t\t\t-----------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"node src/index.js\"\n\t\t\t},\t\t\t\n\t\t\t-----------------------------------\n\t\t- `npm run dev`##npmrundskjd\n\t- now we want to set up TypeScript in order to have type-safety, auto-completion that we have in the frontend \n\t\t- in the frontend, we get TypeScript automatically with Vite React\n\t\t- but in the backend, we need to set it up manually\n\t\t- change index.js to **index.ts** and change to TypeScript code\n\t\t\t-------------------------------------------\n\t\t\tconst getPort = (): number => {\n\t\t\t\treturn 4888;\n\t\t\t}\n\n\t\t\tconsole.log(`current port is ${getPort()}`);\t\t\t\n\t\t\t-------------------------------------------\n\t\t- set up a Git repository\n\t\t\t- `git init -b dev`\n\t\t\t- **.gitignore**\n\t\t\t\t--------------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.vscode\n\t\t\t\tdist\n\t\t\t\t.env\n\t\t\t\t--------------------------------------\n\t\t\t- make initial commit\n\t\t- note VSCode will have no problem with the TypeScript code, but when you execute it, Node can't process the TypeScript:\n\t\t\t- `node src/index.ts`##thenonodjss\n\t\t- set up TypeScript\n\t\t\t- we will use **tsx** instead of ts-node in order to have a faster, more natural developer experience, similar to that of using TypeScript in Vite React\n\t\t\t\t- *\"tsx is the newest and most improved version of our ts-node, using ESBuild to transpile TS files to JS very quickly\"* - [How to run TypeScript natively in Node.js with TSX](https://dev.to/_staticvoid/how-to-run-typescript-natively-in-nodejs-with-tsx-3a0c)\n\t\t\t- install tsx\n\t\t\t\t- `npm i -D tsx`\n\t\t\t- **package.json**\n\t\t\t\t-----------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"tsx src/index.ts\"\n\t\t\t\t},\n\t\t\t\t-----------------------------\n\t\t\t- `npm run dev` now runs TypeScript\n\t- build simple API that provides data\n\t\t- install Express\n\t\t\t- `npm i express`\n\t\t- **index.ts**\n\t\t\t------------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tconst app = express();\n\n\t\t\tconst getPort = (): number => {\n\t\t\t\treturn 4888;\n\t\t\t}\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.json({\n\t\t\t\t\tappName: \"et488-info-app-backend\"\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tapp.listen(getPort(), () => {\n\t\t\t\tconsole.log(`listening at http://localhost:${getPort()}`);\n\t\t\t});\t\t\t\t\n\t\t\t------------------------------------------\n\t\t- run API \n\t\t\t- `npm run dev`\n\t\t\t- click on displayed to see your API working in your browser:##theapiaowrk\n\t\t- note that Express indicates that it doesn't have its TypeScript types\n\t\t\t- let's install them so we get better intellisense when using Express##theworkagainexpress\n\t\t\t- `npm i -D @types/express`\n\t\t\t- with TypeScript types, you now get auto-complete, intellisense and documentation for Express and all of its types, e.g. the much-used **Request** and **Response** objects\n\t\t\t\t- this is very useful in learning and developing with Express##hvemoreforexpress\n\t- set up custom ES6 modules\n\t\t- since we are using **tsx**, we don't need to set anything up to use ES6 module, they will work automatically\n\t\t\t- this was evident when we imported express\n\t\t\t- now let's export and import custom ES6 modules\n\t\t- let's put the **port definition function** into a config file\n\t\t\t- **src/config.ts**\n\t\t\t\t---------------------------------------\n\t\t\t\texport const getPort = (): number => {\n\t\t\t\t\treturn 4887;\n\t\t\t\t}\t\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- **index.ts** - import and use the getPort() function\n\t\t\t\t---------------------------------------\n\t\t\t\timport express from 'express';\n\t\t\t\timport * as config from './config';\n\n\t\t\t\tconst app = express();\n\n\t\t\t\tapp.get('/', (req, res) => {\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tappName: \"et488-info-app-backend\"\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tapp.listen(config.getPort(), () => {\n\t\t\t\t\tconsole.log(`listening at http://localhost:${config.getPort()}`);\n\t\t\t\t});\t\t\t\t\t\n\t\t\t\t---------------------------------------\n\t\t\t- it works just as before##beforeakdjexp\n\t\t- now let's put the application name into the config\n\t\t\t- **config.ts**\n\t\t\t\t----------------------------------------\n\t\t\t\texport const getAppName = (): string => {\n\t\t\t\t\treturn 'Info App - Backend'\n\t\t\t\t}\n\t\t\t\t----------------------------------------\n\t\t\t- **index.ts**\n\t\t\t\t-------------------------------------\n\t\t\t\tapp.get('/', (req, res) => {\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tappName: config.getAppName()\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t-------------------------------------\n\t\t\t- it shows the new name now:##thenewbrowexprs\n\t\t\t- but note that in order to see the change, **you have to restart the server**\n\t\t- implement nodemon\n\t\t\t- **nodemon** is an npm package that will watch for changes in files, and when a file changes, restart the server\n\t\t\t\t- we want to implement this feature **so that we don't have to always restart our server** every time we make a change to our code\n\t\t\t\t- this is the same developer experience one has automatically with Vite React\n\t\t\t- `npm i -D nodemon`\n\t\t\t- **package.json**\n\t\t\t\t----------------------------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon\"\n\t\t\t\t},\n\t\t\t\t\"nodemonConfig\": {\n\t\t\t\t\t\"watch\": [\n\t\t\t\t\t\t\"src\"\n\t\t\t\t\t],\n\t\t\t\t\t\"ext\": \"ts\",\n\t\t\t\t\t\"exec\": \"tsx src/index.ts\"\n\t\t\t\t},\n\t\t\t\t----------------------------------------------------\n\t\t\t- now when you make a change, nodemon will notice this and restart your API\n\t\t\t\t- so your new data served by your API will be automatically available to your frontend without you having to restart your API\n- **>>> 2. Build local Vite React site and display data from backend API**\n\t- let's create a Vite React site with menu\n\t\t- go to: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- \"Use this template\"\n\t\t- \"Create a new repository\"\n\t\t- type in the name of your front-end directory:##typeinnameofapp\n\t\t- \"Create repository\"\n\t\t- copy the clone url\n\t- clone it locally\n\t\t- im Terminal, navigate to: **et488-info-app-fullstack\\et488-info-app**\n\t\t- clone the site in that directory, not the period at the end\n\t\t\t- `git clone git@github.com:edwardtanguay/et488-info-app.git .`\n\t- set it up in VSCode\n\t\t- `code .`\n\t\t- `npm i`\n\t\t- **package.json** - tip: give your frontend site a port number that is similar to but not the same as the backend port (e.g. 3887, 4887) etc. which will help you better identify which backends and frontends belong together\n\t\t\t-----------------------------------------------\n\t\t\t\"dev\": \"vite --port 3887 --open\",\n\t\t\t-----------------------------------------------\n\t\t- start it: `npm run dev`\n\t- you should now have both your backend and frontend running on two separte ports##thetwobroksjdf\n\t- fetch the backend app name and display it on the front\n\t\t- `npm i axios`\n\t\t- **pageWelcome.tsx**\n\t\t\t----------------------------------------------------\n\t\t\timport axios from \"axios\";\n\t\t\timport { useEffect, useState } from \"react\";\n\n\t\t\tconst backendUrl = \"http://localhost:4887\";\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst [backendAppName, setBackendAppName] = useState(\"\");\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${backendUrl}`);\n\t\t\t\t\t\tconst _backendAppName = response.data.appName;\n\t\t\t\t\t\tsetBackendAppName(_backendAppName);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the welcome page.</p>\n\t\t\t\t\t\t<p>Backend app name is: {backendAppName}</p>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t----------------------------------------------------\n\t\t- note that there is a CORS error##theerrosjforjsidjback\n\t\t\t- fix the cors error on the **backend**\n\t\t\t- `npm i cors`\n\t\t\t- **index.ts**\n\t\t\t\t------------------------------------------------\n\t\t\t\timport express from 'express';\n\t\t\t\timport * as config from './config';\n\t\t\t\timport cors from 'cors';\n\n\t\t\t\tconst app = express();\n\t\t\t\tapp.use(cors());\n\t\t\t\t------------------------------------------------\n\t\t\t- `npm i -D @types/cors` (as with Express, install the cors types for TypeScript)\n\t\t\t- your frontend can now fetch data from your backend:##nowfeatchsname\n\t- now let's provide and fetch more realistic data\n\t\t- **backend: index.ts**\n\t\t\t------------------------------------------------\n\t\t\tapp.get('/frameworks', (req, res) => {\n\t\t\t\tres.json([\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'React',\n\t\t\t\t\t\turl: 'https://reactjs.org/',\n\t\t\t\t\t\tdescription: 'A declarative, efficient, and flexible JavaScript library for building user interfaces.'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Angular',\n\t\t\t\t\t\turl: 'https://angular.io/',\n\t\t\t\t\t\tdescription: 'A platform and framework for building client-side applications with HTML, CSS, and JavaScript/TypeScript.'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Vue.js',\n\t\t\t\t\t\turl: 'https://vuejs.org/',\n\t\t\t\t\t\tdescription: 'A progressive JavaScript framework for building user interfaces. It is incrementally adaptable and integrates well with other libraries.'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Next.js',\n\t\t\t\t\t\turl: 'https://nextjs.org/',\n\t\t\t\t\t\tdescription: 'A React-based framework that enables functionality such as server-side rendering and generating static websites for React-based web applications.'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Svelte',\n\t\t\t\t\t\turl: 'https://svelte.dev/',\n\t\t\t\t\t\tdescription: 'A radical new approach to building user interfaces. It shifts the work from the browser to the build step, resulting in faster runtime performance.'\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t});\n\t\t\t------------------------------------------------\n\t\t- **frontend: PageWelcome.tsx**\n\t\t\t-----------------------------------------\n\t\t\timport axios from \"axios\";\n\t\t\timport { useEffect, useState } from \"react\";\n\n\t\t\tconst backendUrl = \"http://localhost:4887\";\n\n\t\t\tinterface IFramework {\n\t\t\t\tname: string;\n\t\t\t\turl: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst [backendAppName, setBackendAppName] = useState(\"\");\n\t\t\t\tconst [frameworks, setFrameworks] = useState<IFramework[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${backendUrl}`);\n\t\t\t\t\t\tconst _backendAppName = response.data.appName;\n\t\t\t\t\t\tsetBackendAppName(_backendAppName);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${backendUrl}/frameworks`);\n\t\t\t\t\t\tconst _frameworks = response.data;\n\t\t\t\t\t\tsetFrameworks(_frameworks);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the welcome page.</p>\n\t\t\t\t\t\t<p>Backend app name is: {backendAppName}</p>\n\t\t\t\t\t\t<h2 className=\"text-xl mt-6 mb-3\">JavaScript Frameworks</h2>\n\t\t\t\t\t\t<ul className=\"list-disc ml-6\">\n\t\t\t\t\t\t\t{frameworks.map((framework, index) => {\n\t\t\t\t\t\t\t\treturn <li key={index}><a className=\"underline\" target=\"_blank\" href={framework.url}>{framework.name}</a> - {framework.description}</li>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------\n\t\t- your front end will fetch and show your backend data:##infositeshowingframeworks\n- **>>> 3. Deploy backend online at Render**\n\t- we now want to deploy both backend and frontend online to different servers\n\t\t- backend to Render\n\t\t- frontend to Vercel\n\t- before we deploy to Render, we need to set up some scripts for it to run\n\t\t- Render is not going to run TypeScript as we do in development\n\t\t\t- this will make it faster\n\t\t\t- this will also make it more stable since the JavaScript will be error-free since it was generated from error-free TypeScript\n\t\t- so Render is going to \n\t\t\t- compile TypeScript to JavaScript with **npm run build** \n\t\t\t- start the created **index.js** file with **Node**\n\t\t- set up these script like this:\n\t\t\t- `npm i -D typescript` - this gives us the **tsc** command, or **TypeScript compiler**\n\t\t\t- **package.json** - add build and start scripts\n\t\t\t\t-----------------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon\",\n\t\t\t\t\t\"build\": \"tsc -p tsconfig.json\",\n\t\t\t\t\t\"start\": \"node dist/index.js\"\n\t\t\t\t},\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t\t- **tsconfig** - tells the TypeScript compiler where to put the compiled JavaScript files, etc.\n\t\t\t\t---------------------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\t\t\"outDir\": \"dist\",\n\t\t\t\t\t\t\"strict\": false,\n\t\t\t\t\t\t\"lib\": [\"esnext\"],\n\t\t\t\t\t\t\"esModuleInterop\": true\n\t\t\t\t\t},\n\t\t\t\t\t\"include\": [\"src/**/*.ts\"]\n\t\t\t\t}\n\t\t\t\t---------------------------------------------\n\t\t- test this setup by running the same commands that Render will run:\n\t\t\t- `npm run build` - you will see that a **dist** directory was created with compiled JavaScript code##thecompiledjsjs\n\t\t\t- `npm start` this starts the **index.js** file with Node, the site will run just as before##thesiteasbbbefor\n\t- go to the [Render dashboard](https://dashboard.render.com)\n\t\t- we want to set up an **online API**\n\t\t- Render calls any such application that is served from its platform a **Web Service**\n\t\t- so click **New** and **Web Service**##thenewwebserv\n\t\t- \"Build and deploy from a Git repository\", Next\n\t\t- \"Connect GitHub\"\n\t\t- install on all repositories##theallrespos\n\t\t- choose your repository by clicked \"Connect\"##chhchchcrep\n\t\t- fill in all the information for your web service, including the scripts we just created:##infosforrend\n\t\t- click \"Create Web Service\"\n\t\t- it will build for about 30 seconds##twillbuild\n\t\t- then it will then deploy##souldthendepl\n\t\t- then it will say that your service is live, and give you a URL to click##willsaylive\n\t\t- click on the URL and you will see your backend serving its data from an **online https URL** in the same way it did from the **localhost http URL**:##justlikeonjsd\n\t- test to see that Render will protect you from any JavaScript errors that TypeScript catches\n\t\t- **config.ts**\n\t\t\t-------------------------------------\n\t\t\texport const getAppName = (): string => {\n\t\t\t\treturn 8888;\n\t\t\t}\n\t\t\t-------------------------------------\n\t\t- VSCode will show this as a TypeScript error:##the8888\n\t\t- but note that your local website will still work, this is a feature that makes it easier to develop with TypeScript while it indicates errors for you in VSCode##stillworksks\n\t\t- now commit this change to the repository with the error##commitwith\n\t\t- note at Render that it failed##notethatitfai\n\t\t- check the deploy logs##chckdepl\n\t\t- it tells you exactly **what** and **where** your error is:##telssyou\n\t\t- note that Render will not publish any commit that has a TypeScript error, which helps protect you from publishing any code that is not error free##noteuntilsfix\n- **>>> 4. Enable backend to know if it is running locally or at Render**\n\t- when you set up full-stack applications, it's imporant that your frontend and backend apps know where they are, e.g. on your local machine or online at a hosting provider like Render\n\t\t- this is called the **environment** in which the app currently is running\n\t\t- in order to inform the app of its environment, we use **environment variables**\n\t\t- common names for environments are:\n\t\t\t- **development**\n\t\t\t- **testing**\n\t\t\t- **production**\n\t\t- each of these environments will have an **environment file** (local) or a **environment variable collection** (hosting providers) which define specific variables such as\n\t\t\t- database connection strings\n\t\t\t- API keys\n\t\t\t- application configuration, e.g. **logging levels** (more for production and testing than development)\n\t\t\t- security settings, e.g. bcrypt salt variables, session secrets\n\t\t\t- feature flags, e.g. to enable or disable specific features in that environment\n\t\t\t- data to avoice CORS errors in that environment\n\t- let's implement environment variables into our app\n\t\t- we use first simply define the variable `APP_NAME` which depending on the environment will be:\n\t\t\t- local development: `Info App Backend (development)`\n\t\t\t- at Render: `Info App Backend (production-render)`\n\t- define app name for local **development environment**\n\t\t- create file **.env** in the root directory\n\t\t\t----------------------------------------------------\n\t\t\tAPP_NAME = Info App Backend (development)\n\t\t\t----------------------------------------------------\n\t\t- install **dotenv**, a tool that enables Node to read .env files\n\t\t\t- `npm i dotenv`\n\t\t- now read in the app name from **config.ts**\n\t\t\t-----------------------------------------------------------\n\t\t\timport dotenv from 'dotenv';\n\n\t\t\tdotenv.config();\n\n\t\t\texport const getPort = (): number => {\n\t\t\t\treturn 4887;\n\t\t\t}\n\n\t\t\texport const getAppName = (): string => {\n\t\t\t\tconst appName = process.env.APP_NAME;\n\t\t\t\treturn appName ? appName : 'ERROR: APP_NAME NOT DEFINED';\n\t\t\t}\n\t\t\t-----------------------------------------------------------\n\t\t- your local backend will now show the app name in the .env file##showthandienv\n\t- define app name for **production environment** at Render\n\t\t- create environment variable at Render\n\t\t\t- log into Render \n\t\t\t- go to dashboard\n\t\t\t- click on your app\n\t\t\t- click on **Environment**\n\t\t\t- enter `APP_NAME` and **Info App Backend (production-render)**\n\t\t\t- click **Save Changes**##envandsave\n\t\t- before you commit and push changes\n\t\t\t- **make sure that .env is in your .gitignore file**##theenvingi\n\t\t\t- **make sure that it is not in your files to commit**\n\t\t\t- **never check the .env file into GitHub**\n\t\t\t\t- otherwise you will expose any sensitive data that is in your .env file such as database connection strings with usernames and passwords\n\t\t- commit and push changes to GitHub\n\t\t- check your app at Render\n\t\t\t- when it has been redeployed with the changes, go to the backend URL\n\t\t\t- it will show the production app name##ontherednere\n- **>>> 5. Enable frontend to know if it is running in development or production**\n\t- in a similar way, we will now set up our frontend with environment variables\n\t\t- we will create the environment variables `VITE_BACKEND_URL` with the following values:\n\t\t\t- local development: http://localhost:4887\n\t\t\t- at Vercel: https://et488-info-app-backend.onrender.com\n\t\t- this means that:\n\t\t\t- our **local development frontend** will automatically fetch data from our **local development backend**\n\t\t\t- our **production frontend at Vercel** will automatically fetch data from our **production backend at Render**\n\t- Vite-React has a built-in ability to read .env\n\t\t- so you don't have to install dotenv\n\t\t- but your environment variables need to start with `VITE_` e.g. `VITE_BACKEND_URL`\n\t\t- and you don't access them with process.env but with **import.meta.env**\n\t\t- so to access our backend url, we will use `import.meta.env.VITE_BACKEND_URL`\n\t- first make sure your **.gitignore** file lists **.env**##theenvgitig\n\t- create **.env** in your root directory\n\t\t---------------------------------------\n\t\tVITE_BACKEND_URL = http://localhost:4887\n\t\t---------------------------------------\n\t- let's built a config file into the frontend as well\n\t\t- **src/config.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const getBackendUrl = (): string => {\n\t\t\t\tconst backendUrl = String(import.meta.env.VITE_BACKEND_URL);\n\t\t\t\treturn backendUrl !== 'undefined' ? backendUrl : 'ERROR: NO BACKEND URL FOUND';\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t- **PageWelcome.tsx**\n\t\t------------------------------------------------\n\t\timport axios from \"axios\";\n\t\timport { useEffect, useState } from \"react\";\n\t\timport * as config from \"../config\";\n\n\t\tinterface IFramework {\n\t\t\tname: string;\n\t\t\turl: string;\n\t\t\tdescription: string;\n\t\t}\n\n\t\texport const PageWelcome = () => {\n\t\t\tconst [backendAppName, setBackendAppName] = useState(\"\");\n\t\t\tconst [frameworks, setFrameworks] = useState<IFramework[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await axios.get(`${config.getBackendUrl()}`);\n\t\t\t\t\t\tconst _backendAppName = response.data.appName;\n\t\t\t\t\t\tsetBackendAppName(_backendAppName);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tsetBackendAppName(\"ERROR\");\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await axios.get(\n\t\t\t\t\t\t\t`${config.getBackendUrl()}/frameworks`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst _frameworks = response.data;\n\t\t\t\t\t\tsetFrameworks(_frameworks);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tsetFrameworks([]);\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>This is the welcome page.</p>\n\t\t\t\t\t<p>Backend URL is: {config.getBackendUrl()}</p>\n\t\t\t\t\t<p>Backend app name is: {backendAppName}</p>\n\t\t\t\t\t<h2 className=\"text-xl mt-6 mb-3\">JavaScript Frameworks</h2>\n\t\t\t\t\t<ul className=\"list-disc ml-6\">\n\t\t\t\t\t\t{frameworks.map((framework, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\tclassName=\"underline\"\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\t\thref={framework.url}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{framework.name}\n\t\t\t\t\t\t\t\t\t</a>{\" \"}\n\t\t\t\t\t\t\t\t\t- {framework.description}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t------------------------------------------------\n\t- you local site will show its local backend URL##thwinfosok\n- **>>> 6. Publish site to Vercel and set environment variable to get data from backend at Render**\n\t- commit and push changes to GitHub\n\t\t- make sure you do not push the **.env** file\n\t- create site at Vercel\n\t\t- log into Vercel\n\t\t- **Add New...**\n\t\t- **Project**\n\t\t- **Import**\n\t\t- **Deploy**\n\t- you will notice that your online site has two errors\n\t\t- this is because it tries to read the environment variable `VITE_BACKEND_URL` but doesn't find one\n\t\t- therefore we need to add it##noticetwoerrors\n\t- go to your app settings at Vercel and create the environment variable:\n\t\t- `VITE_BACKEND_URL`\n\t\t- https://et488-info-app-backend.onrender.com##envvercelvars\n\t- you will notice that it still has the two errors\n\t\t- this is because **after changing environment variables, you always have to redeploy**##noticetwoerrors\n\t- to redeploy\n\t\t- go back to your app at Vercel\n\t\t- click on **Deployments**\n\t\t- the **three dots**\n\t\t- and **Redploy**##dotheredploye\n\t- it will have to build again for about 15 seconds##willahvtobuild\n\t- check your site again\n\t\t- note that while the environment variable was read, you may see no data coming from the backend##notthawaiwait\n\t\t\t- this is because free-account Render backends can take **up to 90 seconds** to spin up if they haven't been accessed in the **past 15 minutes**##theuptospin\n\t- but when the backend is spun up, the data will appear:##nowthdataappear\n- **>>> CHALLENGE: Create spinner and detailed message to inform user that Render backend is loading**\n\t- while you can have numerous backends running at Render, they will spin down after 15 minutes of no activity and can take up to 90 seconds to spin up again when they are accessed\n\t\t- not seeing data for up to 90 seconds, is of course, not a positive user experience\n\t- create a spinner and message that at least tells the user that the backend is being loaded\n\t- note that when the backend is available, since it is on another server in the Internet, it still takes a fraction of a second to load\n\t\t- therefore you do not want to have in this case the above loading message flicker on the screen for a fraction of a second\n\t\t- find a solution to this\n\t\t\t- e.g. I often fade in my frontend `<body>` for one second which gives a cool-looking fade effect\n\t\t\t\t- and during the fade, you don't see the loading message\n- **>>> CHALLENGE: Create a second similar online frontend that reads the same data**\n\t- then change the data in the backend, and see that both frontends reflect this data change\n\t- this is a common feature of fullstack development: one has a \"headless backend\" which is used by various frontends and clients, e.g. mobile apps programmed with React Native or Flutter\n- **>>> CHALLENGE: Create a completely different frontend with HTML/Vue.js hosted at Netlify that reads the same data**\n\t- see: HOWTO: [Add Vue.js 3 to a HTML template site that fetches data from API and enables user interactivity](https://tanguay-eu.vercel.app/howtos/790)\n\t- here is a nice responsive template to use: https://html5up.net/dimension\n- **>>> CHALLENGE: Connect an online database to your backend and display data from the database**\n\t- now that have the skills to build and deploy a backend and frontend on separate servers which communicate with each other\n\t- you can experiment with connecting online databases to the backend and serving data from the database instead of from a JavaScript object\n\t- here are some free, online databases to try out:\n\t\t- MongoDB Atlas: https://www.mongodb.com\n\t\t- Postgres at Render: https://docs.render.com/databases\n\t\t- MySQL at PlanetScale: https://planetscale.com/pricing\n\t\t- Postgres at Vercel: https://vercel.com/docs/storage/vercel-postgres\n\t\t- CockroachDB (SQL): https://www.cockroachlabs.com/pricing\n\t\t- Redis at Render: https://docs.render.com/redis\n\t\t- Redis at Vercel: https://vercel.com/docs/storage/vercel-kv\n\t- **SECURITY NOTE**: \n\t\t- be sure to use only **GET** routes to display data from your database\n\t\t- if you create any **POST**, **PUT**, **PATCH** or **DELETE** routes without the proper authorization process in place (e.g. login with JWT tokens)\n\t\t\t- realize that any person or bot on the Internet can manipulate your database through these routes (!!!)\n\t\t- bots scan the Internet 24/7 attempting to find API routes which allow them to save data\n\t\t\t- if they find a route, send a post request to it and get an HTTP 201 back, they know that they can add data to this route\n\t\t\t- you will wake up the next morning and find your database full of spam garbage from the bot, etc. (!!!)","points":20,"extras":"","systemWhenCreated":"2023-12-31 12:40:33","systemWhoCreated":"systemUnknown"},{"id":802,"category":"Fullstack App","title":"Build a TypeScript CLI for a React site that creates pages","body":"- **background**\n\t- three common applications that are built with Node are an API, a web server and a CLI\n\t\t- an **API** (Application Programming Interface) delivers data and carries out commands via an HTTP port\n\t\t- a **web server** delivers HTML that is displayed in a browser\n\t\t- a **CLI** (Command-Line Interface) carries out commands typed into the command line, normally by a developer \n- **what will we build**\n\t- 1. the main purpose of this howto is to show you how to **create a CLI to automate specific tasks** while developing a Vite-React site\n\t\t- such as automatically **creating pages and components**\n\t\t- e.g. similar to how the Angular CLI enables Angular developers to create pages and components\n\t\t- other developers have created similar CLIs for React such as\n\t\t\t- https://www.npmjs.com/package/generate-react-cli\n\t\t- however, the advantage of creating our own CLI is that we can **customize it exactly to our needs** or to the needs of any particular project\n\t\t\t- for instance, you might have a project where you need to often perform a particular task such as converting data in an SQL database into JSON files\n\t\t\t- you could use the code base of your CLI to easily create a new command which asked you which table to convert and what the name of the JSON should be, then it would automatically create the JSON file\n\t- 2. so in this howto you will also learn how to use Node to **create a CLI that can be extended and customized** from project to project in order to automate repetitive tasks and increase your speed as a developer\n\t- 3. this howto will also show you how to **set up Node to run in the modern programming environment of TypeScript and ES6 modules**\n- code is here\n\t- https://github.com/edwardtanguay/et719-react-site-with-cli\n- CLI allows you to add pages like this:#gif#demoaddpages\n- **>>> 1. Create React site with simple menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et719-react-site-with-cli` (use your own initials and number)\n\t\t- enter a name and Create repository\n\t- clone locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et719-react-site-with-cli.git`\n\t- open in VSCode, e.g. \n\t\t- `code et719-react-site-with-cli`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n- **>>> 2. Create a simple TypeScript CLI with ES6 modules that can be executed via npm**\n\t- first create a simple test CLI in JavaScript, so that we can see the difference between how JavaScript and TypeScript is executed in the backend\n\t\t- we will create the CLI in a **backend/cli** directory \n\t\t\t- since often in a Vite-React site you also want to create other backend services and tools such as a **backend/api**\n\t\t\t- each CLI command will be its own file in the **backend/cli** directory\n\t\t- **backend/cli/cp.js**\n\t\t\t---------------------------------------------\n\t\t\tconsole.log('this is the create page command');\n\t\t\t---------------------------------------------\n\t\t- **package.json** in \"scripts\"\n\t\t\t-------------------------------------------\n\t\t\t\"cp\": \"node backend/cli/cp.js\"\n\t\t\t-------------------------------------------\n\t\t- in the terminal, type `npm run cp`\n\t\t\t- we see that it runs the correct file##wecanrun\n\t- now convert it to TypeScript\n\t\t- rename the file from cp.js to **cp.ts**\n\t\t\t---------------------------------------------\n\t\t\tconsole.log('this is the TypeScript create page command');\n\t\t\t---------------------------------------------\n\t\t- **package.json** change the name to **.ts**\n\t\t\t-------------------------------------------\n\t\t\t\"cp\": \"node backend/cli/cp.ts\"\n\t\t\t-------------------------------------------\n\t\t- in the terminal, type `npm run cp`\n\t\t\t- it will say that \".ts\" is unknown##thetssunknwn\n\t\t- the problem is that **Node cannot run TypeScript files**\n\t\t- we need a tool like **ts-node** or even better the newer **tsx** which is faster and requires less configuration\n\t\t\t- `npm i -D tsx`\n\t\t- **package.json** change node to tsx\n\t\t\t-------------------------------------------\n\t\t\t\"cp\": \"tsx backend/cli/cp.ts\"\n\t\t\t-------------------------------------------\n\t\t- in the terminal, type `npm run cp`\n\t\t\t- it works:##theworkcptrsx\n\t- now read the page name in as a argument \n\t\t- we want to be able to type **npm run cp Test** and it say **creating PageTest.tsx...**\n\t\t- **backend/cli/cp.ts**\n\t\t\t---------------------------------------------\n\t\t\tconst pageIdCode = process.argv[2];\n\n\t\t\tconst pageFileName = `Page${pageIdCode}.tsx`;\n\n\t\t\tconsole.log(`Creating ${pageFileName}...`);\n\t\t\t---------------------------------------------\n\t\t- in the terminal, type `npm run cp Test`\n\t\t\t- it works:##tswoksow\n\t- let's complete our simple TypeScript CLI command by making sure ES6 modules work\n\t\t- we will create a simplified way to get the arguments\n\t\t\t- since process.argv returns an array with the arguments starting at index 2\n\t\t\t- we will create a function that returns one argument based on an index, default being index 0\n\t\t- **backend/cli/tools.ts**\n\t\t\t-------------------------------------------\n\t\t\texport const getArgument = (index = 0) => {\n\t\t\t\treturn process.argv[index + 2];\n\t\t\t}\n\t\t\t-------------------------------------------\n\t\t- **cp.ts**\n\t\t\t------------------------------------------\n\t\t\timport * as tools from \"./tools\";\n\n\t\t\tconst pageIdCode = tools.getArgument();\n\t\t\t------------------------------------------\n\t\t- it works##itworkskdfj2\n\t- we now have the ability to program our CLI in TypeScript and ES6 modules and run commands with the **npm run** prefix\n- **>>> 3. Extend the \"npm run cp\" command to actually create a new page**\n\t- make the command create a file with content \"test\"\n\t\t- **tools.ts**\n\t\t\t----------------------------------------\n\t\t\timport fs from 'fs';\n\n\t\t\t/**\n\t\t\t * Creates a file with content\n\t\t\t * \n\t\t\t * qfil.createFile('src/data/infos.json', '[]');\n\t\t\t * \n\t\t\t * (file is created)\n\t\t\t */\n\t\t\texport const createFile = (pathAndFileName: string, content: string) => {\n\t\t\t\tfs.writeFileSync(pathAndFileName, content.trim());\n\t\t\t};\t\t\t\n\t\t\t----------------------------------------\n\t\t- **cp.ts**\n\t\t\t------------------------------------------\n\t\t\ttools.createFile(`src/pages/${pageFileName}`, 'test');\n\t\t\t------------------------------------------\n\t\t- execute `npm run cp Test`\n\t\t\t- it works:##yetshttest\n\t- now let's create real content for the page\n\t\t- **cp.ts**\n\t\t\t----------------------------------------\n\t\t\ttools.createFile(`src/pages/${pageFileName}`,\n\t\t\t\t`\n\t\t\texport const Page${pageIdCode} = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>This is the ${pageIdCode} page.</p>\n\t\t\t\t)\n\t\t\t}\n\t\t\t\t`\n\t\t\t);\n\t\t\t----------------------------------------\n\t\t- execute `npm run cp Test`\n\t\t\t- it works:##yetshttest222\n\t- of course in order for this automatically created page to work, we need to make two manual changes:\n\t\t- **Nav.tsx**\n\t\t\t----------------------------------\n\t\t\t<li><NavLink to=\"/test\">Test</NavLink></li>\t\t\t\n\t\t\t----------------------------------\n\t\t- **main.tsx**\n\t\t\t-----------------------------------\n\t\t\t{\n\t\t\t\tpath: \"test\",\n\t\t\t\telement: <PageTest />,\n\t\t\t},\n\t\t\t-----------------------------------\n\t- now the page works in the application#gif#andthetestksks\n\t- in the next step, we'll also make these two manual additions automatic\n- **>>> 4. Refactor OOP in order to catch errors and be able to add features without added complexity**\n\t- currently our code works but \n\t\t- (1) it quite error prone\n\t\t\t- e.g. if you don't capitalize the first character and execute \"npm run test\" it will create a page called Pagetest.tsx\n\t\t\t- e.g. if you only type `npm run cp`, it will create a page called Pageundefined.tsx##theundddef\n\t\t- (2) it is unstructured such that the more features we add, the more error prone and unmanageable it will become\n\t\t\t- e.g. adding the code to look through Nav.tsx and main.ts for certain text and insert text would be too complex without some sensible structure\n\t- in order to provide this needed structure in order to make our code more robust and able to add features without introducing complexity, we will refactor it with an **OOP** object-oriented programming paradigm using **TypeScript classes**\n\t\t- I call these TypeScript classes instead of JavaScript classes since TypeScript offers more features than JavaScrip classes, e.g. public, private, protected access modifiers, full properties, type validation, code-completion and intellisense you don't get with JavaScript classes\n\t- (A) create **PageManager** class and sanitize the idCode so the first character is always capitalized\n\t\t- I called the class **PageManager** instead of e.g. PageCreator since **createPage()** will be a method on the class, but we can easily create other methods on the same class called **deletePage()** and **renamePage()**\n\t\t- **PageManager.ts**\n\t\t\t--------------------------------------------\n\t\t\timport * as tools from './tools';\n\n\t\t\texport class PageManager {\n\t\t\t\tprivate idCode = '';\n\n\t\t\t\tconstructor(idCode:string) {\n\t\t\t\t\tthis.idCode = tools.capitalizeFirstCharacter(idCode);\n\t\t\t\t}\n\n\t\t\t\tpublic getIdCode() {\n\t\t\t\t\treturn this.idCode;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **tools.ts**\n\t\t\t------------------------------------------------\n\t\t\texport const capitalizeFirstCharacter = (text: string) => {\n\t\t\t\treturn text[0].toUpperCase() + text.slice(1);\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------------\n\t\t- **cp.ts**\n\t\t\t-----------------------------------------\n\t\t\tconst pageManager = new PageManager(pageIdCode);\n\t\t\tconsole.log(pageManager.getIdCode());\t\t\t\n\t\t\t-----------------------------------------\n\t\t- it now capitalizes the idCode sent##idcodealsewyastcap\n\t- (B) handle the case that idCode could be **undefined**\n\t\t- the way we are going to handle this is:\n\t\t\t- if the constructor of the class receives anything invalid, it will **throw an error with a message**\n\t\t\t- where the class is called, it will be called in a **try block** which has a **catch block** to catch the error and output a helpful message to the user\n\t\t- **PageManager.ts**\n\t\t\t--------------------------------------\n\t\t\tconstructor(idCode:string) {\n\t\t\t\tif (!idCode) {\n\t\t\t\t\tthrow Error(\"invalid idCode\");\n\t\t\t\t}\n\n\t\t\t\tthis.idCode = tools.capitalizeFirstCharacter(idCode);\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------\n\t\t- **cp.ts**\n\t\t\t-------------------------------------------\n\t\t\ttry {\n\t\t\t\tconst pageManager = new PageManager(pageIdCode);\n\t\t\t\tconsole.log(pageManager.getIdCode());\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tconsole.log(`\n\t\t\tPlease specify a page name in pascal notation.\n\t\t\te.g. \"npm run cp QuarterlyReports\"\n\t\t\t`.trim());\n\t\t\t}\t\t\n\t\t\t-------------------------------------------\n\t\t- it works like this##fixesundiund\n\t- (C) refactor code to **createPage()** method which works as before\n\t\t- **cp.ts**\n\t\t\t--------------------------------------------\n\t\t\ttry {\n\t\t\t\tconst pageManager = new PageManager(pageIdCode);\n\t\t\t\tpageManager.createPage();\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **PageManager.ts**\n\t\t\t--------------------------------------------\n\t\t\timport * as tools from './tools';\n\n\t\t\texport class PageManager {\n\t\t\t\tprivate idCode = '';\n\t\t\t\tprivate fileName = '';\n\n\t\t\t\tconstructor(idCode: string) {\n\t\t\t\t\tif (!idCode) {\n\t\t\t\t\t\tthrow Error(\"invalid idCode\");\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.idCode = tools.capitalizeFirstCharacter(idCode);\n\t\t\t\t\tthis.fileName = `Page${idCode}.tsx`;\n\t\t\t\t}\n\n\t\t\t\tpublic createPage() {\n\t\t\t\t\ttools.createFile(`src/pages/${this.fileName}`, `\n\t\t\texport const Page${this.idCode} = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>This is the ${this.idCode} page.</p>\n\t\t\t\t)\n\t\t\t}\n\t\t\t`);\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------\n- **>>> 5. Extend createPage() to be able to automatically make necessary changes in Nav.tsx and main.tsx file so that the new page works**\n\t- for each page created, we need to add blocks of code to two files\n\t\t- Nav.tsx\n\t\t- main.ts\n\t- in order to generalize this and keep the code manageable, we are going to create a class called **DynamicFile.ts**\n\t\t- you will be able to send the name of a file when you instantiate this class, e.g. **Nav.tsx** or **main.tsx**\n\t\t- the class will then have a method called **addStringBlockBeforeMarker()** which will enable us to add text blocks as we need to these files\n\t- (A) create **DynamicFile.ts**, send it a file, and execute a debug() function on it to get information on the file\n\t\t- **tools.ts**\n\t\t\t-----------------------------------\n\t\t\texport const readContentFromFile = (pathAndFileName: string) => {\n\t\t\t\treturn fs.readFileSync(pathAndFileName, { encoding: 'utf8', flag: 'r' });\n\t\t\t};\n\n\t\t\texport const convertStringBlockToLines = (stringBlock: string) => {\n\t\t\t\tconst lines = stringBlock.split('\\n');\n\t\t\t\treturn lines;\n\t\t\t}\t\t\t\n\t\t\t-----------------------------------\n\t\t- **DynamicFile.ts**\n\t\t\t----------------------------------------\n\t\t\timport * as tools from './tools';\n\n\t\t\texport class DynamicFile {\n\t\t\t\tprivate pathAndFileName = '';\n\t\t\t\tprivate content = '';\n\t\t\t\tprivate lines: string[] = [];\n\n\t\t\t\tconstructor(pathAndFileName: string) {\n\t\t\t\t\tthis.pathAndFileName = pathAndFileName;\n\t\t\t\t\tthis.content = tools.readContentFromFile(this.pathAndFileName);\n\t\t\t\t\tthis.createLines();\n\t\t\t\t}\n\n\t\t\t\tprivate createLines() {\n\t\t\t\t\tthis.lines = tools.convertStringBlockToLines(this.content);\n\t\t\t\t}\n\n\t\t\t\tpublic debug() {\n\t\t\t\t\treturn `\n\t\t\tFILENAME: ${this.pathAndFileName}\n\t\t\tNumber of lines: ${this.lines.length}\n\t\t\t======================================\n\t\t\t${this.content}\n\t\t\t======================================`.trim();\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **debug.ts**\n\t\t\t----------------------------------------\n\t\t\timport { DynamicFile } from \"./DynamicFile\";\n\n\t\t\tconst dynamicFile = new DynamicFile('src/components/Nav.tsx');\n\t\t\tconsole.log(dynamicFile.debug());\t\t\t\n\t\t\t----------------------------------------\n\t\t- **package.json**\n\t\t\t------------------------------------------\n\t\t\t\"debug\": \"tsx backend/cli/debug.ts\"\n\t\t\t------------------------------------------\n\t\t- executing **npm run debug** shows this:##thedeugtest\n\t- (B) on DynamicFile, create method **addStringBlockBeforeMarker()** and show in debug how a stringBlock is added\n\t\t- **DynamicFile.ts**\n\t\t\t----------------------------------------------------------\n\t\t\tpublic addStringBlockBeforeMarker(marker: string, stringBlock: string) {\n\t\t\t\tconst stringBlockLines = tools.convertStringBlockToLines(stringBlock);\n\t\t\t\tconst newLines: string[] = [];\n\t\t\t\tfor (const line of this.lines) {\n\t\t\t\t\tif (line.includes(marker)) {\n\t\t\t\t\t\tfor (const stringBlockLine of stringBlockLines) {\n\t\t\t\t\t\t\tnewLines.push(stringBlockLine);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnewLines.push(line);\n\t\t\t\t}\n\t\t\t\tthis.lines = newLines;\n\t\t\t}\n\n\t\t\tprivate getContentFromLines() {\n\t\t\t\treturn this.lines.join('\\n');\n\t\t\t}\n\n\t\t\tpublic debug() {\n\t\t\t\treturn `\n\t\tFILENAME: ${this.pathAndFileName}\n\t\tNumber of lines: ${this.lines.length}\n\t\t======================================\n\t\t${this.getContentFromLines()}\n\t\t======================================`.trim();\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------------------------\n\t\t- **debug.ts**\n\t\t\t------------------------------------------\n\t\t\timport { DynamicFile } from \"./DynamicFile\";\n\n\t\t\tconst dynamicFile = new DynamicFile('src/components/Nav.tsx');\n\t\t\tconst marker = '</ul>';\n\t\t\tconst stringBlockToAdd = `\\t\\t\\t<li><NavLink to=\"/test002\">Test002</NavLink></li>`;\n\t\t\tdynamicFile.addStringBlockBeforeMarker(marker, stringBlockToAdd);\n\t\t\tconsole.log(dynamicFile.debug());\t\t\t\n\t\t\t------------------------------------------\n\t\t- when you execute **debug.ts**, it shows that it adds the text correctly in the file##thetextcorrrfile\n\t- (C) enable **CreatePage()** to automatically update Nav file\n\t\t- **tools.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const writeFile = (pathAndFileName: string, content: string) => {\n\t\t\t\tfs.writeFileSync(pathAndFileName, content.trim());\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- **PageManager.ts**\n\t\t\t----------------------------------------------------\n\t\t\timport { DynamicFile } from './DynamicFile';\n\t\t\timport * as tools from './tools';\n\n\t\t\texport class PageManager {\n\t\t\t\tprivate pascalNotationIdCode = '';\n\t\t\t\tprivate fileName = '';\n\t\t\t\tprivate camelCaseNotationIdCode = '';\n\n\t\t\t\tconstructor(idCode: string) {\n\t\t\t\t\tif (!idCode) {\n\t\t\t\t\t\tthrow Error(\"invalid idCode\");\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.pascalNotationIdCode = tools.capitalizeFirstCharacter(idCode);\n\t\t\t\t\tthis.camelCaseNotationIdCode = this.pascalNotationIdCode.toLowerCase();\n\t\t\t\t\tthis.fileName = `Page${idCode}.tsx`;\n\t\t\t\t}\n\n\t\t\t\tpublic createPage() {\n\t\t\t\t\tthis.createPageFile();\n\t\t\t\t\tthis.updateNavFile();\n\t\t\t\t}\n\n\t\t\t\tprivate createPageFile() {\n\t\t\t\t\ttools.createFile(`src/pages/${this.fileName}`, `\n\t\t\texport const Page${this.pascalNotationIdCode} = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>This is the ${this.pascalNotationIdCode} page.</p>\n\t\t\t\t)\n\t\t\t}\n\t\t\t`);\n\t\t\t\t}\n\n\t\t\t\tprivate updateNavFile() {\n\t\t\t\t\tconst dynamicFile = new DynamicFile('src/components/Nav.tsx');\n\t\t\t\t\tconst marker = '</ul>';\n\t\t\t\t\tconst stringBlockToAdd = `\\t\\t\\t<li><NavLink to=\"/${this.camelCaseNotationIdCode}\">${this.pascalNotationIdCode}</NavLink></li>`;\n\t\t\t\t\tdynamicFile.addStringBlockBeforeMarker(marker, stringBlockToAdd);\n\t\t\t\t\tdynamicFile.save();\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------------------------\n\t\t- **DynamicFile.ts**\n\t\t\t----------------------------------------------\n\t\t\tpublic save() {\n\t\t\t\ttools.writeFile(this.pathAndFileName, this.getContentFromLines());\n\t\t\t}\t\t\t\n\t\t\t----------------------------------------------\n\t\t- it works:##dothetest003\n\t- (D) enable **CreatePage()** to automatically update Main file\n\t\t- **main.tsx** - add markers\n\t\t\t--------------------------------------------------\n\t\t\timport { Page404 } from \"./pages/Page404.tsx\";\n\t\t\t// MARKER;IMPORT_NEW_PAGE\t\t\t\n\n\t\t\t{ // MARKER;NEW_PAGE\n\t\t\t\tpath: \"/\",\n\t\t\t\telement: <Navigate to=\"/welcome\" replace />,\n\t\t\t},\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- **PageManager.ts**\n\t\t\t-----------------------------------------------------\t\t\t\n\t\t\tpublic createPage() {\n\t\t\t\tthis.createPageFile();\n\t\t\t\tthis.updateNavFile();\n\t\t\t\tthis.updateMainFile();\n\t\t\t}\n\n\t\t\tprivate updateMainFile() {\n\t\t\t\tconst dynamicFile = new DynamicFile('src/main.tsx');\n\t\t\t\tdynamicFile.addStringBlockBeforeMarker('MARKER;IMPORT_NEW_PAGE', `import { Page${this.pascalNotationIdCode} } from \"./pages/Page${this.pascalNotationIdCode}.tsx\";`);\n\t\t\t\tdynamicFile.addStringBlockBeforeMarker('MARKER;NEW_PAGE', `\t\t\t{\n\t\t\t\t\t\tpath: \"${this.camelCaseNotationIdCode}\",\n\t\t\t\t\t\telement: <Page${this.pascalNotationIdCode} />,\n\t\t\t\t\t},`);\n\t\t\t\tdynamicFile.save();\n\t\t\t}\t\t\n\t\t\t-----------------------------------------------------\n\t\t- it works:#gif#demoaddpages\n- **CHALLENGE: Complete the documentation for each function in tools**\n- **CHALLENGE: Make pascal and camelcase work for idCodes longer than one word**\n- **CHALLENGE: Catch all possible errors such as e.g. not sending an argument, not sending an argument in pascal case, etc.**\n- **CHALLENGE: Write tests for this CLI, e.g. with Vitest in order to make sure it catches all invalid input**\n- **CHALLENGE: Use [Inquirer](https://tanguay-eu.vercel.app/howtos/692) to give the user a choice of different pages to create: (1) normal, (2) API (ask for URL) and display, and (3) show a form (ask for fields to display)** \n- **CHALLENGE: Refactor this CLI so that it works for a Next.js site**","points":20,"extras":"","systemWhenCreated":"2024-01-01 20:49:47","systemWhoCreated":"systemUnknown"},{"id":803,"category":"Backend","title":"Create a Vite React site with Node/Express API in same directory as a local developer tool that displays data from external APIs and file system","body":"- **background**\n\t- there are many kinds of websites one can build with fullstack websites with JavaScript frameworks\n\t- some sites are for frontend only\n\t- some frontends have their own API backends in the same folder\n\t- some frontends access APIs on other servers, and these APIs can be accessed by other frontends\n\t- each variation of website has its specifig use cases, advantages, disadvantages in various contexts\n\t- study this overview: [Overview of Web Applications](https://docs.google.com/spreadsheets/d/1gSb-VlUh8ATaq8ILyXz739sVzaZle0lI8SR0x8m2cLg)\n- **what we will build**\n\t- we are going to build a **Vite React site with a Node/Express API in the same directory that accesses the file system**\n\t\t- see more details about this kind of website in the above overview [at this link](https://docs.google.com/spreadsheets/d/1gSb-VlUh8ATaq8ILyXz739sVzaZle0lI8SR0x8m2cLg/edit?pli=1#gid=0&range=10:10)\n\t- the purpose of this howto is show you\n\t\t- (1) the basics of building an **API with Node/Express**\n\t\t- (2) how to set up an Node/Express with **TypeScript and ES6 modules**\n\t\t- (3) how to set up a Node/Express API inside a Vite React site and start both with the **npm run dev** command\n\t- as the above overview describes this website is meant to be a **local developer tool**\n\t\t- it accesses the file system and so cannot be hosted at Render or Cyclic, since these services offer a hosting environment with no file system\n\t\t- it collects data from the file system and APIs\n- **code is here**\n\t- https://github.com/edwardtanguay/et662-react-site-with-api\n\t- Live-Coding 2024-01-03: https://github.com/edwardtanguay/et663-react-site-with-api\n- **final site will show data fetched from the backend API like this**##thefinakssiteexp\n- **>>> 1. Create React site with simple menu**\n\t- we will start with a ready-made React site that has a menu using React Router's createBrowserRouter\n\t- go here: https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- Use this template, Create a new repository##createteampls\n\t\t- choose your GitHub Organization to host your site, and type name e.g. `et662-react-site-with-api` (use your own initials and number)\n\t\t- enter a name and Create repository\n\t- clone locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et662-react-site-with-api.git`\n\t- open in VSCode, e.g. \n\t\t- `code et662-react-site-with-api`\n\t- in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site should look like this:##sitelikethis\n- **>>> 2. Set up API that runs with JavaScript**\n\t- to start simple, let's set up a JavaScript API that has one GET route\n\t- we are going to set this API up as a dedicated API inside our website's directory\n\t- we will put the api in **backend/api** in case we also want to add more backend tools later such as **backend/cli**\n\t- install Express\n\t\t- yesterday we [set up a CLI](https://tanguay-eu.vercel.app/howtos/802) which only required Node\n\t\t- but today we are setting up an API, so we will use **Express**, a tool that makes it easier to build **APIs** and **web servers** with Node\n\t\t- notes that **N**ode and **E**xpress are often used together, and are two letters in the M**E**R**N** stack\n\t\t- `npm i express`\n\t- **backend/api/index.js**\n\t\t--------------------------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst port = 5112;\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.json({\n\t\t\t\tappName: 'et662-react-site-with-api'\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t});\n\t\t--------------------------------------------\n\t- **package.json** - create start script for our API\n\t\t--------------------------------------\n\t\t\"api\": \"node backend/api/index.js\"\n\t\t--------------------------------------\n\t- in your terminal, run `npm run api`\n\t- click on the link, and you will see that your browser reads the information coming from the / route in your API##apisisrunning\n\t- check that your API also works in Postman##capostpman\n\t- we say that e.g. \n\t\t- \"the API serves an object from its root route\" \n\t\t- \"the browser and Postman fetch an object from the root route of the API\"\n\t- the root route is simply the main route, in our case http://localhost:5112\n\t- an API usually has many other routes, e.g. \n\t\t- http://localhost:5112/employees\n\t\t- http://localhost:5112/employees/2343\n\t\t- http://localhost:5112/jobs\n\t\t- http://localhost:5112/jobs/232\n\t- note also that this is a **GET** route, which means that it merely **serves** information\n\t\t- we know it is a GET route since we used the Express method \"get\" in `app.get(...`\n\t\t- APIs usually use the other four REST verbs as well, e.g.\n\t\t\t- `app.post(...`\n\t\t\t- `app.patch(...`\n\t\t\t- `app.put(...`\n\t\t\t- `app.delete(...`\n- **>>> 3. Convert API to TypeScript**\n\t- let's now set up the same modern development environment in our backend that with have in our frontend with Vite React:\n\t\t- TypeScript\n\t\t- ES6 modules\n\t- install tsx\n\t\t- `npm i tsx`\n\t\t- this will enable us to execute TypeScript files directly\n\t\t- it is the newer, faster version of ts-node\n\t- rename **backend/api/index.js** to **backend/api/index.ts**\n\t- **package.json** - udpate the API start script\n\t\t-----------------------------------------\n\t\t\"api\": \"tsx backend/api/index.ts\"\n\t\t-----------------------------------------\n\t- run `npm run api`\n\t- everything will run as before, except that you will see in the **index.ts** file, three little dots under **express** and **req** and **res**\n\t\t- pay attention to these when you use TypeScript\n\t\t- they are telling you that they need the types of a certain tool, in this case, of Express\n\t\t- hover over the word express and it will tell you what you need to do##seeexprswant\n\t- install the Express types\n\t\t- `npm i -D @types/express`\n\t- the dots disappear\n\t- and now you have intellisense, documentation and examples for your Express objects and methods, which can be a useful learning tool##greatlearexps\n- **>>> 4. Make sure custom ES6 modules work**\n\t- because we are using tsx, ES6 modules should work automatically\n\t- we already see that the **import express** statement works\n\t- now let's create a custom ES6 module to test this out as well\n\t- let's do this with a realistic example\n\t\t- we will make a config file that has a function which exports the app name\n\t\t- we will import this function and use it in index.ts\n\t- I will put this config file in **backend** since we may very well use it later from other backend tools that we may have later such as **backend/cli** \n\t- **backend/config.ts**\n\t\t------------------------------------------\n\t\texport const getAppName = () => {\n\t\t\treturn 'et662-react-site-with-api';\n\t\t}\n\t\t------------------------------------------\n\t- **index.ts**\n\t\t-----------------------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.json({\n\t\t\t\tappName: config.getAppName()\n\t\t\t});\n\t\t});\n\t\t-----------------------------------------\n\t- the API will work as before\n- **>>> 5. Enable hot-reloading of API when TypeScript files change**\n\t- PROBLEM: note that if you change the app name in config.ts, the API does not reflect this change\n\t\t- REASON: the reason is that the API is already running on a version of the files before you made this change\n\t\t- SOLUTION: install nodemon which will monitor your TypeScript files for changes, and when one changes, it will restart your API\n\t- `npm i -D nodemon`\n\t- **package.json**\n\t\t---------------------------------------\n\t\t\"api\": \"nodemon\",\n\n\t\t\"nodemonConfig\": {\n\t\t\t\"watch\": [\n\t\t\t\t\"backend\"\n\t\t\t],\n\t\t\t\"ext\": \"ts\",\n\t\t\t\"exec\": \"tsx backend/api/index.ts\"\n\t\t},\t\n\t\t---------------------------------------\n\t- now when you make changes to a TypeScript file, your API will restart#gif#restartonthenodemon\n- **>>> 6. Enable \"npm run dev\" to start both frontend and API**\n\t- PROBLEM: in our application, we have a frontend (Vite React) and a backend API (Node/Express) which both have to be started, frontend with **npm run dev**, backend with **npm run api**\n\t\t- SOLUTION: let's use the npm package **npm-run-all** to start both frontend and API with one command: **npm run dev**\n\t- install npm-run-all\n\t\t- `npm i -D npm-run-all`\n\t- configure npm scripts to run both frontend and backend when you type **npm run dev**\n\t\t- **package.json**\n\t\t\t-------------------------------------\n\t\t\t\"dev\": \"run-p api frontend\",\n\t\t\t\"frontend\": \"vite --port 4112 --open\",\n\t\t\t\"api\": \"nodemon\",\t\t\t\n\t\t\t-------------------------------------\n\t- now when you execute **npm run dev**, both your frontend and backend will start:##startingbothsd\n\t- that concludes the setup of a dedicated TypeScript backend API that runs inside the same folder as and can be used by a Vite React site\n- **>>> 7. In the React site, fetch and display data from the backend API**\n\t- now that we have a backend API that starts with our Vite React application and runs on its own port\n\t\t- we can fetch data from this API inside our React site\n\t\t- let's get and display the name of the application on the welcome page\n\t- install axios\n\t\t- `npm i axios`\n\t- **PageWelcome.tsx**\n\t\t---------------------------------------------\n\t\timport axios from \"axios\";\n\t\timport { useEffect, useState } from \"react\";\n\n\t\tconst backendUrl = 'http://localhost:5112'; \n\n\t\texport const PageWelcome = () => {\n\t\t\tconst [appName, setAppName] = useState('');\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(backendUrl);\n\t\t\t\t\tconst _appName = response.data.appName;\n\t\t\t\t\tsetAppName(_appName);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<p>APP NAME: {appName}</p>\n\n\t\t\t)\n\t\t}\t\t\n\t\t---------------------------------------------\n\t- PROBLEM: You get a CORS error.\n\t\t- REASON: Your website is requesting data from a different server (i.e. a different port). Your browser will only allow this if that server from which your website is requesting data, supports CORS.\n\t\t- SOLUTION: Set up CORS on the backend.\n\t- install CORS and its types\n\t\t- `npm i cors`\n\t- **index.ts**\n\t\t----------------------------------------------\n\t\timport * as config from '../config';\n\t\timport express from 'express';\n\t\timport cors from 'cors';\n\n\t\tconst app = express();\n\t\tapp.use(cors());\n\t\tconst port = 5112;\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.json({\n\t\t\t\tappName: config.getAppName()\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t});\n\t\t----------------------------------------------\n\t- note that you have the three dots under cors informing you to install the TypeScript types for the cors library, similar to what we had to do for Express\n\t\t- `npm i -D @types/cors`\n\t- your site will be able to fetch data from the backend without any CORS error:##thedataneeds\n- **>>> 8. Create various routes on the backend and fetch and display the data from them on the frontend**\n\t- let's serve various types of data from various routes on the API\n\t\t- and fetch and display them on the front end\n\t- serve and fetch a **string**\n\t\t- **index.ts**\n\t\t\t--------------------------------------\n\t\t\tapp.get('/node-version', (req, res) => {\n\t\t\t\tres.json(process.version);\n\t\t\t});\n\t\t\t--------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t--------------------------------------\n\t\t\tconst [nodeVersion, setNodeVersion] = useState(\"\");\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(`${backendUrl}/node-version`);\n\t\t\t\t\tsetNodeVersion(response.data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\t<p>NODE VERSION: {nodeVersion}</p>\n\t\t\t--------------------------------------\n\t- serve and fetch a **number**\n\t\t- we will get all files recursively in the directory of our web site directory and serve the number of files on the route\n\t\t- **backend/tools.ts**\n\t\t\t----------------------------------------\n\t\t\timport fs from 'fs';\n\t\t\timport path from 'path';\n\n\t\t\texport const getAllFilesInDirectory = (directoryPath: string, filesArray: string[] = []) => {\n\t\t\t\tconst files = fs.readdirSync(directoryPath);\n\n\t\t\t\tfiles.forEach(file => {\n\t\t\t\t\tconst filePath = path.join(directoryPath, file);\n\t\t\t\t\tif (fs.statSync(filePath).isDirectory()) {\n\t\t\t\t\t\tgetAllFilesInDirectory(filePath, filesArray);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfilesArray.push(filePath);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn filesArray;\n\t\t\t} \t\t\t\n\t\t\t----------------------------------------\n\t\t- **index.ts**\n\t\t\t----------------------------------------\n\t\t\timport * as tools from '../tools';\n\n\t\t\tapp.get('/number-of-files', (req, res) => {\n\t\t\t\tconst baseDirectory = process.cwd();\n\t\t\t\tconst files = tools.getAllFilesInDirectory(baseDirectory);\n\t\t\t\tres.json(files.length);\n\t\t\t});\n\t\t\t----------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t--------------------------------------------------\n\t\t\tconst [numberOfFiles, setNumberOfFiles] = useState(0);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(`${backendUrl}/number-of-files`);\n\t\t\t\t\tsetNumberOfFiles(response.data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\t<p>NUMBER OF FILES: {numberOfFiles}</p>\n\t\t\t--------------------------------------------------\n\t- serve and fetch an **array** \n\t\t- we will access another API from the backend to get and prepare data to serve again from our API in a new form\n\t\t- **index.ts**\n\t\t\t---------------------------------------------\n\t\t\timport axios from 'axios';\n\n\t\t\tinterface IEmpHireItem {\n\t\t\t\tfullName: string;\n\t\t\t\thireDate: string;\n\t\t\t}\t\n\n\t\t\tapp.get('/employee-hire-dates', (req, res) => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get('https://edwardtanguay.vercel.app/share/employees.json');\n\t\t\t\t\tconst empHireItems: IEmpHireItem[] = [];\n\t\t\t\t\tconst employees = response.data;\n\t\t\t\t\tfor (const employee of employees) {\n\t\t\t\t\t\tempHireItems.push({\n\t\t\t\t\t\t\tfullName: `${employee.firstName} ${employee.lastName}`,\n\t\t\t\t\t\t\thireDate: employee.hireDate.substring(0,10)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(empHireItems.length);\n\t\t\t\t\tres.json(empHireItems);\n\t\t\t\t})();\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t----------------------------------\n\t\t\tinterface IEmpHireItem {\n\t\t\t\tfullName: string;\n\t\t\t\thireDate: string;\n\t\t\t}\t\t\t\n\n\t\t\tconst [empHireItems, setEmpHireItems] = useState<IEmpHireItem[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(\n\t\t\t\t\t\t`${backendUrl}/employee-hire-dates`\n\t\t\t\t\t);\n\t\t\t\t\tsetEmpHireItems(response.data);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\t<p>\n\t\t\t\tEMPLOYEE HIRE DATES:\n\t\t\t\t<ul className=\"list-disc ml-6\">\n\t\t\t\t\t{empHireItems.map((empHireItem, index) => {\n\t\t\t\t\t\treturn <li key={index}>{empHireItem.fullName} - {empHireItem.hireDate}</li>;\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t\t----------------------------------\n\t- your site will now look like this:##thefinakssiteexp\n- **CHALLENGE: Make a route that services information on the machine the website is running on: Windows, Mac, Linux**\n\t- get this information from the **process** object\n- **CHALLENGE: Make a route that serves the job title and link from the jobs JSON file**\n\t- https://edwardtanguay.vercel.app/share/jobs.json\n- **CHALLENGE: Create /temperature route that serves the current temperature in the city you live in**\n\t- get this information from a weather API such as: https://openweathermap.org/api\n- **CHALLENGE: Make a feature to search any file in your web project**\n\t- BONUS: make a button to display the contents of the file found\n- **CHALLENGE: Create a Jamstack-style blog which reads markdown files in a directory, parses them, and displays them as blog entries**\n\t- use a markdown library such as this one: https://www.npmjs.com/package/marked\n- **CHALLENGE: Extend the API to perform CRUD functions with files, e.g. create, edit, and delete files in a directory with POST, PUT, PATCH and DELETE**\n\t- see [CLI Howto](https://tanguay-eu.vercel.app/howtos/802) for code to read and write to files","points":20,"extras":"","systemWhenCreated":"2024-01-03 00:41:26","systemWhoCreated":"systemUnknown"},{"id":804,"category":"CRUD API","title":"LearnApp Part 1: Create backend API with full CRUD functionality that uses lowdb as database","body":"- **background to this howto**\n\t- this howto is **Part 1** of the **LearnApp project**\n\t\t- LearnApp project: https://tanguay-eu.vercel.app/howtos/805\n\t- **what we will build in this howto**\n\t\t- since LearnApp has a Node/Express backend with Vite-React frontend together in one directory\n\t\t\t- we will build a minimal frontend as well so that \n\t\t\t\t- backend and frontend can share a **package.json** file \n\t\t\t\t- both are started with one command **npm run dev**\n\t\t- after setting up both frontend and backend in one directory, we will concentrate on the backend to \n\t\t\t- set up app/route/handler structure\n\t\t\t- set up full CRUD for the item **flashcards** item type\n\t\t\t\t- implement GET, POST, PUT, PATCH, DELETE routes which correctly manipulate a JSON file **flashcards.json**\n\t\t\t- we will test our routes with Postman\n\t\t- for the time being, the front end will remain minimal\n\t- **finishing code for this step is here**\n\t\t- https://github.com/edwardtanguay/et887-learnapp - 2024-01-07 preparation\n\t\t- https://github.com/edwardtanguay/et102-learnapp - 2024-01-08 live-coding: dbtools refactored, handlers differently implemented\n\t- **when finished with this step, you will have a backend with six CRUD routes that create, fetch, edit and delete flashcards:**##postmanfirststep\n- **>>> 1. set up base project that starts Vite-React TypeScript frontend and a TypeScript backend file that displays a test message**\n\t- decide on frontend and backend ports, e.g.\n\t\t- frontend: 4201\n\t\t- backend: 4202\n\t- goto https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t- **Use this template**\n\t- create respository##the887skjpepo\n\t\t- of course call your project something else, e.g. `ba942-learnapp` so that we don't have a URL conflict when we publish to Vercel\n\t- clone repository to a local project\n\t\t- e.g. `git@github.com:edwardtanguay/et887-learnapp.git`\n\t- open in VSCode\n\t\t- e.g. `code et887-learnapp`\n\t- set up frontend\n\t\t- `npm i`\n\t\t- set frontend port\n\t\t\t- **package.json**\n\t\t\t\t---------------------------------------------\n\t\t\t\t\"dev\": \"vite --port 4201 --open\",\n\t\t\t\t---------------------------------------------\n\t\t- `npm run dev`\n\t- make minimal customization changes to the frontend\n\t\t- **index.html**\n\t\t\t---------------------------------------\n\t\t\t<title>LearnApp</title>\n\t\t\t---------------------------------------\n\t\t- **Header.tsx**\n\t\t\t------------------------------\n\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800\">LearnApp</h1>\n\t\t\t------------------------------\n\t\t- frontend now looks like this##thelearnapp\n\t- create TypeScript backend file that displays a test message\n\t\t- we just want to get the backend/frontend to start together\n\t\t\t- so let's make a simple TypeScript file that starts and displays a message\n\t\t- **backend/api/index.ts**\n\t\t\t-----------------------------------------------\n\t\t\tconst showMessage = (text: string) => {\n\t\t\t\tconsole.log(text);\n\t\t\t}\n\n\t\t\tshowMessage('typescript backend works');\n\t\t\t-----------------------------------------------\n\t\t- note that `node backend/api/index.ts` does not work, since Node cannot execute TypeScript\n\t\t- therefore we will install **tsx**\n\t\t\t- `npm i -D tsx`\n\t\t- run backend with tsx\n\t\t\t- note that this will NOT work: `tsx backend/api/index.ts`\n\t\t\t- you have to use npx like this: `npx tsx backend/api/index.ts`##thetsxnpmworks\n\t\t- create npm script to execute backend\n\t\t\t- **package.json**\n\t\t\t\t-----------------------------------------------\n\t\t\t\t\"api\": \"tsx backend/api/index.ts\",\n\t\t\t\t-----------------------------------------------\n\t\t\t- note as an npm script, you can simple execute`tsx <filePathAndName>`##nowwiththenpmskjscripts\n\t- start both frontend and backend with `npm run dev`\n\t\t- to do this, we will use **concurrently**, a package that can start both the backend and frontend\n\t\t\t- note that concurrently a more active project than **npm-run-all**\n\t\t- install concurrently\n\t\t\t- `npm i -D concurrently`\n\t\t- **package.json** (\"conc\" is short for \"concurrently\")\n\t\t\t-------------------------------------------\n\t\t\t\"dev\": \"conc \\\"npm run api\\\" \\\"npm run frontend\\\"\",\n\t\t\t\"api\": \"tsx backend/api/index.ts\",\n\t\t\t\"frontend\": \"vite --port 4201 --open\",\t\t\t\n\t\t\t-------------------------------------------\n\t\t- this starts the backend and then the frontend##startbackandthenfront2\n\t- in order for the backend to have hot-loading, let's install nodemon\n\t\t- `npm i -D nodemon`\n\t\t- **package.json**\n\t\t\t--------------------------------------------\n\t\t\t\"api\": \"nodemon\",\n\n\t\t\t\"nodemonConfig\": {\n\t\t\t\t\"watch\": [\n\t\t\t\t\t\"backend\"\n\t\t\t\t],\n\t\t\t\t\"ext\": \"ts, json\",\n\t\t\t\t\"exec\": \"tsx backend/api/index.ts\"\n\t\t\t},\n\t\t\t--------------------------------------------\n- **>>> 2. set up backend API with a simple route `/` that returns information about the API**\n\t- our backend runs but it is not yet an API, so let's set it up as an API\n\t- install Express and its types\n\t\t- `npm i -D express` (we install it as a devDependency since in our case, it won't be used in production)\n\t\t- `npm i -D @types/express`\n\t- **index.ts**\n\t\t------------------------------------------------------\n\t\timport express from 'express';\n\t\timport * as config from './config';\n\n\t\tconst app = express();\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.json({\n\t\t\t\tappName: \"API for AppLearn version 0.1\"\n\t\t\t})\n\t\t});\n\n\t\tapp.listen(config.getPort(), () => {\n\t\t\treturn `AppLearn API is running at http://localhost:${config.getPort()}`;\n\t\t});\n\t\t------------------------------------------------------\n\t- visit the API url in the browser, and you should see the object with appName:##notworksinbro\n- **>>> 3. Create server.ts and import it from index.ts**\n\t- in order to separate concerns, let's make\n\t\t- **index.ts** the starter file responsible for setup and listening for incoming requests\n\t\t- **server.ts** the server file responsible for serving responses from the routes\n\t- **index.ts**\n\t\t-----------------------------------------------------\n\t\timport * as config from './config';\n\t\timport { app } from './server';\n\n\t\tapp.listen(config.getPort(), () => {\n\t\t\tconsole.log(`AppLearn API is running at http://localhost:${config.getPort()}`);\n\t\t});\t\t\n\t\t-----------------------------------------------------\n\t- **config.ts**\n\t\t----------------------------------------------------\n\t\texport const getPort = () => {\n\t\t\treturn 4206;\n\t\t}\n\t\t----------------------------------------------------\n\t- **server.ts**\n\t\t-----------------------------------------------------\n\t\timport express from 'express';\n\n\t\texport const app = express();\n\n\t\tapp.get('/', (_req, res) => {\n\t\t\tres.json({\n\t\t\t\tappName: \"API for AppLearn version 0.2\"\n\t\t\t})\n\t\t});\n\t\t-----------------------------------------------------\n- **>>> 4. Set up JSON database with one collection called \"flashcards\"**\n\t- in order to get a better idea of what data we will be serving as we build our routers and handlers\n\t\t- let's first set up the database with one collection called **flashcards**\n\t- notice this database file structured just like **json-server**:\n\t\t- the JSON file is an object\n\t\t- the object contains properties which are collections of objects\n\t\t- this is no surprise as [json-server uses lowdb](https://www.npmjs.com/package/json-server?activeTab=dependencies) as a dependency\n\t- one difference, however, between json-server saves its data and how we will save our data is\n\t\t- json-server manages id fields for your, and uses an automatically incremented integer starting with 1\n\t\t- lowdb does not manage ids for you, so you have to do this yourself\n\t\t- to do this, we basically have three choices:\n\t\t\t- **auto-incremented integer id**\n\t\t\t\t- e.g. **1, 2, 3, ...**\n\t\t\t\t- ADVANTAGE: short and easy to read\n\t\t\t\t- DISADVANTAGE: if you combine data from different sources, you may have id conflicts\n\t\t\t- **uuid**\n\t\t\t\t- universally unique identifier\n\t\t\t\t\t**\"A Version 1 UUID is a universally unique identifier that is generated using a timestamp and the MAC address of the computer on which it was generated.\"**\n\t\t\t\t- e.g. **0e56492f-e0fe-475e-a6e7-fa7db34fad7d**\n\t\t\t\t- ADVANTAGE: guaranteed to be globally unique\n\t\t\t\t- DISADVANTAGE: unnecessarily long, difficult to read\n\t\t\t- **suuid**\n\t\t\t\t- short universally unique identifier\n\t\t\t\t- 6 characters each with (26 * 2) + 10 = 42 possibilities\n\t\t\t\t- e.g. **3g4Hq1**\n\t\t\t\t- ADVANTAGE: guaranteed to be unique for all but the largest applications (over 13 trillion combinations)\n\t\t\t\t- DISADVANTAGE: readable, not unnecessarily long\n\t\t- we will use **suuid**\n\t- **backend/data/db.json**\n\t\t---------------------------------------------\n\t\t{\n\t\t\t\"flashcards\": [\n\t\t\t\t{\n\t\t\t\t\t\"suuid\": \"82Js23\",\n\t\t\t\t\t\"category\": \"linux\",\n\t\t\t\t\t\"front\": \"how to find out your shell\",\n\t\t\t\t\t\"back\": \"echo $0\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"suuid\": \"2Jjq4a\",\n\t\t\t\t\t\"category\": \"git\",\n\t\t\t\t\t\"front\": \"get back file from staging area to working directory, i.e. unstage a file\",\n\t\t\t\t\t\"back\": \"git reset [file]\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"suuid\": \"891As1\",\n\t\t\t\t\t\"category\": \"git\",\n\t\t\t\t\t\"front\": \"show commit history with hash, title, author\",\n\t\t\t\t\t\"back\": \"git log --pretty=format:\\\"%h - %s - %an\\\" \"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"suuid\": \"3bCd45\",\n\t\t\t\t\t\"category\": \"linux\",\n\t\t\t\t\t\"front\": \"navigate to the home directory\",\n\t\t\t\t\t\"back\": \"cd ~\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"suuid\": \"7iJk89\",\n\t\t\t\t\t\"category\": \"linux\",\n\t\t\t\t\t\"front\": \"create a new file\",\n\t\t\t\t\t\"back\": \"touch index.html\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t\t---------------------------------------------\n- **>>> 5. Set up mock CRUD routes for flashcards and test with Postman**\n\t- we are going to make the most basic routes needed for each item\n\t\t- basically this means for teach item (e.g. flashcards) we will have **six routes**:\n\t\t\t- **get all items (GET)**\n\t\t\t\t- array of items sent back\n\t\t\t- **get one item based on suuid (GET)**\n\t\t\t\t- item sent back\n\t\t\t- **create a flashcard (POST)**\n\t\t\t\t- send all fields except suuid which will be created automatically\n\t\t\t\t- item with newly created suuid sent back\n\t\t\t- **replace all fields except suuid (PUT)**\n\t\t\t\t- newly changed item sent back\n\t\t\t- **replace one or more fields (PATCH)**\n\t\t\t\t- newly changed item sent back\n\t\t\t- **delete one item based on suuid (DELETE)**\n\t\t\t\t- newly deleted item sent back\n\t\t- since our CRUD application is only intended to work locally, this will be sufficient\n\t\t\t- since even if we have thousands of items in our collections\n\t\t\t\t- there will hardly be any speed concerns when sending them all to the frontend and having them queried there\n\t\t- but if you want to practice creating routes with more detailed querying possibilities\n\t\t\t- see these [REST API examples and queries](https://restdb.io/docs/querying-with-the-api) \n\t- **server.ts**\n\t\t-----------------------------------------\n\t\timport express from 'express';\n\t\timport { flashcardRouter } from './routers/flashcardRouter';\n\n\t\texport const app = express();\n\n\t\tapp.get('/', (_req, res) => {\n\t\t\tres.json({\n\t\t\t\tappName: \"API for AppLearn version 0.2\"\n\t\t\t})\n\t\t});\n\n\t\tapp.use('/api/flashcards', flashcardRouter);\t\t\n\t\t-----------------------------------------\n\t- **flashcardRouter.ts**\n\t\t-------------------------------------------------\n\t\timport { Router } from 'express';\n\n\t\texport const flashcardRouter = Router();\n\n\t\tflashcardRouter.get('/', (_req, res) => {\n\t\t\tres.json('get all flashcards');\n\t\t});\n\n\t\tflashcardRouter.get('/:suuid', (req, res) => {\n\t\t\tconst suuid = req.params.suuid;\n\t\t\tres.json(`get one flashcard with suuid ${suuid}`);\n\t\t});\n\n\t\tflashcardRouter.post('/', (_req, res) => {\n\t\t\tres.json('create flashcard');\n\t\t});\n\n\t\tflashcardRouter.put('/:suuid', (req, res) => {\n\t\t\tconst suuid = req.params.suuid;\n\t\t\tres.json(`replace flashcard with suuid ${suuid}`);\n\t\t});\n\n\t\tflashcardRouter.patch('/:suuid', (req, res) => {\n\t\t\tconst suuid = req.params.suuid;\n\t\t\tres.json(`replace fields on flashcard with suuid ${suuid}`);\n\t\t});\n\n\t\tflashcardRouter.delete('/:suuid', (req, res) => {\n\t\t\tconst suuid = req.params.suuid;\n\t\t\tres.json(`delete flashcard with suuid ${suuid}`);\n\t\t});\t\n\t\t-------------------------------------------------\n\t- test with Postman\n\t\t- install Postman if you haven't: https://www.postman.com/downloads\n\t\t- set up an Account with Postman if you haven't##postmancreatascc\n\t\t- with Google Account is easiest##withggforpo\n\t\t- create new collection##createnewcoll\n\t\t- call it **LearnApp**\n\t\t- add a request##addreqqqqq\n\t\t- create first request in LearnApp##thegetoks101\n\t\t- create folder called \"flashcards\" and create rest of requests inside it##tehrestpostman\n- **>>> 6. Set up database handlers for each of the routes and test with Postman**\n\t- install lowdb\n\t\t----------------------------------------------------\n\t\tnpm i -D lowdb\n\t\t----------------------------------------------------\n\t- set up Interfaces we will need\n\t\t- **backend/interfaces.ts**\n\t\t\t-----------------------------------------\n\t\t\texport interface IFlashcard {\n\t\t\t\tsuuid: string;\n\t\t\t\tcategory: string;\n\t\t\t\tfront: string;\n\t\t\t\tback: string;\n\t\t\t}\n\n\t\t\texport interface IDatabase {\n\t\t\t\tflashcards: IFlashcard[]\n\t\t\t}\n\t\t\t-----------------------------------------\n\t- **api/handlers/flashcardHandlers.ts**\n\t\t--------------------------------------------------\n\t\timport { join } from 'path';\n\t\timport { JSONFile } from 'lowdb/node';\n\t\timport { Low }  from 'lowdb';\n\t\timport { IDatabase } from '../../interfaces';\n\n\t\tconst projectBasePath = process.cwd();\n\t\tconst dbPathAndFileName = join(projectBasePath, 'backend/data/db.json');\n\t\tconst adapter = new JSONFile<IDatabase>(dbPathAndFileName);\n\t\tconst db: Low<IDatabase> = new Low<IDatabase>(adapter, {} as IDatabase);\n\t\tawait db.read();\n\t\t--------------------------------------------------\n\t- **=== get all flashcards =====**\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------------\n\t\t\tflashcardRouter.get('/', (_req, res) => {\n\t\t\t\tres.json(flashcardHandler.getAllFlashcards());\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- **flashcardHandlers.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const getAllFlashcards = () => {\n\t\t\t\treturn db.data.flashcards;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- test with Postman##flahsrouttestpost\n\t- **=== get one flashcard =====**\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------------\n\t\t\tflashcardRouter.get('/:suuid', (req, res) => {\n\t\t\t\tconst suuid = req.params.suuid;\n\t\t\t\tconst flashcard: IFlashcard | null = flashcardHandler.getOneFlashcard(suuid);\n\t\t\t\tif (flashcard) {\n\t\t\t\t\tres.json(flashcard);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(404).json({\n\t\t\t\t\t\tmessage: `Flashcard with suuid \"${suuid}\" was not found.`\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- **flashcardHandlers.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const getOneFlashcard = (suuid: string) => {\n\t\t\t\tconst flashcard = db.data.flashcards.find(m => m.suuid === suuid);\n\t\t\t\tif (flashcard) {\n\t\t\t\t\treturn flashcard;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t\t--------------------------------------------------\n\t\t- test with Postman for flashcard does NOT exist:##thesonenotfound\n\t\t- test with Postman for flashcard that exists:##theonefoundfpalsh\n\t- **=== create flashcard =====**\n\t\t- **interfaces.ts**\n\t\t\t-----------------------------------------\n\t\t\texport interface INewFlashcard {\n\t\t\t\tcategory: string;\n\t\t\t\tfront: string;\n\t\t\t\tback: string;\n\t\t\t}\n\n\t\t\texport interface IFlashcard extends INewFlashcard {\n\t\t\t\tsuuid: string;\n\t\t\t}\n\t\t\t-----------------------------------------\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------------\n\t\t\tflashcardRouter.post('/', (req, res) => {\n\t\t\t\tconst newFlashcard: INewFlashcard = req.body;\n\t\t\t\tconst createdFlashcard = flashcardHandler.createFlashcard(newFlashcard);\n\t\t\t\tres.json(createdFlashcard);\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- **flashcardHandlers.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const createFlashcard = async (newFlashcard: INewFlashcard) => {\n\t\t\t\tconst flashcard: IFlashcard = {\n\t\t\t\t\t...newFlashcard,\n\t\t\t\t\tsuuid: tools.generateSuuid()\n\t\t\t\t}\n\t\t\t\tconst flashcards = db.data.flashcards;\n\t\t\t\tflashcards.push(flashcard);\n\t\t\t\tawait db.write();\n\t\t\t\treturn flashcard;\n\t\t\t}\t\n\t\t\t--------------------------------------------------\n\t\t- test with Postman:##postthecreare\t\t\n\t- **=== replace flashcard =====**\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------------\n\t\t\tflashcardRouter.put('/:suuid', async (req, res) => {\n\t\t\t\tconst suuid = req.params.suuid;\n\t\t\t\tconst newFlashcard: INewFlashcard = req.body;\n\t\t\t\tconst replacedFlashcard = await flashcardHandler.replaceFlashcard(suuid, newFlashcard);\n\t\t\t\tif (replacedFlashcard) {\n\t\t\t\t\tres.json(replacedFlashcard);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(404).json({\n\t\t\t\t\t\tmessage: `Flashcard with suuid \"${suuid}\" was not found.`\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- **flashcardHandlers.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const replaceFlashcard = async (suuid: string, newFlashcard: INewFlashcard) => {\n\t\t\t\tconst flashcard: IFlashcard | undefined = db.data.flashcards.find(m => m.suuid === suuid);\n\t\t\t\tif (flashcard) {\n\t\t\t\t\tflashcard.category = newFlashcard.category;\n\t\t\t\t\tflashcard.front = newFlashcard.front;\n\t\t\t\t\tflashcard.back = newFlashcard.back;\n\t\t\t\t\tawait db.write();\n\t\t\t\t\treturn flashcard;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t\t- test with Postman for flashcard does NOT exist:##therpalcenotex\n\t\t- test with Postman for flashcard that exists:##therpalcenotex222\n\t- **=== replace one or more fields in flashcard =====**\n\t\t- **interfaces.ts**\n\t\t\t-----------------------------------------\n\t\t\texport interface IPatchFlashcard {\n\t\t\t\tcategory?: string;\n\t\t\t\tfront?: string;\n\t\t\t\tback?: string;\n\t\t\t}\n\t\t\t-----------------------------------------\t\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------------\n\t\t\tflashcardRouter.patch('/:suuid', async (req, res) => {\n\t\t\t\tconst suuid = req.params.suuid;\n\t\t\t\tconst patchFlashcard: IPatchFlashcard = req.body;\n\t\t\t\tconst patchedFlashcard = await flashcardHandler.replaceSomeFieldsInFlashcard(suuid, patchFlashcard);\n\t\t\t\tif (patchedFlashcard) {\n\t\t\t\t\tres.json(patchedFlashcard);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(404).json({\n\t\t\t\t\t\tmessage: `Flashcard with suuid \"${suuid}\" was not found.`\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- **flashcardHandlers.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const replaceSomeFieldsInFlashcard = async (suuid: string, patchFlashcard: IPatchFlashcard) => {\n\t\t\t\tconst flashcard: IFlashcard | undefined = db.data.flashcards.find(m => m.suuid === suuid);\n\t\t\t\tif (flashcard) {\n\t\t\t\t\tif(patchFlashcard.category) flashcard.category = patchFlashcard.category;\n\t\t\t\t\tif(patchFlashcard.front) flashcard.front = patchFlashcard.front;\n\t\t\t\t\tif(patchFlashcard.back) flashcard.back = patchFlashcard.back;\n\t\t\t\t\tawait db.write();\n\t\t\t\t\treturn flashcard;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t\t- test with Postman for flashcard does NOT exist:##repalcepost111\n\t\t- test with Postman for flashcard that exists:##repalcepost222\n\t- **=== delete flashcard =====**\t\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------------\n\t\t\tflashcardRouter.delete('/:suuid', async (req, res) => {\n\t\t\t\tconst suuid = req.params.suuid;\n\t\t\t\tconst deletedFlashcard = await flashcardHandler.deleteFlashcard(suuid);\n\t\t\t\tif (deletedFlashcard) {\n\t\t\t\t\tres.json(deletedFlashcard);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(404).json({\n\t\t\t\t\t\tmessage: `Flashcard with suuid \"${suuid}\" was not found.`\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- **flashcardHandlers.ts**\n\t\t\t--------------------------------------------------\n\t\t\texport const deleteFlashcard = async (suuid: string) => {\n\t\t\t\tconst deletedFlashcard = db.data.flashcards.find(m => m.suuid === suuid);\n\t\t\t\tif (deletedFlashcard) {\n\t\t\t\t\tconst indexToRemove = db.data.flashcards.findIndex((flashcard) => flashcard.suuid === suuid);\n\t\t\t\t\tif (indexToRemove !== -1) {\n\t\t\t\t\t\tdb.data.flashcards.splice(indexToRemove, 1);\n\t\t\t\t\t\tawait db.write();\n\t\t\t\t\t}\n\t\t\t\t\treturn deletedFlashcard;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t\t- test with Postman for flashcard does NOT exist:##delpostcard111\n\t\t- test with Postman for flashcard that exists:##delpostcard222\n- challenges\n\t- **>>> CHALLENGE: Build more handlers in flashcardHandlers.ts which allow developers to query the flashcards, for ideas see: [REST API examples and queries](https://restdb.io/docs/querying-with-the-api)**\n\t- **>>> CHALLENGE: Create another item called techSkills based on this file [skills.json](https://edwardtanguay.vercel.app/share/skills_with_id.json)**\n\t- **>>> CHALLENGE: Create a CLI which analyzes a JSON file and creates a router and handler file based on it**","points":20,"extras":"","systemWhenCreated":"2024-01-07 11:54:16","systemWhoCreated":"systemUnknown"},{"id":805,"category":"Fullstack","title":"LearnApp Project: Fullstack app with full local CRUD frontend/backend which publishes read-only site at Vercel","body":"- **multi-howto project**\n\t- this LearnApp project extends over multiple howtos\n\t- these howtos build on each other and so are meant to be done in sequence from the beginning to the end\n\t- but you can start at any step by cloning the finishing code from the step before it and working from that\n\t- [LearnApp Part 1: Create backend API with full CRUD functionality that uses lowdb as database](https://tanguay-eu.vercel.app/howtos/804)\n\t- [LearnApp Part 2: Create React CRUD frontend to communicate with Node/Express CRUD backend](https://tanguay-eu.vercel.app/howtos/806)\n\t- [LearnApp Part 3: Enable user to delete and edit flashcards via the frontend and publish site at Vercel](https://tanguay-eu.vercel.app/howtos/807)\n\t- [LearnApp Part 4: Deployment to Vercel using environment variables for local CRUD site and online read-only site](https://tanguay-eu.vercel.app/howtos/809)\n\t- [LearnApp Part 5: API middleware and routing, and error handling](https://tanguay-eu.vercel.app/howtos/810)\n\t- [LearnApp Part 6: API testing with Vitest and Supertest](https://tanguay-eu.vercel.app/howtos/813)\n- **the live-coding project for this LearnApp project is here**\n\t- https://github.com/edwardtanguay/et888-learnapp\n\t- after each live-coding, I make a copy of the repository as frozen code for that step\n\t\t- in each step, you can find code from\n\t\t\t- (1) the preparation code base\n\t\t\t- (2) the live-coding code base\n\t\t\t- these repositories can differentiate in minor ways, e.g. refactorings which we decided on in the live-coding session, etc.\n\t- but this project **et888-learnapp** will eventually have the code for the finished project\t\n- **overview of project**\n\t- the LearnApp project has two purposes:\n\t\t- (1) to **learn how to build a complete CRUD API** including routes, handlers, database, MVC pattern, middleware, error handling, logging, testing\n\t\t- (2) to build a **useful application that you can use and extend** to record what you learn\n\t- technical structure\n\t\t- the LearnApp project contains a backend and frontend in **one directory**\n\t\t- **backend**: \n\t\t\t- Node/Express API with [lowdb](https://www.npmjs.com/package/lowdb) as a database\n\t\t\t- TypeScript / ES6 modules\n\t\t\t- the backend exists in /backend and contains\n\t\t\t\t- `/backend/api`\n\t\t\t\t\t- contains all routes necessary for full CRUD of items, e.g. flashcards, howtos, notes, techItems\n\t\t\t\t- `/backend/cli`\n\t\t\t\t\t- CLI can be extended to automatically generate code in backend and frontend\n\t\t- **frontend**:\n\t\t\t- Vite-React with createBrowserRouter\n\t\t\t- TypeScript / ES6 modules\n\t\t\t- axios\n\t\t- **development/production**\n\t\t\t- the site will look and function completely differently depending on if it is \n\t\t\t\t- running locally on your computer - will enable full editing of items\n\t\t\t\t- published at Vercel - no admin pages will appear, all data will be read-only\n\t\t\t- the site will be published at Vercel\t\n\t\t\t\t- but of course the API running on Node/Express will not work at excel since there is no backend at Vercel\n\t\t\t- therefore, we will have an environment variable called APP_ENVIRONMENT which is \"development\" locally and \"production\" at Vercel\n\t\t\t- when environment is \"development\", the user has full access to all frontend pages and backend API functionality to change all items in user-friendly forms via the frontend, e.g. flashcards\n\t\t\t- the data is saved in **JSON files**\n\t\t\t- when in development, the site reads and writes data via the backend API which access these JSON files\n\t\t\t- when in production, the site has been built (`npm run build`) and so the JSON files have been converted to JavaScript objects\n\t- **technology and tools NOT used in this project**\n\t\t- in order for us to focus on **API design, construction and integration with the frontend**\n\t\t\t- which is enough to learn in itself at one time\n\t\t\t- there are particular areas which we intentionally will not include in this project\n\t\t- **(1) no classic database such as SQLite, MySQL, Postgres or MondoDB**\n\t\t\t- we will use **lowdb** as our database, which allows to perform full CRUD on objects in a JSON file with a minimum of code\n\t\t\t- so we won't have to concern ourselves with\n\t\t\t\t- database installation\n\t\t\t\t- database-specific syntax such as SQL or MongoDB querying\n\t\t\t\t- ORMs or ODMs such as Prisma or Mongoose\n\t\t\t\t- connections strings and online database accessibility\n\t\t\t- note that if we wanted to learn SQL, **SQLite** would be a good replacement for **lowdb** since \n\t\t\t\t- it requires no installation\n\t\t\t\t- the database is simply one local (binary) file, similar to lowdb's one local (text/JSON) file\n\t\t- **(2) no login, authentication or authorization**\n\t\t\t- since the idea of this application is to have one local user who \n\t\t\t\t- creates and edits data locally on their computer \n\t\t\t\t- publishes to a read-only site at Vercel\n\t\t\t\t- there is no need for authetnication (one merely has to log into the computer on which the application is used)\n\t\t\t\t- there is no need for authorization (there is only one user who has complete access to code and data locally)\n\t\t- **(3) no need for online security implementation**\n\t\t\t- since the published site at Vercel is read-only (Jamstack-style HTML/CSS/JS), has no login and no database\n\t\t\t\t- there is no need to implement a login, JWT tokens, hash passwords or anything that is normally required of a full-stack application","points":20,"extras":"","systemWhenCreated":"2024-01-08 21:21:49","systemWhoCreated":"systemUnknown"},{"id":806,"category":"CRUD React Frontend","title":"LearnApp Part 2: Create frontend Manage Flashcard page and implement add flashcard","body":"- **background**\n\t- this howto is **Part 2** of the **LearnApp project**\n\t\t- LearnApp project: https://tanguay-eu.vercel.app/howtos/805\n\t- **what we will build in this howto**\n\t\t- in [part 1](https://tanguay-eu.vercel.app/howtos/804) we\n\t\t\t- implemented the full CRUD backend with Node/Express which serves flashcards via its **/api/flashcards** URL\n\t\t\t- we also quickly set up a based Vite-React frontend with menu and mock pages\n\t\t- therefore, this how will be to extend the frontend with a page **Manage Flashcards** that \n\t\t\t- uses the CRUD backend to allow the user to perform all CRUD operations\n\t- **finishing code for this step is here**\n\t\t- https://github.com/edwardtanguay/et201-learnapp - 2024-01-08 preparation\n\t\t- https://github.com/edwardtanguay/et202-learnapp - 2024-01-09 live-coding code, small differences with style\n\t- **frontend after finishing this howto works like this**#gif#theaddingflasworksthis\n- **>>> 1. Create Manage Flashcards page which loads and displays flashcards from backend**\n\t- !!! decide to put **interfaces** in a place where they can be shared by both backend and frontend\n\t\t- we have one application with two parts: backend and frontend\n\t\t- but this backend and frontend is not separated as is commonly the case in distributed, microservice-style applications online\n\t\t- in fact, the frontend and backend of our application share many things between them\n\t\t\t- **interfaces**\n\t\t\t\t- many of the interfaces used in the backend can be used in the frontend\n\t\t\t\t- or at least build by extending other interfaces, as to conserve and simplify code\n\t\t\t- **database** \n\t\t\t\t- backend reads and changes local database JSON file directory\n\t\t\t\t- Vercel **npm run build** process converts JSON file into a JavaScript object to be read from within the CDN code\n\t\t\t- **tools**\n\t\t\t\t- many functions e.g. string functions can be shared between backend and frontend\n\t\t\t\t- this is a unique characteristic of fullstack applications that use JavaScript\n\t\t\t\t\t- we have the same language in the client as in the backend\n\t\t\t\t\t- hence we can share code\n\t\t\t- **config**\n\t\t\t\t- many configurations are used in both backend and frontend\n\t\t- for now, let's bring the **interfaces** into a shared space, since we will be using them in this step and want to avoid code duplication\n\t\t\t- we can create a ticket to later bring database, tools and config into shared as well\n\t\t- in the root directory, create a directory **src/shared**\n\t\t\t- note it has to be in **src** in order for VSCode to find the interfaces when developing in the frontend\n\t\t\t- drag **backend/interfaces.ts** into **shared**\n\t\t\t- search in VSCode for `interfaces'` and update the path to interfaces \n\t\t\t\t- **dbtools.ts**\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t\timport { IDatabase } from '../../../src/shared/interfaces';\n\t\t\t\t\t----------------------------------------------\n\t\t\t\t- **flashcardHandlers.ts**\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t\timport { IFlashcard, INewFlashcard, IPatchFlashcard } from '../../../src/shared/interfaces';\n\t\t\t\t\t---------------------------------------------\n\t\t\t\t- **flashcardRouter.ts**\n\t\t\t\t\t--------------------------------------------\n\t\t\t\t\timport { IFlashcard, INewFlashcard, IPatchFlashcard } from '../../../src/shared/interfaces';\n\t\t\t\t\t--------------------------------------------\n\t- !!! decide to first build **appContext** to load all application data in one place which any page or component can use\n\t\t- in this step, we want to build a page \"Manage Flashcards\" that fetches and displays flashcards from the backend\n\t\t- we could, of course, simply fetch the data from that page\n\t\t- but we know we are building a larger application that we will like to extend later\n\t\t\t- and we will have other pages which access the same data as well\n\t\t\t- e.g. this \"Manage Flashcards\" page will be an admin page which will not be available on the read-only site at Vercel\n\t\t\t- at Vercel, we will have e.g. a **Flashcards** page on which the user can view and flashcards as finished, etc.\n\t\t\t\t- we don't want to have to load flashcards from this page as well\n\t\t\t\t- hence the best decision is to create an AppContext for all pages and components\n\t\t- in general, any app with more than one page should load all its appData in one place\n\t\t\t- this is an example of **separation of concerns** where you have\n\t\t\t\t- **one entry point for external data** into your app \n\t\t\t\t- so you know the external data coming into your app is **validated, cleaned and well-structured**\n\t\t- install axios\n\t\t\t- `npm i -D axios`\n\t\t- **src/AppContext.tsx**\n\t\t\t-----------------------------------------------------\n\t\t\timport { createContext, useEffect, useState } from \"react\";\n\t\t\timport axios from \"axios\";\n\t\t\timport { IFlashcard } from \"./shared/interfaces\";\n\n\t\t\tinterface IAppContext {\n\t\t\t\tflashcards: IFlashcard[]\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\tconst backendUrl = \"http://localhost:4206\";\n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\tconst [flashcards, setFlashcards] = useState<IFlashcard[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${backendUrl}/api/flashcards`);\n\t\t\t\t\t\tconst _flashcards = response.data;\n\t\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tflashcards\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t};\n\t\t\t-----------------------------------------------------\n\t\t- **main.tsx**\n\t\t\t------------------------------\n\t\t\t<AppProvider>\n\t\t\t\t<RouterProvider router={router} />\n\t\t\t</AppProvider>\t\t\t\n\t\t\t------------------------------\n\t- change **Info** page to **Manage Flashcards** page\n\t\t- **Nav.tsx**\n\t\t\t---------------------------------------------\n\t\t\t<li><NavLink to=\"/manageFlashcards\">Manage Flashcards</NavLink></li>\n\t\t\t---------------------------------------------\n\t\t- convert PageInfo.tsx to **PageManageFlashcards.tsx**\n\t\t\t-----------------------------------------\n\t\t\texport const PageManageFlashcards= () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>This is the manage flashcards page.</p>\n\t\t\t\t)\n\t\t\t}\n\t\t\t-----------------------------------------\n\t\t- **main.tsx**\n\t\t\t--------------------------------------------\n\t\t\t{\n\t\t\t\tpath: \"manageFlashcards\",\n\t\t\t\telement: <PageManageFlashcards />,\n\t\t\t},\t\t\t\n\t\t\t--------------------------------------------\n\t\t- you know have a **Managed Flashcards** page##themanaflas\n\t- load flashcards from AppContext\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t-----------------------------------------------\n\t\t\timport { useContext } from \"react\";\n\t\t\timport { AppContext } from \"../AppContext\";\n\n\t\t\texport const PageManageFlashcards = () => {\n\t\t\t\tconst { flashcards } = useContext(AppContext);\n\t\t\t\treturn <p>There are {flashcards.length} flashcards:</p>;\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- PROBLEM: you will get a CORS error##thecorsagains\n\t\t\t- SOLUTION: add CORS to the backend\n\t\t\t\t- install cors\n\t\t\t\t\t- `npm i -D cors`\n\t\t\t\t- **server.ts**\n\t\t\t\t\t-------------------------------------------\n\t\t\t\t\tapp.use(express.json());\n\t\t\t\t\tapp.use(cors());\n\t\t\t\t\t-------------------------------------------\n\t\t\t- CORS error is fixed##nocorsadfsadi\n\t- display flashcards in styled table on page\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t---------------------------------------------------------\n\t\t\t<p>There are {flashcards.length} flashcards:</p>\n\t\t\t<table className=\"mt-4 dataTable\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>SUIID</th>\n\t\t\t\t\t\t<th>Category</th>\n\t\t\t\t\t\t<th>Front</th>\n\t\t\t\t\t\t<th>Back</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{flashcards.map((flashcard) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{flashcard.suuid}</td>\n\t\t\t\t\t\t\t\t<td>{flashcard.category}</td>\n\t\t\t\t\t\t\t\t<td>{flashcard.front}</td>\n\t\t\t\t\t\t\t\t<td>{flashcard.back}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\t\t\t\n\t\t\t---------------------------------------------------------\n\t\t- **index.scss**\n\t\t\t-------------------------------------------------\n\t\t\ttable.dataTable {\n\t\t\t\t$border: #3e4a5c;\n\t\t\t\t$dataRowColor: #64748B;\n\t\t\t\tborder: 1px solid $border;\n\n\t\t\t\tthead {\n\t\t\t\t\ttr {\n\t\t\t\t\t\tth {\n\t\t\t\t\t\t\tbackground-color: #536073;\n\t\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\t\tborder-left: 1px solid $border;\n\t\t\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tborder-bottom: 1px solid $border;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttbody {\n\t\t\t\t\ttr {\n\t\t\t\t\t\ttd {\n\t\t\t\t\t\t\tbackground-color: $dataRowColor;\n\t\t\t\t\t\t\tcolor: #ccc;\n\t\t\t\t\t\t\tborder-left: 1px solid $border;\n\t\t\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\t\t\tcolor: #222;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t&:nth-child(even) td {\n\t\t\t\t\t\t\tbackground-color: darken($dataRowColor, 5%);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------------------\n\t\t- flashcards are now displaying on page##styledtableajforwfrlash\n- **>>> 2. Add all CRUD buttons to table**\n\t- install react-icons\n\t\t- `npm i react-icons`\n\t- find icons here\n\t\t- https://react-icons.github.io/react-icons\n\t- **PageFlashcardManager.tsx**\n\t\t---------------------------------------------------------------\n\t\timport { FaPencilAlt, FaRegTrashAlt } from \"react-icons/fa\";\n\t\timport { SiOneplus } from \"react-icons/si\";\n\n\t\t<th>\n\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t<SiOneplus className=\"text-2xl cursor-pointer text-[#222] hover:text-[#000]\" />\n\t\t\t</div>\n\t\t</th>\n\n\t\t<td>\n\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t<FaPencilAlt className=\"cursor-pointer text-[#222] hover:text-[#000]\" />{\" \"}\n\t\t\t\t<FaRegTrashAlt className=\"cursor-pointer text-[#222] hover:text-[#000]\" />\n\t\t\t</div>\n\t\t</td>\t\t\n\t\t---------------------------------------------------------------\n\t- page now has CRUD icons##addthecrudidcons\n- **>>> 3. Enable user to add flashcard**\n\t- create the row form to add a flashcard\n\t\t- after this we will enable the button to toggle this form as visible/hidden\n\t\t- **PageFlashcardManager.tsx**\n\t\t\t--------------------------------------------------------\n\t\t\timport { MdCancel } from \"react-icons/md\";\n\t\t\timport { FaFloppyDisk } from \"react-icons/fa6\";\n\n\t\t\t<SiOneplus className=\"text-2xl cursor-pointer text-[#222] hover:text-[#1d411b]\" />\n\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td></td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input className=\"w-full\" />\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input className=\"w-full\" />\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input className=\"w-full\" />\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t\t\t<FaFloppyDisk className=\"cursor-pointer text-[#222] hover:text-[#1d411b]\" />\n\t\t\t\t\t\t\t<MdCancel className=\"cursor-pointer text-[#222] hover:text-[#592727]\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t{flashcards.map((flashcard) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td className=\"font-mono\">{flashcard.suuid}</td>\n\t\t\t\t\t\t\t<td>{flashcard.category}</td>\n\t\t\t\t\t\t\t<td>{flashcard.front}</td>\n\t\t\t\t\t\t\t<td>{flashcard.back}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t\t\t\t\t<FaPencilAlt className=\"cursor-pointer text-[#222] hover:text-[#1d411b]\" />\n\t\t\t\t\t\t\t\t\t<FaRegTrashAlt className=\"cursor-pointer text-[#222] hover:text-[#592727]\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t\t--------------------------------------------------------\n\t\t- the add row looks like this##theaddrownow\n\t- enable clicking add icon to toggle the add row\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t---------------------------------------------\n\t\t\tconst [isAdding, setIsAdding] = useState(true);\n\n\t\t\t<table className=\"mt-4 dataTable w-[80rem]\">\n\n\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t<SiOneplus onClick={() => setIsAdding(!isAdding)} className=\"text-2xl cursor-pointer text-[#222] hover:text-[#1d411b]\" />\n\t\t\t</div>\n\n\t\t\t{isAdding && (\n\t\t\t)}\n\t\t\t---------------------------------------------\n\t- enable add fields to be changed\n\t\t- **interfaces.ts**\n\t\t\t----------------------------------\n\t\t\texport const blankNewFlashcard = {\n\t\t\t\tcategory: '',\n\t\t\t\tfront: '',\n\t\t\t\tback: ''\n\t\t\t}\t\t\t\n\t\t\t----------------------------------\n\t\t- **PageManageFlashcard.tsx**\n\t\t\t--------------------------------------------\n\t\t\tconst [newFlashcard, setNewFlashcard] =\n\t\t\t\tuseState<INewFlashcard>(blankNewFlashcard);\n\n\t\t\tconst handleNewFlashcardFieldChange = (\n\t\t\t\te: React.ChangeEvent<HTMLInputElement>,\n\t\t\t\tfieldName: string\n\t\t\t) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tswitch (fieldName) {\n\t\t\t\t\tcase \"category\":\n\t\t\t\t\t\tnewFlashcard.category = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"front\":\n\t\t\t\t\t\tnewFlashcard.front = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"back\":\n\t\t\t\t\t\tnewFlashcard.back = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst _newFlashcard = structuredClone(newFlashcard);\n\t\t\t\tsetNewFlashcard(_newFlashcard);\n\t\t\t};\t\t\t\n\n\t\t\t<td>\n\t\t\t\t<input\n\t\t\t\t\tvalue={newFlashcard.category}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\thandleNewFlashcardFieldChange(e,'category')\n\t\t\t\t\t}\n\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input\n\t\t\t\t\tvalue={newFlashcard.front}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\thandleNewFlashcardFieldChange(e,'front')\n\t\t\t\t\t}\n\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input\n\t\t\t\t\tvalue={newFlashcard.back}\n\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\thandleNewFlashcardFieldChange(e,'back')\n\t\t\t\t\t}\n\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t/>\n\t\t\t</td>\t\t\t\n\t\t\t--------------------------------------------\n\t- enable cancel icon to reset the form and close it\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t----------------------------------------------\n\t\t\tconst handleCancelAddForm = () => {\n\t\t\t\tsetNewFlashcard(structuredClone(blankNewFlashcard));\n\t\t\t\tsetIsAdding(false);\n\t\t\t}\t\t\t\n\n\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t<FaFloppyDisk className=\"cursor-pointer text-[#222] hover:text-[#1d411b]\" />\n\t\t\t\t<MdCancel onClick={handleCancelAddForm} className=\"cursor-pointer text-[#222] hover:text-[#592727]\" />\n\t\t\t</div>\t\t\t\n\t\t\t----------------------------------------------\n\t\t- you can cancel the form like this#gif#cancletheformlike\n\t- enable save button to save new flashcard and display it in the list\n\t\t- **AppContext.tsx**\n\t\t\t-------------------------------------------\n\t\t\tinterface IAppContext {\n\t\t\t\tflashcards: IFlashcard[];\n\t\t\t\thandleSaveFlashcard: (newFlashcard: INewFlashcard) => Promise<{message: string}>;\n\t\t\t}\n\n\t\t\tconst handleSaveFlashcard = async (newFlashcard: INewFlashcard) => {\n\t\t\t\treturn new Promise<{message: string}>((resolve, reject) => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await axios.post(\n\t\t\t\t\t\t\t\t`${backendUrl}/api/flashcards`,\n\t\t\t\t\t\t\t\tnewFlashcard,\n\t\t\t\t\t\t\t\t{ headers }\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (response.status === 201) {\n\t\t\t\t\t\t\t\tconst addedFlashcard: IFlashcard = response.data.flashcard;\n\t\t\t\t\t\t\t\tflashcards.push(addedFlashcard);\n\t\t\t\t\t\t\t\tconst _flashcards = structuredClone(flashcards);\n\t\t\t\t\t\t\t\tsetFlashcards(_flashcards);\n\t\t\t\t\t\t\t\tresolve({message: 'ok'});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject({message: response.data.message});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\t\t\treject({message: `ERROR: ${e.message}`});\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tflashcards,\n\t\t\t\t\t\thandleSaveFlashcard,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t--------------------------------------------------\n\t\t\tconst { flashcards, handleSaveFlashcard } = useContext(AppContext);\n\t\t\tconst [isAdding, setIsAdding] = useState(false);\n\t\t\tconst [newFlashcard, setNewFlashcard] = useState<INewFlashcard>(\n\t\t\t\tstructuredClone(blankNewFlashcard)\n\t\t\t);\n\n\t\t\tconst handleSaveAddForm = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await handleSaveFlashcard(newFlashcard);\n\t\t\t\t\tif (response.message === \"ok\") {\n\t\t\t\t\t\thandleCancelAddForm();\n\t\t\t\t\t}\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\talert(\n\t\t\t\t\t\t\"Sorry, we cannot save the flaschard at this time. Try again later.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t<FaFloppyDisk\n\t\t\t\tonClick={handleSaveAddForm}\n\t\t\t\tclassName=\"cursor-pointer text-[#222] hover:text-[#1d411b]\"\n\t\t\t/>\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- **flashcardRouter.ts**\n\t\t\t-------------------------------------------\n\t\t\tflashcardRouter.post('/', async (req, res) => {\n\t\t\t\tconst newFlashcard: INewFlashcard = req.body;\n\t\t\t\tconst flashcard = await flashcardHandlers.addFlashcard(newFlashcard);\n\t\t\t\tres.status(201).json({flashcard, message: \"\"});\n\t\t\t\t// res.status(500).json({flashcard: {}, message: 'database not available'})\n\t\t\t});\t\t\t\n\t\t\t-------------------------------------------\n\t- adding a flashcard now works like this:#gif#theaddingflasworksthis","points":20,"extras":"","systemWhenCreated":"2024-01-08 21:31:19","systemWhoCreated":"systemUnknown"},{"id":807,"category":"CRUD React Frontend","title":"LearnApp Part 3: Enable user to delete and edit flashcards via the frontend and publish site at Vercel","body":"- **background**\n\t- this howto is **Part 3** of the **LearnApp project**\n\t\t- LearnApp project: https://tanguay-eu.vercel.app/howtos/805\n\t- **what we have built so far in this app**\n\t\t- in [PART 1](https://tanguay-eu.vercel.app/howtos/804) we\n\t\t\t- implemented the full CRUD backend with Node/Express which serves flashcards via its **/api/flashcards** URL\n\t\t\t- we also quickly set up a based Vite-React frontend with menu and mock pages\n\t\t- in [PART 2](https://tanguay-eu.vercel.app/howtos/806) we developed the **frontend**\n\t\t\t- displayed flashcards on **Manage Flashcards** page\n\t\t\t- enabled the user to be able to **add a flashcard**\n\t- now in **PART 3** we will complete the frontend:\n\t\t- enable user to delete flashcard\n\t\t- enable user to edit flashcard\n\t- **starting code for this step is here**\n\t\t- see finishing code for [PART 2](https://tanguay-eu.vercel.app/howtos/806)\n\t- **finishing code for this step is here**\n\t\t- https://github.com/edwardtanguay/et301-learnapp - 2024-01-09 preparation\n\t\t- https://github.com/edwardtanguay/et302-learnapp - 2024-01-10 live-coding\n\t- **frontend after finishing this howto works like this**#gif#thestep3finished\n- **>>> 1. Enable user to delete a flashcard**\n\t- first, delete the flashcard immediately when the user clicks on the delete button\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t-----------------------------------------------------------\n\t\t\tconst handleDeleteFlashcard = (flashcard: IFlashcard) => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await deleteFlashcard(flashcard);\n\t\t\t\t\tconsole.log(\"response\", response);\n\t\t\t\t})();\n\t\t\t};\n\n\t\t\t<RiDeleteBin6Line\n\t\t\t\tonClick={() => handleDeleteFlashcard(\n\t\t\t\t\tflashcard\n\t\t\t\t)}\n\t\t\t\tclassName=\"cursor-pointer hover:text-red-900\"\n\t\t\t/>\t\t\n\t\t\t-----------------------------------------------------------\n\t\t- **AppContext.tsx**\n\t\t\t-------------------------------------------------------\n\t\t\tinterface IAppContext {\n\t\t\t\tflashcards: IFlashcard[];\n\t\t\t\tsaveAddFlashcard: (newFlashcard: INewFlashcard) => Promise<IPromiseResolution>;\n\t\t\t\tdeleteFlashcard: (flashcard: IFlashcard) => Promise<IPromiseResolution>;\n\t\t\t}\n\n\t\t\tconst deleteFlashcard = async (flashcard: IFlashcard) => {\n\t\t\t\treturn new Promise<IPromiseResolution>((resolve, reject) => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await axios.delete(\n\t\t\t\t\t\t\t\t`${backendUrl}/api/flashcards/${flashcard.suuid}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\t\tconst flashcard: IFlashcard = response.data;\n\t\t\t\t\t\t\t\tconst indexToRemove = flashcards.findIndex(\n\t\t\t\t\t\t\t\t\t(m) => m.suuid === flashcard.suuid\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (indexToRemove !== -1) {\n\t\t\t\t\t\t\t\t\tflashcards.splice(indexToRemove, 1);\n\t\t\t\t\t\t\t\t\tsetFlashcards(structuredClone(flashcards));\n\t\t\t\t\t\t\t\t\tresolve({ message: \"ok\" });\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\t\t\tmessage: `flashcard with suuid ${flashcard.suuid} not found`,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\t\tmessage: `ERROR: status code ${response.status}`,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\tmessage: `ERROR: ${e.message}`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t});\n\t\t\t};\t\t\n\t\t\t-------------------------------------------------------\n\t\t- this works but is not the best user experience, if e.g. user meant to edit the flashcard and clicked the delete button instead, the flashcard is suddenly gone#gif#suddenlygonejksjdf\n\t\t- therefore, let's make the user confirm the delete, in order to give them a chance to cancel the delete if they want\n\t\t- in order to do this, we are going to save additional properties on our flashcards, and so in order to maintain clearly defined types, we will need to make a new interface called IFrontendFlashcard in order to represent an IFlashcard plus a property called **userIsDeleting**\n\t\t\t- we will also need this later for the property **userIsEditing**\n\t\t\t- in general, one should arguably always create frontendItems from the beginning since it is very common to want to change the state of individual items in various ways in the frontend, yet when you save, you don't want to save any of these frontend values to your database\n\t\t\t**PageManageFlashcards.tsx**\n\t- enable user to confirm delete before actually deleting\n\t- **interfaces.ts**\n\t\t----------------------------------------------------\n\t\texport interface IFrontendFlashcard extends IFlashcard {\n\t\t\tuserIsDeleting: boolean\n\t\t}\n\n\t\texport const convertFrontendFlashcardToFlaschard = (frontendFlashcard: IFrontendFlashcard): IFlashcard => {\n\t\t\treturn {\n\t\t\t\tsuuid: frontendFlashcard.suuid,\n\t\t\t\tcategory: frontendFlashcard.category,\n\t\t\t\tfront: frontendFlashcard.front,\n\t\t\t\tback: frontendFlashcard.back\n\t\t\t}\n\t\t} \n\n\t\texport const convertFlashcardToFrontendFlaschard = (flashcard: IFlashcard): IFrontendFlashcard => {\n\t\t\treturn {\n\t\t\t\tsuuid: flashcard.suuid,\n\t\t\t\tcategory: flashcard.category,\n\t\t\t\tfront: flashcard.front,\n\t\t\t\tback: flashcard.back,\n\t\t\t\tuserIsDeleting: false\n\t\t\t}\n\t\t} \t\t\n\t\t----------------------------------------------------\n\t- **PageMangageFlashcards.tsx**\n\t\t----------------------------------------------------\n\t\tconst handleDeleteFlashcard = (frontendFlashcard: IFrontendFlashcard) => {\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst flashcard = convertFrontendFlashcardToFlaschard(frontendFlashcard);\n\t\t\t\t\tdeleteFlashcard(flashcard);\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconsole.log(`${e.message}`);\n\t\t\t\t\talert(\n\t\t\t\t\t\t\"We're sorry, your flashcard cannot be saved at this time. Try again later, or contact 2342-234-23343.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\tconst toggleIsDeletingFlashcard = (\n\t\t\tfrontendFlashcard: IFrontendFlashcard\n\t\t) => {\n\t\t\tfrontendFlashcard.userIsDeleting = !frontendFlashcard.userIsDeleting;\n\t\t\tsetFrontendFlashcards(structuredClone(frontendFlashcards));\n\t\t};\n\n\t\t{frontendFlashcard.userIsDeleting ? (\n\t\t\t<>\n\t\t\t\t<RiDeleteBin6Line\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\thandleDeleteFlashcard(\n\t\t\t\t\t\t\tfrontendFlashcard\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tclassName=\"finalDelete cursor-pointer hover:text-red-900\"\n\t\t\t\t/>\n\t\t\t\t<MdCancel\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\ttoggleIsDeletingFlashcard(\n\t\t\t\t\t\t\tfrontendFlashcard\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tclassName=\"cursor-pointer hover:text-green-900\"\n\t\t\t\t/>\n\t\t\t</>\n\t\t) : (\n\t\t\t<>\n\t\t\t\t<MdModeEditOutline className=\"cursor-pointer hover:text-green-900\" />\n\t\t\t\t<RiDeleteBin6Line\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\ttoggleIsDeletingFlashcard(\n\t\t\t\t\t\t\tfrontendFlashcard\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tclassName=\"cursor-pointer hover:text-red-900\"\n\t\t\t\t/>\n\t\t\t</>\n\t\t)}\t\t\n\t\t----------------------------------------------------\n\t- **index.scss**\n\t\t-------------------------------------------------\n\t\t&.deleting {\n\t\t\ttd {\n\t\t\t\tbackground-color: rgb(79, 0, 0);\n\t\t\t\tcolor: #555;\n\t\t\t\t.finalDelete {\n\t\t\t\t\tcolor: rgb(189, 0, 0);\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tcolor: red;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t-------------------------------------------------\n\t- **AppContext.tsx** - refactor flashcards:IFlashcard[] to frontendFlashcards:IFrontendFlashcards[]\n\t\t--------------------------------------------------------\n\t\tfrontendFlashcards: IFrontendFlashcard[];\n\t\tsetFrontendFlashcards: (frontendFlashcards: IFrontendFlashcard[]) => void;\n\n\t\tconst [frontendFlashcards, setFrontendFlashcards] = useState<\n\t\t\tIFrontendFlashcard[]\n\t\t>([]);\t\t\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await axios.get(`${backendUrl}/api/flashcards`);\n\t\t\t\tconst _flashcards = response.data;\n\n\t\t\t\tconst _frontendFlashcards: IFrontendFlashcard[] = [];\n\t\t\t\tfor (const _flashcard of _flashcards) {\n\t\t\t\t\tconst _frontendFlashcard: IFrontendFlashcard = {\n\t\t\t\t\t\t..._flashcard,\n\t\t\t\t\t\tuserIsDeleting: false,\n\t\t\t\t\t};\n\t\t\t\t\t_frontendFlashcards.push(_frontendFlashcard);\n\t\t\t\t}\n\t\t\t\tsetFrontendFlashcards(_frontendFlashcards);\n\t\t\t})();\n\t\t}, []);\n\t\t--------------------------------------------------------\n\t- users now have a confirm step before permanently deleting a flashcard#gif#theconfirmforjdelete\n- **>>> 2. Refactor PageManageFlashcards into components so it is more readable and manageable**\n\t- **refactor table head into component**\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t--------------------------------------------------------------\n\t\t\t<ManageFlashcardsTableHead isAddingFlashcard={isAddingFlashcard} setIsAddingFlashcard={setIsAddingFlashcard} />\n\t\t\t--------------------------------------------------------------\n\t\t- **ManageFlashcardsTableHead.tsx**\n\t\t\t--------------------------------------------------------\n\t\t\timport { SiOneplus } from \"react-icons/si\";\n\n\t\t\tinterface IProps {\n\t\t\t\tisAddingFlashcard: boolean;\n\t\t\t\tsetIsAddingFlashcard: (isAddingFlashcard: boolean) => void;\n\n\t\t\t}\n\n\t\t\texport const ManageFlashcardsTableHead = ({isAddingFlashcard, setIsAddingFlashcard}:IProps) => {\n\t\t\t\treturn (\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>SUUID</th>\n\t\t\t\t\t\t\t<th>Category</th>\n\t\t\t\t\t\t\t<th>Front</th>\n\t\t\t\t\t\t\t<th>Back</th>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t<div className=\"flex justify-center text-[#222] text-2xl\">\n\t\t\t\t\t\t\t\t\t<SiOneplus\n\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\tsetIsAddingFlashcard(!isAddingFlashcard)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer hover:text-green-900\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------------------\n\t- **refactor add row into component**\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t--------------------------------------------------------------\n\t\t\t{isAddingFlashcard && <ManageFlashcardsAddRow newFlashcard={newFlashcard} setIsAddingFlashcard={setIsAddingFlashcard} setNewFlashcard={setNewFlashcard} />}\t\t\t\t\n\t\t\t--------------------------------------------------------------\n\t\t- **ManageFlashcardsAddRow.tsx**\n\t\t\t----------------------------------------------\n\t\t\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\t\t\timport { FaSave } from \"react-icons/fa\";\n\t\t\timport { INewFlashcard, blankNewFlashcard } from \"../shared/interfaces\";\n\t\t\timport { MdCancel } from \"react-icons/md\";\n\t\t\timport { ChangeEvent, useContext } from \"react\";\n\t\t\timport { AppContext } from \"../AppContext\";\n\n\t\t\tinterface IProps {\n\t\t\t\tnewFlashcard: INewFlashcard;\n\t\t\t\tsetIsAddingFlashcard: (isAddingFlashcard: boolean) => void;\n\t\t\t\tsetNewFlashcard: (newFlashcard: INewFlashcard) => void;\n\t\t\t}\n\n\t\t\texport const ManageFlashcardsAddRow = ({ newFlashcard, setIsAddingFlashcard, setNewFlashcard }: IProps) => {\n\t\t\t\tconst { saveAddFlashcard } = useContext(AppContext);\n\n\t\t\t\tconst handleCancelAddFlashcard = () => {\n\t\t\t\t\tsetIsAddingFlashcard(false);\n\t\t\t\t\tsetNewFlashcard(structuredClone(blankNewFlashcard));\n\t\t\t\t};\n\n\n\t\t\t\tconst handleChangeNewFlashcardField = (\n\t\t\t\t\te: ChangeEvent<HTMLInputElement>,\n\t\t\t\t\tfield: string\n\t\t\t\t) => {\n\t\t\t\t\tconst value = e.target.value;\n\t\t\t\t\tswitch (field) {\n\t\t\t\t\t\tcase \"category\":\n\t\t\t\t\t\t\tnewFlashcard.category = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"front\":\n\t\t\t\t\t\t\tnewFlashcard.front = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"back\":\n\t\t\t\t\t\t\tnewFlashcard.back = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst _newFlashcard = structuredClone(newFlashcard);\n\t\t\t\t\tsetNewFlashcard(_newFlashcard);\n\t\t\t\t};\n\n\t\t\t\tconst handleSaveAddFlashcard = () => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await saveAddFlashcard(newFlashcard);\n\t\t\t\t\t\t\tif (response.message === \"ok\") {\n\t\t\t\t\t\t\t\thandleCancelAddFlashcard();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\t\tconsole.log(`${e.message}`);\n\t\t\t\t\t\t\talert(\n\t\t\t\t\t\t\t\t\"We're sorry, your flashcard cannot be saved at this time. Try again later, or contact 2342-234-23343.\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t};\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={newFlashcard.category}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeNewFlashcardField(e, \"category\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={newFlashcard.front}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeNewFlashcardField(e, \"front\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tvalue={newFlashcard.back}\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\thandleChangeNewFlashcardField(e, \"back\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<div className=\"flex gap-1\">\n\t\t\t\t\t\t\t\t\t<FaSave\n\t\t\t\t\t\t\t\t\t\tonClick={handleSaveAddFlashcard}\n\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer hover:text-green-900\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<MdCancel\n\t\t\t\t\t\t\t\t\t\tonClick={handleCancelAddFlashcard}\n\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer hover:text-red-900\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t----------------------------------------------\n\t- **refactor table row into component**\n\t\t- **PageManageFlashcards.tsx**\n\t\t\t--------------------------------------------------------------\n\t\t\t{frontendFlashcards.map((frontendFlashcard) => {\n\t\t\t\treturn <ManageFlashcardsMainRow frontendFlashcard={frontendFlashcard} />;\n\t\t\t})}\t\t\t\t--------------------------------------------------------------\n\t\t\t--------------------------------------------------------------\n\t\t- **ManageFlashcardsMainRow.tsx**\n\t\t\t--------------------------------------------------------------\n\t\t\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\t\t\timport { useContext } from \"react\";\n\t\t\timport { IFrontendFlashcard, convertFrontendFlashcardToFlaschard } from \"../shared/interfaces\";\n\t\t\timport { MdModeEditOutline, MdCancel } from \"react-icons/md\";\n\t\t\timport { RiDeleteBin6Line } from \"react-icons/ri\";\n\t\t\timport { AppContext } from \"../AppContext\";\n\n\t\t\tinterface IProps {\n\t\t\t\tfrontendFlashcard: IFrontendFlashcard;\n\t\t\t}\n\n\t\t\texport const ManageFlashcardsMainRow = ({ frontendFlashcard } : IProps) => {\n\t\t\t\tconst { frontendFlashcards, setFrontendFlashcards, deleteFlashcard } =\n\t\t\t\t\tuseContext(AppContext);\n\n\t\t\t\tconst handleDeleteFlashcard = (frontendFlashcard: IFrontendFlashcard) => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst flashcard =\n\t\t\t\t\t\t\t\tconvertFrontendFlashcardToFlaschard(frontendFlashcard);\n\t\t\t\t\t\t\tdeleteFlashcard(flashcard);\n\t\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\t\tconsole.log(`${e.message}`);\n\t\t\t\t\t\t\talert(\n\t\t\t\t\t\t\t\t\"We're sorry, your flashcard cannot be saved at this time. Try again later, or contact 2342-234-23343.\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t};\n\n\t\t\t\tconst toggleIsDeletingFlashcard = (\n\t\t\t\t\tfrontendFlashcard: IFrontendFlashcard\n\t\t\t\t) => {\n\t\t\t\t\tfrontendFlashcard.userIsDeleting = !frontendFlashcard.userIsDeleting;\n\t\t\t\t\tsetFrontendFlashcards(structuredClone(frontendFlashcards));\n\t\t\t\t};\n\n\t\t\t\treturn (\n\t\t\t\t\t<tr\n\t\t\t\t\t\tclassName={frontendFlashcard.userIsDeleting ? \"deleting\" : \"\"}\n\t\t\t\t\t\tkey={frontendFlashcard.suuid}\n\t\t\t\t\t>\n\t\t\t\t\t\t<td>{frontendFlashcard.suuid}</td>\n\t\t\t\t\t\t<td>{frontendFlashcard.category}</td>\n\t\t\t\t\t\t<td>{frontendFlashcard.front}</td>\n\t\t\t\t\t\t<td>{frontendFlashcard.back}</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div className=\"flex gap-1\">\n\t\t\t\t\t\t\t\t{frontendFlashcard.userIsDeleting ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<RiDeleteBin6Line\n\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\thandleDeleteFlashcard(frontendFlashcard)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"finalDelete cursor-pointer hover:text-red-900\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<MdCancel\n\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\ttoggleIsDeletingFlashcard(frontendFlashcard)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer hover:text-green-900\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<MdModeEditOutline className=\"cursor-pointer hover:text-green-900\" />\n\t\t\t\t\t\t\t\t\t\t<RiDeleteBin6Line\n\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\ttoggleIsDeletingFlashcard(frontendFlashcard)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer hover:text-red-900\"\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t);\n\t\t\t};\t\n\t\t\t--------------------------------------------------------------\n- **>>> 3. Enable user to edit a flashcard**\n\t- add **useIsEditing** on frontend flashcard interface\n\t\t- **interfaces.ts**\n\t\t\t-----------------------------------------------------\n\t\t\texport interface IFrontendFlashcard extends IFlashcard {\n\t\t\t\tuserIsDeleting: boolean;\n\t\t\t\tuserIsEditing: boolean;\n\t\t\t}\n\n\t\t\texport const convertFlashcardToFrontendFlaschard = (flashcard: IFlashcard): IFrontendFlashcard => {\n\t\t\t\treturn {\n\t\t\t\t\tsuuid: flashcard.suuid,\n\t\t\t\t\tcategory: flashcard.category,\n\t\t\t\t\tfront: flashcard.front,\n\t\t\t\t\tback: flashcard.back,\n\t\t\t\t\tuserIsDeleting: false,\n\t\t\t\t\tuserIsEditing: false\n\t\t\t\t}\n\t\t\t} \n\t\t\t-----------------------------------------------------\n\t\t- **AppContext.tsx** \n\t\t\t--------------------------------------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(`${backendUrl}/api/flashcards`);\n\t\t\t\t\tconst _flashcards = response.data;\n\n\t\t\t\t\tconst _frontendFlashcards: IFrontendFlashcard[] = [];\n\t\t\t\t\tfor (const _flashcard of _flashcards) {\n\t\t\t\t\t\tconst _frontendFlashcard: IFrontendFlashcard = {\n\t\t\t\t\t\t\t..._flashcard,\n\t\t\t\t\t\t\tuserIsDeleting: false,\n\t\t\t\t\t\t\tuserIsEditing: false\n\t\t\t\t\t\t};\n\t\t\t\t\t\t_frontendFlashcards.push(_frontendFlashcard);\n\t\t\t\t\t}\n\t\t\t\t\tsetFrontendFlashcards(_frontendFlashcards);\n\t\t\t\t})();\n\t\t\t}, []);\n\t\t\t--------------------------------------------------------\n\t- **ManageFlashcardsMainRow.tsx**\n\t\t--------------------------------------------------------------\t\n\t\tconst toggleIsEditingFlashcard = (\n\t\t\tfrontendFlashcard: IFrontendFlashcard\n\t\t) => {\n\t\t\tfrontendFlashcard.userIsEditing = !frontendFlashcard.userIsEditing;\n\t\t\tconsole.log(\"toggling\");\n\t\t\tsetFrontendFlashcards(structuredClone(frontendFlashcards));\n\t\t};\t\t\n\n\t\t{frontendFlashcards.map((frontendFlashcard) => {\n\t\t\treturn (\n\t\t\t\t<React.Fragment key={frontendFlashcard.suuid}>\n\t\t\t\t\t{frontendFlashcard.userIsEditing ? (\n\t\t\t\t\t\t<ManageFlashcardsEditRow\n\t\t\t\t\t\t\tfrontendFlashcard={\n\t\t\t\t\t\t\t\tfrontendFlashcard\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttoggleIsEditingFlashcard={\n\t\t\t\t\t\t\t\ttoggleIsEditingFlashcard\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ManageFlashcardsMainRow\n\t\t\t\t\t\t\tfrontendFlashcard={\n\t\t\t\t\t\t\t\tfrontendFlashcard\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttoggleIsEditingFlashcard={\n\t\t\t\t\t\t\t\ttoggleIsEditingFlashcard\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t})}\n\t\t--------------------------------------------------------------\t\n\t- **ManageFlashcardsMainRow.tsx**\n\t\t--------------------------------------------------------------\t\n\t\tinterface IProps {\n\t\t\tfrontendFlashcard: IFrontendFlashcard;\n\t\t\ttoggleIsEditingFlashcard: (frontendFlashcard: IFrontendFlashcard) => void;\n\t\t}\t\t\n\n\t\t<MdModeEditOutline onClick={() => toggleIsEditingFlashcard(frontendFlashcard)} className=\"cursor-pointer hover:text-green-900\" />\n\t\t--------------------------------------------------------------\t\n\t- **ManageFlashcardsEditRow.tsx**\n\t\t--------------------------------------------------------------\t\n\t\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\t\timport { ChangeEvent, useContext } from \"react\";\n\t\timport { IFrontendFlashcard, convertFrontendFlashcardToFlaschard } from \"../shared/interfaces\";\n\t\t// import { MdModeEditOutline, MdCancel } from \"react-icons/md\";\n\t\t// import { RiDeleteBin6Line } from \"react-icons/ri\";\n\t\timport { AppContext } from \"../AppContext\";\n\t\timport { MdCancel } from \"react-icons/md\";\n\t\timport { FaSave } from \"react-icons/fa\";\n\n\t\tinterface IProps {\n\t\t\tfrontendFlashcard: IFrontendFlashcard;\n\t\t\ttoggleIsEditingFlashcard: (frontendFlashcard: IFrontendFlashcard) => void;\n\t\t}\n\n\t\texport const ManageFlashcardsEditRow = ({\n\t\t\tfrontendFlashcard,\n\t\t\ttoggleIsEditingFlashcard,\n\t\t}: IProps) => {\n\t\t\tconst { frontendFlashcards, setFrontendFlashcards, saveFlashcard } =\n\t\t\t\tuseContext(AppContext);\n\n\t\t\tconst handleSaveFlashcard = (frontendFlashcard: IFrontendFlashcard) => {\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst flashcard =\n\t\t\t\t\t\t\tconvertFrontendFlashcardToFlaschard(frontendFlashcard);\n\t\t\t\t\t\tconst response = await saveFlashcard(flashcard);\n\t\t\t\t\t\tif (response.message === \"ok\") {\n\t\t\t\t\t\t\ttoggleIsEditingFlashcard(frontendFlashcard);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\tconsole.log(`${e.message}`);\n\t\t\t\t\t\talert(\n\t\t\t\t\t\t\t\"We're sorry, your flashcard cannot be saved at this time. Try again later, or contact 2342-234-23343.\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t};\n\n\t\t\tconst handleChangeFrontendFlashcardField = (\n\t\t\t\te: ChangeEvent<HTMLInputElement>,\n\t\t\t\tfield: string\n\t\t\t) => {\n\t\t\t\tconst value = e.target.value;\n\t\t\t\tswitch (field) {\n\t\t\t\t\tcase \"category\":\n\t\t\t\t\t\tfrontendFlashcard.category = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"front\":\n\t\t\t\t\t\tfrontendFlashcard.front = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"back\":\n\t\t\t\t\t\tfrontendFlashcard.back = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsetFrontendFlashcards(structuredClone(frontendFlashcards));\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<tr\n\t\t\t\t\tclassName={frontendFlashcard.userIsEditing ? \"editing\" : \"\"}\n\t\t\t\t\tkey={frontendFlashcard.suuid}\n\t\t\t\t>\n\t\t\t\t\t<td>{frontendFlashcard.suuid}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={frontendFlashcard.category}\n\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\thandleChangeFrontendFlashcardField(e, \"category\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={frontendFlashcard.front}\n\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\thandleChangeFrontendFlashcardField(e, \"front\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={frontendFlashcard.back}\n\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\thandleChangeFrontendFlashcardField(e, \"back\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<div className=\"flex gap-1\">\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<FaSave\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\thandleSaveFlashcard(frontendFlashcard)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"finalDelete cursor-pointer hover:text-green-900\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<MdCancel\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\ttoggleIsEditingFlashcard(frontendFlashcard)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"cursor-pointer hover:text-red-900\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t);\n\t\t};\n\t\t--------------------------------------------------------------\t\n\t- **AppContext.tsx**\n\t\t--------------------------------------------------------------\t\n\t\tsaveFlashcard: (flashcard: IFlashcard) => Promise<IPromiseResolution>;\n\n\t\tconst saveFlashcard = async (flashcard: IFlashcard) => {\n\t\t\treturn new Promise<IPromiseResolution>((resolve, reject) => {\n\t\t\t\tconst headers = {\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t};\n\t\t\t\t(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await axios.put(\n\t\t\t\t\t\t\t`${backendUrl}/api/flashcards`,\n\t\t\t\t\t\t\tflashcard,\n\t\t\t\t\t\t\t{ headers }\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\tconst _flashcard: IFlashcard = response.data;\n\t\t\t\t\t\t\tconst _frontendFlashcard =\n\t\t\t\t\t\t\t\tconvertFlashcardToFrontendFlaschard(_flashcard);\n\t\t\t\t\t\t\tconst frontendFlashcard = frontendFlashcards.find(\n\t\t\t\t\t\t\t\t(m) => m.suuid === _frontendFlashcard.suuid\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (frontendFlashcard) {\n\t\t\t\t\t\t\t\tfrontendFlashcard.category =\n\t\t\t\t\t\t\t\t\t_frontendFlashcard.category;\n\t\t\t\t\t\t\t\tfrontendFlashcard.front = _frontendFlashcard.front;\n\t\t\t\t\t\t\t\tfrontendFlashcard.back = _frontendFlashcard.back;\n\t\t\t\t\t\t\t\tsetFrontendFlashcards(structuredClone(frontendFlashcards));\n\t\t\t\t\t\t\t\tresolve({ message: \"ok\" });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\t\tmessage: `ERROR: edited flashcard not found (${_frontendFlashcard.suuid})`,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\tmessage: `ERROR: status code ${response.status}`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\treject({\n\t\t\t\t\t\t\tmessage: `ERROR: ${e.message}`,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t});\n\t\t};\n\t\t--------------------------------------------------------------\t\n\t- **index.scss**\n\t\t--------------------------------------------------------------\t\n\t\t&.editing {\n\t\t\t$saveColor: rgb(8, 77, 15);\n\t\t\ttd {\n\t\t\t\tbackground-color: rgb(117, 179, 101);\n\t\t\t\tcolor: #555;\n\t\t\t\t.finalDelete {\n\t\t\t\t\tcolor:$saveColor; \n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tcolor: darken($saveColor, 5%)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t--------------------------------------------------------------\t\n- **>>> 4. Fix cancel so that it can revert to the original values of the flashcard**\n\t- BUG: \n\t\t- if you click the edit butt\n\t\t- make some changes\n\t\t- click cancel edit\n\t\t- then click edit again\n\t\t- your changes are still there\n\t- SOLUTION:\n\t\t- when loading the flashcards, save a copy of all the editable fields in a field called \"original\"\n\t\t- then use this to reset the flashcard\n\t- **interfaces.ts**\n\t\t------------------------------------------\n\t\texport interface IFrontendFlashcard extends IFlashcard {\n\t\t\tuserIsDeleting: boolean;\n\t\t\tuserIsEditing: boolean;\n\t\t\toriginalValues: {\n\t\t\t\tcategory: string;\n\t\t\t\tfront: string;\n\t\t\t\tback: string;\n\t\t\t}\n\t\t}\n\n\t\texport const convertFlashcardToFrontendFlaschard = (flashcard: IFlashcard): IFrontendFlashcard => {\n\t\t\treturn {\n\t\t\t\tsuuid: flashcard.suuid,\n\t\t\t\tcategory: flashcard.category,\n\t\t\t\tfront: flashcard.front,\n\t\t\t\tback: flashcard.back,\n\t\t\t\tuserIsDeleting: false,\n\t\t\t\tuserIsEditing: false,\n\t\t\t\toriginalValues: {\n\t\t\t\t\tcategory: flashcard.category,\n\t\t\t\t\tfront: flashcard.front,\n\t\t\t\t\tback: flashcard.back,\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\t------------------------------------------\n\t- **AppContext.ts**\n\t\t------------------------------------------\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\tconst response = await axios.get(`${backendUrl}/api/flashcards`);\n\t\t\t\tconst _flashcards = response.data;\n\n\t\t\t\tconst _frontendFlashcards: IFrontendFlashcard[] = [];\n\t\t\t\tfor (const _flashcard of _flashcards) {\n\t\t\t\t\tconst _frontendFlashcard: IFrontendFlashcard = {\n\t\t\t\t\t\t..._flashcard,\n\t\t\t\t\t\tuserIsDeleting: false,\n\t\t\t\t\t\tuserIsEditing: false,\n\t\t\t\t\t\toriginalValues: {\n\t\t\t\t\t\t\tcategory: _flashcard.category,\n\t\t\t\t\t\t\tfront: _flashcard.front,\n\t\t\t\t\t\t\tback: _flashcard.back,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\t_frontendFlashcards.push(_frontendFlashcard);\n\t\t\t\t}\n\t\t\t\tsetFrontendFlashcards(_frontendFlashcards);\n\t\t\t})();\n\t\t}, []);\n\n\t\tif (frontendFlashcard) {\n\t\t\tfrontendFlashcard.category =\n\t\t\t\t_frontendFlashcard.category;\n\t\t\tfrontendFlashcard.front = _frontendFlashcard.front;\n\t\t\tfrontendFlashcard.back = _frontendFlashcard.back;\n\t\t\tfrontendFlashcard.originalValues = {\n\t\t\t\tcategory: _flashcard.category,\n\t\t\t\tfront: _flashcard.front,\n\t\t\t\tback: _flashcard.back,\n\t\t\t};\n\t\t\tsetFrontendFlashcards(\n\t\t\t\tstructuredClone(frontendFlashcards)\n\t\t\t);\n\t\t\tresolve({ message: \"ok\" });\n\t\t} else {\n\t\t\treject({\n\t\t\t\tmessage: `ERROR: edited flashcard not found (${_frontendFlashcard.suuid})`,\n\t\t\t});\n\t\t}\t\t\n\t\t------------------------------------------\n\t- **PageManageFlashcards.ts**\n\t\t------------------------------------------\n\t\tconst toggleIsEditingFlashcard = (\n\t\t\tfrontendFlashcard: IFrontendFlashcard\n\t\t) => {\n\t\t\tfrontendFlashcard.userIsEditing = !frontendFlashcard.userIsEditing;\n\t\t\tif (!frontendFlashcard.userIsEditing) {\n\t\t\t\tfrontendFlashcard.category = frontendFlashcard.originalValues.category;\n\t\t\t\tfrontendFlashcard.front = frontendFlashcard.originalValues.front;\n\t\t\t\tfrontendFlashcard.back = frontendFlashcard.originalValues.back;\n\t\t\t}\n\t\t\tsetFrontendFlashcards(structuredClone(frontendFlashcards));\n\t\t};\t\t\n\t\t------------------------------------------\n\t- everything now works:#gif#thestep3finished","points":20,"extras":"","systemWhenCreated":"2024-01-09 15:29:32","systemWhoCreated":"systemUnknown"},{"id":808,"category":"Postgres","title":"Notes on Brian Holt's Complete Intro to SQL & PostgreSQL course","body":"- info\n\t- course is here\n\t\t- https://frontendmasters.com/courses/sql\n\t- Brian's notes\n\t\t- https://sql.holt.courses\n\t- Repo\n\t\t- https://github.com/btholt/complete-intro-to-sql\n\t- idCode\n\t\t- course-postgres\n- https://frontendmasters.com/courses/sql/introduction - 2024-01-10 01:47:16\n\t- will be using Node\n\t- if it is your first programming course it will be difficult\n\t- 8 GB of RAM\n\t- we use Docker, don't need to know it\n\t- this course is about many databases\n\t\t- https://frontendmasters.com/courses/databases\n\t- has been teaching at Frontend Masters for 10 years\n\t- when you teach, you have to reduce your knowledge down to a common vocabulary\n- https://frontendmasters.com/courses/sql/sql-setup-with-docker - 2024-01-10 01:57:16\n\t- \"If you don't have a prefered flavor of Docker, you should use Docker Desktop since it is by far the easiest one to use.\" //quote\n\t- we will be using Postgres 14\n\t\t- today current version is 16\n\t- `docker pull postgres:14`##docksdkjfpull\n\t- `docker pull btholt/complete-intro-to-sql`##thworkforjsbt\n\t- `docker run -e POSTGRES_PASSWORD=lol --name=pg --rm -d -p 5432:5432 postgres:14`##justgotthsijs\n\t- that's what he gets as well##thatswhatjsk\n\t- `docker ps`##thecokps\n\t- `docker kill pg` will delete everything that you've done\n\t- `docker exec -u postgres -it pg psql`##connectstoposgres\n\t\t- psql is the client to run queries against the database\n\t- `\\l`##backlsss\n\t- `exit` to get out##exitotosdj\n- https://frontendmasters.com/courses/sql/sql-overview-creating-a-database\n\t- nnn","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-01-10 02:14:37","systemWhoCreated":"systemUnknown"},{"id":809,"category":"CRUD React Frontend","title":"LearnApp Part 4: Deployment to Vercel using environment variables for local CRUD site and online read-only site","body":"- **background**\n\t- this howto is **Part 4** of the **LearnApp project**\n\t\t- LearnApp project: https://tanguay-eu.vercel.app/howtos/805\n\t- **what we have built so far in this app**\n\t\t- in [PART 1](https://tanguay-eu.vercel.app/howtos/804) we\n\t\t\t- implemented the full CRUD backend with Node/Express which serves flashcards via its **/api/flashcards** URL\n\t\t\t- we also quickly set up a based Vite-React frontend with menu and mock pages\n\t\t- in [PART 2](https://tanguay-eu.vercel.app/howtos/806) we developed the **frontend**\n\t\t\t- displayed flashcards on **Manage Flashcards** page\n\t\t\t- enabled the user to be able to **add a flashcard**\n\t\t- in [PART 3](https://tanguay-eu.vercel.app/howtos/807) we further developed the **frontend**\n\t\t\t- enabled user to **delete a flashcard** and **edit a flashcard**\n\t\t\t- we also **refactored** the code into multiple components\n\t- now in **PART 4** we will publish the application at Vercel\n\t\t- set up development/production modes so that \n\t\t\t- (1) when app runs locally, user can edit the JSON files (database) via the interface\n\t\t\t- (2) user can then publish the site at Vercel which imports the JSON files\n\t- **starting code for this step is here**\n\t\t- see finishing code for [PART 3](https://tanguay-eu.vercel.app/howtos/807)\t\t\n\t- **finishing code for this step is here**\n\t\t- https://github.com/edwardtanguay/et401-learnapp - 2024-01-10 preparation\n\t\t- https://github.com/edwardtanguay/et402-learnapp - 2024-01-11 live-coding\n\t- **site is online here**\n\t\t- https://et401-learnapp.vercel.app/welcome\n\t- **online site after finishing this howto works like this**#gif#flashcardsnowvver\n- **>>> 1. Create environment variable so that site knows if it exists locally or at Vercel**\n\t- this application is local full-stack crud and online read-only CDN\n\t\t- that means when the app is running **on your local machine, you can edit the database** (JSON files) \n\t\t- but when you publish the code to **Vercel**, the site will run from a CDN without a backend, and will hence be **read-only**\n\t\t- this means at Vercel that **some pages will not be visable** and **some functionality will not be available**\n\t- therefore **the site needs to know where it is**\n\t\t- for this we will make an **environment variable** called **VITE_ENV**\n\t\t- all environment variables used by a Vite website need to begin with **VITE_**\n\t\t- when the site is running on your **local machine**, it will equal **development**\n\t\t- when the site is running at **Vercel**, it will equal **production**\n\t- environment variables are stored in a **.env** file in the **root directory**\n\t\t- .env files will also contain sensitive information such as database connections strings\n\t\t- therefore .env files should never be checked into your GitHub repository\n\t\t- that is why we always list **.env** in the **.gitignore** files\n\t\t- at hosting providers like **Vercel**, environment variables are entered on the web usually in the **settings section**\n\t\t- this is how you can have a different value for e.g. **VITE_ENV** locally than you have for the same variable at Vercel##envfilekasdjf\n\t- let's create an environment variable and display it on the welcome screen so we can see that it has different value on our local machine than on at Vercel\n\t\t- make sure **.gitignore** file lists **.env**##thenvfgit\n\t\t- create **.env** file in the root directory - **note: no quotation marks**\n\t\t\t---------------------------------------\n\t\t\tVITE_ENV = development\n\t\t\t---------------------------------------\n\t\t- create a variable called **siteEnvironment** which reads VITE_ENV and makes it available in AppContext\n\t\t\t- **AppContext.tsx**\n\t\t\t\t----------------------------------------------------\n\t\t\t\tinterface IAppContext {\n\t\t\t\t\tfrontendFlashcards: IFrontendFlashcard[];\n\t\t\t\t\tsetFrontendFlashcards: (frontendFlashcards: IFrontendFlashcard[]) => void;\n\t\t\t\t\tsaveAddFlashcard: (newFlashcard: INewFlashcard) => Promise<IPromiseResolution>;\n\t\t\t\t\tdeleteFlashcard: (flashcard: IFlashcard) => Promise<IPromiseResolution>;\n\t\t\t\t\ttoggleRowEditing: (frontendFlashcard: IFrontendFlashcard) => void;\n\t\t\t\t\tsaveEditFlashcard: (flashcard: IFlashcard) => Promise<IPromiseResolution>;\n\t\t\t\t\tsiteEnvironment: string;\n\t\t\t\t}\n\n\t\t\t\tconst siteEnvironment = import.meta.env.VITE_ENV;\n\t\t\t\t----------------------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t--------------------------------------------------\n\t\t\timport { useContext } from \"react\";\n\t\t\timport { AppContext } from \"../AppContext\";\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst { siteEnvironment } = useContext(AppContext);\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>This is the welcome page.</p>\n\t\t\t\t\t\t<p>This site's environment is: <b>{siteEnvironment}</b></p>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t\t--------------------------------------------------\n\t\t- when you change an environment variable, you need to restart your site\n\t\t\t- but Vite seems to take care of that for us now:##vitetakjcare\n\t\t- you now see that your site knows it is on your local machine:##onlocksjfiste222\n\t\t- commit and push your changes to GitHub\n\t\t\t- note that after you push to GitHub, your **.env** file is not on the server, since you listed it in your **.gitignore** file##noendsfj\n\t\t- publish site at Vercel\n\t\t\t- go to https://vercel.com\n\t\t\t- Add New > Project > Import##tjeverimpo\n\t\t\t- **Add** the environment variable and **deploy**:##thedeploysonvercel\n\t- your website at Vercel knows it is in the production environment##onlineprodujdud222\n- **>>> 2. Understand the difference between your local site and your online site**\n\t- note: the **Manage Flashcards** page on your Vercel site *appears* to work\n\t\t- the reason is that in our AppContext code, which is running at Vercel, we have our **local backend URL** saved\n\t\t- if view from anyone else's machine, this page on your Vercel site will not be able to get any flashcards\n\t\t\t- because on their machine, they have no API running on port 4206\n\t\t- if you **stop your local site** (CTRL-C in terminal) so that nothing is running on port 4206 on your machine, then your Vercel site will not work##itappearstowork\n\t- we could, of course, host a backend API at Render or some other hosting provider, and change our backend URL to that API when running at Vercel\n\t\t- this is how, in fact, distributed applications work on the Internet\n\t\t- but to do this, we would have to **implement full security** on our backend such as authentication, authorization, hashing passwords, data verification, data cleansing, JWT tokens or session/cookies, etc. in order to **protect our POST, PUT, PATCH and DELETE routes** which would be exposed to the open Internet for all bots and ill-intended people to freely access, thus filling our database with spam or deleting it entirely\n\t- but our current application has the intention to be the following\n\t\t- on **local computer**: a full-stack CRUD application in which we can easily create, delete and edit data via website pages and forms\n\t\t- at **Vercel**: a high-security, high-speed but read-only site\n\t\t- this is not only (1) a **useful type of application**, it is also (2) a good way to **practice the complexity of full-stack API web development** without having to yet deal with databases and online security\n\t- therefore we need to **hide all CRUD-related pages when the site is at Vercel**\n\t\t- this is why we created the environment variable\n- **>>> 3. Hide Manage Flashcards page when site is at Vercel**\n\t- since our **Manage Flashcards** page does not work at Vercel, we need to hide it\n\t- to do this, we simply need to put a conditional statement in our Nav and routing page so that the page is not accessible nor shown in the menu, when the site is at Vercel\n\t\t- **interfaces.ts**\n\t\t\t-----------------------------------------------------\n\t\t\texport type ISiteEnvironment = \"development\" | \"production\";\n\t\t\t-----------------------------------------------------\n\t\t- **Nav.tsx**\n\t\t\t-----------------------------------------------------\n\t\t\tconst { siteEnvironment } = useContext(AppContext);\n\n\t\t\t{siteEnvironment === \"development\" && (\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink to=\"/manage-flashcards\">\n\t\t\t\t\t\tManage Flashcards\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t)}\n\t\t\t-----------------------------------------------------\n\t\t- **main.tsx**\n\t\t\t-----------------------------------------------------\n\t\t\tconst siteEnvironment: ISiteEnvironment = import.meta.env.VITE_ENV;\n\n\t\t\tlet children = [\n\t\t\t\t{\n\t\t\t\t\tpath: \"/welcome\",\n\t\t\t\t\telement: <PageWelcome />,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: \"manage-flashcards\",\n\t\t\t\t\telement: <PageManageFlashcards />,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: \"about\",\n\t\t\t\t\telement: <PageAbout />,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\telement: <Navigate to=\"/welcome\" replace />,\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tif (siteEnvironment === \"production\") {\n\t\t\t\tconst forbiddenPages = [\"manage-flashcards\"];\n\t\t\t\tchildren = children.filter((m) => !forbiddenPages.includes(m.path));\n\t\t\t}\n\n\t\t\tconst router = createBrowserRouter([\n\t\t\t\t{\n\t\t\t\t\tpath: \"/\",\n\t\t\t\t\terrorElement: <Page404 />,\n\t\t\t\t\telement: <App />,\n\t\t\t\t\tchildren,\n\t\t\t\t},\n\t\t\t]);\n\t\t\t-----------------------------------------------------\n\t\t- **AppContext.tsx**\n\t\t\t-----------------------------------------------------\n\t\t\tsiteEnvironment: ISiteEnvironment;\n\t\t\t-----------------------------------------------------\n\t- push to GitHub and check to see that at Vercel that the **Manage Flashcards** page \n\t\t- does not show in the nav bar##notinnavbarkj\n\t\t- is not accessible via the URL##notaccadatlakdj\n- **>>> 4. Create a Flashcards page that is accessible both local and at Vercel**\n\t- first we will simply make a **Flashcards** page which lists all the flashcards so we can see if flashcards can be displayed on our local computer and at Vercel\n\t\t- for this we will not get the flashcards from the backend, but instead import them directly \n\t- make Flashcards page\n\t\t- **Nav.tsx**\n\t\t\t------------------------------------------\n\t\t\t<li>\n\t\t\t\t<NavLink to=\"/flashcards\">Flashcards</NavLink>\n\t\t\t</li>\n\t\t\t------------------------------------------\n\t\t- **PageFlashcards.tsx**\n\t\t\t------------------------------------------\n\t\t\texport const PageFlashcards = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<p>This is the flashcards page.</p>\n\t\t\t\t)\n\t\t\t}\n\t\t\t------------------------------------------\n\t\t- **main.tsx**\n\t\t\t------------------------------------------\n\t\t\t{\n\t\t\t\tpath: \"flashcards\",\n\t\t\t\telement: <PageFlashcards />,\n\t\t\t},\t\t\t\n\t\t\t------------------------------------------\n\t- import and display flashcards\n\t\t- **PageFlashcards.tsx**\n\t\t\t--------------------------------------------\n\t\t\timport db from \"../../backend/data/db.json\";\n\n\t\t\tconst flashcards = db.flashcards;\n\n\t\t\texport const PageFlashcards = () => {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>There are {flashcards.length} flashcards.</p>\n\t\t\t\t\t\t<ul className=\"list-disc ml-4 mt-4\">\n\t\t\t\t\t\t\t{flashcards.map((flashcard) => {\n\t\t\t\t\t\t\t\treturn <li key={flashcard.suuid}>{flashcard.front}</li>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\n\t\t\t--------------------------------------------\n\t- commit and push changes to GitHub\n\t- you see that both local and online sites have the Flashcard page and show flashcards\n\t\t- even if you turn off your backend, it works at Vercel##rworksjonboth\n- **>>> 5. Make flashcards interactive**\n\t- **interfaces.ts**\n\t\t----------------------------------------\n\t\texport interface ITestingFlashcard extends IFlashcard {\n\t\t\tbackIsShowing: boolean;\n\t\t}\n\n\t\texport const convertFlashcardToTestingFlaschard = (flashcard: IFlashcard): ITestingFlashcard => {\n\t\t\treturn {\n\t\t\t\t...flashcard,\n\t\t\t\tbackIsShowing: false\n\t\t\t}\n\t\t}\n\t\t----------------------------------------\n\t- **PageFlashcards.tsx**\n\t\t------------------------------------------\n\t\timport { useState } from \"react\";\n\t\timport db from \"../../backend/data/db.json\";\n\t\timport {\n\t\t\tITestingFlashcard,\n\t\t\tconvertFlashcardToTestingFlaschard,\n\t\t} from \"../shared/interfaces\";\n\n\t\tconst _flashcards = db.flashcards;\n\t\tconst _testingFlashcards: ITestingFlashcard[] = [];\n\t\tfor (const _flashcard of _flashcards) {\n\t\t\tconst testingFlashcard: ITestingFlashcard =\n\t\t\t\tconvertFlashcardToTestingFlaschard(_flashcard);\n\t\t\t_testingFlashcards.push(testingFlashcard);\n\t\t}\n\n\t\texport const PageFlashcards = () => {\n\t\t\tconst [testingFlashcards, setTestingFlashcards] =\n\t\t\t\tuseState<ITestingFlashcard[]>(_testingFlashcards);\n\t\t\tconst handleTestingFlashcardToggle = (\n\t\t\t\ttestingFlashcard: ITestingFlashcard\n\t\t\t) => {\n\t\t\t\ttestingFlashcard.backIsShowing = !testingFlashcard.backIsShowing;\n\t\t\t\tsetTestingFlashcards(structuredClone(testingFlashcards));\n\t\t\t};\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>There are {testingFlashcards.length} flashcards.</p>\n\t\t\t\t\t<div className=\"list-disc mt-4\">\n\t\t\t\t\t\t{testingFlashcards.map((testingFlashcard) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"mb-5 w-[40rem]\"\n\t\t\t\t\t\t\t\t\tkey={testingFlashcard.suuid}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\thandleTestingFlashcardToggle(\n\t\t\t\t\t\t\t\t\t\t\t\ttestingFlashcard\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tclassName=\"bg-slate-600 p-3 rounded-t-lg text-gray-300 cursor-pointer\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"font-semibold text-yellow-200\">{testingFlashcard.category}</span> - {testingFlashcard.front}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{testingFlashcard.backIsShowing && (\n\t\t\t\t\t\t\t\t\t\t<div className=\"bg-slate-200 p-3 rounded-b-lg\">\n\t\t\t\t\t\t\t\t\t\t\t{testingFlashcard.back}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\t\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t------------------------------------------\n\t- flashcards work like this:#gif#flashcardsnowvver\n- **>>> 6. Understand the security level of this site**\n\t- **low security**\n\t\t- this kind of site should not have any sensitive data in the JSON database, even if you hide it on the site\n\t\t\t- the reason is that all data in the JSON file \"database\" is sent down as JavaScript to the browser from Vercel\n\t\t\t- and can be discovered by inspecting the source code of the site\n\t\t\t- this is because when the site is published to Vercel, it runs `npm run build` which converts the JSON file to a JavaScript object and sends it down to the browser with the rest of the JavaScript, HTML and CSS that makes up the site##thesidksivoers\n\t\t- this means that if you create a site that e.g. hides data based on a password, even if the password is in an environment variable and hence undiscoverable, all of the hidden data could theoretically be discovered by inspecting the page source\n- **>>> 7. localStorage as writable database**\n\t- if you wanted to allow users to be able to save data on the site\n\t\t- e.g. in the case of our current site, whether or not they want to be tested on a flashcard again or not\n\t\t- you could easily save this data in localStorage\n\t\t- which is available to them when they return to the site with the same browser or smart phone","points":20,"extras":"","systemWhenCreated":"2024-01-10 16:54:54","systemWhoCreated":"systemUnknown"},{"id":810,"category":"CRUD React Frontend","title":"LearnApp Part 5: API middleware and routing, and error handling","body":"- **background**\n\t- this howto is **Part 5** of the **LearnApp project**\n\t\t- LearnApp project: https://tanguay-eu.vercel.app/howtos/805\n\t- **what we have built so far in this app**\n\t\t- in [PART 1](https://tanguay-eu.vercel.app/howtos/804) we\n\t\t\t- implemented the full CRUD backend with Node/Express which serves flashcards via its **/api/flashcards** URL\n\t\t\t- we also quickly set up a based Vite-React frontend with menu and mock pages\n\t\t- in [PART 2](https://tanguay-eu.vercel.app/howtos/806) we developed the **frontend**\n\t\t\t- displayed flashcards on **Manage Flashcards** page\n\t\t\t- enabled the user to be able to **add a flashcard**\n\t\t- in [PART 3](https://tanguay-eu.vercel.app/howtos/807) we further developed the **frontend**\n\t\t\t- enabled user to **delete a flashcard** and **edit a flashcard**\n\t\t\t- we also **refactored** the code into multiple components\n\t\t- in [PART 4](https://tanguay-eu.vercel.app/howtos/809) we published the application at Vercel\t\t\t\n\t\t\t- we set up development/production modes so that \n\t\t\t\t- (1) when app runs locally, user can edit the JSON files (database) via the interface\n\t\t\t\t- (2) user can then publish the site at Vercel which imports the JSON files\n\t- now in **PART 5** we will look at middleware, routing, and error handling\n\t\t- Express is officially defined as a **routing and middleware web framework**\n\t\t\t- **middleware** refers to **functions that have access to the request and response objects** allowing for the execution of additional logic, processing, or modifications before reaching the final route handler\n\t\t\t\t- two places middleware can run\n\t\t\t\t\t- application level (on every route)\n\t\t\t\t\t- route level (a specific route)\n\t\t\t- **routing** is the process **creating routes to define and manage the flow of incoming HTTP requests** to specific route handlers, enabling a structured and organized API\n\t\t\t- **error handling** involves **using middleware functions to capture and process errors** that occur during the request-response cycle, improving application robustness by addressing issues and sending appropriate responses to clients \n\t\t- in building our API so far, we have already used all of these to some extent\n\t\t\t- **middleware**\n\t\t\t\t- **express.json()** - enables us to send JSON via our requests, e.g. on our **post**, **put** and **patch** routes\n\t\t\t\t- **cors()** - enables our frontend to communicate with our backend without a CORS error##themddislwschon\n\t\t\t- **routing**\n\t\t\t\t- **flashcardRouter.ts**##therouteressalrady\n\t\t\t- **error handling**\n\t\t\t\t- some examples of error handling are in our routes when we check if a flashcard was found, if not, we return an specific error code##onlyerrorshanddj\n\t\t- to learn about **middleware** and add features to our API, we build the following middleware into our application\n\t\t\t- **maintenanceMode**\n\t\t\t\t- application-level middleware\n\t\t\t\t- the ability for you to put the entire API in maintenance mode \n\t\t\t\t- you change a config variable which causes all routes to report that they are in maintenance mode and inform the client when they will be available again\n\t\t\t- **flashcardGetCleanAndValidate** and **flashcardPostCleanAndValidate**\n\t\t\t\t- router-level middleware\n\t\t\t\t- these middlewares are created for specific routes which (1) trim all fields on the request, and (2) make sure they have valid values\n\t\t\t\t- if they the request has values which are invalid, the middleware returns an HTTP error code (400 Bad Request) to the client and does not pass processing onto the route that would otherwise handle this request\n\t\t\t- **errorHandling**\n\t\t\t\t- application-level middleware\n\t\t\t\t- enables us to throw an error anywhere in the application when something unexpected happens\n\t\t\t\t\t- which is then caught by the middleware and returns a proper http response (500 Internal Server Error)\n\t\t\t\t- so instead of seeing error codes, etc. the client receives a message that something went wrong, and they are given information what they can do, e.g. contact a certain person, etc.\n\t\t\t- **logger**\n\t\t\t\t- application-level middleware\n\t\t\t\t- using the npm tools Winston and Morgan, we will log errors, warnings, infos, and debug messages as well as every HTTP request to a log files\n\t\t- to learn about **routing**, we will extend the flashcards route by\n\t\t\t- creating a **flashcardInfoRouter** that serves the following route\n\t\t\t\t- **/api/flashcards/info/logs** - an HTML table showing all the logs entries created by our logging middleware\n\t- **starting code for this step is here**\n\t\t- see finishing code for [PART 4](https://tanguay-eu.vercel.app/howtos/809)\t\t\n\t- **finishing code for this step is here**\n\t\t- https://github.com/edwardtanguay/et500-learnapp - 2024-01-13 howto research\n\t\t- https://github.com/edwardtanguay/et501-learnapp - 2024-01-14 howto preparation\n\t\t- https://github.com/edwardtanguay/et502-learnapp - 2024-01-15 from live-coding\n- **>>> 1. Create maintenanceMode middleware**\n\t- our first middleware in this howto will be a\n\t\t- custom middleware, i.e. that we program ourselves\n\t\t- application-level, i.e. it is run before every route\n\t\t- the purpose of this middleware is to be able to \n\t\t\t- change a config variable **apiStatus** from **live** to **maintenanceMode** \n\t\t\t- provide a date time when the site will be up again\n\t\t\t- which will cause all routes to return a message that the site is down and when it will be up\n\t- create the config file first\n\t\t- **interfaces.ts**\n\t\t\t--------------------------------------------\n\t\t\texport type IApiStatus = {\n\t\t\t\tstatus: \"live\" | \"maintenanceMode\",\n\t\t\t\twhenLiveAgainDateTime: string\n\t\t\t}\n\t\t\t--------------------------------------------\n\t\t- **config.ts**\n\t\t\t-------------------------------------------\n\t\t\texport const apiStatus = (): IApiStatus => {\n\t\t\t\treturn {\n\t\t\t\t\tstatus: \"live\",\n\t\t\t\t\twhenLiveAgainDateTime: \"2024-01-13 18:30:00\"\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------------\n\t\t- install **dayjs** in order to be able to calculate the days\n\t\t\t- `npm i dayjs`\n\t\t- **backend/api/middleware/maintenanceMode.ts**\n\t\t\t-------------------------------------------\n\t\t\timport express from 'express';\n\t\t\timport * as config from '../config';\n\t\t\timport dayjs from 'dayjs';\n\n\t\t\texport const maintenanceMode = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\t\t\tconst { status, whenLiveAgainDateTime } = config.apiStatus();\n\t\t\t\tif (status === \"maintenanceMode\") {\n\t\t\t\t\tconst whenLiveAgainDayjs = dayjs(whenLiveAgainDateTime);\n\t\t\t\t\tconst secondsToGo = whenLiveAgainDayjs.diff(dayjs(), 'seconds') + 60;\n\t\t\t\t\tconst hours = Math.floor(secondsToGo / 3600);\n\t\t\t\t\tconst minutes = Math.floor((secondsToGo % 3600) / 60);\n\t\t\t\t\tconst duration = hours > 0 ? `${hours} hours, ${minutes} minutes` : `${minutes} minutes`;\n\t\t\t\t\tres.header('Retry-After', String(secondsToGo));\n\t\t\t\t\tres.status(503).send(`This API is currently in maintenance mode. Expected up time is ${whenLiveAgainDateTime}. Retry in ${duration}.`)\n\t\t\t\t} else {\n\t\t\t\t\tnext();\n\t\t\t\t}\n\t\t\t}\n\t\t\t-------------------------------------------\n\t\t- **server.ts** - add this middleware just as we have other application-level middleware\n\t\t\t------------------------------------------------\n\t\t\tapp.use(express.json());\n\t\t\tapp.use(cors());\n\t\t\tapp.use(maintenanceMode);\t\t\t\n\t\t\t------------------------------------------------\n\t\t- when you visit any route, you will see this message:##themesaaskdmaint\n\t\t- and if you look at the headers which were sent in the response, you see that a **503 Service Unavailable** was sent\n\t\t\t- notice also that our **Retry-After** is available as a header with the amount of seconds before the service will be back up\n\t\t\t- clients such as our frontend could read this and [gracefully fail](https://en.wikipedia.org/wiki/Graceful_exit) with an informative message to the user, including exactly how long they can expect to wait until they can use the service again\n\t\t\t- and clients that access your API e.g. every 5 minutes to fill their own database with new flashcards, know how long they can stop accessing your service until it is expected to work again##thetrayafterajs\n- **>>> 2. Data-cleansing and validation middleware**\n\t- we want to make sure that data sent to our API is **cleansed**\n\t\t- in the case of our learn app, this merely means that we want to make sure all beginning and ending white spaces are trimmed\n\t- we want to also check for valid syntax of data sent, and reject any invalid inputs\n\t\t- for example, if a client sends an SUUID which \n\t\t\t- is not exactly 6 characters long\n\t\t\t- has invalid characters in it such as a $\n\t\t\t- then it should be rejected with an appropriate HTTP Code (**400 Bad Request**) before it gets to its intended route\n\t- we are going to need a function to validate SUUIDs\n\t\t- **dbtools.ts**\n\t\t\t------------------------------------------\n\t\t\texport const isValidSuuid = (input: string): boolean => {\n\t\t\t\tconst suuidRegex = /^[a-zA-Z0-9]{6}$/;\n\t\t\t\treturn suuidRegex.test(input);\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t- **middleware/flashcardGetCleanAndValidate.ts**\n\t\t---------------------------------------------\n\t\timport express from 'express';\n\t\timport { isValidSuuid } from '../handlers/dbtools';\n\n\t\texport const flashcardGetCleanAndValidate = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tconst suuid = req.params.suuid;\n\n\t\t\tif (suuid.length !== 6) {\n\t\t\t\terrors.push('suuid must be six characters long')\n\t\t\t} else {\n\t\t\t\tif (!isValidSuuid(suuid)) {\n\t\t\t\t\terrors.push('suuid contains invalid characters')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (errors.length > 0) {\n\t\t\t\tres.status(400).json({\n\t\t\t\t\tmessage: \"invalid fields\",\n\t\t\t\t\terrors\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tnext();\n\t\t\t}\n\t\t}\t\t\n\t\t---------------------------------------------\n\t- since these are not **application-level** middleware but rather **route-level** middleware, i.e. created for specific routes only\n\t\t- we add them to the routes themselves\n\t\t- **flashcardRouters.ts**\n\t\t\t-----------------------------------------------------\n\t\t\tflashcardRouter.get('/:suuid', flashcardGetCleanAndValidate, (req, res) => {\n\t\t\t\tconst suuid = req.params.suuid;\n\t\t\t\tconst flashcard = flashcardHandlers.getOneFlashcard(suuid);\n\t\t\t\tif (flashcard) {\n\t\t\t\t\tres.json(flashcard);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(404).json(`Flashcard with suuid \"${suuid}\" not found.`)\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t\t-----------------------------------------------------\n\t- now with Postman, try to get a flashcard with an suuid that is too long, and you will receive a **400 Bad Request** response##longsuuidsd22\n\t- if you include a character that is not allowed in an suuid, you will get this response##thelongksji33\n\t- **middleware/flashcardPostCleanAndValidate.ts**\n\t\t---------------------------------------------------------\n\t\timport express from 'express';\n\n\t\texport const flashcardPostCleanAndValidate = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tif (req.body.category === undefined) {\n\t\t\t\treq.body.category = '';\n\t\t\t\terrors.push('category field missing')\n\t\t\t} else {\n\t\t\t\treq.body.category = req.body.category.trim();\n\t\t\t\tif (req.body.category === '') {\n\t\t\t\t\terrors.push('category field empty')\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (req.body.front === undefined) {\n\t\t\t\treq.body.front = '';\n\t\t\t\terrors.push('front field missing')\n\t\t\t} else {\n\t\t\t\treq.body.front = req.body.front.trim();\n\t\t\t\tif (req.body.front === '') {\n\t\t\t\t\terrors.push('front field empty')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (req.body.back === undefined) {\n\t\t\t\treq.body.back = '';\n\t\t\t\terrors.push('back field missing')\n\t\t\t} else {\n\t\t\t\treq.body.back = req.body.back.trim();\n\t\t\t\tif (req.body.back === '') {\n\t\t\t\t\terrors.push('back field empty')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (errors.length > 0) {\n\t\t\t\tres.status(400).json({\n\t\t\t\t\tmessage: \"invalid fields\",\n\t\t\t\t\terrors\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tnext();\n\t\t\t}\n\t\t}\n\t\t---------------------------------------------------------\n\t- **flashcardRouters.ts**\n\t\t-----------------------------------------------------\n\t\tflashcardRouter.post('/', flashcardPostCleanAndValidate, async (req, res) => {\n\t\t\tconst newFlashcard: INewFlashcard = req.body;\n\t\t\tconst flashcard = await flashcardHandlers.addFlashcard(newFlashcard);\n\t\t\tres.status(201).json(flashcard);\n\t\t});\t\t\n\t\t-----------------------------------------------------\n\t- note now in Postman that all fields will be automatically trimmed##thetrimmjspost\n\t- check in Postman that it returns the appropriate responses, e.g. if you leave out a field##leaveoutfieldjsisj\n- **>>> 3. Error-handling middleware**\n\t- note what happens if you rename db.json file\n\t\t- you get an error in the console saying it can't find the database##theerorjsdbb32\n\t\t- the API route to flashcards reponds with content and a 200 OK##theerorjsdbb322000\n\t- and note what happens if you the db.json file is correct, but you delete some lines in the db.json file to make the JSON invalid\n\t\t- e.g. delete the third line##thbadkjson\n\t\t- the app crashes##andcrashsdkjf\n\t\t- a request to a route gets a connection refused\n\t- we want to fix this vulnerability of our application by making it robust enough to respond gracefully even when our database is either not present or corrupted\n\t- the way we will make our application stable even in the event of a database file, is to:\n\t\t- implement try/catch blocks around critical code which throws an error if something unexpected goes wrong with the database\n\t\t- implement a middleware that catches any thrown error in the application and responds gracefully to the client\n\t- first let's throw an error if the database could not be loaded for some reason\n\t\t- **dbtools.ts** - if database has not data, then return a null\n\t\t\t---------------------------------------------------\n\t\t\texport const getDb = async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst projectBasePath = process.cwd();\n\t\t\t\t\tconst dbPathAndFileName = join(projectBasePath, 'backend/data/db.json');\n\t\t\t\t\tconst adapter = new JSONFile<IDatabase>(dbPathAndFileName);\n\t\t\t\t\tconst db: Low<IDatabase> = new Low<IDatabase>(adapter, {} as IDatabase);\n\t\t\t\t\tawait db.read();\n\t\t\t\t\tif (Object.entries(db.data).length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn db;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------------------------------\n\t\t- **flashcardHandlers.ts** - now in getAllFlashcards(), check if database is null, if so, throw an error\n\t\t\t--------------------------------------------------\n\t\t\texport const getAllFlashcards = () => {\n\t\t\t\tif (db === null) {\n\t\t\t\t\tthrow new Error('ERROR: database is not available');\n\t\t\t\t}\n\t\t\t\treturn db.data.flashcards;\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- so now we see that if we go to a route that fetches data from the database, at least we now catch this unexpected error and the server reports a 500 with a text that we wrote for the situation, in this case, \"ERROR: database is not available\"\n\t\t- we will now create a middleware which catches all errors that are thrown and responds in a more stabile and appropriate manner to the client\n\t\t\t- **server.ts** - **important**: place at **BOTTOM** of file\n\t\t\t\t------------------------------------------------------\n\t\t\t\tapp.use((err: Error, req: express.Request, res: express.Response, next: NextFunction) => {\n\t\t\t\t\tconsole.error(err.message) \n\t\t\t\t\t// TODO: write to logs\n\t\t\t\t\tres.status(500).send('We are currently experiencing technical difficulties. Try again at a later time, or call 423 23423 23 234.')\n\t\t\t\t});\t\t\t\t\n\t\t\t\t------------------------------------------------------\n\t\t- now when you try to access a route that tries to fetch data from the database, this is reported in the console (and later will be written in the logs)##ohedataroravoil\n\t\t- and the API returns a clear message with helpful information\n\t\t\t- note that you could also export this as JSON in order for clients to pass on this data to the frontend user##oherrorcaughtsdf\n\t- in **flashcardHandlers.ts** note now that TypeScript is informing us--rightly--that our db variable could be null##noteevefdb\n\t- so we need to put this if statement that makes sure if our db variable if null in any handler function, an error will be thrown before it is used##putatbeginsofeach\n- **>>> 4. Logging middleware**\n\t- now we want to implement middleware that allows the application to log information\n\t\t- this helps us later debug errors or improve the software by knowing what happened when\n\t\t- we will use [winston](https://www.npmjs.com/package/winston) to be able to log specific kinds of messages such as **errors**, **warnings**, **infos** and **debugging** notes\n\t\t- we will use [morgan](https://www.npmjs.com/package/morgan) to automatically log **every request** that is made to our API\n\t- we will first install and set up **winston**\n\t\t- `npm i winston`\n\t\t- **middleware/logger.ts**\n\t\t\t----------------------------------------------------------\n\t\t\timport winston from 'winston';\n\t\t\tconst { combine, timestamp, json } = winston.format;\n\n\t\t\texport const logger = winston.createLogger({\n\t\t\t\tlevel: process.env.LOG_LEVEL || 'debug',\n\t\t\t\tformat: combine(timestamp(), json()),\n\t\t\t\ttransports: [\n\t\t\t\t\tnew winston.transports.File({\n\t\t\t\t\t\tfilename: 'backend/api/logs/app.log',\n\t\t\t\t\t\tlevel: 'debug',\n\t\t\t\t\t}),\n\t\t\t\t],\n\t\t\t});\t\t\t\n\t\t\t----------------------------------------------------------\n\t\t- **server.ts** - add the logger.error line\n\t\t\t-----------------------------------------------------\n\t\t\tapp.use((err: Error, req: express.Request, res: express.Response, next: NextFunction) => {\n\t\t\t\tconsole.error(err.message)\n\t\t\t\tlogger.error(err.message);\n\t\t\t\tres.status(500).send('We are currently experiencing technical difficulties. Try again at a later time, or call 423 23423 23 234.')\n\t\t\t});\t\n\t\t\t-----------------------------------------------------\n\t\t- test the logger\n\t\t\t- delete a line in db.json to make it invalid\n\t\t\t- start the API with `npm run api`\n\t\t\t- in Postman go to a route that fetches data e.g. \"GET /api/flashcards\" \n\t\t\t- you will see that the API not only displays the error in the console\n\t\t\t- but also logs it in app.log##andlaogsks\n\t\t- that there are five kinds of messages that you can now log, let's test them:\n\t\t\t- **server.ts**\n\t\t\t\t--------------------------------------------------------------------\n\t\t\t\tapp.get('/', (req, res) => {\n\t\t\t\t\tlogger.error('This is some information showing an error.');\n\t\t\t\t\tlogger.warn('Here we are showing a warning.');\n\t\t\t\t\tlogger.info('This is just some info.');\n\t\t\t\t\tlogger.verbose('This is a very long text that has a whole bunch of information. This would be for example a dump of some information that might help in debugging, etc.');\n\t\t\t\t\tlogger.debug('test = 0');\n\t\t\t\t\tres.json({\n\t\t\t\t\t\tappName: \"API for AppLearn version 0.1\"\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\t--------------------------------------------------------------------\n\t\t\t- now go to the **http://localhost:4206** in your browser or Postman so these messages are logged\n\t\t\t- you will see:##onthelevelssad\n\t- next we'll install and set up **morgan**\n\t\t- morgan doesn't log anything, but rather makes it easy to **collect information about each incoming request** to our API\n\t\t- we will set morgan up so that it **uses winston to log its requests** to the winston log file along with our other log entries\n\t\t- install\n\t\t\t- `npm i morgan`\n\t\t\t- `npm i -D @types/morgan` (TypeScript types)\n\t\t- **logger.ts**\n\t\t\t--------------------------------------------------------------\n\t\t\texport const morganRouteLogger = morgan(\n\t\t\t\t(tokens, req, res) => {\n\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\tmethod: tokens.method(req, res),\n\t\t\t\t\t\turl: tokens.url(req, res),\n\t\t\t\t\t\tstatus: tokens.status(req, res),\n\t\t\t\t\t\tcontentLength: String(tokens.res(req, res, 'content-length')),\n\t\t\t\t\t\tresponseTime: tokens['response-time'](req, res),\n\t\t\t\t\t\tremoteAddr: String(req.socket.remoteAddress)\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tstream: {\n\t\t\t\t\t\twrite: (message) => {\n\t\t\t\t\t\t\tconst data = JSON.parse(message);\n\t\t\t\t\t\t\tlogger.http(`incoming-request`, data);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\t--------------------------------------------------------------\n\t\t- **server.ts**\n\t\t\t------------------------------------------------------\n\t\t\tapp.use(morganRouteLogger);\n\t\t\t------------------------------------------------------\n\t\t- with Postman, click on a few routes\n\t\t- look at **app.log** again and you will see a mixture of winston and morgen entries##hhlotsoflogs\n- **>>> 5. Extend the routing and add more routes**\n\t- we already have routes in our API, namely, **server.ts** which loads flashcardRouter\n\t\t---------------------------------------------\n\t\timport { flashcardRouter } from './routers/flashcardRouter';\n\t\tapp.use('/api/flashcards', flashcardRouter);\n\t\t---------------------------------------------\n\t- so that all routes in **flashcardRouters.ts** then get prefixed with **/api/flashcards**\n\t- in order to demonstrate this first, we will further extend this route to **/api/flashcards/info/logs** \n\t\t- which will be an HTML page that shows stats on how our flashcard routes are being used\n\t- **interfaces.ts** - add an interface we will need\n\t\t------------------------------------------------\n\t\texport interface ILogItem {\n\t\t\ttimestamp: string;\n\t\t\tlevel: string;\n\t\t\tmessage: string;\n\t\t\tmethod: string;\n\t\t\tstatus: string;\n\t\t\tremoteAddr: string;\n\t\t\turl: string;\n\t\t\tresponseTime: string;\n\t\t}\t\t\n\t\t------------------------------------------------\n\t- **dbtools.ts** - add some functions we will need\n\t\t------------------------------------------\n\t\texport async function getArrayOfLogObjects(): Promise<ILogItem[]> {\n\t\t\ttry {\n\t\t\t\tconst logFilePathAndFileName = join(process.cwd(), 'backend/api/logs/app.log');\n\t\t\t\tconst data = await fs.promises.readFile(logFilePathAndFileName, 'utf8');\n\t\t\t\tconst logEntries = data.split('\\n').filter(entry => entry.trim() !== '');\n\t\t\t\tconst _logs: ILogItem[] = logEntries.map(log => JSON.parse(log));\n\t\t\t\tconst logs: ILogItem[] = [];\n\t\t\t\tfor (const _log of _logs) {\n\t\t\t\t\tif (_log.url !== '/favicon.ico') {\n\t\t\t\t\t\tconst log = structuredClone(_log);\n\t\t\t\t\t\tlog.method = log.method === undefined ? '' : log.method;\n\t\t\t\t\t\tlog.remoteAddr = log.remoteAddr === undefined ? '' : log.remoteAddr;\n\t\t\t\t\t\tlog.responseTime = log.responseTime === undefined ? '' : log.responseTime;\n\t\t\t\t\t\tlog.status = log.status === undefined ? '' : log.status;\n\t\t\t\t\t\tlog.url = log.url === undefined ? '' : log.url;\n\t\t\t\t\t\tlogs.push(log);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlogs.sort((a, b) => a.timestamp < b.timestamp ? 1 : -1);\n\t\t\t\treturn logs;\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\texport const getLogTextColorByLevel = (level: string) => {\n\t\t\tif (level === 'debug') {\n\t\t\t\treturn '#ccc';\n\t\t\t} else {\n\t\t\t\treturn '#000;'\n\t\t\t}\n\t\t}\n\t\texport const getLogBackgroundColorByLevel = (level: string) => {\n\t\t\tswitch (level) {\n\t\t\t\tcase 'info':\n\t\t\t\t\treturn '#aaa';\n\t\t\t\tcase 'verbose':\n\t\t\t\t\treturn '#ccc';\n\t\t\t\tcase 'warn':\n\t\t\t\t\treturn 'gold';\n\t\t\t\tcase 'http':\n\t\t\t\t\treturn 'lightgreen';\n\t\t\t\tcase 'error':\n\t\t\t\t\treturn 'red';\n\t\t\t\tcase 'debug':\n\t\t\t\t\treturn '#333';\n\t\t\t\tdefault:\n\t\t\t\t\treturn '#fff';\n\t\t\t}\n\t\t}\n\t\t------------------------------------------\n\t- **flashcardInfoRouter.ts**\n\t\t------------------------------------------------\n\t\tflashcardInfoRouter.get('/logs', async (req, res) => {\n\t\t\tconst logs = await getArrayOfLogObjects();\n\t\t\tconsole.log(logs);\n\t\t\tres.send(`\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tfont-family: monospace;\n\t\t\t\t\t}\n\t\t\t\t\ttable {\n\t\t\t\t\t\tborder-spacing: 5px;\n\t\t\t\t\t}\n\t\t\t\t\tth {\n\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t}\n\t\t\t\t\ttd {\n\t\t\t\t\t\tmargin: 10px;\n\t\t\t\t\t\tpadding: 3px;\n\t\t\t\t\t\tvertical-align: top;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<h1>API Logs</h1>\n\t\t\t\t<table>\n\t\t\t\t\t  <thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Level</th>\n\t\t\t\t\t\t<th>Timestamp</th>\n\t\t\t\t\t\t<th>Message</th>\n\t\t\t\t\t\t<th>Method</th>\n\t\t\t\t\t\t<th>URL</th>\n\t\t\t\t\t\t<th>Status</th>\n\t\t\t\t\t\t<th>Remote Address</th>\n\t\t\t\t\t\t<th>Response Time</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t${logs.map(log => {\n\t\t\t\treturn `\n\t\t\t\t\t\t<tr style=\"background-color: ${getLogBackgroundColorByLevel(log.level)}; color: ${getLogTextColorByLevel(log.level)}\">\n\t\t\t\t\t\t\t<td>${log.level}</td>\n\t\t\t\t\t\t\t<td>${log.timestamp}</td>\n\t\t\t\t\t\t\t<td>${log.message}</td>\n\t\t\t\t\t\t\t<td>${log.method}</td>\n\t\t\t\t\t\t\t<td>${log.url}</td>\n\t\t\t\t\t\t\t<td>${log.status}</td>\n\t\t\t\t\t\t\t<td>${log.remoteAddr}</td>\n\t\t\t\t\t\t\t<td>${log.responseTime}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t`\n\t\t\t}).join('')}\n\t\t\t\t\t</body>\n\t\t\t\t</table>\n\t\t\t</body>\n\t\t</html>\n\t\t\t`)\n\t\t});\n\t\t------------------------------------------------\n\t- in your browser, go to **http://localhost:4206/api/flashcards/info/logs** and you will see the log report##hhapilogs\n- **CHALLENGE: reprogram the **GET /** route to be an HTML version of documentation for our API**\n\t- list out all possible routes and describe what they do\n- **CHALLENGE: create cleanse-and-validate middleware functions for the rest of the flashcard routes**\n- **CHALLENGE: create middleware called parseVars which parses common short variables for common names**\n\t- for example, have a table of code-to-name conversions and parse these codes into their longer values\n\t\t- @soa --> Service-Oriented Architecture (SOA)\n\t\t- @api --> Application Programming Interface (API)\n\t\t- @cicd --> Continuous Integration/Continuous Deployment (CI/CD)\n\t\t- @oop --> Object-Oriented Programming (OOP)\n- **CHALLENGE: create middleware called authorizeByPin for pin authorization**\n\t- even before you implement JWT tokens, cookies and sessions, you can implement simple security on post, put, path and delete routes\n\t- simple request that a pin be sent on each request, and compare this pin to a number stored in an environment variable\n\t- the environment variable is completely protected, and since a client needs to send the pin on each request, it enables a client with the pin to access certain routes\n- **CHALLENGE: create middleware for rate-limiting**\n\t- create application middle where which records how many times an client (based on IP address) has accessed the API in the last 24 hours\n\t- if they go over a certain limit, send a HTTP response \"429 Too Many Requests\"","points":20,"extras":"","systemWhenCreated":"2024-01-12 19:01:50","systemWhoCreated":"systemUnknown"},{"id":811,"category":"Node.js","title":"Notes on Scott Moss' Node.js course","body":"- info\n\t- course notes: \n\t\t- https://scottmoss.notion.site/scottmoss/Intro-to-Node-js-V3-7c8e4ccaebf94b839f425fff13dcc44c\n\t- course repository:\n\t\t- https://github.com/Hendrixer/intro-node-v3\n\t- my project for this course\n\t\t- https://github.com/edwardtanguay/et991-nodejs-scott-moss-course\n- https://frontendmasters.com/courses/node-js-v3/introduction - 2024-01-04 02:10:50\n\t- Node is like my native language\n\t- we'll be learning the basics but also building a project\n\t- different types of applications\n\t\t- CLIs\n\t\t- web servers\n\t\t- scripts\n\t\t- APIs\n- https://frontendmasters.com/courses/node-js-v3/history-of-node-js - 2024-01-04 02:10:56\n\t- history\n\t\t- \"Node is basically just an environment where you can write JavaScript outside the browser. If you take languages like Python, Ruby, PHP, these are operating system languages, they're languages that run directly on your computer, you can run those programs in your terminal. Whereas before Node.js came out in 2009, you couldn't run JavaScript on the terminal. JavaScript was only a language you could run in the browser, it was considered a kiddie-language, people really didn't take it seriously, because it was like, oh, you can use JavaScript to make a little swirling thing on a Myspace page. So at some point, some guy named Ryan Dahl got really sick of not having JavaScript on his computer, so he made Node.js, which was basically a fork of V8, which is Google's engine to run JavaScript in the Chrome browser. Ryan took that engine and stuck it on the computer, and that's Node.js.\"//quote\n\t\t- Node began to stagnate at the beginning, which started a fork of Node called [IO.js](https://blog.risingstack.com/iojs-overview/) but this motivated the Node.js team to make innovations and it became more populare again.\n- https://frontendmasters.com/courses/node-js-v3/non-blocking-i-o - 2024-01-04 02:25:42\n\t- Node has non-blocking I/O\n\t\t- \"In Ruby, Python and PHP, there isn't an opportunity to run another piece of code without using more resources on your computer such as another thread. But Node is different in that you can write code in parallel on one thread. It does that by using an event loop. An event loop is basically just a registry for work that needs to be done which enables you to write asynchronous code, and this means Node can handle concurrent requests on one thread, something that is quite unique in the world of languages. This doesn't mean that Node is necessarily faster, for example, Node is really not good at CPU intensive work since it only uses one thread. So Node isn't good at things like machine learning, which is why people tend to use Python for that. But for handling concurrent processes, Node is a very good language and it is Node unique in this way, so especially if you are coming from another language like Ruby, Node makes you rethink how you write your code.\"//quote\n\t- \"Most languages such as Ruby, Python and PHP are both the language and the runtime, but Node is a runtime which uses a language called JavaScript. There's another runtime which uses JavaScript, called a browser. So when you use JavaScript in Node, you have access to a completely different environment than when you use JavaScript in the browser. This is not the case in pretty much any other language.\"//quote\n- https://frontendmasters.com/courses/node-js-v3/hello-world - 2024-01-04 02:46:17\n\t- installation Node\n\t\t- recommends nvm\n\t\t\t- you can switch versions\n\t\t\t- `nvm --version`\n\t\t- pronounces zsh as \"ZISH\"\n\t- does console.log\n\t\t- notes that console.log is the same command for the browser\n\t- tries alert('test')\n\t\t- gets error, since alert is a host object in the browser, not in Node\n- https://frontendmasters.com/courses/node-js-v3/browser-vs-node-js - 2024-01-04 02:56:59\n\t- browser\n\t\t- window\n\t\t- alert() is same as window.alert()\n\t- Node\n\t\t- global is like window\n\t\t- setTimeOut\n\t\t- has support for modules\n\t- you can write universal JavaScript that runs in both environments\n\t\t- checks if there is a window objet and acts accordingly\n\t- Node REPL\n\t\t- `node`\n\t\t- \"I almost never use it except for a quick calculator.\"\n- https://frontendmasters.com/courses/node-js-v3/process-environment/ 2024-01-04 20:02:28\t\n\t- will make a CLI note-taking app\n\t- looks at process\n\t- **process.argv**\n\t\t- gets everything after you type \"node\"\n\t- **process.env**\n\t\t- environment variables\n\t\t- every language has this\n\t\t- there are many already set:##processsenvs\n\t\t- you can set them like this: `NODE_ENV=production node index.js`\n\t\t- save environment variables in\n\t\t\t- https://www.lastpass.com (has free tier)\n\t\t\t- https://1password.com\n- https://frontendmasters.com/courses/node-js-v3/custom-cli-setup - 2024-01-04 20:20:33\n\t- do this again if you learn how to make JavaScript commands on Linux %%todo\n\t- a CLI is just an app that you run in your terminal\n\t- it's a way for you to chat with your computer\n\t- you just have the know the commands\n\t- it has access to your entire machine\n\t- `npm init -y`\n\t\t- this information only makes sense if you are going to have others download your app, etc.\n\t- **package.json**\n\t\t--------------------------------\n\t\t\"bin\": {\n\t\t\t\"note\": \"./index.js\"\n\t\t},\t\t\n\t\t--------------------------------\n\t- then `npm link`\n\t\t- and after that one is supposed to be able to type \"note\" and it runs the file\n\t\t- on Windows I had to do this as administrator\n\t\t- which worked, but then the command \"note\" opened up the file index.js instead of executing it\n\t- this only works on Linux\n- https://frontendmasters.com/courses/node-js-v3/processing-cli-arguments - 2024-01-12 19:59:52\n\t- extends the CLI code but not very functional\n- https://frontendmasters.com/courses/node-js-v3/modules-overview - 2024-01-12 20:00:01\t\n\t- an IIFE protects your code \n\t\t- was the first module\n\t- custom modules\n\t- third-party modules\n\t- Node as of version 18 (April 2022) uses ES6 modules %%fact\n\t- \"type\": \"module\"\n\t- specific and default imports\n- https://frontendmasters.com/courses/node-js-v3/importing-exporting-modules - 2024-01-12 20:06:33\n\t- import fs from 'fs'\n\t\t- the './' means it is a file that you made\n\t\t- note that you can write `import fs from 'node:fs\"`\n\t\t- import _ from 'lodash'\n\t- talks about require##howtorueiwquire\n- https://frontendmasters.com/courses/node-js-v3/thinking-in-modules - 2024-01-12 20:30:36\n\t- associate by modules\n\t- \"When using Node, remember modules are cheap. Don't be stingy with modules. Don't be like, I'm making a new module, it's going to slow down my app. It won't. It's not like you are in the browser and have to download something over the Internet. Modules are local and they load fast, so pretty much make everything a module that you can, even when you don't think you're going to reuse it. Modules help keep your code organized, they are easier to test, and make your code easier to extend.\"//quote\n\t- one often puts all utilities in utils.js\n\t- you can export what you import##youcanexportimpo\n\t- `import * as config from './config.js';`\n\t- \"type\": \"module\" will probably be default soon\n- https://frontendmasters.com/courses/node-js-v3/internal-3rd-party-modules - 2024-01-12 20:46:00\n\t- useful internal modules\n\t\t- fs\n\t\t\t- anything you can do as a human to files, Node can do with fs\n\t\t\t- read files\n\t\t\t- write files\n\t\t- http\n\t\t\t- helps you with networking\n\t\t\t- send json\n\t\t\t- it's pretty low level, most people use Express which sits on top of it\n\t\t- path\n\t\t\t- don't really need to use it anymore\n\t- npm\n\t\t- manages packages in node\n\t\t- just use google to find packages\n\t\t- package-lock.json\n\t\t\t- never include node-modules in Git\n\t\t\t- package-lock records the exact versions\n\t\t- `npm i` is the same as `npm install`\n\t\t- `npm i` installs everything in package json\n\t\t- security\n\t\t\t- larger companies have white list which approve npm packages\n\t\t\t- sometimes attorneys are involved people of IP issues\n\t\t\t- it's more likely that you'll run into something that's broken than something that's malicious\n\t\t- uninstall is `npm un <package>`\n\t\t- not creating an npm package in this course\n- https://frontendmasters.com/courses/node-js-v3/using-the-yargs-module - 2024-01-12 20:56:37\n\t- improving CLI\n\t- uses npm [yargs](https://www.npmjs.com/package/yargs)\n\t- this just executes the file##thisjustexus\n\t- now has note in a npm script\n\t- **hideBin** removes the first two entries from the array##hideBinksjd\n- https://frontendmasters.com/courses/node-js-v3/notes-app-commands - 2024-01-12 21:06:31\n\t- yargs helps you build commands##helpsyoubild\n\t- you can make tags##thetagsdksdj\n\t\t- alias is e.g. -p for --print\n\t- square brackets optional##squareope\n- https://frontendmasters.com/courses/node-js-v3/async-code - 2024-01-12 21:10:32\n\t- he is going to read and write files instead of a database\n\t- you will do more async programming in Node than in client-side programming\n\t- async is not threads\n\t- fs is asynchronous\n\t\t- so you have to proved a callback\n\t- Array example\n\t\t- this is synchronous##thefilsdkjfs\n\t- \"Just because you're using a callback doesn't mean your code is asynchronous. For example, higher order functions receive callbacks as parameters and are often not asynchronous. There are really only three reasons why your code is going to be asynchronous: (1) you're interacting with the network, (2) you're using some type of timing function such as setTimeout or setInterval, or (3) you're interacting with some kind of data store such as a file system or database. So callbacks are how we can handle asynchronous processes, but not every callback is going to do this.\" //quote\n\t\t- but just because there is a callback, doesn't make it asynchronous##justbecausecall\n\t- shows promises and .then()\n\t- how to make a wait promise##thewaitpromsdf\n\t- wait code\n\t\t------------------------------------\n\t\tconst waitSeconds = secs => {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t}, secs * 1000);\n\t\t\t});\n\t\t};\n\n\t\tconsole.log('start');\n\t\tawait waitSeconds(2);\n\t\tconsole.log('stop');\t\t\n\t\t------------------------------------\n\t- you can also use\n\t\t----------------------------------\n\t\timport {promisify} from 'util';\n\t\t----------------------------------\n\t- you can also do this:##youcanalsodosjsithis\n- https://frontendmasters.com/courses/node-js-v3/fs-module - 2024-01-12 23:05:48\n\t- fs module\n\t\t- enables you to interact with files\n\t\t- you could make a database with this\n\t- frequently used methods##theferqksjd\n\t- reads package.json\n\t- \"Because we're using ES6 modules, we don't get access to the global __dirname which Node used to have and which gave you the current directory that you're working in.\"\n\t- good example of fs/promises\n\t\t- but he apparently doesn't know about [process.cwd()](https://www.geeksforgeeks.org/node-js-process-cwd-method)##readsjssosnpack\n\t\t- how to read package.json\n\t\t\t--------------------------------------------------\n\t\t\timport fs from 'fs/promises';\n\t\t\timport { join } from 'path';\n\n\t\t\tconst readPackageJson = async () => {\n\t\t\t\tconst path = process.cwd();\n\t\t\t\treturn JSON.parse(await fs.readFile(join(path, '../package.json')));\n\t\t\t}\n\n\t\t\tconst pkj = await readPackageJson();\n\t\t\tconsole.log(pkj.name);\n\t\t\tconsole.log(pkj.version);\n\t\t\tconsole.log(`there are ${Object.entries(pkj.devDependencies).length} dev dependencies`);\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- the above code works##howtoreadpackasjson\n\t- creates file with fs.writeFile() and then `node createFile.js && node newFile.js`\n\t- says for debugging, he just uses blogs\n- https://frontendmasters.com/courses/node-js-v3/using-a-file-as-a-db - 2024-01-13 00:26:31\n\t- creates db.json like in lowdb\n\t- he's basically recreating lowdb\n\t- he uses null, 2 in stringify##usesnull\n\t- can't use appendFile for JSON\n- https://frontendmasters.com/courses/node-js-v3/crud-methods-create - 2024-01-13 00:32:00\n\t- \"Unless you're make a game, 99% of all the applications you write are CRUD apps.\" //quote\n\t- he doesn't use `import * as...`\n\t- gets all notes##getssdjdbnotes\n\t- explains destructuring##explainsjsdestr\n\t- destructuring arrays##desctrusarra\n\t- nice use of destructuring##niceusedestructuring\n\t- code\n\t\t------------------------------------------\n\t\tconst data = {\n\t\t\tuserStatus: 'online',\n\t\t\tscore: 34,\n\t\t\tserver: 'Herkules',\n\t\t\tlogging: true\n\t\t};\n\n\t\tconst { userStatus, score: userScore, ...props } = data;\n\t\tconsole.log('userStatus', userStatus);\n\t\tconsole.log('userScore', userScore);\n\t\tconsole.log('props', props);\t\t\n\t\t------------------------------------------\n- https://frontendmasters.com/courses/node-js-v3/crud-methods-read-delete - 2024-01-13 00:52:38\n\t- doing searching\n\t- interesting, id is Date.now()##interesrnotes\n\t\t- this makes it a long number##thismakesnumber\n\t- he has a habit of making functions return immutable values\n\t\t- it may be a bit more expensive in terms of creating objects but it makes programming more straightforward if you can afford it\n- https://frontendmasters.com/courses/node-js-v3/using-the-crud-methods - 2024-01-13 01:18:46\n\t- using argv##thenewksksk\n\t- finishes all the CRUD methods\n- https://frontendmasters.com/courses/node-js-v3/types-of-tests - 2024-01-13 01:23:28\n\t- unit testing\n\t\t- one small unit of code\n\t- integration testing\n\t\t- how two units work together\n\t- end-to-end testing\n\t\t- testing as a user, test the entire flow\n\t\t- use headless browser\n- https://frontendmasters.com/courses/node-js-v3/unit-testing-with-jest - 2024-01-13 01:33:24\n\t- Jest created by Facebook\n\t- creates /tests\n\t\t- notes.test.js\n\t- \"a devDependency is a depencency that you don't need to run your app\"\n\t- talks about percentage of code coverage\n- https://frontendmasters.com/courses/node-js-v3/testing-with-mocks - 2024-01-13 01:42:18\n\t- these are the actual tests for the notes app\n\t- mocking is e.g. to replace the database with a database that has fake data\n\t- mock returns spy functions, which tell you everything that happened to it##thespyfun\n\t- uses dynamic imports##dynamimports\n\t- test puts in the item into the database, and then gets it out to see if it can get it\n\t- you have to use this in Jest##havetouseinjest\n\t- writes multiple expects##thesexpskjd\n- https://frontendmasters.com/courses/node-js-v3/additional-test-examples - 2024-01-13 02:00:26\n\t- does more tests\n\t- \"it\" works the same as \"test\"##itsameastest\n- https://frontendmasters.com/courses/node-js-v3/creating-a-basic-server - 2024-01-13 02:05:26\n\t- server is simply a computer that is connected to the Internet that responds to network requests\n\t- servers return HTML, JSON, text, video, audio, etc.\n\t- some are real-time some are not\n\t- does a simple server with http module##hesinternserver\n\t- \"HTTP status codes are just a way for applications to notify other applications what the status of a request was. Anything between 200 and 300 was successful, anything in the 300s was redirected, 400s was a bad request, and anything in the 500s means the server had a problem. So basically, 200, 300, good, 400 user messed up, 500 server messed up. But these are for RESTful APIs. Other technologies don't even care about status codes, for instance with GraphQL everything is a 200. Instead it sends more accurate error fields in the JSON object to specify what the status of a request was.\" //quote\n\t- also can send headers##theheaderstosend\n\t- server.listen\n- https://frontendmasters.com/courses/node-js-v3/interpolating-data-formatting-notes - 2024-01-13 02:15:22\n\t- an example of \"interpolating data into a string\"##intersjsstr\n\t- has a template.html##insernotes\n\t- does the interpolation himself##doestheinter\n- https://frontendmasters.com/courses/node-js-v3/sending-notes-to-the-client - 2024-01-13 02:21:11\n\t- createServer##createserverskj\n\t- using **open**##usesopens\n- https://frontendmasters.com/courses/node-js-v3/wrapping-up - 2024-01-13 02:25:30\n\t- reviews what he did\n\t- \"every application is an abstraction around this\"\n\t- next steps\n\t\t- https://expressjs.com\n\t\t\t- has the most resources\n\t\t- https://www.prisma.io\n\t\t\t- the standard ORM\n\t\t- publish an npm package\n\t\t\t- https://docs.npmjs.com/creating-and-publishing-scoped-public-packages\n\t\t- https://www.typescriptlang.org\n\t\t- the API course and publish a API to a hosting servcie","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-01-13 02:32:54","systemWhoCreated":"systemUnknown"},{"id":812,"category":"testing","title":"Notes on Kent Dodds's JavaScript Testing course","body":"- info\n\t- 2018\n\t- course URL\n\t\t- https://frontendmasters.com/courses/testing-practices-principles\n\t- course repo\n\t\t- https://github.com/FrontendMasters/testing-workshop\n- https://frontendmasters.com/courses/testing-practices-principles/introduction - 2024-01-14 23:45:30\n\t- making a testing framework\n\t- uses JavaScript\n\t- unit and integration\n\t- mocks, stubs\n\t- TDD\n\t- not technology-specific\n- https://frontendmasters.com/courses/testing-practices-principles/automated-testing\n\t- kinds of bugs\n\t\t- security\n\t\t- logic\n\t\t- integration\n\t- use TypeScript \n\t\t- he uses [Flow](https://flow.org) instead of TypeScript (2018)\n\t- use ESLint\n\t\t- for what TypeScript does not check\n\t- kinds of tests\n\t\t- unit\n\t\t- integration\n\t\t- penetration\n\t\t- i18n (internationalization)\n\t- integration tests are more comprehensive to set up\n\t\t- set up a mock databae\n\t- end-to-end tests (not covering today)\n- https://frontendmasters.com/courses/testing-practices-principles/your-first-test-exercise - 2024-01-15 00:02:49\n\t- shows code that they have to test\n- https://frontendmasters.com/courses/testing-practices-principles/your-first-test-solution - 2024-01-15 00:12:43\n\t- he writes a simplistic test for it##simplsitest\n\t- \"a test is something that throws an error if there is an error, and a good test will help you identify where that error is and how to fix it\"\n\t- the error message is very important\n\t- task: write a function that abstracts code\n- https://frontendmasters.com/courses/testing-practices-principles/coding-an-assertion-library - 2024-01-15 00:22:34\n\t- creates a custom test\n\t\t--------------------------------------\n\t\tconst expect = (actual) => {\n\t\t\treturn {\n\t\t\t\ttoBe(expected) {\n\t\t\t\t\tif (actual !== expected) {\n\t\t\t\t\t\tthrow new Error(`${actual} is not equal to ${expected}`);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('test passed');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\texpect(3 + 4).toBe(6);\t\t\n\t\t--------------------------------------\n\t- works like this##testing8282\n\t- two problems\n\t\t- it's not clear where the error came from if e.g. a function called another function\n\t- I try to avoid the describe block, I try to avoid nesting my tests\n\t- with Jest you can use it or test\n\t- format of test##formjskjdoftest\n- https://frontendmasters.com/courses/testing-practices-principles/coding-a-testing-framework - 2024-01-15 00:32:26\n\t- does callback\n\t- still not using Jest\n\t- a minimal self-testing framework##mimtestfram\n\t- describes how Jest improves on this\n- https://frontendmasters.com/courses/testing-practices-principles/jest-testing-framework - 2024-01-15 00:45:46\n\t- `npm run test:expect`\n\t- how to use not.toBe##nottobe\n\t- you can compare arrays and objects##toequalarraysobj\n\t- find out if a part of an object is in another object##matchobject\n\t- mock functions##mockfunddj\n\t- check an object##thenijsdkfsd\n- TODO: rest of section\n- TODO: Mocks section\n- https://frontendmasters.com/courses/testing-practices-principles/unit-tests-for-express-middleware - 2024-01-15 00:46:39\n\t- shows which exercise to do\n- https://frontendmasters.com/courses/testing-practices-principles/unit-tests-for-express-middleware-solution - 2024-01-15 00:47:1\n\t- test to see if a route returns all posts##resturjsdfallpos\n\t- set something up\n- https://frontendmasters.com/courses/testing-practices-principles/test-object-factories - 2024-01-15 00:51:05\n\t- talking about test object factory\n\t- setup function is for things that are common to all of your tests##setupffuncjs\n\t- tip: take out pure functionality out of functions and test that\n\t- test cleanup: delete all the users you created\n- TODO: rest of testing practices","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-01-15 01:01:46","systemWhoCreated":"systemUnknown"},{"id":813,"category":"CRUD React Frontend","title":"LearnApp Part 6: API testing with Vitest and Supertest","body":"- **background**\n\t- this howto is **Part 6** of the **LearnApp project**\n\t\t- LearnApp project: https://tanguay-eu.vercel.app/howtos/805\n\t- **what we have built so far in this app**\n\t\t- in [PART 1](https://tanguay-eu.vercel.app/howtos/804) we\n\t\t\t- implemented the full CRUD backend with Node/Express which serves flashcards via its **/api/flashcards** URL\n\t\t\t- we also quickly set up a based Vite-React frontend with menu and mock pages\n\t\t- in [PART 2](https://tanguay-eu.vercel.app/howtos/806) we developed the **frontend**\n\t\t\t- displayed flashcards on **Manage Flashcards** page\n\t\t\t- enabled the user to be able to **add a flashcard**\n\t\t- in [PART 3](https://tanguay-eu.vercel.app/howtos/807) we further developed the **frontend**\n\t\t\t- enabled user to **delete a flashcard** and **edit a flashcard**\n\t\t\t- we also **refactored** the code into multiple components\n\t\t- in [PART 4](https://tanguay-eu.vercel.app/howtos/809) we published the application at **Vercel**\t\t\t\n\t\t\t- we set up development/production modes so that \n\t\t\t\t- (1) when app runs **locally the user can edit** the JSON files (database) via the interface\n\t\t\t\t- (2) user can then publish the site at Vercel which **imports the JSON files**\n\t\t- in [PART 5](https://tanguay-eu.vercel.app/howtos/810) we implemented in the backend:\n\t\t\t- **middleware* such as \n\t\t\t\t- maintenanceMode\n\t\t\t\t- cleansing and validation\n\t\t\t- **error logging** with winston and morgan\n\t\t\t- more **routing** in order to create a log report\n\t- now in **PART 6** we will implement API testing with Vitest and Supertest\n\t- **starting code for this step is here**\n\t\t- see finishing code for [PART 5](https://tanguay-eu.vercel.app/howtos/810)\t\t\n\t- **finishing code for this step is here**\n\t\t- https://github.com/edwardtanguay/et601-learnapp - 2024-01-15 howto preparation\n\t\t- https://github.com/edwardtanguay/et602-learnapp - 2024-01-16 from live-coding\n\t- **we will write the following basic tests**##hhthealls\n- **>>> 1. Set up API test for the root route**\n\t- install vitest and supertest\n\t\t- `npm i vitest`\n\t\t- `npm i supertest`\n\t\t- `npm i -D @types/supertest`\n\t- **backend/api/server.test.ts**\n\t\t---------------------------------------\n\t\timport { test, expect } from 'vitest';\n\t\timport request from 'supertest';\n\t\timport { app } from './server';\n\n\t\ttest('GET /', async () => {\n\t\t\tconst response = await request(app).get('/');\n\t\t\texpect(response.statusCode).toBe(200);\n\t\t});\t\t\n\t\t---------------------------------------\n\t- add the test command to \"scripts\"\n\t\t- **package.json**\n\t\t\t-------------------------------------------\n\t\t\t\"scripts\": {\t\t\t\n\t\t\t\t\"test\": \"vitest\"\n\t\t\t-------------------------------------------\n\t- run tests\n\t\t- `npm t`\n\t- you will see that all tests pass##hhtestspass\n\t- to see that this test is actually testing something, change the returned HTTP code from 200 to 201\n\t\t- **server.ts**\n\t\t\t-------------------------------\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.status(201).json({\n\t\t\t\t\tappName: \"API for AppLearn version 0.1\"\n\t\t\t\t})\n\t\t\t});\t\t\t\n\t\t\t-------------------------------\n\t\t- the tests will automatically run again##hhfailjskdfetest\n- **>>> 2. Set up so that a failed test will prevent site from being published**\n\t- one purpose of having tests is to prevent code that fails tests from being pushed to production\n\t- currently our tests our failing from the above change to HTTP code 201\n\t- if we pushed this repository to Vercel, it would run the **npm run build** command\n\t- let's run that command locally and see what happens\n\t\t- `npm run build`\n\t\t- even though we have tests that are failing, it will build##hhthewillbuild\n\t- let's change this so that if any tests fail, it will not build\n\t\t- **package.json**\n\t\t\t----------------------------------------------\n\t\t\t\"build\": \"tsc && vitest --run && vite build\",\n\t\t\t----------------------------------------------\n\t- now try to build it again\n\t\t- `npm run build`\n\t- the build will fail because the tests fail##runbuildvitestsj\n\t- now fix the error so the test passed (change HTTP code 201 to 200)\n\t- now try to build it again\n\t\t- `npm run build`\n\t- it now builds and would build at Vercel as well##nowworksfjagain\n- **>>> 3. Set up browser dashboard for better interface to tests**\n\t- let's install Vitest's dashboard so we can view our test results in the browser instead of in the terminal\n\t\t- this works well if you work with more than one monitor: \n\t\t\t- develop on one monitor\n\t\t\t- have the vitest dashboad in the browser on another monitor \n\t\t\t\t- showing live results of your tests \n\t\t\t\t- which are run every time you make a change to your code\n\t- change test script\n\t\t- **package.json\n\t\t\t--------------------------------\n\t\t\t\"test\": \"vitest --ui\",\n\t\t\t--------------------------------\n\t- run tests\n\t\t- `npm t`\n\t\t- you will be asked to install a dependency, press **y**##hhinstaldepd\n\t- rerun tests\n\t\t- `npm t`\n\t- in addition to the terminal output, the browser will open a new page and show the Vitest dashboard##thebitesvdash\n\t- when the test fail, the details will be shown on the dashboard##hhwehenfail\n- **>>> 4. Improve root test**\n\t- let's make our tests more descriptive and easier to read \n\t- by using the nested commands **describe** and **it** instead of **test**\n\t\t- **server.test.ts**\n\t\t\t---------------------------------------------\n\t\t\timport { expect, describe, it } from 'vitest';\n\t\t\timport request from 'supertest';\n\t\t\timport { app } from './server';\n\n\t\t\tdescribe('GET /', async () => {\n\t\t\t\tconst response = await request(app).get('/');\n\t\t\t\tit('receives correct HTTP code', () => {\n\t\t\t\t\texpect(response.statusCode).toBe(200);\n\t\t\t\t});\n\t\t\t\tit('has correct content-type', () => {\n\t\t\t\t\texpect(response.headers['content-type']).toMatch(/application\\/json/);\n\t\t\t\t});\n\t\t\t\tit('JSON object contains correct properties', () => {\n\t\t\t\t\tconst responseBody = JSON.parse(response.text);\n\t\t\t\t\texpect(responseBody).toHaveProperty('appName');\n\t\t\t\t});\n\t\t\t}); \t\t\n\t\t\t---------------------------------------------\n\t- tests now show like this:##hhnowlikesthis\n\t- break one of the tests to see what an error looks like\n\t\t- **server.ts**\n\t\t\t----------------------------------------\n\t\t\tapplicationName: \"API for AppLearn version 0.1\"\n\t\t\t----------------------------------------\n\t\t- you see what route is affected and which test failed##seejtheerro\n\t- correct the code so that all tests pass again\n- **>>> 5. Make tests for GET flashcard routes**\n\t- test **/api/flashcards/info/logs**\n\t\t- **server.test.ts**\n\t\t\t---------------------------------------------------------\n\t\t\tdescribe('GET /api/flashcards/info/logs', async () => {\n\t\t\t\tconst response = await request(app).get('/api/flashcards/info/logs');\n\t\t\t\tit('receives correct HTTP code', () => {\n\t\t\t\t\texpect(response.statusCode).toBe(200);\n\t\t\t\t});\n\t\t\t\tit('has correct content-type', () => {\n\t\t\t\t\texpect(response.headers['content-type']).toMatch(/text\\/html/);\n\t\t\t\t});\n\t\t\t}); \t\t\t\n\t\t\t---------------------------------------------------------\n\t- test **/api/flashcards**\n\t\t- **server.test.ts**\n\t\t\t---------------------------------------------------------\n\t\t\tdescribe('GET /api/flashcards', async () => {\n\t\t\t\tconst response = await request(app).get('/api/flashcards');\n\t\t\t\tit('receives correct HTTP code', () => {\n\t\t\t\t\texpect(response.statusCode).toBe(200);\n\t\t\t\t});\n\t\t\t\tit('has correct content-type', () => {\n\t\t\t\t\texpect(response.headers['content-type']).toMatch(/application\\/json/);\n\t\t\t\t});\n\t\t\t}); \t\t\t\n\t\t\t---------------------------------------------------------\n\t- all tests show in dashboard##hhthealls\n- **CHALLENGE: make tests for rests of flashcard routes**\n\t- in order to test the POST, PUT, PATCH and DELETE routes, you will have to create a mock database somehow, e.g.\n\t\t- before the tests run, swap out the production with the test database\n\t\t- run the tests\n\t\t- after tests run, swap out the test database with the production database\n\t- test for all possible responses to e.g. invalid suuids\n\t- test for data-cleansing\n\t- test the response to \n\t\t- renaming the database\n\t\t- corrupting the JSON database\n\t- test maintenance mode\n\t- etc.","points":20,"extras":"","systemWhenCreated":"2024-01-15 22:24:04","systemWhoCreated":"systemUnknown"},{"id":814,"category":"EJS","title":"Create server-side Node/Express site with EJS and host at Render","body":"- **what we will learn**\n\t- we will build a EJS site\n- **code is here**\n\t- https://github.com/edwardtanguay/et370-node-express-ejs-site - 2024-01-16 preparation\n\t- https://github.com/edwardtanguay/et371-node-express-ejs-site - 2024-01-17 from live-coding\n- **site is online here**\n\t- https://et370-node-express-ejs-site.onrender.com\n- **site works like this**#gif#gbookskdjbpage\n- and when you link to individual books on the site in social media, they appear like this####thecslackpost\n- **background**\n\t- this howto serves two purposes\n\t\t- (1) show you how to make Node/Express website with EJS\n\t\t- (2) introduce you to server-side rendering to better understand how it relates to client-side rendering\n\t\t\t- server-side rendering is becoming more relevant today with frameworks such as **Next.js** and **Nuxt**\n\t\t\t- and the concepts that you learn in building your own server-side website will help you better understand server-side rendering in general##clienserversiderend \n\t- note that in this tutorial we publish our website using a free account at **Render**\n\t\t- **free accounts** at Render enable you to make as many \"web services\" as you want (e.g. Node/Express APIs, websites)\n\t\t\t- but after they are not accessed for **15 minutes**, they **spin down** and are **inactive**\n\t\t\t- the next time they are accessed via their URL, they have to **spin up** which can take up to **90 seconds**\n\t\t\t- waiting 90 seconds for a website to appear is not usable in almost any circumstance expect for learning purposes as in this howto\n\t\t- therefore, if you want to actually publish a Node/Express/EJS site that is usable on the Internet, use\n\t\t\t- a free account at [Cyclic](https://www.cyclic.sh), but here you can only publish **one site**\n\t\t\t- a paid (around 10€/month) account at a hosting provider such as [DigitalOcean](https://www.digitalocean.com) or [Hetzner](https://www.hetzner.com)\n\t\t\t\t- although the process to set up a site on a cloud machine requires more **know-how and time** than at user-friendly hosting services such as Render or Cyclic\n\t\t\t\t- but server websites from a cloud machine is also good devops experience, e.g. setting up an **nginx server** with **pm2**, setting up and **domain** name, **subdomain** name, configuring **https**, etc.\n\t\t\t\t- and using cloud machines you can of course host an **unlimited amount of sites** and have **complete control** the environment to install literally anything in the environment that your website is running\n- **>>> 1. Build simplest Node/Express web server with TypeScript**\n\t- we will start with a blank directory for our project\n\t- in your project folder, create the folder e.g. **et370-node-express-ejs-site** (use your own initials and number of course)\n\t- copy in VSCode\n\t\t`code et370-node-express-ejs-site`\n\t- create npm project\n\t\t- `npm init -y`\n\t- install Git\n\t\t- `git init -b dev`\n\t\t- make initial commit\n\t\t- **.gitignore**\n\t\t\t------------------------------------\n\t\t\t.vscode\n\t\t\tnode_modules\n\t\t\t.env\n\t\t\t------------------------------------\t\t\n\t- install Express\n\t\t- `npm i express`\n\t\t- `npm i -D @types/express`\n\t- **src/index.ts**\n\t\t-------------------------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst port = 4112;\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send(`\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<title>Info Site</title>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<h1>Info Site</h1>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t</body>\n\t\t</html>\t\t\t\n\t\t\t`);\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Listening at http://localhost:${port}`);\n\t\t});\n\t\t-------------------------------------------\n\t- set up prettier\n\t\t- **.prettierrc**\n\t\t\t----------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\t\t\t\n\t\t\t----------------------------------\n\t- set up start script **npm run dev** with TypeScript\n\t\t- install tsx (to run TypeScript files)\n\t\t\t- `npm i -D tsx`\n\t- set up nodemon (to watch for when TypeScript files change so server can be restarted)\n\t\t- `npm i -D nodemon`\n\t- **package.json**\n\t\t-----------------------------------------\n\t\t\"dev\": \"nodemon\",\n\n\t\t\"nodemonConfig\": {\n\t\t\t\"watch\": [\n\t\t\t\t\"src\"\n\t\t\t],\n\t\t\t\"ext\": \"ts, json\",\n\t\t\t\"exec\": \"tsx src/index.ts\"\n\t\t},\t\t\n\t\t-----------------------------------------\n\t- you will see your site in your browser:##willseesite\n- **>>> 2. Prepare to publish at Render**\n\t- let's publish this site at Render at this early stage\n\t\t- then each time we push to GitHub\n\t\t\t- Render will notice this and pull our changes\n\t\t\t- and we can check that each of our changes also works online\n\t\t\t- just as when we publish to Vercel\n\t- set up package.json so that Render can build the site and then run a start script\n\t\t- we do this since we want valid and optimized JavaScript to be running on the server\n\t\t\t- i.e. we don't want our production site to run on tsx where TypeScript is being compiled on the fly on the server\n\t\t- our build process on the server will also ensure that if there is a TypeScript error, the site will not publish\n\t- install TypeScript so we can use the **tsc** command to compile TypeScript into JavaScript to run on Render\n\t\t- `npm i -D typescript`\n\t- **package.json**\n\t\t---------------------------------\n\t\t\"start\": \"node dist/src/index.js\",\n\t\t\"build\": \"tsc -p tsconfig.json\"\n\t\t---------------------------------\n\t- **tsconfig.json** - tell TypeScript where to compile JavaScript\n\t\t-------------------------------------\n\t\t{\n\t\t\t\"compilerOptions\": {\n\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\"outDir\": \"dist\",\n\t\t\t\t\"strict\": false,\n\t\t\t\t\"lib\": [\"esnext\"],\n\t\t\t\t\"esModuleInterop\": true\n\t\t\t},\n\t\t\t\"include\": [\"src/**/*.ts\"]\n\t\t}\n\t\t-------------------------------------\n\t- test the build and start script, \n\t\t- stop the **npm run dev** site\n\t\t- `npm run build`\n\t\t- `npm start`\n\t\t- it should run just as the tsx version\n\t- before publish to Render, let's make sure ES6 modules work with both **npm run dev** and **npm start**\n\t\t- **src/config.ts**\n\t\t\t----------------------------------------\n\t\t\texport const getPort = (): number => {\n\t\t\t\treturn 4113; \n\t\t\t}\t\t\t\n\t\t\t----------------------------------------\n\t\t- **index.ts**\n\t\t\t-------------------------------------------------\n\t\t\timport * as config from './config';\n\n\t\t\tapp.listen(config.getPort(), () => {\n\t\t\t\tconsole.log(`Listening at http://localhost:${config.getPort()}`);\n\t\t\t});\n\t\t\t-------------------------------------------------\n\t\t- check for **development**\n\t\t\t- `npm run dev`\n\t\t\t- works##thees6nprun\n\t\t- check for **production**\n\t\t\t- stop the dev site\n\t\t\t- `npm run build`\n\t\t\t- `npm start`\n\t\t\t- works##thestartworksjkdfjdkfj\n\t\t\t- and you see that **config.js** is being created as well now##youseethat\n\t\t\t- note also that ES6 modules work in TypeScript and compiled JavaScript without **\"type\": \"module\"** being set in **package.json**\n- **>>> 3. Publish at Render**\n\t- New > Web Server##thenewservi\n\t- Build from Git repository##thewebseruv\n\t- choose the repository that you just pushed##hhfirstone\n\t- enter all infos for application##hhenterallsj222\n\t- make sure you choose the **free** plan and click **Create Web Service**##and788\n\t- after 20-30 seconds, you will see that it is deploying##hhwilseecompil\n\t- usually within 2 minutes, you will see that your site is published##hhussulaswithin\n\t- click your site's URL here##hhclicksitehere\n\t- you will see your site is online##hhsiteisonline\n\t- now make a small change and push to your GitHub \n\t\t- **index.ts**\n\t\t\t----------------------------------------------\n\t\t\t<p>Welcome to this site at Render.</p>\n\t\t\t----------------------------------------------\n\t\t- commit and push to GitHub\n\t\t- you will see at Render that it starts a new deploy automatically based on your new commit##youwillseestartsauto\n\t\t- usually within 2 minutes your change should be live on your site##andwithsjdfminute\n- **>>> 4. Add EJS**\n\t- We could develop a site in the above manner, e.g. with string literals outputting HTML.\n\t- But if you want to have a more **MVC**-based pattern where you\n\t\t- 1. have a **controller** that reads the requested URL\n\t\t- 2. fetch information you need from your data **model**\n\t\t- 3. and then pass it on to a **view** that renders the HTML along with the data passed to it\n\t\t- then you want to use a **template engine** such as **EJS**, **Handlebars** or **Pug**\n\t\t\t- **[EJS](https://ejs.co)** - Embedded JavaScript templating##theejeje22\n\t\t\t- **[Handlebars](https://handlebarsjs.com)** - has simpler syntax than EJS##thehandhandlks22\n\t\t\t- **[Pug](https://pugjs.org/api/getting-started.html)** - formerly known as Jade, uses indentations instead of markup##thepugpgupug22\n\t\t- **EJS** and **Handlebars** are by far the most popular of the three##ejshandgraph\n\t\t- in this howto, we will use **EJS**\n\t- install EJS\n\t\t- `npm i ejs`\n\t- refactor **index.ts** to support EJS\n\t\t---------------------------------------------------\n\t\timport express from 'express';\n\t\timport * as config from './config';\n\t\timport path from 'path';\n\n\t\tconst app = express();\n\t\tconst baseDir = process.cwd();\n\n\t\tapp.set('view engine', 'ejs');\n\t\tapp.set('views', path.join(baseDir, 'src/views'));\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.render('pages/index');\n\t\t});\n\n\t\tapp.listen(config.getPort(), () => {\n\t\t\tconsole.log(`Listening at http://localhost:${config.getPort()}`);\n\t\t});\t\t\n\t\t---------------------------------------------------\n\t- **src/views/pages/index.ejs**\n\t\t---------------------------------------------\n\t\ttest of <b>EJS</b>\n\t\t---------------------------------------------\n\t- now go to **http://localhost:4113** and you will see the EJS test page##theejstestpages\n- **>>> 5. Implement MVC: let the controller pass data from the model to the view**\n\t- we want to implement the **MVC** pattern now which approximately maps to the following\n\t\t- **controller** = index.ts\n\t\t- **model** = model.ts\n\t\t- **view** = index.ejs\n\t\t- **database** = data via API (first a simple JavaScript object)##hhmvcok\n\t- create a **model** that delivers data\n\t\t- **src/model.ts**  \n\t\t\t---------------------------------------------------------\n\t\t\texport const getBooks = () => {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Book 1\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Book 2\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: \"Book 3\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t---------------------------------------------------------\n\t- **index.ts**\n\t\t-----------------------------------------------\n\t\timport * as model from './model';\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.render('pages/index', { books: model.getBooks() });\n\t\t});\t\t\n\t\t-----------------------------------------------\n\t- **index.ejs**\n\t\t--------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<h1>Info Site</h1>\n\t\t\t<div>\n\t\t\t\tthese are <%=books.length%> books\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<% books.forEach(function(book) { %>\n\t\t\t\t\t\t<li><%= book.title %></li>\n\t\t\t\t\t\t<% }) %>\n\t\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</body>\n\n\t\t</html>\t\n\t\t--------------------------------------------\n\t- books are being shown##hhbooksbeingshwons\n- **>>> 6. Fix EJS formatting in VSCode the best you can**\t\n\t- **code formatting** in EJS known for being a problem\n\t\t- EJS ist not the most loved syntax among developers\n\t\t\t- VSCode and other editors have a difficult time delivering optimal developer experience when it comes to code formatting\n\t\t- to see this, reformat your code in VSCode\n\t\t\t- it will probably look something like this##onnotthebest\n\t\t- you can install **EJS Language Support** and **EJS Beautify** extensions, but it often only makes your code less easy to read##notbeautifusd\n\t\t- I found at least a temporary fix at this Stack Overflow question\n\t\t\t- [EJS Formatting in VS Code](https://stackoverflow.com/questions/45069089/ejs-formatting-in-vs-code)\n\t\t- in your **.vscode/settings.json** file, add\n\t\t\t--------------------------------------------------------\n\t\t\t\"html.format.unformatted\": \"%,%_,%=,%-,%#,%%,-%,_%,a,abbr,area,audio,b,bdi,bdo,br,button,canvas,cite,code,data,datalist,del,dfn,em,embed,i,iframe,img,input,ins,kbd,label,link,map,mark,math,meta,meter,noscript,object,output,picture,progress,q,ruby,s,samp,script,select,slot,small,span,strong,sub,sup,svg,template,textarea,time,u,var,video,wbr\"\t\t\t\n\t\t\t--------------------------------------------------------\n\t\t- so my settings file looks like this:##thesseetitjhtl\n\t\t- and now I can set my project such that HTML won't format the HTML tags, so I can format my EJS files myself and when I format on save, it won't reformat how I arranged it to look##andnowjkswhenform\n- **>>> 7. Add CSS file to style the page**\n\t- **index.ejs** - add link to CSS file\n\t\t----------------------------------------------\n\t\t<link rel=\"stylesheet\" href=\"css/main.css\" />\t\t\n\t\t----------------------------------------------\n\t- you now have to consider, where should you put **main.css**? \n\t\t- your HTML is being served from the \"/\" route on your server, much like for an API\n\t\t\t- and so HTML files being served here have no access to any files on our server\n\t\t- but the HTML that we send to the client expects to have under it a directory **css** and in that directory a file named **main.css**\n\t\t\t- so we need to somehow **serve this CSS file as well**\n\t\t- the way we do this is to define a folder on our server called **public** which has in it **static files** which can be accessed from the HTML that we send to the client, e.g.\n\t\t\t- **public/css**: CSS files\n\t\t\t- **public/js**: *client-side* JavaScript files\n\t\t\t- **public/images**: images\n\t\t\t- **public/media**: media files such as audio or video files\n\t\t\t- **public/download**: any downloadable files such as PDF or Zip files\n\t- **public/css/main.css**\n\t\t-------------------------------------\n\t\tbody {\n\t\t\tbackground-color: #ccc;\n\t\t\tpadding: 0 1rem;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\t\t-------------------------------------\n\t- now define this public directory as the directory that will serve the static files for our site\n\t\t- **index.ts**\n\t\t\t--------------------------------------------------\n\t\t\tapp.use(express.static('public'));\n\t\t\t--------------------------------------------------\n\t- your page will be formatted with the CSS file##hhformaskjdf\n\t- note that when you **view source**, you can navigate to the **main.css** file to which your browser has access\n\t\t- since it is being served as a static file along with any other file and directory we put in the **public** directory##notesonjsiesour\n\t- and note that this set up also works at Render, even after compiling our TypeScript files to JavaScript in the **npm run build** process:##onrenderfixjcss\n- **>>> 8. Create books and about pages**\n\t- we will now add a menu and three pages to our site: **Welcome**, **Books**, **About**\n\t- renaming refactoring\n\t\t- rename **src/index.ts** to **src/server.ts** which makes more sense\n\t\t\t- be sure to fix this in **package.json**\n\t\t\t\t- **package.json**\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\t\"scripts\": {\n\t\t\t\t\t\t\"dev\": \"nodemon\",\n\t\t\t\t\t\t\"start\": \"node dist/server.js\",\n\t\t\t\t\t\t\"build\": \"tsc -p tsconfig.json\"\n\t\t\t\t\t},\n\t\t\t\t\t\"nodemonConfig\": {\n\t\t\t\t\t\t\"watch\": [\n\t\t\t\t\t\t\t\"src\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"ext\": \"ts, json\",\n\t\t\t\t\t\t\"exec\": \"tsx src/server.ts\"\n\t\t\t\t\t},\t\t\t\t\t\n\t\t\t\t\t-------------------------------------------------\n\t\t- rename **src/pages/index.ejs** to **src/pages/welcome.ejs** which makes more sense\n\t- **server.ts**\n\t\t----------------------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.render('pages/welcome', { books: model.getBooks() });\n\t\t});\n\n\t\tapp.get('/books', (req, res) => {\n\t\t\tres.render('pages/books', {});\n\t\t});\n\n\t\tapp.get('/about', (req, res) => {\n\t\t\tres.render('pages/about', {});\n\t\t});\n\t\t----------------------------------------\n\t- **src/views/pages/books.ejs**\n\t\t---------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\" />\n\t\t\t<title>Books</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>books page</p>\n\t\t</body>\n\n\t\t</html>\n\t\t---------------------------------------------\n\t- **src/views/pages/about.ejs**\n\t\t---------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\" />\n\t\t\t<title>About</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<p>about page</p>\n\t\t</body>\n\n\t\t</html>\n\t\t---------------------------------------------\n\t- note that all pages work#gif#pagesworkformenujsk\n- **>>> 9. Make a head and menu components and fill each page with content**\n\t- we now want a menu that we can include on each page\n\t\t- something like a React component\n\t\t- in EJS we call these **partials**\n\t- make pages more efficient by taking chunks of code that repeat on each page and put them into respective partials\n\t\t- **src/views/partials/menu.ejs**\n\t\t\t-----------------------------------------------\n\t\t\t<nav>\n\t\t\t\t<a href=\"/\">Welcome</a>\n\t\t\t\t<a href=\"books\">Books</a>\n\t\t\t\t<a href=\"about\">About</a>\n\t\t\t</nav>\n\t\t\t-----------------------------------------------\n\t\t- **header.ejs**\n\t\t\t-----------------------------------------\n\t\t\t<h1>The Info Site</h1>\n\t\t\t-----------------------------------------\n\t\t- **htmlHead.ejs**\n\t\t\t-----------------------------------------\n\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\" />\n\t\t\t-----------------------------------------\n\t- on each page, include the partials\n\t\t- **welcome.ejs**\n\t\t\t-----------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\n\t\t\t<head>\n\t\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t\t<title>Info Site</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t<%- include('../partials/header') %>\n\t\t\t\t<%- include('../partials/menu') %>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t</body>\n\n\t\t\t</html>\t\n\t\t\t-----------------------------------------\n\t\t- **books.ejs**\n\t\t\t-----------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\n\t\t\t<head>\n\t\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t\t<title>Info Site</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t<%- include('../partials/header') %>\n\t\t\t\t<%- include('../partials/menu') %>\n\t\t\t\t<div>\n\t\t\t\t\tThese are <%=books.length%> books:\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<% books.forEach(function(book) { %>\n\t\t\t\t\t\t\t<li><%= book.title %></li>\n\t\t\t\t\t\t\t<% }) %>\n\t\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</body>\n\n\t\t\t</html>\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **about.ejs**\n\t\t\t-----------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html>\n\n\t\t\t<head>\n\t\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t\t<title>Info Site</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t<%- include('../partials/header') %>\n\t\t\t\t<%- include('../partials/menu') %>\n\t\t\t\t<p>This is the about page.</p>\n\t\t\t</body>\n\n\t\t\t</html>\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **server.ts** - send data to books page instead of welcome page\n\t\t\t---------------------------------\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.render('pages/welcome');\n\t\t\t});\n\n\t\t\tapp.get('/books', (req, res) => {\n\t\t\t\tres.render('pages/books', { books: model.getBooks() });\n\t\t\t});\n\n\t\t\tapp.get('/about', (req, res) => {\n\t\t\t\tres.render('pages/about');\n\t\t\t});\t\t\t\n\t\t\t---------------------------------\n\t\t- style new pages\n\t\t\t- **main.css**\n\t\t\t\t--------------------------------------------\n\t\t\t\tbody {\n\t\t\t\t\tbackground-color: #ccc;\n\t\t\t\t\tpadding: 0 1rem;\n\t\t\t\t\tfont-family: sans-serif;\n\t\t\t\t}\n\n\t\t\t\tnav {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tgap: .5rem;\n\t\t\t\t\tbackground-color: #bbb;\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t}\n\n\t\t\t\tnav a {\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tcolor: navy;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------------------\n\t- the site now has a clickable menu\n\t\t- note that each time you click on a page\n\t\t\t- unlike on client-side frameworks like React and Vue.js\n\t\t\t- there is a **complete server round-trip** with Node/Express web servers\n\t\t- this makes \n\t\t\t- SEO and social-media previews **better**\n\t\t\t\t- each page can have its own meta tags, title and content sent directly to the client on each page click\n\t\t\t- mobile expierence **worse**\n\t\t\t\t- e.g. on a smart phone you have a noticable wait and flashing/blinking with the page reload\n\t- the site now works like this#gif#newsiteclickdinjd\n- **>>> 10. Highlight current page in menu**\n\t- make a style for a menu link that has the class \"active\"\n\t\t- **main.css**\n\t\t\t------------------------------------------------\n\t\t\tnav a {\n\t\t\t\ttext-decoration: none;\n\t\t\t\tcolor: #111;\n\t\t\t}\n\n\t\t\tnav a.active {\n\t\t\t\tcolor: brown;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\t\t\t\t\n\t\t\t------------------------------------------------\n\t- from each page, send the idCode of the page to the menu partial\n\t\t- **welcome.ejs**\n\t\t\t-----------------------------------------------\n\t\t\t<%- include('../partials/menu', {pageIdCode: 'welcome'}) %>\n\t\t\t-----------------------------------------------\n\t\t- **books.ejs**\n\t\t\t-----------------------------------------------\n\t\t\t<%- include('../partials/menu', {pageIdCode: 'books'}) %>\n\t\t\t-----------------------------------------------\n\t\t- **about.ejs**\n\t\t\t-----------------------------------------------\n\t\t\t<%- include('../partials/menu', {pageIdCode: 'about'}) %>\n\t\t\t-----------------------------------------------\n\t- in the menu partial, set the active class appropriately based on the pageIdCode sent\n\t\t- **menu.ejs**\n\t\t\t----------------------------------------------\n\t\t\t<nav>\n\t\t\t\t<a href=\"/\" class=\"<%=pageIdCode === 'welcome' ? 'active' : ''%>\">Welcome</a>\n\t\t\t\t<a href=\"books\" class=\"<%=pageIdCode === 'books' ? 'active' : ''%>\">Books</a>\n\t\t\t\t<a href=\"about\" class=\"<%=pageIdCode === 'about' ? 'active' : ''%>\">About</a>\n\t\t\t</nav>\n\t\t\t----------------------------------------------\n\t- the menu now shows the current page as highlighted#gif#ashighghipageok\n- **>>> 11. Add 404 page**\n\t- **server.ts**\n\t\t-----------------------------------------------------\n\t\tapp.get('*', (req, res) => {\n\t\t\tres.status(404).render('pages/404');\n\t\t});\n\t\t-----------------------------------------------------\n\t- **src/views/pages/404.ejs**\n\t\t-----------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html>\n\n\t\t<head>\n\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<%- include('../partials/header') %>\n\t\t\t<%- include('../partials/menu', {pageIdCode: 'welcome'}) %>\n\t\t\t<p style=\"margin-top: 2rem\"><span class=\"danger\">Sorry, you have requested a page that does not exist.</span></p>\n\t\t</body>\n\n\t\t</html>\t\t\n\t\t-----------------------------------------------\n\t- **main.css**\n\t\t----------------------------------------\n\t\t.danger {\n\t\t\tcolor: red;\n\t\t\tbackground-color: #333;\n\t\t\tpadding: 1rem;\n\t\t\tborder-radius: .3rem;\n\t\t}\t\t\n\t\t----------------------------------------\n\t- site now shows 404 page:#gif#shothej4404page\n- **>>> 12. Make welcome page available at / and /welcome**\n\t- if you want to have two URLs point to one page\n\t\t- simply make a new route and point it to the same page as another route\n\t\t- for example, in our case, we want to have **/** and **/welcome** both show the Welcome page\n\t- **server.ts**\n\t\t-------------------------------------------------\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.render('pages/welcome');\n\t\t});\n\n\t\tapp.get('/welcome', (req, res) => {\n\t\t\tres.render('pages/welcome');\n\t\t});\n\t\t-------------------------------------------------\n\t- now going to either **/** or **/welcome** shows the welcome page#gif#bothsdksjwelcome\n- **>>> 13. Load books via API and display on books page**\n\t- install axios\n\t\t- `npm i axios`\n\t- **interface.ts**\n\t\t------------------------------------\n\t\texport interface IBook {\n\t\t\tidCode: string;\n\t\t\ttitle: string;\n\t\t\tdescription: string;\n\t\t}\t\t\n\t\t------------------------------------\n\t- **model.ts**\n\t\t----------------------------------\n\t\timport axios from 'axios';\n\t\timport { IBook } from './interfaces';\n\n\t\texport const getBooks = async () => {\n\t\t\treturn new Promise<IBook[]>(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await axios.get('https://edwardtanguay.vercel.app/share/books.json');\n\t\t\t\t\tconst rawBooks: any[] = response.data;\n\t\t\t\t\tconst books: IBook[] = [];\n\t\t\t\t\tfor (const rawBook of rawBooks) {\n\t\t\t\t\t\tconst book: IBook = {\n\t\t\t\t\t\t\tidCode: rawBook.idcode,\n\t\t\t\t\t\t\ttitle: rawBook.title,\n\t\t\t\t\t\t\tdescription: rawBook.description\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbooks.push(book);\n\t\t\t\t\t}\n\t\t\t\t\tresolve(books);\n\t\t\t\t}\n\t\t\t\tcatch (e) {\n\t\t\t\t\treject({ message: \"unknown error occurred\" })\n\t\t\t\t}\n\t\t\t});\n\t\t}\t\t\n\t\t----------------------------------\n\t- **server.ts**\n\t\t----------------------------------------------\n\t\tapp.get('/books', async (req, res) => {\n\t\t\tres.render('pages/books', { books: await model.getBooks() });\n\t\t});\t\t\n\t\t----------------------------------------------\n\t- site now loads and shows books from API called via asynchronous axios call:##frosjdfaxioskdhsna\n- **>>> 14. Style book site and serve images**\n\t- set up images on site\n\t\t- download the book images from here: https://edwardtanguay.vercel.app/share/books.zip\n\t\t- unpack the images and put them in **public/images/books**\n\t- **books.ejs**\n\t\t----------------------------------------------\n\t\t<div>\n\t\t\t<p>These are <%=books.length%> books:</p>\n\t\t\t\t<div class=\"books\">\n\t\t\t\t\t<% books.forEach(function(book) { %>\n\t\t\t\t\t\t<img src=\"images/books/<%=book.idCode%>.png\" title=\"<%=book.title.toUpperCase()%>: <%=book.description%>\"/>\n\t\t\t\t\t<% }) %>\n\t\t\t\t</div>\n\t\t</div>\t\t\n\t\t----------------------------------------------\n\t- **main.css**\n\t\t---------------------------------------------\n\t\tdiv.books {\n\t\t\tdisplay: flex;\n\t\t\tflex-wrap: wrap;\n\t\t\tgap: .5rem;\n\t\t}\n\n\t\tdiv.books img {\n\t\t\twidth: 10rem;\n\t\t\theight: fit-content;\n\t\t}\t\t\n\t\t---------------------------------------------\n\t- books are now displayed on the page, data is being loaded via API, images are local##theallbooksdkjfsdk\n- **>>> 15. Make single book page**\n\t- **book.ejs**\n\t\t----------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html>\n\n\t\t<head>\n\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t<link rel=\"stylesheet\" href=\"../css/main.css\" />\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<%- include('../partials/header') %>\n\t\t\t<%- include('../partials/menu', {pageIdCode: 'book'}) %>\n\t\t\t<div class=\"book\">\n\t\t\t\t<img src=\"../images/books/<%=book.idCode%>.png\" />\n\t\t\t\t<div>\n\t\t\t\t\t<p class=\"title\"><%=book.title%></p>\n\t\t\t\t\t<p class=\"description\"><%=book.description%></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</body>\n\n\t\t</html>\t\t\n\t\t----------------------------------------------\n\t- **books.ejs**\n\t\t--------------------------------------------------\n\t\t<% books.forEach(function(book) { %>\n\t\t\t<a href=\"/book/<%=book.idCode%>\">\n\t\t\t\t<img src=\"images/books/<%=book.idCode%>.png\"/>\n\t\t\t</a>\n\t\t<% }) %>\t\n\t\t--------------------------------------------------\n\t- **server.ts**\n\t\t--------------------------------------\n\t\tapp.get('/book/:idCode', async (req, res) => {\n\t\t\tconst idCode = req.params.idCode;\n\t\t\tconst books = await model.getBooks();\n\t\t\tconst book = books.find(m => m.idCode === idCode);\n\t\t\tif (book) {\n\t\t\t\tres.render('pages/book', { book });\n\t\t\t} else {\n\t\t\t\tres.status(404).render('pages/404');\n\t\t\t}\n\t\t});\t\t\n\t\t--------------------------------------\n\t- **main.css**\n\t\t---------------------------------------\n\t\tdiv.book {\n\t\t\tdisplay: flex;\n\t\t\tgap: 1rem;\n\t\t\tmargin-top: 2rem;\n\t\t}\n\n\t\tdiv.book .title {\n\t\t\tmargin: 0;\n\t\t\tfont-size: 2rem;\n\t\t}\n\n\t\tdiv.book .description {\n\t\t\tfont-style: italic;\n\t\t\tfont-size: 1.2rem;\n\t\t\twidth: 50rem;\n\t\t}\n\n\t\tdiv.book img {\n\t\t\twidth: 15rem;\n\t\t\theight: fit-content;\n\t\t}\t\t\n\t\t---------------------------------------\n\t- books are now clickable and lead to the book page like this:#gif#gbookskdjbpage\n- **>>> 16. Create SEO and social media previews for links to books**\n\t- for better SEO and social media previews, add the appropriate meta tags to each page\n\t- **books.ejs**\n\t\t-------------------------------------------------------\n\t\t<meta property=\"og:title\" content=\"Edward's books'\"/>\n\t\t<meta property=\"og:description\" content=\"These are all of Edward's books that he is currently reading.'\"/>\n\t\t-------------------------------------------------------\n\t- **book.ejs**\n\t\t--------------------------------------------------\n\t\t<meta property=\"og:title\" content=\"<%=book.title%>\"/>\n\t\t<meta property=\"og:description\" content=\"<%=book.description%>\"/>\n\t\t<meta property=\"og:image\" content=\"https://et370-node-express-ejs-site.onrender.com/images/books/<%=book.idCode%>.png\"/>\n\t\t--------------------------------------------------\n\t- now when you post a link of a book in e.g. Slack, you will receive the following preview with image##thecslackpost","points":20,"extras":"","systemWhenCreated":"2024-01-16 11:23:09","systemWhoCreated":"systemUnknown"},{"id":815,"category":"Handlebars","title":"Create server-side Node/Express site with Handlebars and implement client-side loading","body":"- **what we will create**\n\t- in this howto, we will create a local Node/Express website with TypeScript\n\t- instead of using the templating engine EJS as we did in [this howto](https://tanguay-eu.vercel.app/howtos/814), we will use **Handlebars**\n\t\t- **EJS and Handlebars** are equally popular with **13 million downloads** per week\n\t\t\t- as a comparison of popularity:\n\t\t\t\t- **Axios** has **47 million downloads** per week\n\t\t\t\t- **Express** has **26 million downloads** per week\n\t\t\t\t- **React** has **21 million downloads** per week\n\t\t\t\t- **Winston** has **10 million downloads** per week\n\t\t- **Handlebars** has arguably a **simpler syntax than EJS** and so is a good choice for building websites with Node/Express##ejshandgraph\n- **why create a Node/Express site with a templating engine**\n\t- websites built with **Node/Express** don't really compete with \n\t\t- client-side frameworks such as React, Angular and Vue.js\n\t\t- server-side *+ client-side* frameworks such as Next.js, Nuxt and Remix\n\t- but rather compete with **classic server-side solutions**:\n\t\t- **Laravel** websites (**PHP** backend, **TypeScript** frontend)\n\t\t- **.NET** websites (**C#** backend, **TypeScript** frontend)\n\t\t- **Django** websites (**Python** backend, **TypeScript** frontend)\n\t\t- **Spring Boot** websites (**Java** backend, **TypeScript** frontend)\n\t\t- **Node/Express** websites (**TypeScript** backend, **TypeScript** frontend)\n\t- in this space, the obvious advantage that **Node/Express** websites have is\n\t\t- you have the **same language in the frontend as you do in the backend**\n\t\t- since **TypeScript has become a mature language** that compares with C# and Java, you no longer have a disadvantage with JavaScript\n\t- also, combining a classic server-side solution with a client-side solution such as Vue.js\n\t\t- you can **manually build** a custom website that deliever solutions not unlike **Next.js** and **Nuxt**\n\t\t- as a learning exercise, building custom website with Node/Express with TypeScript in the backend and frontend, is a good way to more deeply understand the concepts which the server-side JavaScript frameworks such as Next.js and Nuxt are solving today##clienserversiderend\n\t- having the **skills** to set up a quick Node/Express website enables you to quickly build\n\t\t- **developer tools** that run on either your local network, e.g.\n\t\t\t- monitoring dashboards\n\t\t\t- data-conversion tools\n\t\t\t- custom internal tools that enable you to control internal processes, workflows via a web interface\n\t- the main advantage of backend frameworks is the combination that they have\n\t\t- complete access to the **operating system** to be able to e.g.\n\t\t\t- create/delete/change files and directory\n\t\t\t- start/stop processes\n\t\t- ability to interact with the user/developer via a **web browser**\n\t- companies use templating engines and [list them as desired/required skills](https://de.indeed.com/jobs?q=handlebars&l=&from=searchOnHP&vjk=89f7cdbef8180b2b)\n- **features we will build into the website in this howto**\n\t- in order to demonstrate some of these advantages of a Node/Express web site\n\t- in the project in this howto, we will\n\t\t- create a hybrid site by using Vue.js to enhance client-side interaction\n- **site will work like this**\n\t- it will look the same as the EJS site\n\t- but will implement client-side loading in order to provide a better user experience with e.g. slow-loading data#gif#thewaitijgksbooks\n- **code is here**\n\t- https://github.com/edwardtanguay/et411-node-express-handlebars-site - 2024-01-17 research (incomplete code)\n\t- https://github.com/edwardtanguay/et412-node-express-handlebars-site - 2024-01-17 preparation\n- **>>> 1. Set up copy of Node/Express/TypeScript/EJS site**\n\t- copy and clone the Node/Express/TypeScript/EJS project repository\n\t\t- instead of starting from scratch, we will convert a functioning Node/Express/TypeScript/EJS website that we made with [this howto](https://tanguay-eu.vercel.app/howtos/814)\n\t\t\t- and simply swap out EJS with Handlebars\n\t\t\t- if you want to learn the process of building up such a site from scratch, then work through that howto first\n\t\t- go to the [repository](https://github.com/edwardtanguay/et371-node-express-ejs-site) of the Node/Express/TypeScript/EJS site \n\t\t- click on **Use this template** and **Create a new repository**##thestmeplusejkd\n\t\t- give your repository a name such as **et412-node-express-handlebars-site**##thanemreposjsjs\n\t\t- in your terminal, clone the project e.g. `git clone git@github.com:edwardtanguay/et412-node-express-handlebars-site.git`\n\t\t- enter VSCode in that directory with e.g. `code et411-node-express-handlebars-site.git`\n\t- setup and start website\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- CTRL-click on the url shown##ctrlclickonit\n\t\t- the site should work like this in your browser#gif#likethisthesiteinbro\n- **>>> 2. Convert base site to Handlebars**\n\t- install handlebars\n\t\t- `npm i express-handlebars`\n\t- \t\t\t\n\t\t- **server.ts**\n\t\t\t--------------------------------------\n\t\t\timport { engine } from 'express-handlebars';\n\n\t\t\tapp.engine('.hbs', engine({\n\t\t\t\textname: '.hbs',\n\t\t\t\tlayoutsDir: path.join(baseDir, '/src/views/layouts'),\n\t\t\t\tpartialsDir: path.join(baseDir, '/src/views/partials'),\n\t\t\t}));\t\t\t\n\n\t\t\tapp.set('view engine', '.hbs');\n\t\t\t--------------------------------------\n\t\t- convert all **.ejs** extensions to **.hbs**\n- **>>> 3. Convert welcome page to Handlebars**\n\t- load the welcome page in the browser now, and you will see that Handlebars is looking for a **main layout** file##needsthemain\n\t- unlike EJS, Handlebars always requires a default **layout** named **main** so let's set that up\n\t\t- **src/views/layouts/main.hbs**\n\t\t\t-------------------------------------------\n\t\t\t<html>\n\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\" />\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t\t\t<title>INFO SITE</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t{{{body}}}\n\t\t\t</body>\n\n\t\t\t</html>\t\t\t\t\n\t\t\t-------------------------------------------\n\t- since our **main layout** now has the HTML/BODY code for each site\n\t\t- reduce **welcome.hbs** down to what will be inside the body\n\t\t\t--------------------------------------------\n\t\t\t<p>Welcome to this site.</p>\n\t\t\t--------------------------------------------\n\t\t- you will see a minimal site:##hbwlecomjs\n\t- passing a variable to a page is the same as in EJS:\n\t\t- **server.ts**\n\t\t\t-------------------------------------------------\n\t\t\tconst versionName = 'Handlebars 1.0';\n\n\t\t\tapp.get('/', (req, res) => {\n\t\t\t\tres.render('pages/welcome', {versionName});\n\t\t\t});\n\n\t\t\tapp.get('/welcome', (req, res) => {\n\t\t\t\tres.render('pages/welcome', {versionName});\n\t\t\t});\t\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- for variables, where EJS had `<%= varName %>`, Handlebars has `{{{varName}}}`\n\t\t- **welcome.hbs**\n\t\t\t--------------------------------------------------\n\t\t\t<p>Welcome to the {{{versionName}}} version of this site.</p>\n\t\t\t--------------------------------------------------\n\t\t- welcome page now shows the variable##showthatjsversion\n\t- add style sheet\n\t\t- **main.hbs** - make sure you put a **/** in front of the style sheet path, to make it absolute\n\t\t\t------------------------------------------------\n\t\t\t<link rel=\"stylesheet\" href=\"/css/main.css\">\t\t\t\t\n\t\t\t------------------------------------------------\n\t\t- stylesheet is now attached##stylessshsdfj\n\t- implement the Handlebars version of the menu partial\n\t\t- **menu.hbs**\n\t\t\t-----------------------------------------\n\t\t\t<nav>\n\t\t\t\t<a href=\"/\" class=\"{{#ifEquals pageIdCode \"welcome\"}}active{{/ifEquals}}\">Welcome</a>\n\t\t\t\t<a href=\"/books\" class=\"{{#ifEquals pageIdCode \"books\"}}active{{/ifEquals}}\">Books</a>\n\t\t\t\t<a href=\"/about\" class=\"{{#ifEquals pageIdCode \"about\"}}active{{/ifEquals}}\">About</a>\n\t\t\t</nav>\t\t\t\t\n\t\t\t-----------------------------------------\n\t\t- oddly, Handlebars doesn't support conditional string comparison natively\n\t\t\t- so we have to \"create and register a helper\" to do this, we will call it **ifEquals**\n\t\t\t- install **handlebars** itself (we installed **express-handlebars** above)\n\t\t\t\t- `npm i handlebars`\n\t\t\t- **server.ts**\n\t\t\t\t---------------------------------------------------------\n\t\t\t\timport Handlebars from 'handlebars';\n\n\t\t\t\tHandlebars.registerHelper('ifEquals', (arg1, arg2, options) => {\n\t\t\t\t\treturn (arg1 == arg2) ? options.fn(this) : options.inverse(this);\n\t\t\t\t});\n\t\t\t\t---------------------------------------------------------\n\t\t- where EJS used `<%- partialName, {prop: value} %>` to include a partial, Handlebars uses `{{>partialName prop=\"value\"}}`\n\t\t\t- **welcome.hbs**\n\t\t\t\t----------------------------------------------\n\t\t\t\t{{>menu pageIdCode=\"welcome\"}}\n\t\t\t\t----------------------------------------------\n\t\t- you now have a menu##nowhavemeneue\n\t- add header partial\n\t\t- **header.hbs** is the same as with EJS\n\t\t- since the head is on every page, in Handlebars we can add it to the layout\n\t\t\t- **main.hbs**\n\t\t\t\t-------------------------------------\n\t\t\t\t<body>\n\t\t\t\t\t{{>header}}\n\t\t\t\t\t{{{body}}}\n\t\t\t\t</body>\n\t\t\t\t-------------------------------------\n\t\t- you now have a header##nowhaveheadfdkfj\n- **>>> 4. Convert books page to Handlebars**\n\t- if you click at the books page now, you see the old EJS syntax:##thebookspajskdjd\n\t- paste in the Handlebars version of the page\n\t\t- **books.hbs**\n\t\t\t---------------------------------------------------\n\t\t\t{{>menu pageIdCode=\"books\"}}\n\n\t\t\t<div>\n\t\t\t\t<p>There are {{{books.length}}} books.</p>\n\t\t\t\t<div class=\"books\">\n\t\t\t\t\t{{#books}}\n\t\t\t\t\t<a href=\"book/{{{idCode}}}\"><img class=\"book\"\n\t\t\t\t\t\t\t src=\"images/books/{{{idCode}}}.png\" /></a>\n\t\t\t\t\t{{/books}}\n\t\t\t\t</div>\n\t\t\t</div>\t\t\t\n\t\t\t---------------------------------------------------\n\t- Handlebars version of the books page has been converted##thebookskskskpage\n- **>>> 5. Convert book page to Handlebars**\n\t- if you click on one of the books, you see the book page with the old EJS syntax:##thebookspajskdjd222\n\t- **book.hbs**\n\t\t---------------------------------------------------\n\t\t{{>menu pageIdCode=\"books\"}}\n\n\t\t<div class=\"book\">\n\t\t\t<img class=\"book\"\n\t\t\t\t src=\"../images/books/{{{book.idCode}}}.png\" />\n\t\t\t<div>\n\t\t\t\t<p class=\"title\">{{{book.title}}}</p>\n\t\t\t\t<p class=\"description\">{{{book.description}}}</p>\n\t\t\t\t<p class=\"amazon\"><a target=\"_blank\" href=\"{{{book.buyUrl}}}\">Buy at Amazon</a></p>\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t---------------------------------------------------\n\t- book page is conversted to Handlebars##nowthbooksokdhbs\n- **>>> 6. Convert about page to Handlebars**\n\t- **about.hbs**\n\t\t---------------------------------------------------\n\t\t{{>menu pageIdCode=\"about\"}}\n\t\t<p>This is the about page.</p>\n\t\t<p>Version 0.2</p>\t\t\n\t\t---------------------------------------------------\n\t- about page converted##aboutpagkjd\n- **>>> 7. Convert the 404 page to Handlebars**\n\t- **404.hbs**\n\t\t---------------------------------------\n\t\t{{>menu pageIdCode=\"404\"}}\n\t\t<p style=\"margin-top: 2rem\"><span class=\"danger\">Sorry, you have requested a page that does not exist.</span></p>\t\t\n\t\t---------------------------------------\n\t- 404 page converted to Handlebars##th404ksdj\n- **>>> 8. Convert the books page to load client-side instead of server-side**\n\t- background\n\t\t- a problem with server-side sites is\t\n\t\t\t- if the page takes a long time to load it's data\n\t\t\t- the user doesn't get to see any data until the page has all its data\n\t\t- a solution to this problem is to send down a minimal amount of HTML to the browser \n\t\t\t- so that user at least sees something immediately\n\t\t\t- along with the HTML content\n\t\t\t- JavaScript is sent as well\n\t\t\t- which then executes on the browser\n\t\t\t- while a page loader and/or information is shown to the user\n\t\t\t- to inform them that data is loading \n\t\t\t- then the JavaScript code fetches data from a route on your Node/Express application\n\t\t\t- that acts as an API which serves JSON instead of HTML\n\t\t- in this way, your web server becomes a hybrid **web server** and **API**\n\t\t\t- optimizing how data loads\n\t\t\t- in order to optimize the user experience\n\t\t- understanding how this works, gives you insight into the problems that popular server-side web frameworks are trying to solve\n\t\t\t- such as Next.js, Nuxt, Remix, etc.\n\t- let's implement an example of this client-side/server-side hybrid functionality \n\t\t- by sending Vue.js code down with the HTML for our books page\n\t\t- the Vue.js will execute\n\t\t- show a waiting spinner\n\t\t- then fetch and display the books a few seconds later\n\t- as a first step, let's send Vue.js code down along with the HTML which simply changes an element on the page\n\t\t- **main.hbs**\n\t\t\t----------------------------------------------\n\t\t\t<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\t\t\t----------------------------------------------\n\t\t- **books.hbs**\n\t\t\t-------------------------------------------------\n\t\t\t<div id=\"vueapp\">\n\t\t\t\t<h1>TESTING: [\\{{message}}]</h1>\n\t\t\t\t<p>There are {{{books.length}}} books.</p>\n\t\t\t\t<div class=\"books\">\n\t\t\t\t\t{{#books}}\n\t\t\t\t\t<a href=\"book/{{{idCode}}}\"><img class=\"book\"\n\t\t\t\t\t\t\t src=\"images/books/{{{idCode}}}.png\" /></a>\n\t\t\t\t\t{{/books}}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<script>\n\t\t\t\tVue.createApp({\n\t\t\t\t\tdata() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessage: \"\"\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\tmethods: {\n\t\t\t\t\t\tinitialize() {\n\t\t\t\t\t\t\tthis.message = \"TEXT FROM VUE.JS\";\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}).mount('#vueapp').initialize();\n\t\t\t</script>\n\t\t\t-------------------------------------------------\n\t\t- the text inserted by Vue.js will be showed##thevueswiljs\n\t\t- note that the H1 element is not being filled until the JavaScript is loaded and executed on the browser\n\t\t- note also that the **/** is necessary to tell Handlebars not to parse the Vue.js brackets as Handlebar brackets##showthevuehand\n- **>>> 9. Create an API route that Vue.js can load in the background**\t\n\t- **server.ts** - insert before the 404 catchall route\n\t\t--------------------------------------------------\n\t\tapp.get('/api/books', async (req, res) => {\n\t\t\tres.json(await model.getBooks());\n\t\t});\t\t\n\t\t--------------------------------------------------\n\t- the books JSON is now served on http://localhost:4116/api/books##thenojksjwiiapi\n- **>>> 10. Change the books page so it doesn't render the books on the server anymore**\t\n\t- since we will be loading the books on the client now\n\t\t- we no longer need to load them on the server\n\t\t- instead of showing books, we will show an animated spinner\n\t\t- this will be sent to the client and shown until it is replaced by the books HTML that Vue.js loads on the browser\n\t- **main.css**\n\t\t-----------------------------------------\n\t\t.spinner {\n\t\t\tmargin: 2rem 1rem;\n\t\t\tpadding: 2rem;\n\t\t\tborder: 1rem solid rgba(0, 0, 0, 0.1);\n\t\t\tborder-top: 1rem solid orangered;\n\t\t\tborder-radius: 50%;\n\t\t\twidth: 40px;\n\t\t\theight: 40px;\n\t\t\tanimation: spin 1s linear infinite;\n\t\t}\n\n\t\t@keyframes spin {\n\t\t\t0% {\n\t\t\t\ttransform: rotate(0deg);\n\t\t\t}\n\n\t\t\t100% {\n\t\t\t\ttransform: rotate(360deg);\n\t\t\t}\n\t\t}\t\t\n\t\t-----------------------------------------\n\t- **books.hbs**\n\t\t----------------------------------------\n\t\t<div id=\"vueapp\">\n\t\t\t<div class=\"books\">\n\t\t\t\t<div class=\"booksContent\"></div>\n\t\t\t\t<div class=\"spinner\"></div>\n\t\t\t</div>\n\t\t</div>\t\t\n\t\t----------------------------------------\n\t- now the spinner is shown instead of the books#gif#thespinjjjsshown\n- **>>> 11. Program Vue.js to load the books and replace the spinner with the book images**\t\n\t- **books.hbs**\n\t\t---------------------------------------------------\n\t\t{{>menu pageIdCode=\"books\"}}\n\n\t\t<div id=\"vueapp\">\n\t\t\t<div class=\"books\">\n\t\t\t\t<div v-for=\"book in books\">\n\t\t\t\t\t<a :href=\"`book/${book.idCode}`\"><img class=\"book\"\n\t\t\t\t\t\t\t :src=\"`images/books/${book.idCode}.png`\" /></a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-if=\"books.length === 0\"\n\t\t\t\t class=\"spinner\"></div>\n\t\t</div>\n\n\t\t<script>\n\t\t\tVue.createApp({\n\t\t\t\tdata() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tbooks: []\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tmethods: {\n\t\t\t\t\tinitialize() {\n\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\tconst response = await fetch('http://localhost:4116/api/books');\n\t\t\t\t\t\t\tthis.books = await response.json();\n\t\t\t\t\t\t})();\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}).mount('#vueapp').initialize();\n\t\t</script>\n\t\t---------------------------------------------------\n\t- let's put in a 2 second wait in order to emulate slow data loading\n\t\t- **model.ts**\n\t\t\t--------------------------------------------\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve(books);\n\t\t\t}, 2000);\n\t\t\t--------------------------------------------\n\t\t- be sure to remove the loading of the books from the **books** route\n\t\t\t- **server.ts**\n\t\t\t\t----------------------------------------------------\n\t\t\t\tapp.get('/books', async (req, res) => {\n\t\t\t\t\tres.render('pages/books');\n\t\t\t\t});\t\t\t\t\n\t\t\t\t----------------------------------------------------\n\t- books now load like this:#gif#thewaitijgksbooks","points":20,"extras":"","systemWhenCreated":"2024-01-17 20:38:07","systemWhoCreated":"systemUnknown"},{"id":816,"category":"JavaScript","title":"Install and try out Bun 1.0","body":"- after the barage of hype, I finally installed Bun to see a bit how it works and if it can solve any problems I have\n- reading [Bun docs](https://bun.sh/docs)\n\t- Bun is a runtime designed as a drop-in replacement for Node.js\n\t- written in [Zig](https://ziglang.org)\n\t\t- Zig is a language like Rust or Go\n\t\t\t- \"Rust is concerned with memory safety, zig is concerned with memory control.\"\n\t- TypeScript and JavaScript supported out-of-the-box\n\t- install Bun\n\t\t- `npm i -g bun`\n\t\t- took 25 seconds to install\n- build HTTP server with [quickstart](https://bun.sh/docs/quickstart)\n\t- `mkdir et453-bun-server`\n\t- `bun init -y`\n\t- it has node_modules, I think it was supposed to save them centrally##thewithnodmodl\n\t- `bun run index.ts` says \"Hello via Bun!\"\n\t- open project in VSCode\n\t\t- `code .`\n\t- index.ts\n\t\t--------------------------------------------------\n\t\tconst server = Bun.serve({\n\t\t    port: 3000,\n\t\t    fetch(req) {\n\t\t        return new Response(\"This works.\")\n\t\t    }\n\t\t});\n\n\t\tconsole.log(`Listening on http://localhost:${server.port}`);\n\t\t--------------------------------------------------\n\t- works nicely\n- add script\n\t---------------------------------------------------\n\t\"scripts\": {\n\t\t\"start\": \"bun run index.ts\"\n\t},\n\t---------------------------------------------------\n\t- then `bun run start`\n- install a package and test out TypeScript and sending JSON\n\t- `bun add lodash-es`\n\t- `bun add @types/lodash-es`\n\t- **index.ts**\n\t\t-----------------------------------------------\n\t\timport { sortBy } from 'lodash-es';\n\n\t\tinterface IUser {\n\t\t    name: string;\n\t\t    age: number;\n\t\t}\n\n\t\tconst users = [\n\t\t  { name: 'John', age: 32 },\n\t\t  { name: 'John', age: 15 },\n\t\t  { name: 'Jane', age: 25 }\n\t\t];\n\n\t\tconst sortUsers = (_users: IUser[]) => {\n\t\t    return sortBy(_users, ['name', 'age']);\n\t\t}\n\n\t\tconst server = Bun.serve({\n\t\t    port: 3000,\n\t\t    fetch(req) {\n\t\t        return Response.json(sortUsers(users))\n\t\t    }\n\t\t});\n\n\t\tconsole.log(`Listening on http://localhost:${server.port}`);\n\t\t-----------------------------------------------\n\t- it works: ##thewhoeljson\n- get nodemon-like functionality to work with Bun using `--hot`\n\t- **package.json**\n\t\t--------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"start\": \"bun --hot run index.ts\"\n\t\t},\n\t\t--------------------------------------\n- now testing the speed of a large Vite React application\n\t- git cloned local\n\t- on Windows, Node took 8 seconds with `npm i`\n\t- on Ubuntu, Node took 8 seconds with `npm i`##nodewith8seconds\n\t- on Ubuntu, Bun took 38 seconds with `bun i`##the37secbun\n\t- so hmm, at least in this case  Bun isn't faster than Node at all, but over 4x slower","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-01-20 12:28:54","systemWhoCreated":"systemUnknown"},{"id":817,"category":"MySQL","title":"Install MySQL on Ubuntu, import Northwind database and create EJS site that serves data from the MySQL database","body":"- **what we will do**\n\t- this howto will show you how to install MySQL on Ubuntu and use in as a database to serve data in a website\n- **code is here**\n\t- https://github.com/edwardtanguay/et641-ejs-site-with-mysql - preparation\n\t- https://github.com/edwardtanguay/et642-ejs-site-with-mysql - live-coding 2024-01-23\n- **website looks like this**##mmmmainstijsmysql\n- **>>> 1. Install MySQL**\n\t- these instructions will show you how to\n\t\t- install MySQL on Ubuntu\n\t\t- install MySQL Workbench to manage your MySQL databases\n\t\t\t- since one time that I installed Workbench on Linux the character encoding was broken, I also show how to install an alternative MySQL manager: DBeaver\n\t\t- if you want to install MySQL on **Windows** instead of Ubuntu, see this howto:\n\t\t\t- [Install MySQL and MySQL Workbench on Windows and import Northwind database](https://tanguay-eu.vercel.app/howtos/577)\n\t- make sure you don't already have MySQL installed\n\t\t- `dpkg --get-selections | grep mysql`\n\t\t\t- shows six lines with \"install\"\n\t\t- `mysql -V`\n\t\t\t- shows: \"mysql  Ver 8.0.35-0ubuntu0.22.04.1 for Linux on x86_64 ((Ubuntu))\"\n\t\t- `mysql -u root -p`\n\t\t\t- asks for password, the one I saved didn't work\n\t\t- if you don't have it installed, it looks something like this:##nomysqlwithv\n\t\t- if you have MySQL installed, it will look something like this:##mmmhmsql\n\t- if you do have MySQL installed for some reason, and want to **uninstall** it to then start with a fresh system\n\t\t- (note that by uninstalling your MySQL server, any data in the MySQL databases will be lost)\n\t\t- `sudo systemctl stop mysql`\n\t\t- `sudo apt-get purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*`##mmm234un\n\t\t- `sudo rm -rf /etc/mysql /var/lib/mysql`\n\t\t- `sudo apt autoremove`\n\t\t- `sudo apt autoclean`\n\t- **install MySQL**\n\t\t- `sudo apt update`\n\t\t\t- can take ca. 30 seconds\n\t\t- `sudo apt install mysql-server`\n\t\t\t- can take ca. 3 minutes\t\n\t\t- to enter the MySQL server, we need superuser status\n\t\t\t- `sudo mysql`\n\t\t\t- note that you area automatically logged in as the **root** user and can freely view all current databases, etc.##mmmshowthedata\n\t\t- as good practice, let's secure the MySQL server as we would have the server in production, which is also a good idea for your local development setup\n\t\t\t- `ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootroot';`\n\t\t\t\t- the password **rootroot** is simply to show here on this howto\n\t\t\t\t- of course change it accordingly to fit your purposes, e.g. \n\t\t\t\t\t- if local test database: use a simple password that is easy to remember\n\t\t\t\t\t- if production: use a highly secure password\n\t\t\t- `quit`\n\t\t\t- `sudo mysql_secure_installation`##theanonanon\n\t\t\t\t- first two questions about passwords:\n\t\t\t\t\t- for development: answer no\n\t\t\t\t\t- for production: answer yes\n\t\t\t\t- remove anonymous users: YES\n\t\t\t\t- disallow root remotely: YES\n\t\t\t\t- remove test database: YES\n\t\t\t\t- reload privilege tables: YES\n\t\t\t\t- note that mysql database is now secure, even root user needs mysql password\n\t\t\t\t- log in and out to test\n\t\t\t\t\t- `sudo mysql -u root -p`##mmmrootin\n\t\t\t\t- log out with `quit`\n- **>>> 2. Import the Northwind database into MySQL server**\n\t- we will now import a realistic database into our MySQL server\n\t- download SQL files which we will import as database content\n\t\t- in the Ubuntu terminal, make directory `~/northwindSetup`\n\t\t- https://github.com/dalers/mywind\n\t\t- download as zip file##downloadassszip\n\t\t- unpack and copy these two files to `~/northwindSetup`\n\t\t\t- northwind.sql\n\t\t\t- northwind-data.sql\n\t- set up the database\n\t\t- in terminal, navigate to setup directory\n\t\t\t- `cd ~/northwindSetup`\n\t\t- log into mysql\n\t\t\t- `sudo mysql -u root -p`\n\t\t- `SHOW DATABASES;` (only four originals)\n\t\t- `CREATE DATABASE northwind;`\n\t\t- `SHOW DATABASES;` (now lists northwind)\n\t\t- `USE northwind;`\n\t\t- `SHOW TABLES;` (none)\n\t\t- `SOURCE northwind.sql;`\n\t\t- `SHOW TABLES;`##mmshowtables\n\t\t- `SELECT * FROM customers;` (empty)\n\t\t- `SOURCE northwind-data.sql`\n\t\t- `SELECT * FROM customers;`\n\t\t- `SELECT company,last_name,first_name FROM customers;`\n\t\t\t- notice if special characters such as in **Pérez** and apostrophes are being displayed correctly##showingcorrectutttf8\n\t\t- `exit` \n- **>>> 3. Create secure webuser that only has read rights to the northwind database**\n\t- since our API will be read only, let's make user that can only READ database but not WRITE data\n\t\t- this is a strategy to increase security\n\t\t- this way, if a hacker can get access to our database as this user, he still can only read data, not write it\n\t- list all current users on the MySQL server\n\t\t- `SELECT User FROM mysql.user;`\n\t- create the webuser\n\t\t- `CREATE USER webuser@localhost IDENTIFIED BY 'passpass';`\n\t- list users again to see that it was added\n\t\t- `SELECT User FROM mysql.user;`\n\t- in order that this user has only specific rights, let's first remove all rights\n\t\t- `revoke all privileges on *.* from webuser@localhost;`\n\t- now let's give the user READ-ONLY writes, which in SQL is \"SELECT\"\n\t\t- `GRANT SELECT on *.* TO webuser@localhost`\n- **>>> 4. Login as webuser to show that he only has read rights**\n\t- get out of MySQL back to the Linux prompt\n\t\t- `exit`\n\t- log into MySQL as webuser\n\t\t- `mysql -u webuser -p`\n\t- confirm that, as webuser, you can view data but not change it\n\t\t- `SHOW DATABASES;`\n\t\t- `use northwind;`\n\t\t- `SHOW TABLES;`\n\t\t- `DESCRIBE products;`##mmmdescribeprod\n\t\t- `select product_name, list_price from products;`##mmmlistprod\n\t\t- `INSERT INTO products (product_name) VALUES (\"Product 888\");`##mmmtrytotinser\n- **>>> 5. install MySQL management console applications**\n\t- we want to have some way of visually editing our MySQL database\n\t\t- so let's install some tools for that\n\t- **install MySQL Workbench**\n\t\t- if you want to check if you have this installed with snap already, remove it and install it fresh:##mmmsnaplist\n\t\t- install with snap\n\t\t\t- `snap install mysql-workbench-community`\n\t\t- Show Applications\n\t\t\t- add to favorites##mmmaddtofav\n\t\t\t- open##thworkworkbenc\n\t\t- click \"Local instance 3306\" and log in as **root**\n\t\t- click on the arrow to display schemas##mmmthearrorw\n\t\t- show all customers and make sure that your installation can display special characters as in \"Pérez\"##mmmshowpereznorth\n\t\t- test to see if you can edit the data in the database\n\t\t\t- make a small change and click **Apply**##mmmontwochange\n\t\t\t- log into mysql in the terminal again and see if the data has changed##mmmlechange\n\t- **install DBeaver**\n\t\t- since I've experienced UTF-8 issues with MySQL Workbench in the past\n\t\t\t- let me show you how to install another useful tool to manage your MySQL databases\n\t\t- `sudo snap install dbeaver-ce`\n\t\t- add to favorites\n\t\t- open\n\t\t- **yes** to create sample database\n\t\t\t- explore sample database\n\t\t\t- if it asks, allow it to download SQLite drivers##mmmdbeaverkj\n\t\t- connect to MySQL database\n\t\t\t- Database\n\t\t\t- New Database Connection\n\t\t\t- enter credentials for root##mmmloginbeav\n\t\t- explore tables, make a change, and apply it to the database##mmmmakeashcan\n\t\t- log into your mysql from the terminal and see that the change is also reflected there##mmmxiwchange\n- **>>> 6. Create a simple API that gets its data from the MySQL database and serves it on a route**\n\t- we will now create the simplest API to demonstrate how to get and use data from a MySQL database in Node\n\t- create a new folder in projects, e.g.\n\t\t- `mkdir et889-simple-express-mysql`\n\t- enter this directory in VSCode\n\t\t- `code et889-simple-express-mysql`\n\t- create an npm project\n\t\t- `npm init -y`\n\t- install everything we need\n\t\t- `npm i express mysql dotenv`\n\t- **server.js**\n\t\t------------------------------------------------------------\n\t\timport express from 'express';\n\t\timport mysql from 'mysql';\n\t\timport dotenv from 'dotenv';\n\n\t\tconst app = express();\n\t\tconst port = 3032;\n\t\tdotenv.config();\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send('test api');\n\t\t});\n\n\t\tapp.get('/customers', (req, res) => {\n\t\t\tconst connection = mysql.createConnection({\n\t\t\t\thost: 'localhost',\n\t\t\t\tuser: process.env.MYSQL_USER,\n\t\t\t\tpassword: process.env.MYSQL_PASSWORD,\n\t\t\t\tdatabase: 'northwind'\n\t\t\t});\n\t\t\tconnection.connect((err) => {\n\t\t\t\tif (err) throw err;\n\t\t\t\tconst sql = 'SELECT company,last_name,first_name FROM customers';\n\t\t\t\tconnection.query(sql, (err, records) => {\n\t\t\t\t\tif (err) throw err;\n\t\t\t\t\tres.send(records);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`Listening on http://localhost:${port}`);\n\t\t});\n\t\t------------------------------------------------------------\n\t- **.env**\n\t\t----------------------------------------------------------\n\t\tMYSQL_USER = webuser\n\t\tMYSQL_PASSWORD = thepass\n\t\t----------------------------------------------------------\n\t- start the API\n\t\t- `node server.js`\n\t- the main route should work: http://localhost:3032##thetestapijsmmm\n\t- now go to the customers route in which MySQL is accessed: http://localhost:3032/customers\n\t\t- **POTENTIAL PROBLEM**: depending on your version of Node, you may get this error:##mzsqlkserr\n\t\t- **SOLUTION**: \n\t\t\t- you need to make a change for the mysql user that is connecting to the database so that it can connect via your version of Node\n\t\t\t- log into mysql as **root** and make this change for the **webuser**:\n\t\t\t\t- `ALTER USER 'webuser'@'localhost' IDENTIFIED WITH mysql_native_password BY 'thepass';`\n\t\t\t\t- `FLUSH PRIVILEGES;`\n\t- customers will show like this:##mmmcustomersworks\n- **>>> 7. Create a EJS website that serves data from a MySQL database**\n\t- set up a base EJS website from a template\n\t\t- go to this **Node/Express EJS Website Template with TypeScript**\n\t\t\t- https://github.com/edwardtanguay/template-node-express-ejs-website-typescript/tree/dev\t\n\t\t- \"Use this template\"\n\t\t- \"Create a new repository\"\n\t\t- name it something like **et641-ejs-site-with-mysql**\n\t\t- clone your new repository locally\n\t\t- open it in VSCode\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- the site should look like this:##mmmtebooks\n\t- replace the **Books** page with an **Employees** page and display mock employee data first\n\t\t- **interfaces.ts**\n\t\t\t----------------------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\tid: number;\n\t\t\t\tfirst_name: string;\n\t\t\t\tlast_name: string;\n\t\t\t\tjob_title: string;\n\t\t\t}\n\t\t\t----------------------------------------------------\n\t\t- **model.ts**\n\t\t\t---------------------------------------------------\n\t\t\timport { IEmployee } from './interfaces';\n\n\t\t\texport const getEmployees = () => {\n\t\t\t\treturn new Promise<IEmployee[]>(async (resolve, reject) => {\n\t\t\t\t\tresolve([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\tfirst_name: 'first1',\n\t\t\t\t\t\t\tlast_name: 'last1',\n\t\t\t\t\t\t\tjob_title: 'title1'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\tfirst_name: 'first2',\n\t\t\t\t\t\t\tlast_name: 'last2',\n\t\t\t\t\t\t\tjob_title: 'title2'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 3,\n\t\t\t\t\t\t\tfirst_name: 'first3',\n\t\t\t\t\t\t\tlast_name: 'last3',\n\t\t\t\t\t\t\tjob_title: 'title3'\n\t\t\t\t\t\t}\n\t\t\t\t\t])\n\t\t\t\t})\n\t\t\t}\n\t\t\t---------------------------------------------------\n\t\t- **server.ts**\n\t\t\t---------------------------------------------------\n\t\t\tapp.get('/employees', async (req, res) => {\n\t\t\t\tres.render('pages/employees', { employees: await model.getEmployees() });\n\t\t\t});\n\t\t\t---------------------------------------------------\n\t\t- **employees.ejs**\n\t\t\t----------------------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\n\t\t\t<head>\n\t\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t\t\t<title>Info Site</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t<%- include('../partials/header') %>\n\t\t\t\t<%- include('../partials/menu', {pageIdCode: 'employees'})%>\n\t\t\t\t<div>\n\t\t\t\t\t<p>There are\n\t\t\t\t\t\t<%= employees.length %> employees.\n\t\t\t\t\t</p>\n\t\t\t\t\t<div class=\"employees\">\n\t\t\t\t\t\t<% employees.forEach((employee) => { %>\n\t\t\t\t\t\t\t<div class=\"employee\">\n\t\t\t\t\t\t\t\t<p class=\"name\"><%=employee.first_name%> <%=employee.last_name%></p>\n\t\t\t\t\t\t\t\t<p class=\"job_title\"><%=employee.job_title%></p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<% }) %>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</body>\n\n\t\t\t</html>\n\t\t\t----------------------------------------------------\n\t\t- search your project for **book** and delete all the book residue code\n\t\t- your employee page with mock data should look like this:##mmmthedataemppage\n\t- replace mock employee data with real employee data from the MySQL database\n\t\t- install tools you will need\n\t\t\t- `npm i mysql`\n\t\t\t- `npm i -D @types/mysql`\n\t\t\t- `npm i dotenv`\n\t\t- **mysqltools.ts**\n\t\t\t------------------------------------------------------------\n\t\t\timport mysql from 'mysql';\n\t\t\timport dotenv from 'dotenv';\n\n\t\t\tdotenv.config();\n\n\t\t\texport const getRecordsWithSql = <T>(sql: string) => {\n\t\t\t\treturn new Promise<T[]>((resolve, reject) => {\n\t\t\t\t\tconst connection = mysql.createConnection({\n\t\t\t\t\t\thost: 'localhost',\n\t\t\t\t\t\tuser: process.env.MYSQL_USER,\n\t\t\t\t\t\tpassword: process.env.MYSQL_PASSWORD,\n\t\t\t\t\t\tdatabase: 'northwind'\n\t\t\t\t\t});\n\t\t\t\t\tconnection.connect((err) => {\n\t\t\t\t\t\tif (err) throw err;\n\t\t\t\t\t\tconnection.query(sql, (err, records) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treject({\n\t\t\t\t\t\t\t\t\tmessage: err\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresolve(records);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\t------------------------------------------------------------\n\t\t- **model.ts**\n\t\t\t---------------------------------------------------\n\t\t\texport const getEmployees = () => {\n\t\t\t\treturn new Promise<IEmployee[]>(async (resolve, reject) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst employees = await getRecordsWithSql<IEmployee>('SELECT * FROM employees');\n\t\t\t\t\t\tresolve(employees);\n\t\t\t\t\t}\t\n\t\t\t\t\tcatch(e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\n\t\t\t\t})\n\t\t\t}\n\t\t\t---------------------------------------------------\n\t\t- **.env**\n\t\t\t----------------------------------\n\t\t\tMYSQL_USER = webuser\n\t\t\tMYSQL_PASSWORD = thepass\n\t\t\t----------------------------------\n\t\t- employees page will look like this:##mmmnewemplsite\n\t- format and style the employees page\n\t\t- **main.css**\n\t\t\t----------------------------------------\n\t\t\t.employee {\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t}\n\n\t\t\t.employee .name {\n\t\t\t\tfont-size: 1.2rem;\n\t\t\t\tmargin: 0;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\n\t\t\t.employee .job_title {\n\t\t\t\tfont-style: italic;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t\t----------------------------------------\n\t\t- pages looks like this:##mmmformaemp\n\t- add images of employees\n\t\t- delete all book images in `public/images/books`\n\t\t- create a directory `public/images/employees`\n\t\t\t- download images from [this page](https://edwardtanguay.vercel.app/share)##mmmthepicsforeemp\n\t\t- **employees.ejs**\n\t\t\t---------------------------------------------\n\t\t\t<div class=\"employee\">\n\t\t\t\t<img src=\"images/employees/employee_<%=employee.id%>.jpg\"/>\n\t\t\t\t<div class=\"info\">\n\t\t\t\t\t<p class=\"name\"><%=employee.first_name%> <%=employee.last_name%></p>\n\t\t\t\t\t<p class=\"job_title\"><%=employee.job_title%></p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t---------------------------------------------\n\t\t- **main.css**\n\t\t\t-----------------------------------------------\n\t\t\t.employee {\n\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\tgap: 1rem;\n\t\t\t}\n\n\t\t\t.employee img {\n\t\t\t\twidth: 5rem;\n\t\t\t\tborder-radius: .5rem;\n\t\t\t}\n\t\t\t-----------------------------------------------\n\t\t- the employee page will look like this:##mmmallap\n- **>>> 8. Create customer page that lists number of orders for each customer**\n\t- we will now make a page that executes a more complex SQL command\n\t- in MySQL Workbench or DBeaver, create an SQL command to list customers by number of orders\n\t\t------------------------------------------------\n\t\tSELECT\n\t\t\tc.id,\n\t\t\tc.company as company_name,\n\t\t\tCOUNT(o.id) AS number_of_orders\n\t\tFROM customers AS c\n\t\tLEFT JOIN\n\t\t\torders as o ON c.id = o.customer_id \n\t\tGROUP BY \n\t\t\tc.id, c.company\n\t\tORDER BY \n\t\t\tnumber_of_orders desc\n\t\t------------------------------------------------\n\t- **interfaces.ts**\n\t\t--------------------------------------------\n\t\texport interface ICustomer {\n\t\t\tid: number,\n\t\t\tcompany_name: string,\n\t\t\tnumber_of_orders: number;\n\t\t}\n\t\t--------------------------------------------\n\t- **menu.ejs**\n\t\t--------------------------------------------\n\t\t<a class=\"<%= pageIdCode === 'customers' ? 'active' : '' %>\" href=\"/customers\">Customers</a>\n\t\t--------------------------------------------\n\t- **server.ts**\n\t\t---------------------------------------------\n\t\tapp.get('/customers', async (req, res) => {\n\t\t\tres.render('pages/customers', { customers: await model.getCustomers() });\n\t\t});\n\t\t---------------------------------------------\n\t- **model.ts**\n\t\t---------------------------------------------\n\t\texport const getCustomers = () => {\n\t\t\treturn new Promise<ICustomer[]>(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst customers = await getRecordsWithSql<ICustomer>(`\n\t\tSELECT\n\t\t\tc.id,\n\t\t\tc.company as company_name,\n\t\t\tCOUNT(o.id) AS number_of_orders\n\t\tFROM customers AS c\n\t\tLEFT JOIN\n\t\t\torders as o ON c.id = o.customer_id \n\t\tGROUP BY \n\t\t\tc.id, c.company\n\t\tORDER BY \n\t\t\tnumber_of_orders desc\n\t\t\t\t\t`);\n\t\t\t\t\tconsole.log(customers);\n\t\t\t\t\tresolve(customers);\n\t\t\t\t}\t\n\t\t\t\tcatch(e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\n\t\t\t})\n\t\t}\n\t\t---------------------------------------------\n\t- **customers.ejs**\n\t\t---------------------------------------------\n\t\t<!DOCTYPE html>\n\t\t<html lang=\"en\">\n\n\t\t<head>\n\t\t\t<%- include('../partials/htmlHead') %>\n\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n\t\t\t<title>Info Site</title>\n\t\t</head>\n\n\t\t<body>\n\t\t\t<%- include('../partials/header') %>\n\t\t\t<%- include('../partials/menu', {pageIdCode: 'customers'})%>\n\t\t\t<div>\n\t\t\t\t<p>There are <%= customers.length %> customers.</p>\n\t\t\t\t<div class=\"customers\">\n\t\t\t\t\t<% customers.forEach((customer) => { %>\n\t\t\t\t\t\t<p><%=customer.company_name%> has <%=customer.number_of_orders%> orders.</p>\n\t\t\t\t\t<% }) %>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</body>\n\n\t\t</html>\n\t\t---------------------------------------------\n\t- customer page look like this:##mmmcustomsinfo","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-01-20 14:12:42","systemWhoCreated":"systemUnknown"},{"id":818,"category":"SQLite","title":"Install DB Browser for SQLite on Ubuntu and Windows, learn the basics of SQL, and create an API that serves data from an SQLite file","body":"- **background**\n\t- we'll be working with the database **SQLite** in this howto\n\t- SQLite is an **SQL** database\n\t- there are basically two kinds of database: SQL and NoSQL\n\t- [Understand the history and background of SQL and NoSQL databases](https://tanguay-eu.vercel.app/howtos/573)\n- **code is here**\n\t- https://github.com/edwardtanguay/et401-api-with-sqlite - preparation for live-coding\n\t- https://github.com/edwardtanguay/et402-api-with-sqlite - code from live-coding 2024-01-22\n- **>>> 1. Install DB Browser**\n\t- SQLite is a good database to learn SQL since **an SQLite database is simply a binary file**\n\t- this means there is **no SQL server installation** as with MySQL, Postgres and MongoDB\n\t- you merely need a **database manager tool** to create databases (files) and manage the data in them\n\t- a good cross-platform tool that works similarly on Windows, Linux and Mac is **DB Browser for SQLite**\n\t- **install DB Browser for SQL on Windows**\n\t\t- uninstall\n\t\t\t- if you want to uninstall it, click on the Window, type **uninstall**, find your application, right-click and remove it\n\t\t- install\n\t\t\t- go to the [DB Browser download page](https://sqlitebrowser.org/dl)\n\t\t\t- click the download link##downlodbdb\n\t\t\t- double-click on the downloaded msi file##doudoubddb\n\t\t\t- next, accept, next, next, next, install, finish\n\t\t\t- find in C:\\Programs, right-click and attach to task bar##rightclickandattachto\n\t\t\t- click on the icon in the taskbar to open it, should look like this:##shoulddbdb\n\t\t\t- download test SQLite database file here: [edwardtanguay.vercel.app/share](https://edwardtanguay.vercel.app/share)\n\t\t\t- right-click and download this zip file:##gotothedodb222\n\t\t\t- unzip the SQLite file and put it in your project directory in a new directory named e.g. `c:\\test-sqlite`\n\t\t\t- in the DB Browser application, click on [Open Database], go to e.g. `c:\\test-sqlite` and click on the file named `northwind_database.sqlite`\n\t\t\t- you should see tables shown here:##seetablesok\n\t- **install DB Browser for SQL on Ubuntu**\n\t\t- if you want to uninstall it\n\t\t\t- check to see that it exists as an apt-get application\n\t\t\t\t- `sudo apt list --installed`##calllsquiteij\n\t\t\t\t- if so, remove it:\n\t\t\t\t\t- `sudo apt-get remove sqlitebrowser -y`\n\t\t\t- check to see if it exists as a snap application\n\t\t\t\t- `snap list`##thesdlkonsanp\n\t\t\t\t- if so, remove it:\n\t\t\t\t\t- `sudo snap remove sqlitebrowser`\t\t\t\t\n\t\t- prepare installation\n\t\t\t- `sudo add-apt-repository -y ppa:linuxgndu/sqlitebrowser`\n\t\t\t- `sudo apt-get update`\n\t\t- install\n\t\t\t- install with **apt-get**\n\t\t\t\t- **use this:** `sudo apt-get install sqlitebrowser`\n\t\t\t\t- this one was buggy for me, didn't display tables correctly: `sudo snap install sqlitebrowser`\n\t\t\t- click on 9-dots icon in lower-left and add DB Browser for SQLite to favorites##addtofavdbubun\n\t\t\t- download test SQLite database file here: [edwardtanguay.vercel.app/share](https://edwardtanguay.vercel.app/share)\n\t\t\t- right-click and download this zip file:##gotothedodb222\n\t\t\t- unzip the downloaded .zip file\n\t\t\t- copy the file `northwind_database.sqlite` to e.g. `~/home/edward/projects/test-sqlite`\n\t\t\t- in the DB Browser application, click on [Open Database], go to your `test-sqlite` directory and click on the file named `northwind_database.sqlite`\n\t\t\t- it should look like this:##shouldlooklikei\n- **>>> 2. Learn basic SQL CRUD commands**\n\t- **Read** data\n\t\t- click on the [Execute SQL] table and type: `SELECT * FROM Employees` then press F5 to execute:##thefirsssql\n\t\t- then try these self-explanatory commands and see what they do:\n\t\t\t---------------------------------------------\n\t\t\tSELECT * FROM Employees WHERE BirthDate > '1960-01-01'\n\t\t\tSELECT * FROM Employees WHERE BirthDate > '1960-01-01' ORDER BY BirthDate\n\t\t\tSELECT * FROM Employees WHERE BirthDate > '1960-01-01' ORDER BY BirthDate DESC\n\t\t\tSELECT FirstName, LastName, BirthDate FROM Employees WHERE BirthDate > '1960-01-01' ORDER BY BirthDate DESC\n\t\t\t---------------------------------------------\n\t- **Create** a table\n\t\t- execute CREATE TABLE command with an autoincrementing ID, title and body \n\t\t\t----------------------------------------------\n\t\t\tCREATE TABLE \"Notes\" (\n\t\t\t\t\"id\"\tINTEGER NOT NULL,\n\t\t\t\t\"title\"\tTEXT,\n\t\t\t\t\"body\"\tTEXT,\n\t\t\t\tPRIMARY KEY(\"id\" AUTOINCREMENT)\n\t\t\t)\t\t\t\n\t\t\t----------------------------------------------\n\t- **Insert** records\n\t\t- insert a note\n\t\t\t-------------------------------------------------------------\n\t\t\tINSERT INTO Notes (title,body) VALUES (\"First Note\", \"This is the first note.\")\n\t\t\t-------------------------------------------------------------\n\t\t- list out all notes\n\t\t\t---------------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------------\t\t\n\t\t- insert another note\n\t\t\t-------------------------------------------------------------\n\t\t\tINSERT INTO Notes (title,body) VALUES (\"Second Note\", \"This is the second note.\")\n\t\t\t-------------------------------------------------------------\n\t\t- list out all notes\n\t\t\t---------------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------------\n\t- **Delete** a record\n\t\t- delete the first note\n\t\t\t----------------------------------------------\n\t\t\tDELETE FROM Notes WHERE id = 1\n\t\t\t----------------------------------------------\n\t\t- show that only the second note remains\n\t\t\t---------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------\n\t- **Update** a record\n\t\t- update the second note\n\t\t\t-----------------------------------------\n\t\t\tUPDATE Notes SET title = 'Changed Second Note' WHERE id = 2\n\t\t\t-----------------------------------------\n\t\t- show that the second note's title has changed\n\t\t\t---------------------------------------\n\t\t\tSELECT * FROM Notes\n\t\t\t---------------------------------------\n- **>>> 3. Learn advanced JOIN commands**\n\t- tables in SQL tables are typically related by the primary and foreign keys\n\t- the Northwind database is a good example of tables related by primary and foreign keys:##theforprimkeys\n\t- query data with these relationships using JOIN:\n\t\t-----------------------------------------------------------------\n\t\tSELECT * FROM Employees\n\t\tSELECT * FROM EmployeeTerritories\n\t\tSELECT * FROM Employees AS e JOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID FROM Employees AS e JOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\t-----------------------------------------------------------------\n\t- now join the Terroritories table\n\t\t-----------------------------------------------------\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID,t.TerritoryDescription FROM Employees AS e \n\t\tJOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tJOIN Territories AS t ON et.TerritoryID = t.TerritoryID\n\t\t-----------------------------------------------------\n\t- now only get the information for one employee\n\t\t---------------------------------------------\n\t\tSELECT e.EmployeeID, e.LastName, e.FirstName, et.TerritoryID,t.TerritoryDescription FROM Employees AS e \n\t\tJOIN EmployeeTerritories AS et ON e.EmployeeID = et.EmployeeID\n\t\tJOIN Territories AS t ON et.TerritoryID = t.TerritoryID\n\t\tWHERE e.EmployeeID = 1\n\t\t---------------------------------------------\n\t- the final query will show the joined data from three tables:##thejoindone\n- **>>> 4. Learn as much SQL as you need**\n\t- how much SQL does a developer need to know today?\n\t\t- if you are going to work more in **frontend**\n\t\t\t- you should at least know the basics including all CRUD commands and JOINs \n\t\t\t- e.g. in case you have to query a database or fix a SQL query in some project\n\t\t- if you are going to work **full stack or in backend**, the deeper you understand SQL, the better\n\t\t\t- while ORMs such as Prisma, Sequelize, Drizzle are widely used\n\t\t\t- databases need to be planned and created\n\t\t\t- queries need to be optimized\n\t\t\t- you need to understand what tables and fields to index based on what needs to be most often queried, etc.\n\t- here are some online resources to learn SQL\n\t\t- https://www.w3schools.com/sql\n\t\t\t- interestingly, W3Schools also uses a similar Northwind database as we used above\n\t\t\t- most of the tables and fields are the same \n\t\t- https://sqlbolt.com\n\t\t\t- a series of interactive SQL lessons which give immediate feedback\n\t\t- https://www.sql-easy.com\n\t\t\t- a series of interactive SQL lessons which give immediate feedback\n\t\t- https://www.sqlcourse.com\n\t\t\t- a series of interactive SQL lessons which give immediate feedback\n- **>>> 5. Create API with routes that serve data from an SQLite database (file)**\n\t- to focus on the database in this howto, let's set up a Node/Express API from a starter template\n\t- **set up API**\n\t\t- go to: https://github.com/edwardtanguay/template-api-node-express-typescript-es6-modules-lowdb\n\t\t- \"Use this template\"\n\t\t- \"Create a new repository\"\n\t\t- give your new repository a name, e.g. **et401-api-with-sqlite** (of course don't use et401 but your own initials and number, etc.)\n\t\t- \"Create repository\"\n\t\t- clone it locally\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t\t- click auf dem Link: http://localhost:4206##seethestrxapi\n\t\t- click on the **Get all flashcards** link to make sure it works##withfjsflash\n\t- **set up an /employees route that returns mock data**\n\t\t- our goal is to serve employee data from the route **/employees**\n\t\t\t- the data will come from the SQLite database that we used above\n\t\t- **server.ts**\n\t\t\t--------------------------------------\n\t\t\timport * as employeeHandlers from '../handlers/employeeHandlers.js';\n\n\t\t\tapp.use('/employees', employeeRouter);\n\t\t\t--------------------------------------\n\t\t- **employeerouter.ts**\n\t\t\t----------------------------------------\n\t\t\timport { Router } from 'express';\n\t\t\timport * as employeeHandlers from '../handlers/employeeHandlers.js';\n\n\t\t\texport const employeeRouter = Router();\n\n\t\t\temployeeRouter.get('/', (_req, res) => {\n\t\t\t\tconst employees = employeeHandlers.getAllEmployees();\n\t\t\t\tres.json(employees);\n\t\t\t});\t\t\t\n\t\t\t----------------------------------------\n\t\t- **employeeHandlers.ts**\n\t\t\t-------------------------------------------\n\t\t\texport const getAllEmployees = () => {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tfirstName: 'fff1'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfirstName: 'fff2'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t\t- you will now be able to access your mock employee data with the route **/employees**##withfjsemplejdjdj\n\t- **get data for handler from SQLite database**\n\t\t- copy **northwind_database.sqlite** to **/src/data**\n\t\t- open in DB Browser##openindebkjaskdjf\n\t\t- install the npm package **SQLite3**\n\t\t\t- this will enable us to access our SQLite database via Node\n\t\t\t- `npm i sqlite3`\n\t\t- **interfaces.ts**\n\t\t\t------------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\tid: number,\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\ttitle: string;\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------\n\t\t- **employeeHandlers.ts**\n\t\t\t-------------------------------------------\n\t\t\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\t\t\timport { IEmployee } from '../interfaces.js';\n\t\t\timport * as sqlitetools from './sqlitetools.js';\n\n\t\t\tconst employees:any[] = await sqlitetools.getRecordsWithSql('SELECT * FROM Employees');\n\n\t\t\texport const getAllEmployees = (): IEmployee[] => {\n\t\t\t\treturn employees.map(m => {\n\t\t\t\t\tconst employee: IEmployee = {\n\t\t\t\t\t\tid: m.EmployeeID,\n\t\t\t\t\t\tfirstName: m.FirstName,\n\t\t\t\t\t\tlastName: m.LastName, \n\t\t\t\t\t\ttitle: m.Title\n\t\t\t\t\t}\t\n\t\t\t\t\treturn employee;\n\t\t\t\t})\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------\n\t\t- **sqlitetools.ts**\n\t\t\t----------------------------------------------------\n\t\t\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\t\t\timport sqlite3 from 'sqlite3';\n\t\t\timport path from 'path';\n\n\t\t\tconst baseDir = process.cwd();\n\t\t\tconst absoluteDbPathAndFileName = path.join(baseDir, '/src/data/northwind_database.sqlite');\n\n\t\t\texport const getRecordsWithSql = (sql: string) => {\n\t\t\t\treturn new Promise<any[]>((resolve, reject) => {\n\t\t\t\t\tconst db = new sqlite3.Database(absoluteDbPathAndFileName);\n\t\t\t\t\tdb.all(sql, function (err, records: any[]) {\n\t\t\t\t\t\tif (records === undefined) {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t} else if (records.length === 0) {\n\t\t\t\t\t\t\tresolve([]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(records);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdb.close();\n\t\t\t\t});\n\t\t\t};\t\t\t\n\t\t\t----------------------------------------------------\n- **>>> 6. Add TypeScript generics to getRecordsWithSql in order to make it dynamic**\n\t- in order to get rid of the **any** types that we put into getRecordsWithSql\n\t\t- we are going to have to identify a specific type that we will want to get out of the database\n\t\t- but we can imagine that we will not only want to get IEmployees out of the database with this function, but also e.g.\n\t\t\t- ICustomers\n\t\t\t- IProducts\n\t\t\t- IOrders\n\t\t\t- IShippers\n\t\t\t- ITerritories\n\t\t\t- etc.\n\t\t- and we don't want to write a new function for each of these types\n\t\t- therefore, we will use an advanced feature of TypeScript (and C#/Java) called **Generics**\n\t\t- we will make our function getRecordsWithSql **generic** by allowing it to process **any kind of type**\n\t- **interfaces.ts**\n\t\t--------------------------------------\n\t\texport interface INorthwindEmployee {\n\t\t\tEmployeeID: number,\n\t\t\tFirstName: string,\n\t\t\tLastName: string,\n\t\t\tTitle: string;\n\t\t}\t\t\n\t\t--------------------------------------\n\t- **sqlitetools.ts** - convert the **any** types to **T**\n\t\t----------------------------------------------------\n\t\texport const getRecordsWithSql = <T>(sql: string) => {\n\t\t\treturn new Promise<T[]>((resolve, reject) => {\n\t\t\t\tconst db = new sqlite3.Database(absoluteDbPathAndFileName);\n\t\t\t\tdb.all(sql, function (err, records: T[]) {\n\t\t\t\t\tif (records === undefined) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else if (records.length === 0) {\n\t\t\t\t\t\tresolve([]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(records);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tdb.close();\n\t\t\t});\n\t\t};\t\t\n\t\t----------------------------------------------------\n\t- **employeeHandlers.ts** - here we send the type that we want getRecordsWithSql to process\n\t\t----------------------------------------------\n\t\tconst employees = await sqlitetools.getRecordsWithSql<INorthwindEmployee>('SELECT * FROM Employees');\n\t\t----------------------------------------------\n- **CHALLENGE: Create a route to get a single employee with ID, e.g. /employee/3**\n- **CHALLENGE: Create CRUD routes for employees**","points":20,"extras":"","systemWhenCreated":"2024-01-21 19:55:55","systemWhoCreated":"systemUnknown"},{"id":820,"category":"Postgres","title":"Install Postgres on Ubuntu and create React Site with API that serves data from Postgres database","body":"- **what will we do**\n\t- this howto is an intro to Postgres by installing and using it on Ubuntu\n\t- we will first install it, then create a user and a database\n\t- then create a local website application that displays the data from the Postgres database in a React site\n- **code is here**\n\t- https://github.com/edwardtanguay/et401-react-site-with-postgres-api - preparation\n\t- https://github.com/edwardtanguay/et402-react-site-with-postgres-api - from live-coding: 2024-01-24\n- **we will enter data in Postgres, read into Node, and display in React**##threeposnode\n- **>>> 1. install Postgres**\n\t- preparation\n\t\t- `sudo apt update`\n\t- install postgres\n\t\t- `sudo apt install postgresql postgresql-contrib`\n\t- start the service\n\t\t- `sudo systemctl start postgresql.service`\n\t- enter postgres server\n\t\t- `sudo -i -u postgres` (makes you the postgres user at a bash prompt)\n\t\t- `psql`\n\t- exit back out to Linux terminal\n\t\t- `\\q`\n\t\t- `exit`\n- **>>> 2. create default database for user**\n\t- in Postgres, you apparently need to use the same name to create a Postgres user (role), Postgres databaes, and Linux user\n\t- we will use the name \"webuser\" and for now simply give it all rights as superuser, for simplicity sake\n\t- create webuser (role)\n\t\t- first go to postgres user bash prompt\n\t\t\t- `sudo -i -u postgres`\n\t\t- create user \"webuser\"\n\t\t\t- `createuser --interactive`\n\t\t\t\t- `appuser`\n\t\t\t\t- `y` - to the question: Shall the new role be a superuser? \n\t- create default database for user (must be the same name)\n\t\t- `createdb webuser`\n\t- create Linux user with same name\n\t\t- first return to your normal user again\n\t\t\t- `exit`\n\t\t- then create Linux user called \"webuser\"\n\t\t\t- `sudo adduser webuser`\n\t- become that user\n\t\t- `sudo -i -u webuser`\n\t- enter Postgres server\n\t\t- `psql`\n\t- in Postgres, check your status\n\t\t- `\\conninfo`\n\t\t- it will say you are connected to database \"webuser\" as user \"webuser\"\n- **>>> 3. Create a new database**\n\t- create it\n\t\t- `CREATE DATABASE southwind;` (capital letters are necessary!)\n\t- select it\n\t\t- `\\c southwind`\n\t- create table##postgresokok\n\t- insert values##inskpostkj\n\t- display the records\n\t\t- `SELECT * FROM employees;`##selecttableper\n\t- try various SQL commands\n\t\t- `SELECT * FROM employees ORDER BY age;`\n\t\t- `SELECT * FROM employees ORDER BY age DESC;`##dothetablksjdfsd\n- **>>> 4. Create Node script that reads data from Postgres database**\n\t- create test directory\n\t\t- `mkdir test-node-postgres`\n\t- enter project with VSCode\n\t\t- `code test-node-postgres`\n\t- create npm project\n\t\t- `npm init -y`\n\t- install package that make connection to postgres\n\t\t- `npm i pg`\n\t- **server.js**\n\t\t--------------------------------------------------\n\t\timport  pkg from 'pg';\n\n\t\tconst { Pool} = pkg;\n\n\t\tconst dbConfig = {\n\t\t\thost: '127.0.0.1',\n\t\t\tdatabase: 'southwind',\n\t\t\tuser: 'webuser',\n\t\t\tpassword: 'thepass',\n\t\t\tport: 5432\n\t\t};\n\n\t\tconst pool = new Pool(dbConfig);\n\n\t\tconst queryText = 'SELECT * FROM employees';\n\n\t\tpool.query(queryText, (err, result) => {\n\t\t\tif (err) {\n\t\t\t\tpool.end(); \n\t\t\t\tthrow(err);\n\t\t\t} else {\n\t\t\t\tconsole.log(result.rows);\n\t\t\t\tpool.end();\n\t\t\t}\n\t\t});\n\t\t---------------------------------------------------\n\t- execute the script\n\t\t- `node server.js`##ththreeou\n- **>>> 5. Setup Vite-React website in single directory with API that serves data to frontend from Postgres database**\n\t- let's first create an application from a template that has in one directory a React site and Node/Express server already set up and working\n\t- go to: https://github.com/edwardtanguay/template-simple-react-with-node-express-api-one-directory\n\t- \"Use this template\"\n\t- \"Create a new repository\"\n\t- enter name of your repository, e.g. **et401-react-site-with-postgres-api** (use another prefix for et339 of course)\n\t- clone the directory locally, e.g.\n\t\t- `git clone git@github.com:edwardtanguay/et401-react-site-with-postgres-api.git`\n\t- enter the directory with VSCode\n\t\t- `code et401-react-site-with-postgres-api`\n\t- `npm i`\n\t- `npm run dev`\n\t- the site will look like this##thenewsitejsofi\n- **>>> 6. Reduce backend to a simple mock route for /employees**\n\t- **backend/api/index.ts**\n\t\t----------------------------------------------------\n\t\tinterface IEmployee {\n\t\t\tfirst_name: string;\n\t\t\tlast_name: string;\n\t\t\tage: number;\n\t\t}\n\n\t\tapp.get('/employees', (_req, res) => {\n\t\t\tconst employees:IEmployee[] = [\n\t\t\t\t{\n\t\t\t\t\tfirst_name: 'first1',\n\t\t\t\t\tlast_name: 'last1',\n\t\t\t\t\tage: 11\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfirst_name: 'first2',\n\t\t\t\t\tlast_name: 'last2',\n\t\t\t\t\tage: 22\n\t\t\t\t}\n\t\t\t]\n\t\t\tres.json(employees);\n\t\t});\n\t\t----------------------------------------------------\n\t- you can see that the route works in your browser:##mmmfirslast\n- **>>> 7. Fetch the mock employees from the backend and display on the frontend**\n\t- **PageWelcome.tsx**\n\t\t-------------------------------------------------------\n\t\timport { useEffect, useState } from \"react\";\n\t\timport axios from \"axios\";\n\n\t\tconst backendUrl = \"http://localhost:4882\";\n\n\t\tinterface IEmployee {\n\t\t\tfirst_name: string;\n\t\t\tlast_name: string;\n\t\t\tage: number;\n\t\t}\n\n\t\texport const PageWelcome = () => {\n\t\t\tconst [appMessage, setAppMessage] = useState(\"\");\n\t\t\tconst [employees, setEmployees] = useState<IEmployee[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\ttry {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${backendUrl}/employees`);\n\t\t\t\t\t\tsetEmployees(response.data);\n\t\t\t\t\t})();\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconsole.log(`ERROR: ${e.message}`);\n\t\t\t\t\tsetAppMessage(\n\t\t\t\t\t\t`Sorry, we can't retrieve your data at this time. Try again later.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2 className=\"text-red-600\">{appMessage}</h2>\n\t\t\t\t\t{appMessage === \"\" && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t<h2>There are {employees.length} employees:</h2>\n\t\t\t\t\t\t<ul className=\"list-disc ml-6 mt-3\">\n\t\t\t\t\t\t\t{employees.map((employee, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={index}>{employee.first_name} {employee.last_name} is {employee.age} years old.</li>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t-------------------------------------------------------\n\t- the website now looks like this:##nowthewejsidj222\n- **>>> 8. Replace the mock employees with employees from the Postgres database**\n\t- install the npm package for Postgres\n\t\t- `npm i pg`\n\t- **index.ts**\n\t\t----------------------------------------------------------\n\t\timport express from 'express';\n\t\timport cors from 'cors';\n\t\timport pkg from 'pg';\n\n\t\tconst { Pool} = pkg;\n\n\t\tconst dbConfig = {\n\t\t\thost: '127.0.0.1',\n\t\t\tdatabase: 'southwind',\n\t\t\tuser: 'webuser',\n\t\t\tpassword: 'thepass',\n\t\t\tport: 5432\n\t\t};\n\n\t\tconst pool = new Pool(dbConfig);\n\n\t\tinterface IEmployee {\n\t\t\tfirst_name: string;\n\t\t\tlast_name: string;\n\t\t\tage: number;\n\t\t}\n\n\t\tconst app = express();\n\t\tapp.use(cors());\n\t\tconst port = 4882;\n\n\t\tapp.get('/employees', (_req, res) => {\n\n\t\t\tconst queryText = 'SELECT * FROM employees';\n\n\t\t\tpool.query(queryText, (err: unknown, result:any) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tpool.end(); \n\t\t\t\t\tthrow(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst employees: IEmployee[] = result.rows;\n\t\t\t\t\tres.json(employees);\n\t\t\t\t\tpool.end();\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`server is running at http://localhost:${port}`);\n\t\t});\n\t\t----------------------------------------------------------\n\t- the employees from the Postgres database now appear on the React site:##mmpsgsitefinish","points":20,"extras":"","systemWhenCreated":"2024-01-24 00:07:22","systemWhoCreated":"systemUnknown"},{"id":821,"category":"Render","title":"Create Read-only API that runs at Render and uses a Render Postgres database with Prisma","body":"- **what we will do**\n\t- we'll create a Node/Express API that reads from a database\n\t\t- the API will be hosted at Render\n\t\t- and the database (Postgres) will be hosted at Render\n\t- so this database will not be local on the machine, e.g. it won't be\n\t\t- **lowdb** that saves to a local JSON file \n\t\t- **SQLite** that saves to a local SQLite file\n\t\t- **MySQL** that saves to a local MySQL server\n\t\t- **Postgres** that saves to a local Postgres server\n\t- rather, the database will be an **online database hosted at Render**\n\t\t- Render offer Postgres as a database to host for free for a limited time (3 months)\n\t\t- so it is a Postgres database, but not installed locally on our machine\n\t- this means that we will be able to use it\n\t\t- from our API when it is local on our machine\n\t\t- from our API when it is hosted at Render\n\t- instead of communicating directly with the Postgres database with its native SQL commands\n\t\t- we will use an ORM (object-relational mapper) so that we simply ask it for information from the database\n\t\t\t- and the ORM converts our requests into SQL commands and sends us arrays of objects back\n\t\t- we have a wide choice of ORMs to use\n\t\t\t- [Prisma](https://www.prisma.io) - works well with TypeScript, supports most SQL databases and MongoDB, newer, lightweight, popular in tutorials\n\t\t\t- [TypeORM](https://typeorm.io) - less support for TypeScript, higher learning curve\n\t\t\t- [Sequelize](https://sequelize.org) - older, works only with SQL databases, some TypeScript support\n\t\t\t- [Drizzle](https://orm.drizzle.team) - an up-and-coming ORM, supports TypeScript, fast\n\t\t\t- [MicroORM](https://mikro-orm.io) - TypeScript support, not as popular, supports both SQL and NoSQL databases such as MongoDB\n\t\t- in this project, we will use **Prisma**\n- **code is here**\n\t- https://github.com/edwardtanguay/et281-api-with-render-postgres - preparation\n\t- https://github.com/edwardtanguay/et282-api-with-render-postgres - live-coding 2024-01-25\n- **your API will serve an array of web development skills stored in an online Postgres database live at Render**##dothenewpla\n- **>>> 1. Create a free online Postgres database at Render**\n\t- let's do this step first because, particularly during the day, it may take e.g. more than 10 minutes for Render to set up your online database\n\t- go to: https://render.com\n\t- navigate to your Dashboard\n\t- note that free database instances at Render eventually expire and you can only have one running at a time##noteonthefree\n\t- therefore, if you have another database running at the moment, you will have to first suspend it before you can create a new one and make it active\n\t- create a Postgres database##choicsjpost\n\t- give it the same name as your project, e.g. **et281-api-with-render-postgres** (use your own initial and number instead of \"et281\")##sodothedatas\n\t- you will see that it begins creating the database##thecreeee\n\t- after 5-10 minutes, depending on the time of day, you should see in your dashboard that your database is now active##theacissv\n- **>>> 2. Create simple API that returns a list of mock web developer skills**\n\t- while our database is being setup at Render\n\t- let's build a simple JavaScript API that serves two wrotes (we'll convert it to TypeScript later)\n\t\t- `/` - HTML that describes the API\n\t\t- `/skills` - array of skills objects as JSON\n\t- we will first simply send mock objects in order to set up the API\n\t- go to your projects directory\n\t- create directory for this project, e.g. \n\t\t- `mkdir et281-api-with-render-postgres` (use the same name as your database)\n\t- enter into the directory with VSCode\n\t\t- `code et281-api-with-render-postgres`\n\t- create npm project\n\t\t- `npm init -y`\n\t- install packages\n\t\t- `npm i express`\n\t- **src/server.js**\n\t\t---------------------------------------------------\n\t\timport express from 'express';\n\n\t\tconst app = express();\n\t\tconst port = 3889;\n\n\t\tapp.get('/', (req, res) => {\n\t\t\tres.send(`\n\t\t<h1>Skills API</h1>\n\t\t<ul>\n\t\t\t<li><a href=\"/skills\">/skills</a> - web developer skills</li>\n\t\t</ul>\n\t\t\t`);\n\t\t});\n\n\t\tapp.listen(port, () => {\n\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t});\t\t\n\t\t---------------------------------------------------\n\t- **package.js**\n\t\t---------------------------------------------\n\t\t\"scripts\": {\n\t\t\t\"dev\": \"node src/server.js\"\n\t\t},\n\t\t---------------------------------------------\n\t- start the API\n\t\t- `npm run dev`\n\t- click on the link displayed in the terminal\n\t\t- you will see the root route info:##rootrouteinfosd\n\t- set up Git\n\t\t- `git init -b dev`\n\t\t- **.gitignore**\n\t\t\t----------------------------------\n\t\t\tnode_modules\n\t\t\t.env\n\t\t\t----------------------------------\n\t\t- make initial commit\n\t- now create the **/skills** route\n\t\t- **server.js**\n\t\t\t---------------------------------------------\n\t\t\tapp.get('/skills', (req, res) => {\n\t\t\t\tres.json([\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"111\",\n\t\t\t\t\t\tname: \"Test111\",\n\t\t\t\t\t\turl: \"http111\",\n\t\t\t\t\t\tdescription: \"desc111\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"222\",\n\t\t\t\t\t\tname: \"Test222\",\n\t\t\t\t\t\turl: \"http222\",\n\t\t\t\t\t\tdescription: \"desc222\",\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\t});\t\t\t\n\t\t\t---------------------------------------------\n\t\t- in your browser, go to the skills route:##gottojskilsrout\n- **>>> 3. Setup up Prisma and initialize Postgres database**\n\t- install Prisma\n\t\t- `npm i prisma`\n\t- initialize Prisma\n\t\t- `npx prisma init`\n\t- add [VSCode extension for Prisma](https://marketplace.visualstudio.com/items?itemName=Prisma.prisma)\n\t- add your Postgres connection string to your project\n\t\t- go to your Render dashboard\n\t\t- click on your active database:##renderdatajs111\n\t\t- copy your **External Database URL***##copytoexternalskjd\n\t- in the **.env** file that Prisma created, replace the content of **DATABASE_URL** with your Postgres connection string##thepostpoasdj\n\t- add model for skills\n\t\t- this tells Postgres what kind of table to make and how to save the data it gets for this object\n\t\t- **prisma/schema.prisma**\n\t\t\t----------------------------------------------------\n\t\t\tmodel Skill {\n\t\t\t\tid\t\t\tString\t\t@id @default(uuid())\n\t\t\t\tcreatedAt\tDateTime\t@default(now())\n\t\t\t\tidCode\t\tString\t\t@unique\n\t\t\t\tname\t\tString\n\t\t\t\turl\t\t\tString\n\t\t\t\tdescription\tString\n\t\t\t}\n\t\t\t----------------------------------------------------\n\t- perform initial migration\n\t\t- this initializes the database with the models we have created\n\t\t- install Prisma client\n\t\t\t- `npm i @prisma/client`\n\t\t- initialize database\n\t\t\t- `npx prisma migrate dev`\n\t\t\t- when it asks for a name of this migration, type in **init** which is a good name since we are initializing our database##dotheinitksjdf\n- **>>> 4. Create routes to add skills to and read skills from the database**\n\t- **src/db.js**\n\t\t-------------------------------------------\n\t\timport { PrismaClient } from '@prisma/client';\n\n\t\tconst prisma = new PrismaClient();\n\n\t\texport default prisma;\t\t\n\t\t-------------------------------------------\n\t- **server.js**\n\t\t---------------------------------------------\n\t\timport prisma from \"./db.js\";\n\n\t\tapp.use(express.json());\n\n\t\tapp.get('/skills', async (req, res) => {\n\t\t\tconst skills = await prisma.skill.findMany();\n\t\t\tres.json(skills);\n\t\t});\t\t\n\n\t\tapp.post('/skills', async (req, res) => {\n\t\t\tconst _skill = req.body;\n\t\t\ttry {\n\t\t\t\tconst skill = await prisma.skill.create({ data: _skill });\n\t\t\t\tres.status(201);\n\t\t\t\tres.json({ data: skill });\n\t\t\t} catch (e) {\n\t\t\t\tres.status(400);\n\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t}\n\t\t});\t\t\n\t\t---------------------------------------------\n\t- **test.rest**\n\t\t---------------------------------------------\n\t\t@url = http://localhost:3889\n\n\t\t### GET ALL SKILLS\n\t\tGET {{url}}/skills\n\n\t\t### ADD A SKILL\n\t\tPOST {{url}}/skills\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"idCode\":\"111\",\n\t\t\t\"name\":\"nnn\",\n\t\t\t\"url\":\"uuu\",\n\t\t\t\"description\":\"ddd\"\n\t\t}\t\t\n\t\t---------------------------------------------\n\t- add and display display skills to see that Prisma updates and fetches data from the database correctly\n\t\t- note that the fields **id** and **createdAt** are automatically created as stated in the schema#gif#addingjadnshowingjs\n\t\t- note at any time during your testing, you can reset the database with a **migrate reset**##andthedeledata\n- **>>> 5. Use Prisma Studio to manage database data manually**\n\t- `npx prisma studio`#gif#prismastudioksdjsjdf\n- **>>> 6. Import skills into the database**\n\t- we now want to import all these skills into our database\n\t\t- https://edwardtanguay.vercel.app/share/skills.json\n\t- Prisma has a [CLI that can import](https://v1.prisma.io/docs/1.34/prisma-cli-and-configuration/data-import-and-export-jsw9) which we could use\n\t\t- but it comes with its own complexity\n\t\t- and it is good programming practice to create our own CLI\n\t- first we want to abstract the command to save to the database out of the router in to a handler\n\t\t- this way we can call it from our CLI as well\n\t\t- **server.js**\n\t\t\t----------------------------------------------\n\t\t\tapp.post('/skills', async (req, res) => {\n\t\t\t\tconst _skill = req.body;\n\t\t\t\ttry {\n\t\t\t\t\tconst skill = await addSkill(_skill);\n\t\t\t\t\tif (skill !== null) {\n\t\t\t\t\t\tres.status(201);\n\t\t\t\t\t\tres.json({ data: skill });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.status(400);\n\t\t\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tres.status(400);\n\t\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t----------------------------------------------\n\t\t- **handlers.js**\n\t\t\t----------------------------------------------\n\t\t\timport prisma from \"./db.js\";\n\n\t\t\texport const addSkill = async (_skill) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst skill = await prisma.skill.create({ data: _skill });\n\t\t\t\t\treturn skill;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn null\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------------------\n\t\t- test with **test.rest** to make sure you can still add skills to the database and get them from the database\n\t- create base import CLI\n\t\t- first create a CLI command **import** which adds one test skill\n\t\t- **package.json**\n\t\t\t---------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"node src/server.js\",\n\t\t\t\t\"import\": \"node cli/import.js\"\n\t\t\t},\t\t\t\n\t\t\t---------------------------------------\n\t\t- **cli/import.js**\n\t\t\t---------------------------------------\n\t\t\timport { addSkill } from \"../src/handlers.js\";\n\n\t\t\tconst _skill = {\n\t\t\t\t\"idCode\": \"888\",\n\t\t\t\t\"name\": \"nnn\",\n\t\t\t\t\"url\": \"uuu\",\n\t\t\t\t\"description\": \"ddd\"\n\t\t\t};\n\n\t\t\tconst skill = await addSkill(_skill);\n\t\t\tconsole.log(skill);\n\t\t\t---------------------------------------\n\t\t- you can now add a skill by running the import command\n\t\t\t- `npm run import`##theksillakddded\n\t\t- create JSON file to import\n\t\t\t- go to https://edwardtanguay.vercel.app/share/skills.json\n\t\t\t- copy the content into the file **cli/data/skills.json**\n\t\t- **tools.js**\n\t\t\t--------------------------------------------\n\t\t\timport fs from 'fs';\n\n\t\t\texport const readJsonFile = pathAndFileName => {\n\t\t\t\ttry {\n\t\t\t\t\tconst data = fs.readFileSync(pathAndFileName, 'utf8');\n\t\t\t\t\treturn JSON.parse(data);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(`Error reading ${pathAndFileName}:`, error);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **import.js** - note the **locked** variable to protect you from running import script accidentally\n\t\t\t----------------------------------------------\n\t\t\timport { addSkill } from \"../src/handlers.js\";\n\t\t\timport { readJsonFile } from \"../src/tools.js\";\n\n\t\t\tconst locked = true;\n\n\t\t\tconst _skills = readJsonFile('cli/data/skills.json');\n\n\t\t\tfor (const _skill of _skills) {\n\t\t\t\tif (locked) {\n\t\t\t\t\tconsole.log(`TEST IMPORT OF SKILL \"${_skill.name}\"`);\n\t\t\t\t} else {\n\t\t\t\t\tconst skill = await addSkill(_skill);\n\t\t\t\t\tconsole.log(`imported skill \"${_skill.name}\"`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(`${_skills.length} skills`);\t\t\t\n\t\t\t----------------------------------------------\n\t\t- run import script with **locked=true**##thelockedtrusjdkfj\n\t\t- now let's import this data into our database\n\t\t\t- first reset the database so it is empty\n\t\t\t\t- `npx prisma migrate reset`\n\t\t\t- now import script with **locked=false**##skdjfkfalselock\n\t\t\t- check test.rest to see that they were actually added##chceksktestjs\n\t\t\t- notice also that the **unique idCode** restraint found a duplicate skill in our array and refused to import it##refusjdfiimport\n\t\t\t- look in the JSON file and you will find that there is indeed a duplicate object for **Grafana**##thetwographks\n\t\t- be sure to set **locked** back to **true** in the import script so you don't accidently run it again\n- **>>> 7. Convert JavaScript to TypeScript**\n\t- often when you create a quite project, you use JavaScript because it is easier and faster at first\n\t- but if you want to build that project into a larger application, you quickly reach the point where it is advantageous to use TypeScript\n\t\t- for instance, note we have two variables in our application already that are called **skill**\n\t\t\t- _skill = skills without **id** and **whenCreated** fields\n\t\t\t- skill = skills with **id** and **whenCreated** fields\n\t\t\t- this could very easily lead to confusion and errors\n\t\t\t- when converting to TypeScript, we will define an interface for each \n\t\t\t\t- so that if you try to use e.g. **_skill** where **skill** is expect, TypeScript will catch it\n\t\t- in addition, since we are going to publish this to Render\n\t\t\tTypeScript will give us the added protect that it will not publish to Render if there are any TypeScript errors\n\t\t- also, while developing we get intellisense of all our variables\n\t- convert to **TypeScript**\n\t\t- rename all **.js** files to **.ts**\n\t\t- update package.json so that it has all necessary scripts for development and production\n\t\t\t- install needed packages\n\t\t\t\t- `npm i typescript`\n\t\t\t\t- `npm i tsx`\n\t\t\t\t- `npm i nodemon`\n\t\t\t\t- `npm i -D @types/express`\n\t\t\t- **package.json**\n\t\t\t\t-----------------------------------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon\",\n\t\t\t\t\t\"import\": \"node cli/import.js\",\n\t\t\t\t\t\"build\": \"tsc -p tsconfig.json\",\n\t\t\t\t\t\"start\": \"node dist/server.js\"\n\t\t\t\t},\n\t\t\t\t\"nodemonConfig\": {\n\t\t\t\t\t\"watch\": [\n\t\t\t\t\t\t\"src\"\n\t\t\t\t\t],\n\t\t\t\t\t\"ext\": \"ts, json\",\n\t\t\t\t\t\"exec\": \"tsx src/server.ts\"\n\t\t\t\t},\t\t\t\t\n\t\t\t\t-----------------------------------------------------------\n\t\t- **tsconfig.json**\n\t\t\t-------------------------------------------------\n\t\t\t{\n\t\t\t\t\"compilerOptions\": {\n\t\t\t\t\t\"target\": \"es2017\",\n\t\t\t\t\t\"module\": \"nodenext\",\n\t\t\t\t\t\"sourceMap\": true,\n\t\t\t\t\t\"outDir\": \"dist\",\n\t\t\t\t\t\"strict\": true,\n\t\t\t\t\t\"lib\": [\"esnext\"],\n\t\t\t\t\t\"esModuleInterop\": true\n\t\t\t\t},\n\t\t\t\t\"include\": [\"src/**/*.ts\"]\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- test the TypeScript version\n\t\t\t- the API should work at this point\n\t\t\t- `npm run dev`##thewokjsdokokjs\n\t\t- but notice that **npm run build** and **VSCode** is indicating that you have TypeScript errors##thetytstserrros\n\t\t- fix these errors\n\t\t\t- **src/interfaces.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\texport interface INewSkill {\n\t\t\t\t\tidCode: string;\n\t\t\t\t\tname: string;\n\t\t\t\t\turl: string;\n\t\t\t\t\tdescription: string;\n\t\t\t\t}\n\n\t\t\t\texport interface ISkill extends INewSkill {\n\t\t\t\t\tid: string;\n\t\t\t\t\tcreatedAt: Date;\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------------------\n\t\t\t- **handlers.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\texport const addSkill = async (_skill: INewSkill) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst skill:ISkill = await prisma.skill.create({ data: _skill });\n\t\t\t\t\t\treturn skill;\n\t\t\t\t\t} catch (e) { \n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t\t- **tools.ts**\n\t\t\t\t-----------------------------------------\n\t\t\t\texport const readJsonFile = (pathAndFileName: string) => {\t\t\t\t\n\t\t\t\t-----------------------------------------\n\t\t\t- **server.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tapp.get('/skills', async (req, res) => {\n\t\t\t\t\tconst skills: ISkill[] = await prisma.skill.findMany();\n\t\t\t\t\tres.json(skills);\n\t\t\t\t});\n\n\t\t\t\tapp.post('/skills', async (req, res) => {\n\t\t\t\t\tconst _skill: INewSkill = req.body;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst skill = addSkill(_skill);\n\t\t\t\t\t\tif (skill !== null) {\n\t\t\t\t\t\t\tres.status(201);\n\t\t\t\t\t\t\tres.json({ data: skill });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.status(400);\n\t\t\t\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tres.status(400);\n\t\t\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t\t\t}\n\t\t\t\t});\t\t\t\t\n\t\t\t\t--------------------------------------------\n- **>>> 8. Prepare to publish API to Render**\n\t- before we publish to Render, we need to realize that\n\t\t- we have an **unprotected POST route** (!!!)\n\t\t- in no case do we want to put this online where anyone can simply add skills to our database (!!!)\n\t\t\t- the Internet is a place where bots scan ports, send POST requests, and if they get a 200 or 201 HTTP code back\n\t\t\t\t- they know that they have found a database that they can fill with spam\n\t\t\t\t- and go about doing it\n\t- therefore, we want to first secure this route so that it only works offline\n\t\t- **.env**\n\t\t\t-------------------------------------\n\t\t\tAPI_ENVIRONMENT=development\n\t\t\t-------------------------------------\n\t\t- **server.ts**\n\t\t\t----------------------------------------\n\t\t\tapp.post('/skills', async (req, res) => {\n\t\t\t\tif (process.env.API_ENVIRONMENT === 'development') {\n\t\t\t\t\tconst _skill: INewSkill = req.body;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst skill = await addSkill(_skill);\n\t\t\t\t\t\tif (skill !== null) {\n\t\t\t\t\t\t\tres.status(201);\n\t\t\t\t\t\t\tres.json(skill);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.status(400);\n\t\t\t\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tres.status(400);\n\t\t\t\t\t\tres.json({ message: \"there was an error\" });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres.status(401).send('not authorized');\n\t\t\t\t}\n\t\t\t});\t\t\t\n\t\t\t----------------------------------------\n- **>>> 9. Publish API to Render**\n\t- go to your Render dashboard:\n\t\t- https://dashboard.render.com\n\t- create web service##rendcrerser\n\t- deploy from Git repository##deplogit\n\t- click **Connect** on the repository you wish to publish##clisjkconn\n\t- type in the name of your project and fill out the rest of the info##inthenamofpr\n\t- click **Create Web Service**\n\t\t- enter the **environment variables** from your .env file\n\t\t- for **API_ENVIRONMENT**, enter **production** so that your POST route is protected##thenewcrethtwebapp\n\t- it will build for 5-10 minutes, depending on the time of day##itwillbuilkjsksj\n\t- it will then show **Build successful**##buildsssjd\n\t- and then **Your service is live**##serviclive\n\t- click on the URL of your web service##cclciksonthe\n\t- you will see your main page for the API##serseryou\n\t- click on **/skills**##dothenewpla\n\t- now check to make sure that the **POST /skills** is protected\n\t\t- in Postman, sent a POST request to e.g. https://et281-api-with-render-postgres.onrender.com/skills##thenotauth","points":20,"extras":"","systemWhenCreated":"2024-01-24 19:36:39","systemWhoCreated":"systemUnknown"},{"id":822,"category":"Vercel Postgres","title":"Create an online Next.js notes app that reads and writes to a Vercel Postgres database","body":"- **what we will do**\n\t- this howto will create a Next.js website with which you can record notes on your smart phone\n\t- the Next.js website reads and writes to a Vercel Postgres database\n\t- like a Render Postgres database, you can have one instance for free with no credit card required\n\t- in order to secure the route that adds a note to the database, we ask for a pin number each time you add a note\n\t- this pin number is stored in an environment variable at Vercel and as such is a secure secret\n- **code is here**\n\t- https://github.com/edwardtanguay/et991-nextjs-with-vercel-postgres - a research example, everything works but contains unnecessary code from researching\n\t- https://github.com/edwardtanguay/et992-nextpostgres - preparation\n\t- https://github.com/edwardtanguay/et993-nextpostgres - live-coding 2024-01-29\n- **app is online here**\n\t- https://et992-nextpostgres.vercel.app\n- **app works like this**#gif#mmaddnotesapp\n- **>>> 1. Set up a Next.js site, minimize it and publish at Vercel**\n\t- `npx create-next-app et992-nextpostgres`\n\t\t- accept all defaults##accemmalldef222\n\t- `code et992-nextpostgres`\n\t- change port\n\t\t- **package.json**\n\t\t\t-----------------------------------------\n\t\t\t\"dev\": \"next dev -p 3055\",\n\t\t\t-----------------------------------------\n\t- `npm run dev`##nextsitemmmlik3434\n\t- minimize it\n\t\t- **page.tsx**\n\t\t\t-----------------------------------\n\t\t\texport default function Home() {\n\t\t\t\treturn (\n\t\t\t\t\t<main className=\"p-6\">\n\t\t\t\t\t\t<h1 className=\"text-2xl mb-4\">Note Taker</h1>\n\t\t\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t\t\t</main>\n\t\t\t\t);\n\t\t\t}\t\t\t\t\n\t\t\t-----------------------------------\n\t\t- **globals.css**\n\t\t\t--------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\t\t\t\t\n\t\t\t--------------------------------------\n\t\t- **layout.tsx**\n\t\t\t-----------------------------------------\n\t\t\t<body className={`${inter.className} bg-slate-500`}>{children}</body>\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **.prettierrc**\n\t\t\t------------------------------------------\n\t\t\t{\n\t\t\t\t\"trailingComma\": \"es5\",\n\t\t\t\t\"tabWidth\": 4,\n\t\t\t\t\"semi\": true,\n\t\t\t\t\"useTabs\": true,\n\t\t\t\t\"singleQuote\": false\n\t\t\t}\t\t\t\t\n\t\t\t------------------------------------------\n\t\t- site looks like this:##thenotetakjskdjf\n\t\t- push the site to GitHub\n\t\t- publish at Vercel\n- **>>> 2. Create Postgres database at Vercel**\n\t- at Vercel, create the database##dothecreatiiisj\n\t- give it the name of your project/directory##themmdatabase\n\t- connect your database to your project:##connectmmyourpro\n- **>>> 3. Create notes table and fill with data**\n\t- in this section\n\t\t- we will get to know how **Next.js API** works\n\t\t\t- you simply have to create directories\n\t\t\t\t- the directory names become the names of your routes\n\t\t\t\t- each directory has a **route.ts** file that is the code for that route\n\t\t- we will also be writing **SQL commands**\n\t\t\t- i.e. we won't be using an ORM with this database \n\t- install the npm package to connect to the online Vercel Postgres server\n\t\t- `npm i @vercel/postgres`\t\t\t\n\t- create a local environment variable file and copy the Vercel Postgres variables into it\n\t\t- **.env.development.local**\n\t\t\t- to get the contents for it, go to **Storage** and **Copy Snippet**##copytheseenvivars\n\t\t\t- paste them in your environment variable file##addthemmmlikethis\n\t- create an API route that creates the notes table\n\t\t- we will call this route **sql** because it will be a route that we use to execute various SQL commands on our database\n\t\t\t- such as creating or emptying our notes table\n\t\t- we will protect this route so that it can only be executed locally, not online\n\t\t\t- **.env.development.local** - add variable that identifies the app as being local\n\t\t\t\t---------------------------------------------------\n\t\t\t\tAPP_ENV=\"development\"\n\t\t\t\t---------------------------------------------------\n\t\t- **src/app/api/sql/route.ts**\n\t\t\t---------------------------------------------------------\n\t\t\timport { sql } from '@vercel/postgres';\n\t\t\timport { NextResponse } from 'next/server';\n\n\t\t\texport async function GET(request: Request) {\n\t\t\t\ttry {\n\t\t\t\t\tif (process.env.APP_ENV !== 'development') throw Error('not authorized');\n\n\t\t\t\t\t// CREATE NOTES TABLE\n\t\t\t\t\tawait sql`CREATE TABLE IF NOT EXISTS Notes ( id SERIAL PRIMARY KEY, body varchar(255), rank decimal);`;\n\n\t\t\t\t\treturn NextResponse.json(\"ok\", { status: 200 });\n\t\t\t\t} catch (error: any) {\n\t\t\t\t\treturn NextResponse.json(error.message, { status: 500 });\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------------------\n\t\t- simply go to this route in your browser and your SQL command will be executed##gotommmthisroute\n\t\t- online at Vercel you will see that you created a table called Notes with three fields: **id**, **body** and **rank**##onlinemmseethat\n\t\t- now let's make sure this SQL route is protected when it is online\n\t\t- push our changes to GitHub\n\t\t- when you access this route online, you see that it is unauthorized to execute the SQL##itmmislocaked\n\t- now create an API route that adds a new note\n\t\t- since we will also be putting this route online\n\t\t\t- and since we don't have any authentication or authorization built it\n\t\t\t- we will require a simple PIN that the user has to send each time they add a note\n\t\t\t- this pin will be store in an environment variable and so will be a secure secret\n\t\t\t\t- **.env.development.local**\n\t\t\t\t\t------------------------------------------------------------\n\t\t\t\t\tAPP_PIN=\"123\"\n\t\t\t\t\t------------------------------------------------------------\n\t\t\t- Vercel parses and protects the SQL statements, so there is no danger of SQL injection attacks\n\t\t- **src/app/api/add-note/route.ts**\n\t\t\t----------------------------------------------------\n\t\t\timport { sql } from '@vercel/postgres';\n\t\t\timport { NextResponse } from 'next/server';\n\n\t\t\texport const POST = async (req: Request) => {\n\t\t\t\tconst { app_pin, body, rank } = await req.json();\n\n\t\t\t\ttry {\n\t\t\t\t\tif (app_pin !== process.env.APP_PIN) throw Error('not authorized');\n\t\t\t\t\tif (!body || !rank) throw new Error('body and rank required');\n\t\t\t\t\tconst result = await sql`INSERT INTO Notes (body, rank) VALUES (${body}, ${rank})`;\n\t\t\t\t\tconst {rows} = await sql`SELECT * FROM Notes`;\n\t\t\t\t\treturn NextResponse.json({addedItem: rows[rows.length -1]});\n\t\t\t\t}\n\t\t\t\tcatch(error:any) {\n\t\t\t\t\treturn NextResponse.json({error: error.message}, {status: 500});\n\t\t\t\t}\n\t\t\t}\n\t\t\t----------------------------------------------------\n\t\t- let's create a **test.rest** file to test this route\n\t\t\t--------------------------------------------------------------\n\t\t\t@url = http://localhost:3055\n\n\t\t\t### ADD A NOTE\n\t\t\tPOST {{url}}/api/add-note\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"app_pin\": \"123\",\n\t\t\t\t\"body\": \"this is the first note\",\n\t\t\t\t\"rank\": 1.1\n\t\t\t}\n\t\t\t--------------------------------------------------------------\n\t\t- click on **Send Request** and the note will be added to the database##themmisaddedddd\n\t\t- check it online:##addmmthedaodjtadat\n\t\t- note if you send the wrong app_pin, the note will not be added##notennnifnotjscode\n\t\t- now let's create a different app_pin for the online application, and test it with Postman\n\t\t\t- add the environment variable to your project at Vercel##setallnienv\n\t\t\t- commit and push your changes to GitHub\n\t\t\t- in Postman, send a bad code to the online route and see that it is unauthorized##sendmmthebad\n\t\t\t- then send the correct online code and the note will be added to the database##doinghtdatakandin\n\t\t\t- check to make sure the note is actually in the database##chemmtomake\n\t- now create a route that fetches all the notes\n\t\t- note that this route should be a **GET** but it is a **POST**\n\t\t\t- this is to fix a cache bug that when the site is online\n\t\t\t- you can try to set it to GET and see if it works, but it only worked for me when I used **POST**\n\t\t- **src/app/api/get-notes**\n\t\t\t---------------------------------------------------------------\n\t\t\timport { sql } from '@vercel/postgres';\n\t\t\timport { NextResponse } from 'next/server';\n\n\t\t\texport const POST = async (req: Request) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { rows } = await sql`SELECT * FROM Notes ORDER BY rank DESC`;\n\t\t\t\t\treturn NextResponse.json(rows)\n\t\t\t\t}\n\t\t\t\tcatch (error: any) {\n\t\t\t\t\treturn NextResponse.json({ error: error.message }, { status: 500 });\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------------------------\n\t\t- let's test this route in **test.rest**\n\t\t\t-------------------------------------------------------\n\t\t\t### GET ALL NOTES\n\t\t\tPOST {{url}}/api/get-notes\n\t\t\t-------------------------------------------------------\n\t\t- it fetches the notes##getgetnotesworks\n- **>>> 4. Create the React page of the page that uses these routes**\n\t- install axios\n\t\t- `npm i axios`\n\t- **src/app/page.tsx**\n\t\t--------------------------------------------------\n\t\t\"use client\";\n\t\timport axios from \"axios\";\n\t\timport { useEffect, useState } from \"react\";\n\n\t\t// const baseUrl = \"http://localhost:3055\";\n\t\tconst baseUrl = \"\";\n\n\t\tinterface INote {\n\t\t\tid: number;\n\t\t\tbody: string;\n\t\t\trank: number;\n\t\t}\n\n\t\tinterface INewNote {\n\t\t\tbody: string;\n\t\t\trank: string;\n\t\t\tapp_pin: string;\n\t\t}\n\n\t\tconst blankNewNote = {\n\t\t\tbody: \"\",\n\t\t\trank: \"2.5\",\n\t\t\tapp_pin: \"\",\n\t\t};\n\n\t\texport default function Home() {\n\t\t\tconst [notes, setNotes] = useState<INote[]>([]);\n\t\t\tconst [newNote, setNewNote] = useState<INewNote>(structuredClone(blankNewNote));\n\n\t\t\tconst fetchAllNotes = async () => {\n\t\t\t\tconst headers = {\n\t\t\t\t\t\"Cache-Control\": \"no-cache\",\n\t\t\t\t\tPragma: \"no-cache\",\n\t\t\t\t\tExpires: \"0\",\n\t\t\t\t};\n\t\t\t\tconst response = await axios.post(`${baseUrl}/api/get-notes`, {}, {\n\t\t\t\t\theaders,\n\t\t\t\t});\n\t\t\t\tconst _notes = response.data;\n\t\t\t\tsetNotes(_notes);\n\t\t\t};\n\n\t\t\tuseEffect(() => {\n\t\t\t\tfetchAllNotes();\n\t\t\t}, []);\n\n\t\t\tconst handleFieldChange = (fieldIdCode: string, value: string) => {\n\t\t\t\tswitch (fieldIdCode) {\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tnewNote.body = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"rank\":\n\t\t\t\t\t\tnewNote.rank = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"app_pin\":\n\t\t\t\t\t\tnewNote.app_pin = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsetNewNote(structuredClone(newNote));\n\t\t\t};\n\n\t\t\tconst handleSave = () => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await axios.post(\n\t\t\t\t\t\t\t`${baseUrl}/api/add-note`,\n\t\t\t\t\t\t\tnewNote,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsetNewNote(structuredClone(blankNewNote));\n\t\t\t\t\t\tfetchAllNotes();\n\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\talert('Sorry, your note could not be added.');\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<main className=\"p-6\">\n\t\t\t\t\t<h1 className=\"text-2xl mb-4\">Next.js with Vercel Postgres</h1>\n\n\t\t\t\t\t<form className=\"bg-slate-400 p-6 rounded-lg\">\n\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t<label className=\"block mb-1\" htmlFor=\"note\">\n\t\t\t\t\t\t\t\tNote:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\tvalue={newNote.body}\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\thandleFieldChange(\"body\", e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\t\t\tid=\"note\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t<label className=\"block mb-1\" htmlFor=\"rank\">\n\t\t\t\t\t\t\t\tRank:\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tvalue={newNote.rank}\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\thandleFieldChange(\"rank\", e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclassName=\"w-[3rem] text-right\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"rank\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"text-xs mt-1 text-slate-700\">\n\t\t\t\t\t\t\t\t0 = not important, 5 very important, e.g 4.3\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t<label className=\"block mb-1\" htmlFor=\"pin\">\n\t\t\t\t\t\t\t\tPIN\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tvalue={newNote.app_pin}\n\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\thandleFieldChange(\"app_pin\", e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tclassName=\"w-[8rem]\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tid=\"pin\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"text-xs mt-1 text-slate-700\">\n\t\t\t\t\t\t\t\tenter access pin\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"mt-6 flex justify-end\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"bg-slate-700 px-2 py-1 rounded text-slate-400\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\n\t\t\t\t\t<section className=\"mt-6\">\n\t\t\t\t\t\t<h2 className=\"text-1xl mb-4\">\n\t\t\t\t\t\t\tThere are {notes.length} notes:\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{notes.map((note) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-blue-950 flex gap-2 mb-3\"\n\t\t\t\t\t\t\t\t\t\tkey={note.id}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<span className=\"text-yellow-500 bg-slate-600 h-fit w-[1.6rem] p-1 rounded text-xs flex justify-center\">\n\t\t\t\t\t\t\t\t\t\t\t{Number(note.rank).toFixed(1)}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t{note.body}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t);\n\t\t}\n\t\t--------------------------------------------------\n\t- your app will look like this:##andmmtheapp\n\t- commit and push your changes to GitHub\n\t- view your app online and add some notes#gif#mmaddnotesapp","points":20,"extras":"","systemWhenCreated":"2024-01-29 02:10:09","systemWhoCreated":"systemUnknown"},{"id":823,"category":"Next.js","title":"Create a simple e-commerce site with product page and shopping cart with Next.js","body":"- **background**\n\t- this howto builds a simple Next.js site with multiple pages and e-commerce shop features\n\t\t- Products - shows projects with image\n\t\t- a button on each product puts that product in the shopping cart\n\t\t- in the shopping cart, each product has a button to remove it from the cart\n\t- technological stack\n\t\t- Next.js 14 with App-Router\n\t\t- TypeScript, Tailwind\n\t- I created this project in a live-coding so this is not a step-by-step guide \n\t\t- but just the code of the main files that we created \n\t\t- and the GitHub repository\n- **code is here**\n\t- https://github.com/edwardtanguay/et781-nextjs-ecommerce-site\n- **site is online here**\n\t- https://et781-nextjs-ecommerce-site.vercel.app\n- **site works like this**#gif#demonextjsecomm\n- **src/app/layout.tsx**\n\t------------------------------------------------\n\timport type { Metadata } from \"next\";\n\timport { Inter } from \"next/font/google\";\n\timport \"./globals.css\";\n\timport { Nav } from \"@/components/Nav\";\n\timport { Header } from \"@/components/Header\";\n\timport { AppProvider } from \"@/AppContext\";\n\n\tconst inter = Inter({ subsets: [\"latin\"] });\n\n\texport const metadata: Metadata = {\n\t\ttitle: \"E-Commerce\",\n\t\tdescription: \"Generated by create next app\",\n\t};\n\n\texport default function RootLayout({\n\t\tchildren,\n\t}: Readonly<{\n\t\tchildren: React.ReactNode;\n\t}>) {\n\t\treturn (\n\t\t\t<html lang=\"en\">\n\t\t\t\t<body  suppressHydrationWarning={true} className={`${inter.className} bg-slate-500 p-6`}>\n\t\t\t\t\t<AppProvider>\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<Nav />\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppProvider>\n\t\t\t\t</body>\n\t\t\t</html>\n\t\t);\n\t}\n\t------------------------------------------------\n- **src/app/(welcome)/pages.tsx**\n\t---------------------------------------------\n\t\"use client\";\n\timport { AppContext } from \"@/AppContext\";\n\timport { Product } from \"@/components/Product\";\n\timport { useContext } from \"react\";\n\n\texport default function Home() {\n\t\tconst { products } = useContext(AppContext);\n\n\t\tconst productOfTheWeek = products.find((m) => m.id === 6);\n\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<p className=\"mb-3\">Welcome to our tech products store.</p>\n\t\t\t\t<p className=\"mb-3\">\n\t\t\t\t\tWe have {products.length} products for you to choose from.\n\t\t\t\t</p>\n\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t<p className=\"font-semibold\">Product of the week:</p>\n\t\t\t\t\t{productOfTheWeek && <Product product={productOfTheWeek} />}\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t);\n\t}\t\n\t---------------------------------------------\n- **src/app/products/page.tsx**\n\t-------------------------------------------\n\t\"use client\";\n\timport { AppContext } from \"@/AppContext\";\n\timport { Product } from \"@/components/Product\";\n\timport { useContext } from \"react\";\n\n\t/* eslint-disable jsx-a11y/alt-text */\n\texport default function Products() {\n\t\tconst { products } = useContext(AppContext);\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t{products.map((product) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Product key={product.id} product={product}/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</main>\n\t\t);\n\t}\t\n\t-------------------------------------------\n- **src/components/Product.tsx**\n\t--------------------------------------------\n\timport { AppContext } from \"@/AppContext\";\n\timport { IProduct } from \"@/interfaces\";\n\timport { useContext } from \"react\";\n\n\tinterface IProps {\n\t\tproduct: IProduct;\n\t\tquantity?: number;\n\t}\n\n\texport const Product = ({ product, quantity }: IProps) => {\n\t\tconst { handleAddProductToCart, handleRemoveProductFromCart } = useContext(AppContext);\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={product.id}\n\t\t\t\tclassName=\"mb-4 bg-slate-600 p-4 rounded w-1/2 flex gap-3 max-w-[35rem]\"\n\t\t\t>\n\t\t\t\t{quantity && <p className=\"text-slate-100 text-2xl\">{quantity}x</p>}\n\t\t\t\t<img src={`images/products/product_${product.id}.jpg`} />\n\t\t\t\t<section className=\"productGrid\">\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<p className=\"text-xs text-yellow-500\">\n\t\t\t\t\t\t\t{product.category}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className=\"font-semibold text-2xl\">\n\t\t\t\t\t\t\t{product.brand} {product.model}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className=\"text-red-500\">{product.price} €</p>\n\t\t\t\t\t</section>\n\t\t\t\t\t{quantity ? (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={() => handleRemoveProductFromCart(product.id)}\n\t\t\t\t\t\t\tclassName=\"bg-slate-400 hover:bg-slate-300 rounded px-2 py-0\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tRemove from Cart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={() => handleAddProductToCart(product.id)}\n\t\t\t\t\t\t\tclassName=\"bg-slate-400 hover:bg-slate-300 rounded px-2 py-0\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAdd to Cart\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t);\n\t};\n\t--------------------------------------------\n- **src/app/cart/page.tsx**\n\t---------------------------------------------\n\t\"use client\";\n\timport { AppContext } from \"@/AppContext\";\n\timport { Product } from \"@/components/Product\";\n\timport React from \"react\";\n\timport { useContext } from \"react\";\n\n\texport default function Cart() {\n\t\tconst { cart, getProductWithId, getTotalPriceOfCart } = useContext(AppContext);\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<p className=\"mb-3\">Customer type: {cart.customerType}</p>\n\t\t\t\t<p className=\"mb-3\">\n\t\t\t\t\tNumber of products in cart:{\" \"}\n\t\t\t\t\t{cart.cartProducts.reduce((sum, cartProduct) => {\n\t\t\t\t\t\tsum = sum + cartProduct.quantity;\n\t\t\t\t\t\treturn sum;\n\t\t\t\t\t}, 0)}\n\t\t\t\t</p>\n\t\t\t\t<p className=\"mb-3\">Total price: {getTotalPriceOfCart()} €</p>\n\n\t\t\t\t<section className=\"mt-4\">\n\t\t\t\t\t{cart.cartProducts.map((cartProduct) => {\n\t\t\t\t\t\tconst product = getProductWithId(cartProduct.productId);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={cartProduct.productId}>\n\t\t\t\t\t\t\t\t{product && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Product\n\t\t\t\t\t\t\t\t\t\t\tkey={product.id}\n\t\t\t\t\t\t\t\t\t\t\tquantity={cartProduct.quantity}\n\t\t\t\t\t\t\t\t\t\t\tproduct={product}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</section>\n\t\t\t</>\n\t\t);\n\t}\t\n\t---------------------------------------------","points":20,"extras":"","systemWhenCreated":"2024-01-31 02:18:42","systemWhoCreated":"systemUnknown"},{"id":824,"category":"MongoDB","title":"Full-Stack MongoDB site in one directory with Vite React frontend and Node/Express backend","body":"- **background**\n\t- this is not a step-by-step howto but rather a\n\t\t- link to a repository which is a full-stack MongoDB app in one directory\n\t\t- some explanation and code samples from the repository\n- **code is here**\n\t- https://github.com/edwardtanguay/830-mongo-book-app\n- **site works like this**#gif#mongodbsitedemo\n- **BACKEND**\n\t- **backend/api/index.ts**\n\t\t---------------------------------------------------------\n\t\timport express from 'express';\n\t\timport * as config from '../config';\n\t\timport cors from 'cors';\n\t\timport mongoose from 'mongoose';\n\t\timport * as tools from '../tools';\n\t\timport { bookRouter } from './routers/bookRouter';\n\t\timport { userRouter } from './routers/userRouter';\n\n\t\tconst app = express();\n\t\tapp.use(express.json());\n\t\tapp.use(cors());\n\n\t\tapp.get('/', (_req, res) => {\n\t\t\tres.send('<h1>Book Site API</h1>');\n\t\t});\n\n\t\tapp.use('/books', bookRouter);\n\t\tapp.use('/users', userRouter);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst connectionOptions = {\n\t\t\t\t\tdbName: 'booksite'\n\t\t\t\t}\n\t\t\t\tmongoose.set(\"strictQuery\", false);\n\t\t\t\tawait mongoose.connect(config.dbUrl(), connectionOptions);\n\t\t\t\tapp.listen(config.backendPort(), () => {\n\t\t\t\t\ttools.clearConsole();\n\t\t\t\t\tconsole.log(`---`);\n\t\t\t\t\tconsole.log(`FRONTEND SITE is running at: http://localhost:${config.frontendPort()}`)\n\t\t\t\t\tconsole.log(`BACKEND API is running at: http://localhost:${config.backendPort()}`)\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\tconsole.log(`SERVER IS NOT RUNNING BECAUSE: ${error.message}`);\n\t\t\t}\n\t\t})();\t\t\n\t\t---------------------------------------------------------\n\t- **backend/api/schemas/booksSchema.ts**\n\t\t--------------------------------------------------------\n\t\timport mongoose from 'mongoose';\n\n\t\texport const bookSchema = new mongoose.Schema(\n\t\t\t{\n\t\t\t\ttitle: String,\n\t\t\t\tauthors: [String],\n\t\t\t\tpages: Number,\n\t\t\t\tavailable: Boolean\n\t\t\t},\n\t\t\t{\n\t\t\t\tcollection: 'books',\n\t\t\t\ttimestamps: true\n\t\t\t}\n\t\t);\n\n\t\texport const Book = mongoose.model('Book', bookSchema);\t\t\n\t\t--------------------------------------------------------\n\t- **backend/api/controllers/bookController.ts**\n\t\t-----------------------------------------------------\n\t\timport { handleError } from \"../../tools\";\n\t\timport { Book } from \"../schemas/bookSchema\";\n\t\timport express from \"express\";\n\n\t\texport const addSingleBook = async (\n\t\t\treq: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tconst book = await Book.create(req.body);\n\t\t\t\tres.status(201).json(book);\n\t\t\t} catch (e) {\n\t\t\t\tres.status(500).json(e);\n\t\t\t}\n\t\t};\n\n\t\texport const getSingleBook = async (\n\t\t\treq: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tconst book = await Book.create(req.body);\n\t\t\t\tres.status(200).json(book);\n\t\t\t} catch (error) {\n\t\t\t\thandleError(res, error);\n\t\t\t}\n\t\t};\n\n\t\texport const getAllBooks = async (\n\t\t\t_req: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tconst books = await Book.find();\n\t\t\t\tres.json(books);\n\t\t\t} catch (error) {\n\t\t\t\thandleError(res, error);\n\t\t\t}\n\t\t};\n\n\t\texport const updateSingleBook = async (\n\t\t\treq: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tconst book = await Book.findByIdAndUpdate(req.params.id, req.body);\n\t\t\t\tbook\n\t\t\t\t\t? res.status(200).json(book)\n\t\t\t\t\t: res.status(404).json({ msg: `book not found ${req.params.id}` });\n\t\t\t} catch (e) {\n\t\t\t\thandleError(res, e);\n\t\t\t}\n\t\t};\n\n\t\texport const deleteSingleBook = async (\n\t\t\treq: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tconst book = await Book.findByIdAndDelete(req.params.id);\n\t\t\t\tbook\n\t\t\t\t\t? res.status(200).json(book)\n\t\t\t\t\t: res.status(404).json({ msg: `book not found ${req.params.id}` });\n\t\t\t} catch (e) {\n\t\t\t\thandleError(res, e);\n\t\t\t}\n\t\t};\n\n\t\texport const deleteAllBooks = async (\n\t\t\treq: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tconst books = await Book.deleteMany();\n\t\t\t\tres.status(200).json(books);\n\t\t\t} catch (e) {\n\t\t\t\thandleError(res, e);\n\t\t\t}\n\t\t};\n\t\t-----------------------------------------------------\n\t- **backend/api/routers/bookRouter.ts**\n\t\t-------------------------------------------------------\n\t\timport express from 'express';\n\t\timport { addSingleBook, deleteAllBooks, deleteSingleBook, getAllBooks, getSingleBook, updateSingleBook } from '../controllers/bookController';\n\n\t\texport const bookRouter = express.Router();\n\n\t\tbookRouter\n\t\t\t.route('/')\n\t\t\t.post(addSingleBook)\n\t\t\t.get(getAllBooks)\n\t\t\t.delete(deleteAllBooks);\n\t\tbookRouter\n\t\t\t.route('/:id')\n\t\t\t.get(getSingleBook)\n\t\t\t.delete(deleteSingleBook)\n\t\t\t.patch(updateSingleBook);\t\t\n\t\t-------------------------------------------------------\n- **FRONTEND**\n\t- **src/AppContext.tsx**\n\t\t----------------------------------------------------\n\t\timport { createContext, useEffect, useState } from \"react\";\n\t\timport { IBook, IUser } from \"./interfaces\";\n\t\timport axios from \"axios\";\n\n\t\tconst backendUrl = 'http://localhost:4902';\n\n\t\tinterface IAppContext {\n\t\t\tbooks: IBook[];\n\t\t\tusers: IUser[];\n\t\t}\n\n\t\tinterface IAppProvider {\n\t\t\tchildren: React.ReactNode;\n\t\t}\n\n\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\tconst [books, setBooks] = useState<IBook[]>([]);\n\t\t\tconst [users, setUsers] = useState<IUser[]>([]);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(`${backendUrl}/books`);\n\t\t\t\t\tconst _books:IBook[] = response.data;\n\t\t\t\t\tsetBooks(_books);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(`${backendUrl}/users`);\n\t\t\t\t\tconst _users:IUser[] = response.data;\n\t\t\t\t\tsetUsers(_users);\n\t\t\t\t})();\n\t\t\t}, []);\n\n\t\t\treturn (\n\t\t\t\t<AppContext.Provider\n\t\t\t\t\tvalue={{\n\t\t\t\t\t\tbooks,\n\t\t\t\t\t\tusers\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</AppContext.Provider>\n\t\t\t);\n\t\t};\t\t\n\t\t----------------------------------------------------\n\t- **src/pages/PageBooks.tsx**\n\t\t----------------------------------------------------\n\t\timport { useContext } from \"react\";\n\t\timport { AppContext } from \"../AppContext\";\n\t\timport { Book } from \"../components/Book\";\n\n\t\texport const PageBooks = () => {\n\t\t\tconst { books } = useContext(AppContext);\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p className=\"mb-4\">There are {books.length} books:</p>\n\t\t\t\t\t<section className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t{books.map((book) => {\n\t\t\t\t\t\t\treturn <Book book={book} key={book._id} />;\n\t\t\t\t\t\t})}\n\t\t\t\t\t</section>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t----------------------------------------------------\n\t- **src/components/Book.tsx**\n\t\t----------------------------------------------\n\t\timport { IBook } from \"../interfaces\";\n\n\t\tinterface IProps {\n\t\t\tbook: IBook;\n\t\t}\n\n\t\texport const Book = ({ book }: IProps) => {\n\t\t\treturn (\n\t\t\t\t<div className=\"bg-slate-300 p-3 w-[15rem] rounded\">\n\t\t\t\t\t<p className=\"font-semibold\">{book.title}</p>\n\t\t\t\t\t{book.authors.map((author, index) => {\n\t\t\t\t\t\treturn <p key={index}>Author: {author}</p>\n\t\t\t\t\t})}\n\t\t\t\t\t{book.available ? (\n\t\t\t\t\t\t<p>Book is available.</p>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p>Currently not available.</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t};\n\t\t----------------------------------------------","points":20,"extras":"","systemWhenCreated":"2024-02-05 23:16:37","systemWhoCreated":"systemUnknown"},{"id":825,"category":"Mongo","title":"Create mock data for a Mongo database","body":"- import JSON file into Mongo collection\n\t- make sure you have the `mongoimport` command installed\n\t\t- `mongoimport --version`\n\t\t- if you are on Ubuntu, `mongoimport` should be installed with MongoDB\n\t\t- to use `mongoimport` on Windows, you have to download and install **MongoDB Database Tools**\n\t\t\t- go to the **MongoDB Database Tools** download page [here](https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools)\n\t- create JSON file of mock users\n\t\t- **users.json**\n\t\t\t----------------------------------------------\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Tom\",\n\t\t\t\t\t\"lastName\": \"Json 111\",\n\t\t\t\t\t\"email\": \"tom.morgan@htl.com\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"Holework Street 23\",\n\t\t\t\t\t\t\"zipCode\": \"31239\",\n\t\t\t\t\t\t\"city\": \"Birmingham\"\n\t\t\t\t\t},\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\"$date\": \"2024-02-05T21:59:58.914Z\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\"$date\": \"2024-02-05T21:59:58.914Z\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Tom\",\n\t\t\t\t\t\"lastName\": \"Json 222\",\n\t\t\t\t\t\"email\": \"tom.morgan@htl.com\",\n\t\t\t\t\t\"address\": {\n\t\t\t\t\t\t\"street\": \"Holework Street 23\",\n\t\t\t\t\t\t\"zipCode\": \"31239\",\n\t\t\t\t\t\t\"city\": \"Birmingham\"\n\t\t\t\t\t},\n\t\t\t\t\t\"createdAt\": {\n\t\t\t\t\t\"$date\": \"2024-02-05T21:59:58.914Z\"\n\t\t\t\t\t},\n\t\t\t\t\t\"updatedAt\": {\n\t\t\t\t\t\"$date\": \"2024-02-05T21:59:58.914Z\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t\t----------------------------------------------\n\t- `mongoimport --db testdb001 --collection users --type json --file users.json --jsonArray`\n\t- now let's add it to the existing **users** collection \n\t\t- `mongoimport --db booksite --collection users --type json --file users.json --jsonArray`\n- **generate a JSON file of random mock users**\n\t- **using ChatGPT**\n\t\t- perhaps the easiest way today to create a small number of random data for testing is to use **ChatGPT** or some other AI tool\n\t\t- here is an example of using ChatGPT to generate 10 random mock users##mmm10random\n\t\t- copy and paste them into a file\n\t\t- import the file\n\t\t\t- `mongoimport --db booksite --collection users --type json --file users.json --jsonArray`\n\t\t\t- it will import:##the10thatimpo\n\t- **using Faker**\n\t\t- code is here:\n\t\t\t- https://github.com/edwardtanguay/et778-mockdata\n\t\t- create a new npm project\n\t\t\t- `mkdir et778-mockdata`\n\t\t\t- `code et778-mockdata`\n\t\t\t- `npm init -y`\n\t\t- **package.json**\n\t\t\t----------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"mock\": \"node mock.js\"\n\t\t\t},\t\t\t\n\t\t\t----------------------------------\n\t\t- **mock.js**\n\t\t\t---------------------------------------------\n\t\t\timport mongoose from 'mongoose';\n\t\t\timport faker from 'faker';\n\n\t\t\tconst mongoURI = 'mongodb://localhost:27017/store';\n\n\t\t\tconst PersonSchema = new mongoose.Schema({\n\t\t\t\tfirstName: { type: String },\n\t\t\t\tlastName: { type: String },\n\t\t\t\temail: { type: String },\n\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcollection: \"persons\", versionKey: false\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst Person = mongoose.model('Person', PersonSchema);\n\n\t\t\ttry {\n\t\t\t\tawait mongoose.connect(mongoURI);\n\t\t\t\tconsole.log(`connected to database`);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tprocess.exit(1)\n\t\t\t}\n\n\t\t\tconst persons = [];\n\n\t\t\tfor (let i = 1; i <= 20; i++) {\n\t\t\t\tconst firstName = faker.name.firstName();\n\t\t\t\tconst lastName = faker.name.lastName();\n\t\t\t\tconst email = faker.internet.email(`${firstName} ${lastName}`);\n\t\t\t\tpersons.push({\n\t\t\t\t\tfirstName: firstName,\n\t\t\t\t\tlastName: lastName,\n\t\t\t\t\temail: email\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpersons.forEach(person => Person.create(person));\n\t\t\t---------------------------------------------","points":20,"extras":"","systemWhenCreated":"2024-02-06 02:03:23","systemWhoCreated":"systemUnknown"},{"id":826,"category":"Zod","title":"How to use Zod to validate and cleanse data","body":"- **background**\n\t- to ensure security and security in your applications\n\t- it is important to validate and cleanse all data that arrives from any external source\n\t\t- there are 5 major sources of external data for a frontend website##themmm5sources\n\t- even when you control the external source, e.g. an API\n\t\t- data may be hacked and manipulated as it travels over the network or Internet\n\t\t- you should never trust external data\n\t- TypeScript does not protect you from mal-formed external data\n\t\t- TypeScript only ensures **internal data integrity**\n\t\t- TypeScript only **protects you from yourself**, e.g. you say that a function receives string, then you send it a number\n\t\t- but in production, TypeScript **compiles to JavaScript**, so it is JavaScript which runs in your production code\n\t\t- so if your frontend recieves employee data from an API\n\t\t\t- and the API sends a number as a firstName\n\t\t\t- and your JavaScript code tries to run firstName.toUpperCase()\n\t\t\t- then you will get an error in run time\n\t\t\t- TypeScript is no longer present in your production code to catch this error\n\t\t- therefore we need a tool that remains in production code to validate/cleanse external data\n\t\t\t- this tool is **Zod**\n\t- **Zod** is a TypeScript-first schema declaration and validation library\n\t\t- Zod enables you to create schemas which you use to check if external data is correctly shaped\n\t\t- TypeScript types can be created from Zod schemas\n\t\t- Zod has validation features that go beyond TypeScript, e.g.\n\t\t\t- you can ensure a variable is not only a string, but a certain length, or satisfies a regex\n\t\t\t- you can ensure that a number is between a certain range\n- **code is here**\n\t- backend: https://github.com/edwardtanguay/et528-club-app-backend\n\t- frontend: https://github.com/edwardtanguay/et528-club-app\n- **the site will work like this**#gif#demommmzod\n- **>>> 1. Set up TypeScript Node/Express API**\n\t- in order to use and understand Zod, we need to set up a local backend API and frontend React site that interacts with it\n\t- create directories for project\n\t\t- et528-club-app\n\t\t\t- et528-club-app-backend\n\t\t\t- et528-club-app\n\t\t- (of course choose your own \"et528\" prefix in order to make your project name unique)\n\t\t- port plan:\n\t\t\t- backend will run on port 3311\n\t\t\t- frontend will run on port 3411\n\t- **build backend**\n\t\t- enter VSCode\n\t\t\t- `code et528-club-app-backend`\n\t\t- initialize npm \n\t\t\t- `npm init -y`\n\t\t- initialize git\n\t\t\t- `git init -b dev`\n\t\t\t- make initial commit\n\t\t\t- create standard **.gitignore**\n\t\t\t\t--------------------------------------\n\t\t\t\tnode_modules\n\t\t\t\t.env\n\t\t\t\t.vscode\n\t\t\t\t--------------------------------------\n\t\t- setup TypeScript project\n\t\t\t- **src/index.ts**\n\t\t\t\t------------------------------------------\n\t\t\t\tconsole.log('typescript backend');\n\t\t\t\t------------------------------------------\n\t\t\t- **package.json**\n\t\t\t\t--------------------------------------------------\n\t\t\t\t\"scripts\": {\n\t\t\t\t\t\"dev\": \"nodemon\"\n\t\t\t\t},\n\t\t\t\t\"nodemonConfig\": {\n\t\t\t\t\t\"watch\": [\n\t\t\t\t\t\t\"src\"\n\t\t\t\t\t],\n\t\t\t\t\t\"ext\": \"ts\",\n\t\t\t\t\t\"exec\": \"tsx src/index.ts\"\n\t\t\t\t},\n\t\t\t\t--------------------------------------------------\n\t\t\t- install dependencies\n\t\t\t\t- `npm i -D nodemon`\n\t\t\t\t- `npm i -D tsx`\n\t\t- test it\n\t\t\t- `npm run dev`##typstart\n\t\t- set up backend API with one route\t\t\t\t\t\t\t\t\n\t\t\t- install express\n\t\t\t\t- `npm i express`\n\t\t\t\t- `npm i @types/express`\n\t\t\t- **index.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\timport express from 'express';\n\n\t\t\t\tconst app = express();\n\t\t\t\tconst port = 3311;\n\n\t\t\t\tinterface IMember {\n\t\t\t\t\tid: number;\n\t\t\t\t\tname: string;\n\t\t\t\t}\n\n\t\t\t\tconst members: IMember[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\tname: \"Robert Hammerschmidt\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\tname: \"Angela Wasserturm\"\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t\tapp.get('/members', (req, res) => {\n\t\t\t\t\tres.json(members);\n\t\t\t\t});\n\n\t\t\t\tapp.listen(port, () => {\n\t\t\t\t\tconsole.log(`listening at http://localhost:${port}`);\n\t\t\t\t});\n\t\t\t\t---------------------------------------------\n\t\t\t- start it\n\t\t\t\t- `npm run dev`\n\t\t\t- test it\n\t\t\t\t- **test.rest**\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t\t@url = http://localhost:3311\n\n\t\t\t\t\t### GET ALL MEMBERS\n\t\t\t\t\tGET {{url}}/members\n\t\t\t\t\t-----------------------------------------------\n\t\t\t\t- click \"Send Request\" and you will see that the route works##getsmembersjd\n- **>>> 2. Set up a Vite React site to consume the backend API data**\n\t- **build frontend**\n\t\t- let's set up a React site with a realistic environment that has AppContext\n\t\t- for this, let's use a template which will give us a Vite React site with the following:\n\t\t\t- React Router\n\t\t\t- AppContext\n\t\t\t- TypeScript\n\t\t\t- Tailwind/Sass\n\t\t- set up site\n\t\t\t- go to: https://github.com/edwardtanguay/vite-react-menu-appcontext\n\t\t\t- **Use this template**\n\t\t\t- **Create a new repository**\n\t\t\t- **Create Repository**##newappconsite\n\t\t\t- click the clone URL##clickontheclone\n\t\t\t- go to the `et528-club-app/et528-club-app` directory\n\t\t\t- `git clone git@github.com:edwardtanguay/et528-club-app.git .` (note the period at the end)\n\t\t\t- enter VSCode\n\t\t\t\t- `code .`\n\t\t\t- change port\n\t\t\t\t- **package.json**\n\t\t\t\t\t-------------------------------------------------------------\n\t\t\t\t\t\"dev\": \"vite --port 3411 --open\",\t\t\t\t\t\n\t\t\t\t\t-------------------------------------------------------------\n\t\t\t- create node_modules\n\t\t\t\t- `npm i`\n\t\t\t- start it \n\t\t\t\t- `npm run dev`\n\t\t\t- site will work like this:#gif#sitemmwilwork\n\t- **read member data into AppContext and display on welcome page**\n\t\t- **src/interfaces.ts**\n\t\t\t-------------------------------------\n\t\t\texport interface IMember {\n\t\t\t\tid: number;\n\t\t\t\tname: string;\n\t\t\t}\t\t\n\t\t\t-------------------------------------\n\t\t- import axios\n\t\t\t- `npm i axios`\n\t\t- change **AppContext.tsx** to load messages from backend\n\t\t\t--------------------------------------------------------\n\t\t\timport { createContext, useEffect, useState } from \"react\";\n\t\t\timport { IMember } from \"./interfaces\";\n\t\t\timport axios from \"axios\";\n\n\t\t\tinterface IAppContext {\n\t\t\t\tmessage: string;\n\t\t\t\tmembers: IMember[];\n\t\t\t}\n\n\t\t\tinterface IAppProvider {\n\t\t\t\tchildren: React.ReactNode;\n\t\t\t}\n\n\t\t\tconst backendUrl = \"http://localhost:3311\";\n\n\t\t\texport const AppContext = createContext<IAppContext>({} as IAppContext);\n\n\t\t\texport const AppProvider: React.FC<IAppProvider> = ({ children }) => {\n\t\t\t\tconst message = \"Welcome to this site.\";\n\t\t\t\tconst [members, setMembers] = useState<IMember[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${backendUrl}/members`);\n\t\t\t\t\t\tconst _members = response.data;\n\t\t\t\t\t\tsetMembers(_members);\n\t\t\t\t\t})();\n\t\t\t\t},[]);\n\n\t\t\t\treturn (\n\t\t\t\t\t<AppContext.Provider\n\t\t\t\t\t\tvalue={{\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tmembers\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AppContext.Provider>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t---------------------------------------------------------\n\t\t\timport { useContext } from \"react\";\n\t\t\timport { AppContext } from \"../AppContext\";\n\t\t\timport { IMember } from \"../interfaces\";\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst { message, members } = useContext(AppContext);\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>{message}</p>\n\t\t\t\t\t\t<h2 className=\"mt-4 text-xl\">Members</h2>\n\t\t\t\t\t\t<ul className=\"list-disc ml-6\">\n\t\t\t\t\t\t\t{members.map((member:IMember) => {\n\t\t\t\t\t\t\t\treturn <li key={member.id}>{member.name}</li>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\n\t\t\t---------------------------------------------------------\n\t\t- PROBLEM: run it and you will get a CORS error\n\t\t\t- `npm run dev`##goinggeterro\n\t\t- SOLUTION: install cors in the **backend**\n\t\t\t- `npm i cors`\n\t\t\t- `npm i -D @types/cors`\n\t\t\t- **index.ts**\n\t\t\t\t-----------------------------------------------\n\t\t\t\timport express from 'express';\n\t\t\t\timport cors from 'cors';\n\n\t\t\t\tconst app = express();\n\t\t\t\tapp.use(cors());\n\t\t\t\tconst port = 3311;\n\t\t\t\t-----------------------------------------------\n\t\t- run it and it will work##lifemmmworks\n- **>>> 3. Understand why TypeScript does not protect you from mal-formed external data at runtime**\t\n\t- although we use TypeScript in the frontend\n\t\t- it only protects us from making **internal** mistakes regarding the types\n\t\t- we are basically telling it, \"we expect members to have two fields, one a number and one a string\"\n\t\t- TypeScript can only warn us if we do something contrary to what we ourselves say we expect\t\t\n\t\t- for instance, if we use **substring()** on a property which we said we expect to be a number\n\t\t\t- **PageWelcome.tsx**\n\t\t\t\t-------------------------------------------\n\t\t\t\t<li key={member.id.substring(0,3)}>{member.name}</li>\n\t\t\t\t-------------------------------------------\n\t\t\t\t- then we get an error\n\t\t\t\t- and in this case, JavaScript gets an error as well\n\t\t\t\t- so we would see this error even if we weren't using TypeScript##showstwoerrors\n\t\t- but in this instance, if we use **substring()** on the number property **id** for a condition which we as a developer don't reproduce with out test data:\n\t\t\t- **PageWelcome.tsx**\n\t\t\t\t---------------------------------------------\n\t\t\t\t<ul className=\"list-disc ml-6\">\n\t\t\t\t\t{members.map((member: IMember) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<React.Fragment key={member.id}>\n\t\t\t\t\t\t\t\t{member.name.length < 30 ? (\n\t\t\t\t\t\t\t\t\t<li>{member.name}</li>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<li>{member.id.substring(0,5)}</li>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\t\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t\t\t- we don't get an error\n\t\t\t\t\t- the site works\n\t\t\t\t\t- there is no error in the browser console\n\t\t\t\t\t- if we were using JavaScript, there would be no error in VSCode either\n\t\t\t\t- the reason we are not getting an error is\n\t\t\t\t\t- at the moment, none of our member names happen to be longer than 30\n\t\t\t\t- again: **JavaScript** wouldn't inform you about this potential bug at all\n\t\t\t\t\t- only after you publish your site\n\t\t\t\t\t- your customers who use names longer than 29 characters would get errors\n\t\t\t\t\t- and they would inform you of the bug (or not)\n\t\t\t\t- luckily we are using **TypeScript**, which informs us **at developer time** that we are **violating our own rules**, i.e.\n\t\t\t\t\t- we said in our interface that we expected the id of member to be a number\n\t\t\t\t\t- yet we forgot, were sloppy, and used id as a string\n\t\t\t\t\t- here we see that TypeScript protects us from our own carelessness##errorwhencustom\n\t\t- however, TypeScript only informs you of type conflicts **between the types in your code and the types you stated you expect** \n\t\t\t- it does not inform you of type conflicts **between the types in your code and the types that exist at runtime**\n\t\t\t- let's demonstrate that this is true\n\t\t\t- let's imagine that you changed your member display to show the id in a different format and used a number function, e.g.\n\t\t\t\t- **PageWelcome.ts**\n\t\t\t\t\t--------------------------------------------------------------\n\t\t\t\t\t<li key={member.id}>\n\t\t\t\t\t\tID #{member.id.toFixed(3)} - {member.name}\n\t\t\t\t\t</li>\n\t\t\t\t\t--------------------------------------------------------------\n\t\t\t\t- your output looks like this:##theformatidid\n\t\t\t- and let's imagine that the backend API does not belong to you\n\t\t\t- and then let's imagine that the backend team decided to change the **id** from an auto-increment number such as **1**, **2**, **3** to a suuid, e.g. a string such as **I82jj4**\n\t\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t\t----------------------------------------------------\n\t\t\t\t\tconst members = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"28jj21\",\n\t\t\t\t\t\t\tname: \"Robert Hammerschmidt\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\t\t\tname: \"Angela Wasserturm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t\t----------------------------------------------------\n\t\t\t- your frontend now looks like this:\n\t\t\t\t- your site is broken\n\t\t\t\t- yet TypeScript is not informing you of any error##therrorwithidid\n\t\t- so let's say you realize this error and correct it by updating your interface \n\t\t\t- **interfaces.ts**\n\t\t\t\t--------------------------------------\n\t\t\t\texport interface IMember {\n\t\t\t\t\tid: string,\n\t\t\t\t\tname: string;\n\t\t\t\t}\n\t\t\t\t--------------------------------------\n\t\t\t- typescript will now inform you of the error##theerrorrtypeidmm\n\t\t\t- and you change how you display the **string id** with a string function\n\t\t\t- **PageWelcome.ts**\n\t\t\t\t--------------------------------------\n\t\t\t\t<li key={member.id}>\n\t\t\t\t\tID #{member.id.toUpperCase()} - {member.name}\n\t\t\t\t</li>\n\t\t\t\t--------------------------------------\n\t\t\t- this merely tells TypeScript that **you expect id to be a string**\n\t\t\t- and as long as id actually is a string at runtime, your site will work\n\t\t\t- and because ids are now being sent as strings, your site now looks like this:##thenewsuudid\n\t\t- but a change in the backend types may not be the only reason you receive non-conform data \n\t\t\t- let's mock that there is some kind of transition error during the response\n\t\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t\t-------------------------------------------------\n\t\t\t\t\tapp.get('/members', (req, res) => {\n\t\t\t\t\t\tres.json('298jsfaskfasuh ... NETWORK ERROR 82734234: Missing characters in transition.');\n\t\t\t\t\t});\n\t\t\t\t\t-------------------------------------------------\n\t\t\t- now your site looks like this:##the404ksdjfiej\n\t\t- so we see that TypeScript is not going to help us when external data at runtime is not what we expect\n\t\t- for that, we need to validate a our data at runtime\n\t\t- one of the easiest ways to do this is to use **Zod**\n- **>>> 4. Use Zod to validate/cleanse/protect data from a backend API**\n\t- first set the backend back to send valid member data\n\t\t- (BACKEND) **index.ts**\n\t\t\t--------------------------------------------------------\n\t\t\tconst members = [\n\t\t\t\t{\n\t\t\t\t\tid: \"28jj21\",\n\t\t\t\t\tname: \"Robert Hammerschmidt\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\tname: \"Angela Wasserturm\",\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tapp.get(\"/members\", (req, res) => {\n\t\t\t\tres.json(members);\n\t\t\t});\n\t\t\t--------------------------------------------------------\n\t\t- your site will look like this again:##thenewsuudid\n\t- back on the **frontend**, import Zod\n\t\t- `npm i zod`\n\t- create a Zod schema \n\t\t- **interfaces.ts**\n\t\t\t----------------------------------------------------\n\t\t\timport { z } from \"zod\";\n\n\t\t\texport const MemberSchema = z.object({\n\t\t\t\tid: z.string(),\n\t\t\t\tname: z.string(),\n\t\t\t});\n\t\t\t----------------------------------------------------\n\t- now validate the members when they are imported\n\t\t- **AppContext.tsx**\n\t\t\t--------------------------------------------------\n\t\t\tuseEffect(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst response = await axios.get(`${backendUrl}/members`);\n\t\t\t\t\tconst _members = [];\n\t\t\t\t\tfor (const _member of response.data) {\n\t\t\t\t\t\tconst parseResult = MemberSchema.safeParse(_member);\n\t\t\t\t\t\tif (parseResult.success) {\n\t\t\t\t\t\t\t_members.push(_member);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(`LOG ENTRY: bad member object (${JSON.stringify(_member)})`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsetMembers(_members);\n\t\t\t\t})();\n\t\t\t}, []);\n\t\t\t--------------------------------------------------\n\t\t- your site will still work as normal, since all the members validate successfully##thenewsuudid\n\t\t- but now change one of the ids back to a number\n\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t---------------------------------------------------\n\t\t\t\tconst members = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 234,\n\t\t\t\t\t\tname: \"Robert Hammerschmidt\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\t\tname: \"Angela Wasserturm\",\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t\t---------------------------------------------------\n\t\t- your site now gracefully excludes the bad member and informs developers in the logs that there is a problem##theprodmmmsolv\n\t\t- and now that you are catching errors that occur at runtime\n\t\t\t- if you need to, you can inform the user appropriately\n\t\t\t\t- **AppContext.tsx**\n\t\t\t\t\t--------------------------------------------------------\n\t\t\t\t\tinterface IAppContext {\n\t\t\t\t\t\tmessage: string;\n\t\t\t\t\t\tmembers: IMember[];\n\t\t\t\t\t\terrorMessage: string;\n\t\t\t\t\t}\t\t\t\t\t\n\n\t\t\t\t\tconst [errorMessage, setErrorMessage] = useState('');\n\n\t\t\t\t\tif (parseResult.success) {\n\t\t\t\t\t\t_members.push(_member);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`LOG ENTRY: bad member object (${JSON.stringify(_member)})`);\n\t\t\t\t\t\tsetErrorMessage('At least one member did not import properly, please call 030 / 27384 234.');\n\t\t\t\t\t}\n\t\t\t\t\t--------------------------------------------------------\n\t\t\t\t- **PageWelcome.tsx**\n\t\t\t\t\t-----------------------------------------------------\n\t\t\t\t\tconst { message, members, errorMessage } = useContext(AppContext);\n\n\t\t\t\t\t<p>{message}</p>\n\t\t\t\t\t{errorMessage && <p className=\"text-red-600 bg-yellow-300 w-fit mt-3 p-2 rounded\">{errorMessage}</p>}\t\t\t\t\t\n\t\t\t\t\t-----------------------------------------------------\n\t\t\t- now when a member cannot be imported, an error message will appear:##\n\t\t\t- note also that if the data from the backend was completely corrupted in some way, your site will react gracefully:\n\t\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t\t--------------------------------------------------------------\n\t\t\t\t\tapp.get(\"/members\", (req, res) => {\n\t\t\t\t\t\tres.json(\"298jsfaskfasuh ... NETWORK ERROR 82734234: Missing characters in transition.\");\n\t\t\t\t\t});\n\t\t\t\t\t--------------------------------------------------------------\n\t\t\t\t- your site and log file looks like this:##thelogmmmajdnsite\n\t\t\t- correct all errors on the backend\n\t\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t\t-------------------------------------------------------\n\t\t\t\t\tconst members = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"28jj21\",\n\t\t\t\t\t\t\tname: \"Robert Hammerschmidt\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\t\t\tname: \"Angela Wasserturm\",\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\n\t\t\t\t\tapp.get(\"/members\", (req, res) => {\n\t\t\t\t\t\tres.json(members);\n\t\t\t\t\t});\t\t\t\t\t\n\t\t\t\t\t-------------------------------------------------------\n\t\t\t\t- your site will work normally again:##thenewsuudid\n- **>>> 5. Define TypeScript types from Zod schemas**\n\t- Zod works very well with TypeScript in that you can infer TypeScript types from Zod schemas\n\t\t- this enables you to define your typing information in one place\n\t\t- Zod only allows us to infer TypeScript types but not interfaces, so let's use types\n\t\t- **interfaces.ts**\n\t\t\t--------------------------------------------\n\t\t\timport { z } from \"zod\";\n\n\t\t\texport const MemberSchema = z.object({\n\t\t\t\tid: z.string(),\n\t\t\t\tname: z.string(),\n\t\t\t});\n\n\t\t\texport type Member = z.infer<typeof MemberSchema>;\n\t\t\t--------------------------------------------\n\t\t- you will have to change **IMember** to **Member** in **AppContext.tsx** and **PageWelcome.tsx**\n\t\t- your site will work again:####thenewsuudid\n\t- now let's show how this makes defining new types easier\n\t- let's say the backend adds a field **age**\n\t\t- (BACKEND) **index.ts**\n\t\t\t------------------------------------\n\t\t\tconst members = [\n\t\t\t\t{\n\t\t\t\t\tid: \"28jj21\",\n\t\t\t\t\tname: \"Robert Hammerschmidt\",\n\t\t\t\t\tage: 45\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\tname: \"Angela Wasserturm\",\n\t\t\t\t\tage: 34\n\t\t\t\t},\n\t\t\t];\n\t\t\t------------------------------------\n\t\t- note that this does not cause an error on the frontend\n\t\t\t- since all **expected** data is still arriving\n\t\t- now let's update the Zod schema which will automatically update our TypeScript type\n\t\t\t- **interfaces.ts**\n\t\t\t\t-----------------------------------------------\n\t\t\t\texport const MemberSchema = z.object({\n\t\t\t\t\tid: z.string(),\n\t\t\t\t\tname: z.string(),\n\t\t\t\t\tage: z.number()\n\t\t\t\t});\n\t\t\t\t-----------------------------------------------\n\t\t\t- **PageWelcome.tsx**\n\t\t\t\t------------------------------------------\n\t\t\t\tID #{member.id.toUpperCase()} - {member.name} (age {member.age})\n\t\t\t\t------------------------------------------\n\t\t\t- note that your TypeScript type has been automatically updated##theupdmmmttype\n\t\t\t- all data validates fine and the ages are displayed##themmfinsj\n\t\t\t- and if a bad value for **age** is sent from the backend\n\t\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t\t--------------------------------------------------\n\t\t\t\t\tconst members = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"28jj21\",\n\t\t\t\t\t\t\tname: \"Robert Hammerschmidt\",\n\t\t\t\t\t\t\tage: 45\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\t\t\tname: \"Angela Wasserturm\",\n\t\t\t\t\t\t\tage: \"unknown\"\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t\t--------------------------------------------------\n\t\t\t\t- Zod will catch it##thecmmmacatch\n\t\t\t- and once all ages are correctly formatted again\n\t\t\t\t- (BACKEND) **index.ts**\n\t\t\t\t\t--------------------------------------------------\n\t\t\t\t\tconst members = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"28jj21\",\n\t\t\t\t\t\t\tname: \"Robert Hammerschmidt\",\n\t\t\t\t\t\t\tage: 45\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"ii34ja\",\n\t\t\t\t\t\t\tname: \"Angela Wasserturm\",\n\t\t\t\t\t\t\tage: 34\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t\t--------------------------------------------------\n\t\t\t- Zod allows them all to pass through##themmfinsj\n- **>>> CHALLENGE. Make a realistic example that validates data coming in via a third-party API**\n\t- you can use my **techBooksUnstructured.json** file: \n\t\t- http://edwardtanguay.vercel.app/share/techBooksUnstructured.json##mmmunstruc\n- **>>> CHALLENGE. Make a realistic example that validates data coming in via a user form**\n- **>>> CHALLENGE. Make a realistic example that validates data coming in via localstorage**\n- **>>> CHALLENGE. Make a realistic example that validates data coming in via the URL**\n\t- see Theo's video on URL state managers: \n\t\t- [VIDEO: My Favorite State Manager Is...URLs?](https://www.youtube.com/watch?v=t3FUkq7yoCw)","points":20,"extras":"","systemWhenCreated":"2024-02-11 12:59:20","systemWhoCreated":"systemUnknown"},{"id":827,"category":"bcrypt","title":"Why and how to use bcrypt for hashing passwords","body":"- **background**\n\t- this howto is an theoretical and practical background to start thinking about security of passwords in your applications\n\t- it is also a demonstration of why and how to use **bcrypt**\n\t- code used in this howto is here\n\t\t- https://github.com/edwardtanguay/et661-bcrypt-encryption\n- **why we use bcrypt** - a background to encryption, hashing and password security\n\t- we all know the golden rule: **never save passwords in the database in plain text**\n\t\t- but we often save e.g. database connection strings that contain passwords in plain text in the .env file\n\t\t\t- how secure is that?\n\t\t\t- it is relatively secure\n\t\t\t\t- but in production the .env should require sudo rights\n\t\t\t\t- one has to be certain that .env files do not get pushed to a repository or copied into a backup file\n\t\t\t\t- so an .env file in production is treated with special security\n\t\t\t\t- one must also consider screen sharing, etc. that a plain text password is not seen\n\t\t\t\t- when companies get certificates such as ISO 9001, they commit to abiding by security regulations such as how to store passwords\n\t\t\t\t\t- these certificate requirements is where you find the best security rules\n\t\t\t\t- keep in mind that security is always balanced with convenience\n\t\t\t\t\t- high security means low flexibility/convenience\n\t\t\t\t\t- low security means high flexibility/convenience\n\t\t\t- I would argue that a plain text password in an .env file is secure enough for most low-profile websites\n\t\t\t\t- if you have reason to make it more secure, you could secure the admin password with bcrypt\n\t\t\t- ChatGPT on this topic:##envfilepasworsk\n\t- all that said, **to save all passwords for all users in the database stored in plain text is another level of egregious**\n\t\t- if a hacker gains access to your database, they can instantly impersonate any user with any security level\n\t\t- you would have to inform all users to change their passwords\n\t- **>>> 1. possible solution: use encryption/decryption**\n\t\t- you could write your own encryption algorithm\n\t\t\t- something like a [cryptogram](https://en.wikipedia.org/wiki/Cryptogram)\n\t\t- you could make it quite complicated to decrypt\n\t\t\t- have numerous characters that represented one character\n\t\t\t- have numerous mapping tables and save the id number of the mapping table in the key\n\t\t- the problem is that if you can encrypt it, you can decrypt it\n\t\t\t- given time, computer processing power, and artificial intelligence, encryption/decryption is generally not secure anymore\n\t\t- **therefore, don't use encryption/decryption for passwords**\n\t- **>>> 2. possible solution: use a hashing algorithm such as md5**\n\t\t- encryption vs. hashing\n\t\t\t- an encrypted password can be decrypted\n\t\t\t- but a hashed password cannot be unhashed\n\t\t\t\t- you cannot go back\n\t\t\t\t- you can only compare the hashes to find out if someone knows the original password\n\t\t- problem:\n\t\t\t- there are ways to figure out what the hash algorithm is\n\t\t\t\t- computer power is increasing and AI is becoming more powerful which makes it easier\n\t\t\t- ChaGPT on the security of md5##tehmmmm5\t\t\n\t\t- demonstration\n\t\t\t- create project for testing\n\t\t\t\t- `mkdir et661-bcrypt-encryption`\n\t\t\t\t- `code .`\n\t\t\t\t- `npm init -y`\n\t\t\t\t- `git init -b dev`\n\t\t\t\t- make git ignore node_modules\n\t\t\t\t\t- **.gitignore**\n\t\t\t\t\t\t--------------------------------\n\t\t\t\t\t\tnode_modules\n\t\t\t\t\t\t--------------------------------\n\t\t\t\t- enable ES6 modules\n\t\t\t\t\t- **package.json**\n\t\t\t\t\t\t------------------------------------\n\t\t\t\t\t\t\"type\":\"module\",\n\t\t\t\t\t\t------------------------------------\n\t\t\t- install md5\n\t\t\t\t- `npm i md5`\n\t\t\t- **md5test.js**\n\t\t\t\t-------------------------------\n\t\t\t\timport md5 from 'md5';\n\n\t\t\t\tconst password = 'secret';\n\t\t\t\tconst encryptedPassword = md5(password);\n\n\t\t\t\tconsole.log(password, encryptedPassword);\n\t\t\t\tconsole.log(password, encryptedPassword);\n\t\t\t\tconsole.log(password, encryptedPassword);\n\t\t\t\tconsole.log(password, encryptedPassword);\n\t\t\t\tconsole.log(password, encryptedPassword);\n\t\t\t\t-------------------------------\n\t\t\t- note it produces the same hash each time:##thesammmtime\n\t\t\t- this means that you could \n\t\t\t\t- 1. save the encryptedPassword in the database\n\t\t\t\t- 2. ask the user to type in their password\n\t\t\t\t- 3. encrypt the password the user typed in\n\t\t\t\t- 4. compare the encrypted password with the encrypted password in the database\n\t\t\t\t- 5. if they are the same, then you know the user typed in the correct database\n\t\t\t- this worked well in the 90s and until about 2005\n\t\t\t\t- ChatGPT on when MD5 became insecure:##chatmmmwhenmd5\t\n\t\t\t- the problem is that you can decrypt many md5 encrypted passwords by googling **decrypt md5**, clicking on the first result, e.g. [MD5Online MD5 Decryption](https://www.md5online.org/md5-decrypt.html) typing in the encryptedPassword and you see:##thespaswencrdec\n\t\t\t- the simple reason these services exist is that they use something called **rainbow tables**, i.e. large databases of precomputed hash values for common passwords and combinations of characters##rainbommtabl\n\t\t\t- test for yourself which passwords can and can't be found in these rainbox tables\n\t\t\t\t- many seemingly complex but lightly predictable passwords can be found in rainbow tables\t\n\t\t\t- this means that a hacker that gains access to your database of passwords encrypted with md5 can probably instantly decrypt some or many of the users passwords\n\t\t\t\t- of course, the more strict your enforced policy was that forces users create **complex** passwords\n\t\t\t\t- the fewer md5 encrypted passwords would be able to be decrypted\n\t\t\t\t- but if (1) have a weak password enforcement rule and (2) someone with high access rights has a weak password, then someone who gains access to the encrypted passwords can seriously compromise your site, e.g. by logging in as someone with high access rights\n\t\t\t- and with more time, better algorithms, and more powerful artificial intelligence, even more complicated passwords can be decrypted\n\t\t\t- some sites boast that they have billions of stored md5 rainbow tables (for a price) which they can use to quickly find nearly any password\n\t\t\t- md5 today is not used for storing passwords, but more for **authenticating e.g. downloads to make sure nobody changed the file in transit**\n\t\t\t- therefore, while you see still will see md5 in use todo, **don't use md5 to encrypt passwords in your database**\n\t- **>>> 3. possible solution: use a salt**\n\t\t- a salt is a text is used to slightly change the algorithm used to create a hash\n\t\t- the salt is saved separately outside the database, e.g. in an .env file\n\t\t\t- for instance, this is what a SESSION_SECRET is when using express-sessions\n\t\t\t- it just has to be some random string that hackers don't know\n\t\t- **salts generally make rainbow tables useless**\n\t\t- so instead of MD5, you could use [Salted MD5](https://www.npmjs.com/package/salted-md5)\n\t\t- however, the problem with this is that computers are becoming so powerful that **simple passwords can be cracked within days**\n\t\t\t- *\"MD5 and SHA-1 are emphatically poor choices for storing passwords. The problem is not so much their low collision-resistance; **the problem is that MD5 and SHA-1 are designed to be extremely fast**. A modern GPU can attempt upwards of billions of passwords per second when brute-forcing through a list of hashes. This can shred through every possible eight-character alphanumeric password in at most a few days; that's with just one GPU.\"* - [Is salted MD5 or salted SHA considered secure?](https://security.stackexchange.com/questions/61489/is-salted-md5-or-salted-sha-considered-secure)\n\t\t\t- this means that if a hacker can break into your MongoDB Atlas and export the **users** collection from your database to a JSON file, then within a few days, they can find out all of the weakest passwords in your database within a few days\n\t\t- **therefore, don't use MD5 or SHA-1 hashing for saving passwords even if the hashing is salted**\n\t- **>>> 4. best solution: use slow-hashing algorithms such as bcrypt**\n\t\t- bcrypt is **more secure** than MD5 and SHA-1 at hashing passwords because\n\t\t\t- A. **it's slower** (ironically, the fact that the algorithm takes **longer** to encrypt makes it **safer**)\n\t\t\t- B. in addition, it requires a random salt for each password by default\n\t\t- **A. slowness is a feature**\n\t\t\t- *\"Password hash functions should be relatively expensive to calculate in case of brute-force attacks.\"*\n\t\t\t\t- the longer it takes to compute the hash, the less practical it is to calculate hashes on a large scale and less effective brute force attacks are\n\t\t\t- instead of instantly creating a hash, you can configure it to take e.g. between 1 and 5 seconds\n\t\t\t\t- this means that users when logging in will have to wait a few seconds before their password is checked, but this is usually tolerable and often not even noticed\n\t\t\t\t- however, this means that instead of a hacker being able to check e.g. 100,000 password combinations per second, it can only check e.g. 10 per second\n\t\t- **B. require a random salt for each password by default**\n\t\t\t- bcrypt stores the salt in the hash in plain text\n\t\t\t\t- when you create a password, a random string (salt) is created and added to the front of the hash, the resulting salt+hash is stored in the database\n\t\t\t\t- for two passwords that are similar, the resulting salt+hash stored in the database is vastly different\n\t\t\t\t- this makes rainbow tables useless\n\t\t- **therefore, to secure passwords in your database, use bcrypt**\n\t\t\t- bcrypt pushes the hacker back to their previous attack method: \n\t\t\t\t- they have a different salt for each password which makes the resulting salt-hash strings completely random\n\t\t\t\t- the hashing algorithm is programmed to be slow so they can't use computer speed to create and try millions of password combinations within any reasonable amount of time\n- **How to use bcrypt**\n\t- 1. create and compare hash at register and login\n\t\t- install bcrypt\n\t\t\t- `npm i bcrypt`\n\t\t- **at signup**, take password, create hash with salt using `bcrypt.hash()`, store hash in database\n\t\t- **at login**, take password, compare password with hash in database using `bcrypt.compare()`\n\t\t\t- bcrypttest.js\n\t\t\t-------------------------------\n\t\t\timport bcrypt from 'bcrypt';\n\n\t\t\tconst register = async (password) => {\n\t\t\t\tconst salt = await bcrypt.genSalt(12);\n\t\t\t\tconst hash = await bcrypt.hash(password, salt);\n\t\t\t\tconsole.log(hash); // store hash in database in user's record\n\t\t\t};\n\n\t\t\tconst login = async (password) => {\n\t\t\t\tconst hash = '$2b$10$Q7OpcC8DJ6qnDFtTDXwdyeI8zjzKBqOn68kV3U8UM1vOW0hnfspK6'; // get hash from user record in database\n\t\t\t\tconst result = await bcrypt.compare(password, hash);\n\t\t\t\tconsole.log(result)\n\t\t\t};\n\n\t\t\t// register('test111');\n\t\t\tlogin('test000'); // false \n\t\t\tlogin('test111'); // true\n\t\t\t-------------------------------\n\t- 2. understand how bcrypt can successfully compare the password without knowing the original salt\n\t\t- for the password \"password\", signing up three times produced the following three hashes:\n\t\t\t-----------------------------\n\t\t\t$2b$10$XEcAhERMwhaM1bk/10xAwuhY6oeYH27uM.W44ycMeFdYkBBqR7Cdy\n\t\t\t$2b$10$cK7Wui1Aex127Qcf/U59W.9OliIm5oLwvRGXU2XopBnGlZbjnpmXG\n\t\t\t$2b$10$oiqPsOlhIYS6ocOFgls7Huo.a4819mV5P/qbKRv2Id8rUJKGOO/nK\n\t\t\t-----------------------------\n\t\t- this is because the **salt** is random and hence different each time, which produces a different hash each time\n\t\t\t--------------------------------------\n\t\t\tconst register = async (password) => {\n\t\t\t\tconst salt = await bcrypt.genSalt();\n\t\t\t\tconst hash = await bcrypt.hash(password, salt);\n\t\t\t\tconsole.log('SALT', salt); // random salt that produces a random has each time\n\t\t\t\tconsole.log('HASH', hash); // hash is store in database\n\t\t\t};\n\t\t\t--------------------------------------\t\t\t\n\t\t- do you recognize a similarity between each **salt** and the **hash** it produces?##mmmrecognisfpat\n\t\t- right: when creating the hash, the salt is used as the first 29 characters (in our case here, but this may vary)\n\t\t- so **registration** works like this:\n\t\t\t- generates a random salt, e.g. `$2b$10$v3LXMvdqkaALgMEMqNaexe`\n\t\t\t- encrypts salt+password to create a **prehash**, e.g. `zhj9bxX1FKHEsxMR97MMETXEFEQFUDu`\n\t\t\t- adds the **salt** to the **prehash** go get the resulting **hash**: \n\t\t\t\t- `$2b$10$v3LXMvdqkaALgMEMqNaexezhj9bxX1FKHEsxMR97MMETXEFEQFUDu`\n\t\t\t- the hash is then stored in the database\n\t\t- and **login** works like this:\n\t\t\t- takes the attempted password from the user\n\t\t\t- gets the salt from the stored hash (in our case, the first 29 characters)\n\t\t\t- takes this **salt** and the attempted **password**, and generates a **prehash** again\n\t\t\t- adds the **salt** to the **prehash** and to get a **hash**\n\t\t\t- if they match, then the user typed in the right password\n\t- 3. how to throttle bcrypt's speed of hash creation\n\t\t- while random salts make hacking the password more difficult\n\t\t\t- it is the speed throttling which disables brute force attacks\n\t\t- you can slow down the speed of hash creation \n\t\t\t- to make it more difficult for a hacker to compare millions of passwords with brute-force\n\t\t- to slow down speed, add a **rounds** parameter when you call the **genSalt** function\n\t\t- generally **12** is a highly secure number of rounds which allows for even weak passwords\n\t\t\t- this makes the time to create the hash about 250ms, or a quarter of a second\n\t\t\t- this is tolerable for any user when registering and logging in\n\t\t\t\t- but slows a hacker down to comparing only 4 passwords second\n\t\t\t\t- 86400 seconds in a day * 4 = only 345600 passwords compared per day\n\t\t\t- **what you are doing here is not so much preventing hackers from ever cracking user's passwords, but buying your users time to change their passwords after an attack**\n\t\t\t- since even with bcrypt an extremely week password such as **password** will be once of the first most hackers choose to test, and so it will usually be hacked within the first few minutes\n\t\t\t- one can appreciate now how important it is to have both (1) **bcrypt** and (2) a **secure password policy** in place, e.g. at least 8 digits with upper and lowercase, numbers and special characters\n\t\t\t\t- since this buys your users time **not in minutes or hours** but **weeks and months** in the case of having the password hashes stolen from the database\n\t\t- here is a general chart listing rounds and seconds, combined with a secure password policy\n\t\t\t-----------------------------------------\n\t\t\tRounds:4  | Time: 0.0016 s /* security too lax */\n\t\t\tRounds:5  | Time: 0.0029 s\n\t\t\tRounds:6  | Time: 0.0060 s\n\t\t\tRounds:7  | Time: 0.0115 s\n\t\t\tRounds:8  | Time: 0.0232 s\n\t\t\tRounds:9  | Time: 0.0459 s\n\t\t\tRounds:10 | Time: 0.0907 s /* good enough */\n\t\t\tRounds:11 | Time: 0.1834 s \n\t\t\tRounds:12 | Time: 0.3563 s /* standard */ \n\t\t\tRounds:13 | Time: 0.7215 s \n\t\t\tRounds:14 | Time: 1.4437 s /* in critical systems for e.g. superuser password */\n\t\t\tRounds:15 | Time: 2.9140 s\n\t\t\tRounds:16 | Time: 5.8405 s\t\t\t\n\t\t\t-----------------------------------------\n- **CHALLENGE: Create a full-stack MongoDB app that has two routers \"register\" and \"login\" which allows a user to register and login, storing the password as a hash in the database**\n\t- for a template to start with, see: https://github.com/edwardtanguay/830-mongo-book-app","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-02-13 01:15:10","systemWhoCreated":"systemUnknown"},{"id":828,"category":"sessions/cookies","title":"Create a fullstack React/Node/Express/MongoDB site that uses sessions/cookies for authentication","body":"- **background**\n\t- this how to will show you how to implement authentication in your website using sessions and cookies\n\t- we will first build a **backend** that has a\n\t\t- `/users/login` route which allows a user to identify themselves\n\t\t\t- if unsuccessul, this route will return a 401\n\t\t\t- if successful\n\t\t\t\t- a cookie will be set in the browser which has a time-to-live of e.g. 20 minutes\n\t\t\t\t- this route will return a 200 along with the object of the user that just logged in\n\t\t- `/users/current` route which gets the current user\n\t\t\t- while the cookie is still active, this route will return the object of the user who is logged in\n\t\t\t- when the cookie expires, this route will return a 401\n\t\t- `/users/logout` route which logs the user out\n\t\t\t- the user object is set to null\n\t\t\t- this route returns a 200\n\t- then we will build a **frontend** which will allow the user to log in and stay logged in until the cookie expires\n\t\t- when the site loads, a request is sent to `/users/current`\n\t\t\t- if a 200 and user object are returned, that user is set as the current user\n\t\t\t\t- the name of the user is displayed\n\t\t\t\t- the user has access to privileged pages\n\t\t- if logged out, user can log in\n\t\t\t- a request is sent to `/users/login` along with the form data fields login/password\n\t\t\t- if a 200 and user object are returned, that user is set as the current user\n\t\t\t\t- the name of the user is displayed\n\t\t\t\t- the user has access to privileged pages\n\t\t- if logged in, user can log out\n\t\t\t- user name is no longer displayed\n\t\t\t- priviledged pages are no longer available\n\t- before we begin, let's get an idea of how **session/cookies** vs. **JWT** work\n\t\t- [Understand the difference between session-cookies and JWT tokens](https://tanguay-eu.vercel.app/howtos/680)\n\t- code is here:\n\t\t- https://github.com/edwardtanguay/et729-session-cookie-fullstack (2024-02-13 preparation)\n\t\t- https://github.com/edwardtanguay/et730-session-cookie-fullstack (2024-02-14 live-coding)\n- **>>> 1. Create simple full-stack MERN site from starter template**\n\t- go to: https://github.com/edwardtanguay/830-mongo-book-app\n\t- **Use this template**\n\t- **Create a new repository**\n\t- create a site called e.g. **et729-session-cookie-fullstack** (use your own initials and number)##thecreateagainsss\n\t- clone the site in your **projects** directory\n\t\t- click the button##thegisclone\n\t\t- `git clone <paste-url>`\n\t- enter VSCode\n\t\t- e.g. `code et729-session-cookie-fullstack`\n\t- set up site\n\t\t- `.env`\n\t\t\t- DB_URL = mongodb://localhost:27017/et729-session-cookie-fullstack\n\t\t- `npm i`\n\t\t- ports will be:\n\t\t\t- frontend port: **4311**\n\t\t\t\t- change in **packages.json**\n\t\t\t- backend port: **4211**\n\t\t\t\t- change in **config.ts**\n\t\t\t\t- change in **test.rest**\n\t\t\t\t- change in **AppContext.tsx**\n\t\t- `npm run dev`\n\t\t\t- site will look like this:##mmmsitewills\n- **>>> 2. Fill site with data**\t\t\t\n\t- create a mock book and user\n\t\t- in **test.rest**\n\t\t\t- create a book##mmmcccbook\n\t\t\t- create a user##mmmcccuser\n\t\t- view in Compass##vmmmviewincomp\n\t\t- view in browser#gif#tehmmmusing\n\t- add login/hash to users\n\t\t- **userSchema.ts**\n\t\t\t----------------------------------------------\n\t\t\tlogin: String,\n\t\t\thash: String,\t\t\t\t\n\t\t\t----------------------------------------------\n\t\t- in Compass, delete the user you added above (since it doesn't have **login** and **hash**)##thedmmdelete\n\t\t- now add two users with login names in **test.rest**\n\t\t\t- first\n\t\t\t\t--------------------------------------\t\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Amber\",\n\t\t\t\t\t\"lastName\": \"Ashton\",\n\t\t\t\t\t\"login\": \"aa\",\n\t\t\t\t\t\"hash\": \"\",\t\n\t\t\t\t\t\"email\": \"aa@company.com\",\n\t\t\t\t\t\"address\" : {\n\t\t\t\t\t\t\"street\": \"Holework Street 23\",\n\t\t\t\t\t\t\"zipCode\": 31239,\n\t\t\t\t\t\t\"city\": \"Birmingham\"\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t--------------------------------------\n\t\t\t- second\n\t\t\t\t--------------------------------------\n\t\t\t\t{\n\t\t\t\t\t\"firstName\": \"Bernd\",\n\t\t\t\t\t\"lastName\": \"Buchholz\",\n\t\t\t\t\t\"login\": \"bb\",\n\t\t\t\t\t\"hash\": \"\",\t\n\t\t\t\t\t\"email\": \"bb@company.com\",\n\t\t\t\t\t\"address\" : {\n\t\t\t\t\t\t\"street\": \"Holework Street 23\",\n\t\t\t\t\t\t\"zipCode\": 31239,\n\t\t\t\t\t\t\"city\": \"Birmingham\"\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t\t--------------------------------------\n\t\t\t- you will now have two users##mmmnowthetwo\n- **>>> 3. Create a login route that sets session information**\t\n\t- install npm packages and their types in order to use **sessions and cookies**\n\t\t- `npm i express-session`\n\t\t- `npm i -D @types/express-session`\n\t\t- `npm i cookie-parser`\n\t\t- `npm i -D @types/cookie-parser`\n\t- set up backend to use sessions and cookies\n\t\t- **index.ts**\n\t\t\t-------------------------------------------------------\n\t\t\timport session from \"express-session\";\n\t\t\timport cookieParser from \"cookie-parser\";\n\n\t\t\tapp.use(\n\t\t\t\tsession({\n\t\t\t\t\tresave: true,\n\t\t\t\t\tsaveUninitialized: true,\n\t\t\t\t\tsecret: \"tempsecret\",\n\t\t\t\t})\n\t\t\t);\t\t\t\n\t\t\tapp.use(cookieParser());\t\t\t\n\t\t\t-------------------------------------------------------\t\n\t- create login route which sets session if login is correct (we'll ignore password for now)\n\t\t- **userController.ts**\n\t\t\t----------------------------------------------------\n\t\t\texport const loginUser = async (req: any, res: express.Response) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst { login } = req.body;\n\t\t\t\t\tconst user = await User.findOne({ login });\n\t\t\t\t\tif (user !== null) {\n\t\t\t\t\t\tconst seconds = 10;\n\t\t\t\t\t\treq.session.user = user;\n\t\t\t\t\t\treq.session.cookie.expires = new Date(Date.now() + seconds * 1000);\n\t\t\t\t\t\treq.session.save();\n\t\t\t\t\t\tres.json(user);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.status(401).json(\"bad login\");\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\thandleError(res, e);\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t\t----------------------------------------------------\n\t- inform TypeScript that we are adding a **user** property to the session object\n\t\t- **userController.ts**\n\t\t\t-------------------------------------------------------------\n\t\t\tdeclare module \"express-session\" {\n\t\t\t\tinterface SessionData {\n\t\t\t\t\tuser: object;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t-------------------------------------------------------------\n\t- **userRouter.ts**\n\t\t-------------------------------------------\n\t\tuserRouter.route(\"/login\").get(loginUser);\t\t\n\t\t-------------------------------------------\t\t\t\n\t- **test.rest**\n\t\t------------------------------------------------\n\t\t### LOGIN USER\n\t\tPOST {{url}}/users/login\n\t\tcontent-type: application/json\n\n\t\t{\n\t\t\t\"login\": \"aa\",\n\t\t\t\"password\": \"\"\n\t\t}\t\t\t\t\n\t\t------------------------------------------------\n\t- you will now be able to log in with **aa**##ambermmmsd\n- **>>> 4. Create a route to check if there is a user who is currently logged in**\t\t\n\t- we will use this on the frontend when the site loads to see if a user is logged in\n\t\t- if so, we will log them in on the frontend again\n\t\t- this way, a user can log in, then refresh the browser \n\t\t- or even close the browser window and go back to the site\n\t\t- and they will still be logged in\n\t\t- until their cookie expires\n\t- **userController.ts**\n\t\t------------------------------------------\n\t\texport const getCurrentUser = async (\n\t\t\treq: express.Request,\n\t\t\tres: express.Response\n\t\t) => {\n\t\t\ttry {\n\t\t\t\tif (req.session.user) {\n\t\t\t\t\tres.send(req.session.user);\n\t\t\t\t} else {\n\t\t\t\t\tres.status(401).send(\"no user logged in\");\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandleError(res, e);\n\t\t\t}\n\t\t};\t\t\n\t\t------------------------------------------\n\t- **userRouter.ts**\n\t\t-------------------------------------------\n\t\tuserRouter.route(\"/current\").get(getCurrentUser);\t\t\n\t\t-------------------------------------------\n\t- **test.rest**\n\t\t------------------------------------------------\n\t\t### CURRENT USER\n\t\tGET {{url}}/users/current\t\t\t\n\t\t------------------------------------------------\n\t- now test these two routes\n\t\t- log in as **aa**\n\t\t- click the **/users/current** route for 10 seconds\n\t\t\t- you will see that **aa** remains logged in\n\t\t- click the **/users/current** AFTER 10 seconds\n\t\t\t- you will see that the **aa** user is no longer logged in#gif#mmmcheckthis\n- **>>> 5. Create a logout route**\t\n\t- **userController.ts**\n\t\t------------------------------------------\n\t\texport const logoutUser = async (req: express.Request, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\treq.session.user = null;\n\t\t\t\tres.send(\"user logged out\");\n\t\t\t} catch (e) {\n\t\t\t\thandleError(res, e);\n\t\t\t}\n\t\t};\n\t\t------------------------------------------\n\t- **userRouter.ts**\n\t\t-------------------------------------------\n\t\tuserRouter.route(\"/logout\").get(logoutUser);\t\t\n\t\t-------------------------------------------\n\t- **test.rest**\n\t\t------------------------------------------------\n\t\t### LOGOUT USER\n\t\tGET {{url}}/users/logout\t\t\n\t\t------------------------------------------------\n\t- now test these three routes\n\t\t- log in as **aa**\n\t\t- click the **/users/current** route\n\t\t\t- you will see that **aa** remains logged in\n\t\t- within 10 seconds, click the **/users/logout** route\n\t\t- within 10 seconds, click the **/users/current**\n\t\t\t- you will see that the **aa** users is already logged out#gif#mmmcheckthis2222\n- **>>> 6. Put session secret in .env file**\n\t- the session secret is sensitive information \n\t- and so should be saved in the .env file\n\t- **config.ts**\n\t\t---------------------------------------\n\t\texport const sessionSecret = (): string => {\n\t\t\treturn String(process.env.SESSION_SECRET);\n\t\t}\t\t\n\t\t---------------------------------------\n\t- **index.ts**\n\t\t--------------------------------------------\n\t\tapp.use(\n\t\t\tsession({\n\t\t\t\tresave: true,\n\t\t\t\tsaveUninitialized: true,\n\t\t\t\tsecret: config.sessionSecret()\n\t\t\t})\n\t\t);\t\t\n\t\t--------------------------------------------\n\t- **.env**\n\t\t-------------------------------------------\n\t\tSESSION_SECRET = 1234sdfsidf23434g\t\t\n\t\t-------------------------------------------\n- **>>> 7. Put session secret in .env file**\n\t- if you intend others to use your project\n\t- or if you intend to use it in the future\n\t- it's a good idea to take the time to create a **README** file that has info and instructions on how to set up your site\n\t- **README.md**\n\t\t-----------------------------------------------------\n\t\t# et729-session-cookie-fullstack\n\n\t\t- this is a full-stack MERN site that demonstrates the use of session/cookies for authentication\n\n\t\t## setup\n\n\t\t- create `.env` file with\n\t\t\t- connection string with name of the MongoDB database you want to use\n\t\t\t- random session secret for session cookies\n\n\t\t```\n\t\tDB_URL = mongodb://localhost:27017/et729-session-cookie-fullstack\n\t\tSESSION_SECRET = 123456789abcd\n\t\t```\n\n\t\t## start\n\n\t\t- `npm i`\n\t\t- `npm run dev`\t\t\n\t\t-----------------------------------------------------\n\t- this gives others a nice overview when they visit your repository at GitHub##mmmreadmemok\n- **>>> 8. Create basic login page with styledHTML form**\n\t- **PageLogin.tsx**\n\t\t----------------------------------------------\n\t\texport const PageLogin = () => {\n\t\t\treturn (\n\t\t\t\t<form className=\"mt-2 flex flex-col gap-3 w-[19rem] bg-slate-300 pt-6 px-4 pb-4 rounded-lg\">\n\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t<label className=\"w-[4.5rem]\" htmlFor=\"login\">Login:</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"login\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t<label className=\"w-[4.5rem]\" htmlFor=\"password\">Password:</label>\n\t\t\t\t\t\t<input id=\"password\" type=\"password\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex justify-end pr-2\">\n\t\t\t\t\t\t<button className=\"bg-slate-200 px-2 py-1 rounded\">Login</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t);\n\t\t};\t\t\t\n\t\t----------------------------------------------\n\t- **Nav.tsx**\n\t\t-----------------------------------------------\n\t\t<li><NavLink to=\"/login\">Login</NavLink></li>\n\t\t-----------------------------------------------\n\t- **main.tsx**\n\t\t-------------------------------------------\n\t\t{\n\t\t\tpath: \"login\",\n\t\t\telement: <PageLogin />,\n\t\t},\t\t\t\n\t\t-------------------------------------------\n\t- the login page looks like this:##mmmtheforjsmsj\n- **>>> 9. Enable form to send its data to the backend route and console log the response**\n\t- **interfaces.ts**\n\t\t-----------------------------------------------\n\t\texport interface ILoginFormData {\n\t\t\tlogin: string;\n\t\t\tpassword: string;\n\t\t}\n\n\t\texport const initialLoginFormData = {\n\t\t\tlogin: '',\n\t\t\tpassword: ''\n\t\t}\t\t\n\t\t-----------------------------------------------\n\t- **AppContext.tsx**\n\t\t-------------------------------------------------\n\t\tinterface IAppContext {\n\t\t\tbooks: IBook[];\n\t\t\tusers: IUser[];\n\t\t\tloginFormData: ILoginFormData;\n\t\t\thandleLoginFormFieldChange: (\n\t\t\t\tfieldIdCode: string,\n\t\t\t\tfieldValue: string\n\t\t\t) => void;\n\t\t\thandleLoginFormSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n\t\t}\t\t\n\n\t\tconst handleLoginFormFieldChange = (\n\t\t\tfieldIdCode: string,\n\t\t\tfieldValue: string\n\t\t) => {\n\t\t\tswitch (fieldIdCode) {\n\t\t\t\tcase \"login\":\n\t\t\t\t\tloginFormData.login = fieldValue;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"password\":\n\t\t\t\t\tloginFormData.password = fieldValue;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsetLoginFormData(structuredClone(loginFormData));\n\t\t};\n\n\t\tconst handleLoginFormButton = (e: React.FormEvent<HTMLFormElement>) => {\n\t\t\te.preventDefault();\n\t\t\t(async () => {\n\t\t\t\tconst headers = {\n\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t};\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await axios.post(\n\t\t\t\t\t\t`${backendUrl}/users/login`,\n\t\t\t\t\t\tloginFormData,\n\t\t\t\t\t\t{ headers }\n\t\t\t\t\t);\n\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"error\");\n\t\t\t\t\t}\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\tconsole.log(\"error\");\n\t\t\t\t}\n\t\t\t})();\n\t\t};\t\t\n\t\t-------------------------------------------------\n\t- **PageLogin.tsx**\n\t\t------------------------------------------------\n\t\timport { useContext } from \"react\";\n\t\timport { AppContext } from \"../AppContext\";\n\n\t\texport const PageLogin = () => {\n\t\t\tconst { loginFormData, handleLoginFormFieldChange, handleLoginFormSubmit } =\n\t\t\t\tuseContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<form\n\t\t\t\t\tclassName=\"mt-2 flex flex-col gap-3 w-[19rem] bg-slate-300 pt-6 px-4 pb-4 rounded-lg\"\n\t\t\t\t\tonSubmit={(e) => handleLoginFormSubmit(e)}\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t<label className=\"w-[4.5rem]\" htmlFor=\"login\">\n\t\t\t\t\t\t\tLogin:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tid=\"login\"\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tvalue={loginFormData.login}\n\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\thandleLoginFormFieldChange(\"login\", e.target.value)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex gap-3\">\n\t\t\t\t\t\t<label className=\"w-[4.5rem]\" htmlFor=\"password\">\n\t\t\t\t\t\t\tPassword:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t\tvalue={loginFormData.password}\n\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\thandleLoginFormFieldChange(\"password\", e.target.value)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex justify-end pr-2\">\n\t\t\t\t\t\t<button className=\"bg-slate-200 px-2 py-1 rounded\">\n\t\t\t\t\t\t\tLogin\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t);\n\t\t};\n\t\t------------------------------------------------\n\t- the form now works like this:#gif#demoformobjec\n- **>>> 10. When logged in, show user information on page**\n\t- DOING...\n- **>>> 11. Make logout link in menu**\n\t- DOING...\n- **>>> 12. When user is not logged in, hide the users page**\n\t- DOING...","points":20,"extras":"","systemWhenCreated":"2024-02-14 01:34:34","systemWhoCreated":"systemUnknown"},{"id":829,"category":"JWT","title":"Create a fullstack React/Node/Express/MongoDB site that uses JWT for authentication","body":"- **background**\n\t- session/cookies and JWT (JSON Web Tokens) are two ways to implement authentication in web sites\n\t\t- get an understanding of the differences between the two here\n\t\t\t- [Understand the difference between session-cookies and JWT tokens](https://tanguay-eu.vercel.app/howtos/680)\n\t- since these two technologies are very similar\n\t\t- and it is important to understand the differences between the two\n\t\t- **in this howto** we will start with a project in which three routes\n\t\t\t- `/users/login`\n\t\t\t- `/users/current`\n\t\t\t- `/users/logout`\n\t\t- are implemented with **session/cookies** for authorization\n\t\t\t- if you haven't yet, complete the howto in which we build this session/cookie site\n\t\t\t\t- https://tanguay-eu.vercel.app/howtos/828\n\t\t- we will convert these routes to use **JWT** instead\n\t\t\t- in order to see the differences between the two technologies\n\t\t- then we will finish the **frontend** so that it uses these routes to\n\t\t\t- enable a user to **log in** and **log out** of the site\n\t\t\t- keep the user logged in even when they refresh the browser or leave the page and come page\n\t\t\t- authorize the user to see certain pages on the site based on his authenticated identity\n\t\t\t\t- e.g. when logged in a certain page will be visible that is not visable when logged out\n\t\t\t- end the session after a certain amount of time so that the user does not stay logged in permanently, e.g. has a 20-minute limit\n- code is here\n\t- https://github.com/edwardtanguay/et431-jwt-fullstack\n- finished site works like this:#gif#appropjsij\n- **>>> 1. Make a copy of a repository that has session/cookie authentication implemented**\n\t- copy template site\n\t\t- go to https://github.com/edwardtanguay/et730-session-cookie-fullstack\n\t\t- **Use this template**\n\t\t- **Create a new repository**\n\t\t- enter your project name e.g. **et431-jwt-fullstack** (choose your own prefix)\n\t\t- and click**Create repository**##createmmmitn\n\t- clone your repository and set up site on your computer\n\t\t- copy the SSH URL##clonemmmthe\n\t\t- in your project directory in your terminal, clone the repository and enter the project in VSCode\n\t\t\t- `git clone <paste-in-url>`\n\t\t\t- `code <name-of-directory>`##cloneitnowjsi\n\t- create **.env** file with the following entries: (1) MongoDB connection string, (2) a random session secret\n\t\t---------------------------------------------\n\t\tDB_URL = mongodb://localhost:27017/et431-jwt-fullstack\n\t\tSESSION_SECRET = 83jskjdfs34i34\t\t\n\t\t---------------------------------------------\n\t- start site\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- your site will look like this:##withthezero\n\t- open your Compass application\n\t\t- you will see you have a new database \n\t\t- with the name you specified in the connection string in your **.env** file##openandsee\n\t- test the application\n\t\t- in **test.rest** create one book and one user##intestrestclicktwice\n\t\t- refresh the site and you will have one book and one user##willhavemm2\n\t- familiarize yourself with the session/cookie routes in **userRouter.ts** and **userController.ts**\n\t\t- do this by using the **test.rest** file to \n\t\t\t- log in as user (`/users/login`)\n\t\t\t- log out as user (`/users/logout`)\n\t\t\t- check the current user (`/users/current`)\t\t\t\n\t\t- if any of this is not clear, complete the howto again in which we build this session/cookie site\n\t\t\t- https://tanguay-eu.vercel.app/howtos/828\n- **>>> 2. Replace session/cookie authorization with JWT authorization**\n\t- goal\n\t\t- we will now refactor the site so that it **implements JWT** instead of session/cookies for authentication\n\t- uninstall cookie/session packages\n\t\t- `npm un cookie-parser`\n\t\t- `npm un express-session`\n\t\t- `npm un -D @types/cookie-parser`\n\t\t- `npm un -D @types/express-session`\n\t- install JWT packages\n\t\t- `npm i jsonwebtoken`\n\t\t- `npm i -D @types/jsonwebtoken` (TypeScript types)\n\t- create necessary JWT encoding and decoding functions\n\t\t- **backend/api/jwttools.ts**\n\t\t\t--------------------------------------------\n\t\t\timport express from 'express';\n\n\t\t\tinterface CustomRequest extends Request {\n\t\t\t\ttoken: string;\n\t\t\t}\n\n\t\t\texport const decodeJwt = (token: string) => {\n\t\t\t\tconst base64Url = token.split(\".\")[1];\n\t\t\t\tconst base64 = base64Url.replace(\"-\", \"+\").replace(\"_\", \"/\");\n\t\t\t\tconst decodedData = JSON.parse(\n\t\t\t\t\tBuffer.from(base64, \"base64\").toString(\"binary\")\n\t\t\t\t);\n\t\t\t\treturn decodedData;\n\t\t\t};\n\n\t\t\texport const verifyToken = (\n\t\t\t\treq: express.Request,\n\t\t\t\tres: express.Response,\n\t\t\t\tnext: express.NextFunction\n\t\t\t) => {\n\t\t\t\tconst bearerHeader = req.headers[\"authorization\"];\n\t\t\t\tif (typeof bearerHeader !== \"undefined\") {\n\t\t\t\t\tconst bearer = bearerHeader.split(\" \");\n\t\t\t\t\tconst bearerToken = bearer[1];\n\t\t\t\t\t(req as unknown as CustomRequest).token = bearerToken;\n\t\t\t\t\tnext();\n\t\t\t\t} else {\n\t\t\t\t\tres.sendStatus(403);\n\t\t\t\t}\n\t\t\t};\t\t\n\t\t\t--------------------------------------------\n\t- remove session/code code from **index.ts**##removemmindex\n\t- replace session/cookie code with JWT code\n\t\t- **userController.ts**\n\t\t\t- oben\n\t\t\t\t-------------------------------------------\n\t\t\t\timport jwt from \"jsonwebtoken\";\n\t\t\t\t-------------------------------------------\n\t\t\t- in **loginUser** controller##jwtsignmmm\n\t\t\t\t--------------------------------------------------\n\t\t\t\tjwt.sign(\n\t\t\t\t\t{ user },\n\t\t\t\t\tconfig.sessionSecret(),\n\t\t\t\t\t{ expiresIn: seconds + \"s\" },\n\t\t\t\t\t(err: any, token: any) => {\n\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\t--------------------------------------------------\n\t\t\t- in **getCurrentUser** controller##jwtsignmmm222\n\t\t\t\t--------------------------------------------------\n\t\t\t\tjwt.verify(\n\t\t\t\t\t(req as unknown as CustomRequest).token,\n\t\t\t\t\tconfig.sessionSecret(),\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tres.status(403).send('invalid token');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst data = jwttools.decodeJwt(\n\t\t\t\t\t\t\t\t(req as unknown as CustomRequest).token\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\tuser: data.user,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\t\t\t\t\n\t\t\t\t--------------------------------------------------\n\t\t\t- the **logoutUser** controller we can delete, since logging out will be handled on the frontend by simply deleting the JWT token##jwtisand333\n\t\t- **userRouter.ts**\n\t\t\t- delete the lines for **logoutUser**##jwtisand3333333\n\t- update **test.rest**\n\t\t- LOGIN USER \n\t\t\t- stays the same\n\t\t- CURRENT USER \n\t\t\t- sends content-type and authorization\n\t\t\t- the **JWTTOKENGOESHERE** will be replaced by the token received from the server at login\n\t\t- LOGOUT USER\n\t\t\t- can be deleted\n\t\t\t- since the logout route does not exist anymore##mmmtestrestsj\n\t\t\t\t-----------------------------------------------------------\n\t\t\t\tcontent-type: application/json\n\t\t\t\tauthorization: Bearer JWTTOKENGOESHERE\n\t\t\t\t-----------------------------------------------------------\n\t\t- you can now use **test.rest** to test your login and current user routes like this\n\t\t\t- note we changed the amount of seconds before timing out to **15** since it takes more time to copy the token#gif#thelikethisrtest\n- **>>> 3. One frontend enable user to login, refresh page and stay logged in, and log out**\n\t- currently in this project, the user can type in the form and change the **formData** object\n\t- program the from button so that it sends the form data to the backend and receives a response if a user was identified or not\n\t\t- **AppContext.tsx**\n\t\t\t---------------------------------------------------------\n\t\t\thandleLoginFormSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n\n\t\t\tconst handleLoginFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n\t\t\t\te.preventDefault();\n\t\t\t\t(async () => {\n\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response = await axios.post(\n\t\t\t\t\t\t\t`${backendUrl}/users/login`,\n\t\t\t\t\t\t\tloginFormData,\n\t\t\t\t\t\t\t{ headers }\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\tlocalStorage.setItem(\"token\", response.data.token);\n\t\t\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\"ERROR: bad login\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e: any) {\n\t\t\t\t\t\tconsole.log(\"ERROR: bad login\");\n\t\t\t\t\t}\n\t\t\t\t})();\n\t\t\t};\t\n\t\t\t---------------------------------------------------------\n\t\t- **PageLogin.tsx**\n\t\t\t---------------------------------------------------\n\t\t\tconst { loginFormData, handleLoginFormFieldChange, handleLoginFormSubmit } = useContext(AppContext);\n\n\t\t\t<form \n\t\t\tclassName=\"mt-2 flex flex-col gap-3 w-[19rem] bg-slate-300 pt-6 px-4 pb-4 rounded-lg\"\n\t\t\tonSubmit={(e) => handleLoginFormSubmit(e)}\n\t\t\t>\n\t\t\t---------------------------------------------------\n\t\t- you will now be able to log in as **bb** but any other login name will return an **invalid token**#gif#theinvkdjmmmtoken\n- **>>> 4. Display name when logged in, and stay logged in for 15 seconds**\n\t- in the backend, change:\n\t\t- login time limit seconds to **10** for easier testing\n\t\t- when sending the user to the client, only send an object with full name, not the full object including password hash, etc. (security issue)\n\t\t- **userController.ts**##bothsjtijmmm\n\t\t\t---------------------------------------------------------\n\t\t\tres.json({\n\t\t\t\tuser: {\n\t\t\t\t\tfullName: `${user.firstName} ${user.lastName}`,\n\t\t\t\t},\n\t\t\t\ttoken,\n\t\t\t});\n\n\t\t\tconst user = data.user;\n\t\t\tres.json({\n\t\t\t\tuser: {\n\t\t\t\t\tfullName: `${user.firstName} ${user.lastName}`,\n\t\t\t\t},\n\t\t\t});\n\t\t\t---------------------------------------------------------\n\t- **interfaces.ts**\n\t\t-----------------------------------------------\n\t\texport interface ICurrentUser {\n\t\t\tfullName: string;\n\t\t}\n\n\t\texport const initialCurrentUser = {\n\t\t\tfullName: ''\n\t\t}\n\t\t-----------------------------------------------\n\t- in **AppContext.tsx**, add **currentUser**\n\t\t-----------------------------------------------\n\t\timport {\n\t\t\tIBook,\n\t\t\tILoginFormData,\n\t\t\tIUser,\n\t\t\tinitialLoginformData,\n\t\t\tICurrentUser,\n\t\t\tinitialCurrentUser,\n\t\t} from \"./interfaces\";\t\t\n\n\n\t\tconst [currentUser, setCurrentUser] =\n\t\tuseState<ICurrentUser>(structuredClone(initialCurrentUser));\n\n\t\tuseEffect(() => {\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst headers = {\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\tauthorization: \"Bearer \" + localStorage.getItem(\"token\"),\n\t\t\t\t\t};\n\t\t\t\t\tconst response = await axios.get(\n\t\t\t\t\t\t`${backendUrl}/users/current`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theaders,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tsetCurrentUser(response.data.user);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetCurrentUser(initialCurrentUser);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsetCurrentUser(initialCurrentUser);\n\t\t\t\t}\n\t\t\t})();\n\t\t}, []);\n\t\t-----------------------------------------------\n\t- when user is logged in, display at tope\n\t\t- **Header.tsx**\n\t\t\t------------------------------------------------------\n\t\t\timport { useContext } from \"react\";\n\t\t\timport { Nav } from \"./Nav\";\n\t\t\timport { AppContext } from \"../AppContext\";\n\n\t\t\texport const Header = () => {\n\t\t\t\tconst { currentUser } = useContext(AppContext);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800\">\n\t\t\t\t\t\t\tLibrary Site\n\t\t\t\t\t\t\t{currentUser.fullName !== \"\" && (\n\t\t\t\t\t\t\t\t<span className=\"text-red-600 bg-yellow-300 text-2xl py-1 px-2 rounded ml-3\">{currentUser.fullName}</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<Nav />\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t------------------------------------------------------\n\t- the user now stays logged in for 10 seconds even when refreshing the page#gif#evenmmmrefresh\n- **>>> 5. On bad login, show user message in the form and clear fields**\n\t- **interfaces.ts** - add message to form data\n\t\t------------------------------------------\n\t\texport interface ILoginFormData {\n\t\t\tlogin: string;\n\t\t\tpassword: string;\n\t\t\tmessage: string;\n\t\t}\n\n\t\texport const initialLoginformData = {\n\t\t\tlogin: '',\n\t\t\tpassword: '',\n\t\t\tmessage: ''\n\t\t}\t\t\t\n\t\t------------------------------------------\n\t- **PageLogin.tsx** - show message in form\n\t\t---------------------------------------------\n\t\t<div className=\"flex justify-between pr-2\">\n\t\t\t<div className=\"text-red-600\">{loginFormData.message}</div>\n\t\t\t<button className=\"bg-slate-200 px-2 py-1 rounded\">\n\t\t\t\tLogin\n\t\t\t</button>\n\t\t</div>\t\t\t\n\t\t---------------------------------------------\n\t- **AppContext.tsx** - clear fields appropriately\n\t\t-------------------------------------------------\n\t\tconst [loginFormData, setLoginFormData] = useState<ILoginFormData>(structuredClone(initialLoginformData));\n\t\tconst [currentUser, setCurrentUser] = useState<ICurrentUser>(structuredClone(initialCurrentUser));\t\t\t\n\t\t-------------------------------------------------\n\t\t- in **handleLoginFormSubmit**, add message on error##mmmdotheadd\n\t- form will now work like this#gif#withejisnamenow\n- **>>> 5. When user logs in successfully, navigate to welcome page**\n\t- **AppContext.tsx** - add **callback** to handleLoginFormSubmit\n\t\t-------------------------------------------------------\n\t\thandleLoginFormSubmit: (e: React.FormEvent<HTMLFormElement>, callback: () => void) => void;\n\n\t\tconst handleLoginFormSubmit = (e: React.FormEvent<HTMLFormElement>, callback: () => void) => {\n\n\t\tif (response.status === 200) {\n\t\t\tlocalStorage.setItem(\"token\", response.data.token);\n\t\t\tsetCurrentUser(response.data.user);\n\t\t\tsetLoginFormData(structuredClone(initialLoginformData));\n\t\t\tcallback()\n\t\t-------------------------------------------------------\n\t- **PageLogin.tsx** - send callback function which navigate to welcome when logged in successfully\n\t\t-----------------------------------------------------\n\t\timport { useNavigate } from \"react-router-dom\";\n\n\t\tconst navigate = useNavigate();\n\n\t\t<form\n\t\t\tclassName=\"mt-2 flex flex-col gap-3 w-[19rem] bg-slate-300 pt-6 px-4 pb-4 rounded-lg\"\n\t\t\tonSubmit={(e) =>\n\t\t\t\thandleLoginFormSubmit(e, () => navigate(\"/welcome\"))\n\t\t\t}\n\t\t>\n\t\t-----------------------------------------------------\n\t- user now navigates to welcome when they log in successfully#gif#navigajtowle\n- **>>> 5. Add login item menu**\n\t- **AppContext.tsx** - add logout handling function\n\t\t--------------------------------------------------\n\t\thandleLogout: (callback: () => void) => void;\n\n\t\tconst handleLogout = (callback: () => void) => {\n\t\t\tlocalStorage.setItem('token', '');\n\t\t\tsetCurrentUser(structuredClone(initialCurrentUser));\n\t\t\tcallback();\n\t\t};\n\t\t--------------------------------------------------\n\t- **Nav.tsx** - add a pseudo page item in the menu which immediately logs user out and navigates to welcome page\n\t\t--------------------------------------------------------------------\n\t\t<li>\n\t\t\t<div\n\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\tonClick={() => handleLogout(() => navigate(\"/welcome\"))}\n\t\t\t>\n\t\t\t\tLogout\n\t\t\t</div>\n\t\t</li>\t\t\n\t\t--------------------------------------------------------------------\n\t- user can now log out:#gif#thelogmmnow\n- **>>> 5. Show login menu item when logged out and vice versa**\n\t- **Nav.tsx**\n\t\t-----------------------------------------------------------\n\t\t{currentUser.fullName === \"\" && (\n\t\t\t<li>\n\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t</li>\n\t\t)}\n\t\t{currentUser.fullName !== \"\" && (\n\t\t\t<li>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"cursor-pointer\"\n\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\thandleLogout(() => navigate(\"/welcome\"))\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tLogout\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t)}\t\n\t\t-----------------------------------------------------------\n\t- now the **Login** and **Logout** menu items are displayed appropriately#gif#appropjsij\n- **CHALLENGE: Add the feature that for logged out users, the Users page is hidden and only shown when a user is logged in**\n\t- consider here that you are only **hiding** the page from logged out users\n\t- note that if you load the **data** for the page (e.g. in this case all users, and the information in the JSX on the users page), then this information will still be contained in the JavaScript file that is sent to the browser\n\t\t- so the more sensitive the data, the more you want to **load it via API only when you know the user has been authenticated**\n- **CHALLENGE: Send more information in the currentUser object to the frontend and create Profile page**","points":20,"extras":"","systemWhenCreated":"2024-02-15 00:58:32","systemWhoCreated":"systemUnknown"},{"id":830,"category":"Authorization","title":"Add authorization to a fullstack MERN application that has JWT authentication","body":"- **background**\n\t- this howto builds on this howto [Create a fullstack React/Node/Express/MongoDB site that uses JWT for authentication](https://tanguay-eu.vercel.app/howtos/829)\n\t- in the above howto, we have a full-stack MERN application in one directory\n\t\t- Vite React as the frontend\n\t\t- Node/Express/MongoDB as the backend\n\t\t- **Authentication** is built in with JWT which allows a user to log in\n\t\t\t- when logged in, the Login menu item is hidden\n\t\t\t- when logged out, the Logout menu is hidden\n\t\t\t- but there is no classic **authorization** where some users have rights that others don't\n\t- we will now implement **authorization** that will work as follows\n\t\t- let's say this site is the site for a library book reading club \n\t\t- it allows anyone to join by registering on the site\n\t\t- after registering, they need to stop by the library and identify themselves\n\t\t- the librarian then logs in and confirms their membership\n\t\t- the new member can now log in and see the page with all the books the club is reading\n\t\t- librarian then makes a page for all members who will be attending an upcoming library conference\n\t\t\t- only members who buy tickets to the conference get access to this page\n- **code is here**\n\t- https://github.com/edwardtanguay/et121-library-authorization-site\n- **>>> 1. Create site as template from library site project with JWT authorization**\n\t- as mentioned above, we will start this project based on a site that has a menu, login and JWT authentication set up\n\t\t- if you want to build this base site step-by-step, see [Create a fullstack React/Node/Express/MongoDB site that uses JWT for authentication](https://tanguay-eu.vercel.app/howtos/829)\n\t- go to https://github.com/edwardtanguay/et432-jwt-fullstack\n\t- **Use this template**\n\t- **Create a new repository**\n\t- select owner, enter repository name, e.g. **et121-library-authorization-site** (use your own initials and number)\n\t- **Create repository**\n\t- go to project directory\n\t- clone project\n\t\t- copy SSH link from repository page\n\t\t- e.g. `git clone git@github.com:edwardtanguay/et121-library-authorization-site.git`\n\t- enter project with VSCode\n\t\t- e.g. `code et121-library-authorization-site`\n\t- set up site\n\t\t- **.env**\n\t\t\t--------------------------------------------------------\n\t\t\tDB_URL = mongodb://localhost:27017/et121-library-authorization-site\n\t\t\tSESSION_SECRET = jsjsj28734skdj\n\t\t\t--------------------------------------------------------\n\t- compile and start\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site will look like this:##thesite211\n\t- MongoDB Compass will look like this:##thecom211pass\n- **>>> 2. Set up users for authorization site**\n\t- first we will need to add a new field to our User schema: **accessGroups**\n\t\t- this will track which access groups each user has access to\n\t- add **accessGroups** and delete the address\n\t\t- **userSchema.ts**\n\t\t\t-----------------------------------------------------\n\t\t\timport mongoose from 'mongoose';\n\n\t\t\texport const userSchema = new mongoose.Schema(\n\t\t\t\t{\n\t\t\t\t\tlogin: String,\n\t\t\t\t\thash: String,\n\t\t\t\t\tfirstName: String,\n\t\t\t\t\tlastName: String,\n\t\t\t\t\taccessGroups: String,\n\t\t\t\t\temail: String\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcollection: 'users',\n\t\t\t\t\ttimestamps: true,\n\t\t\t\t\tversionKey: false\n\t\t\t\t}\n\t\t\t);\n\n\t\t\texport const User = mongoose.model('User', userSchema);\n\t\t\t-----------------------------------------------------\n\t\t- the string \"accessGroups\" will containg a comma-separated string of access groups, e.g. **loggedInUsers, members, administrators**\n\t\t\t- since we are using MongoDB, I could make this an array of strings\n\t\t\t- I choose instead to make it a string of comma-separated values\n\t\t\t\t- in order to make my data compatible with SQL databases\n\t\t\t\t- this means I could at any time switch out my MongoDB database with a MySQL database without having to change my data structure\n\t- note also that in this early development version of our application, **we do not yet use passwords** and so the **hash** field remains empty\n\t\t- this means that users can log in with their login only\n\t- create admin user\n\t\t- **test.rest**\n\t\t\t--------------------------------------------------------------\n\t\t\t### ADD ADMIN USER \n\t\t\tPOST {{url}}/users\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"login\": \"ig\", \n\t\t\t\t\"hash\": \"\",\n\t\t\t\t\"firstName\": \"Isabella\",\n\t\t\t\t\"lastName\": \"Graves\",\n\t\t\t\t\"accessGroups\": \"loggedInUsers, members, administrators\",\n\t\t\t\t\"email\": \"ig@htl.com\"\n\t\t\t}\n\t\t\t--------------------------------------------------------------\n\t\t- click on **send request** to create the admin user##clicksenressqq\n\t\t- you will have a new user in Compass##shouldmongosjs\n\t- update the User component to not display **address**\n\t\t- **User.tsx**\n\t\t\t-------------------------------------------------\n\t\t\timport { IUser } from \"../interfaces\";\n\n\t\t\tinterface IProps {\n\t\t\t\tuser: IUser;\n\t\t\t}\n\n\t\t\texport const User = ({ user }: IProps) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"bg-slate-300 p-3 w-[15rem] rounded\">\n\t\t\t\t\t\t<p className=\"font-semibold\">{user.firstName} {user.lastName}</p>\n\t\t\t\t\t\t<p>{user.email}</p>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------------------\n\t- login as user##sothloggin\n\t\t- logout again\n\t- now we need another user called **anonymousUser**\n\t\t- this user will represent any user that is **not yet logged in**\n\t\t- this means that **every user** of the site is authenticated as a user in the system\n\t\t- the **anonymousUser** is authenticated as a user in group **loggedOutUsers**\n\t\t- having this user makes authorization **more straight-forward and clear**\n\t\t- **test.rest**\n\t\t\t--------------------------------------------------------------\n\t\t\t### ADD ANONYMOUS USER \n\t\t\tPOST {{url}}/users\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"login\": \"anonymousUser\", \n\t\t\t\t\"hash\": \"\",\n\t\t\t\t\"firstName\": \"Anonymous\",\n\t\t\t\t\"lastName\": \"User\",\n\t\t\t\t\"accessGroups\": \"loggedOutUsers\",\n\t\t\t\t\"email\": \"\"\n\t\t\t}\n\t\t\t--------------------------------------------------------------\n\t\t- click on **send request** to create the anonymous user\n\t\t- you will see this user now in your Compass##nowwith2sdkfuser\n- **>>> 3. Refactor login process to use anonymous user**\n\t- change **/users/current** route to send anonymous user if no other user is logged in\n\t\t- **userController.ts**\n\t\t\t----------------------------------------------------\n\t\t\texport const getCurrentUser = async (req: any, res: express.Response) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst _anonymousUser = await User.findOne({ login: 'anonymousUser' });\n\t\t\t\t\tconst anonymousUser = tools.getCurrentUserFromUser(_anonymousUser);\n\t\t\t\t\tjwt.verify(\n\t\t\t\t\t\t(req as unknown as CustomRequest).token,\n\t\t\t\t\t\tconfig.sessionSecret(),\n\t\t\t\t\t\t(err: any) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\tcurrentUser: anonymousUser\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst data = jwttools.decodeJwt(\n\t\t\t\t\t\t\t\t\t(req as unknown as CustomRequest).token\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst currentUser = tools.getCurrentUserFromUser(data.user);\n\t\t\t\t\t\t\t\tres.json({\n\t\t\t\t\t\t\t\t\tcurrentUser \n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\thandleError(res, e);\n\t\t\t\t}\n\t\t\t};\t\t\t\n\t\t\t----------------------------------------------------\n\t- add accessGroups to currentUser since the frontend will now need it for authorization\n\t\t- **tools.ts**\n\t\t\t----------------------------------------------------\n\t\t\texport const getCurrentUserFromUser = (user: any) => {\n\t\t\t\treturn {\n\t\t\t\t\tfullName: `${user.firstName} ${user.lastName}`,\n\t\t\t\t\taccessGroups: user.accessGroups\n\t\t\t\t};\n\t\t\t};\n\t\t\t----------------------------------------------------\n\t- **interfaces.ts**\n\t\t------------------------------------------------\n\t\texport interface ICurrentUser {\n\t\t\tfullName: string;\n\t\t\taccessGroups: string;\n\t\t}\n\n\t\texport const initialCurrentUser:ICurrentUser = {\n\t\t\tfullName: '',\n\t\t\taccessGroups: ''\n\t\t}\n\t\t------------------------------------------------\n\t- when no user is logged in, the site will now show \"Anonymous User\" logged in##theanononolog\n\t- fix logout to reload the anonymous user\n\t\t- currently now, the logout will not reload the anonymous user\n\t\t- change this in **AppContext.tsx**\n\t\t\t------------------------------------------------------\n\t\t\tconst handleLogout = (onLoggedOut: () => void) => {\n\t\t\t\tlocalStorage.removeItem('token');\n\t\t\t\tsetCurrentUser(structuredClone(initialCurrentUser));\n\t\t\t\tloadCurrentUser();\n\t\t\t\tonLoggedOut();\n\t\t\t}\t\t\t\n\t\t\t------------------------------------------------------\n\t- refactor to determine loggedIn/loggedOut status by accessGroups instead of fullName\n\t\t- **src/tools.ts**\n\t\t\t---------------------------------------------------------\n\t\t\timport { ICurrentUser } from \"./interfaces\";\n\n\t\t\texport const isMemberOfAccessGroup = (currentUser:ICurrentUser, accessGroup: string) => {\n\t\t\t\tconst accessGroupItems = currentUser.accessGroups.split(',').map(m => m.trim());\n\t\t\t\treturn accessGroupItems.includes(accessGroup);\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------------------\n\t- **Header.tsx**\n\t\t---------------------------------------------------------\n\t\timport { useContext } from \"react\";\n\t\timport { Nav } from \"./Nav\";\n\t\timport { AppContext } from \"../AppContext\";\n\t\timport * as tools from \"../tools\";\n\n\t\texport const Header = () => {\n\t\t\tconst { currentUser } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800 flex gap-3\">\n\t\t\t\t\t\t<div>Library Site</div>\n\t\t\t\t\t\t{tools.isMemberOfAccessGroup(currentUser, \"loggedInUsers\") && (\n\t\t\t\t\t\t\t<div className=\"text-blue-950 bg-yellow-300 px-2 font-sans pb-1 rounded\">\n\t\t\t\t\t\t\t\t{currentUser.fullName}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</h1>\n\t\t\t\t\t<Nav />\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t---------------------------------------------------------\n\t- **Nav.tsx**\n\t\t-----------------------------------------------------------\n\t\t{tools.isMemberOfAccessGroup(currentUser, 'loggedOutUsers') && (\n\t\t\t<li>\n\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t</li>\n\t\t)}\n\t\t{tools.isMemberOfAccessGroup(currentUser, 'loggedInUsers') && (\n\t\t\t<li>\n\t\t\t\t<a className=\"cursor-pointer\" onClick={() => handleLogout(() => {\n\t\t\t\t\tnavigate('/login');\n\t\t\t\t})}>\n\t\t\t\t\tLogout\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t)}\t\t\n\t\t-----------------------------------------------------------\n\t- make debugging panel to make it clear while developing which user is logged in an which groups they belong to\n\t\t- **src/config.ts**\n\t\t\t---------------------------------------------------------\n\t\t\texport const isDebugging = () => {\n\t\t\t\treturn true;\n\t\t\t}\t\t\t\n\t\t\t---------------------------------------------------------\n\t\t- **Header.tsx**\n\t\t\t-------------------------------------------------------\n\t\t\t{config.isDebugging() && <div className=\"bg-black text-yellow-300 text-sm p-2 font-mono border-dashed border-red-800 border-4 mb-3 w-fit\">CURRENT USER: {currentUser.fullName} - {currentUser.accessGroups}</div>}\t\t\t\n\t\t\t-------------------------------------------------------\n\t\t- site now shows debugging information on the current user#gif#nowthdebuserus\n- **>>> 4. Make user page only visible to administrators**\n\t- hide anonymous user from users page\n\t\t- **interfaces.ts**\n\t\t\t-----------------------------------------------\n\t\t\texport interface IUser {\n\t\t\t\t_id: string;\n\t\t\t\tlogin: string;\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\taccessGroups: string;\n\t\t\t\temail: string;\n\t\t\t}\n\t\t\t-----------------------------------------------\n\t\t- **AppContext.tsx**\n\t\t\t--------------------------------------------------\n\t\t\tconst loadUsers = async () => {\n\t\t\t\tconst response = await axios.get(`${backendUrl}/users`);\n\t\t\t\tlet _users: IUser[] = response.data;\n\t\t\t\t_users = _users.filter(m => m.login !== 'anonymousUser');\n\t\t\t\tsetUsers(_users);\n\t\t\t};\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- user page now only shows real users##therealuserskjkj\n\t- create another user who is a member but not an administrator\n\t\t- **test.rest**\n\t\t\t------------------------------------------------\n\t\t\t### ADD NORMAL MEMBER \n\t\t\tPOST {{url}}/users\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"login\": \"ls\", \n\t\t\t\t\"hash\": \"\",\n\t\t\t\t\"firstName\": \"Leon\",\n\t\t\t\t\"lastName\": \"Schmitt\",\n\t\t\t\t\"accessGroups\": \"loggedInUsers, members\",\n\t\t\t\t\"email\": \"ls@htl.com\"\n\t\t\t}\n\t\t\t------------------------------------------------\n\t\t- click on **Send Request** to create user\n\t\t- check that you can see the users page with this user##yestheleaon\n\t\t- now allow only admins to see this page\n\t\t- **Nav.tsx**\n\t\t\t---------------------------------------------------------------------------\n\t\t\t{tools.isMemberOfAccessGroup(currentUser, \"administrators\") && (\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink to=\"/users\">Users</NavLink>\n\t\t\t\t</li>\n\t\t\t)}\n\t\t\t---------------------------------------------------------------------------\n\t\t- note that even if the user does not have a menu entry in Nav, they can still access the route##notethatifyoujsis\n\t\t- so on the users page, do not show any content if user is not authorized to see it\n\t\t\t- **PageUsers.tsx**\n\t\t\t\t-------------------------------------------------------\n\t\t\t\timport { useContext } from \"react\";\n\t\t\t\timport { AppContext } from \"../AppContext\";\n\t\t\t\timport { User } from \"../components/User\";\n\t\t\t\timport * as tools from \"../tools\";\n\n\t\t\t\texport const PageUsers = () => {\n\t\t\t\t\tconst { users, currentUser } = useContext(AppContext);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{tools.isMemberOfAccessGroup(currentUser, \"administrators\") ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<p className=\"mb-4\">There are {users.length} users:</p>\n\t\t\t\t\t\t\t\t\t<section className=\"flex gap-2 flex-wrap\">\n\t\t\t\t\t\t\t\t\t\t{users.map((user) => {\n\t\t\t\t\t\t\t\t\t\t\treturn <User user={user} key={user._id} />;\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (<p>no access</p>)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\t-------------------------------------------------------\n\t\t- note that even now, you have not protected the user data from non-admin users\n\t\t\t- to see this, install [React Developer Tools](https://addons.mozilla.org/en-US/firefox/addon/react-devtools) and you can view the content of all state variables##haveitanysdfsway\n\t\t\t- to protect against this, you would have to:\n\t\t\t\t- load all users only when an administrator logs in\n\t\t\t\t- and when an the currentUser is not an administrator, empty the array of users\n\t\t\t\t- note this is a **CHALLENGE** at the end of this howto\n- **>>> 5. Protect books page so only members can view it**\n\t- only show this page if currentUser is in the accessGroup **members**\n- **>>> 6. Create registration page**\n\t- allow anonymous user to sign up with this form:\n\t\t- First Name\n\t\t- Last Name\n\t\t- Login\n\t\t- Password\n\t\t- Email\n\t- in form handler, add user to database with following fields\n\t\t- accessGroups: **loggedInUser, registeringUsers**\n\t- on frontend, give user message that they can log in\n\t- when logged in on welcome page, show message: \"Please visit library and show identification at library desk.\"\n- **>>> 7. Allow administrators to confirm membership of registering users on the Users page**\n\t- on users page, for each user that is shown who is in the group \"registeringUsers\", show a button \"Confirm membership\"\n\t- when clicked, access route **users/confirm-membership**\n\t\t- protect this route to make sure the current user is an admin (!)\n\t\t- change accessGroups to: **loggedInUser, members**\n\t- now log in as the member who was confirmed and see that they can now view the member page\n\t- also make sure they no longer see the message on the welcome page, \"Please visit library...\"\n**>>> CHALLENGE: Show the access groups near the name of the logged in person**##showthenasadd\n**>>> CHALLENGE: Increase security so that the contents of the user page is not available in the transpiled JavaScript file**##haveitanysdfsway","points":20,"extras":"","systemWhenCreated":"2024-02-18 23:31:35","systemWhoCreated":"systemUnknown"},{"id":831,"category":"File Uploading","title":"Add file-uploading to a fullstack MERN application","body":"- **background**\n\t- this howto builds on this howto [Add authorization to a fullstack MERN application that has JWT authentication](https://tanguay-eu.vercel.app/howtos/830)\n\t- in the above howto, we have a full-stack MERN application in one directory\n\t\t- Vite React as the frontend\n\t\t- Node/Express/MongoDB as the backend\n\t\t- **Authentication** is built in with JWT which allows a user to log in\n\t\t- **Authorization** is built in based on a field in the users Schema called **accessGroups**\n\t- we will now implement **file-uploading** by \n\t\t- creating a **profile page** that shows their information\n\t\t- allowing only members to access this page\n\t\t- when a member is on this page, they can upload a profile picture\n\t\t- these profile pictures will show on the users page\n- **code is here**\n\t- https://github.com/edwardtanguay/et891-library-file-upload (preparation)\n\t- https://github.com/edwardtanguay/et892-library-file-upload (live-coding 2024-02-20)\n- **finished site works like this**#gif#theuploadilfnmern\n- **>>> 1. Create site as template from library site project with JWT authorization**\n\t- as mentioned above, we will start this project based on a site that has a menu, login, plus JWT authentication/authorization set up\n\t\t- if you want to build this base site step-by-step, see [Add authorization to a fullstack MERN application that has JWT authentication](https://tanguay-eu.vercel.app/howtos/830)\n\t- go to https://github.com/edwardtanguay/et121-library-authorization-site\n\t- **Use this template**\n\t- **Create a new repository**\n\t- select owner, enter repository name, e.g. **et891-library-file-upload** (use your own initials and number)\n\t- **Create repository**\n\t- go to project directory\n\t- clone project\n\t\t- copy SSH link from repository page\n\t\t- e.g. `git clone git@github.com:edwardtanguay/et891-library-file-upload.git`\n\t- enter project with VSCode\n\t\t- e.g. `code et891-library-file-upload`\n\t- set up site\n\t\t- **.env**\n\t\t\t--------------------------------------------------------\n\t\t\tDB_URL = mongodb://localhost:27017/et891-library-file-upload\n\t\t\tSESSION_SECRET = jsjsj28734skdj\n\t\t\t--------------------------------------------------------\n\t- compile and start\n\t\t- `npm i`\n\t\t- `npm run dev`\n\t- site will look like this:##thesitewitnnno\n\t- MongoDB Compass will look like this:##addsomedatakjkj\n- **>>> 2. Add books and users to site and turn on debugging**\n\t- before we start developing our site with file-uploading\n\t\t- let's give it some data\n\t- **test.rest**\n\t\t- add two books \"Book 001\" and \"Book 002\"##addtwobooksoo1\n\t\t- add the **librarian**, the **normal member**, and the system **anonymousUser**##add3ksjdf\n\t- now use the site again\n\t\t- in **src/config.ts** set isDebugging to **true**\n\t\t- notice the books are added\n\t\t- log in as **ig**\n\t\t- click on users and see the two users (anonymousUser is a system user and hence is not shown)\n\t\t- logout#gif#nwoloaginmmm\n\t- so the site works\n- **>>> 3. Create profile page**\n\t- we will now create a profile page\n\t\t- it will be accessible only by members\n\t\t- when a member is on the profile page, they will see their profile information\n\t- **PageProfile.tsx**\n\t\t------------------------------------------------\n\t\timport { useContext } from \"react\";\n\t\timport { AppContext } from \"../AppContext\";\n\n\t\texport const PageProfile = () => {\n\t\t\tconst { currentUser } = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h2 className=\"text-2xl\">{currentUser.fullName}</h2>\n\t\t\t\t</>\n\t\t\t);\n\t\t};\t\t\n\t\t------------------------------------------------\n\t- **Nav.tsx**\n\t\t------------------------------------------\n\t\t{tools.isMemberOfAccessGroup(currentUser, \"members\") && (\n\t\t\t<li>\n\t\t\t\t<NavLink to=\"/profile\">Profile</NavLink>\n\t\t\t</li>\n\t\t)}\t\t\n\t\t------------------------------------------\n\t- **main.tsx**\n\t\t-------------------------------------------------\n\t\t{\n\t\t\tpath: \"profile\",\n\t\t\telement: <PageProfile />,\n\t\t},\n\t\t-------------------------------------------------\n\t- each member when logged in will be able to view their profile page#gif#seeachmemprofil\n\t- let's add an image and more information on the profile page\n\t\t- **backend/tools.ts** - add login and email\n\t\t\t---------------------------------------------\n\t\t\texport const getCurrentUserFromUser = (user: any) => {\n\t\t\t\treturn {\n\t\t\t\t\tfullName: `${user.firstName} ${user.lastName}`,\n\t\t\t\t\taccessGroups: user.accessGroups,\n\t\t\t\t\tlogin: user.login,\n\t\t\t\t\temail: user.email\n\t\t\t\t};\n\t\t\t};\t\t\t\n\t\t\t---------------------------------------------\n\t\t- also update **src/interfaces.ts** with login and email (note: we will use **login** for the name of the image e.g. **ig.jpg** for Isabella Graves)\n\t\t\t--------------------------------------------------------\n\t\t\texport interface ICurrentUser {\n\t\t\t\tfullName: string;\n\t\t\t\taccessGroups: string;\n\t\t\t\tlogin: string;\n\t\t\t\temail: string;\n\t\t\t}\n\n\t\t\texport const initialCurrentUser:ICurrentUser = {\n\t\t\t\tfullName: '',\n\t\t\t\taccessGroups: '',\n\t\t\t\tlogin: '',\n\t\t\t\temail: ''\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------------\n\t\t- add a default person icon image for when the member has not yet uploaded a photo\n\t\t\t- go to https://edwardtanguay.vercel.app/share\n\t\t\t\t- download this file and copy one of the icons into **public/images/users/noProfilePic.jpg**##theiconstofpickmmm\n\t\t- **ProfilePage.tsx** - add login, email and default image\n\t\t\t-------------------------------------------------------\n\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t<img className=\"w-[6rem] rounded\" src=\"images/users/noProfilePic.jpg\" />\n\t\t\t\t<div>\n\t\t\t\t\t<h2 className=\"text-2xl\">{currentUser.fullName}</h2>\n\t\t\t\t\t<p>Login: {currentUser.login}</p>\n\t\t\t\t\t<p>Email: {currentUser.email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\t\n\t\t\t-------------------------------------------------------\n\t\t- profile page now looks like this:##mmmprofpropage\n- **>>> 4. Enable the user to upload their own profile photo: FRONTEND**\n\t- **src/interfaces.ts**\n\t\t---------------------------------------------------\n\t\texport interface IFileItem {\n\t\t\tfirstName: string;\n\t\t\tlastName: string;\n\t\t\tlogin: string;\n\t\t\temail: string;\n\t\t\tfileName: string;\n\t\t\ticonPathAndFileName: string;\n\t\t}\n\n\t\texport interface IFormFields {\n\t\t\tfirstName: string;\n\t\t\tlastName: string;\n\t\t\tlogin: string;\n\t\t\temail: string;\n\t\t}\n\n\t\texport const _initialFormFields = {\n\t\t\tfirstName: \"\",\n\t\t\tlastName: \"\",\n\t\t\tlogin: \"\",\n\t\t\temail: \"\",\n\t\t};\n\n\t\texport interface IUploadFile {\n\t\t\tfile: File | null;\n\t\t\tpreview: string;\n\t\t}\n\n\t\texport const _initialUploadFile: IUploadFile = {\n\t\t\tpreview: \"\",\n\t\t\tfile: null,\n\t\t};\t\t\t\n\t\t---------------------------------------------------\n\t- **src/tools.ts**\n\t\t-----------------------------------------------------\n\t\texport const fillProfileFormFieldsWithCurrentUserFields = (formFields: IFormFields, currentUser: ICurrentUser) => {\n\t\t\tconst names = currentUser.fullName.split(' '); // TODO: refactore to send firstName/lastName from backend\n\t\t\tformFields.firstName = names[0];\n\t\t\tformFields.lastName= names[1];\n\t\t\tformFields.login = currentUser.login;\n\t\t\tformFields.email = currentUser.email;\n\t\t}\t\t\t\n\t\t-----------------------------------------------------\n\t- **PageProfile.tsx**\n\t\t----------------------------------------------------------\n\t\timport { useContext } from \"react\";\n\t\timport { AppContext } from \"../AppContext\";\n\t\timport * as tools from \"../tools\";\n\n\t\texport const PageProfile = () => {\n\t\t\tconst {\n\t\t\t\tcurrentUser,\n\t\t\t\tuploadFile,\n\t\t\t\tformFields,\n\t\t\t\thandleImageUploadForm,\n\t\t\t\thandleImageFileChange,\n\t\t\t\thandleFormFieldChange,\n\t\t\t} = useContext(AppContext);\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{tools.isMemberOfAccessGroup(currentUser, \"members\") ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<div className=\"flex gap-2\">\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tclassName=\"w-[6rem] rounded\"\n\t\t\t\t\t\t\t\t\tsrc=\"images/users/noProfilePic.jpg\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h2 className=\"text-2xl\">{currentUser.fullName}</h2>\n\t\t\t\t\t\t\t\t\t<p>Login: {currentUser.login}</p>\n\t\t\t\t\t\t\t\t\t<p>Email: {currentUser.email}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<form className=\"mt-4 bg-slate-500 p-4 rounded-lg w-[20rem]\" onSubmit={(e) => handleImageUploadForm(e)}>\n\t\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t<label className=\"block\" htmlFor=\"firstName\">First Name</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"firstName\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-[17.8rem]\"\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.firstName}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, \"firstName\")\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t<label className=\"block\" htmlFor=\"lastName\">Last Name</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"lastName\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-[17.8rem]\"\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.lastName}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, \"lastName\")\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t<label className=\"block\" htmlFor=\"login\">Login</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"login\"\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.login}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-[8rem]\"\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, \"login\")\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"mb-3\">\n\t\t\t\t\t\t\t\t\t<label className=\"block\" htmlFor=\"email\">Email</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\t\t\t\tvalue={formFields.email}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-[17.8rem]\"\n\t\t\t\t\t\t\t\t\t\tonChange={(e) =>\n\t\t\t\t\t\t\t\t\t\t\thandleFormFieldChange(e, \"email\")\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"mt-4 mb-3\">\n\t\t\t\t\t\t\t\t\t<label className=\"block mb-1\">Profile Image</label>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-sm\"\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => handleImageFileChange(e)}\n\t\t\t\t\t\t\t\t\t></input>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"flex justify-between\">\n\t\t\t\t\t\t\t\t\t<div className=\"preview\">\n\t\t\t\t\t\t\t\t\t\t{[\".jpg\", \".png\"].filter(\n\t\t\t\t\t\t\t\t\t\t\t(m) => uploadFile.file?.name.endsWith(m)\n\t\t\t\t\t\t\t\t\t\t).length > 0 ? (\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={uploadFile.preview}\n\t\t\t\t\t\t\t\t\t\t\t\twidth=\"100\"\n\t\t\t\t\t\t\t\t\t\t\t\theight=\"100\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"previewFileName\">\n\t\t\t\t\t\t\t\t\t\t\t\t{uploadFile.file?.name}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"mt-6 flex justify-end\">\n\t\t\t\t\t\t\t\t\t\t{/* TODO: put button on bottom of form when image is displayed left */}\n\t\t\t\t\t\t\t\t\t\t<button className=\"bg-gray-200 h-fit py-1 px-2 rounded text-base hover:bg-gray-300\" type=\"submit\">Update Profile</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p>no access</p>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t);\n\t\t};\n\t\t----------------------------------------------------------\n\t- **AppContext.tsx**\n\t\t---------------------------------------------------------------\n\t\thandleImageUploadForm: (e: React.FormEvent<HTMLFormElement>) => void;\n\t\thandleImageFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n\t\tuploadFile: IUploadFile;\n\t\tformFields: IFormFields;\n\t\tsetFormFields: (field: IFormFields) => void;\n\t\tfileItems: IFileItem[];\n\t\thandleFormFieldChange: (\n\t\t\te: React.ChangeEvent<HTMLInputElement>,\n\t\t\tfieldName: string\n\t\t) => void;\n\n\t\tconst [uploadFile, setUploadFile] = useState<IUploadFile>({\n\t\t\t..._initialUploadFile,\n\t\t});\n\t\tconst [formFields, setFormFields] = useState<IFormFields>({\n\t\t\t..._initialFormFields,\n\t\t});\n\t\tconst [fileItems] = useState<IFileItem[]>([]);\t\t\t\n\n\t\tconst loadUsers = async () => {\n\t\t\tconst response = await axios.get(`${backendUrl}/users`);\n\t\t\tlet _users: IUser[] = response.data;\n\t\t\t_users = _users.filter((m) => m.login !== \"anonymousUser\");\n\t\t\tsetUsers(_users);\n\t\t};\t\t\t\n\n\t\ttools.fillProfileFormFieldsWithCurrentUserFields(\n\t\t\tformFields,\n\t\t\t_currentUser\n\t\t);\t\t\t\n\n\t\ttools.fillProfileFormFieldsWithCurrentUserFields(\n\t\t\tformFields,\n\t\t\tresponse.data.currentUser\n\t\t);\n\n\t\tconst handleImageUploadForm = async (\n\t\t\te: React.FormEvent<HTMLFormElement>\n\t\t) => {\n\t\t\te.preventDefault();\n\t\t\tif (uploadFile.file && formFields.firstName.trim() !== \"\") {\n\t\t\t\tconst formData = new FormData();\n\t\t\t\tformData.append(\"file\", uploadFile.file);\n\t\t\t\tformData.append(\"firstName\", formFields.firstName);\n\t\t\t\tformData.append(\"lastName\", formFields.lastName);\n\t\t\t\tformData.append(\"login\", formFields.login);\n\t\t\t\tformData.append(\"email\", formFields.email);\n\t\t\t\tformData.append(\"fileName\", uploadFile.file.name);\n\t\t\t\tawait fetch(`${backendUrl}/uploadfile`, {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\tbody: formData,\n\t\t\t\t});\n\t\t\t\tsetFormFields({ ..._initialFormFields });\n\t\t\t\tsetUploadFile({ ..._initialUploadFile });\n\t\t\t}\n\t\t};\n\n\t\tconst handleImageFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tif (e.target.files !== null) {\n\t\t\t\tconst file = e.target.files[0];\n\t\t\t\tconst _uploadFile = {\n\t\t\t\t\tfile,\n\t\t\t\t\tpreview: URL.createObjectURL(file),\n\t\t\t\t};\n\t\t\t\tsetUploadFile(_uploadFile);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"ERROR: files is null\");\n\t\t\t}\n\t\t};\n\n\t\tconst handleFormFieldChange = (\n\t\t\te: React.ChangeEvent<HTMLInputElement>,\n\t\t\tfieldName: string\n\t\t) => {\n\t\t\tconst value = e.target.value;\n\t\t\tformFields[fieldName as keyof IFormFields] = value;\n\t\t\tsetFormFields({ ...formFields });\n\t\t};\n\t\t---------------------------------------------------------------\n\t- frontend will work like this (button not yet functionable)#gif#buttonnotfuncksksk\n- **>>> 5. Enable the user to upload their own profile photo: BACKEND**\n\t- install multer\n\t\t- `npm i multer`\n\t\t- `npm i -D @types/multer`\n\t- **userRouter.ts**\n\t\t---------------------------------------------------------------\n\t\timport multer from \"multer\";\n\n\t\tconst storage = multer.diskStorage({\n\t\t\tdestination: (req: express.Request, file: any, cb: any) => {\n\t\t\t\tcb(null, \"public/images/users\");\n\t\t\t},\n\t\t\tfilename: (req: express.Request, file: any, cb: any) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcb(null, req.body.fileName);\n\t\t\t\t}, 500);\n\t\t\t},\n\t\t});\n\n\t\tconst upload = multer({ storage });\n\n\t\tuserRouter.route(\"/profile\").post(upload.single(\"file\"), updateProfile);\n\t\t---------------------------------------------------------------\n\t- **userController.ts**\n\t\t--------------------------------------------------------------\n\t\texport const updateProfile = async (req: any, res: express.Response) => {\n\t\t\ttry {\n\t\t\t\tconst { login, firstName, lastName, email } = req.body;\n\t\t\t\tconst user = await User.findOne({ login });\n\t\t\t\tif (user) {\n\t\t\t\t\tuser.login = login;\n\t\t\t\t\tuser.firstName = firstName;\n\t\t\t\t\tuser.lastName = lastName;\n\t\t\t\t\tuser.email = email;\n\t\t\t\t\tawait User.findByIdAndUpdate(user.id, user);\n\t\t\t\t\tres.json({ status: \"updated\" });\n\t\t\t\t} else {\n\t\t\t\t\tres.status(500).json({ status: \"error\" });\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tres.status(500).json({ status: \"error\" });\n\t\t\t}\n\t\t};\n\t\t--------------------------------------------------------------\n\t- **tools.ts**\n\t\t-----------------------------------------------------\n\t\texport const getCurrentUserFromUser = (user: any) => {\n\t\t\treturn {\n\t\t\t\tfullName: `${user.firstName} ${user.lastName}`,\n\t\t\t\taccessGroups: user.accessGroups,\n\t\t\t\tlogin: user.login,\n\t\t\t\temail: user.email,\n\t\t\t\timageExists: fs.existsSync(`public/images/users/${user.login}.jpg`)\n\t\t\t};\n\t\t};\t\t\n\t\t-----------------------------------------------------\n- site will now work like this:#gif#theuploadilfnmern","points":20,"extras":"","systemWhenCreated":"2024-02-19 21:51:13","systemWhoCreated":"systemUnknown"},{"id":832,"category":"Emails","title":"Set up a test to send e-mails from a backend at Render","body":"- **background**\n\t- a useful feature of an online application is to be able to send e-mails to users\n\t- this is particularly useful if you have a custom online registration process\n\t\t- where people can register to be a member of your application \n\t\t- and to prove that they are a legitimate and identified person, they have to click on an email confirmation link\n\t- there are many difficulties today sending e-mail from applications since\n\t\t- mails being sent from applications are for obvious reasons often identified as spam\n\t\t- therefore your outgoing mails can be blocked by your hosting provider\n\t\t- or they are blocked or sent to spam folders by your users' mail software\n\t\t- or they are ignored or deleted by your users as suspicious\n\t- one way to minimize this risk is to send mail from a dedicated Google account that you set up for your application\n\t\t- give this Google account a clear and trusted name that gives your users the feeling the application is emailing them, e.g. **hamburg.arts.scene@gmail.com**\n\t\t- to be able to send mails in the name of this account from an application, you need to set up an **app password** for this dedicated Google account, see instructions on how to do this in step 1 below\n- **code is here**\n\t- send simple email from local computer: https://github.com/edwardtanguay/et692-nodemailer-test\n\t- send email from Render-hosted site: https://github.com/edwardtanguay/et393-render-test-of-nodemailer\n- **site at Render will work like this, sending a pin to a POST route will send an email**#gif#finalmmmshowsend\n- **>>> 1. Set up dedicated Gmail Account for your application**\n\t- complete this howto: [How to set up Google Account to use NodeMailer and send mails from your online Node/Express application](https://tanguay-eu.vercel.app/howtos/682)\n- **>>> 2. Set up local test of sending an e-mail with your dedicated Google account via Node**\n\t- after you have created a dedicated e-mail account for you app in step 1\n\t- create a local script that tests the ability of this account to be used by node to send an e-mail to any e-mail address\n\t\t- go to this template repository: https://github.com/edwardtanguay/nodemailer011\n\t\t- **Use this template**\n\t\t- **Create a new repository**\n\t\t- choose an owner\n\t\t- give it a name, e.g. **et692-nodemailer-test** (choose your own name here)\n\t\t- **Create Repository**\n\t- then clone it in your local projects directory and set up\n\t\t- e.g. `git clone git@github.com:edwardtanguay/et692-nodemailer-test.git`\n\t\t- e.g. `code et692-nodemailer-test`\n\t\t- `npm i`\n\t\t- **.env**\n\t\t\t------------------------------------------------------\n\t\t\tGOOGLE_MAIL_ACCOUNT_USER = googleaccountusername\n\t\t\tGOOGLE_MAIL_NODEMAILER_PASSWORD = apppasswordfornodemailer\n\t\t\t------------------------------------------------------\n\t\t- note\n\t\t  - the **GOOGLE_MAIL_ACCOUNT_USER** is the E-mail address you set up from which mails will be sent, e.g. the users of your app will receive messages from this address\n\t\t  - the **GOOGLE_MAIL_NODEMAILER_PASSWORD** is the app password that was created when you set up this Google mail account to be used from an app\n\t\t- for example:\n\t\t\t--------------------------------------------------------\n\t\t\tGOOGLE_MAIL_ACCOUNT_USER = berlinreadingclub@gmail.com \n\t\t\tGOOGLE_MAIL_NODEMAILER_PASSWORD = ihwiwjksjdgxyeub \n\t\t\t--------------------------------------------------------\n\t\t- add target e-mail\n\t\t\t- add an e-mail address that you control that you would like to send the test e-mail to##thewamieltothemei\n\t\t- install node modules\n\t\t\t- `npm i`\n\t\t- execute it\n\t\t\t- `node server.js`\n\t- you will see that it sends the mail##therasendmail\n\t- check your e-mails to see that it arrived##gotmmmail\n\t- body of mail has a link for confirmation##recemmsthemail\n- **>>> 3. Set up backend at Render and send mail via a protected API route**\n\t- first let's set up a minimal API\n\t\t- go to this template repository: https://github.com/edwardtanguay/template-minimal-node-express-api\n\t\t- **Use this template**\n\t\t- **Create a new repository**\n\t\t- choose an owner\n\t\t- give it a name, e.g. **et393-render-test-of-nodemailer** (choose your own name here)\n\t\t- **Create Repository**\n\t- then clone it in your local projects directory\n\t\t- e.g. `git clone git@github.com:edwardtanguay/et393-render-test-of-nodemailer.git`\n\t\t- e.g. `code et393-render-test-of-nodemailer`\n\t\t- **.env**\n\t\t\t------------------------------------------------------\n\t\t\tAPP_TITLE = Node/Express API\n\t\t\t------------------------------------------------------\n\t\t- install node modules\n\t\t\t- `npm i`\n\t\t- execute it\n\t\t\t- `npm run dev`\n\t- view in browser and see that route works##theroujsmmmworks\n- **>>> 4. Add a protected route that sends a mail**\n\t- note in this template we have a route **/employees** that displays a list of employees\n\t- **create basic route that reads id from URL**\n\t\t- make a route that allows us to send a POST request to **/employees/sendmail/3** when then sends us a mail about employee 3\n\t\t\t- **employeeRouter.ts**\n\t\t\t\t---------------------------------------------\n\t\t\t\temployeeRouter.get('/sendmail/:id', async (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst {id} = req.params;\n\t\t\t\t\tres.send(`info about employee ${id}`);\n\t\t\t\t});\n\t\t\t\t---------------------------------------------\n\t\t- update info on main API page\n\t\t\t- **server.ts**\n\t\t\t\t-------------------------------------------------\n\t\t\t\t<ul>\n\t\t\t\t\t<li>GET - show all employees - <a href=\"/employees\">/employees</a></li>\n\t\t\t\t\t<li>GET - send mail about employee 3 <a href=\"/employees/sendmail/3\">/employees/sendmail/3</a></li>\n\t\t\t\t</ul>\n\t\t\t\t-------------------------------------------------\n\t\t- add test\n\t\t\t- **test.rest**\n\t\t\t\t-----------------------------------------\n\t\t\t\t### SEND MAIL WITH SPECIFIC EMPLOYEE INFO\n\t\t\t\tPOST {{url}}/employees/sendmail/4\n\t\t\t\t-----------------------------------------\n\t\t- the id is displayed correctly##mmmgetintherid\n\t- **display information about the specific employee**\n\t\t- **employeeRouter.ts**\n\t\t\t---------------------------------------------------------\n\t\t\temployeeRouter.get(\"/sendmail/:id\", async (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst { id } = req.params;\n\t\t\t\t\tconst employees: any = await employeeHandlers.getAllEmployees();\n\t\t\t\t\tconst employee = employees.find((m:any) => (String(m.employeeID) === id));\n\t\t\t\t\tres.send(`Employee #${employee.employeeID}: ${employee.firstName} ${employee.lastName} - ${employee.title}`);\n\t\t\t\t}\n\t\t\t);\t\t\t\n\t\t\t---------------------------------------------------------\n\t\t- information about the employee is displayed:##employeeinfjisfmmm\n\t- **instead of displaying info, send the info via email**\n\t\t- install nodemailer\n\t\t\t- `npm i nodemailer`\n\t\t\t- `npm i -D @types/nodemailer`\n\t\t- **.env** - add the .env variables you used in the project above\n\t\t\t------------------------------------------------------\n\t\t\tGOOGLE_MAIL_ACCOUNT_USER = googleaccountusername\n\t\t\tGOOGLE_MAIL_NODEMAILER_PASSWORD = apppasswordfornodemailer\n\t\t\t------------------------------------------------------\n\t\t- **employeeRouter.ts**\n\t\t\t---------------------------------------------------------\n\t\t\temployeeRouter.get(\n\t\t\t\t\"/sendmail/:id\",\n\t\t\t\tasync (req: express.Request, res: express.Response) => {\n\t\t\t\t\tconst { id } = req.params;\n\t\t\t\t\tconst employees: any = await employeeHandlers.getAllEmployees();\n\t\t\t\t\tconst employee = employees.find((m: any) => (m.id = id));\n\t\t\t\t\tconst sendTo = \"targetemail@nnnnnnnnnnnnnnnnn.com\";\n\n\t\t\t\t\tconst mailOptions = {\n\t\t\t\t\t\tfrom: `Language Community Site <${process.env.GOOGLE_MAIL_ACCOUNT_USER}@gmail.com>`,\n\t\t\t\t\t\tto: sendTo,\n\t\t\t\t\t\tsubject: `Information on employee #${employee.id}`,\n\t\t\t\t\t\thtml: `\n\t\t\tEmployee #${employee.id}: ${employee.firstName} ${employee.lastName} - ${employee.title}\n\t\t\t`,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst transporter = createTransport({\n\t\t\t\t\t\tservice: \"gmail\",\n\t\t\t\t\t\tauth: {\n\t\t\t\t\t\t\tuser: process.env.GOOGLE_MAIL_ACCOUNT_USER,\n\t\t\t\t\t\t\tpass: process.env.GOOGLE_MAIL_NODEMAILER_PASSWORD,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\ttransporter.sendMail(mailOptions, (error: any, info: any) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tres.send(`ERROR: ${error.message}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres.send(\"Email sent: \" + info.response);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\t---------------------------------------------------------\n\t\t- be sure to fill in an email address you control for **targetemail@nnnnnnnnnnnnnnnnn.com**\n\t\t- access the route again and the mail will be sent##themailmmofff\n\t\t- the mail will arrive in your mailbox:##tammmsmailarr\n\t- **protect this route with a pin number before putting it online**\n\t\t- since you don't want just anybody or any bot on the Internet accessing this route and sending mails from your account\n\t\t- you want to protect it in some way\n\t\t- for now, let's require a secret **pin number** that we will save in environment variables \n\t\t- sending a secret pin will require that we turn this route from a **get** into a **post**\n\t\t- **employeeRouter.ts**\n\t\t\t--------------------------------------------\n\t\t\tconst { id } = req.params;\n\t\t\tconst { pin } = req.body;\n\n\t\t\tres.send(`id=${id}, pin=${pin}`);\n\t\t\t--------------------------------------------\n\t\t- **test.rest**\n\t\t\t--------------------------------------------------\n\t\t\t### SEND MAIL WITH SPECIFIC EMPLOYEE INFO\n\t\t\tPOST {{url}}/employees/sendmail/4\n\t\t\tcontent-type: application/json\n\n\t\t\t{\n\t\t\t\t\"pin\": \"1234\"\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- the id and pin are received##theidandfjithpin\n\t\t- **.env**\n\t\t\t----------------------------------------------\n\t\t\tPIN = 1234\n\t\t\t----------------------------------------------\n\t\t- confirm pin before sending mail\n\t\t\t- **employeeRouter.ts**\n\t\t\t\t--------------------------------------------\n\t\t\t\tif (pin !== process.env.PIN) {\n\t\t\t\t\tres.status(401).send(\"not authorized\");\n\t\t\t\t} else {\t\t\t\t\n\t\t\t\t\t...\n\t\t\t\t}\n\t\t\t\t--------------------------------------------\n\t\t- pin is protecting the route#gif#mmmprotecthteorute\n\t\t- now send mail if pin is correct\n\t\t\t- **employeeRouter.ts**\n\t\t\t\t------------------------------------------------\n\t\t\t\temployeeRouter.post(\n\t\t\t\t\t\"/sendmail/:id\",\n\t\t\t\t\tasync (req: express.Request, res: express.Response) => {\n\t\t\t\t\t\tconst { id } = req.params;\n\t\t\t\t\t\tconst { pin } = req.body;\n\n\t\t\t\t\t\tif (pin !== process.env.pin) {\n\t\t\t\t\t\t\tres.status(401).send(\"not authorized\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst employees: any = await employeeHandlers.getAllEmployees();\n\t\t\t\t\t\t\tconst employee = employees.find((m: any) => (String(m.employeeID) === id));\n\t\t\t\t\t\t\tconst sendTo = \"nnnnnnnn@company.com\";\n\n\t\t\t\t\t\t\tconst mailOptions = {\n\t\t\t\t\t\t\t\tfrom: `Language Community Site <${process.env.GOOGLE_MAIL_ACCOUNT_USER}@gmail.com>`,\n\t\t\t\t\t\t\t\tto: sendTo,\n\t\t\t\t\t\t\t\tsubject: `Information on employee #${employee.id}`,\n\t\t\t\t\t\t\t\thtml: `\n\t\t\t\tEmployee #${employee.employeeID}: ${employee.firstName} ${employee.lastName} - ${employee.title}\n\t\t\t\t`,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst transporter = createTransport({\n\t\t\t\t\t\t\t\tservice: \"gmail\",\n\t\t\t\t\t\t\t\tauth: {\n\t\t\t\t\t\t\t\t\tuser: process.env.GOOGLE_MAIL_ACCOUNT_USER,\n\t\t\t\t\t\t\t\t\tpass: process.env.GOOGLE_MAIL_NODEMAILER_PASSWORD,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\ttransporter.sendMail(mailOptions, (error: any, info: any) => {\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\tres.send(`ERROR: ${error.message}`);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tres.send(\"Email sent: \" + info.response);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\t\t\t\t\n\t\t\t\t------------------------------------------------\n\t\t- the mail is only sent if the pin is correct:#gif#mmmprotecthteorute222\n- **>>> 5. Publish at Render**\n\t- go to dashboard at Render: https://dashboard.render.com\n\t- **New Web Service**##newwemmm\n\t- **Build from GitHub repository**\n\t- **Connect**##thepriestohost\n\t- fill in fields##thermm33\n\t- add environment variables by clicking on **Add from .env** and then changing the values##mmmtheenvdataij\n\t- **Create Web Server**##ksdjfmmcreateweb\n\t- your project will built and live in about 2 minutes##mmmservicelive\n\t- test in Postman##thepostmantestjnmm\n\t- the API can send emails with Nodemailer on Render#gif#finalmmmshowsend","points":20,"extras":"","systemWhenCreated":"2024-02-20 20:01:36","systemWhoCreated":"systemUnknown"},{"id":833,"category":"MERN","title":"How to create and publish a MERN fullstack app to Cyclic and frontend to Vercel","body":"- **background**\n\t- in this howto we will create a full-stack MERN application \n\t\t- **frontend**: Vite React hosted at Vercel\n\t\t- **backend**: Node/Express hosted at Cyclic\n\t\t- **database**: MongoDB hosted at MongoDB Atlas\n\t- the goal of this project is to get a MERN app running online at two separate hosting providers\n\t\t- i.e. we will get the simplest possible full-stack MERN app running online\n\t\t\t- Node/Express API running at Cyclic serving one route of static data\n\t\t\t- Vite-React site at Vercel that fetchs and displays this data from the above route\n\t\t\t- then create a MongoDB Atlas database that serves dynamic data\n\t\t\t- modify Node/Express backend to connect to the MongoDB Atlas database so that \n\t\t\t\t- the backend API serves data from the database\n\t\t\t\t- the frontend site displays data from the database\n\t- this will serve as a basis to add more features as you develop your app\n\t\t- and to deal with issues implementing those features online as you add each one\n\t\t- this is better than fully developing your app offline, then trying to get the app and all of its many features to work online all at once\n- **code is here**\n\t- backend: https://github.com/edwardtanguay/et733-mern-site-backend\n\t- frontend: https://github.com/edwardtanguay/et733-mern-site\n- **live sites are here**\n\t- backend: https://et733-mern-site-backend.cyclic.app\n\t- frontend: https://et733-mern-site.vercel.app\n- **frontend and backend will work together like this\n\t- the frontend site at Vercel fetches its data from the backend site at Cyclic**##thesite2983222333\n- **>>> 1. Set up local Node/Express API backend with route that serves static data**\n\t- copy site from template repository\n\t\t- go here: \n\t\t\t- https://github.com/edwardtanguay/template-minimal-node-express-api\n\t\t- **Use this template**\n\t\t- **Create a new repository**\n\t\t- choose **Owner**\n\t\t- create name, e.g. **et733-mern-site-backend** (of course make yours different)\n\t\t- **Create repository**\n\t- clone repository locally\n\t\t- go to projects directory on your machine\n\t\t- e.g. `git clone git@github.com:edwardtanguay/et733-mern-site-backend.git`\n\t\t- open in VSCode\n\t\t\t- e.g. `code et733-mern-site-backend`\n\t\t- create **.env** in the root directory\n\t\t\t--------------------------------------------\n\t\t\tAPP_TITLE = MERN Stack App Backend\n\t\t\t--------------------------------------------\n\t\t- create node_modules\n\t\t\t- `npm i`\n\t\t- start backend\n\t\t\t- `npm run dev`\n\t\t- in **test.rest**, click **Send Request** in order to fetch employees from the `/employees` route##thenowjksmmms\n- **>>> 2. Publish the Node/Express API at Cyclic**\n\t- sign up and/or log in to https://www.cyclic.sh\n\t- go to **All Apps**##gotoappsjs\n\t- click **Link Your Own**##linkyouownkjs\n\t- click **Refresh**##refereshkkkk\n\t- click your repository##clickyoujfsdfm\n\t- click **Connect Cyclic**##connectcycyc\n\t- site is published##itisipublis\n\t- it noticed that we use an environment variable in our code, so let's define it here##itnoisdfsdf\n\t- enter the value of the variable and click **Save**##theapptitleok\n\t- click **Overview** and then your **URL**##theononontwo\n\t- change the random name of the URL to the name of your repository\n\t\t- click **Environments** then change the name and click **Save Changes**##mmmmoreback\n\t\t- click on **Overview** and then click on your new URL##formmnownew\n\t- your backend API works##thetwommmnow\n\t- test in Postman as well:##postmmman\n- **>>> 3. Set up local Vite-React site that fetches and displays data from the local Node/Express backend**\n\t- **copy site from template repository**\n\t\t- go here: \n\t\t\t- https://github.com/edwardtanguay/vite-react-menu-createbrowserrouter\n\t\t- **Use this template**\n\t\t- **Create a new repository**\n\t\t- choose **Owner**\n\t\t- create name, e.g. **et733-mern-site** (make this the same name as your backend but without the **-backend** suffix)\n\t\t- **Create repository**\n\t- **clone and set up repository locally**\n\t\t- go to projects directory on your machine\n\t\t- e.g. `git clone git@github.com:edwardtanguay/et733-mern-site.git`\n\t\t- open in VSCode\n\t\t\t- e.g. `code et733-mern-site`\n\t\t- create node_modules\n\t\t\t- `npm i`\n\t\t- start frontend\n\t\t\t- `npm run dev`\n\t\t- browser will open and display site##infositemmabout\n\t- **load and display data from backend**\n\t\t- make sure that your local **backend site** is **running**\n\t\t- install axios\n\t\t\t- `npm i axios`\n\t\t- **src/interfaces.ts**\n\t\t\t---------------------------------------------\n\t\t\texport interface IEmployee {\n\t\t\t\temployeeID: number;\n\t\t\t\tfirstName: string;\n\t\t\t\tlastName: string;\n\t\t\t\ttitle: string;\n\t\t\t}\n\t\t\t---------------------------------------------\n\t\t- **.env**\n\t\t\t-------------------------------------------------\n\t\t\tVITE_BACKEND_URL = http://localhost:4206\n\t\t\t-------------------------------------------------\n\t\t- **config.ts**\n\t\t\t------------------------------------------------\n\t\t\texport const backendUrl = (): string => {\n\t\t\t\treturn import.meta.env.VITE_BACKEND_URL;\n\t\t\t}\n\t\t\t------------------------------------------------\n\t\t- **PageWelcome.tsx**\n\t\t\t-------------------------------------------------\n\t\t\timport { useEffect, useState } from \"react\";\n\t\t\timport { IEmployee } from \"../interfaces\";\n\t\t\timport axios from \"axios\";\n\t\t\timport * as config from '../config';\n\n\t\t\texport const PageWelcome = () => {\n\t\t\t\tconst [employees, setEmployees] = useState<IEmployee[]>([]);\n\n\t\t\t\tuseEffect(() => {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\tconst response = await axios.get(`${config.backendUrl()}/employees`);\n\t\t\t\t\t\tconst _employees = response.data;\n\t\t\t\t\t\tsetEmployees(_employees);\n\t\t\t\t\t})();\n\t\t\t\t}, []);\n\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<h2 className=\"mb-2 text-xl\">There are {employees.length} employees:</h2>\n\t\t\t\t\t\t<ul className=\"list-disc ml-6\">\n\t\t\t\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<li key={employee.employeeID}><span className=\"font-semibold\">{employee.firstName} {employee.lastName}</span> - {employee.title}</li>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t};\t\t\t\n\t\t\t-------------------------------------------------\n\t\t- your site looks like this##infositmmm9\n- **>>> 4. Publish Vite-React site at Vercel that fetches and displays data from the Node/Express backend at Cyclic**\n\t- first make sure that your local **backend site** is **stopped**\n\t\t- the reason we do this so that we make sure that your online site at Vercel\n\t\t\t- reads from the backend at Cyclic\n\t\t\t- and not from your local backend\n\t\t- this is a common error that is not always apparent\n\t- commit and push all frontend changes to GitHub\n\t- log in or sign up at: https://vercel.com\n\t- **Add New**\n\t- **Project**\n\t- **Import**##theimporosmmm\n\t- enter environment variables and press **Deploy**\n\t\t- `VITE_BACKEND_URL`\n\t\t- e.g. `https://et733-mern-site-backend.cyclic.app` (use your own backend URL)##conf5jskdmm\n\t- site works online reading the data from the backend API at Cyclic##thesite2983222\n- **>>> 5. Create MongoDB database at MongoDB Atlas and read data from it from local Node/Express backend**\n\t- DOING...\n- **>>> 6. Setup Node/Express backend at Cyclic to read data from MongoDB Atlas database which is displayed on Vercel frontend site**\n\t- DOING...","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-02-21 23:13:09","systemWhoCreated":"systemUnknown"},{"id":834,"category":"Python","title":"Notes on Nina Zakharenko's Python Fundamentals course","body":"- infos\n\t- course: https://frontendmasters.com/courses/python\n\t- website: https://www.learnpython.dev\n\t- GitHub: https://github.com/nnja/python\n\t- recorded: 2019\n\t- my repository during this course\n\t\t- https://github.com/edwardtanguay/et992-python-notes\n- https://frontendmasters.com/courses/python/introduction\n\t- recommends following along as she types instead of looking at exercises and answers\n\t- shows course\n- https://frontendmasters.com/courses/python/system-requirements\n\t- any operating system\n\t- Python 3.7\n\t\t- my Windows: `python --version` --> 3.12.2\n\t- [VSCode with Python Extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)\n\t- sets up virtual environment##likethisj\n- https://frontendmasters.com/courses/python/opening-the-project-and-python-file\n\t- creates project directory in VSCode\n- https://frontendmasters.com/courses/python/starting-the-python-repl\n\t- opens REPL\n\t- virtual environments are good for larger projects\n\t\t- in the course they are good for keep the environment the same across operating systems\n- https://frontendmasters.com/courses/python/using-the-python-repl\n\t- every method available on string types:##everymethodavail\n\t- get help on upper()\n\t\t- `help(str.upper)`\n- https://frontendmasters.com/courses/python/common-repl-mistakes\n\t- \"In Python we have, for example, a variable type named list. I can easily name a variable 'list' and override the built-in type. So, don't do that. The reason is because if you now try to use the command list, it's going to give you an error because we overwrote our internal type list and so we don't have it anymore.\" //quote\n- https://frontendmasters.com/courses/python/why-python\n\t- 30 years old\n\t- \"Some people say that Python doesn't scale, but Instagram has the largest installation of Django and they have one billion users.\" //quote\n\t- Python 2 vs. Python 3\n\t\t- Python 2 reached end-of-life in 2020\n\t\t- you should only use Python 3\n\t- open source\n\t- Python has made the work that scientists do so much easier\n\t- runs on RaspberryPi\n- https://frontendmasters.com/courses/python/code-sample\n\t- shows API code, two functions\n- https://frontendmasters.com/courses/python/variables\n\t- you can overwrite the type of a variable\n\t\t- `x = 42`\n\t\t- `x = \"Hello\"`\n\t- `type(x)`\n\t- PEP8\n\t\t- names should be whole words, all lowercase, separated by an underscore\n\t\t\t- e.g. `my_list`\n- https://frontendmasters.com/courses/python/numbers\n\t- complex numbers\n\t\t- `42j`\n\t- integers and data types are just objects under the hood\n- https://frontendmasters.com/courses/python/strings/ - 2024-02-24 01:06:15\n\t- quotes in strings##quotessitnr\n\t- long strings##thelongstring\n\t- f-strings##theeffff\n\t- int() and str()##intandstrsdf\n- https://frontendmasters.com/courses/python/practice-data-types\n\t- 10 minute exercise\n- https://frontendmasters.com/courses/python/functions/ - 2024-02-24 01:40:37\n\t- in your Python files, I recommend using spaces instead of tabs\n\t- simple function##simplefunctionpy\n\t- return from function##returnjskdfpy\n- https://frontendmasters.com/courses/python/function-arguments/ - 2024-02-24 01:46:51\n\t- default parameters##defaultparams\n- https://frontendmasters.com/courses/python/empty-default-lists/\n\t- \"I've been bitten by this bug so many times, even though I've been using Python for years.\"##thebrecubugg //quote\n- https://frontendmasters.com/courses/python/function-scope/ - 2024-02-24 12:30:35\n\t- functions have scope##funchavespco\n\t- don't have variable floating outside a defined scope\n\t- \"None is just a value that commonly is used to signify 'empty', or 'no value here'. It is a signal object; it only has meaning because the Python documentation says it has that meaning.\"##nonnoneje\n\t- how to fix the above bug:##howtofbug\n- https://frontendmasters.com/courses/python/practice-functions/ - 2024-02-24 12:54:22\n\t- expected behavior for internal variables in functions##exapsjdfbeh\n\t- changing variables in function doesn't affect the outer scope\n\t- **is** is used to see if two values point to the same thing in memory##isforquejdf\n- https://frontendmasters.com/courses/python/lists - 2024-02-24 13:02:32\n\t- everything is an object in Python\n\t- len(colors)\n\t- trailing commas are allowed in Python\n- https://frontendmasters.com/courses/python/changing-the-order-of-a-list/ - 2024-02-24 13:20:56\n\t- two ways of sorting in Python\n\t\t- 1. return sorted list but leave original as is##listsosrtye\n\t\t- 2. change original variable##changeorigisdfjvar\n\t- descending: `print(sorted(colors, reverse=True))`\n\t- also: colors.reverse()\n\t- Python **lists and tuples** are JavaScript *arrays*, Python **sets** are JavaScript *sets*, Python **dictionaries** are JavaScript *objects*##jypothsjd\n- https://frontendmasters.com/courses/python/adding-items-to-a-list/ - 2024-02-24 13:37:52\n\t- a few ways to add items to list\n\t\t- **append**##tehappendj\n\t\t- **insert**##theinkjsderst\n\t\t- **extend**##thextendsjd\n- https://frontendmasters.com/courses/python/list-lookups/ - 2024-02-24 13:42:29\n\t- find out if item is in list##isinforslists\n\t- with **index** you only get the first##onlyfirstjsd\n\t- replace with index##replasjiscie\n- https://frontendmasters.com/courses/python/removing-items-from-a-list - 2024-02-24 14:17:38\n\t- like **index**, **remove** only removes the first item it finds##removeone\n\t- **pop** will also return an item##thepopop\n- https://frontendmasters.com/courses/python/list-review/ - 2024-02-24 14:19:15\n\t- mutability = can the contents of this item be changed after it has been declared\n\t- lists can contain other data types\n\t- items in a list do not need to be the same type\n- https://frontendmasters.com/courses/python/tuples/ - 2024-02-24 14:21:15\n\t- tuples are a light-weight collection that keep track of related but different items\n\t- lists are mutable\n\t- tuples are immutable (after defining them, the values can't change)##cantaddtotuple\n\t- useful for retaining a snapshot of data\n\t\t- a tuple might represent each row in a spreadsheet\n\t- tuples provide added security to your data, since they cannot change\n\t- `a = ()`##thetubpls\n\t- \"There's something kind of tricky here, right, if square brackets are associated with lists, you might think that parentheses are associated with tuples. But if you try to use parentheses to make a tuple containing one item, you end up with an integer. It turns out that tuples are not so much defined by parentheses but by commas. So to make a one-item tuple, add a comma after the end of the single item.\"//quote##thetuplejone \n- https://frontendmasters.com/courses/python/unpacking-tuples/ - 2024-02-24 14:41:04\n\t- tuples are a great way to consolidate information because of \"tuple unpacking\"##theunpakdj\n\t- use underscores to ignore##youunderscore\n\t- ternaries are more readable in Python than in JavaScript##morereadds\n- https://frontendmasters.com/courses/python/tuples-review/\n\t- just a quick review\n- https://frontendmasters.com/courses/python/sets/ - 2024-02-24 16:17:51\n\t- Sets in Python are a data type that allow you to store other immutable types in an unsorted way.\n\t- no duplicates allowed\n\t- don't have order##notsameord\n\t- you can't access items by position because there is none\n\t- curly braces are used by sets and dictionaries, note that no content is a dictionary##notedicts\n\t- duplicate values are ignored##dupeign\n\t- you can only put hashable items in a set, i.e. not lists##onlyhashable\n\t- typical hash values##typhash\n\t- to get unique values of list, convert it to a set##convertoset\n- https://frontendmasters.com/courses/python/adding-removing-updating/ - 2024-02-24 17:11:42\n\t- .add()\n\t- .discard()\n\t\t- if item is not in set, no erro\n\t- .remove()\n\t\t- error if not present\n\t- .update()##theupdatejd\n\t\t- if you use a string with update, it treats every character as an item##upifstring\n- https://frontendmasters.com/courses/python/combining-comparing-contrasting/ - 2024-02-24 17:14:36\n\t- you can see if an item is in a set##insetsji\n\t- index won't work\n\t- you can get unions and intersections of sets##unionsetsf\n\t- unions, intersections, difference, symmetric difference##interunions\n\t- frozensets##frozenjsset\n\t- a sorted set is a list##sortedsetss\n- https://frontendmasters.com/courses/python/set-review/ - 2024-02-24 19:29:44\n\t- discusses the rules above\n- https://frontendmasters.com/courses/python/dictionaries/ - 2024-02-24 19:42:23\n\t- dictionaries allows you to store data in key/value pairs\n\t- a perfect structure for working with JSON\n\t- dictionary keys can only be immutable types\n\t- immutable objects in Python are hashable because their hash value does not change over time, which makes them suitable for use as dictionary keys or set elements, immutable types are:\n\t\t- integers\n\t\t- floating-point numbers\n\t\t- strings\n\t\t- tuples\n\t\t- frozensets\n\t- checking to see if a key is in a dictionary is a very fast operation\n\t- how to get values from dictionaries##hawotogetenry\n- https://frontendmasters.com/courses/python/adding-removing-accessing-keys-or-values/\n\t- add a property##addaprop\n\t- if the property is already in the dictionary, you replace it\n\t- the keys of a dictionary are like a set\n\t- you can combine two dictionaries with `update()`##updatedict\n\t- just like with lists and sets, there is nothing stopping you from mixing the types of keys in a dictionary\n\t- add items via key to a list in a dictionary, a common pattern##acommonpaatt\n\t- three important dictionary methods\n\t\t- keys()\n\t\t- values()\n\t\t- items() (like entries() in JavaScript)\n\t- here's how you get all the key/values of a dictionary in a collection and iterate through it, as with JavaScript .entries(), note that the returned type is dict_items which is its own type but behaves similary to a list or set##herehowkdjf\n\t- as of Python 3.6, a dictionary is sorted in insertion-order\n\t\t- but the items can't be access by index, only by their keys\n\t- a dictionary is mutable\n- https://frontendmasters.com/courses/python/mutability-review/ - 2024-02-24 22:59:30\n\t- simple types in Python are not mutable##simplenotmutable\n\t- container types in Python are all mutable except tuples##nowfourcol\n- https://frontendmasters.com/courses/python/practice-advanced-data-types - 2024-02-24 23:13:32\n\t- slicing##theclicing\n\t- remove first instance##removefirst\n\t- pop##theopppop\n- https://frontendmasters.com/courses/python/booleans/\n\t- the only number that is falsy in Python is 0, all others are truthy##theonlynumb\n\t- empty collection types are all falsy##emptycon\n\t\t- if they have items, they are truthy\n\t- None type is falsy\n\t- empty string is falsy\n\t- a string with characters in it is truthy\n- https://frontendmasters.com/courses/python/comparisons/\n\t- in Python, you can create you own objects and define how you want them to be compared to each other\n\t\t- buy you can't compare different base types in Python\n\t- comparing strings\n\t\t- capital letters come before lower case##smalllar\n\t- you can compare lists based on their values##youcancompali\n\t- **is** allows you to see if two variables are stored at the same memory location, **==** allows you to see if they have the same values##notequksf\n\t- `a is not None`\n- https://frontendmasters.com/courses/python/and-or-not\n\t- talks about `and` and `or` tables\n- https://frontendmasters.com/courses/python/practice-boolean-logic/ - 2024-02-24 23:43:00\n\t- does more truth tables##doesmoretrusth\n- https://frontendmasters.com/courses/python/looping-over-lists\n\t- for loop, note that there is no scope, so the item variable remains after the loop is finished##theforksdjf\n\t- for iterating through numbers, use **range()**##rangedoisj\n\t- for 0 to 10 by 2##0to10jsdf\n- https://frontendmasters.com/courses/python/looping-over-dictionaries/\n\t- looping over dictionaries, use .items()\n\t- how to iterate over a list also with the index of each item##howtogetksjdf\n- https://frontendmasters.com/courses/python/control-flow/ - 2024-02-25 00:22:54\n\t- if statements don't need parentheses##thesjdfif\n\t- if-if/else-else##ifeifsel\n- https://frontendmasters.com/courses/python/while-control-statements/ - 2024-02-25 00:25:05\n\t- `break` breaks out of the loop##breaksokfou\n\t- `continue` returns to top of loop##continueretur\n\t- how break and continue work##breakscon\n- https://frontendmasters.com/courses/python/python-files-modules/ - 2024-02-25 00:30:05\n\t- creates a .py file\n- https://frontendmasters.com/courses/python/debugging-strategies-in-python/ - 2024-02-25 00:32:49\n\t- debug with print statements\n\t- here is the [repository](https://github.com/nnja/python/tree/master/pyworkshop/1_intro_python/chapter7) she's using\n- https://frontendmasters.com/courses/python/importing-modules-the-main-method/\n\t- shows how to use the dunder name `__name__`##showsudndun\n\t- try/catch in Python##trycatchinpy\n- https://frontendmasters.com/courses/python/external-modules-with-pip/ - 2024-02-25 00:54:34\n\t- using pip\n\t- installing requests\n\t\t- `python -m pip install requests`##installingipsj\n- https://frontendmasters.com/courses/python/apis-overview/ - 2024-02-25 00:56:43\n\t- explains REST get, post, put, delete\n\t- explains HTTP codes##httpcodkj\n- https://frontendmasters.com/courses/python/requests-library/ - 2024-02-25 00:59:49\n\t- `requests` apparently got installed here\n\t\t- `C:\\Users\\ADMIN\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests`##showthquerere\n\t- **show_skills.py**\n\t\t---------------------------------------------------\n\t\timport requests\n\n\t\tapi_url = \"https://edwardtanguay.vercel.app/share/skills.json\"\n\n\t\tresponse = requests.get(api_url)\n\t\tstatus_code = response.status_code\n\n\t\tif status_code == 200:\n\t\t\tskills = response.json()\n\t\t\tprint(f\"{len(skills)} skills:\")\n\t\t\tfor skill in skills:\n\t\t\t\tprint(f\"{skill['name']} - {skill['description']}\")\n\t\t---------------------------------------------------\n\t- works like this:##pyapieasy\n- https://frontendmasters.com/courses/python/app-solution-1-fetching-the-github-api - 2024-02-25 01:56:41\n\t- now gets data from GitHub API\n\t- `pass` does nothing##doesnothingkjs\n- https://frontendmasters.com/courses/python/app-solution-2-searching-the-github-api/\n\t- displays data from the GitHub API response\n\t- to install **requests** on Arch Linux, I had to use this command:##archinstalkjs\n- https://frontendmasters.com/courses/python/app-solution-3-error-handling/ - 2024-02-25 02:31:21\n\t- checks if response status code is not 200##the200jsij\n- https://frontendmasters.com/courses/python/wrapping-up/\n\t- a short closing","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-02-24 16:04:04","systemWhoCreated":"systemUnknown"},{"id":835,"category":"Python","title":"Notes on Nina Zakharenko's Intermediate Python course","body":"- infos\n\t- course website: https://www.learnpython.dev\n\t- my repository during this course\n\t\t- https://github.com/edwardtanguay/et992-python-notes\n- https://frontendmasters.com/courses/intermediate-python/introduction-prerequisites/\n\t- intro\n\t\t- has worked in Python for 6 years\n\t\t- Python's her favorite language\n\t\t- this is Day 2\n\t- prerequisites\n\t\t- VSCode\n\t\t- Python 3.7+\n\t\t- familiar with concepts from [Introduction to Python course](https://tanguay-eu.vercel.app/howtos/834) (Day 1)\n\t\t- know concepts such as that tuples are immutable while list, set and dictionary are mutable\n\t\t- know about API and how to work with them: requests\n- https://frontendmasters.com/courses/intermediate-python/repl-running-python-in-vs-code/\n\t- we will be working in REPL and files\n\t- most important commands: `type()`, `dir()` and `help()`\n- https://frontendmasters.com/courses/intermediate-python/course-introduction/\n\t- we will learn\n\t\t- OOP\n\t\t- generators, loop over large data sets\n\t\t- build web application##thefinalfwebs\n- https://frontendmasters.com/courses/intermediate-python/python-philosophy/\n\t- the [Zen of Python](https://peps.python.org/pep-0020/) is a collection of 19 sotware principles written in as a poem\n\t- \"In the Zen of Python, a collection of 19 software principles written as a poem, there are two principles that are particularly important: simple is better than complex, and complex is better than complicated. This is a good distinction to keep in mind. Generally Python programmers prefer to be explicit and write simple, understandable, maintainable code instead of doing ego-flexing or writing code that is unnecessarily complex. I'm sure you've seen code where you have thought: that really doesn't need to be that complicated. Python programmers tend not to program this way.\" //quote\n\t- PEP8 helps to know what the rules are\n- https://frontendmasters.com/courses/intermediate-python/converting-between-types/\n\t- split##thepslit\n\t- you can also unpack with split##canunpack\n\t- you can split and trim like this##thegrouplist\n- https://frontendmasters.com/courses/intermediate-python/practice-converting-between-types/\n\t- convert a number to string: `str(50)`\n\t- you also have `int()` and `float()`\n\t- convert string to list##converstringtolist\n\t- remove duplicates by converting to set##convertotset\n\t- remove duplicates and sort##removedupdks\n- https://frontendmasters.com/courses/intermediate-python/list-comprehensions/\n\t- list comprehensions\n\t\t- making their way into other programming languages\n\t\t- take a for loop and condense it down to one statement\n\t\t- the long way##longksjway\n\t\t- with list comprehension##withlistcom\n\t- see numbers in range by converting to list##seerangjsdli\n\t- get squares##squares2\n\t- list comprehension with tuples##totuplsd\n\t- list comprehension in join##listinjoin\n- https://frontendmasters.com/courses/intermediate-python/conditionals\n\t- can put if at end##canputjks\n- https://frontendmasters.com/courses/intermediate-python/list-operations\n\t- sum, min, max##sumin\n\t- get max from a comma-delimited string##getmax\n- https://frontendmasters.com/courses/intermediate-python/sets-dictionaries\n\t- turn set into dictionary##turnintodeict\n\t- map to new list from list##hasthenames\n- https://frontendmasters.com/courses/intermediate-python/generator-expressions/\n\t- use generators with larger datasets\n\t\t- this allows you to avoid having the whole list in memory\n\t- generator express = generator comprehension##generaksok\n\t- generator values only become available when you loop over them##genbecom\n- https://frontendmasters.com/courses/intermediate-python/slicing-lists/ - 2024-02-26 01:03:26\n\t- generator has no idea of the past of future\n\t- slicing is a way to create smaller lists from larger lists\n\t- slicing with index numbers##slicwith\n\t- if first or last, number is optional\n\t- lists point to same object##listspoin\n\t- to get a copy of a list, use [:]##togetcopy\n- https://frontendmasters.com/courses/intermediate-python/zip-function/ - 2024-02-26 01:14:39\n\t- using dictionary comprehension##createdictcom\n\t- combine two lists into a tuple with zip##ziptwo\n\t- zip only zips those items that are present, one list with 2 and one with 3 will result with a tuple with 2\n- https://frontendmasters.com/courses/intermediate-python/practice-comprehensions-slicing-zip-function - 2024-02-26 01:21:49\n\t- random numbers##pythorand\n\t- make a dictionary of two lists##makedictof\n\t- once you run through a zip tuple, it is used up, since it is a generator type##onceyou\n\t- you can't reuse generators, they are a one-time-use sort of thing\n- https://frontendmasters.com/courses/intermediate-python/object-oriented-programming\n\t- nnn","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-02-26 01:45:04","systemWhoCreated":"systemUnknown"},{"id":836,"category":"Hetzner","title":"How to set up and host various kinds sites on a Hetzner machine with nginx and pm2","body":"- **background**\n\t- this howto assumes you have a Hetzner account, at least one machine and have on it a main site set up under a domain name with HTTPS\n\t\t- if you haven't, see this howto: [How to sign up for a Hetzner Account and set up website on a HTTPS domain](https://tanguay-eu.vercel.app/howtos/684)\n\t- it also assumes that you have a GitHub account connected from your Hetzner machine to your GitHub account\n\t\t- if you don't have an SSH connection from your Hetzner machine to your GitHub account, see [this howto](https://tanguay-eu.vercel.app/howtos/605) and search for **set up SSH**##dothessh\n\t- this howto also assumes that you are using the **nginx** web server and the **pm2** process manager\n\t\t- you will have these if you used the above howtos to install your machines\n\t\t- if you are using the much-easier-to-use-but-less-professional web server **Caddy**, see [this howto](https://tanguay-eu.vercel.app/howtos/664) for how to set up sites with Caddy instead of nginx\n\t- the Hetzner machine I will be using in this howto has the following characteristics:\n\t\t- Debian 11\n\t\t- nginx\n\t\t\t- nginx configuration files for all websites are here: **/etc/nginx/conf.d**\n\t\t- pm2\n\t\t- websites are in my home directory, i.e. **/home/edward/projects**\n\t\t\t- therefore I do not need to constantly have sudo writes to change the files\n\t\t- my domain is: **tanguay.eu**\n\t\t- my domain hoster is: https://www.domainssaubillig.de\n\t\t\t- note that all domain hosters (Hetzner, Namecheap, GoDaddy) all have various interfaces to perform similar tasks\n\t\t\t- we will be using our domain hoster to **create subdomains**\n\t\t\t- if you're using another domain hoster than domainssaubillig.de, you will have to at least know how to use its interface to create subdomains\n- **>>> 1. Create and host an HTML/CSS page**\n\t- **Create local site and push to GitHub**\n\t\t- in your projects directory, create a site project\n\t\t\t- `mkdir demo001-html-css-site` (this name will also be the name of your **repository** and **subdomain**)\n\t\t- enter into VSCode\n\t\t\t- `code demo001-html-css-site`\n\t\t- **index.html**\n\t\t\t--------------------------------------------\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<meta name=\"viewport\"\n\t\t\t\t\t  content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<link rel=\"stylesheet\"\n\t\t\t\t\t  href=\"css/main.css\">\n\t\t\t\t<title>HTML-CSS-Site</title>\n\t\t\t</head>\n\n\t\t\t<body>\n\t\t\t\t<h1>HTML-CSS-Site</h1>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t</body>\n\n\t\t\t</html>\n\t\t\t--------------------------------------------\n\t\t- **css/main.css**\n\t\t\t---------------------------------\n\t\t\tbody {\n\t\t\t\tbackground-color: #bbb;\n\t\t\t\tfont-family: sans-serif;\n\t\t\t\tpadding: 1rem 2rem;\n\t\t\t}\n\t\t\th1 {\n\t\t\t\tcolor: brown;\n\t\t\t}\t\t\n\t\t\t---------------------------------\n\t\t- view in live-server##htmlcssok\n\t\t- create repository\n\t\t\t- `git init -b dev`\n\t\t- initial commit and create repository##initcommksi\n\t\t\t- https://github.com/edwardtanguay/demo001-html-css-site\n\t- **At Hetzner, clone and set up site**\n\t\t- at your domain hoster, register your subdomain##theconfijsodgticloneskdjfsdf\n\t\t- log into Hetzner\n\t\t\t- e.g. `ssh username@domainname.eu`\n\t\t- `cd projects`\n\t\t- go to your repository, copy the clone link and create site:\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/demo001-html-css-site.git`##theintoit\n\t\t- **/etc/nginx/conf.d/demo001-html-css-site.conf**\n\t\t\t---------------------------------------------------------\n\t\t\tserver {\n\t\t\t\t\tlisten 80;\n\n\t\t\t\t\troot /home/edward/projects/demo001-html-css-site;\n\t\t\t\t\tindex index.html;\n\n\t\t\t\t\tserver_name demo001-html-css-site.tanguay.eu;\n\n\t\t\t\t\tlocation / {\n\t\t\t\t\t\t\ttry_files $uri $uri/ =404;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------------------------------------\n\t\t- restart nginx\n\t\t\t- `sudo systemctl restart nginx`\n\t\t- add HTTPS\n\t\t\t- `sudo certbot --nginx`\n\t\t- restart nginx\n\t\t\t- `sudo systemctl restart nginx`\n\t\t- site is here: https://demo001-html-css-site.tanguay.eu\n\t\t\t- not visible on computer via Telekom for 50 minutes:##afer40440\n\t\t\t- immediately visible on smart phone via O2:##thephonehtml\n\t\t\t- immediately visible on computer via O2 hot spot:##visiclkejcompu\n- **>>> 2. Create and host a React site**\n\t- **Create local site and push to GitHub**\n\t\t- create repository from this template: \n\t\t\t- name: `demo001-vite-react-site`\n\t\t- clone locally\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/demo001-vite-react-site.git`\n\t\t- enter with VSCode\n\t\t\t- `code demo001-vite-react-site`\n\t\t- set up and start locally\n\t\t\t- `npm i`\n\t\t\t- change port\n\t\t\t\t- **package.json**\n\t\t\t\t\t- `\"dev\": \"vite --port 3223 --open\",`\n\t\t\t- `npm run dev`\n\t\t- change site\n\t\t\t- **index.html**\n\t\t\t\t---------------------------------------------\n\t\t\t\t<title>Demo001-Vite-React-Site</title>\n\t\t\t\t---------------------------------------------\n\t\t\t- **Header.tsx**\n\t\t\t\t---------------------------------------------\n\t\t\t\t<h1 className=\"text-3xl mb-3 text-slate-800\">Demo001-Vite-React-Site</h1>\t\t\t\n\t\t\t\t---------------------------------------------\n\t\t- site will look like this:##thesitedemooksi\n\t\t- add deploy scripts for Hetzner\n\t\t\t- **package.json**\n\t\t\t\t------------------------------------------------------\n\t\t\t\t\"start\": \"vite serve --host --port 3010\",\n\t\t\t\t\"setup\": \"npm i && pm2 start --name demo001-vite-react-site npm -- start --update-env --time && pm2 save\",\n\t\t\t\t\"deploy\": \"git pull --no-rebase && pm2 restart demo001-vite-react-site --update-env --time && pm2 save\"\t\t\t\t\n\t\t\t\t------------------------------------------------------\n\t\t- make initial commit and put to GitHub\n\t- **At Hetzner, clone and set up site**\n\t\t- at your domain hoster, register your subdomain\n\t\t\t- demo001-vite-react-site##theangledk\n\t\t\t- add IP\n\t\t- log into Hetzner\n\t\t\t- e.g. `ssh username@domainname.eu`\n\t\t- `cd projects`\n\t\t- go to your repository, copy the clone link and create site:\n\t\t\t- e.g. `git clone git@github.com:edwardtanguay/demo001-vite-react-site.git`##theconfijsodgticlone\n\t\t- go in directory\n\t\t\t- `npm run setup`##startedmemos\n\t\t- **/etc/nginx/conf.d/demo001-vite-react-site.conf**\n\t\t\t---------------------------------------------------------\n\t\t\tserver {\n\t\t\t\t\tserver_name demo001-vite-react-site.tanguay.eu;\n\n\t\t\t\t\tlocation / {\n\t\t\t\t\t\tproxy_pass http://localhost:3010\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t---------------------------------------------------------\n\t\t- restart nginx\n\t\t\t- `sudo systemctl restart nginx`\n\t\t- add HTTPS\n\t\t\t- `sudo certbot --nginx`\n\t\t- restart nginx\n\t\t\t- `sudo systemctl restart nginx`\n\t\t- site is here: https://demo001-vite-react-site.tanguay.eu\n\t\t\t- NOT visible on computer via Telekom##theviteoneokok\n\t\t\t- immediately visible on smartphone via O2##testdemo001vite\n\t\t\t- immediately visible on computer via O2 hot spot:##thevisjsbor\n- **>>> 3. Create and host backend Node/express and frontend Vite-React as separate sites**\n\t- TODO\n- **>>> 4. Create and host backend Node/express and frontend Vite-React as one site**\n\t- TODO\n- **>>> 5. Create and host Next.js site connected to MongoDB**\n\t- TODO","points":20,"extras":"","systemWhenCreated":"2024-02-27 02:16:30","systemWhoCreated":"systemUnknown"},{"id":837,"category":"Nuxt","title":"Notes on Ben Hong's Nuxt 3 Fundamentals course","body":"- infos\n\t- link: https://frontendmasters.com/courses/nuxt\n\t- October 2022\n\t- GitHub: https://github.com/bencodezen/nuxt-3-fundamentals-workshop\n\t- Ben's site: https://www.bencodezen.io\n\t- my project: https://github.com/edwardtanguay/nuxtapp001\n\t- my second project: https://github.com/edwardtanguay/nuxt-learning-playground\n- https://frontendmasters.com/courses/nuxt/introduction/ - 2024-03-04 23:24:46\n\t- info about him and course\n- https://frontendmasters.com/courses/nuxt/course-setup/ - 2024-03-04 23:25:35\n\t- prerequisites: basic knowledge of Vue 3\n\t- Volar\n\t- Text Pastry (Extension)\n\t- Vue DevTools\n\t\t- https://devtools.vuejs.org/\n- https://frontendmasters.com/courses/nuxt/nuxt-cli-starter-project/ - 2024-03-04 23:28:21\n\t- `npx nuxi init nuxtapp001`\n\t\t- npm\n\t\t- initialize Git\n\t\t- \"Nuxt project has been created with the v3 template\"\n\t- `code nuxtapp001`\n\t- Nuxt 3 is powered by a new server engine: [Nitro](https://nuxt.com/docs/guide/concepts/server-engine)\n\t- With Nuxt 3, Vite became the default bundler\n\t\t- Nuxt 3 also supports packaging with the latest version of Webpack (version 5).\n\t- he calls his app \"app\"\n\t- I have more files than him\n\t- TypeScript is always ready for you to opt into it\n- https://frontendmasters.com/courses/nuxt/options-api/ - 2024-03-04 23:49:38\n\t- using option API\n\t- better auto completion\n\t\t---------------------------------------------\n\t\t<script>\n\t\timport { defineNuxtComponent } from \"#app\";\n\t\texport default defineNuxtComponent{\n\n\t\t};\n\t\t</script>\t\t\n\t\t---------------------------------------------\n\t- **app.vue**\n\t\t-----------------------------------------------\n\t\t<script>\n\t\timport { defineNuxtComponent } from \"#app\";\n\t\timport axios from \"axios\";\n\n\t\texport default defineNuxtComponent({\n\t\t\tdata: () => ({\n\t\t\t\tjobs: [],\n\t\t\t}),\n\t\t\tmethods: {\n\t\t\t\tasync fetchData() {\n\t\t\t\t\tconst response = await axios.get(\n\t\t\t\t\t\t\"https://edwardtanguay.vercel.app/share/jobs.json\"\n\t\t\t\t\t);\n\t\t\t\t\tthis.jobs = response.data;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\t</script>\n\n\t\t<template>\n\t\t\t<div>\n\t\t\t\t<h1 class=\"text-3xl mb-3\">Info Site</h1>\n\t\t\t\t<img src=\"/jobs.png\" class=\"w-[24rem] rounded-lg mb-3\" />\n\t\t\t\t<button @click=\"fetchData\" class=\"mb-3\">fetch data</button>\n\t\t\t\t<h2 class=\"text-xl mb-3\" v-if=\"jobs.length > 0\">checked = React</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li v-for=\"job in jobs\" :key=\"job.id\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t:checked=\"job.skillList.includes('react')\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{{ job.title }}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</template>\n\t\t-----------------------------------------------\n\t- works like this:#gif#firstnuxtstyled\n- https://frontendmasters.com/courses/nuxt/options-api-exercise/ - 2024-03-05 00:40:06\n\t- using **tig**\n\t- practice exercise\n\t- computed properties, reference as variable:##computerprops\n- https://frontendmasters.com/courses/nuxt/composition-api\n\t- from **options API** to **composition API**\n\t\t- remove export statement\n\t\t- add setup\n\t\t- \"this\" doesn't exist anymore\n- https://frontendmasters.com/courses/nuxt/composition-api-exercise - 2024-03-05 14:18:43\n\t- \"One of the things to check when developing with Nuxt is that you have the Volar extension enabled and not Vetur. While Vetur is still a viable option especially for Vue 2 projects, Volar offers a more optimized experience for Vue 3, particularly when working with TypeScript.\" //quote\n\t- imports seems to be options, e.g. ref and computed\n- https://frontendmasters.com/courses/nuxt/css-styling/ - 2024-03-05 14:37:59\n\t- talks about **scoped** and **module**##scopedmodules\n\t- you have to consider how this effects debugging, i.e. finding the class names in the generated HTML\n\t- student asked about Tailwind\n\t\t- he talks about unocss\n- https://frontendmasters.com/courses/nuxt/styling-with-scss-bulma/\n\t- how do we use Sass\n\t\t- `npm i -D sass sass-loader@10`##thesasssdf\n\t- he uses a Sass variable in a CSS variable##usessdjfrom\n\t- imports as well##theimposjsd\n\t- Bulma\n\t\t- \"I like using Bulma because everyone uses Material Design and Bootstrap.\"\n- https://frontendmasters.com/courses/nuxt/css-styling-exercise/\n\t- he gives an exercise\n\t- styles a grid\n- https://frontendmasters.com/courses/nuxt/creating-components/ - 2024-03-06 08:03:42\n\t- makes a component without props\n- https://frontendmasters.com/courses/nuxt/using-slots/ - 2024-03-06 08:49:31\n\t- \"One problem with props is they get bloated, reading through the props feels like you're reading a dictionary, and that's just a bit overkill. So, in Vue, something that we have is called slots, and this is a very important concept. What you can do with slots is make it easy for a developer to drop something inside a particular space inside your component. \n\t- example of one slot##theslotksdjf\n\t- example of multiple slots##slot222\n\t- shorthand for v-slot##shorthandformdh\n\t- slot props [explanation](https://www.google.com/search?client=firefox-b-d&q=example+of+slot+props+in+vue+3#fpstate=ive&vld=cid:1be94c69,vid:emi436qg9mg,st:0)\n\t- slotProps example##slotsprojsjs\n\t- slots are for displaying\n- https://frontendmasters.com/courses/nuxt/components-slots-exercise/ - 2024-03-07 06:34:25\n\t- you can define slot defaults like this:##slotdefault\n\t- live-refactoring\n\t- format\n\t\t- we did template/script/style for a long time\n\t\t\t- today it is mostly script/template/style\n\t\t\t- with Tailwind one has script/template(style)\n\t- genericizes##generiziesit\n\t- defineProps##definaprop\n\t- sends in what he needs##sendinwhat\n\t- implementing v-model, assign value in parent level##ssignstopar\n\t- \"So what we ultimately want to do is say, hey, something has changed in the child component, so tell the parent component that it changed. So how do we do that. For those new to Vue 3, we also have this thing called emit. We get to define a series of custom events that we are going to be emitting from the child component. This might be a bit odd for those who come from a React background, since React developers are used to passing functions down the children to trigger events in the parent. I know for React developers emitting events to parents is a bit of a maze twisty turn, but you realize that event based programming in this way is actually more how the web works.\"\n\t- how v-model works##howvmodelworks\n\t- emit event##createemiakt\n\t- respond to emitted event##todlistuses\n- https://frontendmasters.com/courses/nuxt/auto-imports-global-components/ - 2024-03-07 07:02:19\n\t- you can have two script blocks\n\t- in Nuxt, you don't need to import custom components (!)##dontneeds\n\t- but if you put it in `global`, it will be part of the payload everywhere##ifblogalb\n\t\t- \"Everytime you hear in tech a never or an absolute, it's probably worth questioning, since there are often cases in which a counter-solution works very well, e.g. a base button component that is used in 90% of your application.\"\n\t- \"I know it's possible to group components by folders. In my personal opinion, however, you should try to avoid this whenever humanly possible, because when you start letting developers group comopnents by folders, they start to get lazy about naming and then your folder structure gets heavily nested. And when you have that happen with a team that's spread across the world working in different time zones solving tickets in silo, you will find yourself having 50 different button components where roughly 40 of them do the same thing. Instead, keep your component folders as flat as possible, preferably have only one, since whenever someone tries to create a duplicate component, they'll immediately get blocked because you can't name the same file with the same name in the same folder.\" //quote\n- https://frontendmasters.com/courses/nuxt/routing-with-nuxtpage - 2024-03-07 07:37:11\n\t- \"you're probably thinking at this point, we need some routes\"\n\t- \"pages is the game changer for everything\"\n\t- even without app.vue i.e. without `<NuxtPage/>`, pages sill loads##pagelosakjd\n\t\t- but it shows warning:##thwarnjdi\n\t- added `<NuxtPage/>` in `app.vue`, now no warning but no styling##pagesokks\n\t- NuxtPage is like a slot\n\t- you just have to put pages in /pages and they work##justhavijtopu\n- https://frontendmasters.com/courses/nuxt/routing-exercise/ - 2024-03-07 14:31:57\n\t- for nested routes, you have to just put all files under one directory with the name of your parent route##threthree\n- https://frontendmasters.com/courses/nuxt/composables/ - 2024-03-07 15:03:52\n\t- \"getting parameters from your route is probably the next thing you are looking to do in your app\"\n\t- mentions moment.js\n\t- \"composables are a type of utility that uses composition API\"\n\t- you can get infos from useRoute##getfullpath\n\t\t- useRoute is a composable\n\t- how to get queries out of the url##thequerysjsi\n\t- onMounted like useEffect##theuseeffect\n- https://frontendmasters.com/courses/nuxt/photo-gallery-exercise/ - 2024-03-07 16:30:23\n\t- filtering items##filteringkjsdf\n\t- example of a boolean for a query##check234\n- https://frontendmasters.com/courses/nuxt/dynamic-routes/ - 2024-03-07 16:46:28\n\t- get the id and display from JSON file\n\t\t----------------------------------------------------------------------\n\t\t<script setup>\n\t\timport users from \"../../data/users.json\";\n\t\tconst route = useRoute();\n\t\tconst id = Number(route.params.id);\n\t\tconst user = users.find(m => m.employeeID === id);\n\t\t</script>\n\n\t\t<template>\n\t\t\t<p class=\"font-semibold\">{{ user.firstName }} {{ user.lastName }}</p>\n\t\t\t<p class=\"w-[20rem] text-blue-950 italic\">{{ user.notes }}</p>\n\t\t</template>\n\n\t\t<style scoped></style>\t\t\n\t\t----------------------------------------------------------------------\n\t- uses params in conditional rendering\n- https://frontendmasters.com/courses/nuxt/dynamic-routes-exercise/\n\t- exercise\n\t- makes `[id].vue`\n- https://frontendmasters.com/courses/nuxt/layouts/ - 2024-03-07 21:58:40\n\t- \"you need layouts on these pages, other layouts on other pages, and there are only so many v-ifs you can make\"\n\t- multiple layouts##multpllayouts\n\t- layouts act like normal components\n- https://frontendmasters.com/courses/nuxt/layouts-exercise/ - 2024-03-07 22:11:37\n\t- does Bulma styling in a prop\n\t- shadcn/ui didn't work\n- https://frontendmasters.com/courses/nuxt/page-metadata-resources/ - 2024-03-07 22:13:17\n\t- uses `useHead()`\n\t- `<Html>...` works better, makes social media previews##thetitljsk\n\t\t- it has social media previews:##thepreivjas\n- https://frontendmasters.com/courses/nuxt/page-metadata-resources-exercise/ - 2024-03-07 23:22:14\n\t- gets a font from Google##tehfonsjdf\n- https://frontendmasters.com/courses/nuxt/fetching-data-from-an-api/ - 2024-03-07 23:24:04\n\t- shows `useAsyncData()`\n\t- axios works, but not the Nuxt solutions:##custom222\n\t- fix for xmas-tree-highlighting##fixeforxmas\n\t- VIDEO: Data Fetching With Nuxt 3\n\t\t- https://www.youtube.com/watch?v=yk80g6QS30Y\n\t\t- utility\n\t\t\t- $fetch\n\t\t\t\t- includes ofetch\n\t\t\t\t- good for when user interaction is involved\n\t\t\t\t- good for data only used on client side\n\t\t\t\t- $fetch without useAsyncData fetches data twice\n\t\t\t\t\t- on server\n\t\t\t\t\t- again during hydration\n\t\t- composables\n\t\t\t- **useFetch()**\n\t\t\t\t- most straightforward\n\t\t\t\t- useFetch is syntactic sugar for the most common use-case of useAsyncData+$fetch\n\t\t\t- **useAsyncData**\n\t\t\t\t- combined with $fetch, offers more fine-grained control\n\t\t- the data fetched with useFetch works with v-for but it is not an array of objects##thcausoerr\n\t\t- an automatic loading indicator##theloadingind\n\t\t- doesn't work (fixed: it should be **true** not false):##pendingsdj\n\t\t- this works through\n\t\t\t------------------------------------------\n\t\t\tconst { pending, data: products } = await useLazyFetch(\n\t\t\t\t\"https://fakestoreapi.com/products\"\n\t\t\t);\t\t\n\t\t\t------------------------------------------\n\t\t\t- works like this:#gif#thelazyfetch\n\t\t- use for anything not needed immediately on the client and not important for your SEO##anythintnos\n\t\t- DevTools are nice##devtoolsforvue\n\t\t- limit the properties that are fetched:##onlywhatwant\n\t\t- even with Axios, you don't get a simply array of objects##eveninaxios\n\t\t- if you are fetching an object, you can **pick** the properties you want##onlythepicks\n\t\t- so, use **transform for arrays** and **pick for objects**\n\t\t\t- this doesn't prevent all properties from being fetched from the API\n\t\t\t- but does prevent them from being sent from the server to the client\n\t\t- refresh works like this:#gif#refreshexample\n\t\t- example of useAsyncInfo combined with Promise.all and $fetch##useAsyncDatasdf\n- https://frontendmasters.com/courses/nuxt/wrapping-up/\n\t- wrap up\n\t- if you create a **server** directory, you get an API backend\n\t- \"Nuxt modules are one of the best things about the Nuxt ecosystem. Two modules that I want to call out are, first, NuxtContent, which enables you to create a content folder in your directory where you put markdown, CSV and JSON files and NuxtContent makes it easy to parse this data into your page views. The other one is NuxtImage which is a DX improvement on the whole concept of image processing, because as we all know, images are a big issue when it comes to payload. It will actually go out and cut all the images to the sizes you specified so that you don't have to do any work beyond that. Taking that image processing work off our plate is a huge benefit for developers.\" //quote##nuxtmodulskdj\n\t- https://image.nuxt.com\n\t- trying NuxtContent\n\t\t- https://content.nuxt.com/get-started/installation\n\t\t- https://github.com/bencodezen/bencodezen\n\t- unjs\n\t\t- https://unjs.io/packages?q=&order=1&orderBy=title","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-05 00:29:42","systemWhoCreated":"systemUnknown"},{"id":838,"category":"Nuxt","title":"Notes on Ben Hong's TypeScript and Vue 3","body":"- infos\n\t- link: https://frontendmasters.com/courses/vue-typescript\n\t- October 2022\n\t- GitHub: https://github.com/bencodezen/typescript-and-vue-workshop\n\t- Ben's site: https://www.bencodezen.io\n\t- my project (Nuxt): https://github.com/edwardtanguay/nuxtapp002\n\t\t- Live: https://nuxtapp002.vercel.app\n- https://frontendmasters.com/courses/vue-typescript/introduction/\n\t- general info about Ben and course\n- https://frontendmasters.com/courses/vue-typescript/typescript/\n\t- why use TypeScript?\n\t\t- with Vue 2 using TypeScript was difficult, you often ended up using hacks\n\t- this workshop is about integration between TypeScript and Vue\n\t- goal is to progressively use TypeScript\n- https://frontendmasters.com/courses/vue-typescript/repo-vue-cli-setup/\n\t- VSCode extensions (doesn't mention what I use: https://marketplace.visualstudio.com/items?itemName=Wscats.vue)\n\t- says Vite is the modern way to install Vue\n\t- but he will use create-vue or actually **npm init vue@3**\n\t\t- but note##vitecreatevue\n\t- Ben installs like this, without JSX of course##herhowinsl\n\t- even if you are not intending to use TypeScript, set it up with TypeScript anyway, it's easier later if you want to switch\n\t\t- you can progressively opt into TypeScript\n\t- project will have search etc.##theseajsij\n- https://frontendmasters.com/courses/vue-typescript/declaring-prop-types/\n\t- set up one-page vanilla Nuxt site\n\t\t- `npx nuxi init nuxtapp002`\n\t\t- .vscode\n\t\t- .prettierrc\n\t\t- **package.json**\n\t\t\t--------------------------------------\n\t\t    \"dev\": \"nuxt dev -p 4011 -o\",\n\t\t\t--------------------------------------\n\t\t- **app.vue**\n\t\t\t----------------------------------------\n\t\t\t<template>\n\t\t\t\t<Html>\n\t\t\t\t\t<Head>\n\t\t\t\t\t\t<Title>Info Site</Title>\n\t\t\t\t\t</Head>\n\t\t\t\t</Html>\n\t\t\t\t<NuxtPage />\n\t\t\t</template>\t\t\t\n\t\t\t----------------------------------------\n\t\t- **pages/index.vue**\n\t\t\t--------------------------------------\n\t\t\t<template>\n\t\t\t\t<h1>The Info Site</h1>\t\n\t\t\t\t<p>This is the main page.</p>\n\t\t\t</template>\t\t\t\n\t\t\t--------------------------------------\n\t\t- looks like this:##thesiteupsitenuxt\n\t- install Tailwind\n\t\t- https://tailwindcss.com/docs/guides/nuxtjs\n\t\t- `npm install -D tailwindcss postcss autoprefixer`\n\t\t- `npx tailwindcss init`\n\t\t- **nuxt.config.ts**\n\t\t\t------------------------------------------\n\t\t\texport default defineNuxtConfig({\n\t\t\t\tdevtools: { enabled: true },\n\t\t\t\tcss: [\"~/assets/css/main.css\"],\n\t\t\t\tpostcss: {\n\t\t\t\t\tplugins: {\n\t\t\t\t\t\ttailwindcss: {},\n\t\t\t\t\t\tautoprefixer: {},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\t\t\t\n\t\t\t------------------------------------------\n\t\t- **tailwind.config.ts**\n\t\t\t-----------------------------------------------\n\t\t\t/** @type {import('tailwindcss').Config} */\n\t\t\texport default {\n\t\t\t\tcontent: [\n\t\t\t\t\t\"./components/**/*.{js,vue,ts}\",\n\t\t\t\t\t\"./layouts/**/*.vue\",\n\t\t\t\t\t\"./pages/**/*.vue\",\n\t\t\t\t\t\"./plugins/**/*.{js,ts}\",\n\t\t\t\t\t\"./app.vue\",\n\t\t\t\t\t\"./error.vue\",\n\t\t\t\t],\n\t\t\t\ttheme: {\n\t\t\t\t\textend: {},\n\t\t\t\t},\n\t\t\t\tplugins: [],\n\t\t\t};\t\t\t\n\t\t\t-----------------------------------------------\n\t\t- **assets/css/main.css**\n\t\t\t-------------------------------------------\n\t\t\t@tailwind base;\n\t\t\t@tailwind components;\n\t\t\t@tailwind utilities;\n\t\t\t-------------------------------------------\n\t\t- restart\n\t\t\t- `npm run dev`\n\t\t- reset Tailwind site looks like this:##thetailwinreset\n\t- set up pages and style\n\t\t- **components/Header.vue**\n\t\t\t--------------------------------------\n\t\t\t<template>\n\t\t\t\t<h1 class=\"text-2xl py-3 px-6\">Info Site</h1>\n\t\t\t</template>\n\t\t\t--------------------------------------\n\t\t- **components/Nav.vue**\n\t\t\t--------------------------------------\n\t\t\t<template>\n\t\t\t\t<ul class=\"bg-slate-600 px-6 py-2 flex gap-3 mb-3 text-slate-300\">\n\t\t\t\t\t<li><NuxtLink to=\"/\">Welcome</NuxtLink></li>\n\t\t\t\t\t<li><NuxtLink to=\"/info\">Info</NuxtLink></li>\n\t\t\t\t\t<li><NuxtLink to=\"/about\">About</NuxtLink></li>\n\t\t\t\t</ul>\n\t\t\t</template>\n\t\t\t--------------------------------------\n\t\t- **main.css**\n\t\t\t--------------------------------------------------\n\t\t\t@layer base {\n\t\t\t\tbody {\n\t\t\t\t\t@apply bg-slate-500;\n\t\t\t\t}\n\n\t\t\t\tbutton {\n\t\t\t\t\t@apply bg-slate-700 text-slate-300 px-2 py-1 rounded;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbody {\n\t\t\t\ta.router-link-active {\n\t\t\t\t\tcolor: rgb(250, 250, 99);\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t--------------------------------------------------\n\t\t- **app.vue**\n\t\t\t--------------------------------------------\n\t\t\t<Header/>\n\t\t\t<Nav />\n\t\t\t<main class=\"py-2 px-6\">\n\t\t\t\t<NuxtPage />\n\t\t\t</main>\t\t\t\n\t\t\t--------------------------------------------\n\t\t- **pages/index.vue**\n\t\t\t-----------------------------------------\n\t\t\t<template>\n\t\t\t\t<p>Welcome to this site.</p>\n\t\t\t</template>\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **pages/info/index.vue**\n\t\t\t-----------------------------------------\n\t\t\t<template>\n\t\t\t\t<p>This is the info page.</p>\n\t\t\t</template>\t\t\t\n\t\t\t-----------------------------------------\n\t\t- **pages/about/index.vue**\n\t\t\t-----------------------------------------\n\t\t\t<template>\n\t\t\t\t<p>This is the about page.</p>\n\t\t\t</template>\t\t\t\n\t\t\t-----------------------------------------\n\t\t- site looks like this:#gif#thsiejwithsylt\n\t- he is using Options API\n\t\t- lang=\"ts\"\n\t\t- for Options API you need hacks like this##theoptionsapi\n- https://frontendmasters.com/courses/vue-typescript/adding-prop-types-practice/\n\t- more options api\n- https://frontendmasters.com/courses/vue-typescript/using-types-in-multiple-components/ - 2024-03-10 02:03:41\n\t- talks about branches\n\t- strange that he has no semicolons in types##strangdnosemi\n\t- he calls types data shapes\n- https://frontendmasters.com/courses/vue-typescript/computed-properties-methods/ - 2024-03-10 02:07:53\n\t- computed properties\n\t- useful to define what type you are returning##therestuajsu\n\t- type checking in properties##typecheckingin\n- https://frontendmasters.com/courses/vue-typescript/converting-to-typescript-practice/ - 2024-03-10 02:13:25\n\t- talks about interfaces as well\n\t- and generics and factories\n- https://frontendmasters.com/courses/vue-typescript/refactoring-options-api-methods/ - 2024-03-10 08:24:47\n\t- will be doing a transition from Options API to Composition API\n\t\t- both are merely options of structuring components##notreplajdi\n\t- the transition starts with **setup()**##startwithsetups\n\t- data variables become ref variables##datavariablesbecomeref\n\t- can't get /src to work with css##cantgettoksjd\n\t- can't get TypeScript to work in template area##notsinthehtml\n\t- says it's better to use ref() with .value because it's explicit\n\t- with the composition API you can modulize better\n- https://frontendmasters.com/courses/vue-typescript/migrating-to-composition-api-practice/ - 2024-03-10 10:07:59\n\t- converts Options API again to Composition API\n\t- not sure what this return is doing##oddwithreturn\n\t- takes all the **this.** prefixes out\n\t- so says there is a better way to do Composition API, the topic of the rest of the course\n- https://frontendmasters.com/courses/vue-typescript/using-the-script-setup-block/ - 2024-03-10 10:12:29\n\t- the setup goes into the script block\n\t- export default can be deleted\n\t- get rid of the return block entirely\n\t- so the Composition API is reduced to this##countblocksd\n\t- it's not clear how functions and computed are different\n\t- from this point on, it's only Composition API\n- https://frontendmasters.com/courses/vue-typescript/custom-types-exercise/ - 2024-03-10 11:05:39\n\t- defined a custom type##definedthecustomtype\n- https://frontendmasters.com/courses/vue-typescript/custom-types-solution/ - 2024-03-10 11:25:15\n\t- added diet as optional##optionsjdidf\n- https://frontendmasters.com/courses/vue-typescript/types-and-constants-q-a/ - 2024-03-10 11:26:49\n\t- **as const**##needtosdoconst\n\t- now define for dropdown##smmsonow\n- https://frontendmasters.com/courses/vue-typescript/single-source-of-truth-practice/ - 2024-03-10 11:30:45\n\t- doing the same with diet\n\t- import like this##importlikwthis\n- https://frontendmasters.com/courses/vue-typescript/compiler-macros-defineprops/ - 2024-03-10 11:31:48\n\t- compiler macros\n\t- defineProps\n\t- this was experimental in 2022##thsiwasexp\n\t- how to pass typed props##thepropsijdfok\n\t- how to pass a typed object to a component##thenuxtprops\n- https://frontendmasters.com/courses/vue-typescript/compiler-macros-defineemits/ - 2024-03-10 12:08:00\n\t- showing **@click=\"$emit('show-information')\"**\n\t- can't get timeline to work (says it's experimental)##thetimeexpoije\n\t- showing emitting events##emitttingjseven\n- https://frontendmasters.com/courses/vue-typescript/compiler-macros-practice/ - 2024-03-11 11:29:34\n\t- redoes an example similar to the above\n- https://frontendmasters.com/courses/vue-typescript/event-handlers - 2024-03-11 12:36:23\n\t- avoid this because **emit** is buried in your template HTML##avoidemit\n\t- how to emit from child to parent##emitpareje\n- https://frontendmasters.com/courses/vue-typescript/autofocus-form-elements - 2024-03-11 12:43:37\t\n\t- uses **ref=\"elemRestaurantName\"** even though v-model is used##haseventhough\n\t- oh, he uses this for focus, as in React: ##withnaelminvo\n\t- but you also need this##butalsneed\n\t- this is how you programmatically focus an input field in Nuxt##howtofocusjksdi\n- https://frontendmasters.com/courses/vue-typescript/autofocus-practice/ - 2024-03-11 13:17:12\n\t- redoes focus\n- https://frontendmasters.com/courses/vue-typescript/custom-event-handlers/ - 2024-03-11 13:17:57\n\t- v-model is basically syntactic sugar for what I'm about to show you##moduelseyn\n\t- how to highjack v-model##onlyupdaspace\n- https://frontendmasters.com/courses/vue-typescript/custom-event-practice/ - 2024-03-11 13:44:46\n\t- only update value when user hits ENTER\n\t- you can't arbitarily change the event type, it will only register in TypeScript\n\t- two ways to respond to user pressing **Enter** in an input box##twowaystolook\n- https://frontendmasters.com/courses/vue-typescript/global-state-management-with-pinia/ - 2024-03-11 14:05:08\n\t- Pinia: https://pinia.vuejs.org\n\t\t- built for TypeScript\n\t\t- no more mutations as with Vuex\n\t\t- Vuex will eventually be deprecated\n\t- fix hydration errors:##thefixforclien\n\t- can't get async useFetch to work with Pinia##thecantgetpro\n\t- how to use actions:\n\t\t-----------------------------------------------\n\t\texport const appStore = defineStore(\"appStore\", {\n\t\t\tstate: () => ({\n\t\t\t\tskills,\n\t\t\t\tnotes: [\"note one\", \"note two\", \"note three\"],\n\t\t\t}),\n\t\t\tgetters: {\n\t\t\t\tnumberOfSkills: (state): number => {\n\t\t\t\t\treturn state.skills.length;\n\t\t\t\t},\n\t\t\t\tnumberOfNotes: (state): number => {\n\t\t\t\t\treturn state.notes.length;\n\t\t\t\t},\n\t\t\t},\n\t\t\tactions: {\n\t\t\t\tdeleteSkill(skill: Skill) {\n\t\t\t\t\tthis.skills = this.skills.filter((m) => m.idCode !== skill.idCode);\n\t\t\t\t},\n\t\t\t},\n\t\t})(piniaInstance);\t\t\n\t\t-----------------------------------------------\n\t- works like this:#gif#piniadelete\n- https://frontendmasters.com/courses/vue-typescript/creating-a-store-practice/ - 2024-03-11 18:10:06\n\t- makes a new store\n\t- similar to previous step\n- https://frontendmasters.com/courses/vue-typescript/deploying-to-netlify - 2024-03-11 18:14:21\n\t- basic Netlify\n\t- if you have to rollback, it's easy\n- https://frontendmasters.com/courses/vue-typescript/creating-an-edit-page-exercise/\n\t- `npm run gitnvm` \"git nevermind\" = undo last commit##gitnev\n\t- describes exercise\n- https://frontendmasters.com/courses/vue-typescript/creating-an-edit-page-solution/ - 2024-03-11 18:38:02\n\t- form should be a series of values##theshowform\n\t- emits events: edit-dish\n\t- @edit-dish\n\t- getters can receive an argument##thearggett\n- https://frontendmasters.com/courses/vue-typescript/wrapping-up/ - 2024-03-11 20:01:28\n\t- next steps\n\t\t- you could learn more TypeScript\n\t\t- but what we learned is 90% of what one usually needs in Nuxt apps\n\t- a scalable application is one that other developers can understand your code base\n\t\t- easy of maintenance is key\n\t- recommends Vitest","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-09 22:20:59","systemWhoCreated":"systemUnknown"},{"id":839,"category":"Nuxt","title":"Notes on ReaganDev's Nuxt 3 Server Fundamentals course","body":"- infos\n\t- https://www.youtube.com/watch?v=7Rw_ATJQJrI\n\t- topics##nuxtsertopics\n\t- plus H3 topics##plushh3\n\t- my project: https://github.com/edwardtanguay/nuxtapp002\n- nuxt questions\n\t- best way to use parent/child emit?\n\t- advanced Pinia\n\t\t- Pinia with async data?\n\t\t- alternatives to Pinia?\n\t- Nitro?\n\t- H3?\n\t- Quasar with Nuxt?\n\t- best VSCode extension, Color-Bug?\n\t- what are the newest trends in Vue/Nuxt?\n\t- Nuxt authentication\n\t- API: /api/products\n\t- generate command\n\t- layers vs modules\n\t- hooks with hookable (unjs/hookable)\n\t- Pinia, Harlem, XState\n\t- useState is a ref replacement (Pinia vs useState)\n\t- composables\n\t- Route middleware \n\t- slots\n- https://youtu.be/7Rw_ATJQJrI?t=101 - 2024-03-11 21:00:17\n\t- basic API setup\n\t- I have this error in the tsconfig.json file##havethiserro\n\t\t- so, just deleted the tsconfig.json file for now\n\t- when I added it back in, there was no error\n\t- simple API##simplapijddi\n\t- or **test.get.ts**\n\t\t----------------------------------------------\n\t\texport default defineEventHandler((event) => {\n\t\t\treturn 'hello';\n\t\t})\n\t\t----------------------------------------------\n\t- if you don't want the **/api/** in your URL, change /api to /routes##ifdontwantj\n- https://youtu.be/7Rw_ATJQJrI?t=340 - 2024-03-11 22:15:58\n\t- dynamic routes\n\t- **server/api/[id].get.ts**##thedynamicroutes\n- https://youtu.be/7Rw_ATJQJrI?t=523 - 2024-03-11 22:27:27\n\t- nested API routes\n\t- can't get it to return \"api/products\", i.e. \"/\" doesn't work##onlywasnested\n\t- two routes\n\t\t------------------------------------------------\n\t\trouter.get(\n\t\t\t\"/main\",\n\t\t\tdefineEventHandler((event) => {\n\t\t\t\treturn \"return all products\";\n\t\t\t})\n\t\t);\n\n\t\trouter.post(\n\t\t\t\"/main\",\n\t\t\tdefineEventHandler((event) => {\n\t\t\t\treturn \"create product\";\n\t\t\t})\n\t\t);\t\t\n\t\t------------------------------------------------\n- https://youtu.be/7Rw_ATJQJrI?t=886 - 2024-03-11 22:46:31\n\t- dynamic nested api routes\n\t- you could do a **/products** CRUD route like this##producsteslikethis\n\t- if you wanted all routes in one file, you could do it like this:##wennallroutesin\n\t- if you want each route in a separate file, then do it like this:##alltheokprudcks\n\t- and it all works online at Vercel##alsoworksjkdjfon\n- https://youtu.be/7Rw_ATJQJrI?t=1205 - 2024-03-12 00:22:31\n\t- server middleware\n\t- simplest middleware for logging:##thelogingsimple\n\t- how to implement simple authorization##th123auth\n\t- you can thrown an error like this##canthrtorwj\n\t- log if on certain path##logifonpath\n\t- you can change the header like this##changetheheader\n- https://youtu.be/7Rw_ATJQJrI?t=1905 - 2024-03-12 09:19:09\n\t- plugins folder is for Nitro plugins\n\t- you can use Nitro as your webserver even outside Nuxt\n\t- you can prepend text to your HTML with Nitro##thepluginnitro\n\t- he also shows how to connect MongoDB in a plugin:##healsoshowsmong\n- https://youtu.be/7Rw_ATJQJrI?t=2506 - 2024-03-12 10:15:46\n\t- server utils and auto import files\n\t- he adds utilities like this, vanilla style##utlislijlik\n\t- he shows this but it is unnecessary##heshowjbut\n- https://youtu.be/7Rw_ATJQJrI?t=2859 - 2024-03-12 10:32:01\n\t- explore H3 utilities\n\t- H3 utilities only available inside server folder\n\t- how to read the body from a request##thebodysread\n\t- you upload files like this##uplaodkfiles\n\t- how to get query variables##gerquerysdjifd\n\t- this is the structure you can use:##crusdfnuxt\n\t- query parameters are always strings\n\t- change response header##changerespons\n\t- create error##createerrorj\n\t- actually errors will probably have this structure##actuallylikesh\n\t- setCookie##stcook\n\t- also **parseCookies** and **deleteCookie**","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-11 22:04:09","systemWhoCreated":"systemUnknown"},{"id":840,"category":"Nuxt","title":"Notes on Nada Rifki's 100 Things You Should Know About Nuxt 3 article","body":"- infos\n\t- https://www.telerik.com/blogs/100-things-you-should-know-about-nuxt-3\n\t- written June 2023\n- main points\n\t- Vue 2 and Nuxt 2 were deprecated in Dec 2023\n\t- composition API is now the new standard\n\t\t- good TypeScript support\n\t\t- easier to test\n\t- Vue 3 was rewritten with TypeScript\n\t\t- comes with zero-config TypeScript support and auto-generate types\n\t- focuses on bundle size reduction, tree-shaking\n\t- virtual dom is faster\n\t- Nuxt 2 used Webpack 4 and Babel\n\t\t- Nuxt 3 uses Vite and esbuild (instead of Vite, you can use Webpack 5 if you want)\n\t- uses **Nitro**, a server engine\n\t\t- e.g. API routes\n\t- supports layers \n\t\t- https://krutiepatel.com/blog/nuxt-layers-unwrapped\n\t- Nuxt 2, the server was not standalone and relied on the part of the Nuxt core \n\t- Nuxt also offers a Virtual File System (VFS) that enables modules to add templates to this directory without writing them to disk\n\t- has hooking system\n\t\t- https://github.com/unjs/hookable\n\t- Nuxt 2 depended on the Vuex library for global state management\n\t\t- Nuxt 3 has Pinia, Harlem, XState (https://frontendmasters.com/courses/xstate-react/)\n\t- useState is an SSR-friendly alternative to ref#gif#theuserstate\n\t\t- ref vs useState vs Pinia\n\t\t\t- https://www.vuemastery.com/blog/nuxt-3-state-mangement-pinia-vs-usestate/\n\t\t\t\t- use **useState** instead of **ref**\n\t\t\t\t- use **Pinia** instead of **useState**\n\t\t- if now Pinia then:\n\t\t\t- Harlem: https://dev.to/lexpeartha/state-management-in-vue-3-with-harlemjs-3ifj\n\t- Quasar\n\t\t- Quasar is an entire \"ecosystem\" for cross-platform apps (i.e. mobile, desktop and web). Nuxt is just an opinionated way of using Vue.\n\t\t- Quasar is an extremely opinionated ecosystem. For example, with Nuxt, you have the option to choose Vuetify, Tailwind, or PrimeVue. No such option for Quasar. Nuxt has a rich ecosystem of plugins, which is why it is so popular. Quasar gives you far less options.\n\t\t- Quasar is an entire \"ecosystem\" for cross-platform apps (i.e. mobile, desktop and web). Nuxt is just an opinionated way of using Vue. \n\t- Nuxt has templates\n\t\t- https://nuxt.com/templates\n\t- Nuxi\n\t\t- A new command line interface is called Nuxi. It is like the Vue CLI but for Nuxt. A CLI allows you to add modules, plugins, components, pages, etc., to your project. It is also possible to use it to create a new project.\n\t- composables\n\t\t- https://www.youtube.com/watch?v=cWX4b2qD6sg\n\t\t\t- like hooks in React\n\t\t\t- example of composables#gif#composablesexamples\n\t- router middleware\n\t\t- it works like this:#gif#routemiddlewarennn\n\t- `.nuxtignore`\n\t\t- The .nuxtignore file allows Nuxt to disregard layouts, pages, components, composables, and middleware files within your project’s root directory (rootDir) during the build process\n\t- page param validation:#gif#paramvalidation\n\t- social media previews\n\t\t- watching: https://www.youtube.com/watch?v=JGl8kx4n9xc\n\t\t\t- useSeoMeta didn't work##badseosjs\n\t\t- social media previews work with dynamic route but I couldn't get image to work##theslacklinks\n\t- you can add **.client** or **.server** to the page to make it client or server\n\t\t- but what use this has particularly is not clear\n\t- **<NuxtLayout>**\n\t\t- VIDEO: Nuxt 3 Crash Course #6 - Layouts (https://www.youtube.com/watch?v=LZDQhOaBBbk)\n\t\t\t- layouts don't show up at all##layoutsdontsd\n\t\t\t- ok, you just have to of course wrap the body of the page in **<NuxtLayout** and it works#gif#skjfnlayoutwrap\n\t- **<DevOnly>** element works##devonlyworks\n\t- **Teleport** seems interesting##teleportseems\n\t- can't get transitions to work: https://nuxt.com/docs/getting-started/transitions#layout-transitions\n\t- fetching\n\t\t- Concisely, useFetch takes a URL and retrieves the data, while useAsyncData may involve more complex logic. Essentially, useFetch(url) is comparable to useAsyncData(url, () => $fetch(url)), serving as a convenient shortcut for the most frequent use cases.\n\t\t- The $fetch API implemented by Nuxt is powered by ofetch (https://github.com/unjs/ofetch).\n\t\t- When using $fetch in components without wrapping it with useAsyncData, the data will be fetched twice. Initially, the data will be fetched on the server, and during hydration, it will be fetched again on the client side since $fetch does not transfer state from the server to the client. As a result, the data will be fetched twice, once on the server and once on the client, leading to poor performance and inefficiencies. To avoid double data fetching, it’s recommended to use useFetch or useAsyncData in conjunction with $fetch when fetching component data. These approaches provide optimal performance by ensuring that data is fetched only once on the server or client side, depending on the context.\n\t\t- create product API\n\t\t\t- works: http://localhost:4011/api/products\n\t\t- how to immediate get access to data##howimeed\n\t\t- VIDEO: Nuxt 3: Learn about Pinia setup and basics (https://www.youtube.com/watch?v=zsCc8-0-DIs)\n\t\t- VIDEO: Pinia Crash Course : https://www.y\toutube.com/watch?v=u0B9dysw29A&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD\n\t- beginning CRUD##deletinskills\n\t- basic CRUD works with the flow in Vue project: View -> AppStore -> AppModel \n\t\t- AppStore is database-agnostic\n\t- building same CRUD solution in Nuxt project, with Jobs\n\t\t- `npm i -D lowdb`\n- TODO\t\t\t\n\t- nuxt dev tools\n\t\t- https://www.youtube.com/watch?v=oj7i4JUp-DA","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-13 11:22:15","systemWhoCreated":"systemUnknown"},{"id":842,"category":"Nuxt","title":"Notes on Net Ninja's Pinia Crash Course video series","body":"- info\n\t- YouTube\n\t\t- https://www.youtube.com/watch?v=u0B9dysw29A&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD\n\t- GitHub of video project:\n\t\t- https://github.com/iamshaunjp/Pinia-with-Vue-3/blob/lesson-10/src/stores/TaskStore.js\n\t- Vue version: \n\t\t- code: https://github.com/edwardtanguay/vue-pinia-showcase\n\t\t- live: https://vue-pinia-showcase.vercel.app/\n\t- Nuxt version:\n\t\t- code: https://github.com/edwardtanguay/nuxt-learning-showcase\n\t\t- live: https://nuxt-learning-showcase.vercel.app\n- What is Pinia? - https://www.youtube.com/watch?v=u0B9dysw29A&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=1 - 2024-03-13 20:12:04\n\t- just like useContext\n\t- refers to Auth Store\n\t- state can be updated by **actions**\n\t- similar to Vuex but better\n\t\t- no mutations but actions\n\t\t- modular \n\t\t- TypeScript support\n\t\t- hooks into DevTools\n\t- will make task app with JSON file##piniastask\n\t- is a ground up course\n\t- but uses Vue instead of Nuxt\n\t\t- I will do both, follow along with vue and when it works, do it again in my Nuxt site\n- Project Setup - https://www.youtube.com/watch?v=nI7BOwcEUhk&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=2 - 2024-03-13 20:18:17\n\t- set up site\n\t\t- `npm init vue@latest`\n\t\t\t- he does not select TypeScript\n\t\t\t- he does not select Pinia (will install later, doesn't want the boiler plate)\n\t\t\t- here's what I selected, simple but with code quality tools: TypeScript, ESLint, Prettier, DevTools##thevueup\n\t- set up site again without prettier, added myself to get tabs to work##redonoprett\n\t- set up site again with vue-router##thrhisrdvue\n\t- start site \n\t\t- `npm i`\n\t\t- **package.json**\n\t\t\t----------------------------------------\n\t\t\t\"dev\": \"vite --port 5124 --open\",\n\t\t\t----------------------------------------\n\t\t- looks like this:##theyoudid222\n\t- publishing to Vercel, worked\n\t- clean up\n\t\t- delete components\n\t\t- App.vue minimized\n\t\t- delete icons folder\n\t\t- delete base.css\n\t\t- empty main.css\n\t\t- delete icon.svg\n\t- installing Tailwind\n\t\t- https://tailwindcss.com/docs/guides/vite#vue\n\t- making components\n\t\t- called Header.vue now MainHeader.vue##allsingjsl\n\t- installing Sass\n\t\t- `npm i sass`\n\t\t- Sass in\n\t- downloaded Google Fonts work##thefontsworks\n- Installing Pinia & Making a Store - https://www.youtube.com/watch?v=8HI_pF4MwUo&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=3 - 2024-03-14 01:21:35\n\t- he does `npm i pinia` but I already have it installed from the setup\n\t- set Pinia up in main.ts##setuppiniajs\n\t- here is the counter store that was added at setup, note it doesn't use **state: () => ({**##thecounterstore\n\t- **stores/AppStore.ts**\n\t\t---------------------------------------------------------\n\t\timport { defineStore } from \"pinia\";\n\n\t\texport const useSkillStore = defineStore(\"skillStore\", {\n\t\t\tstate: () => ({\n\t\t\t\tskills: [\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"angular\",\n\t\t\t\t\t\tname: \"Angular\",\n\t\t\t\t\t\turl: \"https://onespace.pages.dev/techItems?id=36\",\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"together with React and Vue.js one of the three most popular JavaScript frameworks\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"cicd\",\n\t\t\t\t\t\tname: \"CI/CD\",\n\t\t\t\t\t\turl: \"https://about.gitlab.com/topics/ci-cd\",\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"the combined practices of continuous integration (CI) and continuous deployment (CD)\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"react\",\n\t\t\t\t\t\tname: \"React\",\n\t\t\t\t\t\turl: \"https://onespace.pages.dev/techItems?id=2\",\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"currently the most popular front-end JavaScript framework along with Vue and Angular\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"swagger\",\n\t\t\t\t\t\tname: \"Swagger\",\n\t\t\t\t\t\turl: \"https://en.wikipedia.org/wiki/Swagger_(software)\",\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"a suite of tools for API developers created in 2011\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tidCode: \"rest\",\n\t\t\t\t\t\tname: \"REST\",\n\t\t\t\t\t\turl: \"https://en.wikipedia.org/wiki/Representational_state_transfer\",\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"a way to make services on a web available to software and other websites\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t});\t\t\n\t\t---------------------------------------------------------\n- Accessing Store State - https://www.youtube.com/watch?v=9ug3DaR1sHY&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=4 - 2024-03-14 01:32:16\n\t- put data back in JSON file##useappstorej\n\t- here is how you await async data in a Pinia store##spinnerandwait\n\t- here is how it looks:#gif#asyncdatapinia\n\t- animated accounts work well with \"Oh, Vue Icons!\": https://oh-vue-icons.js.org\n\t\t- here's how to import and set them up##iconsjdfhere\n\t\t- you can define various animations and sizes:#gif#animationsjasicons\n\t- adding icons in Nuxt with Nuxt Icon module\n\t\t- `npm i -D nuxt-icon`\n\t\t- **nuxt.config.ts**\n\t\t\t-------------------------------------\n\t\t\tmodules: ['nuxt-icon']\n\t\t\t-------------------------------------\n\t\t- use like this:\n\t\t\t---------------------------------------\n\t\t\t<Icon name=\"uil:github\" class=\"text-2xl text-red-600\" />\n\t\t\t---------------------------------------\n\t\t- search for icons here: https://icones.js.org\n\t\t- how to use **NuxtIcon**##thenuxticonkok\n\t\t- here's how it looks#gif#demonuxticon\n\t- here are the differences between async loading with axios/Pinia in Nuxt and Vue##nuxtvuepinia\n\t- here's how you can decorate the incoming data objects with new properties##decorateskillsexample\n\t- add Zod \n\t\t- `npm i zod`\t\n\t\t- this is how Zod can validate and cleanse data##zodValidateCleanse\n\t\t- and this is how it works:##zodvalidatioclean\t\n\t- converted axios to useFetch##convertosusefetch\n\t- does material icons\n- Getters - https://www.youtube.com/watch?v=FQIGu-w7xZ4&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=5 - 2024-03-14 15:11:39\n\t- a getter gets something\n\t- why use them\n\t\t- they pack logic together\n\t\t- functions which alter the state a bit (filter or reduced properties, etc.)\n\t\t- but the state remains the same\n\t- getters are like computed properties\n\t\t- ARTICLE: Understanding useState in Nuxt 3\n\t\t\t- https://masteringnuxt.com/blog/understanding-usestate-in-nuxt-3\n\t\t\t- two uses of useState\n\t\t\t\t- 1. client-side: sharing state between multiple components\n\t\t\t\t\t- you could also use Vuex (old) or Pinia (new)\n\t\t\t\t\t- useState in **Vue 3**\n\t\t\t\t\t\t- doesn't work##vue3nousestate\n\t\t\t\t\t\t- can't import##vueusestcant\n\t\t\t\t\t\t- installing: `npm install @vue/composition-api vue-composable-utils`\n\t\t\t\t\t\t\t- can't install##sji\n\t\t\t\t\t\t- ok, it doesn't seem that useState is in Vue\n\t\t\t\t\t- useState in **Nuxt**\n\t\t\t\t\t\t- here's some basics of **useState**##usetatenotgosoo\n\t\t\t\t\t\t- **but it wasn't available on the second component until the first component was shown**\n\t\t\t\t\t\t- useState doesn't seem very usable\n\t\t\t\t\t\t- article states: \"Again, useState is not a state management library, and is best used for simpler cases. If you need anything more complex, that’s when you should turn to Pinia!\"\n\t\t\t\t- server-side: sharing state from server to client\n\t\t\t\t\t- it doesn't matter, just use Pinia instead of useState\n\t\t- trying to have one pinia variable that can be changed in one component and be used on another component\n\t\t- a simple property in a Pinia store works like in useContext##asimpleworkliks\n\t\t- here's how ref works with TypeScript:##refwithtypescript\n- Actions - https://www.youtube.com/watch?v=0QN74j3EyQc&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=6 - 2024-03-16 04:20:55\n\t- only **Nuxt 3** has auto-imports, nicht **Vue 3**##nuxtiautoim\n\t- notes that when you import types in Vue 3 or Nuxt 3, you have to use the keyword **type**##typefortypes\n\t- how to preventDefault on a form##prevendefaulon\n\t- getting this error on Vercel:##gettinsjthis\n\t\t- same here reported here: https://github.com/nuxt/vercel-builder/issues/680\n\t\t- also here: https://stackoverflow.com/questions/72666288/i-get-this-serverless-function-has-crashed-when-i-deploy-my-nuxt-js-app-to-ve\n\t- it doesn't always occur\n\t\t- but only on reload\n\t\t- and then not on every reload#gif#fetcherror\n\t- solution was to replace useFetch with axios##solutionwasaxios\n\t\t- axios fix:##solutionuseaxios\n\t- replacing axios with $fetch\n\t\t- useAsyncData also gets this error##alsouseasync\n\t\t- here a summary of Nuxt fetching##thefetchsummm22\n\t- dynamic classes done like this:#gif#dynamicclasssstyles\n- DevTools - https://www.youtube.com/watch?v=hEDdK0L654w&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=7 - 2024-03-16 09:45:07\n\t- DevTools looks different##minandtuto\n\t- not clear how to simply access and change state values\n\t- it seems to have every feature except the one you need: see and change state variables\n\t\t- https://www.vuemastery.com/blog/exploring-the-nuxt-3-devtools/\n\t- this is what I want to find (this is from the video tutorial) but can't find in Nuxt DevTools##wanttofisdfh\n\t- not clear how to view state data in a Pinia store##nodatawsprism\n- Async Actions - https://www.youtube.com/watch?v=ixxSKJi4QXI&list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD&index=8 - 2024-03-16 10:25:31\n\t- going to implement a JSON file\n\t- he puts data outside src##outsidesrsrc\n\t- installs json-server\n\t- setting up Vue3 project with json-server\n\t\t- `npm i json-server@0.17.4`\n\t\t- `npm i -D concurrently`\n\t\t- **package.json**\n\t\t\t------------------------------------------\n\t\t\t\"scripts\": {\n\t\t\t\t\"dev\": \"conc \\\"npm run api\\\" \\\"npm run frontend\\\"\",\n\t\t\t\t\"frontend\": \"vite --port 5124 --open\",\n\t\t\t\t\"api\": \"json-server --watch ./src/data/skills.json --port 6124\",\t\t\t\n\t\t\t------------------------------------------","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-13 20:48:38","systemWhoCreated":"systemUnknown"},{"id":843,"category":"Vue.js","title":"Notes on Ben Hongs's Vue 3 Fundamentals course","body":"- background\n\t- course is from January 2023\n\t- course repo\n\t\t- https://github.com/bencodezen/complete-intro-to-vue-3-workshop\n- https://frontendmasters.com/courses/vue-fundamentals/introduction\n\t- general introduction\n\t- \"all code is compromise\", i.e. there are always trade-offs for decisions, opinions\n\t\t- always question them\n- https://frontendmasters.com/courses/vue-fundamentals/vue-overview\n\t- Vue has a more approachable way of building apps than React\n\t- what is Vue\n\t\t- a JavaScript framework for building web user interfaces\n\t- why Vue\n\t\t- approachable\n\t\t\t- \"Understanding why Vue.js is described as an approachable framework can be best be achieved by comparing it to other frameowrks. For instance, React goes all in on your ability to use JavaScript. Vue's approach is different, it basically says: why not take HTML and CSS, stuff people already know, and just build on top of that? The result is that you get a different learning curve. With React, the amount of JavaScript you need to have to be productive is pretty high, from looping through arrays in your HTML to understanding functional programming concepts, so there's a decent onboarding curve. With Vue those higher-level JavaScript skills are not necessary and so you're onboarded and making useful websites within in a matter of hours.\" //quote\n\t\t- performant\n\t\t\t- compiler-optimized\n\t\t\t- rarely requires manual optimization\n\t\t\t- when you choose a framework for performance, measure the bottlenecks that will be important for your application\n\t\t- versatile\n\t\t\t- it scales between a library and a full-featured framework\n\t\t\t- it can be used as a CDN or a framework\n\t\t- community first\n\t\t\t- Vue doesn't have a corporation behind it\n\t\t\t- it's driven by what it best for the community instead of the corporation\n\t\t\t- has an international perspective\n\t\t- enterprise proven\n\t\t\t- Apple\n\t\t\t- Google Careers\n\t\t\t- Zoom\n\t\t\t- Nintendo\n- https://frontendmasters.com/courses/vue-fundamentals/creating-a-vue-app","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-18 13:28:07","systemWhoCreated":"systemUnknown"},{"id":845,"category":"MongoDB","title":"Notes on Scott Moss's Introduction to MongoDB course","body":"- background\n\t- course from 2018\n- https://frontendmasters.com/courses/mongodb/course-setup - 2024-02-01 15:08:34\n\t- **install MongoDB Server 7.0 on Windows**\n\t\t- https://www.mongodb.com/try/download/community##theinstalssdfd\n\t\t- clicked MSI file\n\t\t- overwriting old version with 7.0.5\n\t\t- it was running after installed\n\t\t- former databases are gone\n\t\t- but can't start and stop, says \"nnn\"\n\t\t- have 6 and 7##have67\n\t\t- deleting 6##deleke6sdfsdf\n\t\t- reinstalled based on this:\n\t\t\t- https://tanguay-eu.vercel.app/howtos/421\n\t\t- installing mongosh\n\t\t\t- https://www.mongodb.com/try/download/shell\n\t\t\t- had to change ENV variable in PATH to 7.0\n\t\t\t- then `mongosh` works from Hyper Terminal##abeldtoaddfrommong\n\t\t- start Mongo server on Windows\n\t\t\t- it starts up as a service\n\t\t\t- start and stop as a service\n\t\t- installed Mongo fullstack demo site:\n\t\t\t- backend: https://github.com/edwardtanguay/et829-mongodb-backend\n\t\t\t- frontend: https://github.com/edwardtanguay/et829-mongodb-frontend\t\t\n\t- **install MongoDB Server 7.0 on Ubuntu**\n\t\t- uninstalling MongoDB on Ubuntu\n\t\t\t- sudo service mongod status\n\t\t\t- sudo service mongod stop\n\t\t\t- sudo apt-get purge mongodb-org*\n\t\t\t- sudo rm -r /var/log/mongodb /var/lib/mongodb\n\t\t\t- sudo service mongod status\n\t\t\t  - (should say: Unit mongod.service could not be found.)\n\t\t- install MongoDB on Ubuntu\n\t\t  - https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu\n\t\t  - `sudo apt-get install gnupg curl`\n\t\t  - import the MongoDB public GPG key \n\t\t\t------------------------------------\n\t\t\tcurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \\\n\t\t\tsudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \\\n\t\t\t--dearmor\n\t\t\t------------------------------------\n\t\t  - create list file for MongoDB\n\t\t\t------------------------------------\n\t\t\techo \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\t\t\t------------------------------------ \n\t\t  - `sudo apt-get update`\n\t\t- setup\n\t\t  - `sudo systemctl start mongod`\n\t\t  - `sudo systemctl enable mongod`\n\t\t- start\n\t\t  - `mongosh`\n\t\t- install Compass on Ubuntu\n\t\t\t- https://tanguay-eu.vercel.app/howtos/421\n\t- I got my own site up and running here:\n\t\t- https://tanguay-eu.vercel.app/howtos/824\n- https://frontendmasters.com/courses/mongodb/mongo-q-a/\n\t- pros for Mongo\n\t\t- \"The main advantage of MongoDB over SQL databases for me was that it was just easier to get started with. I didn't have to fight a database with all its restrictions to get something going. With MongoDB, in a couple lines you're able to spin up a database and throw some data in it without having to think about things like foreign keys, primary keys, ids, etc. And when it comes to shaping data, it's just JSON so it's really flexible. Whether you use MongoDB or an SQL database in your project is probably going to depend more on whether you have high-writes or high-reads and what kind of read/writes you will have in your application. But I've never run into a problem with MongoDB where I said, I absolutely need SQL now.\" //quote\n\t\t- MongoDB is mostly written in C++ but 19% JavaScript##themoninmongccpp\n\t- @4:44","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-18 13:29:43","systemWhoCreated":"systemUnknown"},{"id":846,"category":"Docker","title":"Notes on Brian Holt's Complete Intro to Containers course","body":"- infos\n\t- course from 2020\n\t- course website\n\t\t- https://btholt.github.io/complete-intro-to-containers\n\t- course repo\n\t\t- https://github.com/btholt/complete-intro-to-containers\n\t- course project files\n\t\t- https://github.com/btholt/projects-for-complete-intro-to-containers\n- https://frontendmasters.com/courses/complete-intro-containers/introduction/ - 2024-03-18 20:41:46\n\t- containers are useful for everyone\n\t- use need some Linux knowledge\n\t- Windows users have more to install\n\t\t- will have to download VirtualBox\n\t- have at least 8GB\n\t- you need a lot of bandwidth\n- https://frontendmasters.com/courses/complete-intro-containers/containers/ - 2024-03-18 20:50:30\n\t- why we need containers\n\t\t- bare metal\n\t\t\t- it's expensive to host physical machines\n\t\t- virtual machines\n\t\t\t- a hosted virtual machine could be attacked by a fork bomb\n\t\t\t- or it could be a leak bug which eats memory\n\t\t\t- you waste a lot of resources\n\t\t\t- you still have to run the server\n\t\t- containers\n\t\t\t- all security features of virtual machines\n\t\t\t- \"So basically what I'm doing is freezing a file system, and dumping it into a container image.\"//quote\n\t\t\t- containers can't access each other, safe from problems like fork bombs\n- https://frontendmasters.com/courses/complete-intro-containers/chroot/ - 2024-03-18 21:10:09\n\t- install Docker Desktop on Ubuntu \n\t\t- https://docs.docker.com/desktop/install/ubuntu\n\t\t- download DEB package\n\t\t- `sudo apt update`\n\t\t- go to Downloads\n\t\t- first install apt directory\n\t\t  - https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository\n\t\t\t- Add Docker's official GPG key:\n\t\t\t  - `sudo apt update`\n\t\t\t  - `sudo apt install ca-certificates curl`\n\t\t\t  - `sudo install -m 0755 -d /etc/apt/keyrings`\n\t\t\t  - `sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc`\n\t\t\t  - `sudo chmod a+r /etc/apt/keyrings/docker.asc`\n\t\t  - Add the repository to Apt sources:\n\t\t\t---------------------------------------------------\n\t\t\techo \\\n\t\t\t  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n\t\t\t  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n\t\t\t  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\t\t\tsudo apt-get update\n\t\t\t---------------------------------------------------\n\t\t- now install the .deb package\n\t\t\t- `sudo apt install ./docker-desktop-4.28.0-amd64.deb`\n\t\t- ignore the message: \"couldn't be accessed by user '_apt'...\"##doignosief\n\t\t- `systemctl --user start docker-desktop`\n\t\t- Accept\n\t\t- so Docker Desktop and Docker Engine are installed\n\t- create container\n\t\t- `docker run -it --name docker-host --rm --privileged ubuntu:bionic`##theimageubuntu22jj\n\t\t- `cat /etc/issue`\n\t\t  - shows the version\t\n\t- \"A container is made possible by three different kernel features put together: chroot, namespaces and c-groups. The chroot commands is used to create a \"chroot jail\" or \"chroot environment\", a directory that is designated as the new root directory for a process, effectively limiting the visibility of the rest of the filesystem hierarchy to that process and its descendants, which allows for isolation and containment of processes and their access to system resources. In a similar way, namespaces provide process isolation so that each process running within a namespace sees only the resources within that namespace. Control groups (or cgroups) enable the management of system resources such as CPU, memory, disk I/O, and network bandwidth, which allow administrators to allocate resources, set limits, and prioritize processes or groups of processes. Typically you're not going to create containers by hand with these tools, this is a wildly wasteful process, but it's a good academic exercise. Docker will do all this for you. Most developers who use Docker have never heard of chroot, namespaces or c-groups.\" //quote\n\t- A container is three different kernel features put together: \n\t\t- **1. chroot** - (or \"change root\"), is formerly known as Linux jails\n\t\t- **2. namespaces**\n\t\t- **3. c-groups**\n\t- **1. chroot**\n\t\t- now he wants to run bash but has to get it first\n\t\t\t- now does it in PowerShell\n\t\t\t- `mkdir my-new-root/lib{,64}`\t\n\t\t\t- copies everything over##copiesallov\n\t\t\t- now he has to copy ls over\n\t\t\t- now ls works##nowitworksh\n\t\t\t- but it is \"jailed\"\n\t\t- now he is doing the same for \"cat\"\n\t\t\t- so chroot is what \"jails\" it##sochroro\n\t- **2. name spaces**\n\t\t- but even with chroot Linux jails, they could still see each other's processes\n\t\t- does tail on text file\n\t\t- opens another process in same container##opensinsame\n\t\t- `ps` and `ps aux`\n\t\t- was able to kill a process in another shell\n\t\t- loading everything you need for a minimum Ubuntu system\n\t\t\t- `sudo apt update`\n\t\t\t- `sudo apt install debootstrap -y`\n\t\t\t- `debootstrap --variant=minbase bionic /better-root`\n\t\t\t\t- takes 3-5 minutes\n\t\t\t\t- this will get you a bare-minimum system that you need to run a debian-based ubuntu\n\t\t\t\t- \"you can chroot directly into it\"\n\t\t\t- so now he has everything, it is hard to tell if you are inside the chroot environment or the normal environment##sonowhassdhdeboot\n\t\t- now will do unshare\n\t\t\t- `unshare --mount --uts --ipc --net --pid --fork --user --map-root-user chroot /better-root bash`\n\t\t\t- now with ps aux he can't see outside of it##notseesk\n\t\t\t- from the host you can see inside the child, but the from the child you can't see out\n\t\t\t- \"typically you're not going to create containers by hand, this is a wildly wasteful process, this is just an academic exercise, Docker will do all this for you\"\n\t- **3. cgroups**\n\t\t- first two are older (around 2000)\n\t\t- cgroups is recent, created at Google\n\t\t- \"control groups\"\n\t\t- you can assign control groups to the environments\n\t\t- install htop##theabpsj\n\t\t- **\"htop is one of my favorite tools\"**\n\t\t- creates new cgroup##newcgroupsdf\n\t\t- now everything is in control group##thefreeaz\n\t\t- checks how much cpu the control group has\n\t\t- now controls how much a control group can use\n\t\t\t- `cgset -r cpu.cfs_period_us=100000 -r cpu.cfs_quota_us=$[ 5000 * $(getconf _NPROCESSORS_ONLN) ] sandbox`\n\t\t- does a fork bomb `yes > /dev/null`, the equivalent of screaming into the void\n\t\t\t- but it can only take up it's allotted amount of CPU\n\t- so we essentially created a container by hand\n\t\t- but most people who use Docker don't know what cgroups are, you don't have to know\n- https://frontendmasters.com/courses/complete-intro-containers/getting-set-up-with-docker - 2024-03-18 23:01:32\n\t- in 2020 Linux didn't have Docker Desktop\n\t- Docker Hub, one of the best parts of Docker \n\t\t- just get \"a container that runs Mongo\"\n\t\t- `docker pull mongo:3`\n- https://frontendmasters.com/courses/complete-intro-containers/docker-images-without-docker/ - 2024-03-18 23:11:27\n\t- will connect to my docker that is running on my docker desktop##wilconjs\n\t- start container in background##starrback\n\t- exported container##exportedconasd\n\t- starts images without Docker##hecnaswithoutdocker\n- https://frontendmasters.com/courses/complete-intro-containers/docker-images-with-docker/ - 2024-03-18 23:16:59\n\t- with docker is much easier\n\t- developers run containers generally\n\t- `docker login`\n\t\t- got error \n\t\t- then `rm ~/.docker/config.json`\n\t\t- then will work\n\t- `docker run --interactive --tty run alpine:3.10`\n\t\t- \"Cannot connect to the Docker daemon at unix:/var/run/docker.sock. Is the docker daemon running?\"\n\t\t- `systemctl start docker`\n\t- can't run on windows either:##nowkowind\n\t- trying to login on windows\n\t\t- `docker ps`\n\t\t\t- \"Cannot connect to the Docker daemon at unix:/var/run/docker.sock. Is the docker daemon running?\"\n\t\t- clicked on docker desktop\n\t\t- trying again: `docker ps`\n\t\t\t- **works**\n\t- same on Ubuntu\n\t\t- started docker desktop\n\t\t- `docker ps`\n\t\t\t- \"Before signing in to Docker Desktop with your Docker ID, you must initialize pass\"\n\t\t\t- using (these instructions](https://docs.docker.com/desktop/get-started/)\n\t\t\t\t- `gpg --generate-key`\n\t\t\t\t- `pass init <your_generated_gpg-id_public_key>`\n\t\t\t\t- then I was able to log in with Desktop\n\t\t\t\t- worked, signed in now\n\t- windows worked:\n\t\t- `docker run -it alpine:3.10`\n\t\t- opened another window with `docker ps` and saw##sawyjeitoverh\n\t\t- stopped the others\n\t\t\t- `docker stop 35e4ac645188`\n\t- containers are emphemeral\n\t- run with command##runmachinewithls\n\t\t- if you don't tell it to run something, it will run the \"cmd\" a default command\n\t- `cat /etc/issue` to find out version\n\t- clear up space\n\t\t- `docker system prune`\n\t- run container detached\n\t\t- `docker run -it --detach ubuntu:bionic`\n\t- you can attach like this:##attachlikethis\n\t\t- if you exit it's stopped\n\t- how to exit container without stopping it\n\t\t- CTRL-P, CTRL-Q\n\t- kill container##killtheconfjs\n\t- to name it\n\t\t- `docker run -it --detach --name mo003 mongo`\n\t- remove the container\n\t\t- `docker kill mo003`\n\t- remove the name\n\t\t- `docker rm mo003`\n\t\t- you can also put `--rm` in the create command\n- https://frontendmasters.com/courses/complete-intro-containers/node-js-on-docker/ - 2024-03-19 09:05:23\n\t- when you start a container with e.g. Node, you care about the version of Linux and the version of Node\n\t- `docker run -it node`\n\t\t- installed v21.7.1 on 2024-03-19\n\t\t- you get into a REPL##getintisrepl\n\t\t- it's JavaScript##itsjsavajso\n\t\t- the container themselves decides what the default command is, i.e. REPL in this case\n\t\t- get out of REPL with CTRL-C twice\n\t\t- enter machine with `docker run -it node bash`\n\t\t- by the way `cat /etc/issue` seems to work on all Linux distributions##catissues\n- https://frontendmasters.com/courses/complete-intro-containers/tags/ - 2024-03-19 09:55:16\t\n\t- tags allow you to get specific version\n\t- tags are not like npm where you have a strict syntax\n\t- there are many##herearemenay\n\t- \"you want to be thinking: how can I capture this moment in time so it doesn't break my feature\" //quote\n\t- there are names like \"stretch-slim\", a reduced version\n\t- stretch is good because you get fixes\n\t- each line are names for the same container\n\t- \"I've never had a minor version of Node break what I'm doing\" //quote\n- https://frontendmasters.com/courses/complete-intro-containers/docker-cli/ - 2024-03-19 10:02:46\n\t- `docker pull jturpin/hollywood`\n\t- `docker run -it jturpin/hollywood hollywood`\n\t- strange that this is not listed in `ps -a`\n\t\t- trying `docker pull node`\n\t\t- now it doesn't have node but has jturpin##nowdfosihave\n\t\t- apparently you have to run it first##apparrunfirst\n\t- `docker inspect node`, shows e.g. the command that runs by default##theeinpsinode\n\t- `docker run -dit node` runs in background\n\t\t- how to pause##sohowpause\n\t- kill all processes\n\t\t- `docker kill $(docker ps -q)`##thekillcommand\n\t- `docker exec`##dockerexec\n\t- docker history##dockisstoy\n\t- docker info, about host computer##dockinfo\n\t- show all processed##showalksaldo\n\t- `docker logs b60977eeb911`\n\t- `docker stop b60977eeb911`\n\t- `docker rm b60977eeb911`\n\t- remove images##remdockrim\t\n\t- `docker container prune`##dockgpru\n\t- delete all images (doesn't warn you)\n\t\t- `docker rmi -f $(docker images -aq)`\n\t\t- although it didn't seem to free any space up on my hard drive\n\t- search with `docker search python`\n- https://frontendmasters.com/courses/complete-intro-containers/dockerfiles-preamble/ - 2024-03-19 10:59:08\n\t- VIDEO: [How to Run MongoDB in Docker](https://www.youtube.com/watch?v=gFjpv-nZO0U)\n\t\t- setup Mongo container##mongosjupand\n\t\t- if you delete the container, you delete all the files as well\n\t\t- so I stopped my local Mongo but couldn't connect with Compass\n\t\t- so stopped and removed\n\t\t- created new Mongo container with volume##nowihvolue\n\t\t- ok, now with the 27017:27017 I was able to connect in Compass##nwitconn\n\t\t- showing how to use VSCode\n\t\t\t- MongoDB extension##themondex\n\t\t\t- connects easily##canconnectto\n\t\t- \"add database\" allows you to manipulate database with JavaScript##theaddadadad\n\t\t\t- works like this:##createhtenisn\n\t\t- now shows Docker Compose\n\t\t\t- didn't work##composedidnswork\n\t\t\t- his works with the name of directory##nameofdolsd\n\t- nnn\n- todo\n\t- install docker engine on debian\n\t\t- https://docs.docker.com/engine/install/debian/","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-18 22:42:38","systemWhoCreated":"systemUnknown"},{"id":847,"category":"Linux","title":"Notes on The Primeagen's Developer Productivity course","body":"- infos\n\t- https://frontendmasters.com/courses/developer-productivity\n\t- from 2021\n\t- course website: https://theprimeagen.github.io/dev-productivity\n\t- course repo: https://github.com/ThePrimeagen/dev-productivity\n- https://frontendmasters.com/courses/developer-productivity/introduction - 2024-03-19 12:37:04\n\t- big interview\n\t\t- mid 2000s, Java on the board\n\t\t- identify all the files that contain this string, recursive\n\t\t\t- that's a solution that works, have you heard of grep?\n\t\t- learn what is the best way to do things, this is the point of this course\n\t\t\t- knowledge that can be used over the course of your career\n\t- most people just stay in VSCode\n\t\t- he used NetBeans\n\t- reduce search fatigue\n\t- \"all things that separate you from working\"\n\t- BTW Factor\n\t\t- vim, tmux, arch\n\t- \"the amount of effort he doesn't have to put into doing mundane tasks is incredible\" //quote\n- https://frontendmasters.com/courses/developer-productivity/the-problem-statement/ - 2024-03-19 12:52:56\n\t- will be using Docker\n\t- his [docker repo](https://github.com/ThePrimeagen/ansible/tree/0e9ec7e31d5bf5c721267a8dccaeea3c1667f3ca)\n\t- zsh [zee sheel]\n\t\t- default on Mac\n\t\t\t- \"ith the release of macOS Catalina (10.15) in 2019, Apple announced that they would be transitioning the default shell from Bash to Zsh (Z shell) for new user accounts. This change was made to comply with licensing issues surrounding Bash\"\n\t- fc: how to make your docker container be removed after it ends; docker run --rm imagename\n\t- fc: how to get your shell; echo $SHELL\n\t- fc: how to change to zsh shell; chsh -s `which zsh`\n\t- shows that it takes a long time to set up zsh, and then you have other thigns to set up as well, goal is to shorten this\n- https://frontendmasters.com/courses/developer-productivity/ansible-overview/ - 2024-03-19 13:15:40\n\t- the problem is you get a new computer\n\t\t- you spend two days setting it up the way you want it\n\t- Ansible YAML##ansibleyaml\n- https://frontendmasters.com/courses/developer-productivity/creating-ansible-tasks-to-install-zsh/ - 2024-03-19 13:20:31\n\t- building the script##moreszosh\n\t- \"so now in one year when I get a new computer, I just run my Ansible script\"\n\t- VIDEO: [Ansible in 100 Seconds](https://www.youtube.com/watch?v=xRMPKQweySE)\n\t\t- has playbooks##ansyaemx\n- https://frontendmasters.com/courses/developer-productivity/install-node-version-split-up-tasks/ - 2024-03-19 13:31:49\n\t- now installs node with Ansible##resinaskall\n\t- when use Ansible and when use a bash script?\n\t\t- if you have to install anything, use Ansible\n\t- but there are going to be too many tasks\n\t\t- creates a .yml file for each task\n\t- Ansible is primarily written in Python\n\t- you just have to install Ansible with a view lines, then do **ansible-pull -U ...** and point to a reposository##youjsugpull\n\t- you can't use Ansible to install an operating system, since it assumes there is an operating system\n\t- Ansible has a \"with\" clause: with Mac do this, with Windows do this\n- https://frontendmasters.com/courses/developer-productivity/store-ssh-auth-keys-with-ansible-vault/ - 2024-03-19 13:45:21\n\t- SSH if difficult, you have to set them up for GitHub and everywhere else\n\t- Ansible has Ansible-Vault\n\t\t- you can store SSH keys in it\n\t- has AES256 so you it is very secure\n\t- you run a playbook like this##runplaybook\n\t\t- see: https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html\n\t- \"I now have all the keys to the kingdom in case things break, in case I lose my phone.\"\n\t-","points":20,"extras":"$rank=4.9;$generalRank=4.6","systemWhenCreated":"2024-03-19 13:57:08","systemWhoCreated":"systemUnknown"}]
